
RoboMas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021ce8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001748  08021ee8  08021ee8  00031ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023630  08023630  00040a34  2**0
                  CONTENTS
  4 .ARM          00000008  08023630  08023630  00033630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023638  08023638  00040a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08023638  08023638  00033638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023650  08023650  00033650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f4  20000000  08023654  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200008f4  08023f48  000408f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000994  08023fe8  00040994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00017098  20000a38  08024088  00040a38  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20017ad0  08024088  00047ad0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040a34  2**0
                  CONTENTS, READONLY
 14 .comment      00000076  00000000  00000000  00040a62  2**0
                  CONTENTS, READONLY
 15 .debug_info   000355f6  00000000  00000000  00040ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000078ad  00000000  00000000  000760ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002578  00000000  00000000  0007d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001cbc  00000000  00000000  0007fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00034ac2  00000000  00000000  00081bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003349a  00000000  00000000  000b6676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00121a53  00000000  00000000  000e9b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a9b4  00000000  00000000  0020b564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  00215f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000a38 	.word	0x20000a38
 800021c:	00000000 	.word	0x00000000
 8000220:	08021ed0 	.word	0x08021ed0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000a3c 	.word	0x20000a3c
 800023c:	08021ed0 	.word	0x08021ed0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_frsub>:
 8000310:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__addsf3>
 8000316:	bf00      	nop

08000318 <__aeabi_fsub>:
 8000318:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800031c <__addsf3>:
 800031c:	0042      	lsls	r2, r0, #1
 800031e:	bf1f      	itttt	ne
 8000320:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000324:	ea92 0f03 	teqne	r2, r3
 8000328:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800032c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000330:	d06a      	beq.n	8000408 <__addsf3+0xec>
 8000332:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000336:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800033a:	bfc1      	itttt	gt
 800033c:	18d2      	addgt	r2, r2, r3
 800033e:	4041      	eorgt	r1, r0
 8000340:	4048      	eorgt	r0, r1
 8000342:	4041      	eorgt	r1, r0
 8000344:	bfb8      	it	lt
 8000346:	425b      	neglt	r3, r3
 8000348:	2b19      	cmp	r3, #25
 800034a:	bf88      	it	hi
 800034c:	4770      	bxhi	lr
 800034e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000352:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800035a:	bf18      	it	ne
 800035c:	4240      	negne	r0, r0
 800035e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000362:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000366:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800036a:	bf18      	it	ne
 800036c:	4249      	negne	r1, r1
 800036e:	ea92 0f03 	teq	r2, r3
 8000372:	d03f      	beq.n	80003f4 <__addsf3+0xd8>
 8000374:	f1a2 0201 	sub.w	r2, r2, #1
 8000378:	fa41 fc03 	asr.w	ip, r1, r3
 800037c:	eb10 000c 	adds.w	r0, r0, ip
 8000380:	f1c3 0320 	rsb	r3, r3, #32
 8000384:	fa01 f103 	lsl.w	r1, r1, r3
 8000388:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800038c:	d502      	bpl.n	8000394 <__addsf3+0x78>
 800038e:	4249      	negs	r1, r1
 8000390:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000394:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000398:	d313      	bcc.n	80003c2 <__addsf3+0xa6>
 800039a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800039e:	d306      	bcc.n	80003ae <__addsf3+0x92>
 80003a0:	0840      	lsrs	r0, r0, #1
 80003a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80003a6:	f102 0201 	add.w	r2, r2, #1
 80003aa:	2afe      	cmp	r2, #254	; 0xfe
 80003ac:	d251      	bcs.n	8000452 <__addsf3+0x136>
 80003ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80003b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003b6:	bf08      	it	eq
 80003b8:	f020 0001 	biceq.w	r0, r0, #1
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	4770      	bx	lr
 80003c2:	0049      	lsls	r1, r1, #1
 80003c4:	eb40 0000 	adc.w	r0, r0, r0
 80003c8:	3a01      	subs	r2, #1
 80003ca:	bf28      	it	cs
 80003cc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003d0:	d2ed      	bcs.n	80003ae <__addsf3+0x92>
 80003d2:	fab0 fc80 	clz	ip, r0
 80003d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003da:	ebb2 020c 	subs.w	r2, r2, ip
 80003de:	fa00 f00c 	lsl.w	r0, r0, ip
 80003e2:	bfaa      	itet	ge
 80003e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003e8:	4252      	neglt	r2, r2
 80003ea:	4318      	orrge	r0, r3
 80003ec:	bfbc      	itt	lt
 80003ee:	40d0      	lsrlt	r0, r2
 80003f0:	4318      	orrlt	r0, r3
 80003f2:	4770      	bx	lr
 80003f4:	f092 0f00 	teq	r2, #0
 80003f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003fc:	bf06      	itte	eq
 80003fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000402:	3201      	addeq	r2, #1
 8000404:	3b01      	subne	r3, #1
 8000406:	e7b5      	b.n	8000374 <__addsf3+0x58>
 8000408:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800040c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000410:	bf18      	it	ne
 8000412:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000416:	d021      	beq.n	800045c <__addsf3+0x140>
 8000418:	ea92 0f03 	teq	r2, r3
 800041c:	d004      	beq.n	8000428 <__addsf3+0x10c>
 800041e:	f092 0f00 	teq	r2, #0
 8000422:	bf08      	it	eq
 8000424:	4608      	moveq	r0, r1
 8000426:	4770      	bx	lr
 8000428:	ea90 0f01 	teq	r0, r1
 800042c:	bf1c      	itt	ne
 800042e:	2000      	movne	r0, #0
 8000430:	4770      	bxne	lr
 8000432:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000436:	d104      	bne.n	8000442 <__addsf3+0x126>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	bf28      	it	cs
 800043c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000440:	4770      	bx	lr
 8000442:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000446:	bf3c      	itt	cc
 8000448:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800044c:	4770      	bxcc	lr
 800044e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000452:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000456:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800045a:	4770      	bx	lr
 800045c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000460:	bf16      	itet	ne
 8000462:	4608      	movne	r0, r1
 8000464:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000468:	4601      	movne	r1, r0
 800046a:	0242      	lsls	r2, r0, #9
 800046c:	bf06      	itte	eq
 800046e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000472:	ea90 0f01 	teqeq	r0, r1
 8000476:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800047a:	4770      	bx	lr

0800047c <__aeabi_ui2f>:
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e004      	b.n	800048c <__aeabi_i2f+0x8>
 8000482:	bf00      	nop

08000484 <__aeabi_i2f>:
 8000484:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	ea5f 0c00 	movs.w	ip, r0
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000498:	4601      	mov	r1, r0
 800049a:	f04f 0000 	mov.w	r0, #0
 800049e:	e01c      	b.n	80004da <__aeabi_l2f+0x2a>

080004a0 <__aeabi_ul2f>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	e00a      	b.n	80004c4 <__aeabi_l2f+0x14>
 80004ae:	bf00      	nop

080004b0 <__aeabi_l2f>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80004bc:	d502      	bpl.n	80004c4 <__aeabi_l2f+0x14>
 80004be:	4240      	negs	r0, r0
 80004c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c4:	ea5f 0c01 	movs.w	ip, r1
 80004c8:	bf02      	ittt	eq
 80004ca:	4684      	moveq	ip, r0
 80004cc:	4601      	moveq	r1, r0
 80004ce:	2000      	moveq	r0, #0
 80004d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004d4:	bf08      	it	eq
 80004d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004de:	fabc f28c 	clz	r2, ip
 80004e2:	3a08      	subs	r2, #8
 80004e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004e8:	db10      	blt.n	800050c <__aeabi_l2f+0x5c>
 80004ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ee:	4463      	add	r3, ip
 80004f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	f020 0001 	biceq.w	r0, r0, #1
 800050a:	4770      	bx	lr
 800050c:	f102 0220 	add.w	r2, r2, #32
 8000510:	fa01 fc02 	lsl.w	ip, r1, r2
 8000514:	f1c2 0220 	rsb	r2, r2, #32
 8000518:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800051c:	fa21 f202 	lsr.w	r2, r1, r2
 8000520:	eb43 0002 	adc.w	r0, r3, r2
 8000524:	bf08      	it	eq
 8000526:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800052a:	4770      	bx	lr

0800052c <__aeabi_ldivmod>:
 800052c:	b97b      	cbnz	r3, 800054e <__aeabi_ldivmod+0x22>
 800052e:	b972      	cbnz	r2, 800054e <__aeabi_ldivmod+0x22>
 8000530:	2900      	cmp	r1, #0
 8000532:	bfbe      	ittt	lt
 8000534:	2000      	movlt	r0, #0
 8000536:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800053a:	e006      	blt.n	800054a <__aeabi_ldivmod+0x1e>
 800053c:	bf08      	it	eq
 800053e:	2800      	cmpeq	r0, #0
 8000540:	bf1c      	itt	ne
 8000542:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000546:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800054a:	f000 b9bb 	b.w	80008c4 <__aeabi_idiv0>
 800054e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000552:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000556:	2900      	cmp	r1, #0
 8000558:	db09      	blt.n	800056e <__aeabi_ldivmod+0x42>
 800055a:	2b00      	cmp	r3, #0
 800055c:	db1a      	blt.n	8000594 <__aeabi_ldivmod+0x68>
 800055e:	f000 f84d 	bl	80005fc <__udivmoddi4>
 8000562:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056a:	b004      	add	sp, #16
 800056c:	4770      	bx	lr
 800056e:	4240      	negs	r0, r0
 8000570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	db1b      	blt.n	80005b0 <__aeabi_ldivmod+0x84>
 8000578:	f000 f840 	bl	80005fc <__udivmoddi4>
 800057c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000584:	b004      	add	sp, #16
 8000586:	4240      	negs	r0, r0
 8000588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058c:	4252      	negs	r2, r2
 800058e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000592:	4770      	bx	lr
 8000594:	4252      	negs	r2, r2
 8000596:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059a:	f000 f82f 	bl	80005fc <__udivmoddi4>
 800059e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005a6:	b004      	add	sp, #16
 80005a8:	4240      	negs	r0, r0
 80005aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ae:	4770      	bx	lr
 80005b0:	4252      	negs	r2, r2
 80005b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b6:	f000 f821 	bl	80005fc <__udivmoddi4>
 80005ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005c2:	b004      	add	sp, #16
 80005c4:	4252      	negs	r2, r2
 80005c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ca:	4770      	bx	lr

080005cc <__aeabi_uldivmod>:
 80005cc:	b953      	cbnz	r3, 80005e4 <__aeabi_uldivmod+0x18>
 80005ce:	b94a      	cbnz	r2, 80005e4 <__aeabi_uldivmod+0x18>
 80005d0:	2900      	cmp	r1, #0
 80005d2:	bf08      	it	eq
 80005d4:	2800      	cmpeq	r0, #0
 80005d6:	bf1c      	itt	ne
 80005d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005e0:	f000 b970 	b.w	80008c4 <__aeabi_idiv0>
 80005e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005ec:	f000 f806 	bl	80005fc <__udivmoddi4>
 80005f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005f8:	b004      	add	sp, #16
 80005fa:	4770      	bx	lr

080005fc <__udivmoddi4>:
 80005fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000600:	9e08      	ldr	r6, [sp, #32]
 8000602:	460d      	mov	r5, r1
 8000604:	4604      	mov	r4, r0
 8000606:	460f      	mov	r7, r1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d14a      	bne.n	80006a2 <__udivmoddi4+0xa6>
 800060c:	428a      	cmp	r2, r1
 800060e:	4694      	mov	ip, r2
 8000610:	d965      	bls.n	80006de <__udivmoddi4+0xe2>
 8000612:	fab2 f382 	clz	r3, r2
 8000616:	b143      	cbz	r3, 800062a <__udivmoddi4+0x2e>
 8000618:	fa02 fc03 	lsl.w	ip, r2, r3
 800061c:	f1c3 0220 	rsb	r2, r3, #32
 8000620:	409f      	lsls	r7, r3
 8000622:	fa20 f202 	lsr.w	r2, r0, r2
 8000626:	4317      	orrs	r7, r2
 8000628:	409c      	lsls	r4, r3
 800062a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800062e:	fa1f f58c 	uxth.w	r5, ip
 8000632:	fbb7 f1fe 	udiv	r1, r7, lr
 8000636:	0c22      	lsrs	r2, r4, #16
 8000638:	fb0e 7711 	mls	r7, lr, r1, r7
 800063c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000640:	fb01 f005 	mul.w	r0, r1, r5
 8000644:	4290      	cmp	r0, r2
 8000646:	d90a      	bls.n	800065e <__udivmoddi4+0x62>
 8000648:	eb1c 0202 	adds.w	r2, ip, r2
 800064c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000650:	f080 811c 	bcs.w	800088c <__udivmoddi4+0x290>
 8000654:	4290      	cmp	r0, r2
 8000656:	f240 8119 	bls.w	800088c <__udivmoddi4+0x290>
 800065a:	3902      	subs	r1, #2
 800065c:	4462      	add	r2, ip
 800065e:	1a12      	subs	r2, r2, r0
 8000660:	b2a4      	uxth	r4, r4
 8000662:	fbb2 f0fe 	udiv	r0, r2, lr
 8000666:	fb0e 2210 	mls	r2, lr, r0, r2
 800066a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800066e:	fb00 f505 	mul.w	r5, r0, r5
 8000672:	42a5      	cmp	r5, r4
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x90>
 8000676:	eb1c 0404 	adds.w	r4, ip, r4
 800067a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800067e:	f080 8107 	bcs.w	8000890 <__udivmoddi4+0x294>
 8000682:	42a5      	cmp	r5, r4
 8000684:	f240 8104 	bls.w	8000890 <__udivmoddi4+0x294>
 8000688:	4464      	add	r4, ip
 800068a:	3802      	subs	r0, #2
 800068c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	2100      	movs	r1, #0
 8000694:	b11e      	cbz	r6, 800069e <__udivmoddi4+0xa2>
 8000696:	40dc      	lsrs	r4, r3
 8000698:	2300      	movs	r3, #0
 800069a:	e9c6 4300 	strd	r4, r3, [r6]
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d908      	bls.n	80006b8 <__udivmoddi4+0xbc>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	f000 80ed 	beq.w	8000886 <__udivmoddi4+0x28a>
 80006ac:	2100      	movs	r1, #0
 80006ae:	e9c6 0500 	strd	r0, r5, [r6]
 80006b2:	4608      	mov	r0, r1
 80006b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b8:	fab3 f183 	clz	r1, r3
 80006bc:	2900      	cmp	r1, #0
 80006be:	d149      	bne.n	8000754 <__udivmoddi4+0x158>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d302      	bcc.n	80006ca <__udivmoddi4+0xce>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	f200 80f8 	bhi.w	80008ba <__udivmoddi4+0x2be>
 80006ca:	1a84      	subs	r4, r0, r2
 80006cc:	eb65 0203 	sbc.w	r2, r5, r3
 80006d0:	2001      	movs	r0, #1
 80006d2:	4617      	mov	r7, r2
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d0e2      	beq.n	800069e <__udivmoddi4+0xa2>
 80006d8:	e9c6 4700 	strd	r4, r7, [r6]
 80006dc:	e7df      	b.n	800069e <__udivmoddi4+0xa2>
 80006de:	b902      	cbnz	r2, 80006e2 <__udivmoddi4+0xe6>
 80006e0:	deff      	udf	#255	; 0xff
 80006e2:	fab2 f382 	clz	r3, r2
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f040 8090 	bne.w	800080c <__udivmoddi4+0x210>
 80006ec:	1a8a      	subs	r2, r1, r2
 80006ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f2:	fa1f fe8c 	uxth.w	lr, ip
 80006f6:	2101      	movs	r1, #1
 80006f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80006fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000700:	0c22      	lsrs	r2, r4, #16
 8000702:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000706:	fb0e f005 	mul.w	r0, lr, r5
 800070a:	4290      	cmp	r0, r2
 800070c:	d908      	bls.n	8000720 <__udivmoddi4+0x124>
 800070e:	eb1c 0202 	adds.w	r2, ip, r2
 8000712:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000716:	d202      	bcs.n	800071e <__udivmoddi4+0x122>
 8000718:	4290      	cmp	r0, r2
 800071a:	f200 80cb 	bhi.w	80008b4 <__udivmoddi4+0x2b8>
 800071e:	4645      	mov	r5, r8
 8000720:	1a12      	subs	r2, r2, r0
 8000722:	b2a4      	uxth	r4, r4
 8000724:	fbb2 f0f7 	udiv	r0, r2, r7
 8000728:	fb07 2210 	mls	r2, r7, r0, r2
 800072c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000730:	fb0e fe00 	mul.w	lr, lr, r0
 8000734:	45a6      	cmp	lr, r4
 8000736:	d908      	bls.n	800074a <__udivmoddi4+0x14e>
 8000738:	eb1c 0404 	adds.w	r4, ip, r4
 800073c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000740:	d202      	bcs.n	8000748 <__udivmoddi4+0x14c>
 8000742:	45a6      	cmp	lr, r4
 8000744:	f200 80bb 	bhi.w	80008be <__udivmoddi4+0x2c2>
 8000748:	4610      	mov	r0, r2
 800074a:	eba4 040e 	sub.w	r4, r4, lr
 800074e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000752:	e79f      	b.n	8000694 <__udivmoddi4+0x98>
 8000754:	f1c1 0720 	rsb	r7, r1, #32
 8000758:	408b      	lsls	r3, r1
 800075a:	fa22 fc07 	lsr.w	ip, r2, r7
 800075e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000762:	fa05 f401 	lsl.w	r4, r5, r1
 8000766:	fa20 f307 	lsr.w	r3, r0, r7
 800076a:	40fd      	lsrs	r5, r7
 800076c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000770:	4323      	orrs	r3, r4
 8000772:	fbb5 f8f9 	udiv	r8, r5, r9
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	fb09 5518 	mls	r5, r9, r8, r5
 800077e:	0c1c      	lsrs	r4, r3, #16
 8000780:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000784:	fb08 f50e 	mul.w	r5, r8, lr
 8000788:	42a5      	cmp	r5, r4
 800078a:	fa02 f201 	lsl.w	r2, r2, r1
 800078e:	fa00 f001 	lsl.w	r0, r0, r1
 8000792:	d90b      	bls.n	80007ac <__udivmoddi4+0x1b0>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800079c:	f080 8088 	bcs.w	80008b0 <__udivmoddi4+0x2b4>
 80007a0:	42a5      	cmp	r5, r4
 80007a2:	f240 8085 	bls.w	80008b0 <__udivmoddi4+0x2b4>
 80007a6:	f1a8 0802 	sub.w	r8, r8, #2
 80007aa:	4464      	add	r4, ip
 80007ac:	1b64      	subs	r4, r4, r5
 80007ae:	b29d      	uxth	r5, r3
 80007b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007b4:	fb09 4413 	mls	r4, r9, r3, r4
 80007b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80007c0:	45a6      	cmp	lr, r4
 80007c2:	d908      	bls.n	80007d6 <__udivmoddi4+0x1da>
 80007c4:	eb1c 0404 	adds.w	r4, ip, r4
 80007c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80007cc:	d26c      	bcs.n	80008a8 <__udivmoddi4+0x2ac>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	d96a      	bls.n	80008a8 <__udivmoddi4+0x2ac>
 80007d2:	3b02      	subs	r3, #2
 80007d4:	4464      	add	r4, ip
 80007d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007da:	fba3 9502 	umull	r9, r5, r3, r2
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	42ac      	cmp	r4, r5
 80007e4:	46c8      	mov	r8, r9
 80007e6:	46ae      	mov	lr, r5
 80007e8:	d356      	bcc.n	8000898 <__udivmoddi4+0x29c>
 80007ea:	d053      	beq.n	8000894 <__udivmoddi4+0x298>
 80007ec:	b156      	cbz	r6, 8000804 <__udivmoddi4+0x208>
 80007ee:	ebb0 0208 	subs.w	r2, r0, r8
 80007f2:	eb64 040e 	sbc.w	r4, r4, lr
 80007f6:	fa04 f707 	lsl.w	r7, r4, r7
 80007fa:	40ca      	lsrs	r2, r1
 80007fc:	40cc      	lsrs	r4, r1
 80007fe:	4317      	orrs	r7, r2
 8000800:	e9c6 7400 	strd	r7, r4, [r6]
 8000804:	4618      	mov	r0, r3
 8000806:	2100      	movs	r1, #0
 8000808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080c:	f1c3 0120 	rsb	r1, r3, #32
 8000810:	fa02 fc03 	lsl.w	ip, r2, r3
 8000814:	fa20 f201 	lsr.w	r2, r0, r1
 8000818:	fa25 f101 	lsr.w	r1, r5, r1
 800081c:	409d      	lsls	r5, r3
 800081e:	432a      	orrs	r2, r5
 8000820:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000824:	fa1f fe8c 	uxth.w	lr, ip
 8000828:	fbb1 f0f7 	udiv	r0, r1, r7
 800082c:	fb07 1510 	mls	r5, r7, r0, r1
 8000830:	0c11      	lsrs	r1, r2, #16
 8000832:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000836:	fb00 f50e 	mul.w	r5, r0, lr
 800083a:	428d      	cmp	r5, r1
 800083c:	fa04 f403 	lsl.w	r4, r4, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x258>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800084a:	d22f      	bcs.n	80008ac <__udivmoddi4+0x2b0>
 800084c:	428d      	cmp	r5, r1
 800084e:	d92d      	bls.n	80008ac <__udivmoddi4+0x2b0>
 8000850:	3802      	subs	r0, #2
 8000852:	4461      	add	r1, ip
 8000854:	1b49      	subs	r1, r1, r5
 8000856:	b292      	uxth	r2, r2
 8000858:	fbb1 f5f7 	udiv	r5, r1, r7
 800085c:	fb07 1115 	mls	r1, r7, r5, r1
 8000860:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000864:	fb05 f10e 	mul.w	r1, r5, lr
 8000868:	4291      	cmp	r1, r2
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x282>
 800086c:	eb1c 0202 	adds.w	r2, ip, r2
 8000870:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000874:	d216      	bcs.n	80008a4 <__udivmoddi4+0x2a8>
 8000876:	4291      	cmp	r1, r2
 8000878:	d914      	bls.n	80008a4 <__udivmoddi4+0x2a8>
 800087a:	3d02      	subs	r5, #2
 800087c:	4462      	add	r2, ip
 800087e:	1a52      	subs	r2, r2, r1
 8000880:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000884:	e738      	b.n	80006f8 <__udivmoddi4+0xfc>
 8000886:	4631      	mov	r1, r6
 8000888:	4630      	mov	r0, r6
 800088a:	e708      	b.n	800069e <__udivmoddi4+0xa2>
 800088c:	4639      	mov	r1, r7
 800088e:	e6e6      	b.n	800065e <__udivmoddi4+0x62>
 8000890:	4610      	mov	r0, r2
 8000892:	e6fb      	b.n	800068c <__udivmoddi4+0x90>
 8000894:	4548      	cmp	r0, r9
 8000896:	d2a9      	bcs.n	80007ec <__udivmoddi4+0x1f0>
 8000898:	ebb9 0802 	subs.w	r8, r9, r2
 800089c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008a0:	3b01      	subs	r3, #1
 80008a2:	e7a3      	b.n	80007ec <__udivmoddi4+0x1f0>
 80008a4:	4645      	mov	r5, r8
 80008a6:	e7ea      	b.n	800087e <__udivmoddi4+0x282>
 80008a8:	462b      	mov	r3, r5
 80008aa:	e794      	b.n	80007d6 <__udivmoddi4+0x1da>
 80008ac:	4640      	mov	r0, r8
 80008ae:	e7d1      	b.n	8000854 <__udivmoddi4+0x258>
 80008b0:	46d0      	mov	r8, sl
 80008b2:	e77b      	b.n	80007ac <__udivmoddi4+0x1b0>
 80008b4:	3d02      	subs	r5, #2
 80008b6:	4462      	add	r2, ip
 80008b8:	e732      	b.n	8000720 <__udivmoddi4+0x124>
 80008ba:	4608      	mov	r0, r1
 80008bc:	e70a      	b.n	80006d4 <__udivmoddi4+0xd8>
 80008be:	4464      	add	r4, ip
 80008c0:	3802      	subs	r0, #2
 80008c2:	e742      	b.n	800074a <__udivmoddi4+0x14e>

080008c4 <__aeabi_idiv0>:
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <PushTx8Bytes+0xa0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a24      	ldr	r2, [pc, #144]	; (800096c <PushTx8Bytes+0xa4>)
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	4413      	add	r3, r2
 80008de:	3304      	adds	r3, #4
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <PushTx8Bytes+0xa0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a20      	ldr	r2, [pc, #128]	; (800096c <PushTx8Bytes+0xa4>)
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4413      	add	r3, r2
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 80008f2:	2300      	movs	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
 80008f6:	e010      	b.n	800091a <PushTx8Bytes+0x52>
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	18d1      	adds	r1, r2, r3
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <PushTx8Bytes+0xa0>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	7808      	ldrb	r0, [r1, #0]
 8000906:	4919      	ldr	r1, [pc, #100]	; (800096c <PushTx8Bytes+0xa4>)
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	440a      	add	r2, r1
 800090c:	4413      	add	r3, r2
 800090e:	3308      	adds	r3, #8
 8000910:	4602      	mov	r2, r0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	3301      	adds	r3, #1
 8000918:	75fb      	strb	r3, [r7, #23]
 800091a:	7dfb      	ldrb	r3, [r7, #23]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	429a      	cmp	r2, r3
 8000920:	d8ea      	bhi.n	80008f8 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <PushTx8Bytes+0xa8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d106      	bne.n	8000938 <PushTx8Bytes+0x70>
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <PushTx8Bytes+0xac>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000934:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <PushTx8Bytes+0xac>)
 8000936:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <PushTx8Bytes+0xa0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <PushTx8Bytes+0xa0>)
 8000944:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <PushTx8Bytes+0xa0>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <PushTx8Bytes+0xac>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d102      	bne.n	8000958 <PushTx8Bytes+0x90>
		isfull = 1;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <PushTx8Bytes+0xa8>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	371c      	adds	r7, #28
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20002d2c 	.word	0x20002d2c
 800096c:	20000d28 	.word	0x20000d28
 8000970:	20002d30 	.word	0x20002d30
 8000974:	20002d28 	.word	0x20002d28

08000978 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(CAN_HandleTypeDef* phcan){
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000984:	2304      	movs	r3, #4
 8000986:	617b      	str	r3, [r7, #20]
	txHeader.TransmitGlobalTime = DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3020 	strb.w	r3, [r7, #32]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 800098e:	e039      	b.n	8000a04 <PopSendTx8Bytes+0x8c>
		if (isfull == 0 && readpoint == writepoint)break;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <PopSendTx8Bytes+0xa8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d105      	bne.n	80009a4 <PopSendTx8Bytes+0x2c>
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <PopSendTx8Bytes+0xac>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <PopSendTx8Bytes+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d036      	beq.n	8000a12 <PopSendTx8Bytes+0x9a>

		txHeader.DLC = buffer[readpoint].DLC;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <PopSendTx8Bytes+0xb4>)
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	4413      	add	r3, r2
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	61fb      	str	r3, [r7, #28]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <PopSendTx8Bytes+0xb4>)
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	613b      	str	r3, [r7, #16]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	3308      	adds	r3, #8
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <PopSendTx8Bytes+0xb4>)
 80009cc:	441a      	add	r2, r3
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f004 fdb4 	bl	8005544 <HAL_CAN_AddTxMessage>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret != HAL_OK)return ret;
 80009e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <PopSendTx8Bytes+0x78>
 80009ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ee:	e012      	b.n	8000a16 <PopSendTx8Bytes+0x9e>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009fc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <PopSendTx8Bytes+0xa8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f004 fe6d 	bl	80056e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1bf      	bne.n	8000990 <PopSendTx8Bytes+0x18>
 8000a10:	e000      	b.n	8000a14 <PopSendTx8Bytes+0x9c>
		if (isfull == 0 && readpoint == writepoint)break;
 8000a12:	bf00      	nop
	}

	return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20002d30 	.word	0x20002d30
 8000a24:	20002d28 	.word	0x20002d28
 8000a28:	20002d2c 	.word	0x20002d2c
 8000a2c:	20000d28 	.word	0x20000d28

08000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(CAN_HandleTypeDef *phcan){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(phcan != _canlib_phcan)return;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d105      	bne.n	8000a4e <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x1e>
    PopSendTx8Bytes(_canlib_phcan);
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff96 	bl	8000978 <PopSendTx8Bytes>
 8000a4c:	e000      	b.n	8000a50 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x20>
	if(phcan != _canlib_phcan)return;
 8000a4e:	bf00      	nop
}
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000a54 	.word	0x20000a54

08000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(CAN_HandleTypeDef *phcan){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    if(phcan != _canlib_phcan)return;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d105      	bne.n	8000a7a <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x1e>
	PopSendTx8Bytes(_canlib_phcan);
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff80 	bl	8000978 <PopSendTx8Bytes>
 8000a78:	e000      	b.n	8000a7c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x20>
    if(phcan != _canlib_phcan)return;
 8000a7a:	bf00      	nop
}
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000a54 	.word	0x20000a54

08000a88 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a8c:	b08e      	sub	sp, #56	; 0x38
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
//	if(phcan != _canlib_phcan)return;
    CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(_canlib_phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000a94:	4b74      	ldr	r3, [pc, #464]	; (8000c68 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	f107 0218 	add.w	r2, r7, #24
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f004 fe54 	bl	800574e <HAL_CAN_GetRxMessage>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <WhenCANRxFifo0MsgPending+0x2e>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000aac:	486f      	ldr	r0, [pc, #444]	; (8000c6c <WhenCANRxFifo0MsgPending+0x1e4>)
 8000aae:	f020 f817 	bl	8020ae0 <iprintf>
		Error_Handler();
 8000ab2:	f003 fd5d 	bl	8004570 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4698      	mov	r8, r3
 8000abc:	4691      	mov	r9, r2
 8000abe:	4640      	mov	r0, r8
 8000ac0:	4649      	mov	r1, r9
 8000ac2:	f000 fe3c 	bl	800173e <Extract_CAN_Device>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	733a      	strb	r2, [r7, #12]
 8000acc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ad0:	737a      	strb	r2, [r7, #13]
 8000ad2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000ad6:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2200      	movs	r2, #0
 8000adc:	461c      	mov	r4, r3
 8000ade:	4615      	mov	r5, r2
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	f000 fe77 	bl	80017d6 <Extract_CAN_CMD>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000aee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d139      	bne.n	8000b6a <WhenCANRxFifo0MsgPending+0xe2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000afc:	e013      	b.n	8000b26 <WhenCANRxFifo0MsgPending+0x9e>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b06:	495a      	ldr	r1, [pc, #360]	; (8000c70 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000b08:	4603      	mov	r3, r0
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	440b      	add	r3, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	7c3b      	ldrb	r3, [r7, #16]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	f000 80a0 	beq.w	8000c5c <WhenCANRxFifo0MsgPending+0x1d4>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b20:	3301      	adds	r3, #1
 8000b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000b26:	7b3b      	ldrb	r3, [r7, #12]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b52      	ldr	r3, [pc, #328]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b2c:	5c9b      	ldrb	r3, [r3, r2]
 8000b2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d3e3      	bcc.n	8000afe <WhenCANRxFifo0MsgPending+0x76>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	7b3b      	ldrb	r3, [r7, #12]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b40:	5c9b      	ldrb	r3, [r3, r2]
 8000b42:	461c      	mov	r4, r3
 8000b44:	7c38      	ldrb	r0, [r7, #16]
 8000b46:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000b48:	460b      	mov	r3, r1
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	4413      	add	r3, r2
 8000b50:	4423      	add	r3, r4
 8000b52:	4602      	mov	r2, r0
 8000b54:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000b56:	7b3b      	ldrb	r3, [r7, #12]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b5c:	5c9b      	ldrb	r3, [r3, r2]
 8000b5e:	7b3a      	ldrb	r2, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2d9      	uxtb	r1, r3
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b66:	5499      	strb	r1, [r3, r2]
 8000b68:	e04a      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
	}else if(extracted_cmd == FB_CMD){
 8000b6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d146      	bne.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
		if (can_device.node_type == NODE_MCMD1){
 8000b72:	7b3b      	ldrb	r3, [r7, #12]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d10d      	bne.n	8000b94 <WhenCANRxFifo0MsgPending+0x10c>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000b84:	4413      	add	r3, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	cb03      	ldmia	r3!, {r0, r1}
 8000b8e:	6010      	str	r0, [r2, #0]
 8000b90:	6051      	str	r1, [r2, #4]
 8000b92:	e035      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000b94:	7b3b      	ldrb	r3, [r7, #12]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d10d      	bne.n	8000bb6 <WhenCANRxFifo0MsgPending+0x12e>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	7bba      	ldrb	r2, [r7, #14]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4a35      	ldr	r2, [pc, #212]	; (8000c7c <WhenCANRxFifo0MsgPending+0x1f4>)
 8000ba6:	4413      	add	r3, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	cb03      	ldmia	r3!, {r0, r1}
 8000bb0:	6010      	str	r0, [r2, #0]
 8000bb2:	6051      	str	r1, [r2, #4]
 8000bb4:	e024      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000bb6:	7b3b      	ldrb	r3, [r7, #12]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d10d      	bne.n	8000bd8 <WhenCANRxFifo0MsgPending+0x150>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	7bba      	ldrb	r2, [r7, #14]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4a2e      	ldr	r2, [pc, #184]	; (8000c80 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000bc8:	4413      	add	r3, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	cb03      	ldmia	r3!, {r0, r1}
 8000bd2:	6010      	str	r0, [r2, #0]
 8000bd4:	6051      	str	r1, [r2, #4]
 8000bd6:	e013      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d10d      	bne.n	8000bfa <WhenCANRxFifo0MsgPending+0x172>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	7bba      	ldrb	r2, [r7, #14]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <WhenCANRxFifo0MsgPending+0x1fc>)
 8000bea:	4413      	add	r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	cb03      	ldmia	r3!, {r0, r1}
 8000bf4:	6010      	str	r0, [r2, #0]
 8000bf6:	6051      	str	r1, [r2, #4]
 8000bf8:	e002      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000bfa:	4823      	ldr	r0, [pc, #140]	; (8000c88 <WhenCANRxFifo0MsgPending+0x200>)
 8000bfc:	f01f ff70 	bl	8020ae0 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c02:	785a      	ldrb	r2, [r3, #1]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d128      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c0e:	789a      	ldrb	r2, [r3, #2]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d122      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c1a:	78da      	ldrb	r2, [r3, #3]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d11c      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c26:	791a      	ldrb	r2, [r3, #4]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d116      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c32:	795a      	ldrb	r2, [r3, #5]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d110      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c3e:	799a      	ldrb	r2, [r3, #6]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	795b      	ldrb	r3, [r3, #5]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d10a      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c4a:	7a1a      	ldrb	r2, [r3, #8]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	799b      	ldrb	r3, [r3, #6]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d104      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		all_node_detected = 1;
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <WhenCANRxFifo0MsgPending+0x204>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e000      	b.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c5c:	bf00      	nop
	}
}
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c66:	bf00      	nop
 8000c68:	20000a54 	.word	0x20000a54
 8000c6c:	08021ee8 	.word	0x08021ee8
 8000c70:	20000a68 	.word	0x20000a68
 8000c74:	20000a5c 	.word	0x20000a5c
 8000c78:	20000aa8 	.word	0x20000aa8
 8000c7c:	20000b48 	.word	0x20000b48
 8000c80:	20000be8 	.word	0x20000be8
 8000c84:	20000c88 	.word	0x20000c88
 8000c88:	08021f00 	.word	0x08021f00
 8000c8c:	20000a58 	.word	0x20000a58

08000c90 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000cac:	2300      	movs	r3, #0
 8000cae:	77fb      	strb	r3, [r7, #31]
 8000cb0:	e015      	b.n	8000cde <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f7ff fe01 	bl	80008c8 <PushTx8Bytes>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <SendBytes+0x48>
			Error_Handler();
 8000cd0:	f003 fc4e 	bl	8004570 <Error_Handler>
			return ret;
 8000cd4:	7cfb      	ldrb	r3, [r7, #19]
 8000cd6:	e02a      	b.n	8000d2e <SendBytes+0x9e>
	for (uint8_t i = 0; i < quotient; i++){
 8000cd8:	7ffb      	ldrb	r3, [r7, #31]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	77fb      	strb	r3, [r7, #31]
 8000cde:	7ffb      	ldrb	r3, [r7, #31]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d8e5      	bhi.n	8000cb2 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d011      	beq.n	8000d10 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff fde5 	bl	80008c8 <PushTx8Bytes>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000d02:	7cfb      	ldrb	r3, [r7, #19]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <SendBytes+0x80>
			Error_Handler();
 8000d08:	f003 fc32 	bl	8004570 <Error_Handler>
			return ret;
 8000d0c:	7cfb      	ldrb	r3, [r7, #19]
 8000d0e:	e00e      	b.n	8000d2e <SendBytes+0x9e>
		}
	}

	ret = PopSendTx8Bytes(_canlib_phcan);
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <SendBytes+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe2f 	bl	8000978 <PopSendTx8Bytes>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000d1e:	7cfb      	ldrb	r3, [r7, #19]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <SendBytes+0x9c>
		Error_Handler();
 8000d24:	f003 fc24 	bl	8004570 <Error_Handler>
		return ret;
 8000d28:	7cfb      	ldrb	r3, [r7, #19]
 8000d2a:	e000      	b.n	8000d2e <SendBytes+0x9e>
	}

	return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000a54 	.word	0x20000a54

08000d3c <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
    _canlib_phcan = _hcan;
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <CAN_SystemInit+0x30>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <CAN_SystemInit+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d56:	e029      	b.n	8000dac <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000d58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <CAN_SystemInit+0x38>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d68:	e017      	b.n	8000d9a <CAN_SystemInit+0x5e>
 8000d6a:	bf00      	nop
 8000d6c:	20000a54 	.word	0x20000a54
 8000d70:	20000a58 	.word	0x20000a58
 8000d74:	20000a5c 	.word	0x20000a5c
			node_id_list[type][i] = 0xff;
 8000d78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000d7c:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000d80:	48d7      	ldr	r0, [pc, #860]	; (80010e0 <CAN_SystemInit+0x3a4>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	4403      	add	r3, r0
 8000d8a:	440b      	add	r3, r1
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000d90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d94:	3301      	adds	r3, #1
 8000d96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d9ea      	bls.n	8000d78 <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	3301      	adds	r3, #1
 8000da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d9d1      	bls.n	8000d58 <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
	sFilterConfig.FilterBank = 15;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000dcc:	2300      	movs	r3, #0
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fc86 	bl	80016e4 <Make_CAN_ID>
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	0b42      	lsrs	r2, r0, #13
 8000de2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000de6:	0b4b      	lsrs	r3, r1, #13
 8000de8:	4613      	mov	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000dec:	231f      	movs	r3, #31
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 fc76 	bl	80016e4 <Make_CAN_ID>
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	0b42      	lsrs	r2, r0, #13
 8000e02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e06:	0b4b      	lsrs	r3, r1, #13
 8000e08:	4613      	mov	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 fc66 	bl	80016e4 <Make_CAN_ID>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e24:	4013      	ands	r3, r2
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e2c:	231f      	movs	r3, #31
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 fc56 	bl	80016e4 <Make_CAN_ID>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00da      	lsls	r2, r3, #3
 8000e40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e44:	4013      	ands	r3, r2
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000e4c:	4ba5      	ldr	r3, [pc, #660]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f107 020c 	add.w	r2, r7, #12
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 fa44 	bl	80052e4 <HAL_CAN_ConfigFilter>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000e62:	f003 fb85 	bl	8004570 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 16;
 8000e66:	2310      	movs	r3, #16
 8000e68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fc37 	bl	80016e4 <Make_CAN_ID>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	0b42      	lsrs	r2, r0, #13
 8000e80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e84:	0b4b      	lsrs	r3, r1, #13
 8000e86:	4613      	mov	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000e8a:	231f      	movs	r3, #31
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2002      	movs	r0, #2
 8000e92:	f000 fc27 	bl	80016e4 <Make_CAN_ID>
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	0b42      	lsrs	r2, r0, #13
 8000ea0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ea4:	0b4b      	lsrs	r3, r1, #13
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f000 fc17 	bl	80016e4 <Make_CAN_ID>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00da      	lsls	r2, r3, #3
 8000ebe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f000 fc07 	bl	80016e4 <Make_CAN_ID>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4613      	mov	r3, r2
 8000edc:	00da      	lsls	r2, r3, #3
 8000ede:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000eea:	4b7e      	ldr	r3, [pc, #504]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 f9f5 	bl	80052e4 <HAL_CAN_ConfigFilter>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000f00:	f003 fb36 	bl	8004570 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 17;
 8000f04:	2311      	movs	r3, #17
 8000f06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 fbe8 	bl	80016e4 <Make_CAN_ID>
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	0b42      	lsrs	r2, r0, #13
 8000f1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f22:	0b4b      	lsrs	r3, r1, #13
 8000f24:	4613      	mov	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000f28:	231f      	movs	r3, #31
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 fbd8 	bl	80016e4 <Make_CAN_ID>
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	0b42      	lsrs	r2, r0, #13
 8000f3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f42:	0b4b      	lsrs	r3, r1, #13
 8000f44:	4613      	mov	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 fbc8 	bl	80016e4 <Make_CAN_ID>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00da      	lsls	r2, r3, #3
 8000f5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f60:	4013      	ands	r3, r2
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000f68:	231f      	movs	r3, #31
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 fbb8 	bl	80016e4 <Make_CAN_ID>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00da      	lsls	r2, r3, #3
 8000f7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f80:	4013      	ands	r3, r2
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000f88:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f9a6 	bl	80052e4 <HAL_CAN_ConfigFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000f9e:	f003 fae7 	bl	8004570 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 18;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 fb99 	bl	80016e4 <Make_CAN_ID>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	0b42      	lsrs	r2, r0, #13
 8000fbc:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000fc0:	0b4b      	lsrs	r3, r1, #13
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fb89 	bl	80016e4 <Make_CAN_ID>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	0b42      	lsrs	r2, r0, #13
 8000fdc:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000fe0:	0b4b      	lsrs	r3, r1, #13
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fb79 	bl	80016e4 <Make_CAN_ID>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00da      	lsls	r2, r3, #3
 8000ffa:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ffe:	4013      	ands	r3, r2
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001006:	231f      	movs	r3, #31
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2000      	movs	r0, #0
 800100e:	f000 fb69 	bl	80016e4 <Make_CAN_ID>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4613      	mov	r3, r2
 8001018:	00da      	lsls	r2, r3, #3
 800101a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800101e:	4013      	ands	r3, r2
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f004 f957 	bl	80052e4 <HAL_CAN_ConfigFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 800103c:	f003 fa98 	bl	8004570 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 19;
 8001040:	2313      	movs	r3, #19
 8001042:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8001044:	2300      	movs	r3, #0
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2004      	movs	r0, #4
 800104c:	f000 fb4a 	bl	80016e4 <Make_CAN_ID>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	0b42      	lsrs	r2, r0, #13
 800105a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800105e:	0b4b      	lsrs	r3, r1, #13
 8001060:	4613      	mov	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8001064:	231f      	movs	r3, #31
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2004      	movs	r0, #4
 800106c:	f000 fb3a 	bl	80016e4 <Make_CAN_ID>
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	0b42      	lsrs	r2, r0, #13
 800107a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800107e:	0b4b      	lsrs	r3, r1, #13
 8001080:	4613      	mov	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8001084:	2300      	movs	r3, #0
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2004      	movs	r0, #4
 800108c:	f000 fb2a 	bl	80016e4 <Make_CAN_ID>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4613      	mov	r3, r2
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800109c:	4013      	ands	r3, r2
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010a4:	231f      	movs	r3, #31
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2004      	movs	r0, #4
 80010ac:	f000 fb1a 	bl	80016e4 <Make_CAN_ID>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4613      	mov	r3, r2
 80010b6:	00da      	lsls	r2, r3, #3
 80010b8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010bc:	4013      	ands	r3, r2
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <CAN_SystemInit+0x3a8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f107 020c 	add.w	r2, r7, #12
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f908 	bl	80052e4 <HAL_CAN_ConfigFilter>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 80010da:	f003 fa49 	bl	8004570 <Error_Handler>
 80010de:	e003      	b.n	80010e8 <CAN_SystemInit+0x3ac>
 80010e0:	20000a68 	.word	0x20000a68
 80010e4:	20000a54 	.word	0x20000a54
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 20;
 80010e8:	2314      	movs	r3, #20
 80010ea:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80010ec:	2300      	movs	r3, #0
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2005      	movs	r0, #5
 80010f4:	f000 faf6 	bl	80016e4 <Make_CAN_ID>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	0b42      	lsrs	r2, r0, #13
 8001102:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001106:	0b4b      	lsrs	r3, r1, #13
 8001108:	4613      	mov	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 800110c:	231f      	movs	r3, #31
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2005      	movs	r0, #5
 8001114:	f000 fae6 	bl	80016e4 <Make_CAN_ID>
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	0b42      	lsrs	r2, r0, #13
 8001122:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001126:	0b4b      	lsrs	r3, r1, #13
 8001128:	4613      	mov	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800112c:	2300      	movs	r3, #0
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2005      	movs	r0, #5
 8001134:	f000 fad6 	bl	80016e4 <Make_CAN_ID>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4613      	mov	r3, r2
 800113e:	00da      	lsls	r2, r3, #3
 8001140:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001144:	4013      	ands	r3, r2
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800114c:	231f      	movs	r3, #31
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2005      	movs	r0, #5
 8001154:	f000 fac6 	bl	80016e4 <Make_CAN_ID>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4613      	mov	r3, r2
 800115e:	00da      	lsls	r2, r3, #3
 8001160:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001164:	4013      	ands	r3, r2
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <CAN_SystemInit+0x544>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f004 f8b4 	bl	80052e4 <HAL_CAN_ConfigFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8001182:	f003 f9f5 	bl	8004570 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 21;
 8001186:	2315      	movs	r3, #21
 8001188:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 800118a:	2300      	movs	r3, #0
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2006      	movs	r0, #6
 8001192:	f000 faa7 	bl	80016e4 <Make_CAN_ID>
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	0b42      	lsrs	r2, r0, #13
 80011a0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011a4:	0b4b      	lsrs	r3, r1, #13
 80011a6:	4613      	mov	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 80011aa:	231f      	movs	r3, #31
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2006      	movs	r0, #6
 80011b2:	f000 fa97 	bl	80016e4 <Make_CAN_ID>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	0b42      	lsrs	r2, r0, #13
 80011c0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011c4:	0b4b      	lsrs	r3, r1, #13
 80011c6:	4613      	mov	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011ca:	2300      	movs	r3, #0
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2006      	movs	r0, #6
 80011d2:	f000 fa87 	bl	80016e4 <Make_CAN_ID>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4613      	mov	r3, r2
 80011dc:	00da      	lsls	r2, r3, #3
 80011de:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80011e2:	4013      	ands	r3, r2
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80011ea:	231f      	movs	r3, #31
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2006      	movs	r0, #6
 80011f2:	f000 fa77 	bl	80016e4 <Make_CAN_ID>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4613      	mov	r3, r2
 80011fc:	00da      	lsls	r2, r3, #3
 80011fe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001202:	4013      	ands	r3, r2
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <CAN_SystemInit+0x544>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f865 	bl	80052e4 <HAL_CAN_ConfigFilter>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001220:	f003 f9a6 	bl	8004570 <Error_Handler>
	}

	if (HAL_CAN_Start(_canlib_phcan) != HAL_OK){
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <CAN_SystemInit+0x544>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f947 	bl	80054bc <HAL_CAN_Start>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <CAN_SystemInit+0x548>)
 8001236:	f01f fcb9 	bl	8020bac <puts>
		Error_Handler();
 800123a:	f003 f999 	bl	8004570 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <CAN_SystemInit+0x544>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2102      	movs	r1, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fb94 	bl	8005972 <HAL_CAN_ActivateNotification>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <CAN_SystemInit+0x54c>)
 8001252:	f01f fc45 	bl	8020ae0 <iprintf>
		Error_Handler();
 8001256:	f003 f98b 	bl	8004570 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <CAN_SystemInit+0x544>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fb86 	bl	8005972 <HAL_CAN_ActivateNotification>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <CAN_SystemInit+0x54c>)
 800126e:	f01f fc37 	bl	8020ae0 <iprintf>
		Error_Handler();
 8001272:	f003 f97d 	bl	8004570 <Error_Handler>
	}
}
 8001276:	bf00      	nop
 8001278:	3738      	adds	r7, #56	; 0x38
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000a54 	.word	0x20000a54
 8001284:	08021f08 	.word	0x08021f08
 8001288:	08021f18 	.word	0x08021f18

0800128c <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(num_of->mcmd1 == 0 && num_of->mcmd2 == 0 && num_of->mcmd3 == 0 && num_of->mcmd4 == 0 && num_of->air == 0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d122      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11e      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	789b      	ldrb	r3, [r3, #2]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11a      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	795b      	ldrb	r3, [r3, #5]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d116      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d112      	bne.n	80012e2 <CAN_WaitConnect+0x56>
		&& num_of->servo == 0 && num_of->other == 0){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10e      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	799b      	ldrb	r3, [r3, #6]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10a      	bne.n	80012e2 <CAN_WaitConnect+0x56>
		all_node_detected = 1;
 80012cc:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <CAN_WaitConnect+0x17c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
	}
	while (all_node_detected == 0){
 80012d2:	e006      	b.n	80012e2 <CAN_WaitConnect+0x56>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 80012d4:	484d      	ldr	r0, [pc, #308]	; (800140c <CAN_WaitConnect+0x180>)
 80012d6:	f01f fc03 	bl	8020ae0 <iprintf>
		HAL_Delay(500);
 80012da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012de:	f003 fee1 	bl	80050a4 <HAL_Delay>
	while (all_node_detected == 0){
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <CAN_WaitConnect+0x17c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f3      	beq.n	80012d4 <CAN_WaitConnect+0x48>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e00a      	b.n	8001308 <CAN_WaitConnect+0x7c>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4a46      	ldr	r2, [pc, #280]	; (8001410 <CAN_WaitConnect+0x184>)
 80012f6:	4413      	add	r3, r2
 80012f8:	79db      	ldrb	r3, [r3, #7]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4845      	ldr	r0, [pc, #276]	; (8001414 <CAN_WaitConnect+0x188>)
 80012fe:	f01f fbef 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	3301      	adds	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3ef      	bcc.n	80012f2 <CAN_WaitConnect+0x66>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	73bb      	strb	r3, [r7, #14]
 8001316:	e00a      	b.n	800132e <CAN_WaitConnect+0xa2>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <CAN_WaitConnect+0x184>)
 800131c:	4413      	add	r3, r2
 800131e:	7b9b      	ldrb	r3, [r3, #14]
 8001320:	4619      	mov	r1, r3
 8001322:	483d      	ldr	r0, [pc, #244]	; (8001418 <CAN_WaitConnect+0x18c>)
 8001324:	f01f fbdc 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	3301      	adds	r3, #1
 800132c:	73bb      	strb	r3, [r7, #14]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	7bba      	ldrb	r2, [r7, #14]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3ef      	bcc.n	8001318 <CAN_WaitConnect+0x8c>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	737b      	strb	r3, [r7, #13]
 800133c:	e00a      	b.n	8001354 <CAN_WaitConnect+0xc8>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 800133e:	7b7b      	ldrb	r3, [r7, #13]
 8001340:	4a33      	ldr	r2, [pc, #204]	; (8001410 <CAN_WaitConnect+0x184>)
 8001342:	4413      	add	r3, r2
 8001344:	7d5b      	ldrb	r3, [r3, #21]
 8001346:	4619      	mov	r1, r3
 8001348:	4834      	ldr	r0, [pc, #208]	; (800141c <CAN_WaitConnect+0x190>)
 800134a:	f01f fbc9 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	3301      	adds	r3, #1
 8001352:	737b      	strb	r3, [r7, #13]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	7b7a      	ldrb	r2, [r7, #13]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3ef      	bcc.n	800133e <CAN_WaitConnect+0xb2>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	733b      	strb	r3, [r7, #12]
 8001362:	e00b      	b.n	800137c <CAN_WaitConnect+0xf0>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8001364:	7b3b      	ldrb	r3, [r7, #12]
 8001366:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <CAN_WaitConnect+0x184>)
 8001368:	4413      	add	r3, r2
 800136a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800136e:	4619      	mov	r1, r3
 8001370:	482b      	ldr	r0, [pc, #172]	; (8001420 <CAN_WaitConnect+0x194>)
 8001372:	f01f fbb5 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	733b      	strb	r3, [r7, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	795b      	ldrb	r3, [r3, #5]
 8001380:	7b3a      	ldrb	r2, [r7, #12]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3ee      	bcc.n	8001364 <CAN_WaitConnect+0xd8>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	72fb      	strb	r3, [r7, #11]
 800138a:	e00a      	b.n	80013a2 <CAN_WaitConnect+0x116>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <CAN_WaitConnect+0x184>)
 8001390:	4413      	add	r3, r2
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	4619      	mov	r1, r3
 8001396:	4823      	ldr	r0, [pc, #140]	; (8001424 <CAN_WaitConnect+0x198>)
 8001398:	f01f fba2 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	3301      	adds	r3, #1
 80013a0:	72fb      	strb	r3, [r7, #11]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	7afa      	ldrb	r2, [r7, #11]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3ef      	bcc.n	800138c <CAN_WaitConnect+0x100>
	for (uint8_t i = 0; i < num_of->air; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	72bb      	strb	r3, [r7, #10]
 80013b0:	e00b      	b.n	80013ca <CAN_WaitConnect+0x13e>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80013b2:	7abb      	ldrb	r3, [r7, #10]
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <CAN_WaitConnect+0x184>)
 80013b6:	4413      	add	r3, r2
 80013b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <CAN_WaitConnect+0x19c>)
 80013c0:	f01f fb8e 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	3301      	adds	r3, #1
 80013c8:	72bb      	strb	r3, [r7, #10]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	7aba      	ldrb	r2, [r7, #10]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3ee      	bcc.n	80013b2 <CAN_WaitConnect+0x126>
	for (uint8_t i = 0; i < num_of->other; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	727b      	strb	r3, [r7, #9]
 80013d8:	e00b      	b.n	80013f2 <CAN_WaitConnect+0x166>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 80013da:	7a7b      	ldrb	r3, [r7, #9]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <CAN_WaitConnect+0x184>)
 80013de:	4413      	add	r3, r2
 80013e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013e4:	4619      	mov	r1, r3
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <CAN_WaitConnect+0x1a0>)
 80013e8:	f01f fb7a 	bl	8020ae0 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 80013ec:	7a7b      	ldrb	r3, [r7, #9]
 80013ee:	3301      	adds	r3, #1
 80013f0:	727b      	strb	r3, [r7, #9]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	7a7a      	ldrb	r2, [r7, #9]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3ee      	bcc.n	80013da <CAN_WaitConnect+0x14e>
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000a58 	.word	0x20000a58
 800140c:	08021f3c 	.word	0x08021f3c
 8001410:	20000a68 	.word	0x20000a68
 8001414:	08021f5c 	.word	0x08021f5c
 8001418:	08021f6c 	.word	0x08021f6c
 800141c:	08021f7c 	.word	0x08021f7c
 8001420:	08021f8c 	.word	0x08021f8c
 8001424:	08021f9c 	.word	0x08021f9c
 8001428:	08021fac 	.word	0x08021fac
 800142c:	08021fb8 	.word	0x08021fb8

08001430 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2105      	movs	r1, #5
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f922 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2208      	movs	r2, #8
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fc18 	bl	8000c90 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2106      	movs	r1, #6
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f90e 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2208      	movs	r2, #8
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fc04 	bl	8000c90 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001492:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2107      	movs	r1, #7
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f8fa 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2208      	movs	r2, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fbf0 	bl	8000c90 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7d1b      	ldrb	r3, [r3, #20]
 80014b4:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014bc:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c4:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014cc:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	78db      	ldrb	r3, [r3, #3]
 80014d2:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014da:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2108      	movs	r1, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f8d6 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2206      	movs	r2, #6
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fbcc 	bl	8000c90 <SendBytes>
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	79db      	ldrb	r3, [r3, #7]
 8001518:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f8b4 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fbaa 	bl	8000c90 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2103      	movs	r1, #3
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f8a0 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2208      	movs	r2, #8
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb96 	bl	8000c90 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2104      	movs	r1, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f88c 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb82 	bl	8000c90 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f003 fd89 	bl	80050a4 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff4c 	bl	8001430 <MCMD_ChangeControl>
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2109      	movs	r1, #9
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f870 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb66 	bl	8000c90 <SendBytes>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	210a      	movs	r1, #10
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f85a 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2204      	movs	r2, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fb50 	bl	8000c90 <SendBytes>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	210c      	movs	r1, #12
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f842 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	463b      	mov	r3, r7
 8001616:	2204      	movs	r2, #4
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fb39 	bl	8000c90 <SendBytes>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001632:	2101      	movs	r1, #1
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f82c 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	1cfb      	adds	r3, r7, #3
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fb23 	bl	8000c90 <SendBytes>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <AirCylinder_Init+0x2e>
		Error_Handler();
 8001650:	f002 ff8e 	bl	8004570 <Error_Handler>
	}
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001668:	2102      	movs	r1, #2
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f811 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	1cfb      	adds	r3, r7, #3
 8001678:	2201      	movs	r2, #1
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fb08 	bl	8000c90 <SendBytes>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001686:	f002 ff73 	bl	8004570 <Error_Handler>
	}
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001692:	b4b0      	push	{r4, r5, r7}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	02db      	lsls	r3, r3, #11
 80016ac:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	4313      	orrs	r3, r2
 80016ce:	17da      	asrs	r2, r3, #31
 80016d0:	461c      	mov	r4, r3
 80016d2:	4615      	mov	r5, r2
 80016d4:	4622      	mov	r2, r4
 80016d6:	462b      	mov	r3, r5
}
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bcb0      	pop	{r4, r5, r7}
 80016e2:	4770      	bx	lr

080016e4 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80016e4:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4604      	mov	r4, r0
 80016ee:	4608      	mov	r0, r1
 80016f0:	4611      	mov	r1, r2
 80016f2:	461a      	mov	r2, r3
 80016f4:	4623      	mov	r3, r4
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71bb      	strb	r3, [r7, #6]
 80016fc:	460b      	mov	r3, r1
 80016fe:	717b      	strb	r3, [r7, #5]
 8001700:	4613      	mov	r3, r2
 8001702:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	02db      	lsls	r3, r3, #11
 8001708:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001714:	431a      	orrs	r2, r3
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	b2db      	uxtb	r3, r3
 800171c:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800171e:	793b      	ldrb	r3, [r7, #4]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	4313      	orrs	r3, r2
 8001726:	17da      	asrs	r2, r3, #31
 8001728:	4698      	mov	r8, r3
 800172a:	4691      	mov	r9, r2
 800172c:	4642      	mov	r2, r8
 800172e:	464b      	mov	r3, r9
}
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800173c:	4770      	bx	lr

0800173e <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	0942      	lsrs	r2, r0, #5
 8001756:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800175a:	094b      	lsrs	r3, r1, #5
 800175c:	b2d3      	uxtb	r3, r2
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	b2db      	uxtb	r3, r3
 8001764:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001766:	e9d7 0100 	ldrd	r0, r1, [r7]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	0a02      	lsrs	r2, r0, #8
 8001774:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001778:	0a0b      	lsrs	r3, r1, #8
 800177a:	b2d3      	uxtb	r3, r2
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	b2db      	uxtb	r3, r3
 8001782:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001784:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	0ac2      	lsrs	r2, r0, #11
 8001792:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001796:	0acb      	lsrs	r3, r1, #11
 8001798:	b2d3      	uxtb	r3, r2
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	723b      	strb	r3, [r7, #8]
    return ans;
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4611      	mov	r1, r2
 80017ae:	8019      	strh	r1, [r3, #0]
 80017b0:	3302      	adds	r3, #2
 80017b2:	0c12      	lsrs	r2, r2, #16
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	7b3a      	ldrb	r2, [r7, #12]
 80017ba:	f362 0307 	bfi	r3, r2, #0, #8
 80017be:	7b7a      	ldrb	r2, [r7, #13]
 80017c0:	f362 230f 	bfi	r3, r2, #8, #8
 80017c4:	7bba      	ldrb	r2, [r7, #14]
 80017c6:	f362 4317 	bfi	r3, r2, #16, #8
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	e9c7 0100 	strd	r0, r1, [r7]
 80017e0:	783b      	ldrb	r3, [r7, #0]
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <clip_f>:


#include "C620_Control.h"
#include "math.h"

float clip_f(float value, float min, float max){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80017fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001802:	ed87 1a01 	vstr	s2, [r7, #4]
    return fminf(max, fmaxf(value, min));
 8001806:	edd7 0a02 	vldr	s1, [r7, #8]
 800180a:	ed97 0a03 	vldr	s0, [r7, #12]
 800180e:	f020 fb0d 	bl	8021e2c <fmaxf>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	eef0 0a67 	vmov.f32	s1, s15
 800181a:	ed97 0a01 	vldr	s0, [r7, #4]
 800181e:	f020 fb20 	bl	8021e62 <fminf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <C620_PID_Ctrl_init>:

void C620_PID_Ctrl_init(C620_PID_StructTypedef *params) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    params->_integral = 0.0f;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
    params->_prev_value = 0.0f;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <C620_PID_Ctrl_AW>:
    float diff = (value_diff - params->_prev_value);  // 差分
    params->_prev_value = value_diff;
    return (value_diff * params->kp + params->_integral * params->ki + diff * params->kd + target_value * params->kff);
}

float C620_PID_Ctrl_AW(C620_PID_StructTypedef* params, float value_diff, uint8_t accel_limit_enable, float max_value, float update_freq){
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6178      	str	r0, [r7, #20]
 800185c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001860:	460b      	mov	r3, r1
 8001862:	edc7 0a02 	vstr	s1, [r7, #8]
 8001866:	ed87 1a01 	vstr	s2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
    float integral = params->_integral + (value_diff + (params->_prev_value)) / 2.0f / update_freq; // 積分(台形近似)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	edd3 6a05 	vldr	s13, [r3, #20]
 8001878:	edd7 7a04 	vldr	s15, [r7, #16]
 800187c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001884:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001888:	edd7 6a01 	vldr	s13, [r7, #4]
 800188c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	edc7 7a08 	vstr	s15, [r7, #32]
    float diff = (value_diff - params->_prev_value);  // 差分
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	edd3 7a05 	vldr	s15, [r3, #20]
 800189e:	ed97 7a04 	vldr	s14, [r7, #16]
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	edc7 7a07 	vstr	s15, [r7, #28]
    float ans = (value_diff * params->kp + integral * params->ki + diff * params->kd);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	ed93 7a00 	vldr	s14, [r3]
 80018b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80018be:	edd7 7a08 	vldr	s15, [r7, #32]
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80018d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if(accel_limit_enable && fabsf(ans) > max_value){
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04a      	beq.n	800197c <C620_PID_Ctrl_AW+0x128>
 80018e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ea:	eef0 7ae7 	vabs.f32	s15, s15
 80018ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80018f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d53f      	bpl.n	800197c <C620_PID_Ctrl_AW+0x128>
        params->_integral += (0.0f + (params->_prev_value)) / 2.0f / update_freq;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	edd3 7a05 	vldr	s15, [r3, #20]
 8001908:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001998 <C620_PID_Ctrl_AW+0x144>
 800190c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001910:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001914:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001918:	edd7 6a01 	vldr	s13, [r7, #4]
 800191c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	edc3 7a04 	vstr	s15, [r3, #16]
        ans = clip_f(value_diff * params->kp + params->_integral * params->ki + diff * params->kd, -max_value, max_value);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	edd7 7a04 	vldr	s15, [r7, #16]
 8001934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	edd3 6a04 	vldr	s13, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	edd3 7a01 	vldr	s15, [r3, #4]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001952:	edd7 7a07 	vldr	s15, [r7, #28]
 8001956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001962:	eef1 7a67 	vneg.f32	s15, s15
 8001966:	ed97 1a02 	vldr	s2, [r7, #8]
 800196a:	eef0 0a67 	vmov.f32	s1, s15
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	f7ff ff3f 	bl	80017f4 <clip_f>
 8001976:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800197a:	e002      	b.n	8001982 <C620_PID_Ctrl_AW+0x12e>
    }else{
        params->_integral = integral;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	611a      	str	r2, [r3, #16]
    };
    params->_prev_value = value_diff;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	615a      	str	r2, [r3, #20]
    return ans;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	ee07 3a90 	vmov	s15, r3
}
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	00000000 	.word	0x00000000

0800199c <_clip_f>:
#include "CAN_C620_System.h"
#include "math.h"
#include "stdio.h"


float _clip_f(float var, float ref) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80019a6:	edc7 0a00 	vstr	s1, [r7]
    float abs_ref = fabsf(ref);
 80019aa:	edd7 7a00 	vldr	s15, [r7]
 80019ae:	eef0 7ae7 	vabs.f32	s15, s15
 80019b2:	edc7 7a03 	vstr	s15, [r7, #12]
    return fmaxf(fminf(var, abs_ref), -abs_ref);
 80019b6:	edd7 0a03 	vldr	s1, [r7, #12]
 80019ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80019be:	f020 fa50 	bl	8021e62 <fminf>
 80019c2:	eeb0 7a40 	vmov.f32	s14, s0
 80019c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ca:	eef1 7a67 	vneg.f32	s15, s15
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	eeb0 0a47 	vmov.f32	s0, s14
 80019d6:	f020 fa29 	bl	8021e2c <fmaxf>
 80019da:	eef0 7a40 	vmov.f32	s15, s0
}
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <c620_current_f2int>:

int16_t c620_current_f2int(float current) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int16_t) (current * 16384.0f / 20.0f);
 80019f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001a1c <c620_current_f2int+0x34>
 80019fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019fe:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	b21b      	sxth	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	46800000 	.word	0x46800000

08001a20 <C620_Ctrl_Struct_init>:


void C620_Ctrl_Struct_init(C620_Ctrl_StructTypedef *ctrl_struct) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    ctrl_struct->_target_value = 0.0f;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl_struct->_enable_flag = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    C620_PID_Ctrl_init(&(ctrl_struct->pid));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fef8 	bl	8001830 <C620_PID_Ctrl_init>
    C620_PID_Ctrl_init(&(ctrl_struct->pid_vel));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3318      	adds	r3, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fef3 	bl	8001830 <C620_PID_Ctrl_init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <C620_Init>:

void C620_Init(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size; i++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e00c      	b.n	8001a7e <C620_Init+0x2c>
        C620_Ctrl_Struct_init(&(dev_info_array[i].ctrl_param));
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	224c      	movs	r2, #76	; 0x4c
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ffd4 	bl	8001a20 <C620_Ctrl_Struct_init>
    for (uint8_t i = 0; i < size; i++) {
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3ee      	bcc.n	8001a64 <C620_Init+0x12>
    }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <C620_SendRequest>:

void C620_SendRequest(C620_DeviceInfo dev_info_array[], uint8_t size, float update_freq_hz, CAN_HandleTypeDef *phcan) {
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b093      	sub	sp, #76	; 0x4c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a9e:	603a      	str	r2, [r7, #0]
 8001aa0:	72fb      	strb	r3, [r7, #11]
    uint8_t data1[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001aa2:	4ac7      	ldr	r2, [pc, #796]	; (8001dc0 <C620_SendRequest+0x330>)
 8001aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aac:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t data2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001ab0:	4ac3      	ldr	r2, [pc, #780]	; (8001dc0 <C620_SendRequest+0x330>)
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aba:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flag_1 = 0, flag_2 = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    int16_t request_value = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    float diff = 0.0f, t_current = 0.0f, fb_value = 0.0f;
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    C620_FeedbackData fb_data;

    for (uint8_t i = 0; i < size; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001ae8:	e195      	b.n	8001e16 <C620_SendRequest+0x386>
        if (!(dev_info_array[i].ctrl_param._enable_flag))continue;
 8001aea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001aee:	224c      	movs	r2, #76	; 0x4c
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8184 	beq.w	8001e0a <C620_SendRequest+0x37a>
        fb_data = Get_C620_FeedbackData(&dev_info_array[i]);
 8001b02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b06:	224c      	movs	r2, #76	; 0x4c
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	441a      	add	r2, r3
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fd74 	bl	8002604 <Get_C620_FeedbackData>
        if (dev_info_array[i].device_id == 0) {
 8001b1c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b20:	224c      	movs	r2, #76	; 0x4c
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <C620_SendRequest+0xa8>
            printf("[C620] device_id is not 0\n\r");
 8001b30:	48a4      	ldr	r0, [pc, #656]	; (8001dc4 <C620_SendRequest+0x334>)
 8001b32:	f01e ffd5 	bl	8020ae0 <iprintf>
            continue;
 8001b36:	e169      	b.n	8001e0c <C620_SendRequest+0x37c>
        }

        if (dev_info_array[i].ctrl_param.ctrl_type == C620_CTRL_CURRENT) {
 8001b38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b3c:	224c      	movs	r2, #76	; 0x4c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d109      	bne.n	8001b62 <C620_SendRequest+0xd2>
            t_current = dev_info_array[i].ctrl_param._target_value;
 8001b4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b52:	224c      	movs	r2, #76	; 0x4c
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b60:	e0ab      	b.n	8001cba <C620_SendRequest+0x22a>
        } else {
            switch (dev_info_array[i].ctrl_param.ctrl_type) {
 8001b62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b66:	224c      	movs	r2, #76	; 0x4c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <C620_SendRequest+0xee>
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d003      	beq.n	8001b84 <C620_SendRequest+0xf4>
 8001b7c:	e005      	b.n	8001b8a <C620_SendRequest+0xfa>
                case C620_CTRL_POS:
                    fb_value = fb_data.position;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001b82:	e006      	b.n	8001b92 <C620_SendRequest+0x102>
                case C620_CTRL_VEL:
                    fb_value = fb_data.velocity;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001b88:	e003      	b.n	8001b92 <C620_SendRequest+0x102>
                default:
                    fb_value = 0.0f;
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001b90:	bf00      	nop
            }
            diff = dev_info_array[i].ctrl_param._target_value - fb_value;
 8001b92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b96:	224c      	movs	r2, #76	; 0x4c
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001ba4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            if(dev_info_array[i].ctrl_param.ctrl_type == C620_CTRL_POS) {
 8001bb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bb4:	224c      	movs	r2, #76	; 0x4c
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d144      	bne.n	8001c50 <C620_SendRequest+0x1c0>
                float t_vel = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001bc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bca:	224c      	movs	r2, #76	; 0x4c
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	1d18      	adds	r0, r3, #4
                                               dev_info_array[i].ctrl_param.accel_limit == C620_ACCEL_LIMIT_ENABLE,
 8001bd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bda:	224c      	movs	r2, #76	; 0x4c
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
                float t_vel = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
                                               dev_info_array[i].ctrl_param.accel_limit_size, update_freq_hz);
 8001bf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bf8:	224c      	movs	r2, #76	; 0x4c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4413      	add	r3, r2
                float t_vel = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001c02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001c12:	f7ff fe1f 	bl	8001854 <C620_PID_Ctrl_AW>
 8001c16:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid_vel), t_vel - fb_data.velocity,
 8001c1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c1e:	224c      	movs	r2, #76	; 0x4c
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	331c      	adds	r3, #28
 8001c2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c3a:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001dc8 <C620_SendRequest+0x338>
 8001c3e:	2100      	movs	r1, #0
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe05 	bl	8001854 <C620_PID_Ctrl_AW>
 8001c4a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 8001c4e:	e034      	b.n	8001cba <C620_SendRequest+0x22a>
                                             0,0.0f, update_freq_hz);
                // 位置制御の場合は速度と位置の2重でPID
            }else if(dev_info_array[i].ctrl_param.ctrl_type == C620_CTRL_VEL){
 8001c50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c54:	224c      	movs	r2, #76	; 0x4c
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d129      	bne.n	8001cba <C620_SendRequest+0x22a>
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001c66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c6a:	224c      	movs	r2, #76	; 0x4c
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	1d18      	adds	r0, r3, #4
                                             dev_info_array[i].ctrl_param.accel_limit == C620_ACCEL_LIMIT_ENABLE,
 8001c76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c7a:	224c      	movs	r2, #76	; 0x4c
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
                                             dev_info_array[i].ctrl_param.accel_limit_size, update_freq_hz);
 8001c94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c98:	224c      	movs	r2, #76	; 0x4c
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001ca2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ca6:	ed97 1a01 	vldr	s2, [r7, #4]
 8001caa:	eef0 0a67 	vmov.f32	s1, s15
 8001cae:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001cb2:	f7ff fdcf 	bl	8001854 <C620_PID_Ctrl_AW>
 8001cb6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
            }
        }
        // 目標値の計算
        dev_info_array[i].ctrl_param._req_value = _clip_f(t_current, 20.0f);
 8001cba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cbe:	224c      	movs	r2, #76	; 0x4c
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	18d4      	adds	r4, r2, r3
 8001cc8:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001ccc:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8001cd0:	f7ff fe64 	bl	800199c <_clip_f>
 8001cd4:	eef0 7a40 	vmov.f32	s15, s0
 8001cd8:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
        request_value = c620_current_f2int( dev_info_array[i].ctrl_param._req_value);
 8001cdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ce0:	224c      	movs	r2, #76	; 0x4c
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	f7ff fe79 	bl	80019e8 <c620_current_f2int>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if(dev_info_array[i].ctrl_param.rotation == C620_ROT_CW){
 8001cfc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d00:	224c      	movs	r2, #76	; 0x4c
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d105      	bne.n	8001d1e <C620_SendRequest+0x28e>
            request_value *= -1;
 8001d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001d16:	425b      	negs	r3, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        // 各モーターの目標値の設定
        if (dev_info_array[i].device_id < 5) {
 8001d1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d22:	224c      	movs	r2, #76	; 0x4c
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d82d      	bhi.n	8001d8e <C620_SendRequest+0x2fe>
            flag_1 = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for (uint8_t j = 0; j < 2; j++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d3e:	e021      	b.n	8001d84 <C620_SendRequest+0x2f4>
                data1[(dev_info_array[i].device_id - 1) * 2 + j] = (request_value >> ((!j) * 8)) & 0b11111111;
 8001d40:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001d44:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <C620_SendRequest+0x2c0>
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	e000      	b.n	8001d52 <C620_SendRequest+0x2c2>
 8001d50:	2300      	movs	r3, #0
 8001d52:	fa42 f103 	asr.w	r1, r2, r3
 8001d56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d5a:	224c      	movs	r2, #76	; 0x4c
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	005a      	lsls	r2, r3, #1
 8001d6a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	3348      	adds	r3, #72	; 0x48
 8001d74:	443b      	add	r3, r7
 8001d76:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t j = 0; j < 2; j++) {
 8001d7a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d84:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d9d9      	bls.n	8001d40 <C620_SendRequest+0x2b0>
 8001d8c:	e03e      	b.n	8001e0c <C620_SendRequest+0x37c>
            }
        } else if (dev_info_array[i].device_id >= 5) {
 8001d8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d934      	bls.n	8001e0c <C620_SendRequest+0x37c>
            flag_2 = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (uint8_t j = 0; j < 2; j++) {
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001dae:	e027      	b.n	8001e00 <C620_SendRequest+0x370>
                data2[(dev_info_array[i].device_id - 5) * 2 + j] = (request_value >> ((!j) * 8)) & 0b11111111;
 8001db0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001db4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <C620_SendRequest+0x33c>
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	e006      	b.n	8001dce <C620_SendRequest+0x33e>
 8001dc0:	08021ffc 	.word	0x08021ffc
 8001dc4:	08021fe0 	.word	0x08021fe0
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	2300      	movs	r3, #0
 8001dce:	fa42 f103 	asr.w	r1, r2, r3
 8001dd2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001dd6:	224c      	movs	r2, #76	; 0x4c
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b05      	subs	r3, #5
 8001de4:	005a      	lsls	r2, r3, #1
 8001de6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dea:	4413      	add	r3, r2
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	3348      	adds	r3, #72	; 0x48
 8001df0:	443b      	add	r3, r7
 8001df2:	f803 2c28 	strb.w	r2, [r3, #-40]
            for (uint8_t j = 0; j < 2; j++) {
 8001df6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001e00:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d9d3      	bls.n	8001db0 <C620_SendRequest+0x320>
 8001e08:	e000      	b.n	8001e0c <C620_SendRequest+0x37c>
        if (!(dev_info_array[i].ctrl_param._enable_flag))continue;
 8001e0a:	bf00      	nop
    for (uint8_t i = 0; i < size; i++) {
 8001e0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e10:	3301      	adds	r3, #1
 8001e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001e16:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f4ff ae64 	bcc.w	8001aea <C620_SendRequest+0x5a>
            }
        }
    }
    if (flag_1)C620_SendBytes(phcan, 0x200, (uint8_t *) data1, sizeof(data1));
 8001e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <C620_SendRequest+0x3aa>
 8001e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2e:	2308      	movs	r3, #8
 8001e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e34:	6838      	ldr	r0, [r7, #0]
 8001e36:	f000 f935 	bl	80020a4 <C620_SendBytes>
    if (flag_2)C620_SendBytes(phcan, 0x1FF, (uint8_t *) data2, sizeof(data2));
 8001e3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <C620_SendRequest+0x3c2>
 8001e42:	f107 0220 	add.w	r2, r7, #32
 8001e46:	2308      	movs	r3, #8
 8001e48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f000 f929 	bl	80020a4 <C620_SendBytes>
}
 8001e52:	bf00      	nop
 8001e54:	374c      	adds	r7, #76	; 0x4c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop

08001e5c <C620_WaitForConnect>:

void C620_WaitForConnect(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
    uint8_t flag = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
    printf("[C620] Wait for Connection...\n");
 8001e6c:	4815      	ldr	r0, [pc, #84]	; (8001ec4 <C620_WaitForConnect+0x68>)
 8001e6e:	f01e fe9d 	bl	8020bac <puts>
    while (!flag) {
 8001e72:	e01d      	b.n	8001eb0 <C620_WaitForConnect+0x54>
        flag = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < size; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77bb      	strb	r3, [r7, #30]
 8001e7c:	e014      	b.n	8001ea8 <C620_WaitForConnect+0x4c>
            if (!Get_C620_FeedbackData(&dev_info_array[i]).get_flag) {
 8001e7e:	7fbb      	ldrb	r3, [r7, #30]
 8001e80:	224c      	movs	r2, #76	; 0x4c
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	441a      	add	r2, r3
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fbb7 	bl	8002604 <Get_C620_FeedbackData>
 8001e96:	7b7b      	ldrb	r3, [r7, #13]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <C620_WaitForConnect+0x46>
                flag = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	77fb      	strb	r3, [r7, #31]
                break;
 8001ea0:	e006      	b.n	8001eb0 <C620_WaitForConnect+0x54>
        for (uint8_t i = 0; i < size; i++) {
 8001ea2:	7fbb      	ldrb	r3, [r7, #30]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	77bb      	strb	r3, [r7, #30]
 8001ea8:	7fba      	ldrb	r2, [r7, #30]
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3e6      	bcc.n	8001e7e <C620_WaitForConnect+0x22>
    while (!flag) {
 8001eb0:	7ffb      	ldrb	r3, [r7, #31]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0de      	beq.n	8001e74 <C620_WaitForConnect+0x18>
            }
        }
    }
    printf("[C620] All Connected!\n");
 8001eb6:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <C620_WaitForConnect+0x6c>)
 8001eb8:	f01e fe78 	bl	8020bac <puts>
}
 8001ebc:	bf00      	nop
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	08022004 	.word	0x08022004
 8001ec8:	08022024 	.word	0x08022024

08001ecc <C620_SetTarget>:
void C620_ChangeControl(C620_DeviceInfo *dev_info, C620_CTRL_TYPE new_ctrl_type) {
    C620_Ctrl_Struct_init(&(dev_info->ctrl_param));
    dev_info->ctrl_param.ctrl_type = new_ctrl_type;
}

void C620_SetTarget(C620_DeviceInfo *device_info, float target_value) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	ed87 0a00 	vstr	s0, [r7]
    device_info->ctrl_param._target_value = target_value;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <C620_ControlEnable>:

void C620_ControlEnable(C620_DeviceInfo *dev_info) {
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
    dev_info->ctrl_param._enable_flag = 1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_C620_PushTx8Bytes>:
CAN_HandleTypeDef *_c620_phcan_global;  // 変更しない事
CAN_RingBuf _can_buf_ring1 = {{}, 0, 0, 0};
c620_feedback_data_raw _c620_feedback_data_raw_global[9];


HAL_StatusTypeDef _C620_PushTx8Bytes(CAN_RingBuf *p_can_ring, uint32_t StdId, uint8_t *bytes, uint32_t size) {
 8001f06:	b480      	push	{r7}
 8001f08:	b087      	sub	sp, #28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
    p_can_ring->buffer[p_can_ring->write_point].DLC = size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	601a      	str	r2, [r3, #0]
    p_can_ring->buffer[p_can_ring->write_point].StdId = StdId;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++)p_can_ring->buffer[p_can_ring->write_point].bytes[i] = bytes[i];
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
 8001f3e:	e012      	b.n	8001f66 <_C620_PushTx8Bytes+0x60>
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	18d1      	adds	r1, r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	7808      	ldrb	r0, [r1, #0]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	440a      	add	r2, r1
 8001f58:	4413      	add	r3, r2
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	3301      	adds	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d8e8      	bhi.n	8001f40 <_C620_PushTx8Bytes+0x3a>

    if (p_can_ring->is_full == 1) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f74:	7a1b      	ldrb	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10a      	bne.n	8001f90 <_C620_PushTx8Bytes+0x8a>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001f8e:	6013      	str	r3, [r2, #0]
    }
    p_can_ring->write_point = ((p_can_ring->write_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001fa4:	6053      	str	r3, [r2, #4]

    if (p_can_ring->write_point == p_can_ring->read_point) {
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d104      	bne.n	8001fc4 <_C620_PushTx8Bytes+0xbe>
        p_can_ring->is_full = 1;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	721a      	strb	r2, [r3, #8]
    }
    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_C620_PopSendTx8Bytes>:

HAL_StatusTypeDef _C620_PopSendTx8Bytes(CAN_HandleTypeDef *phcan, CAN_RingBuf *p_can_ring) {
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b08a      	sub	sp, #40	; 0x28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.RTR = CAN_RTR_DATA;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
    txHeader.TransmitGlobalTime = DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3020 	strb.w	r3, [r7, #32]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8001fea:	e04d      	b.n	8002088 <_C620_PopSendTx8Bytes+0xb6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ff2:	7a1b      	ldrb	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <_C620_PopSendTx8Bytes+0x3a>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d044      	beq.n	8002096 <_C620_PopSendTx8Bytes+0xc4>

        txHeader.DLC = p_can_ring->buffer[p_can_ring->read_point].DLC;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	61fb      	str	r3, [r7, #28]
        txHeader.StdId = p_can_ring->buffer[p_can_ring->read_point].StdId;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4413      	add	r3, r2
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
        txHeader.ExtId = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]

        HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, p_can_ring->buffer[p_can_ring->read_point].bytes,
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	3308      	adds	r3, #8
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	441a      	add	r2, r3
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	f107 010c 	add.w	r1, r7, #12
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f003 fa78 	bl	8005544 <HAL_CAN_AddTxMessage>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     &txMailbox);
        if (ret != HAL_OK)return ret;
 800205a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <_C620_PopSendTx8Bytes+0x96>
 8002062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002066:	e018      	b.n	800209a <_C620_PopSendTx8Bytes+0xc8>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800207c:	6013      	str	r3, [r2, #0]
        p_can_ring->is_full = 0;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002084:	2200      	movs	r2, #0
 8002086:	721a      	strb	r2, [r3, #8]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f003 fb2b 	bl	80056e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ab      	bne.n	8001fec <_C620_PopSendTx8Bytes+0x1a>
 8002094:	e000      	b.n	8002098 <_C620_PopSendTx8Bytes+0xc6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8002096:	bf00      	nop
    }
    return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <C620_SendBytes>:


HAL_StatusTypeDef C620_SendBytes(CAN_HandleTypeDef *phcan, uint32_t StdId, uint8_t *bytes, uint32_t size) { // 命令を送信する関数
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
    uint32_t quotient = size / 8;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	61bb      	str	r3, [r7, #24]
    uint32_t remainder = size - (8 * quotient);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef ret;

    for (uint8_t i = 0; i < quotient; i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	77fb      	strb	r3, [r7, #31]
 80020c6:	e015      	b.n	80020f4 <C620_SendBytes+0x50>
        ret = _C620_PushTx8Bytes(&_can_buf_ring1, StdId, bytes + i * 8, 8);
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	461a      	mov	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	441a      	add	r2, r3
 80020d2:	2308      	movs	r3, #8
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	481d      	ldr	r0, [pc, #116]	; (800214c <C620_SendBytes+0xa8>)
 80020d8:	f7ff ff15 	bl	8001f06 <_C620_PushTx8Bytes>
 80020dc:	4603      	mov	r3, r0
 80020de:	74fb      	strb	r3, [r7, #19]
        if (ret != HAL_OK) {
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <C620_SendBytes+0x4a>
            Error_Handler();
 80020e6:	f002 fa43 	bl	8004570 <Error_Handler>
            return ret;
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	e029      	b.n	8002142 <C620_SendBytes+0x9e>
    for (uint8_t i = 0; i < quotient; i++) {
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	3301      	adds	r3, #1
 80020f2:	77fb      	strb	r3, [r7, #31]
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8e5      	bhi.n	80020c8 <C620_SendBytes+0x24>
        }
    }

    if (remainder != 0) {
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <C620_SendBytes+0x82>
        ret = _C620_PushTx8Bytes(&_can_buf_ring1, StdId, bytes + quotient * 8, remainder);
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	441a      	add	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	480f      	ldr	r0, [pc, #60]	; (800214c <C620_SendBytes+0xa8>)
 8002110:	f7ff fef9 	bl	8001f06 <_C620_PushTx8Bytes>
 8002114:	4603      	mov	r3, r0
 8002116:	74fb      	strb	r3, [r7, #19]
        if (ret != HAL_OK) {
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <C620_SendBytes+0x82>
            Error_Handler();
 800211e:	f002 fa27 	bl	8004570 <Error_Handler>
            return ret;
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	e00d      	b.n	8002142 <C620_SendBytes+0x9e>
        }
    }
    ret = _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8002126:	4909      	ldr	r1, [pc, #36]	; (800214c <C620_SendBytes+0xa8>)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff ff52 	bl	8001fd2 <_C620_PopSendTx8Bytes>
 800212e:	4603      	mov	r3, r0
 8002130:	74fb      	strb	r3, [r7, #19]
    if (ret != HAL_OK) {
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <C620_SendBytes+0x9c>
        Error_Handler();
 8002138:	f002 fa1a 	bl	8004570 <Error_Handler>
        return ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	e000      	b.n	8002142 <C620_SendBytes+0x9e>
    }
    return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20002d38 	.word	0x20002d38

08002150 <C620_WhenTxMailboxCompleteCallbackCalled>:


void C620_WhenTxMailboxCompleteCallbackCalled(CAN_HandleTypeDef *phcan) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <C620_WhenTxMailboxCompleteCallbackCalled+0x24>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d104      	bne.n	800216c <C620_WhenTxMailboxCompleteCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8002162:	4905      	ldr	r1, [pc, #20]	; (8002178 <C620_WhenTxMailboxCompleteCallbackCalled+0x28>)
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff34 	bl	8001fd2 <_C620_PopSendTx8Bytes>
 800216a:	e000      	b.n	800216e <C620_WhenTxMailboxCompleteCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 800216c:	bf00      	nop
}
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20002d34 	.word	0x20002d34
 8002178:	20002d38 	.word	0x20002d38

0800217c <C620_WhenTxMailboxAbortCallbackCalled>:

void C620_WhenTxMailboxAbortCallbackCalled(CAN_HandleTypeDef *phcan) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <C620_WhenTxMailboxAbortCallbackCalled+0x24>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	d104      	bne.n	8002198 <C620_WhenTxMailboxAbortCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 800218e:	4905      	ldr	r1, [pc, #20]	; (80021a4 <C620_WhenTxMailboxAbortCallbackCalled+0x28>)
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff1e 	bl	8001fd2 <_C620_PopSendTx8Bytes>
 8002196:	e000      	b.n	800219a <C620_WhenTxMailboxAbortCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8002198:	bf00      	nop
}
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20002d34 	.word	0x20002d34
 80021a4:	20002d38 	.word	0x20002d38

080021a8 <_set_fb_data_raw>:


void _set_fb_data_raw(const uint8_t rxData[], uint8_t device_id) {
 80021a8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
    if (device_id > 9 || device_id <= 0)return;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	f200 80f5 	bhi.w	80023a8 <_set_fb_data_raw+0x200>
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80f1 	beq.w	80023a8 <_set_fb_data_raw+0x200>

    _c620_feedback_data_raw_global[device_id]._get_counter += 1;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	4413      	add	r3, r2
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	3201      	adds	r2, #1
 80021d4:	b2d1      	uxtb	r1, r2
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	4413      	add	r3, r2
 80021dc:	460a      	mov	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
    if (_c620_feedback_data_raw_global[device_id]._get_counter > 128) {
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	4a74      	ldr	r2, [pc, #464]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	4413      	add	r3, r2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b80      	cmp	r3, #128	; 0x80
 80021ec:	d905      	bls.n	80021fa <_set_fb_data_raw+0x52>
        _c620_feedback_data_raw_global[device_id]._get_counter = 128;  // overflow対策
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	4a70      	ldr	r2, [pc, #448]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	4413      	add	r3, r2
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	701a      	strb	r2, [r3, #0]
    }

    if (_c620_feedback_data_raw_global[device_id]._get_counter < 50) {  // M3508のEncoderの初期位置を取得
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	4a6d      	ldr	r2, [pc, #436]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80021fe:	015b      	lsls	r3, r3, #5
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b31      	cmp	r3, #49	; 0x31
 8002206:	d836      	bhi.n	8002276 <_set_fb_data_raw+0xce>
        _c620_feedback_data_raw_global[device_id]._internal_offset_pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3301      	adds	r3, #1
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b21b      	sxth	r3, r3
 8002218:	4313      	orrs	r3, r2
 800221a:	b21a      	sxth	r2, r3
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	b291      	uxth	r1, r2
 8002220:	4a64      	ldr	r2, [pc, #400]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002222:	015b      	lsls	r3, r3, #5
 8002224:	4413      	add	r3, r2
 8002226:	3312      	adds	r3, #18
 8002228:	460a      	mov	r2, r1
 800222a:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos_pre = (uint16_t) (rxData[0] << 8 | rxData[1]);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3301      	adds	r3, #1
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21a      	sxth	r2, r3
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	b291      	uxth	r1, r2
 8002244:	4a5b      	ldr	r2, [pc, #364]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	4413      	add	r3, r2
 800224a:	3314      	adds	r3, #20
 800224c:	460a      	mov	r2, r1
 800224e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b21b      	sxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b21a      	sxth	r2, r3
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	b291      	uxth	r1, r2
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <_set_fb_data_raw+0x20c>)
 800226a:	015b      	lsls	r3, r3, #5
 800226c:	4413      	add	r3, r2
 800226e:	3310      	adds	r3, #16
 8002270:	460a      	mov	r2, r1
 8002272:	801a      	strh	r2, [r3, #0]
        return;
 8002274:	e099      	b.n	80023aa <_set_fb_data_raw+0x202>
    }

    // dataの設定
    _c620_feedback_data_raw_global[device_id].pos_pre = _c620_feedback_data_raw_global[device_id].pos;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	494e      	ldr	r1, [pc, #312]	; (80023b4 <_set_fb_data_raw+0x20c>)
 800227c:	0152      	lsls	r2, r2, #5
 800227e:	440a      	add	r2, r1
 8002280:	3210      	adds	r2, #16
 8002282:	8811      	ldrh	r1, [r2, #0]
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	4413      	add	r3, r2
 800228a:	3314      	adds	r3, #20
 800228c:	460a      	mov	r2, r1
 800228e:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	b291      	uxth	r1, r2
 80022a8:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80022aa:	015b      	lsls	r3, r3, #5
 80022ac:	4413      	add	r3, r2
 80022ae:	3310      	adds	r3, #16
 80022b0:	460a      	mov	r2, r1
 80022b2:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].vel = (int16_t) (rxData[2] << 8 | rxData[3]);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3302      	adds	r3, #2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b219      	sxth	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3303      	adds	r3, #3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	b211      	sxth	r1, r2
 80022cc:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	4413      	add	r3, r2
 80022d2:	3316      	adds	r3, #22
 80022d4:	460a      	mov	r2, r1
 80022d6:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].cur = (int16_t) (rxData[4] << 8 | rxData[5]);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b219      	sxth	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3305      	adds	r3, #5
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	b211      	sxth	r1, r2
 80022f0:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <_set_fb_data_raw+0x20c>)
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	4413      	add	r3, r2
 80022f6:	3318      	adds	r3, #24
 80022f8:	460a      	mov	r2, r1
 80022fa:	801a      	strh	r2, [r3, #0]

    // 回転数の計算
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	4413      	add	r3, r2
 8002304:	3310      	adds	r3, #16
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
                       (int32_t) (_c620_feedback_data_raw_global[device_id].pos_pre);
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <_set_fb_data_raw+0x20c>)
 800230e:	015b      	lsls	r3, r3, #5
 8002310:	4413      	add	r3, r2
 8002312:	3314      	adds	r3, #20
 8002314:	881b      	ldrh	r3, [r3, #0]
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8002316:	1acb      	subs	r3, r1, r3
 8002318:	60fb      	str	r3, [r7, #12]
    if (diff_pos > 4096) {
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002320:	dd1f      	ble.n	8002362 <_set_fb_data_raw+0x1ba>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != -(INT64_MAX / 10)) {
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	4413      	add	r3, r2
 800232a:	3308      	adds	r3, #8
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	4921      	ldr	r1, [pc, #132]	; (80023b8 <_set_fb_data_raw+0x210>)
 8002332:	428b      	cmp	r3, r1
 8002334:	bf08      	it	eq
 8002336:	f112 3fcc 	cmneq.w	r2, #3435973836	; 0xcccccccc
 800233a:	d036      	beq.n	80023aa <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num -= 1;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002340:	015b      	lsls	r3, r3, #5
 8002342:	4413      	add	r3, r2
 8002344:	3308      	adds	r3, #8
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	78f9      	ldrb	r1, [r7, #3]
 800234c:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 8002350:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 8002354:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002356:	014b      	lsls	r3, r1, #5
 8002358:	4413      	add	r3, r2
 800235a:	3308      	adds	r3, #8
 800235c:	e9c3 8900 	strd	r8, r9, [r3]
 8002360:	e023      	b.n	80023aa <_set_fb_data_raw+0x202>
        }  // overflow対策
    } else if (diff_pos < -4096) {
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8002368:	da1f      	bge.n	80023aa <_set_fb_data_raw+0x202>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != (INT64_MAX / 10)) {
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <_set_fb_data_raw+0x20c>)
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	4413      	add	r3, r2
 8002372:	3308      	adds	r3, #8
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	4910      	ldr	r1, [pc, #64]	; (80023bc <_set_fb_data_raw+0x214>)
 800237a:	428b      	cmp	r3, r1
 800237c:	bf08      	it	eq
 800237e:	f1b2 3fcc 	cmpeq.w	r2, #3435973836	; 0xcccccccc
 8002382:	d012      	beq.n	80023aa <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num += 1;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <_set_fb_data_raw+0x20c>)
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	4413      	add	r3, r2
 800238c:	3308      	adds	r3, #8
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	78f9      	ldrb	r1, [r7, #3]
 8002394:	1c54      	adds	r4, r2, #1
 8002396:	f143 0500 	adc.w	r5, r3, #0
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <_set_fb_data_raw+0x20c>)
 800239c:	014b      	lsls	r3, r1, #5
 800239e:	4413      	add	r3, r2
 80023a0:	3308      	adds	r3, #8
 80023a2:	e9c3 4500 	strd	r4, r5, [r3]
 80023a6:	e000      	b.n	80023aa <_set_fb_data_raw+0x202>
    if (device_id > 9 || device_id <= 0)return;
 80023a8:	bf00      	nop
        }  // overflow対策
    }
}
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80023b2:	4770      	bx	lr
 80023b4:	20004d48 	.word	0x20004d48
 80023b8:	f3333333 	.word	0xf3333333
 80023bc:	0ccccccc 	.word	0x0ccccccc

080023c0 <C620_WhenCANRxFifo1MsgPending>:

void C620_WhenCANRxFifo1MsgPending(CAN_HandleTypeDef *phcan) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    // Fifo0はCANLibで使うので、Fifo1を使う事。
    if (_c620_phcan_global != phcan)return;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <C620_WhenCANRxFifo1MsgPending+0x60>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d121      	bne.n	8002416 <C620_WhenCANRxFifo1MsgPending+0x56>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO1, &rxHeader, rxData) != HAL_OK) {
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	f107 0214 	add.w	r2, r7, #20
 80023da:	2101      	movs	r1, #1
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f003 f9b6 	bl	800574e <HAL_CAN_GetRxMessage>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <C620_WhenCANRxFifo1MsgPending+0x32>
        // Reception Error
        printf("GetRxMessage error\n\r");
 80023e8:	480e      	ldr	r0, [pc, #56]	; (8002424 <C620_WhenCANRxFifo1MsgPending+0x64>)
 80023ea:	f01e fb79 	bl	8020ae0 <iprintf>
        Error_Handler();
 80023ee:	f002 f8bf 	bl	8004570 <Error_Handler>
    }

    if (((rxHeader.StdId - 0x200) < 9) && ((rxHeader.StdId - 0x200) >= 1)) {
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d80d      	bhi.n	8002418 <C620_WhenCANRxFifo1MsgPending+0x58>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002402:	d009      	beq.n	8002418 <C620_WhenCANRxFifo1MsgPending+0x58>
        _set_fb_data_raw(rxData, rxHeader.StdId - 0x200);  // fb_data_rawにデータを入力
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff feca 	bl	80021a8 <_set_fb_data_raw>
 8002414:	e000      	b.n	8002418 <C620_WhenCANRxFifo1MsgPending+0x58>
    if (_c620_phcan_global != phcan)return;
 8002416:	bf00      	nop
    }
}
 8002418:	3730      	adds	r7, #48	; 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20002d34 	.word	0x20002d34
 8002424:	0802203c 	.word	0x0802203c

08002428 <Init_C620_CAN_System>:


void Init_C620_CAN_System(CAN_HandleTypeDef *phcan) {  //CAN初期化
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	; 0x38
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    _c620_phcan_global = phcan;
 8002430:	4a6c      	ldr	r2, [pc, #432]	; (80025e4 <Init_C620_CAN_System+0x1bc>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
    CAN_FilterTypeDef sFilterConfig;

    //フィルタバンク設定
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800243a:	2301      	movs	r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800243e:	2301      	movs	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.SlaveStartFilterBank = 14;
 8002446:	230e      	movs	r3, #14
 8002448:	633b      	str	r3, [r7, #48]	; 0x30

    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
    // FIFO1に初期化用のフィルタを設定
    sFilterConfig.FilterBank = 10; // CANLibで6まで使ってる
 800244a:	230a      	movs	r3, #10
 800244c:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b1000) << 5;
 800244e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8002452:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 8002454:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <Init_C620_CAN_System+0x1c0>)
 8002456:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 800245c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002460:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f002 ff3b 	bl	80052e4 <HAL_CAN_ConfigFilter>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <Init_C620_CAN_System+0x50>
        Error_Handler();
 8002474:	f002 f87c 	bl	8004570 <Error_Handler>
    }

    sFilterConfig.FilterBank = 11; // CANLibで6まで使ってる
 8002478:	230b      	movs	r3, #11
 800247a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0001) << 5;
 800247c:	f244 0320 	movw	r3, #16416	; 0x4020
 8002480:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0110) << 5;
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <Init_C620_CAN_System+0x1c4>)
 8002484:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 800248a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800248e:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f002 ff24 	bl	80052e4 <HAL_CAN_ConfigFilter>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <Init_C620_CAN_System+0x7e>
        Error_Handler();
 80024a2:	f002 f865 	bl	8004570 <Error_Handler>
    }

    sFilterConfig.FilterBank = 12; // CANLibで6まで使ってる
 80024a6:	230c      	movs	r3, #12
 80024a8:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0010) << 5;
 80024aa:	f244 0340 	movw	r3, #16448	; 0x4040
 80024ae:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0100) << 5;
 80024b0:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <Init_C620_CAN_System+0x1c8>)
 80024b2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 80024b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024bc:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f002 ff0d 	bl	80052e4 <HAL_CAN_ConfigFilter>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <Init_C620_CAN_System+0xac>
        Error_Handler();
 80024d0:	f002 f84e 	bl	8004570 <Error_Handler>
    }

    sFilterConfig.FilterBank = 13; // CANLibで6まで使ってる
 80024d4:	230d      	movs	r3, #13
 80024d6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0100) << 5;
 80024d8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80024dc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <Init_C620_CAN_System+0x1c0>)
 80024e0:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 80024e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ea:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f002 fef6 	bl	80052e4 <HAL_CAN_ConfigFilter>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <Init_C620_CAN_System+0xda>
        Error_Handler();
 80024fe:	f002 f837 	bl	8004570 <Error_Handler>
    }

    if (HAL_CAN_Start(phcan) != HAL_OK) {
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f002 ffda 	bl	80054bc <HAL_CAN_Start>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <Init_C620_CAN_System+0xf0>
        printf(" -> Start Error CAN_C620\n");
 800250e:	4839      	ldr	r0, [pc, #228]	; (80025f4 <Init_C620_CAN_System+0x1cc>)
 8002510:	f01e fb4c 	bl	8020bac <puts>
        Error_Handler();
 8002514:	f002 f82c 	bl	8004570 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8002518:	2110      	movs	r1, #16
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f003 fa29 	bl	8005972 <HAL_CAN_ActivateNotification>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <Init_C620_CAN_System+0x108>
        printf(" -> FIFO1 CAN_Activation error1\n\r");
 8002526:	4834      	ldr	r0, [pc, #208]	; (80025f8 <Init_C620_CAN_System+0x1d0>)
 8002528:	f01e fada 	bl	8020ae0 <iprintf>
        Error_Handler();
 800252c:	f002 f820 	bl	8004570 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8002530:	2101      	movs	r1, #1
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f003 fa1d 	bl	8005972 <HAL_CAN_ActivateNotification>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <Init_C620_CAN_System+0x120>
        printf(" -> CAN_Activation error2\n\r");
 800253e:	482f      	ldr	r0, [pc, #188]	; (80025fc <Init_C620_CAN_System+0x1d4>)
 8002540:	f01e face 	bl	8020ae0 <iprintf>
        Error_Handler();
 8002544:	f002 f814 	bl	8004570 <Error_Handler>
    }

    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800254e:	e040      	b.n	80025d2 <Init_C620_CAN_System+0x1aa>
        _c620_feedback_data_raw_global[i].pos = 0;
 8002550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 8002556:	015b      	lsls	r3, r3, #5
 8002558:	4413      	add	r3, r2
 800255a:	3310      	adds	r3, #16
 800255c:	2200      	movs	r2, #0
 800255e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].pos_pre = 0;
 8002560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002564:	4a26      	ldr	r2, [pc, #152]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	4413      	add	r3, r2
 800256a:	3314      	adds	r3, #20
 800256c:	2200      	movs	r2, #0
 800256e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._rot_num = 0;
 8002570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 8002576:	015b      	lsls	r3, r3, #5
 8002578:	4413      	add	r3, r2
 800257a:	f103 0108 	add.w	r1, r3, #8
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9c1 2300 	strd	r2, r3, [r1]
        _c620_feedback_data_raw_global[i].vel = 0;
 800258a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800258e:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	4413      	add	r3, r2
 8002594:	3316      	adds	r3, #22
 8002596:	2200      	movs	r2, #0
 8002598:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].cur = 0;
 800259a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	4413      	add	r3, r2
 80025a4:	3318      	adds	r3, #24
 80025a6:	2200      	movs	r2, #0
 80025a8:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._get_counter = 0;
 80025aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ae:	4a14      	ldr	r2, [pc, #80]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 80025b0:	015b      	lsls	r3, r3, #5
 80025b2:	4413      	add	r3, r2
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._internal_offset_pos = 0;
 80025b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025bc:	4a10      	ldr	r2, [pc, #64]	; (8002600 <Init_C620_CAN_System+0x1d8>)
 80025be:	015b      	lsls	r3, r3, #5
 80025c0:	4413      	add	r3, r2
 80025c2:	3312      	adds	r3, #18
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 80025c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025cc:	3301      	adds	r3, #1
 80025ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d9ba      	bls.n	8002550 <Init_C620_CAN_System+0x128>
    }
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	3738      	adds	r7, #56	; 0x38
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20002d34 	.word	0x20002d34
 80025e8:	0001ffe0 	.word	0x0001ffe0
 80025ec:	0001ff20 	.word	0x0001ff20
 80025f0:	0001ff60 	.word	0x0001ff60
 80025f4:	08022054 	.word	0x08022054
 80025f8:	08022070 	.word	0x08022070
 80025fc:	08022094 	.word	0x08022094
 8002600:	20004d48 	.word	0x20004d48

08002604 <Get_C620_FeedbackData>:


C620_FeedbackData Get_C620_FeedbackData(C620_DeviceInfo *device_info) {
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	ed2d 8b02 	vpush	{d8}
 800260a:	b08b      	sub	sp, #44	; 0x2c
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    uint8_t device_id = device_info->device_id;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (device_id >= 9)device_id = 0;
 800261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800261e:	2b08      	cmp	r3, #8
 8002620:	d902      	bls.n	8002628 <Get_C620_FeedbackData+0x24>
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    C620_FeedbackData fb_data;
    fb_data.device_id = device_id;
 8002628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800262c:	733b      	strb	r3, [r7, #12]
    c620_feedback_data_raw *data = &(_c620_feedback_data_raw_global[device_id]);
 800262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002632:	015b      	lsls	r3, r3, #5
 8002634:	4a49      	ldr	r2, [pc, #292]	; (800275c <Get_C620_FeedbackData+0x158>)
 8002636:	4413      	add	r3, r2
 8002638:	623b      	str	r3, [r7, #32]

    int32_t offset_pos = (int32_t) (data->pos) - (int32_t) (data->_internal_offset_pos);
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	8a1b      	ldrh	r3, [r3, #16]
 800263e:	461a      	mov	r2, r3
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	8a5b      	ldrh	r3, [r3, #18]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	61fb      	str	r3, [r7, #28]
    if (device_info->ctrl_param.use_internal_offset != C620_USE_OFFSET_POS_DISABLE) {
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <Get_C620_FeedbackData+0x7c>
        fb_data.position = ((float)offset_pos) / 8192.0f + (float) (data->_rot_num);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002760 <Get_C620_FeedbackData+0x15c>
 8002660:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fd ff1f 	bl	80004b0 <__aeabi_l2f>
 8002672:	ee07 0a90 	vmov	s15, r0
 8002676:	ee78 7a27 	vadd.f32	s15, s16, s15
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]
 800267e:	e016      	b.n	80026ae <Get_C620_FeedbackData+0xaa>
    } else {
        fb_data.position = ((float)data->pos) / 8192.0f + (float) (data->_rot_num);
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	8a1b      	ldrh	r3, [r3, #16]
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002760 <Get_C620_FeedbackData+0x15c>
 8002690:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f7fd ff07 	bl	80004b0 <__aeabi_l2f>
 80026a2:	ee07 0a90 	vmov	s15, r0
 80026a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80026aa:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    fb_data.velocity = ((float) (data->vel)) / 60.0f;
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026bc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002764 <Get_C620_FeedbackData+0x160>
 80026c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c4:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.current = ((float) (data->cur * 20)) / 16384.0f;
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002768 <Get_C620_FeedbackData+0x164>
 80026e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e8:	edc7 7a06 	vstr	s15, [r7, #24]
    fb_data.get_flag = (data->_get_counter > 50);
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b32      	cmp	r3, #50	; 0x32
 80026f2:	bf8c      	ite	hi
 80026f4:	2301      	movhi	r3, #1
 80026f6:	2300      	movls	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	737b      	strb	r3, [r7, #13]

    fb_data.velocity *= device_info->ctrl_param.quant_per_rot;
 80026fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.position *= device_info->ctrl_param.quant_per_rot;
 800270e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	edc7 7a04 	vstr	s15, [r7, #16]
    if(device_info->ctrl_param.rotation == C620_ROT_CW){  // TODO: 反転処理(確認)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10b      	bne.n	8002742 <Get_C620_FeedbackData+0x13e>
        fb_data.velocity *= -1.0f;
 800272a:	edd7 7a05 	vldr	s15, [r7, #20]
 800272e:	eef1 7a67 	vneg.f32	s15, s15
 8002732:	edc7 7a05 	vstr	s15, [r7, #20]
        fb_data.position *= -1.0f;
 8002736:	edd7 7a04 	vldr	s15, [r7, #16]
 800273a:	eef1 7a67 	vneg.f32	s15, s15
 800273e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    return fb_data;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	461c      	mov	r4, r3
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	372c      	adds	r7, #44	; 0x2c
 8002754:	46bd      	mov	sp, r7
 8002756:	ecbd 8b02 	vpop	{d8}
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	20004d48 	.word	0x20004d48
 8002760:	46000000 	.word	0x46000000
 8002764:	42700000 	.word	0x42700000
 8002768:	46800000 	.word	0x46800000

0800276c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <MX_CAN1_Init+0x64>)
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <MX_CAN1_Init+0x68>)
 8002774:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <MX_CAN1_Init+0x64>)
 8002778:	2206      	movs	r2, #6
 800277a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <MX_CAN1_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <MX_CAN1_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_CAN1_Init+0x64>)
 800278a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800278e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <MX_CAN1_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_CAN1_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <MX_CAN1_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <MX_CAN1_Init+0x64>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <MX_CAN1_Init+0x64>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <MX_CAN1_Init+0x64>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_CAN1_Init+0x64>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <MX_CAN1_Init+0x64>)
 80027bc:	f002 fc96 	bl	80050ec <HAL_CAN_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80027c6:	f001 fed3 	bl	8004570 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20004e68 	.word	0x20004e68
 80027d4:	40006400 	.word	0x40006400

080027d8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_CAN2_Init+0x64>)
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <MX_CAN2_Init+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_CAN2_Init+0x64>)
 80027e4:	2206      	movs	r2, #6
 80027e6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_CAN2_Init+0x64>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <MX_CAN2_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_CAN2_Init+0x64>)
 80027f6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80027fa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_CAN2_Init+0x64>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_CAN2_Init+0x64>)
 8002804:	2200      	movs	r2, #0
 8002806:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_CAN2_Init+0x64>)
 800280a:	2200      	movs	r2, #0
 800280c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_CAN2_Init+0x64>)
 8002810:	2200      	movs	r2, #0
 8002812:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_CAN2_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <MX_CAN2_Init+0x64>)
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_CAN2_Init+0x64>)
 8002822:	2201      	movs	r2, #1
 8002824:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_CAN2_Init+0x64>)
 8002828:	f002 fc60 	bl	80050ec <HAL_CAN_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8002832:	f001 fe9d 	bl	8004570 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20004e90 	.word	0x20004e90
 8002840:	40006800 	.word	0x40006800

08002844 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <HAL_CAN_MspInit+0x174>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d149      	bne.n	80028fa <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002866:	4b55      	ldr	r3, [pc, #340]	; (80029bc <HAL_CAN_MspInit+0x178>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a53      	ldr	r2, [pc, #332]	; (80029bc <HAL_CAN_MspInit+0x178>)
 800286e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002870:	4b52      	ldr	r3, [pc, #328]	; (80029bc <HAL_CAN_MspInit+0x178>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10b      	bne.n	8002890 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002878:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4a50      	ldr	r2, [pc, #320]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 800287e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002882:	6413      	str	r3, [r2, #64]	; 0x40
 8002884:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002896:	f043 0308 	orr.w	r3, r3, #8
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b48      	ldr	r3, [pc, #288]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028a8:	2303      	movs	r3, #3
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80028b8:	2309      	movs	r3, #9
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4840      	ldr	r0, [pc, #256]	; (80029c4 <HAL_CAN_MspInit+0x180>)
 80028c4:	f004 fa82 	bl	8006dcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2105      	movs	r1, #5
 80028cc:	2013      	movs	r0, #19
 80028ce:	f003 fb17 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80028d2:	2013      	movs	r0, #19
 80028d4:	f003 fb30 	bl	8005f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2105      	movs	r1, #5
 80028dc:	2014      	movs	r0, #20
 80028de:	f003 fb0f 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80028e2:	2014      	movs	r0, #20
 80028e4:	f003 fb28 	bl	8005f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2105      	movs	r1, #5
 80028ec:	2015      	movs	r0, #21
 80028ee:	f003 fb07 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80028f2:	2015      	movs	r0, #21
 80028f4:	f003 fb20 	bl	8005f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80028f8:	e05a      	b.n	80029b0 <HAL_CAN_MspInit+0x16c>
  else if(canHandle->Instance==CAN2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_CAN_MspInit+0x184>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d155      	bne.n	80029b0 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 800290a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290e:	6413      	str	r3, [r2, #64]	; 0x40
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_CAN_MspInit+0x178>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a26      	ldr	r2, [pc, #152]	; (80029bc <HAL_CAN_MspInit+0x178>)
 8002924:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_CAN_MspInit+0x178>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10b      	bne.n	8002946 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_CAN_MspInit+0x17c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800295e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002970:	2309      	movs	r3, #9
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4814      	ldr	r0, [pc, #80]	; (80029cc <HAL_CAN_MspInit+0x188>)
 800297c:	f004 fa26 	bl	8006dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2105      	movs	r1, #5
 8002984:	203f      	movs	r0, #63	; 0x3f
 8002986:	f003 fabb 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800298a:	203f      	movs	r0, #63	; 0x3f
 800298c:	f003 fad4 	bl	8005f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2105      	movs	r1, #5
 8002994:	2040      	movs	r0, #64	; 0x40
 8002996:	f003 fab3 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800299a:	2040      	movs	r0, #64	; 0x40
 800299c:	f003 facc 	bl	8005f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2105      	movs	r1, #5
 80029a4:	2041      	movs	r0, #65	; 0x41
 80029a6:	f003 faab 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80029aa:	2041      	movs	r0, #65	; 0x41
 80029ac:	f003 fac4 	bl	8005f38 <HAL_NVIC_EnableIRQ>
}
 80029b0:	bf00      	nop
 80029b2:	3730      	adds	r7, #48	; 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40006400 	.word	0x40006400
 80029bc:	20004eb8 	.word	0x20004eb8
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40006800 	.word	0x40006800
 80029cc:	40020400 	.word	0x40020400

080029d0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029dc:	f00d fda8 	bl	8010530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029e0:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <pvPortMallocMicroROS+0x180>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80029e8:	f000 f98a 	bl	8002d00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <pvPortMallocMicroROS+0x184>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8092 	bne.w	8002b1e <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01f      	beq.n	8002a40 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8002a00:	2208      	movs	r2, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	3308      	adds	r3, #8
 8002a1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	b672      	cpsid	i
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	b662      	cpsie	i
 8002a3a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a3c:	bf00      	nop
 8002a3e:	e7fe      	b.n	8002a3e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d06b      	beq.n	8002b1e <pvPortMallocMicroROS+0x14e>
 8002a46:	4b44      	ldr	r3, [pc, #272]	; (8002b58 <pvPortMallocMicroROS+0x188>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d866      	bhi.n	8002b1e <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <pvPortMallocMicroROS+0x18c>)
 8002a52:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <pvPortMallocMicroROS+0x18c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a5a:	e004      	b.n	8002a66 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d903      	bls.n	8002a78 <pvPortMallocMicroROS+0xa8>
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f1      	bne.n	8002a5c <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <pvPortMallocMicroROS+0x180>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d04d      	beq.n	8002b1e <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2208      	movs	r2, #8
 8002a88:	4413      	add	r3, r2
 8002a8a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d921      	bls.n	8002ae8 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	b672      	cpsid	i
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	b662      	cpsie	i
 8002aca:	613b      	str	r3, [r7, #16]
}
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	f000 f96e 	bl	8002dc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <pvPortMallocMicroROS+0x188>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <pvPortMallocMicroROS+0x188>)
 8002af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <pvPortMallocMicroROS+0x188>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <pvPortMallocMicroROS+0x190>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d203      	bcs.n	8002b0a <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <pvPortMallocMicroROS+0x188>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <pvPortMallocMicroROS+0x190>)
 8002b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <pvPortMallocMicroROS+0x184>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b1e:	f00d fd15 	bl	801054c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	b672      	cpsid	i
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	b662      	cpsie	i
 8002b40:	60fb      	str	r3, [r7, #12]
}
 8002b42:	bf00      	nop
 8002b44:	e7fe      	b.n	8002b44 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8002b46:	69fb      	ldr	r3, [r7, #28]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3728      	adds	r7, #40	; 0x28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20008db4 	.word	0x20008db4
 8002b54:	20008dc0 	.word	0x20008dc0
 8002b58:	20008db8 	.word	0x20008db8
 8002b5c:	20008dac 	.word	0x20008dac
 8002b60:	20008dbc 	.word	0x20008dbc

08002b64 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04c      	beq.n	8002c10 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b76:	2308      	movs	r3, #8
 8002b78:	425b      	negs	r3, r3
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <vPortFreeMicroROS+0xb4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <vPortFreeMicroROS+0x48>
	__asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	b672      	cpsid	i
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	b662      	cpsie	i
 8002ba6:	60fb      	str	r3, [r7, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <vPortFreeMicroROS+0x6a>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	b672      	cpsid	i
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	b662      	cpsie	i
 8002bc8:	60bb      	str	r3, [r7, #8]
}
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <vPortFreeMicroROS+0xb4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d019      	beq.n	8002c10 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d115      	bne.n	8002c10 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <vPortFreeMicroROS+0xb4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002bf4:	f00d fc9c 	bl	8010530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <vPortFreeMicroROS+0xb8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <vPortFreeMicroROS+0xb8>)
 8002c04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c06:	6938      	ldr	r0, [r7, #16]
 8002c08:	f000 f8dc 	bl	8002dc4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002c0c:	f00d fc9e 	bl	801054c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20008dc0 	.word	0x20008dc0
 8002c1c:	20008db8 	.word	0x20008db8

08002c20 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	425b      	negs	r3, r3
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4413      	add	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <getBlockSize+0x38>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

	return count;
 8002c48:	68fb      	ldr	r3, [r7, #12]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20008dc0 	.word	0x20008dc0

08002c5c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002c66:	f00d fc63 	bl	8010530 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	f7ff feb0 	bl	80029d0 <pvPortMallocMicroROS>
 8002c70:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <pvPortReallocMicroROS+0x4c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d014      	beq.n	8002ca8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffce 	bl	8002c20 <getBlockSize>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2208      	movs	r2, #8
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d201      	bcs.n	8002c98 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68b8      	ldr	r0, [r7, #8]
 8002c9e:	f01e fa7c 	bl	802119a <memcpy>

		vPortFreeMicroROS(pv);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff5e 	bl	8002b64 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002ca8:	f00d fc50 	bl	801054c <xTaskResumeAll>

	return newmem;
 8002cac:	68bb      	ldr	r3, [r7, #8]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002cc0:	f00d fc36 	bl	8010530 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff fe7e 	bl	80029d0 <pvPortMallocMicroROS>
 8002cd4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002cda:	e004      	b.n	8002ce6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	613a      	str	r2, [r7, #16]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1e5a      	subs	r2, r3, #1
 8002cea:	617a      	str	r2, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f5      	bne.n	8002cdc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002cf0:	f00d fc2c 	bl	801054c <xTaskResumeAll>
  	return mem;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d06:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002d0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <prvHeapInit+0xac>)
 8002d0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3307      	adds	r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0307 	bic.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <prvHeapInit+0xac>)
 8002d30:	4413      	add	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d38:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <prvHeapInit+0xb0>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <prvHeapInit+0xb0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <prvHeapInit+0xb4>)
 8002d60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <prvHeapInit+0xb4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2200      	movs	r2, #0
 8002d68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <prvHeapInit+0xb4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <prvHeapInit+0xb4>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <prvHeapInit+0xb8>)
 8002d8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <prvHeapInit+0xbc>)
 8002d96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <prvHeapInit+0xc0>)
 8002d9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d9e:	601a      	str	r2, [r3, #0]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	200051ac 	.word	0x200051ac
 8002db0:	20008dac 	.word	0x20008dac
 8002db4:	20008db4 	.word	0x20008db4
 8002db8:	20008dbc 	.word	0x20008dbc
 8002dbc:	20008db8 	.word	0x20008db8
 8002dc0:	20008dc0 	.word	0x20008dc0

08002dc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <prvInsertBlockIntoFreeList+0xac>)
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e002      	b.n	8002dd8 <prvInsertBlockIntoFreeList+0x14>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d8f7      	bhi.n	8002dd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4413      	add	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d108      	bne.n	8002e06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	441a      	add	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d118      	bne.n	8002e4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <prvInsertBlockIntoFreeList+0xb0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d00d      	beq.n	8002e42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e008      	b.n	8002e54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <prvInsertBlockIntoFreeList+0xb0>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e003      	b.n	8002e54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d002      	beq.n	8002e62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20008dac 	.word	0x20008dac
 8002e74:	20008db4 	.word	0x20008db4

08002e78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_DMA_Init+0x58>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <MX_DMA_Init+0x58>)
 8002e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_DMA_Init+0x58>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2105      	movs	r1, #5
 8002e9a:	200c      	movs	r0, #12
 8002e9c:	f003 f830 	bl	8005f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ea0:	200c      	movs	r0, #12
 8002ea2:	f003 f849 	bl	8005f38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2105      	movs	r1, #5
 8002eaa:	200e      	movs	r0, #14
 8002eac:	f003 f828 	bl	8005f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	f003 f841 	bl	8005f38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2105      	movs	r1, #5
 8002eba:	2011      	movs	r0, #17
 8002ebc:	f003 f820 	bl	8005f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ec0:	2011      	movs	r0, #17
 8002ec2:	f003 f839 	bl	8005f38 <HAL_NVIC_EnableIRQ>

}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002ee2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <cubemx_transport_open+0x28>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f007 f9c2 	bl	800a274 <HAL_UART_Receive_DMA>
    return true;
 8002ef0:	2301      	movs	r3, #1
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20008dc4 	.word	0x20008dc4

08002f00 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002f0e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f007 f9f3 	bl	800a2fc <HAL_UART_DMAStop>
    return true;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002f34:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d11a      	bne.n	8002f74 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f007 f918 	bl	800a17c <HAL_UART_Transmit_DMA>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002f50:	e002      	b.n	8002f58 <cubemx_transport_write+0x38>
            osDelay(1);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f00c f974 	bl	800f240 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <cubemx_transport_write+0x46>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d1f5      	bne.n	8002f52 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <cubemx_transport_write+0x50>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	e002      	b.n	8002f76 <cubemx_transport_write+0x56>
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8002f74:	2300      	movs	r3, #0
    }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002f94:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9a:	b672      	cpsid	i
}
 8002f9c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002faa:	4a1c      	ldr	r2, [pc, #112]	; (800301c <cubemx_transport_read+0x9c>)
 8002fac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fae:	b662      	cpsie	i
}
 8002fb0:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f00c f941 	bl	800f240 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <cubemx_transport_read+0xa0>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <cubemx_transport_read+0x9c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d103      	bne.n	8002fd2 <cubemx_transport_read+0x52>
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbe3      	blt.n	8002f9a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002fd6:	e011      	b.n	8002ffc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <cubemx_transport_read+0xa0>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	440b      	add	r3, r1
 8002fe2:	4910      	ldr	r1, [pc, #64]	; (8003024 <cubemx_transport_read+0xa4>)
 8002fe4:	5c8a      	ldrb	r2, [r1, r2]
 8002fe6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <cubemx_transport_read+0xa0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff2:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <cubemx_transport_read+0xa0>)
 8002ff4:	6013      	str	r3, [r2, #0]
        wrote++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <cubemx_transport_read+0xa0>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <cubemx_transport_read+0x9c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d003      	beq.n	8003010 <cubemx_transport_read+0x90>
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d3e3      	bcc.n	8002fd8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8003010:	69bb      	ldr	r3, [r7, #24]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200095c8 	.word	0x200095c8
 8003020:	200095c4 	.word	0x200095c4
 8003024:	20008dc4 	.word	0x20008dc4

08003028 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800302c:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <MX_ETH_Init+0x84>)
 800302e:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <MX_ETH_Init+0x88>)
 8003030:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <MX_ETH_Init+0x8c>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <MX_ETH_Init+0x8c>)
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <MX_ETH_Init+0x8c>)
 8003040:	22e1      	movs	r2, #225	; 0xe1
 8003042:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <MX_ETH_Init+0x8c>)
 8003046:	2200      	movs	r2, #0
 8003048:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <MX_ETH_Init+0x8c>)
 800304c:	2200      	movs	r2, #0
 800304e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003050:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <MX_ETH_Init+0x8c>)
 8003052:	2200      	movs	r2, #0
 8003054:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <MX_ETH_Init+0x84>)
 8003058:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <MX_ETH_Init+0x8c>)
 800305a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <MX_ETH_Init+0x84>)
 800305e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003062:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <MX_ETH_Init+0x84>)
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <MX_ETH_Init+0x90>)
 8003068:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <MX_ETH_Init+0x84>)
 800306c:	4a13      	ldr	r2, [pc, #76]	; (80030bc <MX_ETH_Init+0x94>)
 800306e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <MX_ETH_Init+0x84>)
 8003072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003076:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003078:	480c      	ldr	r0, [pc, #48]	; (80030ac <MX_ETH_Init+0x84>)
 800307a:	f003 fb81 	bl	8006780 <HAL_ETH_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003084:	f001 fa74 	bl	8004570 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003088:	2238      	movs	r2, #56	; 0x38
 800308a:	2100      	movs	r1, #0
 800308c:	480c      	ldr	r0, [pc, #48]	; (80030c0 <MX_ETH_Init+0x98>)
 800308e:	f01d ffbb 	bl	8021008 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <MX_ETH_Init+0x98>)
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <MX_ETH_Init+0x98>)
 800309a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800309e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <MX_ETH_Init+0x98>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20009604 	.word	0x20009604
 80030b0:	40028000 	.word	0x40028000
 80030b4:	200096b4 	.word	0x200096b4
 80030b8:	20000994 	.word	0x20000994
 80030bc:	200008f4 	.word	0x200008f4
 80030c0:	200095cc 	.word	0x200095cc

080030c4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08e      	sub	sp, #56	; 0x38
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a4e      	ldr	r2, [pc, #312]	; (800321c <HAL_ETH_MspInit+0x158>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	f040 8096 	bne.w	8003214 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80030e8:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 80030ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f2:	6313      	str	r3, [r2, #48]	; 0x30
 80030f4:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	623b      	str	r3, [r7, #32]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800310a:	6313      	str	r3, [r2, #48]	; 0x30
 800310c:	4b44      	ldr	r3, [pc, #272]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800311e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003122:	6313      	str	r3, [r2, #48]	; 0x30
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003130:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	4a3a      	ldr	r2, [pc, #232]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6313      	str	r3, [r2, #48]	; 0x30
 800313c:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	4b35      	ldr	r3, [pc, #212]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a34      	ldr	r2, [pc, #208]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003166:	f043 0302 	orr.w	r3, r3, #2
 800316a:	6313      	str	r3, [r2, #48]	; 0x30
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003178:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a28      	ldr	r2, [pc, #160]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 800317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <HAL_ETH_MspInit+0x15c>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003190:	2332      	movs	r3, #50	; 0x32
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031a0:	230b      	movs	r3, #11
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a8:	4619      	mov	r1, r3
 80031aa:	481e      	ldr	r0, [pc, #120]	; (8003224 <HAL_ETH_MspInit+0x160>)
 80031ac:	f003 fe0e 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80031b0:	2386      	movs	r3, #134	; 0x86
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031c0:	230b      	movs	r3, #11
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	4619      	mov	r1, r3
 80031ca:	4817      	ldr	r0, [pc, #92]	; (8003228 <HAL_ETH_MspInit+0x164>)
 80031cc:	f003 fdfe 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80031d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031e2:	230b      	movs	r3, #11
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80031e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ea:	4619      	mov	r1, r3
 80031ec:	480f      	ldr	r0, [pc, #60]	; (800322c <HAL_ETH_MspInit+0x168>)
 80031ee:	f003 fded 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80031f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003204:	230b      	movs	r3, #11
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320c:	4619      	mov	r1, r3
 800320e:	4808      	ldr	r0, [pc, #32]	; (8003230 <HAL_ETH_MspInit+0x16c>)
 8003210:	f003 fddc 	bl	8006dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003214:	bf00      	nop
 8003216:	3738      	adds	r7, #56	; 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40028000 	.word	0x40028000
 8003220:	40023800 	.word	0x40023800
 8003224:	40020800 	.word	0x40020800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40021800 	.word	0x40021800

08003234 <subscription_callback_air_hand>:
//
//    }
//}

void subscription_callback_air_hand(const void * msgin)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const actuator_custom_msgs__msg__HandAirStatus * status = (const actuator_custom_msgs__msg__HandAirStatus *)msgin;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60fb      	str	r3, [r7, #12]
	  static Air_PortStatus_Typedef air_status[6];

	  air_status[0] = (status->a1) ? AIR_ON : AIR_OFF;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <subscription_callback_air_hand+0xa8>)
 8003248:	701a      	strb	r2, [r3, #0]
	  air_status[1] = (status->a2) ? AIR_ON : AIR_OFF;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	461a      	mov	r2, r3
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <subscription_callback_air_hand+0xa8>)
 8003252:	705a      	strb	r2, [r3, #1]
	  air_status[2] = (status->a3) ? AIR_ON : AIR_OFF;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	789b      	ldrb	r3, [r3, #2]
 8003258:	461a      	mov	r2, r3
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <subscription_callback_air_hand+0xa8>)
 800325c:	709a      	strb	r2, [r3, #2]
	  air_status[3] = (status->a4) ? AIR_ON : AIR_OFF;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	461a      	mov	r2, r3
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <subscription_callback_air_hand+0xa8>)
 8003266:	70da      	strb	r2, [r3, #3]
	  air_status[4] = (status->a5) ? AIR_ON : AIR_OFF;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	791b      	ldrb	r3, [r3, #4]
 800326c:	461a      	mov	r2, r3
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <subscription_callback_air_hand+0xa8>)
 8003270:	711a      	strb	r2, [r3, #4]
	  air_status[5] = (status->a6) ? AIR_ON : AIR_OFF;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	795b      	ldrb	r3, [r3, #5]
 8003276:	461a      	mov	r2, r3
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <subscription_callback_air_hand+0xa8>)
 800327a:	715a      	strb	r2, [r3, #5]

	  if(NUM_OF_AIR>0){
		  for(int i=0;i<NUM_OF_AIR-1;i++){
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e024      	b.n	80032cc <subscription_callback_air_hand+0x98>
			  for(int j=0;j<6;j++){       //TODO: j<6は手動
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e01b      	b.n	80032c0 <subscription_callback_air_hand+0x8c>
				  air_devices[i].device_num = j;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	4914      	ldr	r1, [pc, #80]	; (80032e0 <subscription_callback_air_hand+0xac>)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	440b      	add	r3, r1
 8003298:	3302      	adds	r3, #2
 800329a:	4602      	mov	r2, r0
 800329c:	701a      	strb	r2, [r3, #0]
				  AirCylinder_SendOutput(&air_devices[i], air_status[i]);
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <subscription_callback_air_hand+0xac>)
 80032a8:	441a      	add	r2, r3
 80032aa:	490c      	ldr	r1, [pc, #48]	; (80032dc <subscription_callback_air_hand+0xa8>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	440b      	add	r3, r1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f7fe f9d1 	bl	800165c <AirCylinder_SendOutput>
			  for(int j=0;j<6;j++){       //TODO: j<6は手動
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3301      	adds	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	dde0      	ble.n	8003288 <subscription_callback_air_hand+0x54>
		  for(int i=0;i<NUM_OF_AIR-1;i++){
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	ddd7      	ble.n	8003282 <subscription_callback_air_hand+0x4e>
			  }
		  }
	  }
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	2000c88c 	.word	0x2000c88c
 80032e0:	20004f44 	.word	0x20004f44

080032e4 <subscription_callback_air_shoot>:

void subscription_callback_air_shoot(const void * msgin)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const actuator_custom_msgs__msg__ShootAirStatus * status = (const actuator_custom_msgs__msg__ShootAirStatus *)msgin;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60fb      	str	r3, [r7, #12]
	  static Air_PortStatus_Typedef air_status[4];

	  air_status[0] = (status->ca) ? AIR_ON : AIR_OFF;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <subscription_callback_air_shoot+0x94>)
 80032f8:	701a      	strb	r2, [r3, #0]
	  air_status[1] = (status->pi) ? AIR_ON : AIR_OFF;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	461a      	mov	r2, r3
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <subscription_callback_air_shoot+0x94>)
 8003302:	705a      	strb	r2, [r3, #1]
	  air_status[2] = (status->gu) ? AIR_ON : AIR_OFF;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	461a      	mov	r2, r3
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <subscription_callback_air_shoot+0x94>)
 800330c:	709a      	strb	r2, [r3, #2]
	  air_status[3] = (status->sh) ? AIR_ON : AIR_OFF;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	461a      	mov	r2, r3
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <subscription_callback_air_shoot+0x94>)
 8003316:	70da      	strb	r2, [r3, #3]

	  if(NUM_OF_AIR>0){
		  for(int i=1;i<NUM_OF_AIR;i++){
 8003318:	2301      	movs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e024      	b.n	8003368 <subscription_callback_air_shoot+0x84>
			  for(int j=0;j<4;j++){       //TODO: j<4は手動
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e01b      	b.n	800335c <subscription_callback_air_shoot+0x78>
				  air_devices[i].device_num = j;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	b2d8      	uxtb	r0, r3
 8003328:	4914      	ldr	r1, [pc, #80]	; (800337c <subscription_callback_air_shoot+0x98>)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	440b      	add	r3, r1
 8003334:	3302      	adds	r3, #2
 8003336:	4602      	mov	r2, r0
 8003338:	701a      	strb	r2, [r3, #0]
				  AirCylinder_SendOutput(&air_devices[i], air_status[i]);
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <subscription_callback_air_shoot+0x98>)
 8003344:	441a      	add	r2, r3
 8003346:	490c      	ldr	r1, [pc, #48]	; (8003378 <subscription_callback_air_shoot+0x94>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	440b      	add	r3, r1
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7fe f983 	bl	800165c <AirCylinder_SendOutput>
			  for(int j=0;j<4;j++){       //TODO: j<4は手動
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3301      	adds	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b03      	cmp	r3, #3
 8003360:	dde0      	ble.n	8003324 <subscription_callback_air_shoot+0x40>
		  for(int i=1;i<NUM_OF_AIR;i++){
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b01      	cmp	r3, #1
 800336c:	ddd7      	ble.n	800331e <subscription_callback_air_shoot+0x3a>
			  }
		  }
	  }
}
 800336e:	bf00      	nop
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000c894 	.word	0x2000c894
 800337c:	20004f44 	.word	0x20004f44

08003380 <subscription_callback_mcmd>:



void subscription_callback_mcmd(const void * msgin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const actuator_custom_msgs__msg__ShootRoller * rotvels = (const actuator_custom_msgs__msg__ShootRoller *)msgin;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60bb      	str	r3, [r7, #8]
	  static int rpm[3];	//発射用モーター３つ

	  //rpm =  (float)(rotvels->data);
	  rpm[0] = rotvels->m1;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <subscription_callback_mcmd+0x64>)
 8003392:	6013      	str	r3, [r2, #0]
	  rpm[1] = rotvels->m2;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <subscription_callback_mcmd+0x64>)
 800339a:	6053      	str	r3, [r2, #4]
	  rpm[2] = rotvels->m3;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <subscription_callback_mcmd+0x64>)
 80033a2:	6093      	str	r3, [r2, #8]


	  for(int i=0;i<3;i++){
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e013      	b.n	80033d2 <subscription_callback_mcmd+0x52>
	  //	rpm[i] = (float)(rotvels->data[i]);
		  MCMD_SetTarget(&(mcmd_handlers[i]), (float)rpm[i]);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <subscription_callback_mcmd+0x68>)
 80033b0:	441a      	add	r2, r3
 80033b2:	490c      	ldr	r1, [pc, #48]	; (80033e4 <subscription_callback_mcmd+0x64>)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c2:	eeb0 0a67 	vmov.f32	s0, s15
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7fe f916 	bl	80015f8 <MCMD_SetTarget>
	  for(int i=0;i<3;i++){
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	dde8      	ble.n	80033aa <subscription_callback_mcmd+0x2a>
	  }

}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000c898 	.word	0x2000c898
 80033e8:	20004ec4 	.word	0x20004ec4

080033ec <subscription_callback_table>:

void subscription_callback_table(const void * msgin)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const std_msgs__msg__Float64 * zrot = (const std_msgs__msg__Float64 *)msgin;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
	  static float zrot_rad;
	  zrot_rad = zrot->data;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	ed93 7b00 	vldr	d7, [r3]
 80033fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <subscription_callback_table+0x34>)
 8003404:	edc3 7a00 	vstr	s15, [r3]

	  MCMD_SetTarget(&(mcmd_handlers[4]), zrot_rad);
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <subscription_callback_table+0x34>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	eeb0 0a67 	vmov.f32	s0, s15
 8003412:	4804      	ldr	r0, [pc, #16]	; (8003424 <subscription_callback_table+0x38>)
 8003414:	f7fe f8f0 	bl	80015f8 <MCMD_SetTarget>

}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	2000c8a4 	.word	0x2000c8a4
 8003424:	20004fc4 	.word	0x20004fc4

08003428 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const geometry_msgs__msg__Twist * twist = (const geometry_msgs__msg__Twist *)msgin;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	61bb      	str	r3, [r7, #24]
	  static float _mros_target[4]; //TODO: 4は手打ち
	  const float R = 100.0f; //中心からオムニまでの距離
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <subscription_callback+0x58>)
 8003436:	617b      	str	r3, [r7, #20]
	  const float r = 5.0f;  //タイヤの半径
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <subscription_callback+0x5c>)
 800343a:	613b      	str	r3, [r7, #16]
	  float theta = 0.0f; //TODO fbから持ってくる
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]

	  for(int i=0;i<4;i++){
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e013      	b.n	8003470 <subscription_callback+0x48>
//		  _mros_target[i] = ((-sinf(theta+(M_PI*(float)i))*twist.linear.x)+(cosf(theta+(M_PI*(float)i))*twist.linear.y)+R*twist.angular.z)/r;
		  C620_SetTarget(&c620_dev_info_global[i], _mros_target[i]);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	224c      	movs	r2, #76	; 0x4c
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <subscription_callback+0x60>)
 8003452:	441a      	add	r2, r3
 8003454:	490d      	ldr	r1, [pc, #52]	; (800348c <subscription_callback+0x64>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	4610      	mov	r0, r2
 8003466:	f7fe fd31 	bl	8001ecc <C620_SetTarget>
	  for(int i=0;i<4;i++){
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b03      	cmp	r3, #3
 8003474:	dde8      	ble.n	8003448 <subscription_callback+0x20>
	  }

}
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	42c80000 	.word	0x42c80000
 8003484:	40a00000 	.word	0x40a00000
 8003488:	20004f4c 	.word	0x20004f4c
 800348c:	2000c8a8 	.word	0x2000c8a8

08003490 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of C620Timer */
  C620TimerHandle = osTimerNew(C620TimerCallback, osTimerPeriodic, NULL, &C620Timer_attributes);
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <MX_FREERTOS_Init+0x3c>)
 8003496:	2200      	movs	r2, #0
 8003498:	2101      	movs	r1, #1
 800349a:	480d      	ldr	r0, [pc, #52]	; (80034d0 <MX_FREERTOS_Init+0x40>)
 800349c:	f00b ff14 	bl	800f2c8 <osTimerNew>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <MX_FREERTOS_Init+0x44>)
 80034a4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80034a6:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <MX_FREERTOS_Init+0x48>)
 80034a8:	2100      	movs	r1, #0
 80034aa:	480c      	ldr	r0, [pc, #48]	; (80034dc <MX_FREERTOS_Init+0x4c>)
 80034ac:	f00b fe22 	bl	800f0f4 <osThreadNew>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <MX_FREERTOS_Init+0x50>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <MX_FREERTOS_Init+0x54>)
 80034b8:	2100      	movs	r1, #0
 80034ba:	480b      	ldr	r0, [pc, #44]	; (80034e8 <MX_FREERTOS_Init+0x58>)
 80034bc:	f00b fe1a 	bl	800f0f4 <osThreadNew>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <MX_FREERTOS_Init+0x5c>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	080222c4 	.word	0x080222c4
 80034d0:	08003add 	.word	0x08003add
 80034d4:	2000c85c 	.word	0x2000c85c
 80034d8:	0802227c 	.word	0x0802227c
 80034dc:	080034f1 	.word	0x080034f1
 80034e0:	200096bc 	.word	0x200096bc
 80034e4:	080222a0 	.word	0x080222a0
 80034e8:	08003ac1 	.word	0x08003ac1
 80034ec:	2000c5fc 	.word	0x2000c5fc

080034f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80034fc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003500:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003502:	f00e fd53 	bl	8011fac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	 rmw_uros_set_custom_transport(
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <StartDefaultTask+0x4c>)
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <StartDefaultTask+0x50>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <StartDefaultTask+0x54>)
 8003510:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <StartDefaultTask+0x58>)
 8003512:	490e      	ldr	r1, [pc, #56]	; (800354c <StartDefaultTask+0x5c>)
 8003514:	2001      	movs	r0, #1
 8003516:	f013 f8b5 	bl	8016684 <rmw_uros_set_custom_transport>
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	// micro-ROS connection check
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> ON
 800351a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800351e:	480c      	ldr	r0, [pc, #48]	; (8003550 <StartDefaultTask+0x60>)
 8003520:	f003 fe19 	bl	8007156 <HAL_GPIO_TogglePin>
	while(1) {
		rmw_ret_t ping_result = rmw_uros_ping_agent(1000, 5);  // ping Agent
 8003524:	2105      	movs	r1, #5
 8003526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800352a:	f013 f8c1 	bl	80166b0 <rmw_uros_ping_agent>
 800352e:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
		if(ping_result == RMW_RET_OK){
 8003532:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <StartDefaultTask+0x64>
	while(1) {
 800353a:	e7f3      	b.n	8003524 <StartDefaultTask+0x34>
 800353c:	08002f81 	.word	0x08002f81
 8003540:	08002f21 	.word	0x08002f21
 8003544:	08002f01 	.word	0x08002f01
 8003548:	08002ed5 	.word	0x08002ed5
 800354c:	2000c99c 	.word	0x2000c99c
 8003550:	40020400 	.word	0x40020400
			break;
 8003554:	bf00      	nop
		}
	}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> OFF
 8003556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800355a:	48da      	ldr	r0, [pc, #872]	; (80038c4 <StartDefaultTask+0x3d4>)
 800355c:	f003 fdfb 	bl	8007156 <HAL_GPIO_TogglePin>


	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8003560:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003564:	4618      	mov	r0, r3
 8003566:	f012 fd27 	bl	8015fb8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800356a:	4bd7      	ldr	r3, [pc, #860]	; (80038c8 <StartDefaultTask+0x3d8>)
 800356c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	freeRTOS_allocator.deallocate = microros_deallocate;
 8003570:	4bd6      	ldr	r3, [pc, #856]	; (80038cc <StartDefaultTask+0x3dc>)
 8003572:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	freeRTOS_allocator.reallocate = microros_reallocate;
 8003576:	4bd6      	ldr	r3, [pc, #856]	; (80038d0 <StartDefaultTask+0x3e0>)
 8003578:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800357c:	4bd5      	ldr	r3, [pc, #852]	; (80038d4 <StartDefaultTask+0x3e4>)
 800357e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8003582:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003586:	4618      	mov	r0, r3
 8003588:	f012 fd24 	bl	8015fd4 <rcutils_set_default_allocator>
 800358c:	4603      	mov	r3, r0
 800358e:	f083 0301 	eor.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <StartDefaultTask+0xb2>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8003598:	f240 1163 	movw	r1, #355	; 0x163
 800359c:	48ce      	ldr	r0, [pc, #824]	; (80038d8 <StartDefaultTask+0x3e8>)
 800359e:	f01d fa9f 	bl	8020ae0 <iprintf>
	}
	printf("start Micro-ROS Task\n");
 80035a2:	48ce      	ldr	r0, [pc, #824]	; (80038dc <StartDefaultTask+0x3ec>)
 80035a4:	f01d fb02 	bl	8020bac <puts>

	// micro-ROS app
	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 80035a8:	4bcd      	ldr	r3, [pc, #820]	; (80038e0 <StartDefaultTask+0x3f0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6898      	ldr	r0, [r3, #8]
 80035ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b2:	2202      	movs	r2, #2
 80035b4:	2100      	movs	r1, #0
 80035b6:	f01d fb09 	bl	8020bcc <setvbuf>
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 80035ba:	f011 f965 	bl	8014888 <rcl_get_zero_initialized_init_options>
 80035be:	4603      	mov	r3, r0
 80035c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	rclc_support_t support;
	rcl_allocator_t allocator = rcl_get_default_allocator();
 80035c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035c8:	4618      	mov	r0, r3
 80035ca:	f012 fd21 	bl	8016010 <rcutils_get_default_allocator>
	rcl_node_t node;
	rcl_node_options_t node_ops = rcl_node_get_default_options();
 80035ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80035d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035d6:	4618      	mov	r0, r3
 80035d8:	f011 fc0a 	bl	8014df0 <rcl_node_get_default_options>
	// // node setting
	// RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));  //create init_options
	// RCCHECK(rclc_node_init_default(&node, "f7_mros_node", "", &support));  // create node

	// node setting
	RCCHECK(rcl_init_options_init(&init_options, allocator));
 80035dc:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 80035e0:	466a      	mov	r2, sp
 80035e2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80035e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80035ee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	4620      	mov	r0, r4
 80035f6:	f011 f949 	bl	801488c <rcl_init_options_init>
 80035fa:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 80035fe:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <StartDefaultTask+0x12a>
 8003606:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800360a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800360e:	48b5      	ldr	r0, [pc, #724]	; (80038e4 <StartDefaultTask+0x3f4>)
 8003610:	f01d fa66 	bl	8020ae0 <iprintf>
 8003614:	2000      	movs	r0, #0
 8003616:	f00c fe77 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_init_options_set_domain_id(&init_options, 123)); // ROS_DOMAIN_IDの設定。今回は123としてる。
 800361a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800361e:	217b      	movs	r1, #123	; 0x7b
 8003620:	4618      	mov	r0, r3
 8003622:	f011 fa31 	bl	8014a88 <rcl_init_options_set_domain_id>
 8003626:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
 800362a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <StartDefaultTask+0x156>
 8003632:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8003636:	f240 1175 	movw	r1, #373	; 0x175
 800363a:	48aa      	ldr	r0, [pc, #680]	; (80038e4 <StartDefaultTask+0x3f4>)
 800363c:	f01d fa50 	bl	8020ae0 <iprintf>
 8003640:	2000      	movs	r0, #0
 8003642:	f00c fe61 	bl	8010308 <vTaskDelete>
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8003646:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800364a:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 800364e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	f012 fbf9 	bl	8015e50 <rclc_support_init_with_options>
	RCCHECK(rclc_node_init_with_options(&node, "f7_mros_node", "", &support, &node_ops));
 800365e:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8003662:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8003666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	4a9e      	ldr	r2, [pc, #632]	; (80038e8 <StartDefaultTask+0x3f8>)
 8003670:	499e      	ldr	r1, [pc, #632]	; (80038ec <StartDefaultTask+0x3fc>)
 8003672:	f012 fc23 	bl	8015ebc <rclc_node_init_with_options>
 8003676:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
 800367a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <StartDefaultTask+0x1a6>
 8003682:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8003686:	f240 1177 	movw	r1, #375	; 0x177
 800368a:	4896      	ldr	r0, [pc, #600]	; (80038e4 <StartDefaultTask+0x3f4>)
 800368c:	f01d fa28 	bl	8020ae0 <iprintf>
 8003690:	2000      	movs	r0, #0
 8003692:	f00c fe39 	bl	8010308 <vTaskDelete>

	// create executor
	rclc_executor_t executor;
	unsigned int num_handlers = 5; // TODO : 忘れずに変更
 8003696:	2305      	movs	r3, #5
 8003698:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	RCCHECK(rclc_executor_init(&executor, &support.context, num_handlers, &allocator));
 800369c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80036a0:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80036a4:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80036a8:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80036ac:	f012 f8b4 	bl	8015818 <rclc_executor_init>
 80036b0:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
 80036b4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <StartDefaultTask+0x1e0>
 80036bc:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80036c0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80036c4:	4887      	ldr	r0, [pc, #540]	; (80038e4 <StartDefaultTask+0x3f4>)
 80036c6:	f01d fa0b 	bl	8020ae0 <iprintf>
 80036ca:	2000      	movs	r0, #0
 80036cc:	f00c fe1c 	bl	8010308 <vTaskDelete>

	// create subscriber for hand air
	rcl_subscription_t subscriber_air_hand;
	const char* sub_name_air_hand = "mros_input_air_hand";
 80036d0:	4b87      	ldr	r3, [pc, #540]	; (80038f0 <StartDefaultTask+0x400>)
 80036d2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	actuator_custom_msgs__msg__HandAirStatus actuator_msg_air_hand;
	RCCHECK(rclc_subscription_init_default(&subscriber_air_hand, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_custom_msgs, msg, HandAirStatus), sub_name_air_hand));
 80036d6:	f00f f9d9 	bl	8012a8c <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus>
 80036da:	4602      	mov	r2, r0
 80036dc:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80036e0:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80036e4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80036e8:	f012 fc24 	bl	8015f34 <rclc_subscription_init_default>
 80036ec:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 80036f0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <StartDefaultTask+0x21c>
 80036f8:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80036fc:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8003700:	4878      	ldr	r0, [pc, #480]	; (80038e4 <StartDefaultTask+0x3f4>)
 8003702:	f01d f9ed 	bl	8020ae0 <iprintf>
 8003706:	2000      	movs	r0, #0
 8003708:	f00c fdfe 	bl	8010308 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_air_hand, &actuator_msg_air_hand, &subscription_callback_air_hand, ON_NEW_DATA));
 800370c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003710:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8003714:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8003718:	2300      	movs	r3, #0
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	4b75      	ldr	r3, [pc, #468]	; (80038f4 <StartDefaultTask+0x404>)
 800371e:	f012 f92b 	bl	8015978 <rclc_executor_add_subscription>
 8003722:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
 8003726:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <StartDefaultTask+0x252>
 800372e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8003732:	f240 1183 	movw	r1, #387	; 0x183
 8003736:	486b      	ldr	r0, [pc, #428]	; (80038e4 <StartDefaultTask+0x3f4>)
 8003738:	f01d f9d2 	bl	8020ae0 <iprintf>
 800373c:	2000      	movs	r0, #0
 800373e:	f00c fde3 	bl	8010308 <vTaskDelete>

	// create subscriber for shoot air
	rcl_subscription_t subscriber_air_shoot;
	const char* sub_name_air_shoot = "mros_input_air_shoot";
 8003742:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <StartDefaultTask+0x408>)
 8003744:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	actuator_custom_msgs__msg__ShootAirStatus actuator_msg_air_shoot;
	RCCHECK(rclc_subscription_init_default(&subscriber_air_shoot, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_custom_msgs, msg, ShootAirStatus), sub_name_air_shoot));
 8003748:	f00f f9b8 	bl	8012abc <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus>
 800374c:	4602      	mov	r2, r0
 800374e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8003752:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8003756:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800375a:	f012 fbeb 	bl	8015f34 <rclc_subscription_init_default>
 800375e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 8003762:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <StartDefaultTask+0x28e>
 800376a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800376e:	f240 1189 	movw	r1, #393	; 0x189
 8003772:	485c      	ldr	r0, [pc, #368]	; (80038e4 <StartDefaultTask+0x3f4>)
 8003774:	f01d f9b4 	bl	8020ae0 <iprintf>
 8003778:	2000      	movs	r0, #0
 800377a:	f00c fdc5 	bl	8010308 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_air_hand, &actuator_msg_air_hand, &subscription_callback_air_shoot, ON_NEW_DATA));
 800377e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003782:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8003786:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <StartDefaultTask+0x40c>)
 8003790:	f012 f8f2 	bl	8015978 <rclc_executor_add_subscription>
 8003794:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
 8003798:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800379c:	2b00      	cmp	r3, #0
 800379e:	d009      	beq.n	80037b4 <StartDefaultTask+0x2c4>
 80037a0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80037a4:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80037a8:	484e      	ldr	r0, [pc, #312]	; (80038e4 <StartDefaultTask+0x3f4>)
 80037aa:	f01d f999 	bl	8020ae0 <iprintf>
 80037ae:	2000      	movs	r0, #0
 80037b0:	f00c fdaa 	bl	8010308 <vTaskDelete>

	// create subscriber for mcmd
	rcl_subscription_t subscriber_mcmd;
	const char* sub_name_mcmd = "mros_input_mcmd";
 80037b4:	4b52      	ldr	r3, [pc, #328]	; (8003900 <StartDefaultTask+0x410>)
 80037b6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	std_msgs__msg__Int32MultiArray actuator_msg_mcmd;
	RCCHECK(rclc_subscription_init_default(&subscriber_mcmd, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray), sub_name_mcmd));
 80037ba:	f014 f965 	bl	8017a88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 80037be:	4602      	mov	r2, r0
 80037c0:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80037c4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80037c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80037cc:	f012 fbb2 	bl	8015f34 <rclc_subscription_init_default>
 80037d0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 80037d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <StartDefaultTask+0x300>
 80037dc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80037e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80037e4:	483f      	ldr	r0, [pc, #252]	; (80038e4 <StartDefaultTask+0x3f4>)
 80037e6:	f01d f97b 	bl	8020ae0 <iprintf>
 80037ea:	2000      	movs	r0, #0
 80037ec:	f00c fd8c 	bl	8010308 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_mcmd, &actuator_msg_mcmd, &subscription_callback_mcmd, ON_NEW_DATA));
 80037f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80037f4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80037f8:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4b40      	ldr	r3, [pc, #256]	; (8003904 <StartDefaultTask+0x414>)
 8003802:	f012 f8b9 	bl	8015978 <rclc_executor_add_subscription>
 8003806:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 800380a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <StartDefaultTask+0x336>
 8003812:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8003816:	f240 1191 	movw	r1, #401	; 0x191
 800381a:	4832      	ldr	r0, [pc, #200]	; (80038e4 <StartDefaultTask+0x3f4>)
 800381c:	f01d f960 	bl	8020ae0 <iprintf>
 8003820:	2000      	movs	r0, #0
 8003822:	f00c fd71 	bl	8010308 <vTaskDelete>

	// create subscriber for table
	rcl_subscription_t subscriber_table;
	const char* sub_name_table = "mros_input_table";
 8003826:	4b38      	ldr	r3, [pc, #224]	; (8003908 <StartDefaultTask+0x418>)
 8003828:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	std_msgs__msg__Float64 actuator_msg_table;
	RCCHECK(rclc_subscription_init_default(&subscriber_table, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32), sub_name_table));
 800382c:	f014 f914 	bl	8017a58 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8003838:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800383c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003840:	f012 fb78 	bl	8015f34 <rclc_subscription_init_default>
 8003844:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8003848:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <StartDefaultTask+0x374>
 8003850:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8003854:	f240 1197 	movw	r1, #407	; 0x197
 8003858:	4822      	ldr	r0, [pc, #136]	; (80038e4 <StartDefaultTask+0x3f4>)
 800385a:	f01d f941 	bl	8020ae0 <iprintf>
 800385e:	2000      	movs	r0, #0
 8003860:	f00c fd52 	bl	8010308 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_table, &actuator_msg_table, &subscription_callback_table, ON_NEW_DATA));
 8003864:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003868:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800386c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8003870:	2300      	movs	r3, #0
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <StartDefaultTask+0x41c>)
 8003876:	f012 f87f 	bl	8015978 <rclc_executor_add_subscription>
 800387a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 800387e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <StartDefaultTask+0x3aa>
 8003886:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800388a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800388e:	4815      	ldr	r0, [pc, #84]	; (80038e4 <StartDefaultTask+0x3f4>)
 8003890:	f01d f926 	bl	8020ae0 <iprintf>
 8003894:	2000      	movs	r0, #0
 8003896:	f00c fd37 	bl	8010308 <vTaskDelete>

	// create subscriber for foots
	rcl_subscription_t subscriber_vel;
	const char* sub_name_f = "cmd_vel";
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <StartDefaultTask+0x420>)
 800389c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	geometry_msgs__msg__Twist actuator_msg_f;
	RCCHECK(rclc_subscription_init_default(&subscriber_vel, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), sub_name_f));
 80038a0:	f00f fa7a 	bl	8012d98 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80038aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80038ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038b2:	f012 fb3f 	bl	8015f34 <rclc_subscription_init_default>
 80038b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80038ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d032      	beq.n	8003928 <StartDefaultTask+0x438>
 80038c2:	e027      	b.n	8003914 <StartDefaultTask+0x424>
 80038c4:	40020400 	.word	0x40020400
 80038c8:	0800457d 	.word	0x0800457d
 80038cc:	080045c1 	.word	0x080045c1
 80038d0:	080045f9 	.word	0x080045f9
 80038d4:	08004665 	.word	0x08004665
 80038d8:	080220d0 	.word	0x080220d0
 80038dc:	080220f8 	.word	0x080220f8
 80038e0:	200008f0 	.word	0x200008f0
 80038e4:	08022110 	.word	0x08022110
 80038e8:	0802213c 	.word	0x0802213c
 80038ec:	08022140 	.word	0x08022140
 80038f0:	08022150 	.word	0x08022150
 80038f4:	08003235 	.word	0x08003235
 80038f8:	08022164 	.word	0x08022164
 80038fc:	080032e5 	.word	0x080032e5
 8003900:	0802217c 	.word	0x0802217c
 8003904:	08003381 	.word	0x08003381
 8003908:	0802218c 	.word	0x0802218c
 800390c:	080033ed 	.word	0x080033ed
 8003910:	080221a0 	.word	0x080221a0
 8003914:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8003918:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800391c:	4866      	ldr	r0, [pc, #408]	; (8003ab8 <StartDefaultTask+0x5c8>)
 800391e:	f01d f8df 	bl	8020ae0 <iprintf>
 8003922:	2000      	movs	r0, #0
 8003924:	f00c fcf0 	bl	8010308 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_vel, &actuator_msg_f, &subscription_callback, ON_NEW_DATA));
 8003928:	f107 0208 	add.w	r2, r7, #8
 800392c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003930:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4b60      	ldr	r3, [pc, #384]	; (8003abc <StartDefaultTask+0x5cc>)
 800393a:	f012 f81d 	bl	8015978 <rclc_executor_add_subscription>
 800393e:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
 8003942:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <StartDefaultTask+0x46e>
 800394a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800394e:	f240 119f 	movw	r1, #415	; 0x19f
 8003952:	4859      	ldr	r0, [pc, #356]	; (8003ab8 <StartDefaultTask+0x5c8>)
 8003954:	f01d f8c4 	bl	8020ae0 <iprintf>
 8003958:	2000      	movs	r0, #0
 800395a:	f00c fcd5 	bl	8010308 <vTaskDelete>

	rclc_executor_spin(&executor);
 800395e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003962:	4618      	mov	r0, r3
 8003964:	f012 fa32 	bl	8015dcc <rclc_executor_spin>


	// free resources
	RCCHECK(rclc_executor_fini(&executor));
 8003968:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800396c:	4618      	mov	r0, r3
 800396e:	f011 ffcf 	bl	8015910 <rclc_executor_fini>
 8003972:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8003976:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <StartDefaultTask+0x4a2>
 800397e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8003982:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003986:	484c      	ldr	r0, [pc, #304]	; (8003ab8 <StartDefaultTask+0x5c8>)
 8003988:	f01d f8aa 	bl	8020ae0 <iprintf>
 800398c:	2000      	movs	r0, #0
 800398e:	f00c fcbb 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_subscription_fini(&subscriber_air_hand, &node));
 8003992:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003996:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f011 fb0b 	bl	8014fb8 <rcl_subscription_fini>
 80039a2:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
 80039a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <StartDefaultTask+0x4d2>
 80039ae:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80039b2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80039b6:	4840      	ldr	r0, [pc, #256]	; (8003ab8 <StartDefaultTask+0x5c8>)
 80039b8:	f01d f892 	bl	8020ae0 <iprintf>
 80039bc:	2000      	movs	r0, #0
 80039be:	f00c fca3 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_subscription_fini(&subscriber_air_shoot, &node));
 80039c2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80039c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f011 faf3 	bl	8014fb8 <rcl_subscription_fini>
 80039d2:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 80039d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <StartDefaultTask+0x502>
 80039de:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80039e2:	f240 11a7 	movw	r1, #423	; 0x1a7
 80039e6:	4834      	ldr	r0, [pc, #208]	; (8003ab8 <StartDefaultTask+0x5c8>)
 80039e8:	f01d f87a 	bl	8020ae0 <iprintf>
 80039ec:	2000      	movs	r0, #0
 80039ee:	f00c fc8b 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_subscription_fini(&subscriber_mcmd, &node));
 80039f2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80039f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f011 fadb 	bl	8014fb8 <rcl_subscription_fini>
 8003a02:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
 8003a06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <StartDefaultTask+0x532>
 8003a0e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8003a12:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8003a16:	4828      	ldr	r0, [pc, #160]	; (8003ab8 <StartDefaultTask+0x5c8>)
 8003a18:	f01d f862 	bl	8020ae0 <iprintf>
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f00c fc73 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_subscription_fini(&subscriber_table, &node));
 8003a22:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f011 fac3 	bl	8014fb8 <rcl_subscription_fini>
 8003a32:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 8003a36:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <StartDefaultTask+0x562>
 8003a3e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8003a42:	f240 11a9 	movw	r1, #425	; 0x1a9
 8003a46:	481c      	ldr	r0, [pc, #112]	; (8003ab8 <StartDefaultTask+0x5c8>)
 8003a48:	f01d f84a 	bl	8020ae0 <iprintf>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f00c fc5b 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_subscription_fini(&subscriber_vel, &node));
 8003a52:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f011 faab 	bl	8014fb8 <rcl_subscription_fini>
 8003a62:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
 8003a66:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <StartDefaultTask+0x592>
 8003a6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a72:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003a76:	4810      	ldr	r0, [pc, #64]	; (8003ab8 <StartDefaultTask+0x5c8>)
 8003a78:	f01d f832 	bl	8020ae0 <iprintf>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f00c fc43 	bl	8010308 <vTaskDelete>
	RCCHECK(rcl_node_fini(&node));
 8003a82:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003a86:	4618      	mov	r0, r3
 8003a88:	f011 f958 	bl	8014d3c <rcl_node_fini>
 8003a8c:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8003a90:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <StartDefaultTask+0x5bc>
 8003a98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a9c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8003aa0:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <StartDefaultTask+0x5c8>)
 8003aa2:	f01d f81d 	bl	8020ae0 <iprintf>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f00c fc2e 	bl	8010308 <vTaskDelete>
	//  for(;;)
	//  {
	//    osDelay(1);
	//  }
  /* USER CODE END StartDefaultTask */
}
 8003aac:	bf00      	nop
 8003aae:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08022110 	.word	0x08022110
 8003abc:	08003429 	.word	0x08003429

08003ac0 <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue)
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <StartLEDTask+0x18>)
 8003acc:	f003 fb43 	bl	8007156 <HAL_GPIO_TogglePin>
      osDelay(100);
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	f00b fbb5 	bl	800f240 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue)
 8003ad6:	e7f7      	b.n	8003ac8 <StartLEDTask+0x8>
 8003ad8:	40020400 	.word	0x40020400

08003adc <C620TimerCallback>:
  /* USER CODE END StartLEDTask */
}

/* C620TimerCallback function */
void C620TimerCallback(void *argument)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN C620TimerCallback */
    C620_SendRequest(c620_dev_info_global, 2, 1000.0f, &hcan1);
 8003ae4:	4a05      	ldr	r2, [pc, #20]	; (8003afc <C620TimerCallback+0x20>)
 8003ae6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003b00 <C620TimerCallback+0x24>
 8003aea:	2102      	movs	r1, #2
 8003aec:	4805      	ldr	r0, [pc, #20]	; (8003b04 <C620TimerCallback+0x28>)
 8003aee:	f7fd ffcf 	bl	8001a90 <C620_SendRequest>
  /* USER CODE END C620TimerCallback */
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20004e68 	.word	0x20004e68
 8003b00:	447a0000 	.word	0x447a0000
 8003b04:	20004f4c 	.word	0x20004f4c

08003b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	; 0x30
 8003b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0e:	f107 031c 	add.w	r3, r7, #28
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	60da      	str	r2, [r3, #12]
 8003b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1e:	4b47      	ldr	r3, [pc, #284]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a46      	ldr	r2, [pc, #280]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b44      	ldr	r3, [pc, #272]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a3a      	ldr	r2, [pc, #232]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a34      	ldr	r2, [pc, #208]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a2e      	ldr	r2, [pc, #184]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a28      	ldr	r2, [pc, #160]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f244 0181 	movw	r1, #16513	; 0x4081
 8003bb4:	4822      	ldr	r0, [pc, #136]	; (8003c40 <MX_GPIO_Init+0x138>)
 8003bb6:	f003 fab5 	bl	8007124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2140      	movs	r1, #64	; 0x40
 8003bbe:	4821      	ldr	r0, [pc, #132]	; (8003c44 <MX_GPIO_Init+0x13c>)
 8003bc0:	f003 fab0 	bl	8007124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481b      	ldr	r0, [pc, #108]	; (8003c48 <MX_GPIO_Init+0x140>)
 8003bdc:	f003 f8f6 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003be0:	f244 0381 	movw	r3, #16513	; 0x4081
 8003be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be6:	2301      	movs	r3, #1
 8003be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4811      	ldr	r0, [pc, #68]	; (8003c40 <MX_GPIO_Init+0x138>)
 8003bfa:	f003 f8e7 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c02:	2301      	movs	r3, #1
 8003c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	480b      	ldr	r0, [pc, #44]	; (8003c44 <MX_GPIO_Init+0x13c>)
 8003c16:	f003 f8d9 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003c26:	f107 031c 	add.w	r3, r7, #28
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4805      	ldr	r0, [pc, #20]	; (8003c44 <MX_GPIO_Init+0x13c>)
 8003c2e:	f003 f8cd 	bl	8006dcc <HAL_GPIO_Init>

}
 8003c32:	bf00      	nop
 8003c34:	3730      	adds	r7, #48	; 0x30
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40021800 	.word	0x40021800
 8003c48:	40020800 	.word	0x40020800

08003c4c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, &ch, 1, 500);
 8003c56:	1df9      	adds	r1, r7, #7
 8003c58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4804      	ldr	r0, [pc, #16]	; (8003c70 <__io_putchar+0x24>)
 8003c60:	f006 fa08 	bl	800a074 <HAL_UART_Transmit>
    return ch;
 8003c64:	79fb      	ldrb	r3, [r7, #7]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000c914 	.word	0x2000c914

08003c74 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fe fa67 	bl	8002150 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fed4 	bl	8000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fe fa6f 	bl	800217c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fc fedc 	bl	8000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fe fa4b 	bl	8002150 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc feb8 	bl	8000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fe fa53 	bl	800217c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fc fec0 	bl	8000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fe fa2f 	bl	8002150 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fc fe9c 	bl	8000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fe fa37 	bl	800217c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fc fea4 	bl	8000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fc feae 	bl	8000a88 <WhenCANRxFifo0MsgPending>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20004ebc 	.word	0x20004ebc

08003d38 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
    C620_WhenCANRxFifo1MsgPending(hcan);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe fb3d 	bl	80023c0 <C620_WhenCANRxFifo1MsgPending>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d56:	f001 f978 	bl	800504a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d5a:	f000 fb85 	bl	8004468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d5e:	f7ff fed3 	bl	8003b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d62:	f7ff f889 	bl	8002e78 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003d66:	f000 ffa7 	bl	8004cb8 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8003d6a:	f7ff f95d 	bl	8003028 <MX_ETH_Init>
  MX_CAN1_Init();
 8003d6e:	f7fe fcfd 	bl	800276c <MX_CAN1_Init>
  MX_CAN2_Init();
 8003d72:	f7fe fd31 	bl	80027d8 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8003d76:	f000 ff6f 	bl	8004c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8003d7a:	4bbd      	ldr	r3, [pc, #756]	; (8004070 <main+0x320>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f01c ff1a 	bl	8020bbc <setbuf>
  setbuf(stderr, NULL);
 8003d88:	4bb9      	ldr	r3, [pc, #740]	; (8004070 <main+0x320>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f01c ff13 	bl	8020bbc <setbuf>

  /*
    * ===== CANLib Settings =====
    * */
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) ON
 8003d96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d9a:	48b6      	ldr	r0, [pc, #728]	; (8004074 <main+0x324>)
 8003d9c:	f003 f9db 	bl	8007156 <HAL_GPIO_TogglePin>
   printf("Start Initializing CAN System:Begin\n\r");
 8003da0:	48b5      	ldr	r0, [pc, #724]	; (8004078 <main+0x328>)
 8003da2:	f01c fe9d 	bl	8020ae0 <iprintf>

   num_of_devices.mcmd3 = NUM_OF_MCMD3; //0
 8003da6:	4bb5      	ldr	r3, [pc, #724]	; (800407c <main+0x32c>)
 8003da8:	2202      	movs	r2, #2
 8003daa:	709a      	strb	r2, [r3, #2]
//   num_of_devices.mcmd4 = 0;
   num_of_devices.mcmd4 = NUM_OF_MCMD4;  // TODO: こっちが正しい -> 0
 8003dac:	4bb3      	ldr	r3, [pc, #716]	; (800407c <main+0x32c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	715a      	strb	r2, [r3, #5]
   num_of_devices.air = 1;  // TODO: 1にする
 8003db2:	4bb2      	ldr	r3, [pc, #712]	; (800407c <main+0x32c>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	711a      	strb	r2, [r3, #4]

   CAN_SystemInit(&hcan2); // F7のCAN通信のinit
 8003db8:	48b1      	ldr	r0, [pc, #708]	; (8004080 <main+0x330>)
 8003dba:	f7fc ffbf 	bl	8000d3c <CAN_SystemInit>
   printf("Start Initializing CAN System:End\n\r");
 8003dbe:	48b1      	ldr	r0, [pc, #708]	; (8004084 <main+0x334>)
 8003dc0:	f01c fe8e 	bl	8020ae0 <iprintf>
   if(!DISABLE_CAN_WAIT_CONNECT)CAN_WaitConnect(&num_of_devices);
 8003dc4:	48ad      	ldr	r0, [pc, #692]	; (800407c <main+0x32c>)
 8003dc6:	f7fd fa61 	bl	800128c <CAN_WaitConnect>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue) ON
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	48a9      	ldr	r0, [pc, #676]	; (8004074 <main+0x324>)
 8003dce:	f003 f9c2 	bl	8007156 <HAL_GPIO_TogglePin>
//
// MCMDは2搭載
//
   if(NUM_OF_MCMD3 != 0) {
       // 発射1
       mcmd_handlers[0].device.node_type = NODE_MCMD3;
 8003dd2:	4bad      	ldr	r3, [pc, #692]	; (8004088 <main+0x338>)
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	701a      	strb	r2, [r3, #0]
       mcmd_handlers[0].device.node_id = 1;
 8003dd8:	4bab      	ldr	r3, [pc, #684]	; (8004088 <main+0x338>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	705a      	strb	r2, [r3, #1]
       mcmd_handlers[0].device.device_num = 0;
 8003dde:	4baa      	ldr	r3, [pc, #680]	; (8004088 <main+0x338>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	709a      	strb	r2, [r3, #2]
       mcmd_handlers[0].ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 8003de4:	4ba8      	ldr	r3, [pc, #672]	; (8004088 <main+0x338>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	751a      	strb	r2, [r3, #20]
       mcmd_handlers[0].ctrl_param.feedback = MCMD_FB_ENABLE;
 8003dea:	4ba7      	ldr	r3, [pc, #668]	; (8004088 <main+0x338>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
       mcmd_handlers[0].fb_type = MCMD_FB_POS;
 8003df2:	4ba5      	ldr	r3, [pc, #660]	; (8004088 <main+0x338>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	70da      	strb	r2, [r3, #3]
       mcmd_handlers[0].limit_sw_type = LIMIT_SW_NO;
 8003df8:	4ba3      	ldr	r3, [pc, #652]	; (8004088 <main+0x338>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	719a      	strb	r2, [r3, #6]
       mcmd_handlers[0].enc_dir = MCMD_DIR_FW;
 8003dfe:	4ba2      	ldr	r3, [pc, #648]	; (8004088 <main+0x338>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	711a      	strb	r2, [r3, #4]
       mcmd_handlers[0].rot_dir = MCMD_DIR_FW;
 8003e04:	4ba0      	ldr	r3, [pc, #640]	; (8004088 <main+0x338>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	715a      	strb	r2, [r3, #5]
       mcmd_handlers[0].calib = CALIBRATION_DISABLE;
 8003e0a:	4b9f      	ldr	r3, [pc, #636]	; (8004088 <main+0x338>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	71da      	strb	r2, [r3, #7]
       mcmd_handlers[0].ctrl_param.gravity_compensation = GRAVITY_COMPENSATION_DISABLE;
 8003e10:	4b9d      	ldr	r3, [pc, #628]	; (8004088 <main+0x338>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
       mcmd_handlers[0].calib_duty = -0.6f;
 8003e18:	4b9b      	ldr	r3, [pc, #620]	; (8004088 <main+0x338>)
 8003e1a:	4a9c      	ldr	r2, [pc, #624]	; (800408c <main+0x33c>)
 8003e1c:	609a      	str	r2, [r3, #8]
       mcmd_handlers[0].quant_per_unit = 90.0f / 1024.0f;
 8003e1e:	4b9a      	ldr	r3, [pc, #616]	; (8004088 <main+0x338>)
 8003e20:	4a9b      	ldr	r2, [pc, #620]	; (8004090 <main+0x340>)
 8003e22:	611a      	str	r2, [r3, #16]
       mcmd_handlers[0].ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8003e24:	4b98      	ldr	r3, [pc, #608]	; (8004088 <main+0x338>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
       mcmd_handlers[0].ctrl_param.accel_limit_size = 5.0f;
 8003e2c:	4b96      	ldr	r3, [pc, #600]	; (8004088 <main+0x338>)
 8003e2e:	4a99      	ldr	r2, [pc, #612]	; (8004094 <main+0x344>)
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34
       mcmd_handlers[0].ctrl_param.PID_param.kp = 0.12f;
 8003e32:	4b95      	ldr	r3, [pc, #596]	; (8004088 <main+0x338>)
 8003e34:	4a98      	ldr	r2, [pc, #608]	; (8004098 <main+0x348>)
 8003e36:	619a      	str	r2, [r3, #24]

       MCMD_init(&mcmd_handlers[0]);
 8003e38:	4893      	ldr	r0, [pc, #588]	; (8004088 <main+0x338>)
 8003e3a:	f7fd fb61 	bl	8001500 <MCMD_init>
//       MCMD_Calib(&mcmd_handlers[0]);  // キャリブレーションを行う
//       HAL_Delay(3000);
       MCMD_SetTarget(&mcmd_handlers[0], 0.0f);  // 目標値(0.0)を設定
 8003e3e:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800409c <main+0x34c>
 8003e42:	4891      	ldr	r0, [pc, #580]	; (8004088 <main+0x338>)
 8003e44:	f7fd fbd8 	bl	80015f8 <MCMD_SetTarget>
       // TODO: 稼働限界は226mm
       MCMD_Control_Enable(&mcmd_handlers[0]);  // 制御開始
 8003e48:	488f      	ldr	r0, [pc, #572]	; (8004088 <main+0x338>)
 8003e4a:	f7fd fbbf 	bl	80015cc <MCMD_Control_Enable>

       //発射2
       mcmd_handlers[1].device.node_type = NODE_MCMD3;
 8003e4e:	4b8e      	ldr	r3, [pc, #568]	; (8004088 <main+0x338>)
 8003e50:	2203      	movs	r2, #3
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
       mcmd_handlers[1].device.node_id = 1;
 8003e56:	4b8c      	ldr	r3, [pc, #560]	; (8004088 <main+0x338>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
       mcmd_handlers[1].device.device_num = 1;
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <main+0x338>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
       mcmd_handlers[1].ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 8003e66:	4b88      	ldr	r3, [pc, #544]	; (8004088 <main+0x338>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
       mcmd_handlers[1].ctrl_param.feedback = MCMD_FB_ENABLE;
 8003e6e:	4b86      	ldr	r3, [pc, #536]	; (8004088 <main+0x338>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
       mcmd_handlers[1].fb_type = MCMD_FB_POS;
 8003e76:	4b84      	ldr	r3, [pc, #528]	; (8004088 <main+0x338>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
       mcmd_handlers[1].limit_sw_type = LIMIT_SW_NO;
 8003e7e:	4b82      	ldr	r3, [pc, #520]	; (8004088 <main+0x338>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
       mcmd_handlers[1].enc_dir = MCMD_DIR_FW;
 8003e86:	4b80      	ldr	r3, [pc, #512]	; (8004088 <main+0x338>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
       mcmd_handlers[1].rot_dir = MCMD_DIR_FW;
 8003e8e:	4b7e      	ldr	r3, [pc, #504]	; (8004088 <main+0x338>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
       mcmd_handlers[1].calib = CALIBRATION_DISABLE;
 8003e96:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <main+0x338>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
       mcmd_handlers[1].ctrl_param.gravity_compensation = GRAVITY_COMPENSATION_DISABLE;
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	; (8004088 <main+0x338>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
       mcmd_handlers[1].calib_duty = -0.6f;
 8003ea6:	4b78      	ldr	r3, [pc, #480]	; (8004088 <main+0x338>)
 8003ea8:	4a78      	ldr	r2, [pc, #480]	; (800408c <main+0x33c>)
 8003eaa:	649a      	str	r2, [r3, #72]	; 0x48
       mcmd_handlers[1].quant_per_unit = 90.0f / 1024.0f;
 8003eac:	4b76      	ldr	r3, [pc, #472]	; (8004088 <main+0x338>)
 8003eae:	4a78      	ldr	r2, [pc, #480]	; (8004090 <main+0x340>)
 8003eb0:	651a      	str	r2, [r3, #80]	; 0x50
       mcmd_handlers[1].ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8003eb2:	4b75      	ldr	r3, [pc, #468]	; (8004088 <main+0x338>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
       mcmd_handlers[1].ctrl_param.accel_limit_size = 5.0f;
 8003eba:	4b73      	ldr	r3, [pc, #460]	; (8004088 <main+0x338>)
 8003ebc:	4a75      	ldr	r2, [pc, #468]	; (8004094 <main+0x344>)
 8003ebe:	675a      	str	r2, [r3, #116]	; 0x74
       mcmd_handlers[1].ctrl_param.PID_param.kp = 0.12f;
 8003ec0:	4b71      	ldr	r3, [pc, #452]	; (8004088 <main+0x338>)
 8003ec2:	4a75      	ldr	r2, [pc, #468]	; (8004098 <main+0x348>)
 8003ec4:	659a      	str	r2, [r3, #88]	; 0x58

       MCMD_init(&mcmd_handlers[1]);
 8003ec6:	4876      	ldr	r0, [pc, #472]	; (80040a0 <main+0x350>)
 8003ec8:	f7fd fb1a 	bl	8001500 <MCMD_init>
//       MCMD_Calib(&mcmd_handlers[1]);  // キャリブレーションを行う
//       HAL_Delay(3000);
       MCMD_SetTarget(&mcmd_handlers[1], 0.0f);  // 目標値(0.0)を設定
 8003ecc:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800409c <main+0x34c>
 8003ed0:	4873      	ldr	r0, [pc, #460]	; (80040a0 <main+0x350>)
 8003ed2:	f7fd fb91 	bl	80015f8 <MCMD_SetTarget>
       // TODO: 稼働限界は226mm
       MCMD_Control_Enable(&mcmd_handlers[1]);  // 制御開始
 8003ed6:	4872      	ldr	r0, [pc, #456]	; (80040a0 <main+0x350>)
 8003ed8:	f7fd fb78 	bl	80015cc <MCMD_Control_Enable>

       //発射3
       mcmd_handlers[2].device.node_type = NODE_MCMD3;
 8003edc:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <main+0x338>)
 8003ede:	2203      	movs	r2, #3
 8003ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
       mcmd_handlers[2].device.node_id = 2;
 8003ee4:	4b68      	ldr	r3, [pc, #416]	; (8004088 <main+0x338>)
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
       mcmd_handlers[2].device.device_num = 0;
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <main+0x338>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
       mcmd_handlers[2].ctrl_param.ctrl_type = MCMD_CTRL_POS;
 8003ef4:	4b64      	ldr	r3, [pc, #400]	; (8004088 <main+0x338>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
       mcmd_handlers[2].ctrl_param.feedback = MCMD_FB_ENABLE;
 8003efc:	4b62      	ldr	r3, [pc, #392]	; (8004088 <main+0x338>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
       mcmd_handlers[2].fb_type = MCMD_FB_POS;
 8003f04:	4b60      	ldr	r3, [pc, #384]	; (8004088 <main+0x338>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
       mcmd_handlers[2].limit_sw_type = LIMIT_SW_NO;
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <main+0x338>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
       mcmd_handlers[2].enc_dir = MCMD_DIR_FW;
 8003f14:	4b5c      	ldr	r3, [pc, #368]	; (8004088 <main+0x338>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
       mcmd_handlers[2].rot_dir = MCMD_DIR_FW;
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <main+0x338>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
       mcmd_handlers[2].calib = CALIBRATION_DISABLE;
 8003f24:	4b58      	ldr	r3, [pc, #352]	; (8004088 <main+0x338>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
       mcmd_handlers[2].ctrl_param.gravity_compensation = GRAVITY_COMPENSATION_DISABLE;
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <main+0x338>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
       mcmd_handlers[2].calib_duty = -0.6f;
 8003f34:	4b54      	ldr	r3, [pc, #336]	; (8004088 <main+0x338>)
 8003f36:	4a55      	ldr	r2, [pc, #340]	; (800408c <main+0x33c>)
 8003f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
       mcmd_handlers[2].quant_per_unit = 90.0f / 1024.0f;
 8003f3c:	4b52      	ldr	r3, [pc, #328]	; (8004088 <main+0x338>)
 8003f3e:	4a54      	ldr	r2, [pc, #336]	; (8004090 <main+0x340>)
 8003f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
       mcmd_handlers[2].ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8003f44:	4b50      	ldr	r3, [pc, #320]	; (8004088 <main+0x338>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
       mcmd_handlers[2].ctrl_param.accel_limit_size = 5.0f;
 8003f4c:	4b4e      	ldr	r3, [pc, #312]	; (8004088 <main+0x338>)
 8003f4e:	4a51      	ldr	r2, [pc, #324]	; (8004094 <main+0x344>)
 8003f50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
       mcmd_handlers[2].ctrl_param.PID_param.kp = 0.12f;
 8003f54:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <main+0x338>)
 8003f56:	4a50      	ldr	r2, [pc, #320]	; (8004098 <main+0x348>)
 8003f58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

       MCMD_init(&mcmd_handlers[2]);
 8003f5c:	4851      	ldr	r0, [pc, #324]	; (80040a4 <main+0x354>)
 8003f5e:	f7fd facf 	bl	8001500 <MCMD_init>
//       MCMD_Calib(&mcmd_handlers[2]);  // キャリブレーションを行う
//       HAL_Delay(3000);
       MCMD_SetTarget(&mcmd_handlers[2], 0.0f);  // 目標値(0.0)を設定
 8003f62:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800409c <main+0x34c>
 8003f66:	484f      	ldr	r0, [pc, #316]	; (80040a4 <main+0x354>)
 8003f68:	f7fd fb46 	bl	80015f8 <MCMD_SetTarget>
       // TODO: 稼働限界は226mm
       MCMD_Control_Enable(&mcmd_handlers[2]);  // 制御開始
 8003f6c:	484d      	ldr	r0, [pc, #308]	; (80040a4 <main+0x354>)
 8003f6e:	f7fd fb2d 	bl	80015cc <MCMD_Control_Enable>

       //
       //turntable
       //

       mcmd_handlers[3].device.node_type = NODE_MCMD3;
 8003f72:	4b45      	ldr	r3, [pc, #276]	; (8004088 <main+0x338>)
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
       mcmd_handlers[3].device.node_id = 2;
 8003f7a:	4b43      	ldr	r3, [pc, #268]	; (8004088 <main+0x338>)
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
       mcmd_handlers[3].device.device_num = 1;
 8003f82:	4b41      	ldr	r3, [pc, #260]	; (8004088 <main+0x338>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
       mcmd_handlers[3].ctrl_param.ctrl_type = MCMD_CTRL_POS;
 8003f8a:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <main+0x338>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
       mcmd_handlers[3].ctrl_param.feedback = MCMD_FB_ENABLE;
 8003f92:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <main+0x338>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
       mcmd_handlers[3].fb_type = MCMD_FB_POS;
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <main+0x338>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
       mcmd_handlers[3].limit_sw_type = LIMIT_SW_NO;
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <main+0x338>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
       mcmd_handlers[3].enc_dir = MCMD_DIR_FW;
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <main+0x338>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
       mcmd_handlers[3].rot_dir = MCMD_DIR_FW;
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <main+0x338>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
       mcmd_handlers[3].calib = CALIBRATION_ENABLE;
 8003fba:	4b33      	ldr	r3, [pc, #204]	; (8004088 <main+0x338>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
       mcmd_handlers[3].ctrl_param.gravity_compensation = GRAVITY_COMPENSATION_DISABLE;
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <main+0x338>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
       mcmd_handlers[3].calib_duty = -0.6f;
 8003fca:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <main+0x338>)
 8003fcc:	4a2f      	ldr	r2, [pc, #188]	; (800408c <main+0x33c>)
 8003fce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
       mcmd_handlers[3].quant_per_unit = 90.0f / 1024.0f;
 8003fd2:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <main+0x338>)
 8003fd4:	4a2e      	ldr	r2, [pc, #184]	; (8004090 <main+0x340>)
 8003fd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
       mcmd_handlers[3].ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <main+0x338>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
       mcmd_handlers[3].ctrl_param.accel_limit_size = 5.0f;
 8003fe2:	4b29      	ldr	r3, [pc, #164]	; (8004088 <main+0x338>)
 8003fe4:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <main+0x344>)
 8003fe6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
       mcmd_handlers[3].ctrl_param.PID_param.kp = 0.12f;
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <main+0x338>)
 8003fec:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <main+0x348>)
 8003fee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

       MCMD_init(&mcmd_handlers[3]);
 8003ff2:	482d      	ldr	r0, [pc, #180]	; (80040a8 <main+0x358>)
 8003ff4:	f7fd fa84 	bl	8001500 <MCMD_init>
       MCMD_Calib(&mcmd_handlers[3]);  // キャリブレーションを行う
 8003ff8:	482b      	ldr	r0, [pc, #172]	; (80040a8 <main+0x358>)
 8003ffa:	f7fd fad1 	bl	80015a0 <MCMD_Calib>
       HAL_Delay(3000);
 8003ffe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004002:	f001 f84f 	bl	80050a4 <HAL_Delay>
       MCMD_SetTarget(&mcmd_handlers[3], 0.0f);  // 目標値(0.0)を設定
 8004006:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800409c <main+0x34c>
 800400a:	4827      	ldr	r0, [pc, #156]	; (80040a8 <main+0x358>)
 800400c:	f7fd faf4 	bl	80015f8 <MCMD_SetTarget>
       // TODO: 稼働限界は226mm
       MCMD_Control_Enable(&mcmd_handlers[3]);  // 制御開始
 8004010:	4825      	ldr	r0, [pc, #148]	; (80040a8 <main+0x358>)
 8004012:	f7fd fadb 	bl	80015cc <MCMD_Control_Enable>

       //
      //z_rotation
       //

       mcmd_handlers[4].device.node_type = NODE_MCMD3;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <main+0x338>)
 8004018:	2203      	movs	r2, #3
 800401a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
       mcmd_handlers[4].device.node_id = 3;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <main+0x338>)
 8004020:	2203      	movs	r2, #3
 8004022:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
       mcmd_handlers[4].device.device_num = 0;
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <main+0x338>)
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
       mcmd_handlers[4].ctrl_param.ctrl_type = MCMD_CTRL_POS;
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <main+0x338>)
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
       mcmd_handlers[4].ctrl_param.feedback = MCMD_FB_ENABLE;
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <main+0x338>)
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
       mcmd_handlers[4].fb_type = MCMD_FB_POS;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <main+0x338>)
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
       mcmd_handlers[4].limit_sw_type = LIMIT_SW_NO;
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <main+0x338>)
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
       mcmd_handlers[4].enc_dir = MCMD_DIR_FW;
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <main+0x338>)
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
       mcmd_handlers[4].rot_dir = MCMD_DIR_FW;
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <main+0x338>)
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
       mcmd_handlers[4].calib = CALIBRATION_ENABLE;
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <main+0x338>)
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
       mcmd_handlers[4].ctrl_param.gravity_compensation = GRAVITY_COMPENSATION_DISABLE;
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <main+0x338>)
 8004068:	2201      	movs	r2, #1
 800406a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 800406e:	e01d      	b.n	80040ac <main+0x35c>
 8004070:	200008f0 	.word	0x200008f0
 8004074:	40020400 	.word	0x40020400
 8004078:	080221a8 	.word	0x080221a8
 800407c:	20004ebc 	.word	0x20004ebc
 8004080:	20004e90 	.word	0x20004e90
 8004084:	080221d0 	.word	0x080221d0
 8004088:	20004ec4 	.word	0x20004ec4
 800408c:	bf19999a 	.word	0xbf19999a
 8004090:	3db40000 	.word	0x3db40000
 8004094:	40a00000 	.word	0x40a00000
 8004098:	3df5c28f 	.word	0x3df5c28f
 800409c:	00000000 	.word	0x00000000
 80040a0:	20004f04 	.word	0x20004f04
 80040a4:	20004f44 	.word	0x20004f44
 80040a8:	20004f84 	.word	0x20004f84
       mcmd_handlers[4].calib_duty = -0.6f;
 80040ac:	4bb4      	ldr	r3, [pc, #720]	; (8004380 <main+0x630>)
 80040ae:	4ab5      	ldr	r2, [pc, #724]	; (8004384 <main+0x634>)
 80040b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
       mcmd_handlers[4].quant_per_unit = 90.0f / 1024.0f;
 80040b4:	4bb2      	ldr	r3, [pc, #712]	; (8004380 <main+0x630>)
 80040b6:	4ab4      	ldr	r2, [pc, #720]	; (8004388 <main+0x638>)
 80040b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
       mcmd_handlers[4].ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80040bc:	4bb0      	ldr	r3, [pc, #704]	; (8004380 <main+0x630>)
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
       mcmd_handlers[4].ctrl_param.accel_limit_size = 5.0f;
 80040c4:	4bae      	ldr	r3, [pc, #696]	; (8004380 <main+0x630>)
 80040c6:	4ab1      	ldr	r2, [pc, #708]	; (800438c <main+0x63c>)
 80040c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
       mcmd_handlers[4].ctrl_param.PID_param.kp = 0.12f;
 80040cc:	4bac      	ldr	r3, [pc, #688]	; (8004380 <main+0x630>)
 80040ce:	4ab0      	ldr	r2, [pc, #704]	; (8004390 <main+0x640>)
 80040d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

       MCMD_init(&mcmd_handlers[4]);
 80040d4:	48af      	ldr	r0, [pc, #700]	; (8004394 <main+0x644>)
 80040d6:	f7fd fa13 	bl	8001500 <MCMD_init>
       MCMD_Calib(&mcmd_handlers[4]);  // キャリブレーションを行う
 80040da:	48ae      	ldr	r0, [pc, #696]	; (8004394 <main+0x644>)
 80040dc:	f7fd fa60 	bl	80015a0 <MCMD_Calib>
       HAL_Delay(3000);
 80040e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80040e4:	f000 ffde 	bl	80050a4 <HAL_Delay>
       MCMD_SetTarget(&mcmd_handlers[4], 0.0f);  // 目標値(0.0)を設定
 80040e8:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8004398 <main+0x648>
 80040ec:	48a9      	ldr	r0, [pc, #676]	; (8004394 <main+0x644>)
 80040ee:	f7fd fa83 	bl	80015f8 <MCMD_SetTarget>
       // TODO: 稼働限界は226mm
       MCMD_Control_Enable(&mcmd_handlers[4]);  // 制御開始
 80040f2:	48a8      	ldr	r0, [pc, #672]	; (8004394 <main+0x644>)
 80040f4:	f7fd fa6a 	bl	80015cc <MCMD_Control_Enable>

   // air cylinder


   if(NUM_OF_AIR != 0) {
       air_devices[0].node_type = NODE_AIR;
 80040f8:	4ba8      	ldr	r3, [pc, #672]	; (800439c <main+0x64c>)
 80040fa:	2205      	movs	r2, #5
 80040fc:	701a      	strb	r2, [r3, #0]
       air_devices[0].node_id = 0;
 80040fe:	4ba7      	ldr	r3, [pc, #668]	; (800439c <main+0x64c>)
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
       air_devices[0].device_num = PORT_1;
 8004104:	4ba5      	ldr	r3, [pc, #660]	; (800439c <main+0x64c>)
 8004106:	2200      	movs	r2, #0
 8004108:	709a      	strb	r2, [r3, #2]

//       air_devices[1].node_type = NODE_AIR;
//       air_devices[1].node_id = 1;
//       air_devices[1].device_num = PORT_1;

       for (uint8_t j = 0; j < 1; j++) {
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
 800410e:	e01e      	b.n	800414e <main+0x3fe>
           for (uint8_t i = 0; i <= (uint8_t) PORT_8; i++) {
 8004110:	2300      	movs	r3, #0
 8004112:	73bb      	strb	r3, [r7, #14]
 8004114:	e015      	b.n	8004142 <main+0x3f2>
               air_devices[j].device_num = i;
 8004116:	7bfa      	ldrb	r2, [r7, #15]
 8004118:	49a0      	ldr	r1, [pc, #640]	; (800439c <main+0x64c>)
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	440b      	add	r3, r1
 8004122:	3302      	adds	r3, #2
 8004124:	7bba      	ldrb	r2, [r7, #14]
 8004126:	701a      	strb	r2, [r3, #0]
               AirCylinder_Init(&air_devices[j], AIR_OFF);
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	4a9a      	ldr	r2, [pc, #616]	; (800439c <main+0x64c>)
 8004132:	4413      	add	r3, r2
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fa75 	bl	8001626 <AirCylinder_Init>
           for (uint8_t i = 0; i <= (uint8_t) PORT_8; i++) {
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	3301      	adds	r3, #1
 8004140:	73bb      	strb	r3, [r7, #14]
 8004142:	7bbb      	ldrb	r3, [r7, #14]
 8004144:	2b07      	cmp	r3, #7
 8004146:	d9e6      	bls.n	8004116 <main+0x3c6>
       for (uint8_t j = 0; j < 1; j++) {
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	3301      	adds	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0dd      	beq.n	8004110 <main+0x3c0>
           }
       }
       air_devices[0].device_num = PORT_1;
 8004154:	4b91      	ldr	r3, [pc, #580]	; (800439c <main+0x64c>)
 8004156:	2200      	movs	r2, #0
 8004158:	709a      	strb	r2, [r3, #2]
 //      air_devices[1].device_num = PORT_1;
       AirCylinder_SendOutput(&air_devices[0], AIR_ON);
 800415a:	2101      	movs	r1, #1
 800415c:	488f      	ldr	r0, [pc, #572]	; (800439c <main+0x64c>)
 800415e:	f7fd fa7d 	bl	800165c <AirCylinder_SendOutput>
 //      AirCylinder_SendOutput(&air_devices[1], AIR_OFF);
   }

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) ON
 8004162:	2101      	movs	r1, #1
 8004164:	488e      	ldr	r0, [pc, #568]	; (80043a0 <main+0x650>)
 8004166:	f002 fff6 	bl	8007156 <HAL_GPIO_TogglePin>
   Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 800416a:	488e      	ldr	r0, [pc, #568]	; (80043a4 <main+0x654>)
 800416c:	f7fe f95c 	bl	8002428 <Init_C620_CAN_System>
   C620_Init(c620_dev_info_global, num_of_c620);
 8004170:	4b8d      	ldr	r3, [pc, #564]	; (80043a8 <main+0x658>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	488d      	ldr	r0, [pc, #564]	; (80043ac <main+0x65c>)
 8004178:	f7fd fc6b 	bl	8001a52 <C620_Init>


   c620_dev_info_global[0].device_id = 1;  // 1スタートな事に注意
 800417c:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <main+0x65c>)
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
   c620_dev_info_global[0].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 8004182:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <main+0x65c>)
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
//    c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <main+0x65c>)
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   c620_dev_info_global[0].ctrl_param.ctrl_type = C620_CTRL_POS;
 8004192:	4b86      	ldr	r3, [pc, #536]	; (80043ac <main+0x65c>)
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   c620_dev_info_global[0].ctrl_param.accel_limit_size = 15.0f;
 800419a:	4b84      	ldr	r3, [pc, #528]	; (80043ac <main+0x65c>)
 800419c:	4a84      	ldr	r2, [pc, #528]	; (80043b0 <main+0x660>)
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
//    c620_dev_info_global[0].ctrl_param.accel_limit_size = 5.0f;
   c620_dev_info_global[0].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <main+0x65c>)
 80041a2:	4a84      	ldr	r2, [pc, #528]	; (80043b4 <main+0x664>)
 80041a4:	63da      	str	r2, [r3, #60]	; 0x3c
   c620_dev_info_global[0].ctrl_param.rotation = C620_ROT_ACW;
 80041a6:	4b81      	ldr	r3, [pc, #516]	; (80043ac <main+0x65c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

   c620_dev_info_global[0].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 80041ae:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <main+0x65c>)
 80041b0:	4a81      	ldr	r2, [pc, #516]	; (80043b8 <main+0x668>)
 80041b2:	61da      	str	r2, [r3, #28]
   c620_dev_info_global[0].ctrl_param.pid_vel.ki = 0.0f;
 80041b4:	4b7d      	ldr	r3, [pc, #500]	; (80043ac <main+0x65c>)
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	621a      	str	r2, [r3, #32]
   c620_dev_info_global[0].ctrl_param.pid_vel.kd = 0.0f;
 80041bc:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <main+0x65c>)
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24
   c620_dev_info_global[0].ctrl_param.pid_vel.kff = 0.0f;
 80041c4:	4b79      	ldr	r3, [pc, #484]	; (80043ac <main+0x65c>)
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28

//    c620_dev_info_global[0].ctrl_param.pid.kp = 10.0f;  // 位置制御用
   c620_dev_info_global[0].ctrl_param.pid.kp = 12.3f;  // 位置制御用
 80041cc:	4b77      	ldr	r3, [pc, #476]	; (80043ac <main+0x65c>)
 80041ce:	4a7b      	ldr	r2, [pc, #492]	; (80043bc <main+0x66c>)
 80041d0:	605a      	str	r2, [r3, #4]
   c620_dev_info_global[0].ctrl_param.pid.ki = 0.16f;
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <main+0x65c>)
 80041d4:	4a7a      	ldr	r2, [pc, #488]	; (80043c0 <main+0x670>)
 80041d6:	609a      	str	r2, [r3, #8]
//    c620_dev_info_global[0].ctrl_param.pid.ki = 0.0f;
   c620_dev_info_global[0].ctrl_param.pid.kd = 0.0f;
 80041d8:	4b74      	ldr	r3, [pc, #464]	; (80043ac <main+0x65c>)
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	60da      	str	r2, [r3, #12]
   c620_dev_info_global[0].ctrl_param.pid.kff = 0.0f;
 80041e0:	4b72      	ldr	r3, [pc, #456]	; (80043ac <main+0x65c>)
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]



   c620_dev_info_global[1].device_id = 2;
 80041e8:	4b70      	ldr	r3, [pc, #448]	; (80043ac <main+0x65c>)
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   c620_dev_info_global[1].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 80041f0:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <main+0x65c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
   c620_dev_info_global[1].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <main+0x65c>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
   c620_dev_info_global[1].ctrl_param.ctrl_type = C620_CTRL_POS;
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <main+0x65c>)
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   c620_dev_info_global[1].ctrl_param.accel_limit_size = 1500.0f;
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <main+0x65c>)
 800420a:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <main+0x674>)
 800420c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//    c620_dev_info_global[1].ctrl_param.accel_limit_size = 800.0f;
   c620_dev_info_global[1].ctrl_param.quant_per_rot = 1.0f/19.0f * 300.0f;  //M3508は19:1
 8004210:	4b66      	ldr	r3, [pc, #408]	; (80043ac <main+0x65c>)
 8004212:	4a6d      	ldr	r2, [pc, #436]	; (80043c8 <main+0x678>)
 8004214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   c620_dev_info_global[1].ctrl_param.rotation = C620_ROT_CW;
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <main+0x65c>)
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

//    c620_dev_info_global[1].ctrl_param.pid_vel.kp = 0.1f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する  // TODO: これまでのgain
   c620_dev_info_global[1].ctrl_param.pid_vel.kp = 0.15f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 8004220:	4b62      	ldr	r3, [pc, #392]	; (80043ac <main+0x65c>)
 8004222:	4a6a      	ldr	r2, [pc, #424]	; (80043cc <main+0x67c>)
 8004224:	669a      	str	r2, [r3, #104]	; 0x68
   c620_dev_info_global[1].ctrl_param.pid_vel.ki = 0.0f;
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <main+0x65c>)
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	66da      	str	r2, [r3, #108]	; 0x6c
   c620_dev_info_global[1].ctrl_param.pid_vel.kd = 0.0f;
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <main+0x65c>)
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	671a      	str	r2, [r3, #112]	; 0x70
   c620_dev_info_global[1].ctrl_param.pid_vel.kff = 0.0f;
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <main+0x65c>)
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	675a      	str	r2, [r3, #116]	; 0x74

   c620_dev_info_global[1].ctrl_param.pid.kp = 10.0f;  // 位置制御用
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <main+0x65c>)
 8004240:	4a63      	ldr	r2, [pc, #396]	; (80043d0 <main+0x680>)
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
//    c620_dev_info_global[1].ctrl_param.pid.kp = 9.0f;  // 位置制御用
   c620_dev_info_global[1].ctrl_param.pid.ki = 0.05f;
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <main+0x65c>)
 8004246:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <main+0x684>)
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
//    c620_dev_info_global[1].ctrl_param.pid.ki = 0.1f;
   c620_dev_info_global[1].ctrl_param.pid.kd = 0.0f;
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <main+0x65c>)
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	659a      	str	r2, [r3, #88]	; 0x58
   c620_dev_info_global[1].ctrl_param.pid.kff = 0.0f;
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <main+0x65c>)
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	65da      	str	r2, [r3, #92]	; 0x5c

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) ON
 800425a:	2101      	movs	r1, #1
 800425c:	4850      	ldr	r0, [pc, #320]	; (80043a0 <main+0x650>)
 800425e:	f002 ff7a 	bl	8007156 <HAL_GPIO_TogglePin>
   Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 8004262:	4850      	ldr	r0, [pc, #320]	; (80043a4 <main+0x654>)
 8004264:	f7fe f8e0 	bl	8002428 <Init_C620_CAN_System>
   C620_Init(c620_dev_info_global, num_of_c620);
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <main+0x658>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	484f      	ldr	r0, [pc, #316]	; (80043ac <main+0x65c>)
 8004270:	f7fd fbef 	bl	8001a52 <C620_Init>


   c620_dev_info_global[2].device_id = 3;  // 1スタートな事に注意
 8004274:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <main+0x65c>)
 8004276:	2203      	movs	r2, #3
 8004278:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
   c620_dev_info_global[2].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 800427c:	4b4b      	ldr	r3, [pc, #300]	; (80043ac <main+0x65c>)
 800427e:	2200      	movs	r2, #0
 8004280:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
//    c620_dev_info_global[2].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
   c620_dev_info_global[2].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 8004284:	4b49      	ldr	r3, [pc, #292]	; (80043ac <main+0x65c>)
 8004286:	2201      	movs	r2, #1
 8004288:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   c620_dev_info_global[2].ctrl_param.ctrl_type = C620_CTRL_POS;
 800428c:	4b47      	ldr	r3, [pc, #284]	; (80043ac <main+0x65c>)
 800428e:	2200      	movs	r2, #0
 8004290:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
   c620_dev_info_global[2].ctrl_param.accel_limit_size = 15.0f;
 8004294:	4b45      	ldr	r3, [pc, #276]	; (80043ac <main+0x65c>)
 8004296:	4a46      	ldr	r2, [pc, #280]	; (80043b0 <main+0x660>)
 8004298:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
//    c620_dev_info_global[2].ctrl_param.accel_limit_size = 5.0f;
   c620_dev_info_global[2].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <main+0x65c>)
 800429e:	4a45      	ldr	r2, [pc, #276]	; (80043b4 <main+0x664>)
 80042a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   c620_dev_info_global[2].ctrl_param.rotation = C620_ROT_ACW;
 80042a4:	4b41      	ldr	r3, [pc, #260]	; (80043ac <main+0x65c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

   c620_dev_info_global[2].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <main+0x65c>)
 80042ae:	4a42      	ldr	r2, [pc, #264]	; (80043b8 <main+0x668>)
 80042b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   c620_dev_info_global[2].ctrl_param.pid_vel.ki = 0.0f;
 80042b4:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <main+0x65c>)
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   c620_dev_info_global[2].ctrl_param.pid_vel.kd = 0.0f;
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <main+0x65c>)
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
   c620_dev_info_global[2].ctrl_param.pid_vel.kff = 0.0f;
 80042c8:	4b38      	ldr	r3, [pc, #224]	; (80043ac <main+0x65c>)
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

//    c620_dev_info_global[2].ctrl_param.pid.kp = 10.0f;  // 位置制御用
   c620_dev_info_global[2].ctrl_param.pid.kp = 12.3f;  // 位置制御用
 80042d2:	4b36      	ldr	r3, [pc, #216]	; (80043ac <main+0x65c>)
 80042d4:	4a39      	ldr	r2, [pc, #228]	; (80043bc <main+0x66c>)
 80042d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   c620_dev_info_global[2].ctrl_param.pid.ki = 0.16f;
 80042da:	4b34      	ldr	r3, [pc, #208]	; (80043ac <main+0x65c>)
 80042dc:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <main+0x670>)
 80042de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
//    c620_dev_info_global[2].ctrl_param.pid.ki = 0.0f;
   c620_dev_info_global[2].ctrl_param.pid.kd = 0.0f;
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <main+0x65c>)
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   c620_dev_info_global[2].ctrl_param.pid.kff = 0.0f;
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <main+0x65c>)
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8


   c620_dev_info_global[3].device_id = 4;
 80042f6:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <main+0x65c>)
 80042f8:	2204      	movs	r2, #4
 80042fa:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
   c620_dev_info_global[3].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 80042fe:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <main+0x65c>)
 8004300:	2200      	movs	r2, #0
 8004302:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
   c620_dev_info_global[3].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <main+0x65c>)
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
   c620_dev_info_global[3].ctrl_param.ctrl_type = C620_CTRL_POS;
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <main+0x65c>)
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
   c620_dev_info_global[3].ctrl_param.accel_limit_size = 1500.0f;
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <main+0x65c>)
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <main+0x674>)
 800431a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
//    c620_dev_info_global[3].ctrl_param.accel_limit_size = 800.0f;
   c620_dev_info_global[3].ctrl_param.quant_per_rot = 1.0f/19.0f * 300.0f;  //M3508は19:1
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <main+0x65c>)
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <main+0x678>)
 8004322:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   c620_dev_info_global[3].ctrl_param.rotation = C620_ROT_CW;
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <main+0x65c>)
 8004328:	2201      	movs	r2, #1
 800432a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

//    c620_dev_info_global[3].ctrl_param.pid_vel.kp = 0.1f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する  // TODO: これまでのgain
   c620_dev_info_global[3].ctrl_param.pid_vel.kp = 0.15f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 800432e:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <main+0x65c>)
 8004330:	4a26      	ldr	r2, [pc, #152]	; (80043cc <main+0x67c>)
 8004332:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   c620_dev_info_global[3].ctrl_param.pid_vel.ki = 0.0f;
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <main+0x65c>)
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   c620_dev_info_global[3].ctrl_param.pid_vel.kd = 0.0f;
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <main+0x65c>)
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   c620_dev_info_global[3].ctrl_param.pid_vel.kff = 0.0f;
 800434a:	4b18      	ldr	r3, [pc, #96]	; (80043ac <main+0x65c>)
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

   c620_dev_info_global[3].ctrl_param.pid.kp = 10.0f;  // 位置制御用
 8004354:	4b15      	ldr	r3, [pc, #84]	; (80043ac <main+0x65c>)
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <main+0x680>)
 8004358:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
//    c620_dev_info_global[3].ctrl_param.pid.kp = 9.0f;  // 位置制御用
   c620_dev_info_global[3].ctrl_param.pid.ki = 0.05f;
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <main+0x65c>)
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <main+0x684>)
 8004360:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
//    c620_dev_info_global[3].ctrl_param.pid.ki = 0.1f;
   c620_dev_info_global[3].ctrl_param.pid.kd = 0.0f;
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <main+0x65c>)
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   c620_dev_info_global[3].ctrl_param.pid.kff = 0.0f;
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <main+0x65c>)
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
//   c620_dev_info_global[i].ctrl_param.pid.kd = 0.0f;
//   c620_dev_info_global[i].ctrl_param.pid.kff = 0.0f;
//
//   }

   for(int i=0; i<num_of_c620; i++)C620_SetTarget(&c620_dev_info_global[i], 0.0f);
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	e03a      	b.n	80043f4 <main+0x6a4>
 800437e:	bf00      	nop
 8004380:	20004ec4 	.word	0x20004ec4
 8004384:	bf19999a 	.word	0xbf19999a
 8004388:	3db40000 	.word	0x3db40000
 800438c:	40a00000 	.word	0x40a00000
 8004390:	3df5c28f 	.word	0x3df5c28f
 8004394:	20004fc4 	.word	0x20004fc4
 8004398:	00000000 	.word	0x00000000
 800439c:	20004f44 	.word	0x20004f44
 80043a0:	40020400 	.word	0x40020400
 80043a4:	20004e68 	.word	0x20004e68
 80043a8:	08022278 	.word	0x08022278
 80043ac:	20004f4c 	.word	0x20004f4c
 80043b0:	41700000 	.word	0x41700000
 80043b4:	3de1c0f3 	.word	0x3de1c0f3
 80043b8:	40900000 	.word	0x40900000
 80043bc:	4144cccd 	.word	0x4144cccd
 80043c0:	3e23d70a 	.word	0x3e23d70a
 80043c4:	44bb8000 	.word	0x44bb8000
 80043c8:	417ca1af 	.word	0x417ca1af
 80043cc:	3e19999a 	.word	0x3e19999a
 80043d0:	41200000 	.word	0x41200000
 80043d4:	3d4ccccd 	.word	0x3d4ccccd
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	224c      	movs	r2, #76	; 0x4c
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <main+0x708>)
 80043e2:	4413      	add	r3, r2
 80043e4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800445c <main+0x70c>
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd fd6f 	bl	8001ecc <C620_SetTarget>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <main+0x710>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	dbeb      	blt.n	80043d8 <main+0x688>
   if(!DISABLE_C620_WAIT_CONNECT)C620_WaitForConnect(c620_dev_info_global, num_of_c620);
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <main+0x710>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	4814      	ldr	r0, [pc, #80]	; (8004458 <main+0x708>)
 8004408:	f7fd fd28 	bl	8001e5c <C620_WaitForConnect>
//    for(int i=0; i<num_of_c620; i++){
//        C620_Calibration(&c620_dev_info_global[i], -2.0f, SWITCH_NO, GPIOG, GPIO_PIN_1, &hcan1);
//        C620_ControlEnable(&(c620_dev_info_global[i]));
//    }
   for(int i=0; i<num_of_c620; i++)C620_ControlEnable(&(c620_dev_info_global[i]));
 800440c:	2300      	movs	r3, #0
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e00b      	b.n	800442a <main+0x6da>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	224c      	movs	r2, #76	; 0x4c
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <main+0x708>)
 800441c:	4413      	add	r3, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fd63 	bl	8001eea <C620_ControlEnable>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3301      	adds	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <main+0x710>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4293      	cmp	r3, r2
 8004434:	dbed      	blt.n	8004412 <main+0x6c2>

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> OFF
 8004436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800443a:	480a      	ldr	r0, [pc, #40]	; (8004464 <main+0x714>)
 800443c:	f002 fe8b 	bl	8007156 <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) -> OFF
 8004440:	2101      	movs	r1, #1
 8004442:	4808      	ldr	r0, [pc, #32]	; (8004464 <main+0x714>)
 8004444:	f002 fe87 	bl	8007156 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004448:	f00a fdea 	bl	800f020 <osKernelInitialize>
  MX_FREERTOS_Init();
 800444c:	f7ff f820 	bl	8003490 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004450:	f00a fe1a 	bl	800f088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004454:	e7fe      	b.n	8004454 <main+0x704>
 8004456:	bf00      	nop
 8004458:	20004f4c 	.word	0x20004f4c
 800445c:	00000000 	.word	0x00000000
 8004460:	08022278 	.word	0x08022278
 8004464:	40020400 	.word	0x40020400

08004468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b094      	sub	sp, #80	; 0x50
 800446c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800446e:	f107 031c 	add.w	r3, r7, #28
 8004472:	2234      	movs	r2, #52	; 0x34
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f01c fdc6 	bl	8021008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800448c:	f004 f936 	bl	80086fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <SystemClock_Config+0xdc>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <SystemClock_Config+0xdc>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	; 0x40
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <SystemClock_Config+0xdc>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <SystemClock_Config+0xe0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <SystemClock_Config+0xe0>)
 80044b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <SystemClock_Config+0xe0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044ce:	2302      	movs	r3, #2
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044d8:	2304      	movs	r3, #4
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80044dc:	2360      	movs	r3, #96	; 0x60
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044e0:	2302      	movs	r3, #2
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80044e4:	2304      	movs	r3, #4
 80044e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044e8:	2302      	movs	r3, #2
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 f963 	bl	80087bc <HAL_RCC_OscConfig>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80044fc:	f000 f838 	bl	8004570 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004500:	f004 f90c 	bl	800871c <HAL_PWREx_EnableOverDrive>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800450a:	f000 f831 	bl	8004570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800450e:	230f      	movs	r3, #15
 8004510:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004512:	2302      	movs	r3, #2
 8004514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800451a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800451e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004524:	f107 0308 	add.w	r3, r7, #8
 8004528:	2103      	movs	r1, #3
 800452a:	4618      	mov	r0, r3
 800452c:	f004 fbf4 	bl	8008d18 <HAL_RCC_ClockConfig>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8004536:	f000 f81b 	bl	8004570 <Error_Handler>
  }
}
 800453a:	bf00      	nop
 800453c:	3750      	adds	r7, #80	; 0x50
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000

0800454c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800455e:	f000 fd81 	bl	8005064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000

08004570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004574:	b672      	cpsid	i
}
 8004576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004578:	e7fe      	b.n	8004578 <Error_Handler+0x8>
	...

0800457c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <microros_allocate+0x3c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	461a      	mov	r2, r3
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <microros_allocate+0x3c>)
 8004594:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <microros_allocate+0x40>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <microros_allocate+0x40>)
 80045a4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe fa12 	bl	80029d0 <pvPortMallocMicroROS>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000c8b8 	.word	0x2000c8b8
 80045bc:	2000c8bc 	.word	0x2000c8bc

080045c0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00c      	beq.n	80045ea <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fe fb25 	bl	8002c20 <getBlockSize>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <microros_deallocate+0x34>)
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <microros_deallocate+0x34>)
 80045e2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fe fabd 	bl	8002b64 <vPortFreeMicroROS>
  }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2000c8bc 	.word	0x2000c8bc

080045f8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <microros_reallocate+0x64>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4413      	add	r3, r2
 800460e:	461a      	mov	r2, r3
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <microros_reallocate+0x64>)
 8004612:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <microros_reallocate+0x68>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	461a      	mov	r2, r3
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <microros_reallocate+0x68>)
 8004622:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800462a:	68b8      	ldr	r0, [r7, #8]
 800462c:	f7fe f9d0 	bl	80029d0 <pvPortMallocMicroROS>
 8004630:	4603      	mov	r3, r0
 8004632:	e00e      	b.n	8004652 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fe faf3 	bl	8002c20 <getBlockSize>
 800463a:	4603      	mov	r3, r0
 800463c:	4a08      	ldr	r2, [pc, #32]	; (8004660 <microros_reallocate+0x68>)
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	461a      	mov	r2, r3
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <microros_reallocate+0x68>)
 8004646:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7fe fb06 	bl	8002c5c <pvPortReallocMicroROS>
 8004650:	4603      	mov	r3, r0
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000c8b8 	.word	0x2000c8b8
 8004660:	2000c8bc 	.word	0x2000c8bc

08004664 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <microros_zero_allocate+0x48>)
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	4413      	add	r3, r2
 800467e:	461a      	mov	r2, r3
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <microros_zero_allocate+0x48>)
 8004682:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <microros_zero_allocate+0x4c>)
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	4413      	add	r3, r2
 8004692:	461a      	mov	r2, r3
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <microros_zero_allocate+0x4c>)
 8004696:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7fe fb0b 	bl	8002cb6 <pvPortCallocMicroROS>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	2000c8b8 	.word	0x2000c8b8
 80046b0:	2000c8bc 	.word	0x2000c8bc
 80046b4:	00000000 	.word	0x00000000

080046b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80046b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80046ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ce:	a320      	add	r3, pc, #128	; (adr r3, 8004750 <UTILS_NanosecondsToTimespec+0x98>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fb ff2a 	bl	800052c <__aeabi_ldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80046e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046e6:	a31a      	add	r3, pc, #104	; (adr r3, 8004750 <UTILS_NanosecondsToTimespec+0x98>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb ff1e 	bl	800052c <__aeabi_ldivmod>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	da20      	bge.n	800473e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a11      	ldr	r2, [pc, #68]	; (8004748 <UTILS_NanosecondsToTimespec+0x90>)
 8004702:	fb82 1203 	smull	r1, r2, r2, r3
 8004706:	1712      	asrs	r2, r2, #28
 8004708:	17db      	asrs	r3, r3, #31
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	3301      	adds	r3, #1
 800470e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	17c8      	asrs	r0, r1, #31
 800471a:	460c      	mov	r4, r1
 800471c:	4605      	mov	r5, r0
 800471e:	ebb2 0804 	subs.w	r8, r2, r4
 8004722:	eb63 0905 	sbc.w	r9, r3, r5
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4906      	ldr	r1, [pc, #24]	; (800474c <UTILS_NanosecondsToTimespec+0x94>)
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	441a      	add	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    }
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004748:	44b82fa1 	.word	0x44b82fa1
 800474c:	3b9aca00 	.word	0x3b9aca00
 8004750:	3b9aca00 	.word	0x3b9aca00
 8004754:	00000000 	.word	0x00000000

08004758 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b08e      	sub	sp, #56	; 0x38
 800475e:	af00      	add	r7, sp, #0
 8004760:	6278      	str	r0, [r7, #36]	; 0x24
 8004762:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8004764:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004768:	2300      	movs	r3, #0
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800477a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477e:	4618      	mov	r0, r3
 8004780:	f00c f96a 	bl	8010a58 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	17da      	asrs	r2, r3, #31
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	61fa      	str	r2, [r7, #28]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	000b      	movs	r3, r1
 8004798:	2200      	movs	r2, #0
 800479a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2200      	movs	r2, #0
 80047a2:	461c      	mov	r4, r3
 80047a4:	4615      	mov	r5, r2
 80047a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047aa:	1911      	adds	r1, r2, r4
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	416b      	adcs	r3, r5
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80047b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80047ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	f04f 0400 	mov.w	r4, #0
 80047c6:	f04f 0500 	mov.w	r5, #0
 80047ca:	015d      	lsls	r5, r3, #5
 80047cc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80047d0:	0154      	lsls	r4, r2, #5
 80047d2:	4622      	mov	r2, r4
 80047d4:	462b      	mov	r3, r5
 80047d6:	ebb2 0800 	subs.w	r8, r2, r0
 80047da:	eb63 0901 	sbc.w	r9, r3, r1
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80047ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80047ee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80047f2:	4690      	mov	r8, r2
 80047f4:	4699      	mov	r9, r3
 80047f6:	eb18 0a00 	adds.w	sl, r8, r0
 80047fa:	eb49 0b01 	adc.w	fp, r9, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800480a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800480e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004812:	ebb2 040a 	subs.w	r4, r2, sl
 8004816:	603c      	str	r4, [r7, #0]
 8004818:	eb63 030b 	sbc.w	r3, r3, fp
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004822:	4623      	mov	r3, r4
 8004824:	181b      	adds	r3, r3, r0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	462b      	mov	r3, r5
 800482a:	eb41 0303 	adc.w	r3, r1, r3
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004836:	f7ff ff3f 	bl	80046b8 <UTILS_NanosecondsToTimespec>

    return 0;
 800483a:	2300      	movs	r3, #0
 800483c:	4618      	mov	r0, r3
 800483e:	3738      	adds	r7, #56	; 0x38
 8004840:	46bd      	mov	sp, r7
 8004842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_MspInit+0x4c>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <HAL_MspInit+0x4c>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	; 0x40
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_MspInit+0x4c>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_MspInit+0x4c>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <HAL_MspInit+0x4c>)
 800486c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004870:	6453      	str	r3, [r2, #68]	; 0x44
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_MspInit+0x4c>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	210f      	movs	r1, #15
 8004882:	f06f 0001 	mvn.w	r0, #1
 8004886:	f001 fb3b 	bl	8005f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	; 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80048a8:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_InitTick+0xcc>)
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_InitTick+0xcc>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6453      	str	r3, [r2, #68]	; 0x44
 80048b4:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_InitTick+0xcc>)
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048c0:	f107 020c 	add.w	r2, r7, #12
 80048c4:	f107 0310 	add.w	r3, r7, #16
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 fc4a 	bl	8009164 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80048d0:	f004 fc34 	bl	800913c <HAL_RCC_GetPCLK2Freq>
 80048d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <HAL_InitTick+0xd0>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	0c9b      	lsrs	r3, r3, #18
 80048e0:	3b01      	subs	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <HAL_InitTick+0xd4>)
 80048e6:	4a22      	ldr	r2, [pc, #136]	; (8004970 <HAL_InitTick+0xd8>)
 80048e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_InitTick+0xd4>)
 80048ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_InitTick+0xd4>)
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <HAL_InitTick+0xd4>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_InitTick+0xd4>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_InitTick+0xd4>)
 8004906:	2200      	movs	r2, #0
 8004908:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800490a:	4818      	ldr	r0, [pc, #96]	; (800496c <HAL_InitTick+0xd4>)
 800490c:	f005 f884 	bl	8009a18 <HAL_TIM_Base_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11b      	bne.n	8004956 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800491e:	4813      	ldr	r0, [pc, #76]	; (800496c <HAL_InitTick+0xd4>)
 8004920:	f005 f8dc 	bl	8009adc <HAL_TIM_Base_Start_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800492a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800492e:	2b00      	cmp	r3, #0
 8004930:	d111      	bne.n	8004956 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004932:	2019      	movs	r0, #25
 8004934:	f001 fb00 	bl	8005f38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d808      	bhi.n	8004950 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800493e:	2200      	movs	r2, #0
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	2019      	movs	r0, #25
 8004944:	f001 fadc 	bl	8005f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004948:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <HAL_InitTick+0xdc>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e002      	b.n	8004956 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800495a:	4618      	mov	r0, r3
 800495c:	3730      	adds	r7, #48	; 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	431bde83 	.word	0x431bde83
 800496c:	2000c8c0 	.word	0x2000c8c0
 8004970:	40010000 	.word	0x40010000
 8004974:	20000008 	.word	0x20000008

08004978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800497c:	e7fe      	b.n	800497c <NMI_Handler+0x4>

0800497e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004982:	e7fe      	b.n	8004982 <HardFault_Handler+0x4>

08004984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004988:	e7fe      	b.n	8004988 <MemManage_Handler+0x4>

0800498a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800498e:	e7fe      	b.n	800498e <BusFault_Handler+0x4>

08004990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004994:	e7fe      	b.n	8004994 <UsageFault_Handler+0x4>

08004996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <DMA1_Stream1_IRQHandler+0x10>)
 80049aa:	f001 fc73 	bl	8006294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2000ca84 	.word	0x2000ca84

080049b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <DMA1_Stream3_IRQHandler+0x10>)
 80049be:	f001 fc69 	bl	8006294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000cae4 	.word	0x2000cae4

080049cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <DMA1_Stream6_IRQHandler+0x10>)
 80049d2:	f001 fc5f 	bl	8006294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000ca24 	.word	0x2000ca24

080049e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80049e4:	4802      	ldr	r0, [pc, #8]	; (80049f0 <CAN1_TX_IRQHandler+0x10>)
 80049e6:	f000 ffea 	bl	80059be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20004e68 	.word	0x20004e68

080049f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80049f8:	4802      	ldr	r0, [pc, #8]	; (8004a04 <CAN1_RX0_IRQHandler+0x10>)
 80049fa:	f000 ffe0 	bl	80059be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20004e68 	.word	0x20004e68

08004a08 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a0c:	4802      	ldr	r0, [pc, #8]	; (8004a18 <CAN1_RX1_IRQHandler+0x10>)
 8004a0e:	f000 ffd6 	bl	80059be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20004e68 	.word	0x20004e68

08004a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a22:	f005 f8d3 	bl	8009bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000c8c0 	.word	0x2000c8c0

08004a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a34:	4802      	ldr	r0, [pc, #8]	; (8004a40 <USART2_IRQHandler+0x10>)
 8004a36:	f005 fcf3 	bl	800a420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000c914 	.word	0x2000c914

08004a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <USART3_IRQHandler+0x10>)
 8004a4a:	f005 fce9 	bl	800a420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000c99c 	.word	0x2000c99c

08004a58 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <CAN2_TX_IRQHandler+0x10>)
 8004a5e:	f000 ffae 	bl	80059be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20004e90 	.word	0x20004e90

08004a6c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a70:	4802      	ldr	r0, [pc, #8]	; (8004a7c <CAN2_RX0_IRQHandler+0x10>)
 8004a72:	f000 ffa4 	bl	80059be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20004e90 	.word	0x20004e90

08004a80 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004a84:	4802      	ldr	r0, [pc, #8]	; (8004a90 <CAN2_RX1_IRQHandler+0x10>)
 8004a86:	f000 ff9a 	bl	80059be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20004e90 	.word	0x20004e90

08004a94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <OTG_FS_IRQHandler+0x10>)
 8004a9a:	f002 fcbc 	bl	8007416 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20012970 	.word	0x20012970

08004aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return 1;
 8004aac:	2301      	movs	r3, #1
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <_kill>:

int _kill(int pid, int sig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ac2:	f01c fb35 	bl	8021130 <__errno>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2216      	movs	r2, #22
 8004aca:	601a      	str	r2, [r3, #0]
  return -1;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_exit>:

void _exit (int status)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffe7 	bl	8004ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004aea:	e7fe      	b.n	8004aea <_exit+0x12>

08004aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e00a      	b.n	8004b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004afe:	f3af 8000 	nop.w
 8004b02:	4601      	mov	r1, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	60ba      	str	r2, [r7, #8]
 8004b0a:	b2ca      	uxtb	r2, r1
 8004b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3301      	adds	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	dbf0      	blt.n	8004afe <_read+0x12>
  }

  return len;
 8004b1c:	687b      	ldr	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e009      	b.n	8004b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	60ba      	str	r2, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f883 	bl	8003c4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	dbf1      	blt.n	8004b38 <_write+0x12>
  }
  return len;
 8004b54:	687b      	ldr	r3, [r7, #4]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <_close>:

int _close(int file)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b86:	605a      	str	r2, [r3, #4]
  return 0;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_isatty>:

int _isatty(int file)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b9e:	2301      	movs	r3, #1
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <_sbrk+0x5c>)
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <_sbrk+0x60>)
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <_sbrk+0x64>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004be4:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <_sbrk+0x64>)
 8004be6:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <_sbrk+0x68>)
 8004be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <_sbrk+0x64>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d207      	bcs.n	8004c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bf8:	f01c fa9a 	bl	8021130 <__errno>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	220c      	movs	r2, #12
 8004c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c06:	e009      	b.n	8004c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <_sbrk+0x64>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <_sbrk+0x64>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <_sbrk+0x64>)
 8004c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20080000 	.word	0x20080000
 8004c28:	00000400 	.word	0x00000400
 8004c2c:	2000c910 	.word	0x2000c910
 8004c30:	20017ad0 	.word	0x20017ad0

08004c34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <SystemInit+0x20>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <SystemInit+0x20>)
 8004c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c5e:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <MX_USART2_UART_Init+0x5c>)
 8004c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c7e:	220c      	movs	r2, #12
 8004c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c9a:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <MX_USART2_UART_Init+0x58>)
 8004c9c:	f005 f99c 	bl	8009fd8 <HAL_UART_Init>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004ca6:	f7ff fc63 	bl	8004570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	2000c914 	.word	0x2000c914
 8004cb4:	40004400 	.word	0x40004400

08004cb8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <MX_USART3_UART_Init+0x5c>)
 8004cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cde:	220c      	movs	r2, #12
 8004ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cee:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004cfa:	4805      	ldr	r0, [pc, #20]	; (8004d10 <MX_USART3_UART_Init+0x58>)
 8004cfc:	f005 f96c 	bl	8009fd8 <HAL_UART_Init>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004d06:	f7ff fc33 	bl	8004570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	2000c99c 	.word	0x2000c99c
 8004d14:	40004800 	.word	0x40004800

08004d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b0b0      	sub	sp, #192	; 0xc0
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d30:	f107 031c 	add.w	r3, r7, #28
 8004d34:	2290      	movs	r2, #144	; 0x90
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f01c f965 	bl	8021008 <memset>
  if(uartHandle->Instance==USART2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4aa2      	ldr	r2, [pc, #648]	; (8004fcc <HAL_UART_MspInit+0x2b4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	f040 8093 	bne.w	8004e70 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d52:	f107 031c 	add.w	r3, r7, #28
 8004d56:	4618      	mov	r0, r3
 8004d58:	f004 fa36 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004d62:	f7ff fc05 	bl	8004570 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d66:	4b9a      	ldr	r3, [pc, #616]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	4a99      	ldr	r2, [pc, #612]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d70:	6413      	str	r3, [r2, #64]	; 0x40
 8004d72:	4b97      	ldr	r3, [pc, #604]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7e:	4b94      	ldr	r3, [pc, #592]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	4a93      	ldr	r2, [pc, #588]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8a:	4b91      	ldr	r3, [pc, #580]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d96:	4b8e      	ldr	r3, [pc, #568]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	4a8d      	ldr	r2, [pc, #564]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004d9c:	f043 0308 	orr.w	r3, r3, #8
 8004da0:	6313      	str	r3, [r2, #48]	; 0x30
 8004da2:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004dae:	2308      	movs	r3, #8
 8004db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db4:	2302      	movs	r3, #2
 8004db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dc6:	2307      	movs	r3, #7
 8004dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4880      	ldr	r0, [pc, #512]	; (8004fd4 <HAL_UART_MspInit+0x2bc>)
 8004dd4:	f001 fffa 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dde:	2302      	movs	r3, #2
 8004de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dea:	2303      	movs	r3, #3
 8004dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004df0:	2307      	movs	r3, #7
 8004df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004df6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4876      	ldr	r0, [pc, #472]	; (8004fd8 <HAL_UART_MspInit+0x2c0>)
 8004dfe:	f001 ffe5 	bl	8006dcc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004e02:	4b76      	ldr	r3, [pc, #472]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e04:	4a76      	ldr	r2, [pc, #472]	; (8004fe0 <HAL_UART_MspInit+0x2c8>)
 8004e06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004e08:	4b74      	ldr	r3, [pc, #464]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e10:	4b72      	ldr	r3, [pc, #456]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e16:	4b71      	ldr	r3, [pc, #452]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e22:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e24:	4b6d      	ldr	r3, [pc, #436]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e2a:	4b6c      	ldr	r3, [pc, #432]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004e30:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e36:	4b69      	ldr	r3, [pc, #420]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e3c:	4b67      	ldr	r3, [pc, #412]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004e42:	4866      	ldr	r0, [pc, #408]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e44:	f001 f886 	bl	8005f54 <HAL_DMA_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004e4e:	f7ff fb8f 	bl	8004570 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a61      	ldr	r2, [pc, #388]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e56:	671a      	str	r2, [r3, #112]	; 0x70
 8004e58:	4a60      	ldr	r2, [pc, #384]	; (8004fdc <HAL_UART_MspInit+0x2c4>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2105      	movs	r1, #5
 8004e62:	2026      	movs	r0, #38	; 0x26
 8004e64:	f001 f84c 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e68:	2026      	movs	r0, #38	; 0x26
 8004e6a:	f001 f865 	bl	8005f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004e6e:	e0a9      	b.n	8004fc4 <HAL_UART_MspInit+0x2ac>
  else if(uartHandle->Instance==USART3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5b      	ldr	r2, [pc, #364]	; (8004fe4 <HAL_UART_MspInit+0x2cc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	f040 80a4 	bne.w	8004fc4 <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e80:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004e82:	2300      	movs	r3, #0
 8004e84:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e86:	f107 031c 	add.w	r3, r7, #28
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f004 f99c 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8004e96:	f7ff fb6b 	bl	8004570 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a4c      	ldr	r2, [pc, #304]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4a46      	ldr	r2, [pc, #280]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004eb8:	f043 0308 	orr.w	r3, r3, #8
 8004ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebe:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <HAL_UART_MspInit+0x2b8>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ee4:	2307      	movs	r3, #7
 8004ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4839      	ldr	r0, [pc, #228]	; (8004fd8 <HAL_UART_MspInit+0x2c0>)
 8004ef2:	f001 ff6b 	bl	8006dcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004ef6:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	; (8004fec <HAL_UART_MspInit+0x2d4>)
 8004efa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004efc:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f02:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f04:	4b38      	ldr	r3, [pc, #224]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f0a:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f16:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f18:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004f24:	4b30      	ldr	r3, [pc, #192]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004f2c:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f2e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f32:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f34:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004f3a:	482b      	ldr	r0, [pc, #172]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f3c:	f001 f80a 	bl	8005f54 <HAL_DMA_Init>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_UART_MspInit+0x232>
      Error_Handler();
 8004f46:	f7ff fb13 	bl	8004570 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f4e:	675a      	str	r2, [r3, #116]	; 0x74
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_UART_MspInit+0x2d0>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f58:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <HAL_UART_MspInit+0x2dc>)
 8004f5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004f5c:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f62:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f64:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f66:	2240      	movs	r2, #64	; 0x40
 8004f68:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f6a:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f70:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f76:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004f8a:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f90:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f92:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004f98:	4815      	ldr	r0, [pc, #84]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004f9a:	f000 ffdb 	bl	8005f54 <HAL_DMA_Init>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_UART_MspInit+0x290>
      Error_Handler();
 8004fa4:	f7ff fae4 	bl	8004570 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004fac:	671a      	str	r2, [r3, #112]	; 0x70
 8004fae:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <HAL_UART_MspInit+0x2d8>)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2105      	movs	r1, #5
 8004fb8:	2027      	movs	r0, #39	; 0x27
 8004fba:	f000 ffa1 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004fbe:	2027      	movs	r0, #39	; 0x27
 8004fc0:	f000 ffba 	bl	8005f38 <HAL_NVIC_EnableIRQ>
}
 8004fc4:	bf00      	nop
 8004fc6:	37c0      	adds	r7, #192	; 0xc0
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40004400 	.word	0x40004400
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40020000 	.word	0x40020000
 8004fd8:	40020c00 	.word	0x40020c00
 8004fdc:	2000ca24 	.word	0x2000ca24
 8004fe0:	400260a0 	.word	0x400260a0
 8004fe4:	40004800 	.word	0x40004800
 8004fe8:	2000ca84 	.word	0x2000ca84
 8004fec:	40026028 	.word	0x40026028
 8004ff0:	2000cae4 	.word	0x2000cae4
 8004ff4:	40026058 	.word	0x40026058

08004ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ffc:	480d      	ldr	r0, [pc, #52]	; (8005034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ffe:	490e      	ldr	r1, [pc, #56]	; (8005038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005000:	4a0e      	ldr	r2, [pc, #56]	; (800503c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005004:	e002      	b.n	800500c <LoopCopyDataInit>

08005006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800500a:	3304      	adds	r3, #4

0800500c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800500c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800500e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005010:	d3f9      	bcc.n	8005006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005012:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005014:	4c0b      	ldr	r4, [pc, #44]	; (8005044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005018:	e001      	b.n	800501e <LoopFillZerobss>

0800501a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800501a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800501c:	3204      	adds	r2, #4

0800501e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800501e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005020:	d3fb      	bcc.n	800501a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005022:	f7ff fe07 	bl	8004c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005026:	f01c f889 	bl	802113c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800502a:	f7fe fe91 	bl	8003d50 <main>
  bx  lr    
 800502e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005030:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005038:	200008f4 	.word	0x200008f4
  ldr r2, =_sidata
 800503c:	08023654 	.word	0x08023654
  ldr r2, =_sbss
 8005040:	20000a38 	.word	0x20000a38
  ldr r4, =_ebss
 8005044:	20017ad0 	.word	0x20017ad0

08005048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005048:	e7fe      	b.n	8005048 <ADC_IRQHandler>

0800504a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800504e:	2003      	movs	r0, #3
 8005050:	f000 ff4b 	bl	8005eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005054:	200f      	movs	r0, #15
 8005056:	f7ff fc1f 	bl	8004898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800505a:	f7ff fbf5 	bl	8004848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_IncTick+0x20>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_IncTick+0x24>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4413      	add	r3, r2
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <HAL_IncTick+0x24>)
 8005076:	6013      	str	r3, [r2, #0]
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000000c 	.word	0x2000000c
 8005088:	2000cb44 	.word	0x2000cb44

0800508c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return uwTick;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_GetTick+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	2000cb44 	.word	0x2000cb44

080050a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7ff ffee 	bl	800508c <HAL_GetTick>
 80050b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050bc:	d005      	beq.n	80050ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_Delay+0x44>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050ca:	bf00      	nop
 80050cc:	f7ff ffde 	bl	800508c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d8f7      	bhi.n	80050cc <HAL_Delay+0x28>
  {
  }
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c

080050ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e0ed      	b.n	80052da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd fb9a 	bl	8002844 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005120:	f7ff ffb4 	bl	800508c <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005126:	e012      	b.n	800514e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005128:	f7ff ffb0 	bl	800508c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b0a      	cmp	r3, #10
 8005134:	d90b      	bls.n	800514e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2205      	movs	r2, #5
 8005146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0c5      	b.n	80052da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0e5      	beq.n	8005128 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0202 	bic.w	r2, r2, #2
 800516a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800516c:	f7ff ff8e 	bl	800508c <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005172:	e012      	b.n	800519a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005174:	f7ff ff8a 	bl	800508c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b0a      	cmp	r3, #10
 8005180:	d90b      	bls.n	800519a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2205      	movs	r2, #5
 8005192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e09f      	b.n	80052da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	7e1b      	ldrb	r3, [r3, #24]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d108      	bne.n	80051c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e007      	b.n	80051d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7e5b      	ldrb	r3, [r3, #25]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d108      	bne.n	80051ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e007      	b.n	80051fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	7e9b      	ldrb	r3, [r3, #26]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d108      	bne.n	8005216 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0220 	orr.w	r2, r2, #32
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e007      	b.n	8005226 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0220 	bic.w	r2, r2, #32
 8005224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7edb      	ldrb	r3, [r3, #27]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d108      	bne.n	8005240 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0210 	bic.w	r2, r2, #16
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e007      	b.n	8005250 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0210 	orr.w	r2, r2, #16
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	7f1b      	ldrb	r3, [r3, #28]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d108      	bne.n	800526a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0208 	orr.w	r2, r2, #8
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e007      	b.n	800527a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0208 	bic.w	r2, r2, #8
 8005278:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	7f5b      	ldrb	r3, [r3, #29]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d108      	bne.n	8005294 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0204 	orr.w	r2, r2, #4
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e007      	b.n	80052a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	ea42 0103 	orr.w	r1, r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	1e5a      	subs	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d003      	beq.n	800530a <HAL_CAN_ConfigFilter+0x26>
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	2b02      	cmp	r3, #2
 8005306:	f040 80c7 	bne.w	8005498 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a69      	ldr	r2, [pc, #420]	; (80054b4 <HAL_CAN_ConfigFilter+0x1d0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d001      	beq.n	8005318 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <HAL_CAN_ConfigFilter+0x1d4>)
 8005316:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800531e:	f043 0201 	orr.w	r2, r3, #1
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4a63      	ldr	r2, [pc, #396]	; (80054b8 <HAL_CAN_ConfigFilter+0x1d4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d111      	bne.n	8005354 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005336:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	431a      	orrs	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2201      	movs	r2, #1
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	43db      	mvns	r3, r3
 800536e:	401a      	ands	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d123      	bne.n	80053c6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	43db      	mvns	r3, r3
 8005388:	401a      	ands	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3248      	adds	r2, #72	; 0x48
 80053a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053bc:	6979      	ldr	r1, [r7, #20]
 80053be:	3348      	adds	r3, #72	; 0x48
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d122      	bne.n	8005414 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80053ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3248      	adds	r2, #72	; 0x48
 80053f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005408:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800540a:	6979      	ldr	r1, [r7, #20]
 800540c:	3348      	adds	r3, #72	; 0x48
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800542e:	e007      	b.n	8005440 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	431a      	orrs	r2, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800545a:	e007      	b.n	800546c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	431a      	orrs	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d107      	bne.n	8005484 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	431a      	orrs	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800548a:	f023 0201 	bic.w	r2, r3, #1
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e006      	b.n	80054a6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40003400 	.word	0x40003400
 80054b8:	40006400 	.word	0x40006400

080054bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d12e      	bne.n	800552e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054e8:	f7ff fdd0 	bl	800508c <HAL_GetTick>
 80054ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80054ee:	e012      	b.n	8005516 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054f0:	f7ff fdcc 	bl	800508c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b0a      	cmp	r3, #10
 80054fc:	d90b      	bls.n	8005516 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2205      	movs	r2, #5
 800550e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e012      	b.n	800553c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	e006      	b.n	800553c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005558:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d003      	beq.n	8005570 <HAL_CAN_AddTxMessage+0x2c>
 8005568:	7ffb      	ldrb	r3, [r7, #31]
 800556a:	2b02      	cmp	r3, #2
 800556c:	f040 80ad 	bne.w	80056ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8095 	beq.w	80056ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	0e1b      	lsrs	r3, r3, #24
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800559a:	2201      	movs	r2, #1
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	409a      	lsls	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10d      	bne.n	80055c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	6809      	ldr	r1, [r1, #0]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	3318      	adds	r3, #24
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	440b      	add	r3, r1
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e00f      	b.n	80055e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80055dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	3318      	adds	r3, #24
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	440b      	add	r3, r1
 80055e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6819      	ldr	r1, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	3318      	adds	r3, #24
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	440b      	add	r3, r1
 80055f8:	3304      	adds	r3, #4
 80055fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	7d1b      	ldrb	r3, [r3, #20]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d111      	bne.n	8005628 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	3318      	adds	r3, #24
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	4413      	add	r3, r2
 8005610:	3304      	adds	r3, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6811      	ldr	r1, [r2, #0]
 8005618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3318      	adds	r3, #24
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	440b      	add	r3, r1
 8005624:	3304      	adds	r3, #4
 8005626:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3307      	adds	r3, #7
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	061a      	lsls	r2, r3, #24
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3306      	adds	r3, #6
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3305      	adds	r3, #5
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	4313      	orrs	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	3204      	adds	r2, #4
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	4610      	mov	r0, r2
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6811      	ldr	r1, [r2, #0]
 8005650:	ea43 0200 	orr.w	r2, r3, r0
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	440b      	add	r3, r1
 800565a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800565e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3303      	adds	r3, #3
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	061a      	lsls	r2, r3, #24
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3302      	adds	r3, #2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3301      	adds	r3, #1
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	4313      	orrs	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	7812      	ldrb	r2, [r2, #0]
 8005680:	4610      	mov	r0, r2
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	ea43 0200 	orr.w	r2, r3, r0
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	440b      	add	r3, r1
 8005690:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005694:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	3318      	adds	r3, #24
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	4413      	add	r3, r2
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	6811      	ldr	r1, [r2, #0]
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3318      	adds	r3, #24
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	440b      	add	r3, r1
 80056b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e00e      	b.n	80056d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e006      	b.n	80056d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3724      	adds	r7, #36	; 0x24
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056f6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d002      	beq.n	8005704 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d11d      	bne.n	8005740 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005762:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d003      	beq.n	8005772 <HAL_CAN_GetRxMessage+0x24>
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	2b02      	cmp	r3, #2
 800576e:	f040 80f3 	bne.w	8005958 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10e      	bne.n	8005796 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d116      	bne.n	80057b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0e7      	b.n	8005966 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d107      	bne.n	80057b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0d8      	b.n	8005966 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	331b      	adds	r3, #27
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	4413      	add	r3, r2
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0204 	and.w	r2, r3, #4
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	331b      	adds	r3, #27
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	4413      	add	r3, r2
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	0d5b      	lsrs	r3, r3, #21
 80057e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e00b      	b.n	8005804 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	331b      	adds	r3, #27
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	4413      	add	r3, r2
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	08db      	lsrs	r3, r3, #3
 80057fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	331b      	adds	r3, #27
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	4413      	add	r3, r2
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0202 	and.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	331b      	adds	r3, #27
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4413      	add	r3, r2
 8005826:	3304      	adds	r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 020f 	and.w	r2, r3, #15
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	331b      	adds	r3, #27
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4413      	add	r3, r2
 800583e:	3304      	adds	r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	b2da      	uxtb	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	331b      	adds	r3, #27
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	4413      	add	r3, r2
 8005856:	3304      	adds	r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4413      	add	r3, r2
 800586c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	4413      	add	r3, r2
 8005882:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	0a1a      	lsrs	r2, r3, #8
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4413      	add	r3, r2
 800589c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	0c1a      	lsrs	r2, r3, #16
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3302      	adds	r3, #2
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0e1a      	lsrs	r2, r3, #24
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3303      	adds	r3, #3
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	3304      	adds	r3, #4
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	0a1a      	lsrs	r2, r3, #8
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3305      	adds	r3, #5
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	4413      	add	r3, r2
 8005902:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0c1a      	lsrs	r2, r3, #16
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	3306      	adds	r3, #6
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	4413      	add	r3, r2
 800591c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	0e1a      	lsrs	r2, r3, #24
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	3307      	adds	r3, #7
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0220 	orr.w	r2, r2, #32
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e007      	b.n	8005954 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0220 	orr.w	r2, r2, #32
 8005952:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	e006      	b.n	8005966 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005982:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d002      	beq.n	8005990 <HAL_CAN_ActivateNotification+0x1e>
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d109      	bne.n	80059a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6959      	ldr	r1, [r3, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e006      	b.n	80059b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
  }
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08a      	sub	sp, #40	; 0x28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07c      	beq.n	8005afe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d023      	beq.n	8005a56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2201      	movs	r2, #1
 8005a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fe f927 	bl	8003c74 <HAL_CAN_TxMailbox0CompleteCallback>
 8005a26:	e016      	b.n	8005a56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	e00c      	b.n	8005a56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	e002      	b.n	8005a56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fe f91d 	bl	8003c90 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d024      	beq.n	8005aaa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fe f919 	bl	8003cac <HAL_CAN_TxMailbox1CompleteCallback>
 8005a7a:	e016      	b.n	8005aaa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e00c      	b.n	8005aaa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d004      	beq.n	8005aa4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	e002      	b.n	8005aaa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fe f90f 	bl	8003cc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d024      	beq.n	8005afe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005abc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fe f90b 	bl	8003ce4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005ace:	e016      	b.n	8005afe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae2:	e00c      	b.n	8005afe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	e002      	b.n	8005afe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7fe f901 	bl	8003d00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2210      	movs	r2, #16
 8005b20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8f4 	bl	8005d2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fe f8dd 	bl	8003d1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8cc 	bl	8005d40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fe f8b9 	bl	8003d38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2210      	movs	r2, #16
 8005be0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8b6 	bl	8005d54 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f8af 	bl	8005d68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d07b      	beq.n	8005d0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d072      	beq.n	8005d04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d043      	beq.n	8005d04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d03e      	beq.n	8005d04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c8c:	2b60      	cmp	r3, #96	; 0x60
 8005c8e:	d02b      	beq.n	8005ce8 <HAL_CAN_IRQHandler+0x32a>
 8005c90:	2b60      	cmp	r3, #96	; 0x60
 8005c92:	d82e      	bhi.n	8005cf2 <HAL_CAN_IRQHandler+0x334>
 8005c94:	2b50      	cmp	r3, #80	; 0x50
 8005c96:	d022      	beq.n	8005cde <HAL_CAN_IRQHandler+0x320>
 8005c98:	2b50      	cmp	r3, #80	; 0x50
 8005c9a:	d82a      	bhi.n	8005cf2 <HAL_CAN_IRQHandler+0x334>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d019      	beq.n	8005cd4 <HAL_CAN_IRQHandler+0x316>
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d826      	bhi.n	8005cf2 <HAL_CAN_IRQHandler+0x334>
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	d010      	beq.n	8005cca <HAL_CAN_IRQHandler+0x30c>
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	d822      	bhi.n	8005cf2 <HAL_CAN_IRQHandler+0x334>
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d002      	beq.n	8005cb6 <HAL_CAN_IRQHandler+0x2f8>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d005      	beq.n	8005cc0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005cb4:	e01d      	b.n	8005cf2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	f043 0308 	orr.w	r3, r3, #8
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005cbe:	e019      	b.n	8005cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	f043 0310 	orr.w	r3, r3, #16
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005cc8:	e014      	b.n	8005cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	f043 0320 	orr.w	r3, r3, #32
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005cd2:	e00f      	b.n	8005cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005cdc:	e00a      	b.n	8005cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ce6:	e005      	b.n	8005cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005cf0:	e000      	b.n	8005cf4 <HAL_CAN_IRQHandler+0x336>
            break;
 8005cf2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005d02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f82c 	bl	8005d7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005d24:	bf00      	nop
 8005d26:	3728      	adds	r7, #40	; 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005dac:	4013      	ands	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	60d3      	str	r3, [r2, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	e000ed00 	.word	0xe000ed00
 8005dd4:	05fa0000 	.word	0x05fa0000

08005dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 0307 	and.w	r3, r3, #7
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	e000ed00 	.word	0xe000ed00

08005df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	db0b      	blt.n	8005e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	f003 021f 	and.w	r2, r3, #31
 8005e0c:	4907      	ldr	r1, [pc, #28]	; (8005e2c <__NVIC_EnableIRQ+0x38>)
 8005e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2001      	movs	r0, #1
 8005e16:	fa00 f202 	lsl.w	r2, r0, r2
 8005e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000e100 	.word	0xe000e100

08005e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db0a      	blt.n	8005e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	490c      	ldr	r1, [pc, #48]	; (8005e7c <__NVIC_SetPriority+0x4c>)
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	0112      	lsls	r2, r2, #4
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	440b      	add	r3, r1
 8005e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e58:	e00a      	b.n	8005e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4908      	ldr	r1, [pc, #32]	; (8005e80 <__NVIC_SetPriority+0x50>)
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	3b04      	subs	r3, #4
 8005e68:	0112      	lsls	r2, r2, #4
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	761a      	strb	r2, [r3, #24]
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	e000e100 	.word	0xe000e100
 8005e80:	e000ed00 	.word	0xe000ed00

08005e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f1c3 0307 	rsb	r3, r3, #7
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	bf28      	it	cs
 8005ea2:	2304      	movcs	r3, #4
 8005ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d902      	bls.n	8005eb4 <NVIC_EncodePriority+0x30>
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3b03      	subs	r3, #3
 8005eb2:	e000      	b.n	8005eb6 <NVIC_EncodePriority+0x32>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	43d9      	mvns	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005edc:	4313      	orrs	r3, r2
         );
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3724      	adds	r7, #36	; 0x24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff ff4c 	bl	8005d90 <__NVIC_SetPriorityGrouping>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f12:	f7ff ff61 	bl	8005dd8 <__NVIC_GetPriorityGrouping>
 8005f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7ff ffb1 	bl	8005e84 <NVIC_EncodePriority>
 8005f22:	4602      	mov	r2, r0
 8005f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff ff80 	bl	8005e30 <__NVIC_SetPriority>
}
 8005f30:	bf00      	nop
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff ff54 	bl	8005df4 <__NVIC_EnableIRQ>
}
 8005f4c:	bf00      	nop
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f60:	f7ff f894 	bl	800508c <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e099      	b.n	80060a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f90:	e00f      	b.n	8005fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f92:	f7ff f87b 	bl	800508c <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b05      	cmp	r3, #5
 8005f9e:	d908      	bls.n	8005fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2203      	movs	r2, #3
 8005faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e078      	b.n	80060a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e8      	bne.n	8005f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4b38      	ldr	r3, [pc, #224]	; (80060ac <HAL_DMA_Init+0x158>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b04      	cmp	r3, #4
 800600a:	d107      	bne.n	800601c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	4313      	orrs	r3, r2
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0307 	bic.w	r3, r3, #7
 8006032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b04      	cmp	r3, #4
 8006044:	d117      	bne.n	8006076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb15 	bl	8006688 <DMA_CheckFifoParam>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006072:	2301      	movs	r3, #1
 8006074:	e016      	b.n	80060a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 facc 	bl	800661c <DMA_CalcBaseAndBitshift>
 8006084:	4603      	mov	r3, r0
 8006086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	223f      	movs	r2, #63	; 0x3f
 800608e:	409a      	lsls	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	e010803f 	.word	0xe010803f

080060b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_DMA_Start_IT+0x26>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e048      	b.n	8006168 <HAL_DMA_Start_IT+0xb8>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d137      	bne.n	800615a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fa5e 	bl	80065c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	223f      	movs	r2, #63	; 0x3f
 800610a:	409a      	lsls	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0216 	orr.w	r2, r2, #22
 800611e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800612e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0208 	orr.w	r2, r2, #8
 8006146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e005      	b.n	8006166 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006162:	2302      	movs	r3, #2
 8006164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800617e:	f7fe ff85 	bl	800508c <HAL_GetTick>
 8006182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d008      	beq.n	80061a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e052      	b.n	8006248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0216 	bic.w	r2, r2, #22
 80061b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <HAL_DMA_Abort+0x62>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0208 	bic.w	r2, r2, #8
 80061e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061f2:	e013      	b.n	800621c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061f4:	f7fe ff4a 	bl	800508c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d90c      	bls.n	800621c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2203      	movs	r2, #3
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e015      	b.n	8006248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e4      	bne.n	80061f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622e:	223f      	movs	r2, #63	; 0x3f
 8006230:	409a      	lsls	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d004      	beq.n	800626e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e00c      	b.n	8006288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2205      	movs	r2, #5
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80062a0:	4b8e      	ldr	r3, [pc, #568]	; (80064dc <HAL_DMA_IRQHandler+0x248>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a8e      	ldr	r2, [pc, #568]	; (80064e0 <HAL_DMA_IRQHandler+0x24c>)
 80062a6:	fba2 2303 	umull	r2, r3, r2, r3
 80062aa:	0a9b      	lsrs	r3, r3, #10
 80062ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	2208      	movs	r2, #8
 80062c0:	409a      	lsls	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01a      	beq.n	8006300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d013      	beq.n	8006300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0204 	bic.w	r2, r2, #4
 80062e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	2208      	movs	r2, #8
 80062ee:	409a      	lsls	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006304:	2201      	movs	r2, #1
 8006306:	409a      	lsls	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d012      	beq.n	8006336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00b      	beq.n	8006336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006322:	2201      	movs	r2, #1
 8006324:	409a      	lsls	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	f043 0202 	orr.w	r2, r3, #2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633a:	2204      	movs	r2, #4
 800633c:	409a      	lsls	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d012      	beq.n	800636c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006358:	2204      	movs	r2, #4
 800635a:	409a      	lsls	r2, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f043 0204 	orr.w	r2, r3, #4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	2210      	movs	r2, #16
 8006372:	409a      	lsls	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d043      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03c      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	2210      	movs	r2, #16
 8006390:	409a      	lsls	r2, r3
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d018      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d024      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	e01f      	b.n	8006404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	e016      	b.n	8006404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d107      	bne.n	80063f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0208 	bic.w	r2, r2, #8
 80063f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	2220      	movs	r2, #32
 800640a:	409a      	lsls	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 808f 	beq.w	8006534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8087 	beq.w	8006534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642a:	2220      	movs	r2, #32
 800642c:	409a      	lsls	r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b05      	cmp	r3, #5
 800643c:	d136      	bne.n	80064ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0216 	bic.w	r2, r2, #22
 800644c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695a      	ldr	r2, [r3, #20]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800645c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <HAL_DMA_IRQHandler+0x1da>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0208 	bic.w	r2, r2, #8
 800647c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	223f      	movs	r2, #63	; 0x3f
 8006484:	409a      	lsls	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d07e      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
        }
        return;
 80064aa:	e079      	b.n	80065a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01d      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
 80064d8:	e02c      	b.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
 80064da:	bf00      	nop
 80064dc:	20000004 	.word	0x20000004
 80064e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d023      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
 80064f4:	e01e      	b.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0210 	bic.w	r2, r2, #16
 8006512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	2b00      	cmp	r3, #0
 800653a:	d032      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d022      	beq.n	800658e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2205      	movs	r2, #5
 800654c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	3301      	adds	r3, #1
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	d307      	bcc.n	800657c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f2      	bne.n	8006560 <HAL_DMA_IRQHandler+0x2cc>
 800657a:	e000      	b.n	800657e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800657c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
 800659e:	e000      	b.n	80065a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80065a0:	bf00      	nop
    }
  }
}
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d108      	bne.n	8006600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80065fe:	e007      	b.n	8006610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	60da      	str	r2, [r3, #12]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	3b10      	subs	r3, #16
 800662c:	4a13      	ldr	r2, [pc, #76]	; (800667c <DMA_CalcBaseAndBitshift+0x60>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	091b      	lsrs	r3, r3, #4
 8006634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006636:	4a12      	ldr	r2, [pc, #72]	; (8006680 <DMA_CalcBaseAndBitshift+0x64>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b03      	cmp	r3, #3
 8006648:	d908      	bls.n	800665c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <DMA_CalcBaseAndBitshift+0x68>)
 8006652:	4013      	ands	r3, r2
 8006654:	1d1a      	adds	r2, r3, #4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	659a      	str	r2, [r3, #88]	; 0x58
 800665a:	e006      	b.n	800666a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <DMA_CalcBaseAndBitshift+0x68>)
 8006664:	4013      	ands	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	aaaaaaab 	.word	0xaaaaaaab
 8006680:	080222ec 	.word	0x080222ec
 8006684:	fffffc00 	.word	0xfffffc00

08006688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11f      	bne.n	80066e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d856      	bhi.n	8006756 <DMA_CheckFifoParam+0xce>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <DMA_CheckFifoParam+0x28>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066d3 	.word	0x080066d3
 80066b8:	080066c1 	.word	0x080066c1
 80066bc:	08006757 	.word	0x08006757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d046      	beq.n	800675a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066d0:	e043      	b.n	800675a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066da:	d140      	bne.n	800675e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066e0:	e03d      	b.n	800675e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ea:	d121      	bne.n	8006730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d837      	bhi.n	8006762 <DMA_CheckFifoParam+0xda>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <DMA_CheckFifoParam+0x70>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006709 	.word	0x08006709
 80066fc:	0800670f 	.word	0x0800670f
 8006700:	08006709 	.word	0x08006709
 8006704:	08006721 	.word	0x08006721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
      break;
 800670c:	e030      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d025      	beq.n	8006766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800671e:	e022      	b.n	8006766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006728:	d11f      	bne.n	800676a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800672e:	e01c      	b.n	800676a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d903      	bls.n	800673e <DMA_CheckFifoParam+0xb6>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d003      	beq.n	8006744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800673c:	e018      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
      break;
 8006742:	e015      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	e00b      	b.n	800676e <DMA_CheckFifoParam+0xe6>
      break;
 8006756:	bf00      	nop
 8006758:	e00a      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      break;
 800675a:	bf00      	nop
 800675c:	e008      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      break;
 800675e:	bf00      	nop
 8006760:	e006      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      break;
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      break;   
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <DMA_CheckFifoParam+0xe8>
      break;
 800676e:	bf00      	nop
    }
  } 
  
  return status; 
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop

08006780 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e06a      	b.n	8006868 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2223      	movs	r2, #35	; 0x23
 80067a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fc fc8d 	bl	80030c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067aa:	4b31      	ldr	r3, [pc, #196]	; (8006870 <HAL_ETH_Init+0xf0>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	4a30      	ldr	r2, [pc, #192]	; (8006870 <HAL_ETH_Init+0xf0>)
 80067b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067b4:	6453      	str	r3, [r2, #68]	; 0x44
 80067b6:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <HAL_ETH_Init+0xf0>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067be:	60bb      	str	r3, [r7, #8]
 80067c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80067c2:	4b2c      	ldr	r3, [pc, #176]	; (8006874 <HAL_ETH_Init+0xf4>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4a2b      	ldr	r2, [pc, #172]	; (8006874 <HAL_ETH_Init+0xf4>)
 80067c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80067cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <HAL_ETH_Init+0xf4>)
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	4927      	ldr	r1, [pc, #156]	; (8006874 <HAL_ETH_Init+0xf4>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <HAL_ETH_Init+0xf4>)
 80067de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067f8:	f7fe fc48 	bl	800508c <HAL_GetTick>
 80067fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80067fe:	e011      	b.n	8006824 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006800:	f7fe fc44 	bl	800508c <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800680e:	d909      	bls.n	8006824 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2204      	movs	r2, #4
 8006814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	22e0      	movs	r2, #224	; 0xe0
 800681c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e021      	b.n	8006868 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e4      	bne.n	8006800 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f958 	bl	8006aec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9ff 	bl	8006c40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa55 	bl	8006cf2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	461a      	mov	r2, r3
 800684e:	2100      	movs	r1, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9bd 	bl	8006bd0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2210      	movs	r2, #16
 8006862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40023800 	.word	0x40023800
 8006874:	40013800 	.word	0x40013800

08006878 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4b51      	ldr	r3, [pc, #324]	; (80069d4 <ETH_SetMACConfig+0x15c>)
 800688e:	4013      	ands	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	7c1b      	ldrb	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <ETH_SetMACConfig+0x28>
 800689a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800689e:	e000      	b.n	80068a2 <ETH_SetMACConfig+0x2a>
 80068a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	7c5b      	ldrb	r3, [r3, #17]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <ETH_SetMACConfig+0x38>
 80068aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068ae:	e000      	b.n	80068b2 <ETH_SetMACConfig+0x3a>
 80068b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	7fdb      	ldrb	r3, [r3, #31]
 80068be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80068c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80068c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	7f92      	ldrb	r2, [r2, #30]
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	d102      	bne.n	80068d6 <ETH_SetMACConfig+0x5e>
 80068d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068d4:	e000      	b.n	80068d8 <ETH_SetMACConfig+0x60>
 80068d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80068d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	7f1b      	ldrb	r3, [r3, #28]
 80068de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80068e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80068e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	791b      	ldrb	r3, [r3, #4]
 80068ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80068ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d102      	bne.n	8006900 <ETH_SetMACConfig+0x88>
 80068fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068fe:	e000      	b.n	8006902 <ETH_SetMACConfig+0x8a>
 8006900:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006902:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	7bdb      	ldrb	r3, [r3, #15]
 8006908:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800690a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006910:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006918:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800691a:	4313      	orrs	r3, r2
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006932:	2001      	movs	r0, #1
 8006934:	f7fe fbb6 	bl	80050a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006956:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800695e:	2a00      	cmp	r2, #0
 8006960:	d101      	bne.n	8006966 <ETH_SetMACConfig+0xee>
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	e000      	b.n	8006968 <ETH_SetMACConfig+0xf0>
 8006966:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006968:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800696e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8006976:	2a01      	cmp	r2, #1
 8006978:	d101      	bne.n	800697e <ETH_SetMACConfig+0x106>
 800697a:	2208      	movs	r2, #8
 800697c:	e000      	b.n	8006980 <ETH_SetMACConfig+0x108>
 800697e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006980:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8006988:	2a01      	cmp	r2, #1
 800698a:	d101      	bne.n	8006990 <ETH_SetMACConfig+0x118>
 800698c:	2204      	movs	r2, #4
 800698e:	e000      	b.n	8006992 <ETH_SetMACConfig+0x11a>
 8006990:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006992:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800699a:	2a01      	cmp	r2, #1
 800699c:	d101      	bne.n	80069a2 <ETH_SetMACConfig+0x12a>
 800699e:	2202      	movs	r2, #2
 80069a0:	e000      	b.n	80069a4 <ETH_SetMACConfig+0x12c>
 80069a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069a4:	4313      	orrs	r3, r2
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80069bc:	2001      	movs	r0, #1
 80069be:	f7fe fb71 	bl	80050a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	619a      	str	r2, [r3, #24]
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	ff20810f 	.word	0xff20810f

080069d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4b3d      	ldr	r3, [pc, #244]	; (8006ae8 <ETH_SetDMAConfig+0x110>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	7b1b      	ldrb	r3, [r3, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <ETH_SetDMAConfig+0x2c>
 80069fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a02:	e000      	b.n	8006a06 <ETH_SetDMAConfig+0x2e>
 8006a04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	7b5b      	ldrb	r3, [r3, #13]
 8006a0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	7f52      	ldrb	r2, [r2, #29]
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d102      	bne.n	8006a1c <ETH_SetDMAConfig+0x44>
 8006a16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a1a:	e000      	b.n	8006a1e <ETH_SetDMAConfig+0x46>
 8006a1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	7b9b      	ldrb	r3, [r3, #14]
 8006a24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	7f1b      	ldrb	r3, [r3, #28]
 8006a32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	7f9b      	ldrb	r3, [r3, #30]
 8006a3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f7fe fb18 	bl	80050a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	791b      	ldrb	r3, [r3, #4]
 8006a86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006a8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006a92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006a98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aa0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006aa2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006aaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006ab0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006abe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006acc:	2001      	movs	r0, #1
 8006ace:	f7fe fae9 	bl	80050a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6013      	str	r3, [r2, #0]
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	f8de3f23 	.word	0xf8de3f23

08006aec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b0a6      	sub	sp, #152	; 0x98
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b00:	2300      	movs	r3, #0
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006b4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006b60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fe86 	bl	8006878 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ba0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ba6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006bbc:	f107 0308 	add.w	r3, r7, #8
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ff08 	bl	80069d8 <ETH_SetDMAConfig>
}
 8006bc8:	bf00      	nop
 8006bca:	3798      	adds	r7, #152	; 0x98
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3305      	adds	r3, #5
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	3204      	adds	r2, #4
 8006be8:	7812      	ldrb	r2, [r2, #0]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <ETH_MACAddressConfig+0x68>)
 8006bf2:	4413      	add	r3, r2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3303      	adds	r3, #3
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	061a      	lsls	r2, r3, #24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3302      	adds	r3, #2
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	4313      	orrs	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <ETH_MACAddressConfig+0x6c>)
 8006c22:	4413      	add	r3, r2
 8006c24:	461a      	mov	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6013      	str	r3, [r2, #0]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40028040 	.word	0x40028040
 8006c3c:	40028044 	.word	0x40028044

08006c40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e03e      	b.n	8006ccc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68d9      	ldr	r1, [r3, #12]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	440b      	add	r3, r1
 8006c5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	3206      	adds	r2, #6
 8006c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d80c      	bhi.n	8006cb0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68d9      	ldr	r1, [r3, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	440b      	add	r3, r1
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e004      	b.n	8006cba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d9bd      	bls.n	8006c4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce4:	611a      	str	r2, [r3, #16]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e046      	b.n	8006d8e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6919      	ldr	r1, [r3, #16]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	440b      	add	r3, r1
 8006d10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d3c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006d44:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	3212      	adds	r2, #18
 8006d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d80c      	bhi.n	8006d7e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6919      	ldr	r1, [r3, #16]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	440b      	add	r3, r1
 8006d76:	461a      	mov	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	60da      	str	r2, [r3, #12]
 8006d7c:	e004      	b.n	8006d88 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	461a      	mov	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d9b5      	bls.n	8006d00 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbe:	60da      	str	r2, [r3, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b089      	sub	sp, #36	; 0x24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006dde:	2300      	movs	r3, #0
 8006de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	e175      	b.n	80070d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006dec:	2201      	movs	r2, #1
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f040 8164 	bne.w	80070d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d005      	beq.n	8006e22 <HAL_GPIO_Init+0x56>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d130      	bne.n	8006e84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4013      	ands	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e58:	2201      	movs	r2, #1
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	43db      	mvns	r3, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4013      	ands	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 0201 	and.w	r2, r3, #1
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	fa02 f303 	lsl.w	r3, r2, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d017      	beq.n	8006ec0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d123      	bne.n	8006f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	08da      	lsrs	r2, r3, #3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3208      	adds	r2, #8
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	220f      	movs	r2, #15
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	4013      	ands	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	08da      	lsrs	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3208      	adds	r2, #8
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	2203      	movs	r2, #3
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f003 0203 	and.w	r2, r3, #3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80be 	beq.w	80070d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f56:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_GPIO_Init+0x324>)
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <HAL_GPIO_Init+0x324>)
 8006f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f60:	6453      	str	r3, [r2, #68]	; 0x44
 8006f62:	4b63      	ldr	r3, [pc, #396]	; (80070f0 <HAL_GPIO_Init+0x324>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006f6e:	4a61      	ldr	r2, [pc, #388]	; (80070f4 <HAL_GPIO_Init+0x328>)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	3302      	adds	r3, #2
 8006f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	220f      	movs	r2, #15
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a58      	ldr	r2, [pc, #352]	; (80070f8 <HAL_GPIO_Init+0x32c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d037      	beq.n	800700a <HAL_GPIO_Init+0x23e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a57      	ldr	r2, [pc, #348]	; (80070fc <HAL_GPIO_Init+0x330>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d031      	beq.n	8007006 <HAL_GPIO_Init+0x23a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a56      	ldr	r2, [pc, #344]	; (8007100 <HAL_GPIO_Init+0x334>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02b      	beq.n	8007002 <HAL_GPIO_Init+0x236>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a55      	ldr	r2, [pc, #340]	; (8007104 <HAL_GPIO_Init+0x338>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d025      	beq.n	8006ffe <HAL_GPIO_Init+0x232>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a54      	ldr	r2, [pc, #336]	; (8007108 <HAL_GPIO_Init+0x33c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01f      	beq.n	8006ffa <HAL_GPIO_Init+0x22e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a53      	ldr	r2, [pc, #332]	; (800710c <HAL_GPIO_Init+0x340>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d019      	beq.n	8006ff6 <HAL_GPIO_Init+0x22a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a52      	ldr	r2, [pc, #328]	; (8007110 <HAL_GPIO_Init+0x344>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <HAL_GPIO_Init+0x226>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a51      	ldr	r2, [pc, #324]	; (8007114 <HAL_GPIO_Init+0x348>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00d      	beq.n	8006fee <HAL_GPIO_Init+0x222>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a50      	ldr	r2, [pc, #320]	; (8007118 <HAL_GPIO_Init+0x34c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <HAL_GPIO_Init+0x21e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4f      	ldr	r2, [pc, #316]	; (800711c <HAL_GPIO_Init+0x350>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d101      	bne.n	8006fe6 <HAL_GPIO_Init+0x21a>
 8006fe2:	2309      	movs	r3, #9
 8006fe4:	e012      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	e010      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006fea:	2308      	movs	r3, #8
 8006fec:	e00e      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006fee:	2307      	movs	r3, #7
 8006ff0:	e00c      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ff2:	2306      	movs	r3, #6
 8006ff4:	e00a      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ff6:	2305      	movs	r3, #5
 8006ff8:	e008      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	e006      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ffe:	2303      	movs	r3, #3
 8007000:	e004      	b.n	800700c <HAL_GPIO_Init+0x240>
 8007002:	2302      	movs	r3, #2
 8007004:	e002      	b.n	800700c <HAL_GPIO_Init+0x240>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <HAL_GPIO_Init+0x240>
 800700a:	2300      	movs	r3, #0
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	f002 0203 	and.w	r2, r2, #3
 8007012:	0092      	lsls	r2, r2, #2
 8007014:	4093      	lsls	r3, r2
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800701c:	4935      	ldr	r1, [pc, #212]	; (80070f4 <HAL_GPIO_Init+0x328>)
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	3302      	adds	r3, #2
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800702a:	4b3d      	ldr	r3, [pc, #244]	; (8007120 <HAL_GPIO_Init+0x354>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	43db      	mvns	r3, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4013      	ands	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800704e:	4a34      	ldr	r2, [pc, #208]	; (8007120 <HAL_GPIO_Init+0x354>)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007054:	4b32      	ldr	r3, [pc, #200]	; (8007120 <HAL_GPIO_Init+0x354>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	43db      	mvns	r3, r3
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4013      	ands	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007078:	4a29      	ldr	r2, [pc, #164]	; (8007120 <HAL_GPIO_Init+0x354>)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800707e:	4b28      	ldr	r3, [pc, #160]	; (8007120 <HAL_GPIO_Init+0x354>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	43db      	mvns	r3, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070a2:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <HAL_GPIO_Init+0x354>)
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_GPIO_Init+0x354>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	43db      	mvns	r3, r3
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4013      	ands	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <HAL_GPIO_Init+0x354>)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b0f      	cmp	r3, #15
 80070dc:	f67f ae86 	bls.w	8006dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3724      	adds	r7, #36	; 0x24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40023800 	.word	0x40023800
 80070f4:	40013800 	.word	0x40013800
 80070f8:	40020000 	.word	0x40020000
 80070fc:	40020400 	.word	0x40020400
 8007100:	40020800 	.word	0x40020800
 8007104:	40020c00 	.word	0x40020c00
 8007108:	40021000 	.word	0x40021000
 800710c:	40021400 	.word	0x40021400
 8007110:	40021800 	.word	0x40021800
 8007114:	40021c00 	.word	0x40021c00
 8007118:	40022000 	.word	0x40022000
 800711c:	40022400 	.word	0x40022400
 8007120:	40013c00 	.word	0x40013c00

08007124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	807b      	strh	r3, [r7, #2]
 8007130:	4613      	mov	r3, r2
 8007132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007134:	787b      	ldrb	r3, [r7, #1]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800713a:	887a      	ldrh	r2, [r7, #2]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007140:	e003      	b.n	800714a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007142:	887b      	ldrh	r3, [r7, #2]
 8007144:	041a      	lsls	r2, r3, #16
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	619a      	str	r2, [r3, #24]
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007168:	887a      	ldrh	r2, [r7, #2]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4013      	ands	r3, r2
 800716e:	041a      	lsls	r2, r3, #16
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	43d9      	mvns	r1, r3
 8007174:	887b      	ldrh	r3, [r7, #2]
 8007176:	400b      	ands	r3, r1
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	619a      	str	r2, [r3, #24]
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800718a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800718c:	b08f      	sub	sp, #60	; 0x3c
 800718e:	af0a      	add	r7, sp, #40	; 0x28
 8007190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e116      	b.n	80073ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f00b f8ea 	bl	8012390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f004 fc2b 	bl	800ba36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	687e      	ldr	r6, [r7, #4]
 80071e8:	466d      	mov	r5, sp
 80071ea:	f106 0410 	add.w	r4, r6, #16
 80071ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80071fe:	1d33      	adds	r3, r6, #4
 8007200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007202:	6838      	ldr	r0, [r7, #0]
 8007204:	f004 fb0c 	bl	800b820 <USB_CoreInit>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2202      	movs	r2, #2
 8007212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e0d7      	b.n	80073ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2100      	movs	r1, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f004 fc19 	bl	800ba58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
 800722a:	e04a      	b.n	80072c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800722c:	7bfa      	ldrb	r2, [r7, #15]
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	333d      	adds	r3, #61	; 0x3d
 800723c:	2201      	movs	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007240:	7bfa      	ldrb	r2, [r7, #15]
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4613      	mov	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	333c      	adds	r3, #60	; 0x3c
 8007250:	7bfa      	ldrb	r2, [r7, #15]
 8007252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007254:	7bfa      	ldrb	r2, [r7, #15]
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	b298      	uxth	r0, r3
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	3344      	adds	r3, #68	; 0x44
 8007268:	4602      	mov	r2, r0
 800726a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800726c:	7bfa      	ldrb	r2, [r7, #15]
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	3340      	adds	r3, #64	; 0x40
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007280:	7bfa      	ldrb	r2, [r7, #15]
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	3348      	adds	r3, #72	; 0x48
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007294:	7bfa      	ldrb	r2, [r7, #15]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	334c      	adds	r3, #76	; 0x4c
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072a8:	7bfa      	ldrb	r2, [r7, #15]
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	4613      	mov	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	3354      	adds	r3, #84	; 0x54
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	3301      	adds	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
 80072c2:	7bfa      	ldrb	r2, [r7, #15]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d3af      	bcc.n	800722c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e044      	b.n	800735c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80072d2:	7bfa      	ldrb	r2, [r7, #15]
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072fe:	7bfa      	ldrb	r2, [r7, #15]
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800732a:	7bfa      	ldrb	r2, [r7, #15]
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007340:	7bfa      	ldrb	r2, [r7, #15]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	3301      	adds	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	7bfa      	ldrb	r2, [r7, #15]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d3b5      	bcc.n	80072d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	687e      	ldr	r6, [r7, #4]
 800736e:	466d      	mov	r5, sp
 8007370:	f106 0410 	add.w	r4, r6, #16
 8007374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800737a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800737c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007380:	e885 0003 	stmia.w	r5, {r0, r1}
 8007384:	1d33      	adds	r3, r6, #4
 8007386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007388:	6838      	ldr	r0, [r7, #0]
 800738a:	f004 fbb1 	bl	800baf0 <USB_DevInit>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e014      	b.n	80073ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d102      	bne.n	80073be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f97b 	bl	80086b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f005 fcff 	bl	800cdc6 <USB_DevDisconnect>

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_PCD_Start+0x16>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e012      	b.n	800740e <HAL_PCD_Start+0x3c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f004 fb0d 	bl	800ba14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f005 fcc0 	bl	800cd84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007416:	b590      	push	{r4, r7, lr}
 8007418:	b08d      	sub	sp, #52	; 0x34
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f005 fd7e 	bl	800cf2e <USB_GetMode>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 84b7 	bne.w	8007da8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f005 fce2 	bl	800ce08 <USB_ReadInterrupts>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 84ad 	beq.w	8007da6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	0a1b      	lsrs	r3, r3, #8
 8007456:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f005 fccf 	bl	800ce08 <USB_ReadInterrupts>
 800746a:	4603      	mov	r3, r0
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d107      	bne.n	8007484 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695a      	ldr	r2, [r3, #20]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f002 0202 	and.w	r2, r2, #2
 8007482:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4618      	mov	r0, r3
 800748a:	f005 fcbd 	bl	800ce08 <USB_ReadInterrupts>
 800748e:	4603      	mov	r3, r0
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b10      	cmp	r3, #16
 8007496:	d161      	bne.n	800755c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0210 	bic.w	r2, r2, #16
 80074a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	4613      	mov	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	0c5b      	lsrs	r3, r3, #17
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d124      	bne.n	800751e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d035      	beq.n	800754c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	6a38      	ldr	r0, [r7, #32]
 80074f4:	f005 faf4 	bl	800cae0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	091b      	lsrs	r3, r3, #4
 8007500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007504:	441a      	add	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007516:	441a      	add	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
 800751c:	e016      	b.n	800754c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	0c5b      	lsrs	r3, r3, #17
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	2b06      	cmp	r3, #6
 8007528:	d110      	bne.n	800754c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007530:	2208      	movs	r2, #8
 8007532:	4619      	mov	r1, r3
 8007534:	6a38      	ldr	r0, [r7, #32]
 8007536:	f005 fad3 	bl	800cae0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	091b      	lsrs	r3, r3, #4
 8007542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007546:	441a      	add	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0210 	orr.w	r2, r2, #16
 800755a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f005 fc51 	bl	800ce08 <USB_ReadInterrupts>
 8007566:	4603      	mov	r3, r0
 8007568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800756c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007570:	f040 80a7 	bne.w	80076c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f005 fc56 	bl	800ce2e <USB_ReadDevAllOutEpInterrupt>
 8007582:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007584:	e099      	b.n	80076ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 808e 	beq.w	80076ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f005 fc7a 	bl	800ce96 <USB_ReadDevOutEPInterrupt>
 80075a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00c      	beq.n	80075c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ba:	461a      	mov	r2, r3
 80075bc:	2301      	movs	r3, #1
 80075be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80075c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fef0 	bl	80083a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	461a      	mov	r2, r3
 80075e0:	2308      	movs	r3, #8
 80075e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80075e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 ffc6 	bl	8008578 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	2310      	movs	r3, #16
 8007606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d030      	beq.n	8007674 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d109      	bne.n	8007632 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800762c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007630:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007634:	4613      	mov	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	78db      	ldrb	r3, [r3, #3]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d108      	bne.n	8007662 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2200      	movs	r2, #0
 8007654:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	b2db      	uxtb	r3, r3
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f00a ffcb 	bl	80125f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766e:	461a      	mov	r2, r3
 8007670:	2302      	movs	r3, #2
 8007672:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768a:	461a      	mov	r2, r3
 800768c:	2320      	movs	r3, #32
 800768e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	3301      	adds	r3, #1
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f47f af62 	bne.w	8007586 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f005 fb9e 	bl	800ce08 <USB_ReadInterrupts>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076d6:	f040 80db 	bne.w	8007890 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f005 fbbf 	bl	800ce62 <USB_ReadDevAllInEpInterrupt>
 80076e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80076ea:	e0cd      	b.n	8007888 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80c2 	beq.w	800787c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f005 fbe5 	bl	800ced2 <USB_ReadDevInEPInterrupt>
 8007708:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d057      	beq.n	80077c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	2201      	movs	r2, #1
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	43db      	mvns	r3, r3
 800772e:	69f9      	ldr	r1, [r7, #28]
 8007730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007734:	4013      	ands	r3, r2
 8007736:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007744:	461a      	mov	r2, r3
 8007746:	2301      	movs	r3, #1
 8007748:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d132      	bne.n	80077b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007756:	4613      	mov	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	334c      	adds	r3, #76	; 0x4c
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4403      	add	r3, r0
 8007772:	3348      	adds	r3, #72	; 0x48
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4419      	add	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4403      	add	r3, r0
 8007786:	334c      	adds	r3, #76	; 0x4c
 8007788:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d113      	bne.n	80077b8 <HAL_PCD_IRQHandler+0x3a2>
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007794:	4613      	mov	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	3354      	adds	r3, #84	; 0x54
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d108      	bne.n	80077b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077b0:	461a      	mov	r2, r3
 80077b2:	2101      	movs	r1, #1
 80077b4:	f005 fbee 	bl	800cf94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f00a fe95 	bl	80124ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d008      	beq.n	80077e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077da:	461a      	mov	r2, r3
 80077dc:	2308      	movs	r3, #8
 80077de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f6:	461a      	mov	r2, r3
 80077f8:	2310      	movs	r3, #16
 80077fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	d008      	beq.n	8007818 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007812:	461a      	mov	r2, r3
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d023      	beq.n	800786a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007824:	6a38      	ldr	r0, [r7, #32]
 8007826:	f004 fac1 	bl	800bdac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800782a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782c:	4613      	mov	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	3338      	adds	r3, #56	; 0x38
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	3304      	adds	r3, #4
 800783c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	78db      	ldrb	r3, [r3, #3]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d108      	bne.n	8007858 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	b2db      	uxtb	r3, r3
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f00a fee2 	bl	801261c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	461a      	mov	r2, r3
 8007866:	2302      	movs	r3, #2
 8007868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fd08 	bl	800828c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	3301      	adds	r3, #1
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	f47f af2e 	bne.w	80076ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f005 fab7 	bl	800ce08 <USB_ReadInterrupts>
 800789a:	4603      	mov	r3, r0
 800789c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a4:	d122      	bne.n	80078ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d108      	bne.n	80078d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f00b f85c 	bl	801298c <HAL_PCDEx_LPM_Callback>
 80078d4:	e002      	b.n	80078dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f00a fe80 	bl	80125dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80078ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f005 fa89 	bl	800ce08 <USB_ReadInterrupts>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007900:	d112      	bne.n	8007928 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d102      	bne.n	8007918 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f00a fe3c 	bl	8012590 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007926:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f005 fa6b 	bl	800ce08 <USB_ReadInterrupts>
 8007932:	4603      	mov	r3, r0
 8007934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800793c:	d121      	bne.n	8007982 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695a      	ldr	r2, [r3, #20]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800794c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d111      	bne.n	800797c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	089b      	lsrs	r3, r3, #2
 8007968:	f003 020f 	and.w	r2, r3, #15
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007972:	2101      	movs	r1, #1
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f00b f809 	bl	801298c <HAL_PCDEx_LPM_Callback>
 800797a:	e002      	b.n	8007982 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f00a fe07 	bl	8012590 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f005 fa3e 	bl	800ce08 <USB_ReadInterrupts>
 800798c:	4603      	mov	r3, r0
 800798e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007996:	f040 80b7 	bne.w	8007b08 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2110      	movs	r1, #16
 80079b4:	4618      	mov	r0, r3
 80079b6:	f004 f9f9 	bl	800bdac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079be:	e046      	b.n	8007a4e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	461a      	mov	r2, r3
 80079ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	461a      	mov	r2, r3
 8007a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d3b3      	bcc.n	80079c0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007a6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d016      	beq.n	8007aa2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a84:	f043 030b 	orr.w	r3, r3, #11
 8007a88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a9a:	f043 030b 	orr.w	r3, r3, #11
 8007a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8007aa0:	e015      	b.n	8007ace <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f242 032b 	movw	r3, #8235	; 0x202b
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	69fa      	ldr	r2, [r7, #28]
 8007ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ac8:	f043 030b 	orr.w	r3, r3, #11
 8007acc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007adc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ae0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007af2:	461a      	mov	r2, r3
 8007af4:	f005 fa4e 	bl	800cf94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f005 f97b 	bl	800ce08 <USB_ReadInterrupts>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1c:	d124      	bne.n	8007b68 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f005 fa12 	bl	800cf4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f004 f9ba 	bl	800bea6 <USB_GetDevSpeed>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461a      	mov	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681c      	ldr	r4, [r3, #0]
 8007b3e:	f001 fadd 	bl	80090fc <HAL_RCC_GetHCLKFreq>
 8007b42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f003 febf 	bl	800b8d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f00a fcf3 	bl	801253e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f005 f94b 	bl	800ce08 <USB_ReadInterrupts>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d10a      	bne.n	8007b92 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f00a fcd0 	bl	8012522 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f002 0208 	and.w	r2, r2, #8
 8007b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f005 f936 	bl	800ce08 <USB_ReadInterrupts>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba2:	2b80      	cmp	r3, #128	; 0x80
 8007ba4:	d122      	bne.n	8007bec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb6:	e014      	b.n	8007be2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d105      	bne.n	8007bdc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fb27 	bl	800822a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	3301      	adds	r3, #1
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d3e5      	bcc.n	8007bb8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f005 f909 	bl	800ce08 <USB_ReadInterrupts>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c00:	d13b      	bne.n	8007c7a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c02:	2301      	movs	r3, #1
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
 8007c06:	e02b      	b.n	8007c60 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	3340      	adds	r3, #64	; 0x40
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d115      	bne.n	8007c5a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007c2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da12      	bge.n	8007c5a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c38:	4613      	mov	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	333f      	adds	r3, #63	; 0x3f
 8007c44:	2201      	movs	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fae8 	bl	800822a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d3ce      	bcc.n	8007c08 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f005 f8c2 	bl	800ce08 <USB_ReadInterrupts>
 8007c84:	4603      	mov	r3, r0
 8007c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8e:	d155      	bne.n	8007d3c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c90:	2301      	movs	r3, #1
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
 8007c94:	e045      	b.n	8007d22 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007caa:	4613      	mov	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d12e      	bne.n	8007d1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007cbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da2b      	bge.n	8007d1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007cd0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d121      	bne.n	8007d1c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d18:	6053      	str	r3, [r2, #4]
            break;
 8007d1a:	e007      	b.n	8007d2c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	3301      	adds	r3, #1
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d3b4      	bcc.n	8007c96 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695a      	ldr	r2, [r3, #20]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f005 f861 	bl	800ce08 <USB_ReadInterrupts>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d50:	d10a      	bne.n	8007d68 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f00a fc74 	bl	8012640 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f005 f84b 	bl	800ce08 <USB_ReadInterrupts>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d115      	bne.n	8007da8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f00a fc64 	bl	801265c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6859      	ldr	r1, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]
 8007da4:	e000      	b.n	8007da8 <HAL_PCD_IRQHandler+0x992>
      return;
 8007da6:	bf00      	nop
    }
  }
}
 8007da8:	3734      	adds	r7, #52	; 0x34
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd90      	pop	{r4, r7, pc}

08007dae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_PCD_SetAddress+0x1a>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e013      	b.n	8007df0 <HAL_PCD_SetAddress+0x42>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	78fa      	ldrb	r2, [r7, #3]
 8007dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f004 ffa9 	bl	800cd38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	4608      	mov	r0, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	70fb      	strb	r3, [r7, #3]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	803b      	strh	r3, [r7, #0]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da0f      	bge.n	8007e3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	f003 020f 	and.w	r2, r3, #15
 8007e24:	4613      	mov	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3338      	adds	r3, #56	; 0x38
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	3304      	adds	r3, #4
 8007e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	705a      	strb	r2, [r3, #1]
 8007e3c:	e00f      	b.n	8007e5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	4613      	mov	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	3304      	adds	r3, #4
 8007e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007e6a:	883a      	ldrh	r2, [r7, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	78ba      	ldrb	r2, [r7, #2]
 8007e74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007e88:	78bb      	ldrb	r3, [r7, #2]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d102      	bne.n	8007e94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_PCD_EP_Open+0xaa>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e00e      	b.n	8007ec0 <HAL_PCD_EP_Open+0xc8>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f004 f81d 	bl	800bef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da0f      	bge.n	8007efc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	f003 020f 	and.w	r2, r3, #15
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	3338      	adds	r3, #56	; 0x38
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	705a      	strb	r2, [r3, #1]
 8007efa:	e00f      	b.n	8007f1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	f003 020f 	and.w	r2, r3, #15
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	4413      	add	r3, r2
 8007f12:	3304      	adds	r3, #4
 8007f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_PCD_EP_Close+0x6e>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e00e      	b.n	8007f54 <HAL_PCD_EP_Close+0x8c>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f004 f85b 	bl	800c000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	f003 020f 	and.w	r2, r3, #15
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	3304      	adds	r3, #4
 8007f84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2200      	movs	r2, #0
 8007f96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d102      	bne.n	8007fb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d109      	bne.n	8007fd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6979      	ldr	r1, [r7, #20]
 8007fd0:	f004 fb42 	bl	800c658 <USB_EP0StartXfer>
 8007fd4:	e008      	b.n	8007fe8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6979      	ldr	r1, [r7, #20]
 8007fe4:	f004 f8e8 	bl	800c1b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	f003 020f 	and.w	r2, r3, #15
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008014:	681b      	ldr	r3, [r3, #0]
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	460b      	mov	r3, r1
 8008030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	f003 020f 	and.w	r2, r3, #15
 8008038:	4613      	mov	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	3338      	adds	r3, #56	; 0x38
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	3304      	adds	r3, #4
 8008048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2201      	movs	r2, #1
 8008060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	b2da      	uxtb	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d102      	bne.n	800807c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800807c:	7afb      	ldrb	r3, [r7, #11]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	6979      	ldr	r1, [r7, #20]
 8008094:	f004 fae0 	bl	800c658 <USB_EP0StartXfer>
 8008098:	e008      	b.n	80080ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	f004 f886 	bl	800c1b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	f003 020f 	and.w	r2, r3, #15
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d901      	bls.n	80080d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e050      	b.n	8008176 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da0f      	bge.n	80080fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	4613      	mov	r3, r2
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	3338      	adds	r3, #56	; 0x38
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	3304      	adds	r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	705a      	strb	r2, [r3, #1]
 80080fa:	e00d      	b.n	8008118 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4613      	mov	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	3304      	adds	r3, #4
 8008110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	b2da      	uxtb	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_PCD_EP_SetStall+0x82>
 8008134:	2302      	movs	r3, #2
 8008136:	e01e      	b.n	8008176 <HAL_PCD_EP_SetStall+0xc0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68f9      	ldr	r1, [r7, #12]
 8008146:	4618      	mov	r0, r3
 8008148:	f004 fd22 	bl	800cb90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	b2d9      	uxtb	r1, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008166:	461a      	mov	r2, r3
 8008168:	f004 ff14 	bl	800cf94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	d901      	bls.n	800819c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e042      	b.n	8008222 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800819c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da0f      	bge.n	80081c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	3338      	adds	r3, #56	; 0x38
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4413      	add	r3, r2
 80081b8:	3304      	adds	r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	705a      	strb	r2, [r3, #1]
 80081c2:	e00f      	b.n	80081e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	f003 020f 	and.w	r2, r3, #15
 80081ca:	4613      	mov	r3, r2
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_PCD_EP_ClrStall+0x86>
 8008200:	2302      	movs	r3, #2
 8008202:	e00e      	b.n	8008222 <HAL_PCD_EP_ClrStall+0xa4>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68f9      	ldr	r1, [r7, #12]
 8008212:	4618      	mov	r0, r3
 8008214:	f004 fd2a 	bl	800cc6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823a:	2b00      	cmp	r3, #0
 800823c:	da0c      	bge.n	8008258 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	3338      	adds	r3, #56	; 0x38
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	3304      	adds	r3, #4
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e00c      	b.n	8008272 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	3304      	adds	r3, #4
 8008270:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	4618      	mov	r0, r3
 800827a:	f004 fb49 	bl	800c910 <USB_EPStopXfer>
 800827e:	4603      	mov	r3, r0
 8008280:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008282:	7afb      	ldrb	r3, [r7, #11]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af02      	add	r7, sp, #8
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	4613      	mov	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	3338      	adds	r3, #56	; 0x38
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	3304      	adds	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1a      	ldr	r2, [r3, #32]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d901      	bls.n	80082c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e06c      	b.n	800839e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d902      	bls.n	80082e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3303      	adds	r3, #3
 80082e4:	089b      	lsrs	r3, r3, #2
 80082e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082e8:	e02b      	b.n	8008342 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d902      	bls.n	8008306 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	3303      	adds	r3, #3
 800830a:	089b      	lsrs	r3, r3, #2
 800830c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6919      	ldr	r1, [r3, #16]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800831e:	b2db      	uxtb	r3, r3
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4603      	mov	r3, r0
 8008324:	6978      	ldr	r0, [r7, #20]
 8008326:	f004 fb9d 	bl	800ca64 <USB_WritePacket>

    ep->xfer_buff  += len;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	441a      	add	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	429a      	cmp	r2, r3
 8008356:	d809      	bhi.n	800836c <PCD_WriteEmptyTxFifo+0xe0>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1a      	ldr	r2, [r3, #32]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008360:	429a      	cmp	r2, r3
 8008362:	d203      	bcs.n	800836c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1be      	bne.n	80082ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	429a      	cmp	r2, r3
 8008376:	d811      	bhi.n	800839c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f003 030f 	and.w	r3, r3, #15
 800837e:	2201      	movs	r2, #1
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	43db      	mvns	r3, r3
 8008392:	6939      	ldr	r1, [r7, #16]
 8008394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008398:	4013      	ands	r3, r2
 800839a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	333c      	adds	r3, #60	; 0x3c
 80083c0:	3304      	adds	r3, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d17b      	bne.n	80084d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d015      	beq.n	8008414 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4a61      	ldr	r2, [pc, #388]	; (8008570 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	f240 80b9 	bls.w	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80b3 	beq.w	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	4413      	add	r3, r2
 8008406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840a:	461a      	mov	r2, r3
 800840c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008410:	6093      	str	r3, [r2, #8]
 8008412:	e0a7      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	461a      	mov	r2, r3
 800842c:	2320      	movs	r3, #32
 800842e:	6093      	str	r3, [r2, #8]
 8008430:	e098      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 8093 	bne.w	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4a4b      	ldr	r2, [pc, #300]	; (8008570 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d90f      	bls.n	8008466 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008462:	6093      	str	r3, [r2, #8]
 8008464:	e07e      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	4613      	mov	r3, r2
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	3304      	adds	r3, #4
 800847a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	0159      	lsls	r1, r3, #5
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	440b      	add	r3, r1
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d114      	bne.n	80084c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084b0:	461a      	mov	r2, r3
 80084b2:	2101      	movs	r1, #1
 80084b4:	f004 fd6e 	bl	800cf94 <USB_EP0_OutStart>
 80084b8:	e006      	b.n	80084c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	691a      	ldr	r2, [r3, #16]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	441a      	add	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f009 fff2 	bl	80124b8 <HAL_PCD_DataOutStageCallback>
 80084d4:	e046      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	4a26      	ldr	r2, [pc, #152]	; (8008574 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d124      	bne.n	8008528 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	461a      	mov	r2, r3
 80084f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fa:	6093      	str	r3, [r2, #8]
 80084fc:	e032      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b00      	cmp	r3, #0
 8008506:	d008      	beq.n	800851a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	461a      	mov	r2, r3
 8008516:	2320      	movs	r3, #32
 8008518:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f009 ffc9 	bl	80124b8 <HAL_PCD_DataOutStageCallback>
 8008526:	e01d      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d114      	bne.n	8008558 <PCD_EP_OutXfrComplete_int+0x1b0>
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	4613      	mov	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d108      	bne.n	8008558 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008550:	461a      	mov	r2, r3
 8008552:	2100      	movs	r1, #0
 8008554:	f004 fd1e 	bl	800cf94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	b2db      	uxtb	r3, r3
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f009 ffaa 	bl	80124b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3720      	adds	r7, #32
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	4f54300a 	.word	0x4f54300a
 8008574:	4f54310a 	.word	0x4f54310a

08008578 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	333c      	adds	r3, #60	; 0x3c
 8008590:	3304      	adds	r3, #4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <PCD_EP_OutSetupPacket_int+0x88>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d90e      	bls.n	80085cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c4:	461a      	mov	r2, r3
 80085c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f009 ff61 	bl	8012494 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <PCD_EP_OutSetupPacket_int+0x88>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d90c      	bls.n	80085f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d108      	bne.n	80085f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085ec:	461a      	mov	r2, r3
 80085ee:	2101      	movs	r1, #1
 80085f0:	f004 fcd0 	bl	800cf94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	4f54300a 	.word	0x4f54300a

08008604 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
 8008610:	4613      	mov	r3, r2
 8008612:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d107      	bne.n	8008632 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008622:	883b      	ldrh	r3, [r7, #0]
 8008624:	0419      	lsls	r1, r3, #16
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	430a      	orrs	r2, r1
 800862e:	629a      	str	r2, [r3, #40]	; 0x28
 8008630:	e028      	b.n	8008684 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	0c1b      	lsrs	r3, r3, #16
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	4413      	add	r3, r2
 800863e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
 8008644:	e00d      	b.n	8008662 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	3340      	adds	r3, #64	; 0x40
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	4413      	add	r3, r2
 800865a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	3301      	adds	r3, #1
 8008660:	73fb      	strb	r3, [r7, #15]
 8008662:	7bfa      	ldrb	r2, [r7, #15]
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	3b01      	subs	r3, #1
 8008668:	429a      	cmp	r2, r3
 800866a:	d3ec      	bcc.n	8008646 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800866c:	883b      	ldrh	r3, [r7, #0]
 800866e:	0418      	lsls	r0, r3, #16
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	3b01      	subs	r3, #1
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	4302      	orrs	r2, r0
 800867c:	3340      	adds	r3, #64	; 0x40
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	887a      	ldrh	r2, [r7, #2]
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	10000003 	.word	0x10000003

080086fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a04      	ldr	r2, [pc, #16]	; (8008718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870a:	6013      	str	r3, [r2, #0]
}
 800870c:	bf00      	nop
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40007000 	.word	0x40007000

0800871c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008726:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	4a22      	ldr	r2, [pc, #136]	; (80087b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800872c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008730:	6413      	str	r3, [r2, #64]	; 0x40
 8008732:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800873e:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1d      	ldr	r2, [pc, #116]	; (80087b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008748:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800874a:	f7fc fc9f 	bl	800508c <HAL_GetTick>
 800874e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008750:	e009      	b.n	8008766 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008752:	f7fc fc9b 	bl	800508c <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008760:	d901      	bls.n	8008766 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e022      	b.n	80087ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800876e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008772:	d1ee      	bne.n	8008752 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008774:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a0f      	ldr	r2, [pc, #60]	; (80087b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800877a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800877e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008780:	f7fc fc84 	bl	800508c <HAL_GetTick>
 8008784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008786:	e009      	b.n	800879c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008788:	f7fc fc80 	bl	800508c <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008796:	d901      	bls.n	800879c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e007      	b.n	80087ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a8:	d1ee      	bne.n	8008788 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40023800 	.word	0x40023800
 80087b8:	40007000 	.word	0x40007000

080087bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e29b      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8087 	beq.w	80088ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087e0:	4b96      	ldr	r3, [pc, #600]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 030c 	and.w	r3, r3, #12
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d00c      	beq.n	8008806 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ec:	4b93      	ldr	r3, [pc, #588]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 030c 	and.w	r3, r3, #12
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d112      	bne.n	800881e <HAL_RCC_OscConfig+0x62>
 80087f8:	4b90      	ldr	r3, [pc, #576]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008804:	d10b      	bne.n	800881e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008806:	4b8d      	ldr	r3, [pc, #564]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d06c      	beq.n	80088ec <HAL_RCC_OscConfig+0x130>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d168      	bne.n	80088ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e275      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008826:	d106      	bne.n	8008836 <HAL_RCC_OscConfig+0x7a>
 8008828:	4b84      	ldr	r3, [pc, #528]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a83      	ldr	r2, [pc, #524]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800882e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	e02e      	b.n	8008894 <HAL_RCC_OscConfig+0xd8>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10c      	bne.n	8008858 <HAL_RCC_OscConfig+0x9c>
 800883e:	4b7f      	ldr	r3, [pc, #508]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a7e      	ldr	r2, [pc, #504]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	4b7c      	ldr	r3, [pc, #496]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a7b      	ldr	r2, [pc, #492]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e01d      	b.n	8008894 <HAL_RCC_OscConfig+0xd8>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008860:	d10c      	bne.n	800887c <HAL_RCC_OscConfig+0xc0>
 8008862:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a75      	ldr	r2, [pc, #468]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	4b73      	ldr	r3, [pc, #460]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a72      	ldr	r2, [pc, #456]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e00b      	b.n	8008894 <HAL_RCC_OscConfig+0xd8>
 800887c:	4b6f      	ldr	r3, [pc, #444]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a6e      	ldr	r2, [pc, #440]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	4b6c      	ldr	r3, [pc, #432]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a6b      	ldr	r2, [pc, #428]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800888e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d013      	beq.n	80088c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800889c:	f7fc fbf6 	bl	800508c <HAL_GetTick>
 80088a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088a4:	f7fc fbf2 	bl	800508c <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b64      	cmp	r3, #100	; 0x64
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e229      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088b6:	4b61      	ldr	r3, [pc, #388]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f0      	beq.n	80088a4 <HAL_RCC_OscConfig+0xe8>
 80088c2:	e014      	b.n	80088ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c4:	f7fc fbe2 	bl	800508c <HAL_GetTick>
 80088c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ca:	e008      	b.n	80088de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088cc:	f7fc fbde 	bl	800508c <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b64      	cmp	r3, #100	; 0x64
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e215      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088de:	4b57      	ldr	r3, [pc, #348]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1f0      	bne.n	80088cc <HAL_RCC_OscConfig+0x110>
 80088ea:	e000      	b.n	80088ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d069      	beq.n	80089ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088fa:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f003 030c 	and.w	r3, r3, #12
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008906:	4b4d      	ldr	r3, [pc, #308]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 030c 	and.w	r3, r3, #12
 800890e:	2b08      	cmp	r3, #8
 8008910:	d11c      	bne.n	800894c <HAL_RCC_OscConfig+0x190>
 8008912:	4b4a      	ldr	r3, [pc, #296]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d116      	bne.n	800894c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800891e:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_RCC_OscConfig+0x17a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d001      	beq.n	8008936 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e1e9      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	493d      	ldr	r1, [pc, #244]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008946:	4313      	orrs	r3, r2
 8008948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800894a:	e040      	b.n	80089ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d023      	beq.n	800899c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008954:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a38      	ldr	r2, [pc, #224]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800895a:	f043 0301 	orr.w	r3, r3, #1
 800895e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fc fb94 	bl	800508c <HAL_GetTick>
 8008964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008968:	f7fc fb90 	bl	800508c <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b02      	cmp	r3, #2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e1c7      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800897a:	4b30      	ldr	r3, [pc, #192]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008986:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	4929      	ldr	r1, [pc, #164]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008996:	4313      	orrs	r3, r2
 8008998:	600b      	str	r3, [r1, #0]
 800899a:	e018      	b.n	80089ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800899c:	4b27      	ldr	r3, [pc, #156]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a26      	ldr	r2, [pc, #152]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a8:	f7fc fb70 	bl	800508c <HAL_GetTick>
 80089ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089ae:	e008      	b.n	80089c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089b0:	f7fc fb6c 	bl	800508c <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e1a3      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089c2:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1f0      	bne.n	80089b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d038      	beq.n	8008a4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d019      	beq.n	8008a16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089e2:	4b16      	ldr	r3, [pc, #88]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e6:	4a15      	ldr	r2, [pc, #84]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ee:	f7fc fb4d 	bl	800508c <HAL_GetTick>
 80089f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089f4:	e008      	b.n	8008a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089f6:	f7fc fb49 	bl	800508c <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d901      	bls.n	8008a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e180      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0f0      	beq.n	80089f6 <HAL_RCC_OscConfig+0x23a>
 8008a14:	e01a      	b.n	8008a4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1a:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <HAL_RCC_OscConfig+0x280>)
 8008a1c:	f023 0301 	bic.w	r3, r3, #1
 8008a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a22:	f7fc fb33 	bl	800508c <HAL_GetTick>
 8008a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a28:	e00a      	b.n	8008a40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a2a:	f7fc fb2f 	bl	800508c <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d903      	bls.n	8008a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e166      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
 8008a3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a40:	4b92      	ldr	r3, [pc, #584]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1ee      	bne.n	8008a2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 80a4 	beq.w	8008ba2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a5a:	4b8c      	ldr	r3, [pc, #560]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10d      	bne.n	8008a82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a66:	4b89      	ldr	r3, [pc, #548]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	4a88      	ldr	r2, [pc, #544]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a70:	6413      	str	r3, [r2, #64]	; 0x40
 8008a72:	4b86      	ldr	r3, [pc, #536]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a82:	4b83      	ldr	r3, [pc, #524]	; (8008c90 <HAL_RCC_OscConfig+0x4d4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d118      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008a8e:	4b80      	ldr	r3, [pc, #512]	; (8008c90 <HAL_RCC_OscConfig+0x4d4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a7f      	ldr	r2, [pc, #508]	; (8008c90 <HAL_RCC_OscConfig+0x4d4>)
 8008a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a9a:	f7fc faf7 	bl	800508c <HAL_GetTick>
 8008a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aa2:	f7fc faf3 	bl	800508c <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b64      	cmp	r3, #100	; 0x64
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e12a      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ab4:	4b76      	ldr	r3, [pc, #472]	; (8008c90 <HAL_RCC_OscConfig+0x4d4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0f0      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d106      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x31a>
 8008ac8:	4b70      	ldr	r3, [pc, #448]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008acc:	4a6f      	ldr	r2, [pc, #444]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008ace:	f043 0301 	orr.w	r3, r3, #1
 8008ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad4:	e02d      	b.n	8008b32 <HAL_RCC_OscConfig+0x376>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <HAL_RCC_OscConfig+0x33c>
 8008ade:	4b6b      	ldr	r3, [pc, #428]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae2:	4a6a      	ldr	r2, [pc, #424]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aea:	4b68      	ldr	r3, [pc, #416]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	4a67      	ldr	r2, [pc, #412]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008af0:	f023 0304 	bic.w	r3, r3, #4
 8008af4:	6713      	str	r3, [r2, #112]	; 0x70
 8008af6:	e01c      	b.n	8008b32 <HAL_RCC_OscConfig+0x376>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b05      	cmp	r3, #5
 8008afe:	d10c      	bne.n	8008b1a <HAL_RCC_OscConfig+0x35e>
 8008b00:	4b62      	ldr	r3, [pc, #392]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	4a61      	ldr	r2, [pc, #388]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b06:	f043 0304 	orr.w	r3, r3, #4
 8008b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b0c:	4b5f      	ldr	r3, [pc, #380]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b10:	4a5e      	ldr	r2, [pc, #376]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	6713      	str	r3, [r2, #112]	; 0x70
 8008b18:	e00b      	b.n	8008b32 <HAL_RCC_OscConfig+0x376>
 8008b1a:	4b5c      	ldr	r3, [pc, #368]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1e:	4a5b      	ldr	r2, [pc, #364]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	6713      	str	r3, [r2, #112]	; 0x70
 8008b26:	4b59      	ldr	r3, [pc, #356]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2a:	4a58      	ldr	r2, [pc, #352]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b2c:	f023 0304 	bic.w	r3, r3, #4
 8008b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d015      	beq.n	8008b66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3a:	f7fc faa7 	bl	800508c <HAL_GetTick>
 8008b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b40:	e00a      	b.n	8008b58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b42:	f7fc faa3 	bl	800508c <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d901      	bls.n	8008b58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e0d8      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b58:	4b4c      	ldr	r3, [pc, #304]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0ee      	beq.n	8008b42 <HAL_RCC_OscConfig+0x386>
 8008b64:	e014      	b.n	8008b90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b66:	f7fc fa91 	bl	800508c <HAL_GetTick>
 8008b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b6c:	e00a      	b.n	8008b84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b6e:	f7fc fa8d 	bl	800508c <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d901      	bls.n	8008b84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e0c2      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b84:	4b41      	ldr	r3, [pc, #260]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1ee      	bne.n	8008b6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d105      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b96:	4b3d      	ldr	r3, [pc, #244]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	4a3c      	ldr	r2, [pc, #240]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80ae 	beq.w	8008d08 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bac:	4b37      	ldr	r3, [pc, #220]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 030c 	and.w	r3, r3, #12
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d06d      	beq.n	8008c94 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d14b      	bne.n	8008c58 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc0:	4b32      	ldr	r3, [pc, #200]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a31      	ldr	r2, [pc, #196]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bcc:	f7fc fa5e 	bl	800508c <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bd4:	f7fc fa5a 	bl	800508c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e091      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be6:	4b29      	ldr	r3, [pc, #164]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69da      	ldr	r2, [r3, #28]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	019b      	lsls	r3, r3, #6
 8008c02:	431a      	orrs	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	085b      	lsrs	r3, r3, #1
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	061b      	lsls	r3, r3, #24
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1c:	071b      	lsls	r3, r3, #28
 8008c1e:	491b      	ldr	r1, [pc, #108]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c24:	4b19      	ldr	r3, [pc, #100]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a18      	ldr	r2, [pc, #96]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c30:	f7fc fa2c 	bl	800508c <HAL_GetTick>
 8008c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c36:	e008      	b.n	8008c4a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c38:	f7fc fa28 	bl	800508c <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e05f      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c4a:	4b10      	ldr	r3, [pc, #64]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0f0      	beq.n	8008c38 <HAL_RCC_OscConfig+0x47c>
 8008c56:	e057      	b.n	8008d08 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a0b      	ldr	r2, [pc, #44]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c64:	f7fc fa12 	bl	800508c <HAL_GetTick>
 8008c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c6a:	e008      	b.n	8008c7e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c6c:	f7fc fa0e 	bl	800508c <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e045      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <HAL_RCC_OscConfig+0x4d0>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1f0      	bne.n	8008c6c <HAL_RCC_OscConfig+0x4b0>
 8008c8a:	e03d      	b.n	8008d08 <HAL_RCC_OscConfig+0x54c>
 8008c8c:	40023800 	.word	0x40023800
 8008c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008c94:	4b1f      	ldr	r3, [pc, #124]	; (8008d14 <HAL_RCC_OscConfig+0x558>)
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d030      	beq.n	8008d04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d129      	bne.n	8008d04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d122      	bne.n	8008d04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d119      	bne.n	8008d04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	085b      	lsrs	r3, r3, #1
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d10f      	bne.n	8008d04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d107      	bne.n	8008d04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d001      	beq.n	8008d08 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40023800 	.word	0x40023800

08008d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e0d0      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d30:	4b6a      	ldr	r3, [pc, #424]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d910      	bls.n	8008d60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3e:	4b67      	ldr	r3, [pc, #412]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f023 020f 	bic.w	r2, r3, #15
 8008d46:	4965      	ldr	r1, [pc, #404]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d4e:	4b63      	ldr	r3, [pc, #396]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d001      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0b8      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d020      	beq.n	8008dae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d78:	4b59      	ldr	r3, [pc, #356]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	4a58      	ldr	r2, [pc, #352]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0308 	and.w	r3, r3, #8
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d90:	4b53      	ldr	r3, [pc, #332]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	4a52      	ldr	r2, [pc, #328]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d9c:	4b50      	ldr	r3, [pc, #320]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	494d      	ldr	r1, [pc, #308]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d040      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d107      	bne.n	8008dd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dc2:	4b47      	ldr	r3, [pc, #284]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d115      	bne.n	8008dfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e07f      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d107      	bne.n	8008dea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dda:	4b41      	ldr	r3, [pc, #260]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d109      	bne.n	8008dfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e073      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dea:	4b3d      	ldr	r3, [pc, #244]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e06b      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dfa:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f023 0203 	bic.w	r2, r3, #3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4936      	ldr	r1, [pc, #216]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e0c:	f7fc f93e 	bl	800508c <HAL_GetTick>
 8008e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e12:	e00a      	b.n	8008e2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e14:	f7fc f93a 	bl	800508c <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d901      	bls.n	8008e2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e053      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e2a:	4b2d      	ldr	r3, [pc, #180]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 020c 	and.w	r2, r3, #12
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d1eb      	bne.n	8008e14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e3c:	4b27      	ldr	r3, [pc, #156]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d210      	bcs.n	8008e6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e4a:	4b24      	ldr	r3, [pc, #144]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f023 020f 	bic.w	r2, r3, #15
 8008e52:	4922      	ldr	r1, [pc, #136]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e5a:	4b20      	ldr	r3, [pc, #128]	; (8008edc <HAL_RCC_ClockConfig+0x1c4>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d001      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e032      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d008      	beq.n	8008e8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	4916      	ldr	r1, [pc, #88]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d009      	beq.n	8008eaa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e96:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	490e      	ldr	r1, [pc, #56]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008eaa:	f000 f821 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	091b      	lsrs	r3, r3, #4
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	490a      	ldr	r1, [pc, #40]	; (8008ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8008ebc:	5ccb      	ldrb	r3, [r1, r3]
 8008ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec2:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8008ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008ec6:	4b09      	ldr	r3, [pc, #36]	; (8008eec <HAL_RCC_ClockConfig+0x1d4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fb fce4 	bl	8004898 <HAL_InitTick>

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	40023c00 	.word	0x40023c00
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	080222d4 	.word	0x080222d4
 8008ee8:	20000004 	.word	0x20000004
 8008eec:	20000008 	.word	0x20000008

08008ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ef4:	b094      	sub	sp, #80	; 0x50
 8008ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	647b      	str	r3, [r7, #68]	; 0x44
 8008efc:	2300      	movs	r3, #0
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	2300      	movs	r3, #0
 8008f02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f08:	4b79      	ldr	r3, [pc, #484]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 030c 	and.w	r3, r3, #12
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d00d      	beq.n	8008f30 <HAL_RCC_GetSysClockFreq+0x40>
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	f200 80e1 	bhi.w	80090dc <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_RCC_GetSysClockFreq+0x34>
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d003      	beq.n	8008f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8008f22:	e0db      	b.n	80090dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f24:	4b73      	ldr	r3, [pc, #460]	; (80090f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f28:	e0db      	b.n	80090e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f2a:	4b73      	ldr	r3, [pc, #460]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008f2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f2e:	e0d8      	b.n	80090e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f30:	4b6f      	ldr	r3, [pc, #444]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008f3a:	4b6d      	ldr	r3, [pc, #436]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d063      	beq.n	800900e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f46:	4b6a      	ldr	r3, [pc, #424]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	099b      	lsrs	r3, r3, #6
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008f62:	4622      	mov	r2, r4
 8008f64:	462b      	mov	r3, r5
 8008f66:	f04f 0000 	mov.w	r0, #0
 8008f6a:	f04f 0100 	mov.w	r1, #0
 8008f6e:	0159      	lsls	r1, r3, #5
 8008f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f74:	0150      	lsls	r0, r2, #5
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	1a51      	subs	r1, r2, r1
 8008f7e:	6139      	str	r1, [r7, #16]
 8008f80:	4629      	mov	r1, r5
 8008f82:	eb63 0301 	sbc.w	r3, r3, r1
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f94:	4659      	mov	r1, fp
 8008f96:	018b      	lsls	r3, r1, #6
 8008f98:	4651      	mov	r1, sl
 8008f9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f9e:	4651      	mov	r1, sl
 8008fa0:	018a      	lsls	r2, r1, #6
 8008fa2:	4651      	mov	r1, sl
 8008fa4:	ebb2 0801 	subs.w	r8, r2, r1
 8008fa8:	4659      	mov	r1, fp
 8008faa:	eb63 0901 	sbc.w	r9, r3, r1
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fc2:	4690      	mov	r8, r2
 8008fc4:	4699      	mov	r9, r3
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	eb18 0303 	adds.w	r3, r8, r3
 8008fcc:	60bb      	str	r3, [r7, #8]
 8008fce:	462b      	mov	r3, r5
 8008fd0:	eb49 0303 	adc.w	r3, r9, r3
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	f04f 0300 	mov.w	r3, #0
 8008fde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	024b      	lsls	r3, r1, #9
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008fec:	4621      	mov	r1, r4
 8008fee:	024a      	lsls	r2, r1, #9
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ffc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009000:	f7f7 fae4 	bl	80005cc <__aeabi_uldivmod>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4613      	mov	r3, r2
 800900a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800900c:	e058      	b.n	80090c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800900e:	4b38      	ldr	r3, [pc, #224]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	099b      	lsrs	r3, r3, #6
 8009014:	2200      	movs	r2, #0
 8009016:	4618      	mov	r0, r3
 8009018:	4611      	mov	r1, r2
 800901a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800901e:	623b      	str	r3, [r7, #32]
 8009020:	2300      	movs	r3, #0
 8009022:	627b      	str	r3, [r7, #36]	; 0x24
 8009024:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009028:	4642      	mov	r2, r8
 800902a:	464b      	mov	r3, r9
 800902c:	f04f 0000 	mov.w	r0, #0
 8009030:	f04f 0100 	mov.w	r1, #0
 8009034:	0159      	lsls	r1, r3, #5
 8009036:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800903a:	0150      	lsls	r0, r2, #5
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4641      	mov	r1, r8
 8009042:	ebb2 0a01 	subs.w	sl, r2, r1
 8009046:	4649      	mov	r1, r9
 8009048:	eb63 0b01 	sbc.w	fp, r3, r1
 800904c:	f04f 0200 	mov.w	r2, #0
 8009050:	f04f 0300 	mov.w	r3, #0
 8009054:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009058:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800905c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009060:	ebb2 040a 	subs.w	r4, r2, sl
 8009064:	eb63 050b 	sbc.w	r5, r3, fp
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	00eb      	lsls	r3, r5, #3
 8009072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009076:	00e2      	lsls	r2, r4, #3
 8009078:	4614      	mov	r4, r2
 800907a:	461d      	mov	r5, r3
 800907c:	4643      	mov	r3, r8
 800907e:	18e3      	adds	r3, r4, r3
 8009080:	603b      	str	r3, [r7, #0]
 8009082:	464b      	mov	r3, r9
 8009084:	eb45 0303 	adc.w	r3, r5, r3
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009096:	4629      	mov	r1, r5
 8009098:	028b      	lsls	r3, r1, #10
 800909a:	4621      	mov	r1, r4
 800909c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090a0:	4621      	mov	r1, r4
 80090a2:	028a      	lsls	r2, r1, #10
 80090a4:	4610      	mov	r0, r2
 80090a6:	4619      	mov	r1, r3
 80090a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090aa:	2200      	movs	r2, #0
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	61fa      	str	r2, [r7, #28]
 80090b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090b4:	f7f7 fa8a 	bl	80005cc <__aeabi_uldivmod>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4613      	mov	r3, r2
 80090be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	0c1b      	lsrs	r3, r3, #16
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	3301      	adds	r3, #1
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80090d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090da:	e002      	b.n	80090e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090dc:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80090de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3750      	adds	r7, #80	; 0x50
 80090e8:	46bd      	mov	sp, r7
 80090ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090ee:	bf00      	nop
 80090f0:	40023800 	.word	0x40023800
 80090f4:	00f42400 	.word	0x00f42400
 80090f8:	007a1200 	.word	0x007a1200

080090fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009100:	4b03      	ldr	r3, [pc, #12]	; (8009110 <HAL_RCC_GetHCLKFreq+0x14>)
 8009102:	681b      	ldr	r3, [r3, #0]
}
 8009104:	4618      	mov	r0, r3
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20000004 	.word	0x20000004

08009114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009118:	f7ff fff0 	bl	80090fc <HAL_RCC_GetHCLKFreq>
 800911c:	4602      	mov	r2, r0
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	0a9b      	lsrs	r3, r3, #10
 8009124:	f003 0307 	and.w	r3, r3, #7
 8009128:	4903      	ldr	r1, [pc, #12]	; (8009138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800912a:	5ccb      	ldrb	r3, [r1, r3]
 800912c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	40023800 	.word	0x40023800
 8009138:	080222e4 	.word	0x080222e4

0800913c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009140:	f7ff ffdc 	bl	80090fc <HAL_RCC_GetHCLKFreq>
 8009144:	4602      	mov	r2, r0
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	0b5b      	lsrs	r3, r3, #13
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	4903      	ldr	r1, [pc, #12]	; (8009160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009152:	5ccb      	ldrb	r3, [r1, r3]
 8009154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009158:	4618      	mov	r0, r3
 800915a:	bd80      	pop	{r7, pc}
 800915c:	40023800 	.word	0x40023800
 8009160:	080222e4 	.word	0x080222e4

08009164 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	220f      	movs	r2, #15
 8009172:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009174:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <HAL_RCC_GetClockConfig+0x5c>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 0203 	and.w	r2, r3, #3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009180:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <HAL_RCC_GetClockConfig+0x5c>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800918c:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <HAL_RCC_GetClockConfig+0x5c>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <HAL_RCC_GetClockConfig+0x5c>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	08db      	lsrs	r3, r3, #3
 800919e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091a6:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <HAL_RCC_GetClockConfig+0x60>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 020f 	and.w	r2, r3, #15
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40023800 	.word	0x40023800
 80091c4:	40023c00 	.word	0x40023c00

080091c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d012      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80091f0:	4b69      	ldr	r3, [pc, #420]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4a68      	ldr	r2, [pc, #416]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80091fa:	6093      	str	r3, [r2, #8]
 80091fc:	4b66      	ldr	r3, [pc, #408]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009204:	4964      	ldr	r1, [pc, #400]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009206:	4313      	orrs	r3, r2
 8009208:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009212:	2301      	movs	r3, #1
 8009214:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d017      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009222:	4b5d      	ldr	r3, [pc, #372]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009230:	4959      	ldr	r1, [pc, #356]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009232:	4313      	orrs	r3, r2
 8009234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009240:	d101      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009242:	2301      	movs	r3, #1
 8009244:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800924e:	2301      	movs	r3, #1
 8009250:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d017      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800925e:	4b4e      	ldr	r3, [pc, #312]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009264:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	494a      	ldr	r1, [pc, #296]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800927c:	d101      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800927e:	2301      	movs	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800928a:	2301      	movs	r3, #1
 800928c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 808b 	beq.w	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092ac:	4b3a      	ldr	r3, [pc, #232]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b0:	4a39      	ldr	r2, [pc, #228]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b6:	6413      	str	r3, [r2, #64]	; 0x40
 80092b8:	4b37      	ldr	r3, [pc, #220]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092c4:	4b35      	ldr	r3, [pc, #212]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a34      	ldr	r2, [pc, #208]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d0:	f7fb fedc 	bl	800508c <HAL_GetTick>
 80092d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092d6:	e008      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092d8:	f7fb fed8 	bl	800508c <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b64      	cmp	r3, #100	; 0x64
 80092e4:	d901      	bls.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e38f      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092ea:	4b2c      	ldr	r3, [pc, #176]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0f0      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092f6:	4b28      	ldr	r3, [pc, #160]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d035      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	429a      	cmp	r2, r3
 8009312:	d02e      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009314:	4b20      	ldr	r3, [pc, #128]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800931e:	4b1e      	ldr	r3, [pc, #120]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009322:	4a1d      	ldr	r2, [pc, #116]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009328:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800932c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932e:	4a1a      	ldr	r2, [pc, #104]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009334:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009336:	4a18      	ldr	r2, [pc, #96]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800933c:	4b16      	ldr	r3, [pc, #88]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800933e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b01      	cmp	r3, #1
 8009346:	d114      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009348:	f7fb fea0 	bl	800508c <HAL_GetTick>
 800934c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800934e:	e00a      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009350:	f7fb fe9c 	bl	800508c <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	f241 3288 	movw	r2, #5000	; 0x1388
 800935e:	4293      	cmp	r3, r2
 8009360:	d901      	bls.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e351      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0ee      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800937a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800937e:	d111      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800938e:	400b      	ands	r3, r1
 8009390:	4901      	ldr	r1, [pc, #4]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009392:	4313      	orrs	r3, r2
 8009394:	608b      	str	r3, [r1, #8]
 8009396:	e00b      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009398:	40023800 	.word	0x40023800
 800939c:	40007000 	.word	0x40007000
 80093a0:	0ffffcff 	.word	0x0ffffcff
 80093a4:	4bac      	ldr	r3, [pc, #688]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	4aab      	ldr	r2, [pc, #684]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80093ae:	6093      	str	r3, [r2, #8]
 80093b0:	4ba9      	ldr	r3, [pc, #676]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093bc:	49a6      	ldr	r1, [pc, #664]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0310 	and.w	r3, r3, #16
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d010      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093ce:	4ba2      	ldr	r3, [pc, #648]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093d4:	4aa0      	ldr	r2, [pc, #640]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80093de:	4b9e      	ldr	r3, [pc, #632]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	499b      	ldr	r1, [pc, #620]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80093fc:	4b96      	ldr	r3, [pc, #600]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009402:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800940a:	4993      	ldr	r1, [pc, #588]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800940c:	4313      	orrs	r3, r2
 800940e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800941e:	4b8e      	ldr	r3, [pc, #568]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942c:	498a      	ldr	r1, [pc, #552]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800942e:	4313      	orrs	r3, r2
 8009430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00a      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009440:	4b85      	ldr	r3, [pc, #532]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800944e:	4982      	ldr	r1, [pc, #520]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009450:	4313      	orrs	r3, r2
 8009452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009462:	4b7d      	ldr	r3, [pc, #500]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009468:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009470:	4979      	ldr	r1, [pc, #484]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009472:	4313      	orrs	r3, r2
 8009474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009484:	4b74      	ldr	r3, [pc, #464]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948a:	f023 0203 	bic.w	r2, r3, #3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009492:	4971      	ldr	r1, [pc, #452]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009494:	4313      	orrs	r3, r2
 8009496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094a6:	4b6c      	ldr	r3, [pc, #432]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ac:	f023 020c 	bic.w	r2, r3, #12
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b4:	4968      	ldr	r1, [pc, #416]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00a      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094c8:	4b63      	ldr	r3, [pc, #396]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d6:	4960      	ldr	r1, [pc, #384]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094ea:	4b5b      	ldr	r3, [pc, #364]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f8:	4957      	ldr	r1, [pc, #348]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00a      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800950c:	4b52      	ldr	r3, [pc, #328]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800950e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009512:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951a:	494f      	ldr	r1, [pc, #316]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800951c:	4313      	orrs	r3, r2
 800951e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00a      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800952e:	4b4a      	ldr	r3, [pc, #296]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009534:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953c:	4946      	ldr	r1, [pc, #280]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800953e:	4313      	orrs	r3, r2
 8009540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009550:	4b41      	ldr	r3, [pc, #260]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009556:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955e:	493e      	ldr	r1, [pc, #248]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009560:	4313      	orrs	r3, r2
 8009562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009572:	4b39      	ldr	r3, [pc, #228]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009578:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009580:	4935      	ldr	r1, [pc, #212]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009582:	4313      	orrs	r3, r2
 8009584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009594:	4b30      	ldr	r3, [pc, #192]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095a2:	492d      	ldr	r1, [pc, #180]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d011      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80095b6:	4b28      	ldr	r3, [pc, #160]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c4:	4924      	ldr	r1, [pc, #144]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d4:	d101      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80095d6:	2301      	movs	r3, #1
 80095d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 0308 	and.w	r3, r3, #8
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80095e6:	2301      	movs	r3, #1
 80095e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095f6:	4b18      	ldr	r3, [pc, #96]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80095f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009604:	4914      	ldr	r1, [pc, #80]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009606:	4313      	orrs	r3, r2
 8009608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009618:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800961a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009628:	490b      	ldr	r1, [pc, #44]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800962a:	4313      	orrs	r3, r2
 800962c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800963e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009642:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964c:	4902      	ldr	r1, [pc, #8]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800964e:	4313      	orrs	r3, r2
 8009650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009654:	e002      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8009656:	bf00      	nop
 8009658:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009668:	4b8a      	ldr	r3, [pc, #552]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800966a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009678:	4986      	ldr	r1, [pc, #536]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800968c:	4b81      	ldr	r3, [pc, #516]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800968e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800969c:	497d      	ldr	r1, [pc, #500]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d006      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80d6 	beq.w	8009864 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096b8:	4b76      	ldr	r3, [pc, #472]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a75      	ldr	r2, [pc, #468]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80096be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096c4:	f7fb fce2 	bl	800508c <HAL_GetTick>
 80096c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096ca:	e008      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096cc:	f7fb fcde 	bl	800508c <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b64      	cmp	r3, #100	; 0x64
 80096d8:	d901      	bls.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e195      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096de:	4b6d      	ldr	r3, [pc, #436]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f0      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d021      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d11d      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096fe:	4b65      	ldr	r3, [pc, #404]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800970c:	4b61      	ldr	r3, [pc, #388]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800970e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009712:	0e1b      	lsrs	r3, r3, #24
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	019a      	lsls	r2, r3, #6
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	041b      	lsls	r3, r3, #16
 8009724:	431a      	orrs	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	061b      	lsls	r3, r3, #24
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	071b      	lsls	r3, r3, #28
 8009732:	4958      	ldr	r1, [pc, #352]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009734:	4313      	orrs	r3, r2
 8009736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800974e:	d00a      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009758:	2b00      	cmp	r3, #0
 800975a:	d02e      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009764:	d129      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009766:	4b4b      	ldr	r3, [pc, #300]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009774:	4b47      	ldr	r3, [pc, #284]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800977a:	0f1b      	lsrs	r3, r3, #28
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	019a      	lsls	r2, r3, #6
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	061b      	lsls	r3, r3, #24
 8009794:	431a      	orrs	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	071b      	lsls	r3, r3, #28
 800979a:	493e      	ldr	r1, [pc, #248]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80097a2:	4b3c      	ldr	r3, [pc, #240]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80097a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097a8:	f023 021f 	bic.w	r2, r3, #31
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	3b01      	subs	r3, #1
 80097b2:	4938      	ldr	r1, [pc, #224]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01d      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80097c6:	4b33      	ldr	r3, [pc, #204]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80097c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097cc:	0e1b      	lsrs	r3, r3, #24
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097d4:	4b2f      	ldr	r3, [pc, #188]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80097d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097da:	0f1b      	lsrs	r3, r3, #28
 80097dc:	f003 0307 	and.w	r3, r3, #7
 80097e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	019a      	lsls	r2, r3, #6
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	041b      	lsls	r3, r3, #16
 80097ee:	431a      	orrs	r2, r3
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	061b      	lsls	r3, r3, #24
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	071b      	lsls	r3, r3, #28
 80097fa:	4926      	ldr	r1, [pc, #152]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	019a      	lsls	r2, r3, #6
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	061b      	lsls	r3, r3, #24
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	071b      	lsls	r3, r3, #28
 800982a:	491a      	ldr	r1, [pc, #104]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800982c:	4313      	orrs	r3, r2
 800982e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009832:	4b18      	ldr	r3, [pc, #96]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a17      	ldr	r2, [pc, #92]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800983c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800983e:	f7fb fc25 	bl	800508c <HAL_GetTick>
 8009842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009844:	e008      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009846:	f7fb fc21 	bl	800508c <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b64      	cmp	r3, #100	; 0x64
 8009852:	d901      	bls.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e0d8      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009858:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0f0      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b01      	cmp	r3, #1
 8009868:	f040 80ce 	bne.w	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800986c:	4b09      	ldr	r3, [pc, #36]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a08      	ldr	r2, [pc, #32]	; (8009894 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009878:	f7fb fc08 	bl	800508c <HAL_GetTick>
 800987c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800987e:	e00b      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009880:	f7fb fc04 	bl	800508c <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b64      	cmp	r3, #100	; 0x64
 800988c:	d904      	bls.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e0bb      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009892:	bf00      	nop
 8009894:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009898:	4b5e      	ldr	r3, [pc, #376]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a4:	d0ec      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d009      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d02e      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d12a      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80098ce:	4b51      	ldr	r3, [pc, #324]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d4:	0c1b      	lsrs	r3, r3, #16
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098dc:	4b4d      	ldr	r3, [pc, #308]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	019a      	lsls	r2, r3, #6
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	061b      	lsls	r3, r3, #24
 80098fc:	431a      	orrs	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	071b      	lsls	r3, r3, #28
 8009902:	4944      	ldr	r1, [pc, #272]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009904:	4313      	orrs	r3, r2
 8009906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800990a:	4b42      	ldr	r3, [pc, #264]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800990c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009910:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	3b01      	subs	r3, #1
 800991a:	021b      	lsls	r3, r3, #8
 800991c:	493d      	ldr	r1, [pc, #244]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800991e:	4313      	orrs	r3, r2
 8009920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d022      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009938:	d11d      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800993a:	4b36      	ldr	r3, [pc, #216]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800993c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009940:	0e1b      	lsrs	r3, r3, #24
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009948:	4b32      	ldr	r3, [pc, #200]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800994a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994e:	0f1b      	lsrs	r3, r3, #28
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	019a      	lsls	r2, r3, #6
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	041b      	lsls	r3, r3, #16
 8009962:	431a      	orrs	r2, r3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	061b      	lsls	r3, r3, #24
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	071b      	lsls	r3, r3, #28
 800996e:	4929      	ldr	r1, [pc, #164]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009970:	4313      	orrs	r3, r2
 8009972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d028      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009982:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009988:	0e1b      	lsrs	r3, r3, #24
 800998a:	f003 030f 	and.w	r3, r3, #15
 800998e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009990:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009996:	0c1b      	lsrs	r3, r3, #16
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	019a      	lsls	r2, r3, #6
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	431a      	orrs	r2, r3
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	431a      	orrs	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	071b      	lsls	r3, r3, #28
 80099b6:	4917      	ldr	r1, [pc, #92]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80099b8:	4313      	orrs	r3, r2
 80099ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80099be:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80099c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	4911      	ldr	r1, [pc, #68]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80099d4:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a0e      	ldr	r2, [pc, #56]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80099da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099e0:	f7fb fb54 	bl	800508c <HAL_GetTick>
 80099e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099e6:	e008      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099e8:	f7fb fb50 	bl	800508c <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b64      	cmp	r3, #100	; 0x64
 80099f4:	d901      	bls.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e007      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a06:	d1ef      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	40023800 	.word	0x40023800

08009a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e049      	b.n	8009abe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f841 	bl	8009ac6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f000 fa00 	bl	8009e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ace:	bf00      	nop
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d001      	beq.n	8009af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e054      	b.n	8009b9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a26      	ldr	r2, [pc, #152]	; (8009bac <HAL_TIM_Base_Start_IT+0xd0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d022      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1e:	d01d      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a22      	ldr	r2, [pc, #136]	; (8009bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d018      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a21      	ldr	r2, [pc, #132]	; (8009bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d013      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1f      	ldr	r2, [pc, #124]	; (8009bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00e      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a1e      	ldr	r2, [pc, #120]	; (8009bbc <HAL_TIM_Base_Start_IT+0xe0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d009      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1c      	ldr	r2, [pc, #112]	; (8009bc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d004      	beq.n	8009b5c <HAL_TIM_Base_Start_IT+0x80>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a1b      	ldr	r2, [pc, #108]	; (8009bc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d115      	bne.n	8009b88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	4b19      	ldr	r3, [pc, #100]	; (8009bc8 <HAL_TIM_Base_Start_IT+0xec>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b06      	cmp	r3, #6
 8009b6c:	d015      	beq.n	8009b9a <HAL_TIM_Base_Start_IT+0xbe>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b74:	d011      	beq.n	8009b9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0201 	orr.w	r2, r2, #1
 8009b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b86:	e008      	b.n	8009b9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	e000      	b.n	8009b9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	40010000 	.word	0x40010000
 8009bb0:	40000400 	.word	0x40000400
 8009bb4:	40000800 	.word	0x40000800
 8009bb8:	40000c00 	.word	0x40000c00
 8009bbc:	40010400 	.word	0x40010400
 8009bc0:	40014000 	.word	0x40014000
 8009bc4:	40001800 	.word	0x40001800
 8009bc8:	00010007 	.word	0x00010007

08009bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d122      	bne.n	8009c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f003 0302 	and.w	r3, r3, #2
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d11b      	bne.n	8009c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f06f 0202 	mvn.w	r2, #2
 8009bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	f003 0303 	and.w	r3, r3, #3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f905 	bl	8009e1e <HAL_TIM_IC_CaptureCallback>
 8009c14:	e005      	b.n	8009c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8f7 	bl	8009e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f908 	bl	8009e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	f003 0304 	and.w	r3, r3, #4
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d122      	bne.n	8009c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d11b      	bne.n	8009c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f06f 0204 	mvn.w	r2, #4
 8009c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2202      	movs	r2, #2
 8009c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f8db 	bl	8009e1e <HAL_TIM_IC_CaptureCallback>
 8009c68:	e005      	b.n	8009c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f8cd 	bl	8009e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f8de 	bl	8009e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	f003 0308 	and.w	r3, r3, #8
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d122      	bne.n	8009cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f003 0308 	and.w	r3, r3, #8
 8009c94:	2b08      	cmp	r3, #8
 8009c96:	d11b      	bne.n	8009cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f06f 0208 	mvn.w	r2, #8
 8009ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2204      	movs	r2, #4
 8009ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f8b1 	bl	8009e1e <HAL_TIM_IC_CaptureCallback>
 8009cbc:	e005      	b.n	8009cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f8a3 	bl	8009e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f8b4 	bl	8009e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	f003 0310 	and.w	r3, r3, #16
 8009cda:	2b10      	cmp	r3, #16
 8009cdc:	d122      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	f003 0310 	and.w	r3, r3, #16
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	d11b      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f06f 0210 	mvn.w	r2, #16
 8009cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2208      	movs	r2, #8
 8009cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f887 	bl	8009e1e <HAL_TIM_IC_CaptureCallback>
 8009d10:	e005      	b.n	8009d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f879 	bl	8009e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f88a 	bl	8009e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d10e      	bne.n	8009d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d107      	bne.n	8009d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f06f 0201 	mvn.w	r2, #1
 8009d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fa fbfe 	bl	800454c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5a:	2b80      	cmp	r3, #128	; 0x80
 8009d5c:	d10e      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d68:	2b80      	cmp	r3, #128	; 0x80
 8009d6a:	d107      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f91a 	bl	8009fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8a:	d10e      	bne.n	8009daa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d96:	2b80      	cmp	r3, #128	; 0x80
 8009d98:	d107      	bne.n	8009daa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f90d 	bl	8009fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db4:	2b40      	cmp	r3, #64	; 0x40
 8009db6:	d10e      	bne.n	8009dd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc2:	2b40      	cmp	r3, #64	; 0x40
 8009dc4:	d107      	bne.n	8009dd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f838 	bl	8009e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	f003 0320 	and.w	r3, r3, #32
 8009de0:	2b20      	cmp	r3, #32
 8009de2:	d10e      	bne.n	8009e02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d107      	bne.n	8009e02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f06f 0220 	mvn.w	r2, #32
 8009dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f8cd 	bl	8009f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
	...

08009e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a40      	ldr	r2, [pc, #256]	; (8009f70 <TIM_Base_SetConfig+0x114>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d013      	beq.n	8009e9c <TIM_Base_SetConfig+0x40>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7a:	d00f      	beq.n	8009e9c <TIM_Base_SetConfig+0x40>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a3d      	ldr	r2, [pc, #244]	; (8009f74 <TIM_Base_SetConfig+0x118>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d00b      	beq.n	8009e9c <TIM_Base_SetConfig+0x40>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a3c      	ldr	r2, [pc, #240]	; (8009f78 <TIM_Base_SetConfig+0x11c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d007      	beq.n	8009e9c <TIM_Base_SetConfig+0x40>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a3b      	ldr	r2, [pc, #236]	; (8009f7c <TIM_Base_SetConfig+0x120>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d003      	beq.n	8009e9c <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a3a      	ldr	r2, [pc, #232]	; (8009f80 <TIM_Base_SetConfig+0x124>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d108      	bne.n	8009eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2f      	ldr	r2, [pc, #188]	; (8009f70 <TIM_Base_SetConfig+0x114>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d02b      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ebc:	d027      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a2c      	ldr	r2, [pc, #176]	; (8009f74 <TIM_Base_SetConfig+0x118>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d023      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a2b      	ldr	r2, [pc, #172]	; (8009f78 <TIM_Base_SetConfig+0x11c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d01f      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a2a      	ldr	r2, [pc, #168]	; (8009f7c <TIM_Base_SetConfig+0x120>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d01b      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a29      	ldr	r2, [pc, #164]	; (8009f80 <TIM_Base_SetConfig+0x124>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d017      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a28      	ldr	r2, [pc, #160]	; (8009f84 <TIM_Base_SetConfig+0x128>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d013      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a27      	ldr	r2, [pc, #156]	; (8009f88 <TIM_Base_SetConfig+0x12c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d00f      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a26      	ldr	r2, [pc, #152]	; (8009f8c <TIM_Base_SetConfig+0x130>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00b      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a25      	ldr	r2, [pc, #148]	; (8009f90 <TIM_Base_SetConfig+0x134>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d007      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a24      	ldr	r2, [pc, #144]	; (8009f94 <TIM_Base_SetConfig+0x138>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d003      	beq.n	8009f0e <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a23      	ldr	r2, [pc, #140]	; (8009f98 <TIM_Base_SetConfig+0x13c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d108      	bne.n	8009f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <TIM_Base_SetConfig+0x114>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d003      	beq.n	8009f54 <TIM_Base_SetConfig+0xf8>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a0c      	ldr	r2, [pc, #48]	; (8009f80 <TIM_Base_SetConfig+0x124>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d103      	bne.n	8009f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	615a      	str	r2, [r3, #20]
}
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	40010000 	.word	0x40010000
 8009f74:	40000400 	.word	0x40000400
 8009f78:	40000800 	.word	0x40000800
 8009f7c:	40000c00 	.word	0x40000c00
 8009f80:	40010400 	.word	0x40010400
 8009f84:	40014000 	.word	0x40014000
 8009f88:	40014400 	.word	0x40014400
 8009f8c:	40014800 	.word	0x40014800
 8009f90:	40001800 	.word	0x40001800
 8009f94:	40001c00 	.word	0x40001c00
 8009f98:	40002000 	.word	0x40002000

08009f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e040      	b.n	800a06c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d106      	bne.n	800a000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7fa fe8c 	bl	8004d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2224      	movs	r2, #36	; 0x24
 800a004:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fd32 	bl	800aa80 <UART_SetConfig>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e022      	b.n	800a06c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 ff8a 	bl	800af48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0201 	orr.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 f811 	bl	800b08c <UART_CheckIdleState>
 800a06a:	4603      	mov	r3, r0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d171      	bne.n	800a170 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_UART_Transmit+0x24>
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e06a      	b.n	800a172 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2221      	movs	r2, #33	; 0x21
 800a0a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0aa:	f7fa ffef 	bl	800508c <HAL_GetTick>
 800a0ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	88fa      	ldrh	r2, [r7, #6]
 800a0b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c8:	d108      	bne.n	800a0dc <HAL_UART_Transmit+0x68>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	e003      	b.n	800a0e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0e4:	e02c      	b.n	800a140 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2180      	movs	r1, #128	; 0x80
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f001 f818 	bl	800b126 <UART_WaitOnFlagUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e038      	b.n	800a172 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	3302      	adds	r3, #2
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	e007      	b.n	800a12e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	781a      	ldrb	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	3301      	adds	r3, #1
 800a12c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a134:	b29b      	uxth	r3, r3
 800a136:	3b01      	subs	r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a146:	b29b      	uxth	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1cc      	bne.n	800a0e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2200      	movs	r2, #0
 800a154:	2140      	movs	r1, #64	; 0x40
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 ffe5 	bl	800b126 <UART_WaitOnFlagUntilTimeout>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e005      	b.n	800a172 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	e000      	b.n	800a172 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a170:	2302      	movs	r3, #2
  }
}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	; 0x28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a18e:	2b20      	cmp	r3, #32
 800a190:	d165      	bne.n	800a25e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <HAL_UART_Transmit_DMA+0x22>
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e05e      	b.n	800a260 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	88fa      	ldrh	r2, [r7, #6]
 800a1ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2221      	movs	r2, #33	; 0x21
 800a1c4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d027      	beq.n	800a21e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a25      	ldr	r2, [pc, #148]	; (800a268 <HAL_UART_Transmit_DMA+0xec>)
 800a1d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1da:	4a24      	ldr	r2, [pc, #144]	; (800a26c <HAL_UART_Transmit_DMA+0xf0>)
 800a1dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e2:	4a23      	ldr	r2, [pc, #140]	; (800a270 <HAL_UART_Transmit_DMA+0xf4>)
 800a1e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3328      	adds	r3, #40	; 0x28
 800a1fe:	461a      	mov	r2, r3
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	f7fb ff55 	bl	80060b0 <HAL_DMA_Start_IT>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d008      	beq.n	800a21e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2210      	movs	r2, #16
 800a210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2220      	movs	r2, #32
 800a218:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e020      	b.n	800a260 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2240      	movs	r2, #64	; 0x40
 800a224:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3308      	adds	r3, #8
 800a22c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	613b      	str	r3, [r7, #16]
   return(result);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a246:	623a      	str	r2, [r7, #32]
 800a248:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	69f9      	ldr	r1, [r7, #28]
 800a24c:	6a3a      	ldr	r2, [r7, #32]
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	61bb      	str	r3, [r7, #24]
   return(result);
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e5      	bne.n	800a226 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e000      	b.n	800a260 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a25e:	2302      	movs	r3, #2
  }
}
 800a260:	4618      	mov	r0, r3
 800a262:	3728      	adds	r7, #40	; 0x28
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	0800b509 	.word	0x0800b509
 800a26c:	0800b59f 	.word	0x0800b59f
 800a270:	0800b721 	.word	0x0800b721

0800a274 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08a      	sub	sp, #40	; 0x28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	4613      	mov	r3, r2
 800a280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d132      	bne.n	800a2f2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_UART_Receive_DMA+0x24>
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e02b      	b.n	800a2f4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d018      	beq.n	800a2e2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	623b      	str	r3, [r7, #32]
 800a2d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	69f9      	ldr	r1, [r7, #28]
 800a2d4:	6a3a      	ldr	r2, [r7, #32]
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e6      	bne.n	800a2b0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a2e2:	88fb      	ldrh	r3, [r7, #6]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	68b9      	ldr	r1, [r7, #8]
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 ffe3 	bl	800b2b4 <UART_Start_Receive_DMA>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	e000      	b.n	800a2f4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a2f2:	2302      	movs	r3, #2
  }
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3728      	adds	r7, #40	; 0x28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b090      	sub	sp, #64	; 0x40
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a310:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31c:	2b80      	cmp	r3, #128	; 0x80
 800a31e:	d139      	bne.n	800a394 <HAL_UART_DMAStop+0x98>
 800a320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a322:	2b21      	cmp	r3, #33	; 0x21
 800a324:	d136      	bne.n	800a394 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3308      	adds	r3, #8
 800a32c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	61fb      	str	r3, [r7, #28]
   return(result);
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a346:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e5      	bne.n	800a326 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d015      	beq.n	800a38e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a366:	4618      	mov	r0, r3
 800a368:	f7fb ff02 	bl	8006170 <HAL_DMA_Abort>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00d      	beq.n	800a38e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a376:	4618      	mov	r0, r3
 800a378:	f7fc f916 	bl	80065a8 <HAL_DMA_GetError>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b20      	cmp	r3, #32
 800a380:	d105      	bne.n	800a38e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2210      	movs	r2, #16
 800a386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e044      	b.n	800a418 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 f830 	bl	800b3f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d139      	bne.n	800a416 <HAL_UART_DMAStop+0x11a>
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	2b22      	cmp	r3, #34	; 0x22
 800a3a6:	d136      	bne.n	800a416 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3be:	633b      	str	r3, [r7, #48]	; 0x30
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c8:	61ba      	str	r2, [r7, #24]
 800a3ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	6979      	ldr	r1, [r7, #20]
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e5      	bne.n	800a3a8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d015      	beq.n	800a410 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fb fec1 	bl	8006170 <HAL_DMA_Abort>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00d      	beq.n	800a410 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fc f8d5 	bl	80065a8 <HAL_DMA_GetError>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b20      	cmp	r3, #32
 800a402:	d105      	bne.n	800a410 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2210      	movs	r2, #16
 800a408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e003      	b.n	800a418 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 f815 	bl	800b440 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3740      	adds	r7, #64	; 0x40
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b0ba      	sub	sp, #232	; 0xe8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a44a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a44e:	4013      	ands	r3, r2
 800a450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d115      	bne.n	800a488 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a460:	f003 0320 	and.w	r3, r3, #32
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00f      	beq.n	800a488 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 82ac 	beq.w	800a9d6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
      }
      return;
 800a486:	e2a6      	b.n	800a9d6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 8117 	beq.w	800a6c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a49e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a4a2:	4b85      	ldr	r3, [pc, #532]	; (800a6b8 <HAL_UART_IRQHandler+0x298>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 810a 	beq.w	800a6c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d011      	beq.n	800a4dc <HAL_UART_IRQHandler+0xbc>
 800a4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4d2:	f043 0201 	orr.w	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d011      	beq.n	800a50c <HAL_UART_IRQHandler+0xec>
 800a4e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a502:	f043 0204 	orr.w	r2, r3, #4
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d011      	beq.n	800a53c <HAL_UART_IRQHandler+0x11c>
 800a518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2204      	movs	r2, #4
 800a52a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a532:	f043 0202 	orr.w	r2, r3, #2
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a53c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d017      	beq.n	800a578 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b00      	cmp	r3, #0
 800a552:	d105      	bne.n	800a560 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a558:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2208      	movs	r2, #8
 800a566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a56e:	f043 0208 	orr.w	r2, r3, #8
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a580:	2b00      	cmp	r3, #0
 800a582:	d012      	beq.n	800a5aa <HAL_UART_IRQHandler+0x18a>
 800a584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00c      	beq.n	800a5aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a0:	f043 0220 	orr.w	r2, r3, #32
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 8212 	beq.w	800a9da <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00d      	beq.n	800a5de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f2:	2b40      	cmp	r3, #64	; 0x40
 800a5f4:	d005      	beq.n	800a602 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d04f      	beq.n	800a6a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 ff1c 	bl	800b440 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a612:	2b40      	cmp	r3, #64	; 0x40
 800a614:	d141      	bne.n	800a69a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a624:	e853 3f00 	ldrex	r3, [r3]
 800a628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a62c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3308      	adds	r3, #8
 800a63e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a642:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a64e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a652:	e841 2300 	strex	r3, r2, [r1]
 800a656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a65a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1d9      	bne.n	800a616 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a666:	2b00      	cmp	r3, #0
 800a668:	d013      	beq.n	800a692 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66e:	4a13      	ldr	r2, [pc, #76]	; (800a6bc <HAL_UART_IRQHandler+0x29c>)
 800a670:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a676:	4618      	mov	r0, r3
 800a678:	f7fb fdea 	bl	8006250 <HAL_DMA_Abort_IT>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d017      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a68c:	4610      	mov	r0, r2
 800a68e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a690:	e00f      	b.n	800a6b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f9d4 	bl	800aa40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a698:	e00b      	b.n	800a6b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f9d0 	bl	800aa40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a0:	e007      	b.n	800a6b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9cc 	bl	800aa40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a6b0:	e193      	b.n	800a9da <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b2:	bf00      	nop
    return;
 800a6b4:	e191      	b.n	800a9da <HAL_UART_IRQHandler+0x5ba>
 800a6b6:	bf00      	nop
 800a6b8:	04000120 	.word	0x04000120
 800a6bc:	0800b79f 	.word	0x0800b79f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	f040 814c 	bne.w	800a962 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ce:	f003 0310 	and.w	r3, r3, #16
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8145 	beq.w	800a962 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 813e 	beq.w	800a962 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2210      	movs	r2, #16
 800a6ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f8:	2b40      	cmp	r3, #64	; 0x40
 800a6fa:	f040 80b6 	bne.w	800a86a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a70a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 8165 	beq.w	800a9de <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a71a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a71e:	429a      	cmp	r2, r3
 800a720:	f080 815d 	bcs.w	800a9de <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a72a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a738:	f000 8086 	beq.w	800a848 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a748:	e853 3f00 	ldrex	r3, [r3]
 800a74c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	461a      	mov	r2, r3
 800a762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a76a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a772:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a77e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1da      	bne.n	800a73c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3308      	adds	r3, #8
 800a78c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a790:	e853 3f00 	ldrex	r3, [r3]
 800a794:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a798:	f023 0301 	bic.w	r3, r3, #1
 800a79c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3308      	adds	r3, #8
 800a7a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1e1      	bne.n	800a786 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7ee:	e841 2300 	strex	r3, r2, [r1]
 800a7f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1e3      	bne.n	800a7c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a818:	f023 0310 	bic.w	r3, r3, #16
 800a81c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	461a      	mov	r2, r3
 800a826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a82a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a82c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e4      	bne.n	800a808 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a842:	4618      	mov	r0, r3
 800a844:	f7fb fc94 	bl	8006170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f8f6 	bl	800aa54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a868:	e0b9      	b.n	800a9de <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a876:	b29b      	uxth	r3, r3
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a884:	b29b      	uxth	r3, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80ab 	beq.w	800a9e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800a88c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80a6 	beq.w	800a9e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	e853 3f00 	ldrex	r3, [r3]
 800a8a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a8ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e4      	bne.n	800a896 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	e853 3f00 	ldrex	r3, [r3]
 800a8da:	623b      	str	r3, [r7, #32]
   return(result);
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	f023 0301 	bic.w	r3, r3, #1
 800a8e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8f0:	633a      	str	r2, [r7, #48]	; 0x30
 800a8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f8:	e841 2300 	strex	r3, r2, [r1]
 800a8fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1e3      	bne.n	800a8cc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2220      	movs	r2, #32
 800a908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	60fb      	str	r3, [r7, #12]
   return(result);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f023 0310 	bic.w	r3, r3, #16
 800a92c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a93a:	61fb      	str	r3, [r7, #28]
 800a93c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	69b9      	ldr	r1, [r7, #24]
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	617b      	str	r3, [r7, #20]
   return(result);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e4      	bne.n	800a918 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2202      	movs	r2, #2
 800a952:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f87a 	bl	800aa54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a960:	e03f      	b.n	800a9e2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00e      	beq.n	800a98c <HAL_UART_IRQHandler+0x56c>
 800a96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d008      	beq.n	800a98c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a982:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f871 	bl	800aa6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a98a:	e02d      	b.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00e      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01c      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
    }
    return;
 800a9b4:	e017      	b.n	800a9e6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d012      	beq.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
 800a9c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00c      	beq.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fefb 	bl	800b7ca <UART_EndTransmit_IT>
    return;
 800a9d4:	e008      	b.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 800a9d6:	bf00      	nop
 800a9d8:	e006      	b.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 800a9da:	bf00      	nop
 800a9dc:	e004      	b.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 800a9de:	bf00      	nop
 800a9e0:	e002      	b.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 800a9e2:	bf00      	nop
 800a9e4:	e000      	b.n	800a9e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 800a9e6:	bf00      	nop
  }

}
 800a9e8:	37e8      	adds	r7, #232	; 0xe8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop

0800a9f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4ba6      	ldr	r3, [pc, #664]	; (800ad44 <UART_SetConfig+0x2c4>)
 800aaac:	4013      	ands	r3, r2
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	6979      	ldr	r1, [r7, #20]
 800aab4:	430b      	orrs	r3, r1
 800aab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	4313      	orrs	r3, r2
 800aadc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a94      	ldr	r2, [pc, #592]	; (800ad48 <UART_SetConfig+0x2c8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d120      	bne.n	800ab3e <UART_SetConfig+0xbe>
 800aafc:	4b93      	ldr	r3, [pc, #588]	; (800ad4c <UART_SetConfig+0x2cc>)
 800aafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d816      	bhi.n	800ab38 <UART_SetConfig+0xb8>
 800ab0a:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <UART_SetConfig+0x90>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab21 	.word	0x0800ab21
 800ab14:	0800ab2d 	.word	0x0800ab2d
 800ab18:	0800ab27 	.word	0x0800ab27
 800ab1c:	0800ab33 	.word	0x0800ab33
 800ab20:	2301      	movs	r3, #1
 800ab22:	77fb      	strb	r3, [r7, #31]
 800ab24:	e150      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab26:	2302      	movs	r3, #2
 800ab28:	77fb      	strb	r3, [r7, #31]
 800ab2a:	e14d      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab2c:	2304      	movs	r3, #4
 800ab2e:	77fb      	strb	r3, [r7, #31]
 800ab30:	e14a      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab32:	2308      	movs	r3, #8
 800ab34:	77fb      	strb	r3, [r7, #31]
 800ab36:	e147      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab38:	2310      	movs	r3, #16
 800ab3a:	77fb      	strb	r3, [r7, #31]
 800ab3c:	e144      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a83      	ldr	r2, [pc, #524]	; (800ad50 <UART_SetConfig+0x2d0>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d132      	bne.n	800abae <UART_SetConfig+0x12e>
 800ab48:	4b80      	ldr	r3, [pc, #512]	; (800ad4c <UART_SetConfig+0x2cc>)
 800ab4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab4e:	f003 030c 	and.w	r3, r3, #12
 800ab52:	2b0c      	cmp	r3, #12
 800ab54:	d828      	bhi.n	800aba8 <UART_SetConfig+0x128>
 800ab56:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <UART_SetConfig+0xdc>)
 800ab58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5c:	0800ab91 	.word	0x0800ab91
 800ab60:	0800aba9 	.word	0x0800aba9
 800ab64:	0800aba9 	.word	0x0800aba9
 800ab68:	0800aba9 	.word	0x0800aba9
 800ab6c:	0800ab9d 	.word	0x0800ab9d
 800ab70:	0800aba9 	.word	0x0800aba9
 800ab74:	0800aba9 	.word	0x0800aba9
 800ab78:	0800aba9 	.word	0x0800aba9
 800ab7c:	0800ab97 	.word	0x0800ab97
 800ab80:	0800aba9 	.word	0x0800aba9
 800ab84:	0800aba9 	.word	0x0800aba9
 800ab88:	0800aba9 	.word	0x0800aba9
 800ab8c:	0800aba3 	.word	0x0800aba3
 800ab90:	2300      	movs	r3, #0
 800ab92:	77fb      	strb	r3, [r7, #31]
 800ab94:	e118      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab96:	2302      	movs	r3, #2
 800ab98:	77fb      	strb	r3, [r7, #31]
 800ab9a:	e115      	b.n	800adc8 <UART_SetConfig+0x348>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	77fb      	strb	r3, [r7, #31]
 800aba0:	e112      	b.n	800adc8 <UART_SetConfig+0x348>
 800aba2:	2308      	movs	r3, #8
 800aba4:	77fb      	strb	r3, [r7, #31]
 800aba6:	e10f      	b.n	800adc8 <UART_SetConfig+0x348>
 800aba8:	2310      	movs	r3, #16
 800abaa:	77fb      	strb	r3, [r7, #31]
 800abac:	e10c      	b.n	800adc8 <UART_SetConfig+0x348>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a68      	ldr	r2, [pc, #416]	; (800ad54 <UART_SetConfig+0x2d4>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d120      	bne.n	800abfa <UART_SetConfig+0x17a>
 800abb8:	4b64      	ldr	r3, [pc, #400]	; (800ad4c <UART_SetConfig+0x2cc>)
 800abba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abc2:	2b30      	cmp	r3, #48	; 0x30
 800abc4:	d013      	beq.n	800abee <UART_SetConfig+0x16e>
 800abc6:	2b30      	cmp	r3, #48	; 0x30
 800abc8:	d814      	bhi.n	800abf4 <UART_SetConfig+0x174>
 800abca:	2b20      	cmp	r3, #32
 800abcc:	d009      	beq.n	800abe2 <UART_SetConfig+0x162>
 800abce:	2b20      	cmp	r3, #32
 800abd0:	d810      	bhi.n	800abf4 <UART_SetConfig+0x174>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <UART_SetConfig+0x15c>
 800abd6:	2b10      	cmp	r3, #16
 800abd8:	d006      	beq.n	800abe8 <UART_SetConfig+0x168>
 800abda:	e00b      	b.n	800abf4 <UART_SetConfig+0x174>
 800abdc:	2300      	movs	r3, #0
 800abde:	77fb      	strb	r3, [r7, #31]
 800abe0:	e0f2      	b.n	800adc8 <UART_SetConfig+0x348>
 800abe2:	2302      	movs	r3, #2
 800abe4:	77fb      	strb	r3, [r7, #31]
 800abe6:	e0ef      	b.n	800adc8 <UART_SetConfig+0x348>
 800abe8:	2304      	movs	r3, #4
 800abea:	77fb      	strb	r3, [r7, #31]
 800abec:	e0ec      	b.n	800adc8 <UART_SetConfig+0x348>
 800abee:	2308      	movs	r3, #8
 800abf0:	77fb      	strb	r3, [r7, #31]
 800abf2:	e0e9      	b.n	800adc8 <UART_SetConfig+0x348>
 800abf4:	2310      	movs	r3, #16
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	e0e6      	b.n	800adc8 <UART_SetConfig+0x348>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a56      	ldr	r2, [pc, #344]	; (800ad58 <UART_SetConfig+0x2d8>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d120      	bne.n	800ac46 <UART_SetConfig+0x1c6>
 800ac04:	4b51      	ldr	r3, [pc, #324]	; (800ad4c <UART_SetConfig+0x2cc>)
 800ac06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac0e:	2bc0      	cmp	r3, #192	; 0xc0
 800ac10:	d013      	beq.n	800ac3a <UART_SetConfig+0x1ba>
 800ac12:	2bc0      	cmp	r3, #192	; 0xc0
 800ac14:	d814      	bhi.n	800ac40 <UART_SetConfig+0x1c0>
 800ac16:	2b80      	cmp	r3, #128	; 0x80
 800ac18:	d009      	beq.n	800ac2e <UART_SetConfig+0x1ae>
 800ac1a:	2b80      	cmp	r3, #128	; 0x80
 800ac1c:	d810      	bhi.n	800ac40 <UART_SetConfig+0x1c0>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <UART_SetConfig+0x1a8>
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d006      	beq.n	800ac34 <UART_SetConfig+0x1b4>
 800ac26:	e00b      	b.n	800ac40 <UART_SetConfig+0x1c0>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	77fb      	strb	r3, [r7, #31]
 800ac2c:	e0cc      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	77fb      	strb	r3, [r7, #31]
 800ac32:	e0c9      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac34:	2304      	movs	r3, #4
 800ac36:	77fb      	strb	r3, [r7, #31]
 800ac38:	e0c6      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	77fb      	strb	r3, [r7, #31]
 800ac3e:	e0c3      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac40:	2310      	movs	r3, #16
 800ac42:	77fb      	strb	r3, [r7, #31]
 800ac44:	e0c0      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a44      	ldr	r2, [pc, #272]	; (800ad5c <UART_SetConfig+0x2dc>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d125      	bne.n	800ac9c <UART_SetConfig+0x21c>
 800ac50:	4b3e      	ldr	r3, [pc, #248]	; (800ad4c <UART_SetConfig+0x2cc>)
 800ac52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac5e:	d017      	beq.n	800ac90 <UART_SetConfig+0x210>
 800ac60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac64:	d817      	bhi.n	800ac96 <UART_SetConfig+0x216>
 800ac66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac6a:	d00b      	beq.n	800ac84 <UART_SetConfig+0x204>
 800ac6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac70:	d811      	bhi.n	800ac96 <UART_SetConfig+0x216>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <UART_SetConfig+0x1fe>
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d006      	beq.n	800ac8a <UART_SetConfig+0x20a>
 800ac7c:	e00b      	b.n	800ac96 <UART_SetConfig+0x216>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	77fb      	strb	r3, [r7, #31]
 800ac82:	e0a1      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac84:	2302      	movs	r3, #2
 800ac86:	77fb      	strb	r3, [r7, #31]
 800ac88:	e09e      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac8a:	2304      	movs	r3, #4
 800ac8c:	77fb      	strb	r3, [r7, #31]
 800ac8e:	e09b      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac90:	2308      	movs	r3, #8
 800ac92:	77fb      	strb	r3, [r7, #31]
 800ac94:	e098      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac96:	2310      	movs	r3, #16
 800ac98:	77fb      	strb	r3, [r7, #31]
 800ac9a:	e095      	b.n	800adc8 <UART_SetConfig+0x348>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a2f      	ldr	r2, [pc, #188]	; (800ad60 <UART_SetConfig+0x2e0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d125      	bne.n	800acf2 <UART_SetConfig+0x272>
 800aca6:	4b29      	ldr	r3, [pc, #164]	; (800ad4c <UART_SetConfig+0x2cc>)
 800aca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800acb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acb4:	d017      	beq.n	800ace6 <UART_SetConfig+0x266>
 800acb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acba:	d817      	bhi.n	800acec <UART_SetConfig+0x26c>
 800acbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acc0:	d00b      	beq.n	800acda <UART_SetConfig+0x25a>
 800acc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acc6:	d811      	bhi.n	800acec <UART_SetConfig+0x26c>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <UART_SetConfig+0x254>
 800accc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd0:	d006      	beq.n	800ace0 <UART_SetConfig+0x260>
 800acd2:	e00b      	b.n	800acec <UART_SetConfig+0x26c>
 800acd4:	2301      	movs	r3, #1
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	e076      	b.n	800adc8 <UART_SetConfig+0x348>
 800acda:	2302      	movs	r3, #2
 800acdc:	77fb      	strb	r3, [r7, #31]
 800acde:	e073      	b.n	800adc8 <UART_SetConfig+0x348>
 800ace0:	2304      	movs	r3, #4
 800ace2:	77fb      	strb	r3, [r7, #31]
 800ace4:	e070      	b.n	800adc8 <UART_SetConfig+0x348>
 800ace6:	2308      	movs	r3, #8
 800ace8:	77fb      	strb	r3, [r7, #31]
 800acea:	e06d      	b.n	800adc8 <UART_SetConfig+0x348>
 800acec:	2310      	movs	r3, #16
 800acee:	77fb      	strb	r3, [r7, #31]
 800acf0:	e06a      	b.n	800adc8 <UART_SetConfig+0x348>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1b      	ldr	r2, [pc, #108]	; (800ad64 <UART_SetConfig+0x2e4>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d138      	bne.n	800ad6e <UART_SetConfig+0x2ee>
 800acfc:	4b13      	ldr	r3, [pc, #76]	; (800ad4c <UART_SetConfig+0x2cc>)
 800acfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ad06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad0a:	d017      	beq.n	800ad3c <UART_SetConfig+0x2bc>
 800ad0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad10:	d82a      	bhi.n	800ad68 <UART_SetConfig+0x2e8>
 800ad12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad16:	d00b      	beq.n	800ad30 <UART_SetConfig+0x2b0>
 800ad18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad1c:	d824      	bhi.n	800ad68 <UART_SetConfig+0x2e8>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <UART_SetConfig+0x2aa>
 800ad22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad26:	d006      	beq.n	800ad36 <UART_SetConfig+0x2b6>
 800ad28:	e01e      	b.n	800ad68 <UART_SetConfig+0x2e8>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	77fb      	strb	r3, [r7, #31]
 800ad2e:	e04b      	b.n	800adc8 <UART_SetConfig+0x348>
 800ad30:	2302      	movs	r3, #2
 800ad32:	77fb      	strb	r3, [r7, #31]
 800ad34:	e048      	b.n	800adc8 <UART_SetConfig+0x348>
 800ad36:	2304      	movs	r3, #4
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	e045      	b.n	800adc8 <UART_SetConfig+0x348>
 800ad3c:	2308      	movs	r3, #8
 800ad3e:	77fb      	strb	r3, [r7, #31]
 800ad40:	e042      	b.n	800adc8 <UART_SetConfig+0x348>
 800ad42:	bf00      	nop
 800ad44:	efff69f3 	.word	0xefff69f3
 800ad48:	40011000 	.word	0x40011000
 800ad4c:	40023800 	.word	0x40023800
 800ad50:	40004400 	.word	0x40004400
 800ad54:	40004800 	.word	0x40004800
 800ad58:	40004c00 	.word	0x40004c00
 800ad5c:	40005000 	.word	0x40005000
 800ad60:	40011400 	.word	0x40011400
 800ad64:	40007800 	.word	0x40007800
 800ad68:	2310      	movs	r3, #16
 800ad6a:	77fb      	strb	r3, [r7, #31]
 800ad6c:	e02c      	b.n	800adc8 <UART_SetConfig+0x348>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a72      	ldr	r2, [pc, #456]	; (800af3c <UART_SetConfig+0x4bc>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d125      	bne.n	800adc4 <UART_SetConfig+0x344>
 800ad78:	4b71      	ldr	r3, [pc, #452]	; (800af40 <UART_SetConfig+0x4c0>)
 800ad7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad86:	d017      	beq.n	800adb8 <UART_SetConfig+0x338>
 800ad88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad8c:	d817      	bhi.n	800adbe <UART_SetConfig+0x33e>
 800ad8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad92:	d00b      	beq.n	800adac <UART_SetConfig+0x32c>
 800ad94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad98:	d811      	bhi.n	800adbe <UART_SetConfig+0x33e>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <UART_SetConfig+0x326>
 800ad9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ada2:	d006      	beq.n	800adb2 <UART_SetConfig+0x332>
 800ada4:	e00b      	b.n	800adbe <UART_SetConfig+0x33e>
 800ada6:	2300      	movs	r3, #0
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e00d      	b.n	800adc8 <UART_SetConfig+0x348>
 800adac:	2302      	movs	r3, #2
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e00a      	b.n	800adc8 <UART_SetConfig+0x348>
 800adb2:	2304      	movs	r3, #4
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e007      	b.n	800adc8 <UART_SetConfig+0x348>
 800adb8:	2308      	movs	r3, #8
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	e004      	b.n	800adc8 <UART_SetConfig+0x348>
 800adbe:	2310      	movs	r3, #16
 800adc0:	77fb      	strb	r3, [r7, #31]
 800adc2:	e001      	b.n	800adc8 <UART_SetConfig+0x348>
 800adc4:	2310      	movs	r3, #16
 800adc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800add0:	d15b      	bne.n	800ae8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800add2:	7ffb      	ldrb	r3, [r7, #31]
 800add4:	2b08      	cmp	r3, #8
 800add6:	d828      	bhi.n	800ae2a <UART_SetConfig+0x3aa>
 800add8:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <UART_SetConfig+0x360>)
 800adda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adde:	bf00      	nop
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae15 	.word	0x0800ae15
 800adec:	0800ae2b 	.word	0x0800ae2b
 800adf0:	0800ae1b 	.word	0x0800ae1b
 800adf4:	0800ae2b 	.word	0x0800ae2b
 800adf8:	0800ae2b 	.word	0x0800ae2b
 800adfc:	0800ae2b 	.word	0x0800ae2b
 800ae00:	0800ae23 	.word	0x0800ae23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae04:	f7fe f986 	bl	8009114 <HAL_RCC_GetPCLK1Freq>
 800ae08:	61b8      	str	r0, [r7, #24]
        break;
 800ae0a:	e013      	b.n	800ae34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae0c:	f7fe f996 	bl	800913c <HAL_RCC_GetPCLK2Freq>
 800ae10:	61b8      	str	r0, [r7, #24]
        break;
 800ae12:	e00f      	b.n	800ae34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae14:	4b4b      	ldr	r3, [pc, #300]	; (800af44 <UART_SetConfig+0x4c4>)
 800ae16:	61bb      	str	r3, [r7, #24]
        break;
 800ae18:	e00c      	b.n	800ae34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae1a:	f7fe f869 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 800ae1e:	61b8      	str	r0, [r7, #24]
        break;
 800ae20:	e008      	b.n	800ae34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae26:	61bb      	str	r3, [r7, #24]
        break;
 800ae28:	e004      	b.n	800ae34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	77bb      	strb	r3, [r7, #30]
        break;
 800ae32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d074      	beq.n	800af24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	005a      	lsls	r2, r3, #1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	441a      	add	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	2b0f      	cmp	r3, #15
 800ae54:	d916      	bls.n	800ae84 <UART_SetConfig+0x404>
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae5c:	d212      	bcs.n	800ae84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	f023 030f 	bic.w	r3, r3, #15
 800ae66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	085b      	lsrs	r3, r3, #1
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f003 0307 	and.w	r3, r3, #7
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	89fb      	ldrh	r3, [r7, #14]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	89fa      	ldrh	r2, [r7, #14]
 800ae80:	60da      	str	r2, [r3, #12]
 800ae82:	e04f      	b.n	800af24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	77bb      	strb	r3, [r7, #30]
 800ae88:	e04c      	b.n	800af24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae8a:	7ffb      	ldrb	r3, [r7, #31]
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d828      	bhi.n	800aee2 <UART_SetConfig+0x462>
 800ae90:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <UART_SetConfig+0x418>)
 800ae92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae96:	bf00      	nop
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aec5 	.word	0x0800aec5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	0800aee3 	.word	0x0800aee3
 800aea8:	0800aed3 	.word	0x0800aed3
 800aeac:	0800aee3 	.word	0x0800aee3
 800aeb0:	0800aee3 	.word	0x0800aee3
 800aeb4:	0800aee3 	.word	0x0800aee3
 800aeb8:	0800aedb 	.word	0x0800aedb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aebc:	f7fe f92a 	bl	8009114 <HAL_RCC_GetPCLK1Freq>
 800aec0:	61b8      	str	r0, [r7, #24]
        break;
 800aec2:	e013      	b.n	800aeec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aec4:	f7fe f93a 	bl	800913c <HAL_RCC_GetPCLK2Freq>
 800aec8:	61b8      	str	r0, [r7, #24]
        break;
 800aeca:	e00f      	b.n	800aeec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aecc:	4b1d      	ldr	r3, [pc, #116]	; (800af44 <UART_SetConfig+0x4c4>)
 800aece:	61bb      	str	r3, [r7, #24]
        break;
 800aed0:	e00c      	b.n	800aeec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aed2:	f7fe f80d 	bl	8008ef0 <HAL_RCC_GetSysClockFreq>
 800aed6:	61b8      	str	r0, [r7, #24]
        break;
 800aed8:	e008      	b.n	800aeec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aede:	61bb      	str	r3, [r7, #24]
        break;
 800aee0:	e004      	b.n	800aeec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	77bb      	strb	r3, [r7, #30]
        break;
 800aeea:	bf00      	nop
    }

    if (pclk != 0U)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d018      	beq.n	800af24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	085a      	lsrs	r2, r3, #1
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	441a      	add	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	fbb2 f3f3 	udiv	r3, r2, r3
 800af04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b0f      	cmp	r3, #15
 800af0a:	d909      	bls.n	800af20 <UART_SetConfig+0x4a0>
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af12:	d205      	bcs.n	800af20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	b29a      	uxth	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60da      	str	r2, [r3, #12]
 800af1e:	e001      	b.n	800af24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800af30:	7fbb      	ldrb	r3, [r7, #30]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3720      	adds	r7, #32
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	40007c00 	.word	0x40007c00
 800af40:	40023800 	.word	0x40023800
 800af44:	00f42400 	.word	0x00f42400

0800af48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	f003 0301 	and.w	r3, r3, #1
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	f003 0310 	and.w	r3, r3, #16
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01a      	beq.n	800b05e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b046:	d10a      	bne.n	800b05e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	605a      	str	r2, [r3, #4]
  }
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af02      	add	r7, sp, #8
 800b092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b09c:	f7f9 fff6 	bl	800508c <HAL_GetTick>
 800b0a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0308 	and.w	r3, r3, #8
 800b0ac:	2b08      	cmp	r3, #8
 800b0ae:	d10e      	bne.n	800b0ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f831 	bl	800b126 <UART_WaitOnFlagUntilTimeout>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e027      	b.n	800b11e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0304 	and.w	r3, r3, #4
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d10e      	bne.n	800b0fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f81b 	bl	800b126 <UART_WaitOnFlagUntilTimeout>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e011      	b.n	800b11e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2220      	movs	r2, #32
 800b104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b09c      	sub	sp, #112	; 0x70
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	60b9      	str	r1, [r7, #8]
 800b130:	603b      	str	r3, [r7, #0]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b136:	e0a7      	b.n	800b288 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b13a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b13e:	f000 80a3 	beq.w	800b288 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b142:	f7f9 ffa3 	bl	800508c <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b14e:	429a      	cmp	r2, r3
 800b150:	d302      	bcc.n	800b158 <UART_WaitOnFlagUntilTimeout+0x32>
 800b152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b154:	2b00      	cmp	r3, #0
 800b156:	d13f      	bne.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b160:	e853 3f00 	ldrex	r3, [r3]
 800b164:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b16c:	667b      	str	r3, [r7, #100]	; 0x64
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b176:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b178:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b17c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e6      	bne.n	800b158 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b194:	e853 3f00 	ldrex	r3, [r3]
 800b198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f023 0301 	bic.w	r3, r3, #1
 800b1a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1aa:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1b2:	e841 2300 	strex	r3, r2, [r1]
 800b1b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1e5      	bne.n	800b18a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e068      	b.n	800b2aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0304 	and.w	r3, r3, #4
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d050      	beq.n	800b288 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1f4:	d148      	bne.n	800b288 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b214:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b21e:	637b      	str	r3, [r7, #52]	; 0x34
 800b220:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e6      	bne.n	800b200 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3308      	adds	r3, #8
 800b238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	e853 3f00 	ldrex	r3, [r3]
 800b240:	613b      	str	r3, [r7, #16]
   return(result);
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f023 0301 	bic.w	r3, r3, #1
 800b248:	66bb      	str	r3, [r7, #104]	; 0x68
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3308      	adds	r3, #8
 800b250:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b252:	623a      	str	r2, [r7, #32]
 800b254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	69f9      	ldr	r1, [r7, #28]
 800b258:	6a3a      	ldr	r2, [r7, #32]
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e5      	bne.n	800b232 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2220      	movs	r2, #32
 800b26a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2220      	movs	r2, #32
 800b270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2220      	movs	r2, #32
 800b278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e010      	b.n	800b2aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	69da      	ldr	r2, [r3, #28]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	4013      	ands	r3, r2
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	429a      	cmp	r2, r3
 800b296:	bf0c      	ite	eq
 800b298:	2301      	moveq	r3, #1
 800b29a:	2300      	movne	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	461a      	mov	r2, r3
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	f43f af48 	beq.w	800b138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3770      	adds	r7, #112	; 0x70
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b096      	sub	sp, #88	; 0x58
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	88fa      	ldrh	r2, [r7, #6]
 800b2cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2222      	movs	r2, #34	; 0x22
 800b2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d028      	beq.n	800b33a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ec:	4a3e      	ldr	r2, [pc, #248]	; (800b3e8 <UART_Start_Receive_DMA+0x134>)
 800b2ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2f4:	4a3d      	ldr	r2, [pc, #244]	; (800b3ec <UART_Start_Receive_DMA+0x138>)
 800b2f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fc:	4a3c      	ldr	r2, [pc, #240]	; (800b3f0 <UART_Start_Receive_DMA+0x13c>)
 800b2fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b304:	2200      	movs	r2, #0
 800b306:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3324      	adds	r3, #36	; 0x24
 800b312:	4619      	mov	r1, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b318:	461a      	mov	r2, r3
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	f7fa fec8 	bl	80060b0 <HAL_DMA_Start_IT>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d009      	beq.n	800b33a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2210      	movs	r2, #16
 800b32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e051      	b.n	800b3de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d018      	beq.n	800b374 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b356:	657b      	str	r3, [r7, #84]	; 0x54
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b360:	64bb      	str	r3, [r7, #72]	; 0x48
 800b362:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e6      	bne.n	800b342 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3308      	adds	r3, #8
 800b37a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	e853 3f00 	ldrex	r3, [r3]
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	f043 0301 	orr.w	r3, r3, #1
 800b38a:	653b      	str	r3, [r7, #80]	; 0x50
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b394:	637a      	str	r2, [r7, #52]	; 0x34
 800b396:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b39c:	e841 2300 	strex	r3, r2, [r1]
 800b3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1e5      	bne.n	800b374 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	e853 3f00 	ldrex	r3, [r3]
 800b3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3c8:	623a      	str	r2, [r7, #32]
 800b3ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	69f9      	ldr	r1, [r7, #28]
 800b3ce:	6a3a      	ldr	r2, [r7, #32]
 800b3d0:	e841 2300 	strex	r3, r2, [r1]
 800b3d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e5      	bne.n	800b3a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3758      	adds	r7, #88	; 0x58
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800b5bb 	.word	0x0800b5bb
 800b3ec:	0800b6e3 	.word	0x0800b6e3
 800b3f0:	0800b721 	.word	0x0800b721

0800b3f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b089      	sub	sp, #36	; 0x24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	60bb      	str	r3, [r7, #8]
   return(result);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b410:	61fb      	str	r3, [r7, #28]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6979      	ldr	r1, [r7, #20]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	613b      	str	r3, [r7, #16]
   return(result);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e6      	bne.n	800b3fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b434:	bf00      	nop
 800b436:	3724      	adds	r7, #36	; 0x24
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b440:	b480      	push	{r7}
 800b442:	b095      	sub	sp, #84	; 0x54
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b45c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b466:	643b      	str	r3, [r7, #64]	; 0x40
 800b468:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b46c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e6      	bne.n	800b448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3308      	adds	r3, #8
 800b480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	61fb      	str	r3, [r7, #28]
   return(result);
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	64bb      	str	r3, [r7, #72]	; 0x48
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b49a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b49c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a2:	e841 2300 	strex	r3, r2, [r1]
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e5      	bne.n	800b47a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d118      	bne.n	800b4e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	e853 3f00 	ldrex	r3, [r3]
 800b4c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	f023 0310 	bic.w	r3, r3, #16
 800b4ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	6979      	ldr	r1, [r7, #20]
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e6      	bne.n	800b4b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b4fc:	bf00      	nop
 800b4fe:	3754      	adds	r7, #84	; 0x54
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b090      	sub	sp, #64	; 0x40
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b51e:	d037      	beq.n	800b590 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b522:	2200      	movs	r2, #0
 800b524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3308      	adds	r3, #8
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	623b      	str	r3, [r7, #32]
   return(result);
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b53e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3308      	adds	r3, #8
 800b546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b548:	633a      	str	r2, [r7, #48]	; 0x30
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e5      	bne.n	800b528 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	60fb      	str	r3, [r7, #12]
   return(result);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b570:	637b      	str	r3, [r7, #52]	; 0x34
 800b572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57a:	61fb      	str	r3, [r7, #28]
 800b57c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57e:	69b9      	ldr	r1, [r7, #24]
 800b580:	69fa      	ldr	r2, [r7, #28]
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	617b      	str	r3, [r7, #20]
   return(result);
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e6      	bne.n	800b55c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b58e:	e002      	b.n	800b596 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b590:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b592:	f7ff fa2d 	bl	800a9f0 <HAL_UART_TxCpltCallback>
}
 800b596:	bf00      	nop
 800b598:	3740      	adds	r7, #64	; 0x40
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff fa29 	bl	800aa04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b09c      	sub	sp, #112	; 0x70
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5d0:	d071      	beq.n	800b6b6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e2:	e853 3f00 	ldrex	r3, [r3]
 800b5e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b600:	e841 2300 	strex	r3, r2, [r1]
 800b604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e6      	bne.n	800b5da <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3308      	adds	r3, #8
 800b612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61e:	f023 0301 	bic.w	r3, r3, #1
 800b622:	667b      	str	r3, [r7, #100]	; 0x64
 800b624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3308      	adds	r3, #8
 800b62a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b62c:	647a      	str	r2, [r7, #68]	; 0x44
 800b62e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e5      	bne.n	800b60c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3308      	adds	r3, #8
 800b646:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	e853 3f00 	ldrex	r3, [r3]
 800b64e:	623b      	str	r3, [r7, #32]
   return(result);
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b656:	663b      	str	r3, [r7, #96]	; 0x60
 800b658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3308      	adds	r3, #8
 800b65e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b660:	633a      	str	r2, [r7, #48]	; 0x30
 800b662:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b668:	e841 2300 	strex	r3, r2, [r1]
 800b66c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b670:	2b00      	cmp	r3, #0
 800b672:	d1e5      	bne.n	800b640 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b676:	2220      	movs	r2, #32
 800b678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b680:	2b01      	cmp	r3, #1
 800b682:	d118      	bne.n	800b6b6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	e853 3f00 	ldrex	r3, [r3]
 800b690:	60fb      	str	r3, [r7, #12]
   return(result);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f023 0310 	bic.w	r3, r3, #16
 800b698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6a2:	61fb      	str	r3, [r7, #28]
 800b6a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a6:	69b9      	ldr	r1, [r7, #24]
 800b6a8:	69fa      	ldr	r2, [r7, #28]
 800b6aa:	e841 2300 	strex	r3, r2, [r1]
 800b6ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1e6      	bne.n	800b684 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d107      	bne.n	800b6d4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6ce:	f7ff f9c1 	bl	800aa54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6d2:	e002      	b.n	800b6da <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b6d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6d6:	f7ff f99f 	bl	800aa18 <HAL_UART_RxCpltCallback>
}
 800b6da:	bf00      	nop
 800b6dc:	3770      	adds	r7, #112	; 0x70
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d109      	bne.n	800b712 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b704:	085b      	lsrs	r3, r3, #1
 800b706:	b29b      	uxth	r3, r3
 800b708:	4619      	mov	r1, r3
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f7ff f9a2 	bl	800aa54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b710:	e002      	b.n	800b718 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7ff f98a 	bl	800aa2c <HAL_UART_RxHalfCpltCallback>
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b732:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b746:	2b80      	cmp	r3, #128	; 0x80
 800b748:	d109      	bne.n	800b75e <UART_DMAError+0x3e>
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b21      	cmp	r3, #33	; 0x21
 800b74e:	d106      	bne.n	800b75e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2200      	movs	r2, #0
 800b754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b758:	6978      	ldr	r0, [r7, #20]
 800b75a:	f7ff fe4b 	bl	800b3f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b768:	2b40      	cmp	r3, #64	; 0x40
 800b76a:	d109      	bne.n	800b780 <UART_DMAError+0x60>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b22      	cmp	r3, #34	; 0x22
 800b770:	d106      	bne.n	800b780 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2200      	movs	r2, #0
 800b776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b77a:	6978      	ldr	r0, [r7, #20]
 800b77c:	f7ff fe60 	bl	800b440 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b786:	f043 0210 	orr.w	r2, r3, #16
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f7ff f955 	bl	800aa40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b796:	bf00      	nop
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7ff f93f 	bl	800aa40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c2:	bf00      	nop
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b088      	sub	sp, #32
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	61bb      	str	r3, [r7, #24]
 800b7f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	6979      	ldr	r1, [r7, #20]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	e841 2300 	strex	r3, r2, [r1]
 800b7fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e6      	bne.n	800b7d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff f8ed 	bl	800a9f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b816:	bf00      	nop
 800b818:	3720      	adds	r7, #32
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b820:	b084      	sub	sp, #16
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	f107 001c 	add.w	r0, r7, #28
 800b82e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	2b01      	cmp	r3, #1
 800b836:	d120      	bne.n	800b87a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	4b20      	ldr	r3, [pc, #128]	; (800b8cc <USB_CoreInit+0xac>)
 800b84a:	4013      	ands	r3, r2
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d105      	bne.n	800b86e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f001 fbee 	bl	800d050 <USB_CoreReset>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
 800b878:	e010      	b.n	800b89c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f001 fbe2 	bl	800d050 <USB_CoreReset>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b894:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d10b      	bne.n	800b8ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f043 0206 	orr.w	r2, r3, #6
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f043 0220 	orr.w	r2, r3, #32
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8c6:	b004      	add	sp, #16
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	ffbdffbf 	.word	0xffbdffbf

0800b8d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d165      	bne.n	800b9b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4a41      	ldr	r2, [pc, #260]	; (800b9ec <USB_SetTurnaroundTime+0x11c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d906      	bls.n	800b8fa <USB_SetTurnaroundTime+0x2a>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4a40      	ldr	r2, [pc, #256]	; (800b9f0 <USB_SetTurnaroundTime+0x120>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d202      	bcs.n	800b8fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8f4:	230f      	movs	r3, #15
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e062      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4a3c      	ldr	r2, [pc, #240]	; (800b9f0 <USB_SetTurnaroundTime+0x120>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d306      	bcc.n	800b910 <USB_SetTurnaroundTime+0x40>
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4a3b      	ldr	r2, [pc, #236]	; (800b9f4 <USB_SetTurnaroundTime+0x124>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d202      	bcs.n	800b910 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b90a:	230e      	movs	r3, #14
 800b90c:	617b      	str	r3, [r7, #20]
 800b90e:	e057      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4a38      	ldr	r2, [pc, #224]	; (800b9f4 <USB_SetTurnaroundTime+0x124>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d306      	bcc.n	800b926 <USB_SetTurnaroundTime+0x56>
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	4a37      	ldr	r2, [pc, #220]	; (800b9f8 <USB_SetTurnaroundTime+0x128>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d202      	bcs.n	800b926 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b920:	230d      	movs	r3, #13
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e04c      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	4a33      	ldr	r2, [pc, #204]	; (800b9f8 <USB_SetTurnaroundTime+0x128>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d306      	bcc.n	800b93c <USB_SetTurnaroundTime+0x6c>
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	4a32      	ldr	r2, [pc, #200]	; (800b9fc <USB_SetTurnaroundTime+0x12c>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d802      	bhi.n	800b93c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b936:	230c      	movs	r3, #12
 800b938:	617b      	str	r3, [r7, #20]
 800b93a:	e041      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4a2f      	ldr	r2, [pc, #188]	; (800b9fc <USB_SetTurnaroundTime+0x12c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d906      	bls.n	800b952 <USB_SetTurnaroundTime+0x82>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	4a2e      	ldr	r2, [pc, #184]	; (800ba00 <USB_SetTurnaroundTime+0x130>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d802      	bhi.n	800b952 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b94c:	230b      	movs	r3, #11
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	e036      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4a2a      	ldr	r2, [pc, #168]	; (800ba00 <USB_SetTurnaroundTime+0x130>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d906      	bls.n	800b968 <USB_SetTurnaroundTime+0x98>
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4a29      	ldr	r2, [pc, #164]	; (800ba04 <USB_SetTurnaroundTime+0x134>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d802      	bhi.n	800b968 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b962:	230a      	movs	r3, #10
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e02b      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4a26      	ldr	r2, [pc, #152]	; (800ba04 <USB_SetTurnaroundTime+0x134>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d906      	bls.n	800b97e <USB_SetTurnaroundTime+0xae>
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4a25      	ldr	r2, [pc, #148]	; (800ba08 <USB_SetTurnaroundTime+0x138>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d202      	bcs.n	800b97e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b978:	2309      	movs	r3, #9
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	e020      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	4a21      	ldr	r2, [pc, #132]	; (800ba08 <USB_SetTurnaroundTime+0x138>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d306      	bcc.n	800b994 <USB_SetTurnaroundTime+0xc4>
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	4a20      	ldr	r2, [pc, #128]	; (800ba0c <USB_SetTurnaroundTime+0x13c>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d802      	bhi.n	800b994 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b98e:	2308      	movs	r3, #8
 800b990:	617b      	str	r3, [r7, #20]
 800b992:	e015      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4a1d      	ldr	r2, [pc, #116]	; (800ba0c <USB_SetTurnaroundTime+0x13c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d906      	bls.n	800b9aa <USB_SetTurnaroundTime+0xda>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	4a1c      	ldr	r2, [pc, #112]	; (800ba10 <USB_SetTurnaroundTime+0x140>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d202      	bcs.n	800b9aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b9a4:	2307      	movs	r3, #7
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	e00a      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9aa:	2306      	movs	r3, #6
 800b9ac:	617b      	str	r3, [r7, #20]
 800b9ae:	e007      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9b0:	79fb      	ldrb	r3, [r7, #7]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9b6:	2309      	movs	r3, #9
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e001      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9bc:	2309      	movs	r3, #9
 800b9be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68da      	ldr	r2, [r3, #12]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	029b      	lsls	r3, r3, #10
 800b9d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	371c      	adds	r7, #28
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	00d8acbf 	.word	0x00d8acbf
 800b9f0:	00e4e1c0 	.word	0x00e4e1c0
 800b9f4:	00f42400 	.word	0x00f42400
 800b9f8:	01067380 	.word	0x01067380
 800b9fc:	011a499f 	.word	0x011a499f
 800ba00:	01312cff 	.word	0x01312cff
 800ba04:	014ca43f 	.word	0x014ca43f
 800ba08:	016e3600 	.word	0x016e3600
 800ba0c:	01a6ab1f 	.word	0x01a6ab1f
 800ba10:	01e84800 	.word	0x01e84800

0800ba14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f043 0201 	orr.w	r2, r3, #1
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f023 0201 	bic.w	r2, r3, #1
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d115      	bne.n	800baa6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba86:	2001      	movs	r0, #1
 800ba88:	f7f9 fb0c 	bl	80050a4 <HAL_Delay>
      ms++;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f001 fa4b 	bl	800cf2e <USB_GetMode>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d01e      	beq.n	800badc <USB_SetCurrentMode+0x84>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b31      	cmp	r3, #49	; 0x31
 800baa2:	d9f0      	bls.n	800ba86 <USB_SetCurrentMode+0x2e>
 800baa4:	e01a      	b.n	800badc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d115      	bne.n	800bad8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bab8:	2001      	movs	r0, #1
 800baba:	f7f9 faf3 	bl	80050a4 <HAL_Delay>
      ms++;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3301      	adds	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f001 fa32 	bl	800cf2e <USB_GetMode>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d005      	beq.n	800badc <USB_SetCurrentMode+0x84>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b31      	cmp	r3, #49	; 0x31
 800bad4:	d9f0      	bls.n	800bab8 <USB_SetCurrentMode+0x60>
 800bad6:	e001      	b.n	800badc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e005      	b.n	800bae8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b32      	cmp	r3, #50	; 0x32
 800bae0:	d101      	bne.n	800bae6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e000      	b.n	800bae8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800baf0:	b084      	sub	sp, #16
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b086      	sub	sp, #24
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bafe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	613b      	str	r3, [r7, #16]
 800bb0e:	e009      	b.n	800bb24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	3340      	adds	r3, #64	; 0x40
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	3301      	adds	r3, #1
 800bb22:	613b      	str	r3, [r7, #16]
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	2b0e      	cmp	r3, #14
 800bb28:	d9f2      	bls.n	800bb10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d11c      	bne.n	800bb6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb3e:	f043 0302 	orr.w	r3, r3, #2
 800bb42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	e005      	b.n	800bb76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb90:	461a      	mov	r2, r3
 800bb92:	680b      	ldr	r3, [r1, #0]
 800bb94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d10c      	bne.n	800bbb6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bba2:	2100      	movs	r1, #0
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f965 	bl	800be74 <USB_SetDevSpeed>
 800bbaa:	e008      	b.n	800bbbe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbac:	2101      	movs	r1, #1
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f960 	bl	800be74 <USB_SetDevSpeed>
 800bbb4:	e003      	b.n	800bbbe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbb6:	2103      	movs	r1, #3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f95b 	bl	800be74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbbe:	2110      	movs	r1, #16
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f8f3 	bl	800bdac <USB_FlushTxFifo>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f91f 	bl	800be14 <USB_FlushRxFifo>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	2300      	movs	r3, #0
 800bbea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfe:	461a      	mov	r2, r3
 800bc00:	2300      	movs	r3, #0
 800bc02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc04:	2300      	movs	r3, #0
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	e043      	b.n	800bc92 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	015a      	lsls	r2, r3, #5
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc20:	d118      	bne.n	800bc54 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc34:	461a      	mov	r2, r3
 800bc36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	e013      	b.n	800bc66 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	e008      	b.n	800bc66 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc60:	461a      	mov	r2, r3
 800bc62:	2300      	movs	r3, #0
 800bc64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc72:	461a      	mov	r2, r3
 800bc74:	2300      	movs	r3, #0
 800bc76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc84:	461a      	mov	r2, r3
 800bc86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	613b      	str	r3, [r7, #16]
 800bc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d3b7      	bcc.n	800bc0a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	613b      	str	r3, [r7, #16]
 800bc9e:	e043      	b.n	800bd28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	015a      	lsls	r2, r3, #5
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	4413      	add	r3, r2
 800bca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb6:	d118      	bne.n	800bcea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcca:	461a      	mov	r2, r3
 800bccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	e013      	b.n	800bcfc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce0:	461a      	mov	r2, r3
 800bce2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	e008      	b.n	800bcfc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	015a      	lsls	r2, r3, #5
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4413      	add	r3, r2
 800bd04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd08:	461a      	mov	r2, r3
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	015a      	lsls	r2, r3, #5
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3301      	adds	r3, #1
 800bd26:	613b      	str	r3, [r7, #16]
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d3b7      	bcc.n	800bca0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	f043 0210 	orr.w	r2, r3, #16
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	699a      	ldr	r2, [r3, #24]
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <USB_DevInit+0x2b4>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d005      	beq.n	800bd82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	f043 0208 	orr.w	r2, r3, #8
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d105      	bne.n	800bd94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699a      	ldr	r2, [r3, #24]
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <USB_DevInit+0x2b8>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bda0:	b004      	add	sp, #16
 800bda2:	4770      	bx	lr
 800bda4:	803c3800 	.word	0x803c3800
 800bda8:	40000004 	.word	0x40000004

0800bdac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4a13      	ldr	r2, [pc, #76]	; (800be10 <USB_FlushTxFifo+0x64>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d901      	bls.n	800bdcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e01b      	b.n	800be04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	daf2      	bge.n	800bdba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	019b      	lsls	r3, r3, #6
 800bddc:	f043 0220 	orr.w	r2, r3, #32
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3301      	adds	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	4a08      	ldr	r2, [pc, #32]	; (800be10 <USB_FlushTxFifo+0x64>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d901      	bls.n	800bdf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e006      	b.n	800be04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f003 0320 	and.w	r3, r3, #32
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d0f0      	beq.n	800bde4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	00030d40 	.word	0x00030d40

0800be14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3301      	adds	r3, #1
 800be24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4a11      	ldr	r2, [pc, #68]	; (800be70 <USB_FlushRxFifo+0x5c>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d901      	bls.n	800be32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e018      	b.n	800be64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	daf2      	bge.n	800be20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2210      	movs	r2, #16
 800be42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	3301      	adds	r3, #1
 800be48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	4a08      	ldr	r2, [pc, #32]	; (800be70 <USB_FlushRxFifo+0x5c>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d901      	bls.n	800be56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e006      	b.n	800be64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	f003 0310 	and.w	r3, r3, #16
 800be5e:	2b10      	cmp	r3, #16
 800be60:	d0f0      	beq.n	800be44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	00030d40 	.word	0x00030d40

0800be74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	460b      	mov	r3, r1
 800be7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be94:	4313      	orrs	r3, r2
 800be96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b087      	sub	sp, #28
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f003 0306 	and.w	r3, r3, #6
 800bebe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bec6:	2300      	movs	r3, #0
 800bec8:	75fb      	strb	r3, [r7, #23]
 800beca:	e00a      	b.n	800bee2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d002      	beq.n	800bed8 <USB_GetDevSpeed+0x32>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b06      	cmp	r3, #6
 800bed6:	d102      	bne.n	800bede <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bed8:	2302      	movs	r3, #2
 800beda:	75fb      	strb	r3, [r7, #23]
 800bedc:	e001      	b.n	800bee2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bede:	230f      	movs	r3, #15
 800bee0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	371c      	adds	r7, #28
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d139      	bne.n	800bf80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf12:	69da      	ldr	r2, [r3, #28]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	68f9      	ldr	r1, [r7, #12]
 800bf26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d153      	bne.n	800bfec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	015a      	lsls	r2, r3, #5
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	791b      	ldrb	r3, [r3, #4]
 800bf5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	059b      	lsls	r3, r3, #22
 800bf66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	0159      	lsls	r1, r3, #5
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	440b      	add	r3, r1
 800bf72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf76:	4619      	mov	r1, r3
 800bf78:	4b20      	ldr	r3, [pc, #128]	; (800bffc <USB_ActivateEndpoint+0x10c>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	600b      	str	r3, [r1, #0]
 800bf7e:	e035      	b.n	800bfec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf86:	69da      	ldr	r2, [r3, #28]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	f003 030f 	and.w	r3, r3, #15
 800bf90:	2101      	movs	r1, #1
 800bf92:	fa01 f303 	lsl.w	r3, r1, r3
 800bf96:	041b      	lsls	r3, r3, #16
 800bf98:	68f9      	ldr	r1, [r7, #12]
 800bf9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	015a      	lsls	r2, r3, #5
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d119      	bne.n	800bfec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	0159      	lsls	r1, r3, #5
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	440b      	add	r3, r1
 800bfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4b05      	ldr	r3, [pc, #20]	; (800bffc <USB_ActivateEndpoint+0x10c>)
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	10008000 	.word	0x10008000

0800c000 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	785b      	ldrb	r3, [r3, #1]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d161      	bne.n	800c0e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c02e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c032:	d11f      	bne.n	800c074 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	0151      	lsls	r1, r2, #5
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	440a      	add	r2, r1
 800c04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c04e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c052:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	015a      	lsls	r2, r3, #5
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4413      	add	r3, r2
 800c05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	0151      	lsls	r1, r2, #5
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	440a      	add	r2, r1
 800c06a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c06e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c072:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c07a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	f003 030f 	and.w	r3, r3, #15
 800c084:	2101      	movs	r1, #1
 800c086:	fa01 f303 	lsl.w	r3, r1, r3
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	43db      	mvns	r3, r3
 800c08e:	68f9      	ldr	r1, [r7, #12]
 800c090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c094:	4013      	ands	r3, r2
 800c096:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c09e:	69da      	ldr	r2, [r3, #28]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	f003 030f 	and.w	r3, r3, #15
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	43db      	mvns	r3, r3
 800c0b2:	68f9      	ldr	r1, [r7, #12]
 800c0b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	0159      	lsls	r1, r3, #5
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	440b      	add	r3, r1
 800c0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4b35      	ldr	r3, [pc, #212]	; (800c1b0 <USB_DeactivateEndpoint+0x1b0>)
 800c0da:	4013      	ands	r3, r2
 800c0dc:	600b      	str	r3, [r1, #0]
 800c0de:	e060      	b.n	800c1a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0f6:	d11f      	bne.n	800c138 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	0151      	lsls	r1, r2, #5
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	440a      	add	r2, r1
 800c10e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c116:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	0151      	lsls	r1, r2, #5
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	440a      	add	r2, r1
 800c12e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c136:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f003 030f 	and.w	r3, r3, #15
 800c148:	2101      	movs	r1, #1
 800c14a:	fa01 f303 	lsl.w	r3, r1, r3
 800c14e:	041b      	lsls	r3, r3, #16
 800c150:	43db      	mvns	r3, r3
 800c152:	68f9      	ldr	r1, [r7, #12]
 800c154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c158:	4013      	ands	r3, r2
 800c15a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c162:	69da      	ldr	r2, [r3, #28]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f003 030f 	and.w	r3, r3, #15
 800c16c:	2101      	movs	r1, #1
 800c16e:	fa01 f303 	lsl.w	r3, r1, r3
 800c172:	041b      	lsls	r3, r3, #16
 800c174:	43db      	mvns	r3, r3
 800c176:	68f9      	ldr	r1, [r7, #12]
 800c178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c17c:	4013      	ands	r3, r2
 800c17e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	015a      	lsls	r2, r3, #5
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4413      	add	r3, r2
 800c188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	0159      	lsls	r1, r3, #5
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	440b      	add	r3, r1
 800c196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19a:	4619      	mov	r1, r3
 800c19c:	4b05      	ldr	r3, [pc, #20]	; (800c1b4 <USB_DeactivateEndpoint+0x1b4>)
 800c19e:	4013      	ands	r3, r2
 800c1a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	ec337800 	.word	0xec337800
 800c1b4:	eff37800 	.word	0xeff37800

0800c1b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	785b      	ldrb	r3, [r3, #1]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	f040 8163 	bne.w	800c4a0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d132      	bne.n	800c248 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ee:	691a      	ldr	r2, [r3, #16]
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	0159      	lsls	r1, r3, #5
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	440b      	add	r3, r1
 800c1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4ba5      	ldr	r3, [pc, #660]	; (800c494 <USB_EPStartXfer+0x2dc>)
 800c200:	4013      	ands	r3, r2
 800c202:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	69ba      	ldr	r2, [r7, #24]
 800c214:	0151      	lsls	r1, r2, #5
 800c216:	69fa      	ldr	r2, [r7, #28]
 800c218:	440a      	add	r2, r1
 800c21a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c21e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c230:	691a      	ldr	r2, [r3, #16]
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	0159      	lsls	r1, r3, #5
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	440b      	add	r3, r1
 800c23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c23e:	4619      	mov	r1, r3
 800c240:	4b95      	ldr	r3, [pc, #596]	; (800c498 <USB_EPStartXfer+0x2e0>)
 800c242:	4013      	ands	r3, r2
 800c244:	610b      	str	r3, [r1, #16]
 800c246:	e074      	b.n	800c332 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	015a      	lsls	r2, r3, #5
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	4413      	add	r3, r2
 800c250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	0159      	lsls	r1, r3, #5
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	440b      	add	r3, r1
 800c25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c262:	4619      	mov	r1, r3
 800c264:	4b8c      	ldr	r3, [pc, #560]	; (800c498 <USB_EPStartXfer+0x2e0>)
 800c266:	4013      	ands	r3, r2
 800c268:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c276:	691a      	ldr	r2, [r3, #16]
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	0159      	lsls	r1, r3, #5
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	440b      	add	r3, r1
 800c280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c284:	4619      	mov	r1, r3
 800c286:	4b83      	ldr	r3, [pc, #524]	; (800c494 <USB_EPStartXfer+0x2dc>)
 800c288:	4013      	ands	r3, r2
 800c28a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	4413      	add	r3, r2
 800c294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c298:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	6999      	ldr	r1, [r3, #24]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	440b      	add	r3, r1
 800c2a4:	1e59      	subs	r1, r3, #1
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800c2ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c2b0:	4b7a      	ldr	r3, [pc, #488]	; (800c49c <USB_EPStartXfer+0x2e4>)
 800c2b2:	400b      	ands	r3, r1
 800c2b4:	69b9      	ldr	r1, [r7, #24]
 800c2b6:	0148      	lsls	r0, r1, #5
 800c2b8:	69f9      	ldr	r1, [r7, #28]
 800c2ba:	4401      	add	r1, r0
 800c2bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	015a      	lsls	r2, r3, #5
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2da:	69b9      	ldr	r1, [r7, #24]
 800c2dc:	0148      	lsls	r0, r1, #5
 800c2de:	69f9      	ldr	r1, [r7, #28]
 800c2e0:	4401      	add	r1, r0
 800c2e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	791b      	ldrb	r3, [r3, #4]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d11f      	bne.n	800c332 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	0151      	lsls	r1, r2, #5
 800c304:	69fa      	ldr	r2, [r7, #28]
 800c306:	440a      	add	r2, r1
 800c308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c30c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c310:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	015a      	lsls	r2, r3, #5
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	4413      	add	r3, r2
 800c31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	0151      	lsls	r1, r2, #5
 800c324:	69fa      	ldr	r2, [r7, #28]
 800c326:	440a      	add	r2, r1
 800c328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c32c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c330:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d14b      	bne.n	800c3d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	695b      	ldr	r3, [r3, #20]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d009      	beq.n	800c354 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34c:	461a      	mov	r2, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	791b      	ldrb	r3, [r3, #4]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d128      	bne.n	800c3ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d110      	bne.n	800c38e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	0151      	lsls	r1, r2, #5
 800c37e:	69fa      	ldr	r2, [r7, #28]
 800c380:	440a      	add	r2, r1
 800c382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	e00f      	b.n	800c3ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	0151      	lsls	r1, r2, #5
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	440a      	add	r2, r1
 800c3a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	e137      	b.n	800c640 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	015a      	lsls	r2, r3, #5
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	0151      	lsls	r1, r2, #5
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	440a      	add	r2, r1
 800c3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	791b      	ldrb	r3, [r3, #4]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d015      	beq.n	800c424 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f000 811f 	beq.w	800c640 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	f003 030f 	and.w	r3, r3, #15
 800c412:	2101      	movs	r1, #1
 800c414:	fa01 f303 	lsl.w	r3, r1, r3
 800c418:	69f9      	ldr	r1, [r7, #28]
 800c41a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c41e:	4313      	orrs	r3, r2
 800c420:	634b      	str	r3, [r1, #52]	; 0x34
 800c422:	e10d      	b.n	800c640 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c430:	2b00      	cmp	r3, #0
 800c432:	d110      	bne.n	800c456 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	69ba      	ldr	r2, [r7, #24]
 800c444:	0151      	lsls	r1, r2, #5
 800c446:	69fa      	ldr	r2, [r7, #28]
 800c448:	440a      	add	r2, r1
 800c44a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c44e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	e00f      	b.n	800c476 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	0151      	lsls	r1, r2, #5
 800c468:	69fa      	ldr	r2, [r7, #28]
 800c46a:	440a      	add	r2, r1
 800c46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c474:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	6919      	ldr	r1, [r3, #16]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	781a      	ldrb	r2, [r3, #0]
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	b298      	uxth	r0, r3
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	4603      	mov	r3, r0
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 faea 	bl	800ca64 <USB_WritePacket>
 800c490:	e0d6      	b.n	800c640 <USB_EPStartXfer+0x488>
 800c492:	bf00      	nop
 800c494:	e007ffff 	.word	0xe007ffff
 800c498:	fff80000 	.word	0xfff80000
 800c49c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	015a      	lsls	r2, r3, #5
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ac:	691a      	ldr	r2, [r3, #16]
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	0159      	lsls	r1, r3, #5
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	440b      	add	r3, r1
 800c4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4b63      	ldr	r3, [pc, #396]	; (800c64c <USB_EPStartXfer+0x494>)
 800c4be:	4013      	ands	r3, r2
 800c4c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ce:	691a      	ldr	r2, [r3, #16]
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	0159      	lsls	r1, r3, #5
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	440b      	add	r3, r1
 800c4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4b5c      	ldr	r3, [pc, #368]	; (800c650 <USB_EPStartXfer+0x498>)
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d123      	bne.n	800c534 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f8:	691a      	ldr	r2, [r3, #16]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c502:	69b9      	ldr	r1, [r7, #24]
 800c504:	0148      	lsls	r0, r1, #5
 800c506:	69f9      	ldr	r1, [r7, #28]
 800c508:	4401      	add	r1, r0
 800c50a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c50e:	4313      	orrs	r3, r2
 800c510:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	0151      	lsls	r1, r2, #5
 800c524:	69fa      	ldr	r2, [r7, #28]
 800c526:	440a      	add	r2, r1
 800c528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c52c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c530:	6113      	str	r3, [r2, #16]
 800c532:	e037      	b.n	800c5a4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	699a      	ldr	r2, [r3, #24]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	4413      	add	r3, r2
 800c53e:	1e5a      	subs	r2, r3, #1
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	fbb2 f3f3 	udiv	r3, r2, r3
 800c548:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	8afa      	ldrh	r2, [r7, #22]
 800c550:	fb03 f202 	mul.w	r2, r3, r2
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c564:	691a      	ldr	r2, [r3, #16]
 800c566:	8afb      	ldrh	r3, [r7, #22]
 800c568:	04d9      	lsls	r1, r3, #19
 800c56a:	4b3a      	ldr	r3, [pc, #232]	; (800c654 <USB_EPStartXfer+0x49c>)
 800c56c:	400b      	ands	r3, r1
 800c56e:	69b9      	ldr	r1, [r7, #24]
 800c570:	0148      	lsls	r0, r1, #5
 800c572:	69f9      	ldr	r1, [r7, #28]
 800c574:	4401      	add	r1, r0
 800c576:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c57a:	4313      	orrs	r3, r2
 800c57c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	015a      	lsls	r2, r3, #5
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	4413      	add	r3, r2
 800c586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c58a:	691a      	ldr	r2, [r3, #16]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c594:	69b9      	ldr	r1, [r7, #24]
 800c596:	0148      	lsls	r0, r1, #5
 800c598:	69f9      	ldr	r1, [r7, #28]
 800c59a:	4401      	add	r1, r0
 800c59c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d10d      	bne.n	800c5c6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	6919      	ldr	r1, [r3, #16]
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c2:	460a      	mov	r2, r1
 800c5c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	791b      	ldrb	r3, [r3, #4]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d128      	bne.n	800c620 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d110      	bne.n	800c600 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	69ba      	ldr	r2, [r7, #24]
 800c5ee:	0151      	lsls	r1, r2, #5
 800c5f0:	69fa      	ldr	r2, [r7, #28]
 800c5f2:	440a      	add	r2, r1
 800c5f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	e00f      	b.n	800c620 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	0151      	lsls	r1, r2, #5
 800c612:	69fa      	ldr	r2, [r7, #28]
 800c614:	440a      	add	r2, r1
 800c616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c61a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c61e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	69ba      	ldr	r2, [r7, #24]
 800c630:	0151      	lsls	r1, r2, #5
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	440a      	add	r2, r1
 800c636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c63a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c63e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3720      	adds	r7, #32
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	fff80000 	.word	0xfff80000
 800c650:	e007ffff 	.word	0xe007ffff
 800c654:	1ff80000 	.word	0x1ff80000

0800c658 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	4613      	mov	r3, r2
 800c664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	785b      	ldrb	r3, [r3, #1]
 800c674:	2b01      	cmp	r3, #1
 800c676:	f040 80ce 	bne.w	800c816 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d132      	bne.n	800c6e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	015a      	lsls	r2, r3, #5
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	4413      	add	r3, r2
 800c68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68e:	691a      	ldr	r2, [r3, #16]
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	0159      	lsls	r1, r3, #5
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	440b      	add	r3, r1
 800c698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69c:	4619      	mov	r1, r3
 800c69e:	4b9a      	ldr	r3, [pc, #616]	; (800c908 <USB_EP0StartXfer+0x2b0>)
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	0151      	lsls	r1, r2, #5
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	440a      	add	r2, r1
 800c6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d0:	691a      	ldr	r2, [r3, #16]
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	0159      	lsls	r1, r3, #5
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	440b      	add	r3, r1
 800c6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4b8a      	ldr	r3, [pc, #552]	; (800c90c <USB_EP0StartXfer+0x2b4>)
 800c6e2:	4013      	ands	r3, r2
 800c6e4:	610b      	str	r3, [r1, #16]
 800c6e6:	e04e      	b.n	800c786 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f4:	691a      	ldr	r2, [r3, #16]
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	0159      	lsls	r1, r3, #5
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	440b      	add	r3, r1
 800c6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c702:	4619      	mov	r1, r3
 800c704:	4b81      	ldr	r3, [pc, #516]	; (800c90c <USB_EP0StartXfer+0x2b4>)
 800c706:	4013      	ands	r3, r2
 800c708:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c716:	691a      	ldr	r2, [r3, #16]
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	0159      	lsls	r1, r3, #5
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	440b      	add	r3, r1
 800c720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c724:	4619      	mov	r1, r3
 800c726:	4b78      	ldr	r3, [pc, #480]	; (800c908 <USB_EP0StartXfer+0x2b0>)
 800c728:	4013      	ands	r3, r2
 800c72a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	699a      	ldr	r2, [r3, #24]
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	429a      	cmp	r2, r3
 800c736:	d903      	bls.n	800c740 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	68da      	ldr	r2, [r3, #12]
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	0151      	lsls	r1, r2, #5
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	440a      	add	r2, r1
 800c756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c75a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c75e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	015a      	lsls	r2, r3, #5
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	4413      	add	r3, r2
 800c768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c76c:	691a      	ldr	r2, [r3, #16]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c776:	6939      	ldr	r1, [r7, #16]
 800c778:	0148      	lsls	r0, r1, #5
 800c77a:	6979      	ldr	r1, [r7, #20]
 800c77c:	4401      	add	r1, r0
 800c77e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c782:	4313      	orrs	r3, r2
 800c784:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d11e      	bne.n	800c7ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d009      	beq.n	800c7a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	0151      	lsls	r1, r2, #5
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	440a      	add	r2, r1
 800c7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	e097      	b.n	800c8fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	0151      	lsls	r1, r2, #5
 800c7dc:	697a      	ldr	r2, [r7, #20]
 800c7de:	440a      	add	r2, r1
 800c7e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	699b      	ldr	r3, [r3, #24]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 8083 	beq.w	800c8fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	f003 030f 	and.w	r3, r3, #15
 800c804:	2101      	movs	r1, #1
 800c806:	fa01 f303 	lsl.w	r3, r1, r3
 800c80a:	6979      	ldr	r1, [r7, #20]
 800c80c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c810:	4313      	orrs	r3, r2
 800c812:	634b      	str	r3, [r1, #52]	; 0x34
 800c814:	e071      	b.n	800c8fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	015a      	lsls	r2, r3, #5
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	4413      	add	r3, r2
 800c81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c822:	691a      	ldr	r2, [r3, #16]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	0159      	lsls	r1, r3, #5
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	440b      	add	r3, r1
 800c82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c830:	4619      	mov	r1, r3
 800c832:	4b36      	ldr	r3, [pc, #216]	; (800c90c <USB_EP0StartXfer+0x2b4>)
 800c834:	4013      	ands	r3, r2
 800c836:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c844:	691a      	ldr	r2, [r3, #16]
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	0159      	lsls	r1, r3, #5
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	440b      	add	r3, r1
 800c84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c852:	4619      	mov	r1, r3
 800c854:	4b2c      	ldr	r3, [pc, #176]	; (800c908 <USB_EP0StartXfer+0x2b0>)
 800c856:	4013      	ands	r3, r2
 800c858:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	68da      	ldr	r2, [r3, #12]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	0151      	lsls	r1, r2, #5
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	440a      	add	r2, r1
 800c888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c88c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8a8:	6939      	ldr	r1, [r7, #16]
 800c8aa:	0148      	lsls	r0, r1, #5
 800c8ac:	6979      	ldr	r1, [r7, #20]
 800c8ae:	4401      	add	r1, r0
 800c8b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d10d      	bne.n	800c8da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d009      	beq.n	800c8da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6919      	ldr	r1, [r3, #16]
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d6:	460a      	mov	r2, r1
 800c8d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	015a      	lsls	r2, r3, #5
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	693a      	ldr	r2, [r7, #16]
 800c8ea:	0151      	lsls	r1, r2, #5
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	440a      	add	r2, r1
 800c8f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c8f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	371c      	adds	r7, #28
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	e007ffff 	.word	0xe007ffff
 800c90c:	fff80000 	.word	0xfff80000

0800c910 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	785b      	ldrb	r3, [r3, #1]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d14a      	bne.n	800c9c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	4413      	add	r3, r2
 800c938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c946:	f040 8086 	bne.w	800ca56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	7812      	ldrb	r2, [r2, #0]
 800c95e:	0151      	lsls	r1, r2, #5
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	440a      	add	r2, r1
 800c964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c968:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c96c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	683a      	ldr	r2, [r7, #0]
 800c980:	7812      	ldrb	r2, [r2, #0]
 800c982:	0151      	lsls	r1, r2, #5
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	440a      	add	r2, r1
 800c988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c98c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c990:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3301      	adds	r3, #1
 800c996:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d902      	bls.n	800c9a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	75fb      	strb	r3, [r7, #23]
          break;
 800c9a6:	e056      	b.n	800ca56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	015a      	lsls	r2, r3, #5
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9c0:	d0e7      	beq.n	800c992 <USB_EPStopXfer+0x82>
 800c9c2:	e048      	b.n	800ca56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	015a      	lsls	r2, r3, #5
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9dc:	d13b      	bne.n	800ca56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	7812      	ldrb	r2, [r2, #0]
 800c9f2:	0151      	lsls	r1, r2, #5
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	440a      	add	r2, r1
 800c9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	683a      	ldr	r2, [r7, #0]
 800ca14:	7812      	ldrb	r2, [r2, #0]
 800ca16:	0151      	lsls	r1, r2, #5
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	440a      	add	r2, r1
 800ca1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d902      	bls.n	800ca3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	75fb      	strb	r3, [r7, #23]
          break;
 800ca3a:	e00c      	b.n	800ca56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca54:	d0e7      	beq.n	800ca26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	371c      	adds	r7, #28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b089      	sub	sp, #36	; 0x24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4611      	mov	r1, r2
 800ca70:	461a      	mov	r2, r3
 800ca72:	460b      	mov	r3, r1
 800ca74:	71fb      	strb	r3, [r7, #7]
 800ca76:	4613      	mov	r3, r2
 800ca78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ca82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d123      	bne.n	800cad2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ca8a:	88bb      	ldrh	r3, [r7, #4]
 800ca8c:	3303      	adds	r3, #3
 800ca8e:	089b      	lsrs	r3, r3, #2
 800ca90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ca92:	2300      	movs	r3, #0
 800ca94:	61bb      	str	r3, [r7, #24]
 800ca96:	e018      	b.n	800caca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	031a      	lsls	r2, r3, #12
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa4:	461a      	mov	r2, r3
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	3301      	adds	r3, #1
 800cab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	3301      	adds	r3, #1
 800cab6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	3301      	adds	r3, #1
 800cabc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	3301      	adds	r3, #1
 800cac2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	3301      	adds	r3, #1
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d3e2      	bcc.n	800ca98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3724      	adds	r7, #36	; 0x24
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b08b      	sub	sp, #44	; 0x2c
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	4613      	mov	r3, r2
 800caec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800caf6:	88fb      	ldrh	r3, [r7, #6]
 800caf8:	089b      	lsrs	r3, r3, #2
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cafe:	88fb      	ldrh	r3, [r7, #6]
 800cb00:	f003 0303 	and.w	r3, r3, #3
 800cb04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb06:	2300      	movs	r3, #0
 800cb08:	623b      	str	r3, [r7, #32]
 800cb0a:	e014      	b.n	800cb36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	3301      	adds	r3, #1
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	3301      	adds	r3, #1
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	3301      	adds	r3, #1
 800cb34:	623b      	str	r3, [r7, #32]
 800cb36:	6a3a      	ldr	r2, [r7, #32]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d3e6      	bcc.n	800cb0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cb3e:	8bfb      	ldrh	r3, [r7, #30]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d01e      	beq.n	800cb82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cb44:	2300      	movs	r3, #0
 800cb46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f107 0310 	add.w	r3, r7, #16
 800cb54:	6812      	ldr	r2, [r2, #0]
 800cb56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	fa22 f303 	lsr.w	r3, r2, r3
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	701a      	strb	r2, [r3, #0]
      i++;
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	623b      	str	r3, [r7, #32]
      pDest++;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	3301      	adds	r3, #1
 800cb74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cb76:	8bfb      	ldrh	r3, [r7, #30]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cb7c:	8bfb      	ldrh	r3, [r7, #30]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1ea      	bne.n	800cb58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	372c      	adds	r7, #44	; 0x2c
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	785b      	ldrb	r3, [r3, #1]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d12c      	bne.n	800cc06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	db12      	blt.n	800cbe4 <USB_EPSetStall+0x54>
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00f      	beq.n	800cbe4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	0151      	lsls	r1, r2, #5
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	440a      	add	r2, r1
 800cbda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbe2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	015a      	lsls	r2, r3, #5
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	4413      	add	r3, r2
 800cbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	0151      	lsls	r1, r2, #5
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	440a      	add	r2, r1
 800cbfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	e02b      	b.n	800cc5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	015a      	lsls	r2, r3, #5
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	db12      	blt.n	800cc3e <USB_EPSetStall+0xae>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00f      	beq.n	800cc3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	0151      	lsls	r1, r2, #5
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	440a      	add	r2, r1
 800cc34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	015a      	lsls	r2, r3, #5
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	4413      	add	r3, r2
 800cc46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	0151      	lsls	r1, r2, #5
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	440a      	add	r2, r1
 800cc54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	785b      	ldrb	r3, [r3, #1]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d128      	bne.n	800ccda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	0151      	lsls	r1, r2, #5
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	440a      	add	r2, r1
 800cc9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cca2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cca6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	791b      	ldrb	r3, [r3, #4]
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d003      	beq.n	800ccb8 <USB_EPClearStall+0x4c>
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	791b      	ldrb	r3, [r3, #4]
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d138      	bne.n	800cd2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	015a      	lsls	r2, r3, #5
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	0151      	lsls	r1, r2, #5
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	440a      	add	r2, r1
 800ccce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	e027      	b.n	800cd2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	015a      	lsls	r2, r3, #5
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	4413      	add	r3, r2
 800cce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	0151      	lsls	r1, r2, #5
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	440a      	add	r2, r1
 800ccf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ccf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	791b      	ldrb	r3, [r3, #4]
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d003      	beq.n	800cd0a <USB_EPClearStall+0x9e>
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	791b      	ldrb	r3, [r3, #4]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d10f      	bne.n	800cd2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	015a      	lsls	r2, r3, #5
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	4413      	add	r3, r2
 800cd12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	0151      	lsls	r1, r2, #5
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	440a      	add	r2, r1
 800cd20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cd5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	78fb      	ldrb	r3, [r7, #3]
 800cd66:	011b      	lsls	r3, r3, #4
 800cd68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cd6c:	68f9      	ldr	r1, [r7, #12]
 800cd6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd72:	4313      	orrs	r3, r2
 800cd74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd9e:	f023 0303 	bic.w	r3, r3, #3
 800cda2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdb2:	f023 0302 	bic.w	r3, r3, #2
 800cdb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b085      	sub	sp, #20
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cde0:	f023 0303 	bic.w	r3, r3, #3
 800cde4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdf4:	f043 0302 	orr.w	r3, r3, #2
 800cdf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce20:	68fb      	ldr	r3, [r7, #12]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b085      	sub	sp, #20
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	4013      	ands	r3, r2
 800ce50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	0c1b      	lsrs	r3, r3, #16
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce62:	b480      	push	{r7}
 800ce64:	b085      	sub	sp, #20
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce74:	699b      	ldr	r3, [r3, #24]
 800ce76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	4013      	ands	r3, r2
 800ce84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	b29b      	uxth	r3, r3
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b085      	sub	sp, #20
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cea6:	78fb      	ldrb	r3, [r7, #3]
 800cea8:	015a      	lsls	r2, r3, #5
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	4413      	add	r3, r2
 800ceae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	4013      	ands	r3, r2
 800cec2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cec4:	68bb      	ldr	r3, [r7, #8]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b087      	sub	sp, #28
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	460b      	mov	r3, r1
 800cedc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	f003 030f 	and.w	r3, r3, #15
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	fa22 f303 	lsr.w	r3, r2, r3
 800cf02:	01db      	lsls	r3, r3, #7
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	015a      	lsls	r2, r3, #5
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf20:	68bb      	ldr	r3, [r7, #8]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b083      	sub	sp, #12
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	f003 0301 	and.w	r3, r3, #1
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
	...

0800cf4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf66:	4619      	mov	r1, r3
 800cf68:	4b09      	ldr	r3, [pc, #36]	; (800cf90 <USB_ActivateSetup+0x44>)
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	fffff800 	.word	0xfffff800

0800cf94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	333c      	adds	r3, #60	; 0x3c
 800cfaa:	3304      	adds	r3, #4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	4a26      	ldr	r2, [pc, #152]	; (800d04c <USB_EP0_OutStart+0xb8>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d90a      	bls.n	800cfce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfc8:	d101      	bne.n	800cfce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e037      	b.n	800d03e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cffc:	f043 0318 	orr.w	r3, r3, #24
 800d000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d014:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d016:	7afb      	ldrb	r3, [r7, #11]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d10f      	bne.n	800d03c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d022:	461a      	mov	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d036:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d03a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	4f54300a 	.word	0x4f54300a

0800d050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	3301      	adds	r3, #1
 800d060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	4a13      	ldr	r2, [pc, #76]	; (800d0b4 <USB_CoreReset+0x64>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d901      	bls.n	800d06e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d06a:	2303      	movs	r3, #3
 800d06c:	e01b      	b.n	800d0a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	daf2      	bge.n	800d05c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d076:	2300      	movs	r3, #0
 800d078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	f043 0201 	orr.w	r2, r3, #1
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3301      	adds	r3, #1
 800d08a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	4a09      	ldr	r2, [pc, #36]	; (800d0b4 <USB_CoreReset+0x64>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d901      	bls.n	800d098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	e006      	b.n	800d0a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d0f0      	beq.n	800d086 <USB_CoreReset+0x36>

  return HAL_OK;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	00030d40 	.word	0x00030d40

0800d0b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d0c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d0c8:	f013 fa12 	bl	80204f0 <malloc>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d109      	bne.n	800d0ea <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	32b0      	adds	r2, #176	; 0xb0
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	e0d4      	b.n	800d294 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d0ea:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f013 ff89 	bl	8021008 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	32b0      	adds	r2, #176	; 0xb0
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	32b0      	adds	r2, #176	; 0xb0
 800d110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7c1b      	ldrb	r3, [r3, #16]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d138      	bne.n	800d194 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d122:	4b5e      	ldr	r3, [pc, #376]	; (800d29c <USBD_CDC_Init+0x1e4>)
 800d124:	7819      	ldrb	r1, [r3, #0]
 800d126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d12a:	2202      	movs	r2, #2
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f005 fb0a 	bl	8012746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d132:	4b5a      	ldr	r3, [pc, #360]	; (800d29c <USBD_CDC_Init+0x1e4>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	f003 020f 	and.w	r2, r3, #15
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	4613      	mov	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	440b      	add	r3, r1
 800d146:	3324      	adds	r3, #36	; 0x24
 800d148:	2201      	movs	r2, #1
 800d14a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d14c:	4b54      	ldr	r3, [pc, #336]	; (800d2a0 <USBD_CDC_Init+0x1e8>)
 800d14e:	7819      	ldrb	r1, [r3, #0]
 800d150:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d154:	2202      	movs	r2, #2
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f005 faf5 	bl	8012746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d15c:	4b50      	ldr	r3, [pc, #320]	; (800d2a0 <USBD_CDC_Init+0x1e8>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	f003 020f 	and.w	r2, r3, #15
 800d164:	6879      	ldr	r1, [r7, #4]
 800d166:	4613      	mov	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	440b      	add	r3, r1
 800d170:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d174:	2201      	movs	r2, #1
 800d176:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d178:	4b4a      	ldr	r3, [pc, #296]	; (800d2a4 <USBD_CDC_Init+0x1ec>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	f003 020f 	and.w	r2, r3, #15
 800d180:	6879      	ldr	r1, [r7, #4]
 800d182:	4613      	mov	r3, r2
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	4413      	add	r3, r2
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	440b      	add	r3, r1
 800d18c:	3326      	adds	r3, #38	; 0x26
 800d18e:	2210      	movs	r2, #16
 800d190:	801a      	strh	r2, [r3, #0]
 800d192:	e035      	b.n	800d200 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d194:	4b41      	ldr	r3, [pc, #260]	; (800d29c <USBD_CDC_Init+0x1e4>)
 800d196:	7819      	ldrb	r1, [r3, #0]
 800d198:	2340      	movs	r3, #64	; 0x40
 800d19a:	2202      	movs	r2, #2
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f005 fad2 	bl	8012746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1a2:	4b3e      	ldr	r3, [pc, #248]	; (800d29c <USBD_CDC_Init+0x1e4>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	f003 020f 	and.w	r2, r3, #15
 800d1aa:	6879      	ldr	r1, [r7, #4]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4413      	add	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	440b      	add	r3, r1
 800d1b6:	3324      	adds	r3, #36	; 0x24
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1bc:	4b38      	ldr	r3, [pc, #224]	; (800d2a0 <USBD_CDC_Init+0x1e8>)
 800d1be:	7819      	ldrb	r1, [r3, #0]
 800d1c0:	2340      	movs	r3, #64	; 0x40
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f005 fabe 	bl	8012746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1ca:	4b35      	ldr	r3, [pc, #212]	; (800d2a0 <USBD_CDC_Init+0x1e8>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f003 020f 	and.w	r2, r3, #15
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d1e6:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <USBD_CDC_Init+0x1ec>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	f003 020f 	and.w	r2, r3, #15
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3326      	adds	r3, #38	; 0x26
 800d1fc:	2210      	movs	r2, #16
 800d1fe:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d200:	4b28      	ldr	r3, [pc, #160]	; (800d2a4 <USBD_CDC_Init+0x1ec>)
 800d202:	7819      	ldrb	r1, [r3, #0]
 800d204:	2308      	movs	r3, #8
 800d206:	2203      	movs	r2, #3
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f005 fa9c 	bl	8012746 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d20e:	4b25      	ldr	r3, [pc, #148]	; (800d2a4 <USBD_CDC_Init+0x1ec>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	f003 020f 	and.w	r2, r3, #15
 800d216:	6879      	ldr	r1, [r7, #4]
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	440b      	add	r3, r1
 800d222:	3324      	adds	r3, #36	; 0x24
 800d224:	2201      	movs	r2, #1
 800d226:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	33b0      	adds	r3, #176	; 0xb0
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2200      	movs	r2, #0
 800d248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d25e:	2302      	movs	r3, #2
 800d260:	e018      	b.n	800d294 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	7c1b      	ldrb	r3, [r3, #16]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10a      	bne.n	800d280 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d26a:	4b0d      	ldr	r3, [pc, #52]	; (800d2a0 <USBD_CDC_Init+0x1e8>)
 800d26c:	7819      	ldrb	r1, [r3, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f005 fb53 	bl	8012924 <USBD_LL_PrepareReceive>
 800d27e:	e008      	b.n	800d292 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d280:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <USBD_CDC_Init+0x1e8>)
 800d282:	7819      	ldrb	r1, [r3, #0]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d28a:	2340      	movs	r3, #64	; 0x40
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f005 fb49 	bl	8012924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	20000097 	.word	0x20000097
 800d2a0:	20000098 	.word	0x20000098
 800d2a4:	20000099 	.word	0x20000099

0800d2a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d2b4:	4b3a      	ldr	r3, [pc, #232]	; (800d3a0 <USBD_CDC_DeInit+0xf8>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f005 fa69 	bl	8012792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d2c0:	4b37      	ldr	r3, [pc, #220]	; (800d3a0 <USBD_CDC_DeInit+0xf8>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	f003 020f 	and.w	r2, r3, #15
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4413      	add	r3, r2
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	440b      	add	r3, r1
 800d2d4:	3324      	adds	r3, #36	; 0x24
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d2da:	4b32      	ldr	r3, [pc, #200]	; (800d3a4 <USBD_CDC_DeInit+0xfc>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f005 fa56 	bl	8012792 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d2e6:	4b2f      	ldr	r3, [pc, #188]	; (800d3a4 <USBD_CDC_DeInit+0xfc>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f003 020f 	and.w	r2, r3, #15
 800d2ee:	6879      	ldr	r1, [r7, #4]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	440b      	add	r3, r1
 800d2fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2fe:	2200      	movs	r2, #0
 800d300:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d302:	4b29      	ldr	r3, [pc, #164]	; (800d3a8 <USBD_CDC_DeInit+0x100>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f005 fa42 	bl	8012792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d30e:	4b26      	ldr	r3, [pc, #152]	; (800d3a8 <USBD_CDC_DeInit+0x100>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	f003 020f 	and.w	r2, r3, #15
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	440b      	add	r3, r1
 800d322:	3324      	adds	r3, #36	; 0x24
 800d324:	2200      	movs	r2, #0
 800d326:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d328:	4b1f      	ldr	r3, [pc, #124]	; (800d3a8 <USBD_CDC_DeInit+0x100>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	f003 020f 	and.w	r2, r3, #15
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	4613      	mov	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	440b      	add	r3, r1
 800d33c:	3326      	adds	r3, #38	; 0x26
 800d33e:	2200      	movs	r2, #0
 800d340:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	32b0      	adds	r2, #176	; 0xb0
 800d34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d01f      	beq.n	800d394 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	33b0      	adds	r3, #176	; 0xb0
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	32b0      	adds	r2, #176	; 0xb0
 800d372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d376:	4618      	mov	r0, r3
 800d378:	f013 f8c2 	bl	8020500 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	32b0      	adds	r2, #176	; 0xb0
 800d386:	2100      	movs	r1, #0
 800d388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000097 	.word	0x20000097
 800d3a4:	20000098 	.word	0x20000098
 800d3a8:	20000099 	.word	0x20000099

0800d3ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	32b0      	adds	r2, #176	; 0xb0
 800d3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e0bf      	b.n	800d55c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d050      	beq.n	800d48a <USBD_CDC_Setup+0xde>
 800d3e8:	2b20      	cmp	r3, #32
 800d3ea:	f040 80af 	bne.w	800d54c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	88db      	ldrh	r3, [r3, #6]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d03a      	beq.n	800d46c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	b25b      	sxtb	r3, r3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	da1b      	bge.n	800d438 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	33b0      	adds	r3, #176	; 0xb0
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d416:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	88d2      	ldrh	r2, [r2, #6]
 800d41c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	88db      	ldrh	r3, [r3, #6]
 800d422:	2b07      	cmp	r3, #7
 800d424:	bf28      	it	cs
 800d426:	2307      	movcs	r3, #7
 800d428:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	89fa      	ldrh	r2, [r7, #14]
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f001 fd6d 	bl	800ef10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d436:	e090      	b.n	800d55a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	785a      	ldrb	r2, [r3, #1]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	88db      	ldrh	r3, [r3, #6]
 800d446:	2b3f      	cmp	r3, #63	; 0x3f
 800d448:	d803      	bhi.n	800d452 <USBD_CDC_Setup+0xa6>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	88db      	ldrh	r3, [r3, #6]
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	e000      	b.n	800d454 <USBD_CDC_Setup+0xa8>
 800d452:	2240      	movs	r2, #64	; 0x40
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d45a:	6939      	ldr	r1, [r7, #16]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d462:	461a      	mov	r2, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 fd7f 	bl	800ef68 <USBD_CtlPrepareRx>
      break;
 800d46a:	e076      	b.n	800d55a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	33b0      	adds	r3, #176	; 0xb0
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	7850      	ldrb	r0, [r2, #1]
 800d482:	2200      	movs	r2, #0
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	4798      	blx	r3
      break;
 800d488:	e067      	b.n	800d55a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	785b      	ldrb	r3, [r3, #1]
 800d48e:	2b0b      	cmp	r3, #11
 800d490:	d851      	bhi.n	800d536 <USBD_CDC_Setup+0x18a>
 800d492:	a201      	add	r2, pc, #4	; (adr r2, 800d498 <USBD_CDC_Setup+0xec>)
 800d494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d498:	0800d4c9 	.word	0x0800d4c9
 800d49c:	0800d545 	.word	0x0800d545
 800d4a0:	0800d537 	.word	0x0800d537
 800d4a4:	0800d537 	.word	0x0800d537
 800d4a8:	0800d537 	.word	0x0800d537
 800d4ac:	0800d537 	.word	0x0800d537
 800d4b0:	0800d537 	.word	0x0800d537
 800d4b4:	0800d537 	.word	0x0800d537
 800d4b8:	0800d537 	.word	0x0800d537
 800d4bc:	0800d537 	.word	0x0800d537
 800d4c0:	0800d4f3 	.word	0x0800d4f3
 800d4c4:	0800d51d 	.word	0x0800d51d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d107      	bne.n	800d4e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d4d4:	f107 030a 	add.w	r3, r7, #10
 800d4d8:	2202      	movs	r2, #2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f001 fd17 	bl	800ef10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4e2:	e032      	b.n	800d54a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f001 fca1 	bl	800ee2e <USBD_CtlError>
            ret = USBD_FAIL;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	75fb      	strb	r3, [r7, #23]
          break;
 800d4f0:	e02b      	b.n	800d54a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d107      	bne.n	800d50e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d4fe:	f107 030d 	add.w	r3, r7, #13
 800d502:	2201      	movs	r2, #1
 800d504:	4619      	mov	r1, r3
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f001 fd02 	bl	800ef10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d50c:	e01d      	b.n	800d54a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f001 fc8c 	bl	800ee2e <USBD_CtlError>
            ret = USBD_FAIL;
 800d516:	2303      	movs	r3, #3
 800d518:	75fb      	strb	r3, [r7, #23]
          break;
 800d51a:	e016      	b.n	800d54a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d522:	b2db      	uxtb	r3, r3
 800d524:	2b03      	cmp	r3, #3
 800d526:	d00f      	beq.n	800d548 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f001 fc7f 	bl	800ee2e <USBD_CtlError>
            ret = USBD_FAIL;
 800d530:	2303      	movs	r3, #3
 800d532:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d534:	e008      	b.n	800d548 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f001 fc78 	bl	800ee2e <USBD_CtlError>
          ret = USBD_FAIL;
 800d53e:	2303      	movs	r3, #3
 800d540:	75fb      	strb	r3, [r7, #23]
          break;
 800d542:	e002      	b.n	800d54a <USBD_CDC_Setup+0x19e>
          break;
 800d544:	bf00      	nop
 800d546:	e008      	b.n	800d55a <USBD_CDC_Setup+0x1ae>
          break;
 800d548:	bf00      	nop
      }
      break;
 800d54a:	e006      	b.n	800d55a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 fc6d 	bl	800ee2e <USBD_CtlError>
      ret = USBD_FAIL;
 800d554:	2303      	movs	r3, #3
 800d556:	75fb      	strb	r3, [r7, #23]
      break;
 800d558:	bf00      	nop
  }

  return (uint8_t)ret;
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d576:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	32b0      	adds	r2, #176	; 0xb0
 800d582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e065      	b.n	800d65a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	32b0      	adds	r2, #176	; 0xb0
 800d598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d59c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d59e:	78fb      	ldrb	r3, [r7, #3]
 800d5a0:	f003 020f 	and.w	r2, r3, #15
 800d5a4:	6879      	ldr	r1, [r7, #4]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4413      	add	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	440b      	add	r3, r1
 800d5b0:	3318      	adds	r3, #24
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d02f      	beq.n	800d618 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d5b8:	78fb      	ldrb	r3, [r7, #3]
 800d5ba:	f003 020f 	and.w	r2, r3, #15
 800d5be:	6879      	ldr	r1, [r7, #4]
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	440b      	add	r3, r1
 800d5ca:	3318      	adds	r3, #24
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	78fb      	ldrb	r3, [r7, #3]
 800d5d0:	f003 010f 	and.w	r1, r3, #15
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	00db      	lsls	r3, r3, #3
 800d5da:	440b      	add	r3, r1
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4403      	add	r3, r0
 800d5e0:	3348      	adds	r3, #72	; 0x48
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d5e8:	fb01 f303 	mul.w	r3, r1, r3
 800d5ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d112      	bne.n	800d618 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d5f2:	78fb      	ldrb	r3, [r7, #3]
 800d5f4:	f003 020f 	and.w	r2, r3, #15
 800d5f8:	6879      	ldr	r1, [r7, #4]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	440b      	add	r3, r1
 800d604:	3318      	adds	r3, #24
 800d606:	2200      	movs	r2, #0
 800d608:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d60a:	78f9      	ldrb	r1, [r7, #3]
 800d60c:	2300      	movs	r3, #0
 800d60e:	2200      	movs	r2, #0
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f005 f966 	bl	80128e2 <USBD_LL_Transmit>
 800d616:	e01f      	b.n	800d658 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	33b0      	adds	r3, #176	; 0xb0
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d010      	beq.n	800d658 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	33b0      	adds	r3, #176	; 0xb0
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4413      	add	r3, r2
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d654:	78fa      	ldrb	r2, [r7, #3]
 800d656:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b084      	sub	sp, #16
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	460b      	mov	r3, r1
 800d66c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	32b0      	adds	r2, #176	; 0xb0
 800d678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d67c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	32b0      	adds	r2, #176	; 0xb0
 800d688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d690:	2303      	movs	r3, #3
 800d692:	e01a      	b.n	800d6ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d694:	78fb      	ldrb	r3, [r7, #3]
 800d696:	4619      	mov	r1, r3
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f005 f964 	bl	8012966 <USBD_LL_GetRxDataSize>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	33b0      	adds	r3, #176	; 0xb0
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	32b0      	adds	r2, #176	; 0xb0
 800d6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e025      	b.n	800d740 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	33b0      	adds	r3, #176	; 0xb0
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d01a      	beq.n	800d73e <USBD_CDC_EP0_RxReady+0x6c>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d70e:	2bff      	cmp	r3, #255	; 0xff
 800d710:	d015      	beq.n	800d73e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	33b0      	adds	r3, #176	; 0xb0
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d72a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d732:	b292      	uxth	r2, r2
 800d734:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	22ff      	movs	r2, #255	; 0xff
 800d73a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d750:	2182      	movs	r1, #130	; 0x82
 800d752:	4818      	ldr	r0, [pc, #96]	; (800d7b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d754:	f000 fd09 	bl	800e16a <USBD_GetEpDesc>
 800d758:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d75a:	2101      	movs	r1, #1
 800d75c:	4815      	ldr	r0, [pc, #84]	; (800d7b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d75e:	f000 fd04 	bl	800e16a <USBD_GetEpDesc>
 800d762:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d764:	2181      	movs	r1, #129	; 0x81
 800d766:	4813      	ldr	r0, [pc, #76]	; (800d7b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d768:	f000 fcff 	bl	800e16a <USBD_GetEpDesc>
 800d76c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d002      	beq.n	800d77a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	2210      	movs	r2, #16
 800d778:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d006      	beq.n	800d78e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	2200      	movs	r2, #0
 800d784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d788:	711a      	strb	r2, [r3, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d006      	beq.n	800d7a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d79c:	711a      	strb	r2, [r3, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2243      	movs	r2, #67	; 0x43
 800d7a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7a8:	4b02      	ldr	r3, [pc, #8]	; (800d7b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20000054 	.word	0x20000054

0800d7b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7c0:	2182      	movs	r1, #130	; 0x82
 800d7c2:	4818      	ldr	r0, [pc, #96]	; (800d824 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7c4:	f000 fcd1 	bl	800e16a <USBD_GetEpDesc>
 800d7c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7ca:	2101      	movs	r1, #1
 800d7cc:	4815      	ldr	r0, [pc, #84]	; (800d824 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7ce:	f000 fccc 	bl	800e16a <USBD_GetEpDesc>
 800d7d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7d4:	2181      	movs	r1, #129	; 0x81
 800d7d6:	4813      	ldr	r0, [pc, #76]	; (800d824 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7d8:	f000 fcc7 	bl	800e16a <USBD_GetEpDesc>
 800d7dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	2210      	movs	r2, #16
 800d7e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d006      	beq.n	800d7fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	711a      	strb	r2, [r3, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f042 0202 	orr.w	r2, r2, #2
 800d7fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d006      	beq.n	800d812 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	711a      	strb	r2, [r3, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f042 0202 	orr.w	r2, r2, #2
 800d810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2243      	movs	r2, #67	; 0x43
 800d816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d818:	4b02      	ldr	r3, [pc, #8]	; (800d824 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3718      	adds	r7, #24
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	20000054 	.word	0x20000054

0800d828 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d830:	2182      	movs	r1, #130	; 0x82
 800d832:	4818      	ldr	r0, [pc, #96]	; (800d894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d834:	f000 fc99 	bl	800e16a <USBD_GetEpDesc>
 800d838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d83a:	2101      	movs	r1, #1
 800d83c:	4815      	ldr	r0, [pc, #84]	; (800d894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d83e:	f000 fc94 	bl	800e16a <USBD_GetEpDesc>
 800d842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d844:	2181      	movs	r1, #129	; 0x81
 800d846:	4813      	ldr	r0, [pc, #76]	; (800d894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d848:	f000 fc8f 	bl	800e16a <USBD_GetEpDesc>
 800d84c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	2210      	movs	r2, #16
 800d858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d006      	beq.n	800d86e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2200      	movs	r2, #0
 800d864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d868:	711a      	strb	r2, [r3, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d006      	beq.n	800d882 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d87c:	711a      	strb	r2, [r3, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2243      	movs	r2, #67	; 0x43
 800d886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d888:	4b02      	ldr	r3, [pc, #8]	; (800d894 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20000054 	.word	0x20000054

0800d898 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	220a      	movs	r2, #10
 800d8a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d8a6:	4b03      	ldr	r3, [pc, #12]	; (800d8b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr
 800d8b4:	20000010 	.word	0x20000010

0800d8b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	e009      	b.n	800d8e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	33b0      	adds	r3, #176	; 0xb0
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	4413      	add	r3, r2
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b087      	sub	sp, #28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	32b0      	adds	r2, #176	; 0xb0
 800d902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d906:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d90e:	2303      	movs	r3, #3
 800d910:	e008      	b.n	800d924 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	32b0      	adds	r2, #176	; 0xb0
 800d944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d948:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e004      	b.n	800d95e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	683a      	ldr	r2, [r7, #0]
 800d958:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3714      	adds	r7, #20
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
	...

0800d96c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	32b0      	adds	r2, #176	; 0xb0
 800d97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d982:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	32b0      	adds	r2, #176	; 0xb0
 800d98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	e018      	b.n	800d9cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7c1b      	ldrb	r3, [r3, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10a      	bne.n	800d9b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9a2:	4b0c      	ldr	r3, [pc, #48]	; (800d9d4 <USBD_CDC_ReceivePacket+0x68>)
 800d9a4:	7819      	ldrb	r1, [r3, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f004 ffb7 	bl	8012924 <USBD_LL_PrepareReceive>
 800d9b6:	e008      	b.n	800d9ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9b8:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <USBD_CDC_ReceivePacket+0x68>)
 800d9ba:	7819      	ldrb	r1, [r3, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9c2:	2340      	movs	r3, #64	; 0x40
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f004 ffad 	bl	8012924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	20000098 	.word	0x20000098

0800d9d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d101      	bne.n	800d9f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e01f      	b.n	800da30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d003      	beq.n	800da16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	79fa      	ldrb	r2, [r7, #7]
 800da22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f004 fe27 	bl	8012678 <USBD_LL_Init>
 800da2a:	4603      	mov	r3, r0
 800da2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da42:	2300      	movs	r3, #0
 800da44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d101      	bne.n	800da50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da4c:	2303      	movs	r3, #3
 800da4e:	e025      	b.n	800da9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	683a      	ldr	r2, [r7, #0]
 800da54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	32ae      	adds	r2, #174	; 0xae
 800da62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00f      	beq.n	800da8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	32ae      	adds	r2, #174	; 0xae
 800da76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	f107 020e 	add.w	r2, r7, #14
 800da80:	4610      	mov	r0, r2
 800da82:	4798      	blx	r3
 800da84:	4602      	mov	r2, r0
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f004 fe2f 	bl	8012710 <USBD_LL_Start>
 800dab2:	4603      	mov	r3, r0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dac4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b084      	sub	sp, #16
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	460b      	mov	r3, r1
 800dadc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d009      	beq.n	800db00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	78fa      	ldrb	r2, [r7, #3]
 800daf6:	4611      	mov	r1, r2
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	4798      	blx	r3
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db00:	7bfb      	ldrb	r3, [r7, #15]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
 800db12:	460b      	mov	r3, r1
 800db14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	78fa      	ldrb	r2, [r7, #3]
 800db24:	4611      	mov	r1, r2
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	4798      	blx	r3
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800db30:	2303      	movs	r3, #3
 800db32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db34:	7bfb      	ldrb	r3, [r7, #15]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	4618      	mov	r0, r3
 800db52:	f001 f932 	bl	800edba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2201      	movs	r2, #1
 800db5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db64:	461a      	mov	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db72:	f003 031f 	and.w	r3, r3, #31
 800db76:	2b02      	cmp	r3, #2
 800db78:	d01a      	beq.n	800dbb0 <USBD_LL_SetupStage+0x72>
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d822      	bhi.n	800dbc4 <USBD_LL_SetupStage+0x86>
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <USBD_LL_SetupStage+0x4a>
 800db82:	2b01      	cmp	r3, #1
 800db84:	d00a      	beq.n	800db9c <USBD_LL_SetupStage+0x5e>
 800db86:	e01d      	b.n	800dbc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fb5f 	bl	800e254 <USBD_StdDevReq>
 800db96:	4603      	mov	r3, r0
 800db98:	73fb      	strb	r3, [r7, #15]
      break;
 800db9a:	e020      	b.n	800dbde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dba2:	4619      	mov	r1, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fbc7 	bl	800e338 <USBD_StdItfReq>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73fb      	strb	r3, [r7, #15]
      break;
 800dbae:	e016      	b.n	800dbde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fc29 	bl	800e410 <USBD_StdEPReq>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc2:	e00c      	b.n	800dbde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f004 fdfc 	bl	80127d0 <USBD_LL_StallEP>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]
      break;
 800dbdc:	bf00      	nop
  }

  return ret;
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	607a      	str	r2, [r7, #4]
 800dbf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dbfa:	7afb      	ldrb	r3, [r7, #11]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d16e      	bne.n	800dcde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	f040 8098 	bne.w	800dd44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	689a      	ldr	r2, [r3, #8]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d913      	bls.n	800dc48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	689a      	ldr	r2, [r3, #8]
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	1ad2      	subs	r2, r2, r3
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	68da      	ldr	r2, [r3, #12]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	4293      	cmp	r3, r2
 800dc38:	bf28      	it	cs
 800dc3a:	4613      	movcs	r3, r2
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f001 f9ae 	bl	800efa2 <USBD_CtlContinueRx>
 800dc46:	e07d      	b.n	800dd44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc4e:	f003 031f 	and.w	r3, r3, #31
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d014      	beq.n	800dc80 <USBD_LL_DataOutStage+0x98>
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d81d      	bhi.n	800dc96 <USBD_LL_DataOutStage+0xae>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <USBD_LL_DataOutStage+0x7c>
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d003      	beq.n	800dc6a <USBD_LL_DataOutStage+0x82>
 800dc62:	e018      	b.n	800dc96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dc64:	2300      	movs	r3, #0
 800dc66:	75bb      	strb	r3, [r7, #22]
            break;
 800dc68:	e018      	b.n	800dc9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	4619      	mov	r1, r3
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 fa5e 	bl	800e136 <USBD_CoreFindIF>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	75bb      	strb	r3, [r7, #22]
            break;
 800dc7e:	e00d      	b.n	800dc9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	4619      	mov	r1, r3
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f000 fa60 	bl	800e150 <USBD_CoreFindEP>
 800dc90:	4603      	mov	r3, r0
 800dc92:	75bb      	strb	r3, [r7, #22]
            break;
 800dc94:	e002      	b.n	800dc9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dc96:	2300      	movs	r3, #0
 800dc98:	75bb      	strb	r3, [r7, #22]
            break;
 800dc9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dc9c:	7dbb      	ldrb	r3, [r7, #22]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d119      	bne.n	800dcd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d113      	bne.n	800dcd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dcae:	7dba      	ldrb	r2, [r7, #22]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	32ae      	adds	r2, #174	; 0xae
 800dcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00b      	beq.n	800dcd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dcbe:	7dba      	ldrb	r2, [r7, #22]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dcc6:	7dba      	ldrb	r2, [r7, #22]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	32ae      	adds	r2, #174	; 0xae
 800dccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f001 f974 	bl	800efc4 <USBD_CtlSendStatus>
 800dcdc:	e032      	b.n	800dd44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dcde:	7afb      	ldrb	r3, [r7, #11]
 800dce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	4619      	mov	r1, r3
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 fa31 	bl	800e150 <USBD_CoreFindEP>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcf2:	7dbb      	ldrb	r3, [r7, #22]
 800dcf4:	2bff      	cmp	r3, #255	; 0xff
 800dcf6:	d025      	beq.n	800dd44 <USBD_LL_DataOutStage+0x15c>
 800dcf8:	7dbb      	ldrb	r3, [r7, #22]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d122      	bne.n	800dd44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d117      	bne.n	800dd3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dd0a:	7dba      	ldrb	r2, [r7, #22]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	32ae      	adds	r2, #174	; 0xae
 800dd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd14:	699b      	ldr	r3, [r3, #24]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00f      	beq.n	800dd3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dd1a:	7dba      	ldrb	r2, [r7, #22]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dd22:	7dba      	ldrb	r2, [r7, #22]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	32ae      	adds	r2, #174	; 0xae
 800dd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	7afa      	ldrb	r2, [r7, #11]
 800dd30:	4611      	mov	r1, r2
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	4798      	blx	r3
 800dd36:	4603      	mov	r3, r0
 800dd38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dd40:	7dfb      	ldrb	r3, [r7, #23]
 800dd42:	e000      	b.n	800dd46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b086      	sub	sp, #24
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	460b      	mov	r3, r1
 800dd58:	607a      	str	r2, [r7, #4]
 800dd5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dd5c:	7afb      	ldrb	r3, [r7, #11]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d16f      	bne.n	800de42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	3314      	adds	r3, #20
 800dd66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d15a      	bne.n	800de28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	689a      	ldr	r2, [r3, #8]
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d914      	bls.n	800dda8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	689a      	ldr	r2, [r3, #8]
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	461a      	mov	r2, r3
 800dd92:	6879      	ldr	r1, [r7, #4]
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f001 f8d6 	bl	800ef46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	2100      	movs	r1, #0
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f004 fdbf 	bl	8012924 <USBD_LL_PrepareReceive>
 800dda6:	e03f      	b.n	800de28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	68da      	ldr	r2, [r3, #12]
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d11c      	bne.n	800ddee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d316      	bcc.n	800ddee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	685a      	ldr	r2, [r3, #4]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d20f      	bcs.n	800ddee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ddce:	2200      	movs	r2, #0
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f001 f8b7 	bl	800ef46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dde0:	2300      	movs	r3, #0
 800dde2:	2200      	movs	r2, #0
 800dde4:	2100      	movs	r1, #0
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f004 fd9c 	bl	8012924 <USBD_LL_PrepareReceive>
 800ddec:	e01c      	b.n	800de28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b03      	cmp	r3, #3
 800ddf8:	d10f      	bne.n	800de1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d009      	beq.n	800de1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de1a:	2180      	movs	r1, #128	; 0x80
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f004 fcd7 	bl	80127d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f001 f8e1 	bl	800efea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d03a      	beq.n	800dea8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f7ff fe42 	bl	800dabc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800de40:	e032      	b.n	800dea8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800de42:	7afb      	ldrb	r3, [r7, #11]
 800de44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	4619      	mov	r1, r3
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 f97f 	bl	800e150 <USBD_CoreFindEP>
 800de52:	4603      	mov	r3, r0
 800de54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	2bff      	cmp	r3, #255	; 0xff
 800de5a:	d025      	beq.n	800dea8 <USBD_LL_DataInStage+0x15a>
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d122      	bne.n	800dea8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d11c      	bne.n	800dea8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de6e:	7dfa      	ldrb	r2, [r7, #23]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	32ae      	adds	r2, #174	; 0xae
 800de74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d014      	beq.n	800dea8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800de7e:	7dfa      	ldrb	r2, [r7, #23]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800de86:	7dfa      	ldrb	r2, [r7, #23]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	32ae      	adds	r2, #174	; 0xae
 800de8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	7afa      	ldrb	r2, [r7, #11]
 800de94:	4611      	mov	r1, r2
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	4798      	blx	r3
 800de9a:	4603      	mov	r3, r0
 800de9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800de9e:	7dbb      	ldrb	r3, [r7, #22]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dea4:	7dbb      	ldrb	r3, [r7, #22]
 800dea6:	e000      	b.n	800deaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3718      	adds	r7, #24
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800deba:	2300      	movs	r3, #0
 800debc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2201      	movs	r2, #1
 800dec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deea:	2b00      	cmp	r3, #0
 800deec:	d014      	beq.n	800df18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00e      	beq.n	800df18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	6852      	ldr	r2, [r2, #4]
 800df06:	b2d2      	uxtb	r2, r2
 800df08:	4611      	mov	r1, r2
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	4798      	blx	r3
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800df14:	2303      	movs	r3, #3
 800df16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df18:	2340      	movs	r3, #64	; 0x40
 800df1a:	2200      	movs	r2, #0
 800df1c:	2100      	movs	r1, #0
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f004 fc11 	bl	8012746 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2240      	movs	r2, #64	; 0x40
 800df30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df34:	2340      	movs	r3, #64	; 0x40
 800df36:	2200      	movs	r2, #0
 800df38:	2180      	movs	r1, #128	; 0x80
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f004 fc03 	bl	8012746 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2240      	movs	r2, #64	; 0x40
 800df4a:	621a      	str	r2, [r3, #32]

  return ret;
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df56:	b480      	push	{r7}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	460b      	mov	r3, r1
 800df60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	78fa      	ldrb	r2, [r7, #3]
 800df66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df84:	b2da      	uxtb	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2204      	movs	r2, #4
 800df90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dfa2:	b480      	push	{r7}
 800dfa4:	b083      	sub	sp, #12
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b04      	cmp	r3, #4
 800dfb4:	d106      	bne.n	800dfc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dfbc:	b2da      	uxtb	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d110      	bne.n	800e008 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00b      	beq.n	800e008 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff6:	69db      	ldr	r3, [r3, #28]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d005      	beq.n	800e008 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e002:	69db      	ldr	r3, [r3, #28]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b082      	sub	sp, #8
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	460b      	mov	r3, r1
 800e01c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	32ae      	adds	r2, #174	; 0xae
 800e028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e030:	2303      	movs	r3, #3
 800e032:	e01c      	b.n	800e06e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	2b03      	cmp	r3, #3
 800e03e:	d115      	bne.n	800e06c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	32ae      	adds	r2, #174	; 0xae
 800e04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04e:	6a1b      	ldr	r3, [r3, #32]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	32ae      	adds	r2, #174	; 0xae
 800e05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e062:	6a1b      	ldr	r3, [r3, #32]
 800e064:	78fa      	ldrb	r2, [r7, #3]
 800e066:	4611      	mov	r1, r2
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	460b      	mov	r3, r1
 800e080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	32ae      	adds	r2, #174	; 0xae
 800e08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e094:	2303      	movs	r3, #3
 800e096:	e01c      	b.n	800e0d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d115      	bne.n	800e0d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	32ae      	adds	r2, #174	; 0xae
 800e0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	32ae      	adds	r2, #174	; 0xae
 800e0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c8:	78fa      	ldrb	r2, [r7, #3]
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b083      	sub	sp, #12
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00e      	beq.n	800e12c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	6852      	ldr	r2, [r2, #4]
 800e11a:	b2d2      	uxtb	r2, r2
 800e11c:	4611      	mov	r1, r2
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	4798      	blx	r3
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e128:	2303      	movs	r3, #3
 800e12a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	460b      	mov	r3, r1
 800e140:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e142:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e15c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e15e:	4618      	mov	r0, r3
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b086      	sub	sp, #24
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	885b      	ldrh	r3, [r3, #2]
 800e186:	b29a      	uxth	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	429a      	cmp	r2, r3
 800e190:	d920      	bls.n	800e1d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	b29b      	uxth	r3, r3
 800e198:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e19a:	e013      	b.n	800e1c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e19c:	f107 030a 	add.w	r3, r7, #10
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	6978      	ldr	r0, [r7, #20]
 800e1a4:	f000 f81b 	bl	800e1de <USBD_GetNextDesc>
 800e1a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	785b      	ldrb	r3, [r3, #1]
 800e1ae:	2b05      	cmp	r3, #5
 800e1b0:	d108      	bne.n	800e1c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	789b      	ldrb	r3, [r3, #2]
 800e1ba:	78fa      	ldrb	r2, [r7, #3]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d008      	beq.n	800e1d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	885b      	ldrh	r3, [r3, #2]
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	897b      	ldrh	r3, [r7, #10]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d8e5      	bhi.n	800e19c <USBD_GetEpDesc+0x32>
 800e1d0:	e000      	b.n	800e1d4 <USBD_GetEpDesc+0x6a>
          break;
 800e1d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e1d4:	693b      	ldr	r3, [r7, #16]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e1de:	b480      	push	{r7}
 800e1e0:	b085      	sub	sp, #20
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	881a      	ldrh	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	4413      	add	r3, r2
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e20a:	68fb      	ldr	r3, [r7, #12]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e218:	b480      	push	{r7}
 800e21a:	b087      	sub	sp, #28
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	3301      	adds	r3, #1
 800e22e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e236:	8a3b      	ldrh	r3, [r7, #16]
 800e238:	021b      	lsls	r3, r3, #8
 800e23a:	b21a      	sxth	r2, r3
 800e23c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e240:	4313      	orrs	r3, r2
 800e242:	b21b      	sxth	r3, r3
 800e244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e246:	89fb      	ldrh	r3, [r7, #14]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	371c      	adds	r7, #28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e26a:	2b40      	cmp	r3, #64	; 0x40
 800e26c:	d005      	beq.n	800e27a <USBD_StdDevReq+0x26>
 800e26e:	2b40      	cmp	r3, #64	; 0x40
 800e270:	d857      	bhi.n	800e322 <USBD_StdDevReq+0xce>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00f      	beq.n	800e296 <USBD_StdDevReq+0x42>
 800e276:	2b20      	cmp	r3, #32
 800e278:	d153      	bne.n	800e322 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	32ae      	adds	r2, #174	; 0xae
 800e284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	4798      	blx	r3
 800e290:	4603      	mov	r3, r0
 800e292:	73fb      	strb	r3, [r7, #15]
      break;
 800e294:	e04a      	b.n	800e32c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	785b      	ldrb	r3, [r3, #1]
 800e29a:	2b09      	cmp	r3, #9
 800e29c:	d83b      	bhi.n	800e316 <USBD_StdDevReq+0xc2>
 800e29e:	a201      	add	r2, pc, #4	; (adr r2, 800e2a4 <USBD_StdDevReq+0x50>)
 800e2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a4:	0800e2f9 	.word	0x0800e2f9
 800e2a8:	0800e30d 	.word	0x0800e30d
 800e2ac:	0800e317 	.word	0x0800e317
 800e2b0:	0800e303 	.word	0x0800e303
 800e2b4:	0800e317 	.word	0x0800e317
 800e2b8:	0800e2d7 	.word	0x0800e2d7
 800e2bc:	0800e2cd 	.word	0x0800e2cd
 800e2c0:	0800e317 	.word	0x0800e317
 800e2c4:	0800e2ef 	.word	0x0800e2ef
 800e2c8:	0800e2e1 	.word	0x0800e2e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fa3c 	bl	800e74c <USBD_GetDescriptor>
          break;
 800e2d4:	e024      	b.n	800e320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fbcb 	bl	800ea74 <USBD_SetAddress>
          break;
 800e2de:	e01f      	b.n	800e320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fc0a 	bl	800eafc <USBD_SetConfig>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	73fb      	strb	r3, [r7, #15]
          break;
 800e2ec:	e018      	b.n	800e320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e2ee:	6839      	ldr	r1, [r7, #0]
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fcad 	bl	800ec50 <USBD_GetConfig>
          break;
 800e2f6:	e013      	b.n	800e320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fcde 	bl	800ecbc <USBD_GetStatus>
          break;
 800e300:	e00e      	b.n	800e320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fd0d 	bl	800ed24 <USBD_SetFeature>
          break;
 800e30a:	e009      	b.n	800e320 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fd31 	bl	800ed76 <USBD_ClrFeature>
          break;
 800e314:	e004      	b.n	800e320 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e316:	6839      	ldr	r1, [r7, #0]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fd88 	bl	800ee2e <USBD_CtlError>
          break;
 800e31e:	bf00      	nop
      }
      break;
 800e320:	e004      	b.n	800e32c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 fd82 	bl	800ee2e <USBD_CtlError>
      break;
 800e32a:	bf00      	nop
  }

  return ret;
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop

0800e338 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e34e:	2b40      	cmp	r3, #64	; 0x40
 800e350:	d005      	beq.n	800e35e <USBD_StdItfReq+0x26>
 800e352:	2b40      	cmp	r3, #64	; 0x40
 800e354:	d852      	bhi.n	800e3fc <USBD_StdItfReq+0xc4>
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <USBD_StdItfReq+0x26>
 800e35a:	2b20      	cmp	r3, #32
 800e35c:	d14e      	bne.n	800e3fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e364:	b2db      	uxtb	r3, r3
 800e366:	3b01      	subs	r3, #1
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d840      	bhi.n	800e3ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	889b      	ldrh	r3, [r3, #4]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b01      	cmp	r3, #1
 800e374:	d836      	bhi.n	800e3e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	889b      	ldrh	r3, [r3, #4]
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	4619      	mov	r1, r3
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff fed9 	bl	800e136 <USBD_CoreFindIF>
 800e384:	4603      	mov	r3, r0
 800e386:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	2bff      	cmp	r3, #255	; 0xff
 800e38c:	d01d      	beq.n	800e3ca <USBD_StdItfReq+0x92>
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d11a      	bne.n	800e3ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e394:	7bba      	ldrb	r2, [r7, #14]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	32ae      	adds	r2, #174	; 0xae
 800e39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00f      	beq.n	800e3c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e3a4:	7bba      	ldrb	r2, [r7, #14]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e3ac:	7bba      	ldrb	r2, [r7, #14]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	32ae      	adds	r2, #174	; 0xae
 800e3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	4798      	blx	r3
 800e3be:	4603      	mov	r3, r0
 800e3c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e3c2:	e004      	b.n	800e3ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e3c8:	e001      	b.n	800e3ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	88db      	ldrh	r3, [r3, #6]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d110      	bne.n	800e3f8 <USBD_StdItfReq+0xc0>
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10d      	bne.n	800e3f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fdf1 	bl	800efc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e3e2:	e009      	b.n	800e3f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 fd21 	bl	800ee2e <USBD_CtlError>
          break;
 800e3ec:	e004      	b.n	800e3f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fd1c 	bl	800ee2e <USBD_CtlError>
          break;
 800e3f6:	e000      	b.n	800e3fa <USBD_StdItfReq+0xc2>
          break;
 800e3f8:	bf00      	nop
      }
      break;
 800e3fa:	e004      	b.n	800e406 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fd15 	bl	800ee2e <USBD_CtlError>
      break;
 800e404:	bf00      	nop
  }

  return ret;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e41a:	2300      	movs	r3, #0
 800e41c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	889b      	ldrh	r3, [r3, #4]
 800e422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e42c:	2b40      	cmp	r3, #64	; 0x40
 800e42e:	d007      	beq.n	800e440 <USBD_StdEPReq+0x30>
 800e430:	2b40      	cmp	r3, #64	; 0x40
 800e432:	f200 817f 	bhi.w	800e734 <USBD_StdEPReq+0x324>
 800e436:	2b00      	cmp	r3, #0
 800e438:	d02a      	beq.n	800e490 <USBD_StdEPReq+0x80>
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	f040 817a 	bne.w	800e734 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e440:	7bbb      	ldrb	r3, [r7, #14]
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff fe83 	bl	800e150 <USBD_CoreFindEP>
 800e44a:	4603      	mov	r3, r0
 800e44c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e44e:	7b7b      	ldrb	r3, [r7, #13]
 800e450:	2bff      	cmp	r3, #255	; 0xff
 800e452:	f000 8174 	beq.w	800e73e <USBD_StdEPReq+0x32e>
 800e456:	7b7b      	ldrb	r3, [r7, #13]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f040 8170 	bne.w	800e73e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e45e:	7b7a      	ldrb	r2, [r7, #13]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e466:	7b7a      	ldrb	r2, [r7, #13]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	32ae      	adds	r2, #174	; 0xae
 800e46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	f000 8163 	beq.w	800e73e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e478:	7b7a      	ldrb	r2, [r7, #13]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	32ae      	adds	r2, #174	; 0xae
 800e47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	6839      	ldr	r1, [r7, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	4798      	blx	r3
 800e48a:	4603      	mov	r3, r0
 800e48c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e48e:	e156      	b.n	800e73e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b03      	cmp	r3, #3
 800e496:	d008      	beq.n	800e4aa <USBD_StdEPReq+0x9a>
 800e498:	2b03      	cmp	r3, #3
 800e49a:	f300 8145 	bgt.w	800e728 <USBD_StdEPReq+0x318>
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f000 809b 	beq.w	800e5da <USBD_StdEPReq+0x1ca>
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d03c      	beq.n	800e522 <USBD_StdEPReq+0x112>
 800e4a8:	e13e      	b.n	800e728 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d002      	beq.n	800e4bc <USBD_StdEPReq+0xac>
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d016      	beq.n	800e4e8 <USBD_StdEPReq+0xd8>
 800e4ba:	e02c      	b.n	800e516 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4bc:	7bbb      	ldrb	r3, [r7, #14]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00d      	beq.n	800e4de <USBD_StdEPReq+0xce>
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	2b80      	cmp	r3, #128	; 0x80
 800e4c6:	d00a      	beq.n	800e4de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f004 f97f 	bl	80127d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4d2:	2180      	movs	r1, #128	; 0x80
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f004 f97b 	bl	80127d0 <USBD_LL_StallEP>
 800e4da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4dc:	e020      	b.n	800e520 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fca4 	bl	800ee2e <USBD_CtlError>
              break;
 800e4e6:	e01b      	b.n	800e520 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	885b      	ldrh	r3, [r3, #2]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d10e      	bne.n	800e50e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e4f0:	7bbb      	ldrb	r3, [r7, #14]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00b      	beq.n	800e50e <USBD_StdEPReq+0xfe>
 800e4f6:	7bbb      	ldrb	r3, [r7, #14]
 800e4f8:	2b80      	cmp	r3, #128	; 0x80
 800e4fa:	d008      	beq.n	800e50e <USBD_StdEPReq+0xfe>
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	88db      	ldrh	r3, [r3, #6]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d104      	bne.n	800e50e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e504:	7bbb      	ldrb	r3, [r7, #14]
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f004 f961 	bl	80127d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fd58 	bl	800efc4 <USBD_CtlSendStatus>

              break;
 800e514:	e004      	b.n	800e520 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fc88 	bl	800ee2e <USBD_CtlError>
              break;
 800e51e:	bf00      	nop
          }
          break;
 800e520:	e107      	b.n	800e732 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d002      	beq.n	800e534 <USBD_StdEPReq+0x124>
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d016      	beq.n	800e560 <USBD_StdEPReq+0x150>
 800e532:	e04b      	b.n	800e5cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e534:	7bbb      	ldrb	r3, [r7, #14]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00d      	beq.n	800e556 <USBD_StdEPReq+0x146>
 800e53a:	7bbb      	ldrb	r3, [r7, #14]
 800e53c:	2b80      	cmp	r3, #128	; 0x80
 800e53e:	d00a      	beq.n	800e556 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e540:	7bbb      	ldrb	r3, [r7, #14]
 800e542:	4619      	mov	r1, r3
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f004 f943 	bl	80127d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e54a:	2180      	movs	r1, #128	; 0x80
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f004 f93f 	bl	80127d0 <USBD_LL_StallEP>
 800e552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e554:	e040      	b.n	800e5d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fc68 	bl	800ee2e <USBD_CtlError>
              break;
 800e55e:	e03b      	b.n	800e5d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	885b      	ldrh	r3, [r3, #2]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d136      	bne.n	800e5d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d004      	beq.n	800e57c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e572:	7bbb      	ldrb	r3, [r7, #14]
 800e574:	4619      	mov	r1, r3
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f004 f949 	bl	801280e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fd21 	bl	800efc4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e582:	7bbb      	ldrb	r3, [r7, #14]
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff fde2 	bl	800e150 <USBD_CoreFindEP>
 800e58c:	4603      	mov	r3, r0
 800e58e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e590:	7b7b      	ldrb	r3, [r7, #13]
 800e592:	2bff      	cmp	r3, #255	; 0xff
 800e594:	d01f      	beq.n	800e5d6 <USBD_StdEPReq+0x1c6>
 800e596:	7b7b      	ldrb	r3, [r7, #13]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d11c      	bne.n	800e5d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e59c:	7b7a      	ldrb	r2, [r7, #13]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e5a4:	7b7a      	ldrb	r2, [r7, #13]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	32ae      	adds	r2, #174	; 0xae
 800e5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d010      	beq.n	800e5d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e5b4:	7b7a      	ldrb	r2, [r7, #13]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	32ae      	adds	r2, #174	; 0xae
 800e5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5be:	689b      	ldr	r3, [r3, #8]
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	4798      	blx	r3
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e5ca:	e004      	b.n	800e5d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fc2d 	bl	800ee2e <USBD_CtlError>
              break;
 800e5d4:	e000      	b.n	800e5d8 <USBD_StdEPReq+0x1c8>
              break;
 800e5d6:	bf00      	nop
          }
          break;
 800e5d8:	e0ab      	b.n	800e732 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d002      	beq.n	800e5ec <USBD_StdEPReq+0x1dc>
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d032      	beq.n	800e650 <USBD_StdEPReq+0x240>
 800e5ea:	e097      	b.n	800e71c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5ec:	7bbb      	ldrb	r3, [r7, #14]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d007      	beq.n	800e602 <USBD_StdEPReq+0x1f2>
 800e5f2:	7bbb      	ldrb	r3, [r7, #14]
 800e5f4:	2b80      	cmp	r3, #128	; 0x80
 800e5f6:	d004      	beq.n	800e602 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fc17 	bl	800ee2e <USBD_CtlError>
                break;
 800e600:	e091      	b.n	800e726 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e606:	2b00      	cmp	r3, #0
 800e608:	da0b      	bge.n	800e622 <USBD_StdEPReq+0x212>
 800e60a:	7bbb      	ldrb	r3, [r7, #14]
 800e60c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e610:	4613      	mov	r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	4413      	add	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	3310      	adds	r3, #16
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	4413      	add	r3, r2
 800e61e:	3304      	adds	r3, #4
 800e620:	e00b      	b.n	800e63a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e622:	7bbb      	ldrb	r3, [r7, #14]
 800e624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	4413      	add	r3, r2
 800e638:	3304      	adds	r3, #4
 800e63a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	2202      	movs	r2, #2
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fc61 	bl	800ef10 <USBD_CtlSendData>
              break;
 800e64e:	e06a      	b.n	800e726 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e654:	2b00      	cmp	r3, #0
 800e656:	da11      	bge.n	800e67c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	f003 020f 	and.w	r2, r3, #15
 800e65e:	6879      	ldr	r1, [r7, #4]
 800e660:	4613      	mov	r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	440b      	add	r3, r1
 800e66a:	3324      	adds	r3, #36	; 0x24
 800e66c:	881b      	ldrh	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d117      	bne.n	800e6a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fbda 	bl	800ee2e <USBD_CtlError>
                  break;
 800e67a:	e054      	b.n	800e726 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
 800e67e:	f003 020f 	and.w	r2, r3, #15
 800e682:	6879      	ldr	r1, [r7, #4]
 800e684:	4613      	mov	r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	4413      	add	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	440b      	add	r3, r1
 800e68e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d104      	bne.n	800e6a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 fbc7 	bl	800ee2e <USBD_CtlError>
                  break;
 800e6a0:	e041      	b.n	800e726 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	da0b      	bge.n	800e6c2 <USBD_StdEPReq+0x2b2>
 800e6aa:	7bbb      	ldrb	r3, [r7, #14]
 800e6ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4413      	add	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	3310      	adds	r3, #16
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	4413      	add	r3, r2
 800e6be:	3304      	adds	r3, #4
 800e6c0:	e00b      	b.n	800e6da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
 800e6c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	3304      	adds	r3, #4
 800e6da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e6dc:	7bbb      	ldrb	r3, [r7, #14]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <USBD_StdEPReq+0x2d8>
 800e6e2:	7bbb      	ldrb	r3, [r7, #14]
 800e6e4:	2b80      	cmp	r3, #128	; 0x80
 800e6e6:	d103      	bne.n	800e6f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	601a      	str	r2, [r3, #0]
 800e6ee:	e00e      	b.n	800e70e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f004 f8a9 	bl	801284c <USBD_LL_IsStallEP>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d003      	beq.n	800e708 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	2201      	movs	r2, #1
 800e704:	601a      	str	r2, [r3, #0]
 800e706:	e002      	b.n	800e70e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2200      	movs	r2, #0
 800e70c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2202      	movs	r2, #2
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fbfb 	bl	800ef10 <USBD_CtlSendData>
              break;
 800e71a:	e004      	b.n	800e726 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fb85 	bl	800ee2e <USBD_CtlError>
              break;
 800e724:	bf00      	nop
          }
          break;
 800e726:	e004      	b.n	800e732 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fb7f 	bl	800ee2e <USBD_CtlError>
          break;
 800e730:	bf00      	nop
      }
      break;
 800e732:	e005      	b.n	800e740 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e734:	6839      	ldr	r1, [r7, #0]
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fb79 	bl	800ee2e <USBD_CtlError>
      break;
 800e73c:	e000      	b.n	800e740 <USBD_StdEPReq+0x330>
      break;
 800e73e:	bf00      	nop
  }

  return ret;
 800e740:	7bfb      	ldrb	r3, [r7, #15]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e756:	2300      	movs	r3, #0
 800e758:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	885b      	ldrh	r3, [r3, #2]
 800e766:	0a1b      	lsrs	r3, r3, #8
 800e768:	b29b      	uxth	r3, r3
 800e76a:	3b01      	subs	r3, #1
 800e76c:	2b0e      	cmp	r3, #14
 800e76e:	f200 8152 	bhi.w	800ea16 <USBD_GetDescriptor+0x2ca>
 800e772:	a201      	add	r2, pc, #4	; (adr r2, 800e778 <USBD_GetDescriptor+0x2c>)
 800e774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e778:	0800e7e9 	.word	0x0800e7e9
 800e77c:	0800e801 	.word	0x0800e801
 800e780:	0800e841 	.word	0x0800e841
 800e784:	0800ea17 	.word	0x0800ea17
 800e788:	0800ea17 	.word	0x0800ea17
 800e78c:	0800e9b7 	.word	0x0800e9b7
 800e790:	0800e9e3 	.word	0x0800e9e3
 800e794:	0800ea17 	.word	0x0800ea17
 800e798:	0800ea17 	.word	0x0800ea17
 800e79c:	0800ea17 	.word	0x0800ea17
 800e7a0:	0800ea17 	.word	0x0800ea17
 800e7a4:	0800ea17 	.word	0x0800ea17
 800e7a8:	0800ea17 	.word	0x0800ea17
 800e7ac:	0800ea17 	.word	0x0800ea17
 800e7b0:	0800e7b5 	.word	0x0800e7b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00b      	beq.n	800e7d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7c6:	69db      	ldr	r3, [r3, #28]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	7c12      	ldrb	r2, [r2, #16]
 800e7cc:	f107 0108 	add.w	r1, r7, #8
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7d6:	e126      	b.n	800ea26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fb27 	bl	800ee2e <USBD_CtlError>
        err++;
 800e7e0:	7afb      	ldrb	r3, [r7, #11]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	72fb      	strb	r3, [r7, #11]
      break;
 800e7e6:	e11e      	b.n	800ea26 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	7c12      	ldrb	r2, [r2, #16]
 800e7f4:	f107 0108 	add.w	r1, r7, #8
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	4798      	blx	r3
 800e7fc:	60f8      	str	r0, [r7, #12]
      break;
 800e7fe:	e112      	b.n	800ea26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	7c1b      	ldrb	r3, [r3, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10d      	bne.n	800e824 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e810:	f107 0208 	add.w	r2, r7, #8
 800e814:	4610      	mov	r0, r2
 800e816:	4798      	blx	r3
 800e818:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3301      	adds	r3, #1
 800e81e:	2202      	movs	r2, #2
 800e820:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e822:	e100      	b.n	800ea26 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	f107 0208 	add.w	r2, r7, #8
 800e830:	4610      	mov	r0, r2
 800e832:	4798      	blx	r3
 800e834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3301      	adds	r3, #1
 800e83a:	2202      	movs	r2, #2
 800e83c:	701a      	strb	r2, [r3, #0]
      break;
 800e83e:	e0f2      	b.n	800ea26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	885b      	ldrh	r3, [r3, #2]
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b05      	cmp	r3, #5
 800e848:	f200 80ac 	bhi.w	800e9a4 <USBD_GetDescriptor+0x258>
 800e84c:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <USBD_GetDescriptor+0x108>)
 800e84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e852:	bf00      	nop
 800e854:	0800e86d 	.word	0x0800e86d
 800e858:	0800e8a1 	.word	0x0800e8a1
 800e85c:	0800e8d5 	.word	0x0800e8d5
 800e860:	0800e909 	.word	0x0800e909
 800e864:	0800e93d 	.word	0x0800e93d
 800e868:	0800e971 	.word	0x0800e971
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00b      	beq.n	800e890 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	7c12      	ldrb	r2, [r2, #16]
 800e884:	f107 0108 	add.w	r1, r7, #8
 800e888:	4610      	mov	r0, r2
 800e88a:	4798      	blx	r3
 800e88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e88e:	e091      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e890:	6839      	ldr	r1, [r7, #0]
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 facb 	bl	800ee2e <USBD_CtlError>
            err++;
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	3301      	adds	r3, #1
 800e89c:	72fb      	strb	r3, [r7, #11]
          break;
 800e89e:	e089      	b.n	800e9b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00b      	beq.n	800e8c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	7c12      	ldrb	r2, [r2, #16]
 800e8b8:	f107 0108 	add.w	r1, r7, #8
 800e8bc:	4610      	mov	r0, r2
 800e8be:	4798      	blx	r3
 800e8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8c2:	e077      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fab1 	bl	800ee2e <USBD_CtlError>
            err++;
 800e8cc:	7afb      	ldrb	r3, [r7, #11]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8d2:	e06f      	b.n	800e9b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00b      	beq.n	800e8f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	7c12      	ldrb	r2, [r2, #16]
 800e8ec:	f107 0108 	add.w	r1, r7, #8
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	4798      	blx	r3
 800e8f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8f6:	e05d      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 fa97 	bl	800ee2e <USBD_CtlError>
            err++;
 800e900:	7afb      	ldrb	r3, [r7, #11]
 800e902:	3301      	adds	r3, #1
 800e904:	72fb      	strb	r3, [r7, #11]
          break;
 800e906:	e055      	b.n	800e9b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00b      	beq.n	800e92c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	7c12      	ldrb	r2, [r2, #16]
 800e920:	f107 0108 	add.w	r1, r7, #8
 800e924:	4610      	mov	r0, r2
 800e926:	4798      	blx	r3
 800e928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e92a:	e043      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 fa7d 	bl	800ee2e <USBD_CtlError>
            err++;
 800e934:	7afb      	ldrb	r3, [r7, #11]
 800e936:	3301      	adds	r3, #1
 800e938:	72fb      	strb	r3, [r7, #11]
          break;
 800e93a:	e03b      	b.n	800e9b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e942:	695b      	ldr	r3, [r3, #20]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00b      	beq.n	800e960 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	7c12      	ldrb	r2, [r2, #16]
 800e954:	f107 0108 	add.w	r1, r7, #8
 800e958:	4610      	mov	r0, r2
 800e95a:	4798      	blx	r3
 800e95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e95e:	e029      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 fa63 	bl	800ee2e <USBD_CtlError>
            err++;
 800e968:	7afb      	ldrb	r3, [r7, #11]
 800e96a:	3301      	adds	r3, #1
 800e96c:	72fb      	strb	r3, [r7, #11]
          break;
 800e96e:	e021      	b.n	800e9b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00b      	beq.n	800e994 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e982:	699b      	ldr	r3, [r3, #24]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	7c12      	ldrb	r2, [r2, #16]
 800e988:	f107 0108 	add.w	r1, r7, #8
 800e98c:	4610      	mov	r0, r2
 800e98e:	4798      	blx	r3
 800e990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e992:	e00f      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e994:	6839      	ldr	r1, [r7, #0]
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 fa49 	bl	800ee2e <USBD_CtlError>
            err++;
 800e99c:	7afb      	ldrb	r3, [r7, #11]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9a2:	e007      	b.n	800e9b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e9a4:	6839      	ldr	r1, [r7, #0]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fa41 	bl	800ee2e <USBD_CtlError>
          err++;
 800e9ac:	7afb      	ldrb	r3, [r7, #11]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e9b2:	bf00      	nop
      }
      break;
 800e9b4:	e037      	b.n	800ea26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	7c1b      	ldrb	r3, [r3, #16]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d109      	bne.n	800e9d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c6:	f107 0208 	add.w	r2, r7, #8
 800e9ca:	4610      	mov	r0, r2
 800e9cc:	4798      	blx	r3
 800e9ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9d0:	e029      	b.n	800ea26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 fa2a 	bl	800ee2e <USBD_CtlError>
        err++;
 800e9da:	7afb      	ldrb	r3, [r7, #11]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	72fb      	strb	r3, [r7, #11]
      break;
 800e9e0:	e021      	b.n	800ea26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	7c1b      	ldrb	r3, [r3, #16]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10d      	bne.n	800ea06 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9f2:	f107 0208 	add.w	r2, r7, #8
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	4798      	blx	r3
 800e9fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	2207      	movs	r2, #7
 800ea02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea04:	e00f      	b.n	800ea26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea06:	6839      	ldr	r1, [r7, #0]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fa10 	bl	800ee2e <USBD_CtlError>
        err++;
 800ea0e:	7afb      	ldrb	r3, [r7, #11]
 800ea10:	3301      	adds	r3, #1
 800ea12:	72fb      	strb	r3, [r7, #11]
      break;
 800ea14:	e007      	b.n	800ea26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 fa08 	bl	800ee2e <USBD_CtlError>
      err++;
 800ea1e:	7afb      	ldrb	r3, [r7, #11]
 800ea20:	3301      	adds	r3, #1
 800ea22:	72fb      	strb	r3, [r7, #11]
      break;
 800ea24:	bf00      	nop
  }

  if (err != 0U)
 800ea26:	7afb      	ldrb	r3, [r7, #11]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d11e      	bne.n	800ea6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	88db      	ldrh	r3, [r3, #6]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d016      	beq.n	800ea62 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ea34:	893b      	ldrh	r3, [r7, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00e      	beq.n	800ea58 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	88da      	ldrh	r2, [r3, #6]
 800ea3e:	893b      	ldrh	r3, [r7, #8]
 800ea40:	4293      	cmp	r3, r2
 800ea42:	bf28      	it	cs
 800ea44:	4613      	movcs	r3, r2
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea4a:	893b      	ldrh	r3, [r7, #8]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fa5d 	bl	800ef10 <USBD_CtlSendData>
 800ea56:	e009      	b.n	800ea6c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f9e7 	bl	800ee2e <USBD_CtlError>
 800ea60:	e004      	b.n	800ea6c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 faae 	bl	800efc4 <USBD_CtlSendStatus>
 800ea68:	e000      	b.n	800ea6c <USBD_GetDescriptor+0x320>
    return;
 800ea6a:	bf00      	nop
  }
}
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop

0800ea74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	889b      	ldrh	r3, [r3, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d131      	bne.n	800eaea <USBD_SetAddress+0x76>
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	88db      	ldrh	r3, [r3, #6]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d12d      	bne.n	800eaea <USBD_SetAddress+0x76>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	885b      	ldrh	r3, [r3, #2]
 800ea92:	2b7f      	cmp	r3, #127	; 0x7f
 800ea94:	d829      	bhi.n	800eaea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	885b      	ldrh	r3, [r3, #2]
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d104      	bne.n	800eab8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f9bc 	bl	800ee2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eab6:	e01d      	b.n	800eaf4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	7bfa      	ldrb	r2, [r7, #15]
 800eabc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f003 feed 	bl	80128a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 fa7a 	bl	800efc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d004      	beq.n	800eae0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2202      	movs	r2, #2
 800eada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eade:	e009      	b.n	800eaf4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eae8:	e004      	b.n	800eaf4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f99e 	bl	800ee2e <USBD_CtlError>
  }
}
 800eaf2:	bf00      	nop
 800eaf4:	bf00      	nop
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb06:	2300      	movs	r3, #0
 800eb08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	885b      	ldrh	r3, [r3, #2]
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	4b4e      	ldr	r3, [pc, #312]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb14:	4b4d      	ldr	r3, [pc, #308]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d905      	bls.n	800eb28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f985 	bl	800ee2e <USBD_CtlError>
    return USBD_FAIL;
 800eb24:	2303      	movs	r3, #3
 800eb26:	e08c      	b.n	800ec42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	2b02      	cmp	r3, #2
 800eb32:	d002      	beq.n	800eb3a <USBD_SetConfig+0x3e>
 800eb34:	2b03      	cmp	r3, #3
 800eb36:	d029      	beq.n	800eb8c <USBD_SetConfig+0x90>
 800eb38:	e075      	b.n	800ec26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb3a:	4b44      	ldr	r3, [pc, #272]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d020      	beq.n	800eb84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eb42:	4b42      	ldr	r3, [pc, #264]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb4c:	4b3f      	ldr	r3, [pc, #252]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7fe ffbd 	bl	800dad2 <USBD_SetClassConfig>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb5c:	7bfb      	ldrb	r3, [r7, #15]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d008      	beq.n	800eb74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eb62:	6839      	ldr	r1, [r7, #0]
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f962 	bl	800ee2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb72:	e065      	b.n	800ec40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fa25 	bl	800efc4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2203      	movs	r2, #3
 800eb7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb82:	e05d      	b.n	800ec40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 fa1d 	bl	800efc4 <USBD_CtlSendStatus>
      break;
 800eb8a:	e059      	b.n	800ec40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb8c:	4b2f      	ldr	r3, [pc, #188]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d112      	bne.n	800ebba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2202      	movs	r2, #2
 800eb98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb9c:	4b2b      	ldr	r3, [pc, #172]	; (800ec4c <USBD_SetConfig+0x150>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	461a      	mov	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eba6:	4b29      	ldr	r3, [pc, #164]	; (800ec4c <USBD_SetConfig+0x150>)
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7fe ffac 	bl	800db0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fa06 	bl	800efc4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebb8:	e042      	b.n	800ec40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ebba:	4b24      	ldr	r3, [pc, #144]	; (800ec4c <USBD_SetConfig+0x150>)
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d02a      	beq.n	800ec1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	4619      	mov	r1, r3
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7fe ff9a 	bl	800db0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ebd6:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <USBD_SetConfig+0x150>)
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebe0:	4b1a      	ldr	r3, [pc, #104]	; (800ec4c <USBD_SetConfig+0x150>)
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7fe ff73 	bl	800dad2 <USBD_SetClassConfig>
 800ebec:	4603      	mov	r3, r0
 800ebee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00f      	beq.n	800ec16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f918 	bl	800ee2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7fe ff7f 	bl	800db0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2202      	movs	r2, #2
 800ec10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec14:	e014      	b.n	800ec40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 f9d4 	bl	800efc4 <USBD_CtlSendStatus>
      break;
 800ec1c:	e010      	b.n	800ec40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 f9d0 	bl	800efc4 <USBD_CtlSendStatus>
      break;
 800ec24:	e00c      	b.n	800ec40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ec26:	6839      	ldr	r1, [r7, #0]
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 f900 	bl	800ee2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec2e:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <USBD_SetConfig+0x150>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	4619      	mov	r1, r3
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7fe ff68 	bl	800db0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec3e:	bf00      	nop
  }

  return ret;
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2000cb48 	.word	0x2000cb48

0800ec50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	88db      	ldrh	r3, [r3, #6]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d004      	beq.n	800ec6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f8e2 	bl	800ee2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec6a:	e023      	b.n	800ecb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	dc02      	bgt.n	800ec7e <USBD_GetConfig+0x2e>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	dc03      	bgt.n	800ec84 <USBD_GetConfig+0x34>
 800ec7c:	e015      	b.n	800ecaa <USBD_GetConfig+0x5a>
 800ec7e:	2b03      	cmp	r3, #3
 800ec80:	d00b      	beq.n	800ec9a <USBD_GetConfig+0x4a>
 800ec82:	e012      	b.n	800ecaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	2201      	movs	r2, #1
 800ec90:	4619      	mov	r1, r3
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f93c 	bl	800ef10 <USBD_CtlSendData>
        break;
 800ec98:	e00c      	b.n	800ecb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	2201      	movs	r2, #1
 800eca0:	4619      	mov	r1, r3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f934 	bl	800ef10 <USBD_CtlSendData>
        break;
 800eca8:	e004      	b.n	800ecb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 f8be 	bl	800ee2e <USBD_CtlError>
        break;
 800ecb2:	bf00      	nop
}
 800ecb4:	bf00      	nop
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	d81e      	bhi.n	800ed12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	88db      	ldrh	r3, [r3, #6]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d004      	beq.n	800ece6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ecdc:	6839      	ldr	r1, [r7, #0]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f8a5 	bl	800ee2e <USBD_CtlError>
        break;
 800ece4:	e01a      	b.n	800ed1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d005      	beq.n	800ed02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	f043 0202 	orr.w	r2, r3, #2
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	330c      	adds	r3, #12
 800ed06:	2202      	movs	r2, #2
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 f900 	bl	800ef10 <USBD_CtlSendData>
      break;
 800ed10:	e004      	b.n	800ed1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f88a 	bl	800ee2e <USBD_CtlError>
      break;
 800ed1a:	bf00      	nop
  }
}
 800ed1c:	bf00      	nop
 800ed1e:	3708      	adds	r7, #8
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d107      	bne.n	800ed46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2201      	movs	r2, #1
 800ed3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 f940 	bl	800efc4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ed44:	e013      	b.n	800ed6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	885b      	ldrh	r3, [r3, #2]
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d10b      	bne.n	800ed66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	889b      	ldrh	r3, [r3, #4]
 800ed52:	0a1b      	lsrs	r3, r3, #8
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f930 	bl	800efc4 <USBD_CtlSendStatus>
}
 800ed64:	e003      	b.n	800ed6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f860 	bl	800ee2e <USBD_CtlError>
}
 800ed6e:	bf00      	nop
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b082      	sub	sp, #8
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d80b      	bhi.n	800eda6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	885b      	ldrh	r3, [r3, #2]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d10c      	bne.n	800edb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f910 	bl	800efc4 <USBD_CtlSendStatus>
      }
      break;
 800eda4:	e004      	b.n	800edb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eda6:	6839      	ldr	r1, [r7, #0]
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f840 	bl	800ee2e <USBD_CtlError>
      break;
 800edae:	e000      	b.n	800edb2 <USBD_ClrFeature+0x3c>
      break;
 800edb0:	bf00      	nop
  }
}
 800edb2:	bf00      	nop
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b084      	sub	sp, #16
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	781a      	ldrb	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	781a      	ldrb	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	3301      	adds	r3, #1
 800ede2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7ff fa17 	bl	800e218 <SWAPBYTE>
 800edea:	4603      	mov	r3, r0
 800edec:	461a      	mov	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3301      	adds	r3, #1
 800edf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3301      	adds	r3, #1
 800edfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f7ff fa0a 	bl	800e218 <SWAPBYTE>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	3301      	adds	r3, #1
 800ee16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff f9fd 	bl	800e218 <SWAPBYTE>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	461a      	mov	r2, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	80da      	strh	r2, [r3, #6]
}
 800ee26:	bf00      	nop
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b082      	sub	sp, #8
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee38:	2180      	movs	r1, #128	; 0x80
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f003 fcc8 	bl	80127d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee40:	2100      	movs	r1, #0
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f003 fcc4 	bl	80127d0 <USBD_LL_StallEP>
}
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d036      	beq.n	800eed4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee6a:	6938      	ldr	r0, [r7, #16]
 800ee6c:	f000 f836 	bl	800eedc <USBD_GetLen>
 800ee70:	4603      	mov	r3, r0
 800ee72:	3301      	adds	r3, #1
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ee7e:	7dfb      	ldrb	r3, [r7, #23]
 800ee80:	68ba      	ldr	r2, [r7, #8]
 800ee82:	4413      	add	r3, r2
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	7812      	ldrb	r2, [r2, #0]
 800ee88:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee8a:	7dfb      	ldrb	r3, [r7, #23]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	4413      	add	r3, r2
 800ee96:	2203      	movs	r2, #3
 800ee98:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee9a:	7dfb      	ldrb	r3, [r7, #23]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eea0:	e013      	b.n	800eeca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eea2:	7dfb      	ldrb	r3, [r7, #23]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	4413      	add	r3, r2
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	7812      	ldrb	r2, [r2, #0]
 800eeac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	613b      	str	r3, [r7, #16]
    idx++;
 800eeb4:	7dfb      	ldrb	r3, [r7, #23]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eeba:	7dfb      	ldrb	r3, [r7, #23]
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	4413      	add	r3, r2
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
    idx++;
 800eec4:	7dfb      	ldrb	r3, [r7, #23]
 800eec6:	3301      	adds	r3, #1
 800eec8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1e7      	bne.n	800eea2 <USBD_GetString+0x52>
 800eed2:	e000      	b.n	800eed6 <USBD_GetString+0x86>
    return;
 800eed4:	bf00      	nop
  }
}
 800eed6:	3718      	adds	r7, #24
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eee4:	2300      	movs	r3, #0
 800eee6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eeec:	e005      	b.n	800eefa <USBD_GetLen+0x1e>
  {
    len++;
 800eeee:	7bfb      	ldrb	r3, [r7, #15]
 800eef0:	3301      	adds	r3, #1
 800eef2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	3301      	adds	r3, #1
 800eef8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1f5      	bne.n	800eeee <USBD_GetLen+0x12>
  }

  return len;
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2202      	movs	r2, #2
 800ef20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	2100      	movs	r1, #0
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f003 fcd3 	bl	80128e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b084      	sub	sp, #16
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	60f8      	str	r0, [r7, #12]
 800ef4e:	60b9      	str	r1, [r7, #8]
 800ef50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	2100      	movs	r1, #0
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f003 fcc2 	bl	80128e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2203      	movs	r2, #3
 800ef78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	2100      	movs	r1, #0
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f003 fcc6 	bl	8012924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef98:	2300      	movs	r3, #0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b084      	sub	sp, #16
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	2100      	movs	r1, #0
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f003 fcb5 	bl	8012924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2204      	movs	r2, #4
 800efd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800efd4:	2300      	movs	r3, #0
 800efd6:	2200      	movs	r2, #0
 800efd8:	2100      	movs	r1, #0
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f003 fc81 	bl	80128e2 <USBD_LL_Transmit>

  return USBD_OK;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b082      	sub	sp, #8
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2205      	movs	r2, #5
 800eff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800effa:	2300      	movs	r3, #0
 800effc:	2200      	movs	r2, #0
 800effe:	2100      	movs	r1, #0
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f003 fc8f 	bl	8012924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3708      	adds	r7, #8
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f010:	b480      	push	{r7}
 800f012:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f014:	bf00      	nop
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
	...

0800f020 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f026:	f3ef 8305 	mrs	r3, IPSR
 800f02a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f02c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10f      	bne.n	800f052 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f032:	f3ef 8310 	mrs	r3, PRIMASK
 800f036:	607b      	str	r3, [r7, #4]
  return(result);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d105      	bne.n	800f04a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f03e:	f3ef 8311 	mrs	r3, BASEPRI
 800f042:	603b      	str	r3, [r7, #0]
  return(result);
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d007      	beq.n	800f05a <osKernelInitialize+0x3a>
 800f04a:	4b0e      	ldr	r3, [pc, #56]	; (800f084 <osKernelInitialize+0x64>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d103      	bne.n	800f05a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f052:	f06f 0305 	mvn.w	r3, #5
 800f056:	60fb      	str	r3, [r7, #12]
 800f058:	e00c      	b.n	800f074 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f05a:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <osKernelInitialize+0x64>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d105      	bne.n	800f06e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f062:	4b08      	ldr	r3, [pc, #32]	; (800f084 <osKernelInitialize+0x64>)
 800f064:	2201      	movs	r2, #1
 800f066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f068:	2300      	movs	r3, #0
 800f06a:	60fb      	str	r3, [r7, #12]
 800f06c:	e002      	b.n	800f074 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f072:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f074:	68fb      	ldr	r3, [r7, #12]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	2000cb4c 	.word	0x2000cb4c

0800f088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f08e:	f3ef 8305 	mrs	r3, IPSR
 800f092:	60bb      	str	r3, [r7, #8]
  return(result);
 800f094:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10f      	bne.n	800f0ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f09a:	f3ef 8310 	mrs	r3, PRIMASK
 800f09e:	607b      	str	r3, [r7, #4]
  return(result);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d105      	bne.n	800f0b2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0a6:	f3ef 8311 	mrs	r3, BASEPRI
 800f0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d007      	beq.n	800f0c2 <osKernelStart+0x3a>
 800f0b2:	4b0f      	ldr	r3, [pc, #60]	; (800f0f0 <osKernelStart+0x68>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b02      	cmp	r3, #2
 800f0b8:	d103      	bne.n	800f0c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f0ba:	f06f 0305 	mvn.w	r3, #5
 800f0be:	60fb      	str	r3, [r7, #12]
 800f0c0:	e010      	b.n	800f0e4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f0c2:	4b0b      	ldr	r3, [pc, #44]	; (800f0f0 <osKernelStart+0x68>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d109      	bne.n	800f0de <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f0ca:	f7ff ffa1 	bl	800f010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f0ce:	4b08      	ldr	r3, [pc, #32]	; (800f0f0 <osKernelStart+0x68>)
 800f0d0:	2202      	movs	r2, #2
 800f0d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f0d4:	f001 f9c2 	bl	801045c <vTaskStartScheduler>
      stat = osOK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	60fb      	str	r3, [r7, #12]
 800f0dc:	e002      	b.n	800f0e4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f0de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	2000cb4c 	.word	0x2000cb4c

0800f0f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b090      	sub	sp, #64	; 0x40
 800f0f8:	af04      	add	r7, sp, #16
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f104:	f3ef 8305 	mrs	r3, IPSR
 800f108:	61fb      	str	r3, [r7, #28]
  return(result);
 800f10a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f040 808f 	bne.w	800f230 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f112:	f3ef 8310 	mrs	r3, PRIMASK
 800f116:	61bb      	str	r3, [r7, #24]
  return(result);
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d105      	bne.n	800f12a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f11e:	f3ef 8311 	mrs	r3, BASEPRI
 800f122:	617b      	str	r3, [r7, #20]
  return(result);
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d003      	beq.n	800f132 <osThreadNew+0x3e>
 800f12a:	4b44      	ldr	r3, [pc, #272]	; (800f23c <osThreadNew+0x148>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b02      	cmp	r3, #2
 800f130:	d07e      	beq.n	800f230 <osThreadNew+0x13c>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d07b      	beq.n	800f230 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f138:	2380      	movs	r3, #128	; 0x80
 800f13a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f13c:	2318      	movs	r3, #24
 800f13e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f148:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d045      	beq.n	800f1dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <osThreadNew+0x6a>
        name = attr->name;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d002      	beq.n	800f16c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d008      	beq.n	800f184 <osThreadNew+0x90>
 800f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f174:	2b38      	cmp	r3, #56	; 0x38
 800f176:	d805      	bhi.n	800f184 <osThreadNew+0x90>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	f003 0301 	and.w	r3, r3, #1
 800f180:	2b00      	cmp	r3, #0
 800f182:	d001      	beq.n	800f188 <osThreadNew+0x94>
        return (NULL);
 800f184:	2300      	movs	r3, #0
 800f186:	e054      	b.n	800f232 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	695b      	ldr	r3, [r3, #20]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	089b      	lsrs	r3, r3, #2
 800f196:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00e      	beq.n	800f1be <osThreadNew+0xca>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	2b5b      	cmp	r3, #91	; 0x5b
 800f1a6:	d90a      	bls.n	800f1be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d006      	beq.n	800f1be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	695b      	ldr	r3, [r3, #20]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <osThreadNew+0xca>
        mem = 1;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	623b      	str	r3, [r7, #32]
 800f1bc:	e010      	b.n	800f1e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10c      	bne.n	800f1e0 <osThreadNew+0xec>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d108      	bne.n	800f1e0 <osThreadNew+0xec>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d104      	bne.n	800f1e0 <osThreadNew+0xec>
          mem = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	623b      	str	r3, [r7, #32]
 800f1da:	e001      	b.n	800f1e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f1e0:	6a3b      	ldr	r3, [r7, #32]
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d110      	bne.n	800f208 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f1ee:	9202      	str	r2, [sp, #8]
 800f1f0:	9301      	str	r3, [sp, #4]
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f000 fed9 	bl	800ffb4 <xTaskCreateStatic>
 800f202:	4603      	mov	r3, r0
 800f204:	613b      	str	r3, [r7, #16]
 800f206:	e013      	b.n	800f230 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d110      	bne.n	800f230 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f210:	b29a      	uxth	r2, r3
 800f212:	f107 0310 	add.w	r3, r7, #16
 800f216:	9301      	str	r3, [sp, #4]
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f000 ff2a 	bl	801007a <xTaskCreate>
 800f226:	4603      	mov	r3, r0
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d001      	beq.n	800f230 <osThreadNew+0x13c>
          hTask = NULL;
 800f22c:	2300      	movs	r3, #0
 800f22e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f230:	693b      	ldr	r3, [r7, #16]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3730      	adds	r7, #48	; 0x30
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2000cb4c 	.word	0x2000cb4c

0800f240 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f248:	f3ef 8305 	mrs	r3, IPSR
 800f24c:	613b      	str	r3, [r7, #16]
  return(result);
 800f24e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10f      	bne.n	800f274 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f254:	f3ef 8310 	mrs	r3, PRIMASK
 800f258:	60fb      	str	r3, [r7, #12]
  return(result);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d105      	bne.n	800f26c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f260:	f3ef 8311 	mrs	r3, BASEPRI
 800f264:	60bb      	str	r3, [r7, #8]
  return(result);
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d007      	beq.n	800f27c <osDelay+0x3c>
 800f26c:	4b0a      	ldr	r3, [pc, #40]	; (800f298 <osDelay+0x58>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b02      	cmp	r3, #2
 800f272:	d103      	bne.n	800f27c <osDelay+0x3c>
    stat = osErrorISR;
 800f274:	f06f 0305 	mvn.w	r3, #5
 800f278:	617b      	str	r3, [r7, #20]
 800f27a:	e007      	b.n	800f28c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <osDelay+0x4c>
      vTaskDelay(ticks);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f001 f8b2 	bl	80103f0 <vTaskDelay>
    }
  }

  return (stat);
 800f28c:	697b      	ldr	r3, [r7, #20]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	2000cb4c 	.word	0x2000cb4c

0800f29c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f002 fa3f 	bl	8011728 <pvTimerGetTimerID>
 800f2aa:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d005      	beq.n	800f2be <TimerCallback+0x22>
    callb->func (callb->arg);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	6852      	ldr	r2, [r2, #4]
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	4798      	blx	r3
  }
}
 800f2be:	bf00      	nop
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
	...

0800f2c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b08e      	sub	sp, #56	; 0x38
 800f2cc:	af02      	add	r7, sp, #8
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	607a      	str	r2, [r7, #4]
 800f2d2:	603b      	str	r3, [r7, #0]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2dc:	f3ef 8305 	mrs	r3, IPSR
 800f2e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d16a      	bne.n	800f3be <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f2ec:	617b      	str	r3, [r7, #20]
  return(result);
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d105      	bne.n	800f300 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2f4:	f3ef 8311 	mrs	r3, BASEPRI
 800f2f8:	613b      	str	r3, [r7, #16]
  return(result);
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <osTimerNew+0x40>
 800f300:	4b31      	ldr	r3, [pc, #196]	; (800f3c8 <osTimerNew+0x100>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b02      	cmp	r3, #2
 800f306:	d05a      	beq.n	800f3be <osTimerNew+0xf6>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d057      	beq.n	800f3be <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f30e:	2008      	movs	r0, #8
 800f310:	f002 fc68 	bl	8011be4 <pvPortMalloc>
 800f314:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d050      	beq.n	800f3be <osTimerNew+0xf6>
      callb->func = func;
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f328:	7afb      	ldrb	r3, [r7, #11]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d102      	bne.n	800f334 <osTimerNew+0x6c>
        reload = pdFALSE;
 800f32e:	2300      	movs	r3, #0
 800f330:	627b      	str	r3, [r7, #36]	; 0x24
 800f332:	e001      	b.n	800f338 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800f334:	2301      	movs	r3, #1
 800f336:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800f338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f33c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d01c      	beq.n	800f382 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <osTimerNew+0x8e>
          name = attr->name;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d006      	beq.n	800f36c <osTimerNew+0xa4>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	2b2b      	cmp	r3, #43	; 0x2b
 800f364:	d902      	bls.n	800f36c <osTimerNew+0xa4>
          mem = 1;
 800f366:	2301      	movs	r3, #1
 800f368:	623b      	str	r3, [r7, #32]
 800f36a:	e00c      	b.n	800f386 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d108      	bne.n	800f386 <osTimerNew+0xbe>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d104      	bne.n	800f386 <osTimerNew+0xbe>
            mem = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	623b      	str	r3, [r7, #32]
 800f380:	e001      	b.n	800f386 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d10c      	bne.n	800f3a6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	9301      	str	r3, [sp, #4]
 800f392:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <osTimerNew+0x104>)
 800f394:	9300      	str	r3, [sp, #0]
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f39a:	2101      	movs	r1, #1
 800f39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f39e:	f001 fe32 	bl	8011006 <xTimerCreateStatic>
 800f3a2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f3a4:	e00b      	b.n	800f3be <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d108      	bne.n	800f3be <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f3ac:	4b07      	ldr	r3, [pc, #28]	; (800f3cc <osTimerNew+0x104>)
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3b8:	f001 fe04 	bl	8010fc4 <xTimerCreate>
 800f3bc:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3730      	adds	r7, #48	; 0x30
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	2000cb4c 	.word	0x2000cb4c
 800f3cc:	0800f29d 	.word	0x0800f29d

0800f3d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4a07      	ldr	r2, [pc, #28]	; (800f3fc <vApplicationGetIdleTaskMemory+0x2c>)
 800f3e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	4a06      	ldr	r2, [pc, #24]	; (800f400 <vApplicationGetIdleTaskMemory+0x30>)
 800f3e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2280      	movs	r2, #128	; 0x80
 800f3ec:	601a      	str	r2, [r3, #0]
}
 800f3ee:	bf00      	nop
 800f3f0:	3714      	adds	r7, #20
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	2000cb50 	.word	0x2000cb50
 800f400:	2000cbac 	.word	0x2000cbac

0800f404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	4a07      	ldr	r2, [pc, #28]	; (800f430 <vApplicationGetTimerTaskMemory+0x2c>)
 800f414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	4a06      	ldr	r2, [pc, #24]	; (800f434 <vApplicationGetTimerTaskMemory+0x30>)
 800f41a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f422:	601a      	str	r2, [r3, #0]
}
 800f424:	bf00      	nop
 800f426:	3714      	adds	r7, #20
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr
 800f430:	2000cdac 	.word	0x2000cdac
 800f434:	2000ce08 	.word	0x2000ce08

0800f438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f103 0208 	add.w	r2, r3, #8
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f103 0208 	add.w	r2, r3, #8
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f103 0208 	add.w	r2, r3, #8
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f46c:	bf00      	nop
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f486:	bf00      	nop
 800f488:	370c      	adds	r7, #12
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr

0800f492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f492:	b480      	push	{r7}
 800f494:	b085      	sub	sp, #20
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
 800f49a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	689a      	ldr	r2, [r3, #8]
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	683a      	ldr	r2, [r7, #0]
 800f4b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	1c5a      	adds	r2, r3, #1
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	601a      	str	r2, [r3, #0]
}
 800f4ce:	bf00      	nop
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b085      	sub	sp, #20
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4f0:	d103      	bne.n	800f4fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	691b      	ldr	r3, [r3, #16]
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	e00c      	b.n	800f514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	e002      	b.n	800f508 <vListInsert+0x2e>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	60fb      	str	r3, [r7, #12]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	429a      	cmp	r2, r3
 800f512:	d2f6      	bcs.n	800f502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	685a      	ldr	r2, [r3, #4]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	683a      	ldr	r2, [r7, #0]
 800f522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	1c5a      	adds	r2, r3, #1
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	601a      	str	r2, [r3, #0]
}
 800f540:	bf00      	nop
 800f542:	3714      	adds	r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	6892      	ldr	r2, [r2, #8]
 800f562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	6852      	ldr	r2, [r2, #4]
 800f56c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	429a      	cmp	r2, r3
 800f576:	d103      	bne.n	800f580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	689a      	ldr	r2, [r3, #8]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	1e5a      	subs	r2, r3, #1
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3714      	adds	r7, #20
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10c      	bne.n	800f5ce <xQueueGenericReset+0x2e>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	b672      	cpsid	i
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	b662      	cpsie	i
 800f5c8:	60bb      	str	r3, [r7, #8]
}
 800f5ca:	bf00      	nop
 800f5cc:	e7fe      	b.n	800f5cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f5ce:	f002 f9dd 	bl	801198c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5da:	68f9      	ldr	r1, [r7, #12]
 800f5dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f5de:	fb01 f303 	mul.w	r3, r1, r3
 800f5e2:	441a      	add	r2, r3
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5fe:	3b01      	subs	r3, #1
 800f600:	68f9      	ldr	r1, [r7, #12]
 800f602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f604:	fb01 f303 	mul.w	r3, r1, r3
 800f608:	441a      	add	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	22ff      	movs	r2, #255	; 0xff
 800f612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	22ff      	movs	r2, #255	; 0xff
 800f61a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d114      	bne.n	800f64e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d01a      	beq.n	800f662 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	3310      	adds	r3, #16
 800f630:	4618      	mov	r0, r3
 800f632:	f001 f9ab 	bl	801098c <xTaskRemoveFromEventList>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d012      	beq.n	800f662 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f63c:	4b0c      	ldr	r3, [pc, #48]	; (800f670 <xQueueGenericReset+0xd0>)
 800f63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	e009      	b.n	800f662 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	3310      	adds	r3, #16
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff fef0 	bl	800f438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3324      	adds	r3, #36	; 0x24
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff feeb 	bl	800f438 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f662:	f002 f9c7 	bl	80119f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f666:	2301      	movs	r3, #1
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	e000ed04 	.word	0xe000ed04

0800f674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f674:	b580      	push	{r7, lr}
 800f676:	b08e      	sub	sp, #56	; 0x38
 800f678:	af02      	add	r7, sp, #8
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
 800f680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d10c      	bne.n	800f6a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68c:	b672      	cpsid	i
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	b662      	cpsie	i
 800f69c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f69e:	bf00      	nop
 800f6a0:	e7fe      	b.n	800f6a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d10c      	bne.n	800f6c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ac:	b672      	cpsid	i
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	b662      	cpsie	i
 800f6bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f6be:	bf00      	nop
 800f6c0:	e7fe      	b.n	800f6c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <xQueueGenericCreateStatic+0x5a>
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <xQueueGenericCreateStatic+0x5e>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e000      	b.n	800f6d4 <xQueueGenericCreateStatic+0x60>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10c      	bne.n	800f6f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6dc:	b672      	cpsid	i
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	b662      	cpsie	i
 800f6ec:	623b      	str	r3, [r7, #32]
}
 800f6ee:	bf00      	nop
 800f6f0:	e7fe      	b.n	800f6f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <xQueueGenericCreateStatic+0x8a>
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <xQueueGenericCreateStatic+0x8e>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e000      	b.n	800f704 <xQueueGenericCreateStatic+0x90>
 800f702:	2300      	movs	r3, #0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10c      	bne.n	800f722 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70c:	b672      	cpsid	i
 800f70e:	f383 8811 	msr	BASEPRI, r3
 800f712:	f3bf 8f6f 	isb	sy
 800f716:	f3bf 8f4f 	dsb	sy
 800f71a:	b662      	cpsie	i
 800f71c:	61fb      	str	r3, [r7, #28]
}
 800f71e:	bf00      	nop
 800f720:	e7fe      	b.n	800f720 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f722:	2350      	movs	r3, #80	; 0x50
 800f724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	2b50      	cmp	r3, #80	; 0x50
 800f72a:	d00c      	beq.n	800f746 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f730:	b672      	cpsid	i
 800f732:	f383 8811 	msr	BASEPRI, r3
 800f736:	f3bf 8f6f 	isb	sy
 800f73a:	f3bf 8f4f 	dsb	sy
 800f73e:	b662      	cpsie	i
 800f740:	61bb      	str	r3, [r7, #24]
}
 800f742:	bf00      	nop
 800f744:	e7fe      	b.n	800f744 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f746:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00d      	beq.n	800f76e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	2201      	movs	r2, #1
 800f756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f75a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	4613      	mov	r3, r2
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	68b9      	ldr	r1, [r7, #8]
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 f805 	bl	800f778 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f770:	4618      	mov	r0, r3
 800f772:	3730      	adds	r7, #48	; 0x30
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d103      	bne.n	800f794 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	69ba      	ldr	r2, [r7, #24]
 800f790:	601a      	str	r2, [r3, #0]
 800f792:	e002      	b.n	800f79a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f7a6:	2101      	movs	r1, #1
 800f7a8:	69b8      	ldr	r0, [r7, #24]
 800f7aa:	f7ff fef9 	bl	800f5a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	78fa      	ldrb	r2, [r7, #3]
 800f7b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f7b6:	bf00      	nop
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
	...

0800f7c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08e      	sub	sp, #56	; 0x38
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d10c      	bne.n	800f7f6 <xQueueGenericSend+0x36>
	__asm volatile
 800f7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e0:	b672      	cpsid	i
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	b662      	cpsie	i
 800f7f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f7f2:	bf00      	nop
 800f7f4:	e7fe      	b.n	800f7f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d103      	bne.n	800f804 <xQueueGenericSend+0x44>
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <xQueueGenericSend+0x48>
 800f804:	2301      	movs	r3, #1
 800f806:	e000      	b.n	800f80a <xQueueGenericSend+0x4a>
 800f808:	2300      	movs	r3, #0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d10c      	bne.n	800f828 <xQueueGenericSend+0x68>
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	b672      	cpsid	i
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	b662      	cpsie	i
 800f822:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f824:	bf00      	nop
 800f826:	e7fe      	b.n	800f826 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	2b02      	cmp	r3, #2
 800f82c:	d103      	bne.n	800f836 <xQueueGenericSend+0x76>
 800f82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f832:	2b01      	cmp	r3, #1
 800f834:	d101      	bne.n	800f83a <xQueueGenericSend+0x7a>
 800f836:	2301      	movs	r3, #1
 800f838:	e000      	b.n	800f83c <xQueueGenericSend+0x7c>
 800f83a:	2300      	movs	r3, #0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10c      	bne.n	800f85a <xQueueGenericSend+0x9a>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	b672      	cpsid	i
 800f846:	f383 8811 	msr	BASEPRI, r3
 800f84a:	f3bf 8f6f 	isb	sy
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	b662      	cpsie	i
 800f854:	623b      	str	r3, [r7, #32]
}
 800f856:	bf00      	nop
 800f858:	e7fe      	b.n	800f858 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f85a:	f001 fa85 	bl	8010d68 <xTaskGetSchedulerState>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d102      	bne.n	800f86a <xQueueGenericSend+0xaa>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d101      	bne.n	800f86e <xQueueGenericSend+0xae>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e000      	b.n	800f870 <xQueueGenericSend+0xb0>
 800f86e:	2300      	movs	r3, #0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10c      	bne.n	800f88e <xQueueGenericSend+0xce>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	b672      	cpsid	i
 800f87a:	f383 8811 	msr	BASEPRI, r3
 800f87e:	f3bf 8f6f 	isb	sy
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	b662      	cpsie	i
 800f888:	61fb      	str	r3, [r7, #28]
}
 800f88a:	bf00      	nop
 800f88c:	e7fe      	b.n	800f88c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f88e:	f002 f87d 	bl	801198c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d302      	bcc.n	800f8a4 <xQueueGenericSend+0xe4>
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b02      	cmp	r3, #2
 800f8a2:	d129      	bne.n	800f8f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8a4:	683a      	ldr	r2, [r7, #0]
 800f8a6:	68b9      	ldr	r1, [r7, #8]
 800f8a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8aa:	f000 fa15 	bl	800fcd8 <prvCopyDataToQueue>
 800f8ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d010      	beq.n	800f8da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	3324      	adds	r3, #36	; 0x24
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f001 f865 	bl	801098c <xTaskRemoveFromEventList>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d013      	beq.n	800f8f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f8c8:	4b3f      	ldr	r3, [pc, #252]	; (800f9c8 <xQueueGenericSend+0x208>)
 800f8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ce:	601a      	str	r2, [r3, #0]
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	e00a      	b.n	800f8f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d007      	beq.n	800f8f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f8e0:	4b39      	ldr	r3, [pc, #228]	; (800f9c8 <xQueueGenericSend+0x208>)
 800f8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8e6:	601a      	str	r2, [r3, #0]
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f8f0:	f002 f880 	bl	80119f4 <vPortExitCritical>
				return pdPASS;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e063      	b.n	800f9c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d103      	bne.n	800f906 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8fe:	f002 f879 	bl	80119f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f902:	2300      	movs	r3, #0
 800f904:	e05c      	b.n	800f9c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d106      	bne.n	800f91a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f90c:	f107 0314 	add.w	r3, r7, #20
 800f910:	4618      	mov	r0, r3
 800f912:	f001 f8c9 	bl	8010aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f916:	2301      	movs	r3, #1
 800f918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f91a:	f002 f86b 	bl	80119f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f91e:	f000 fe07 	bl	8010530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f922:	f002 f833 	bl	801198c <vPortEnterCritical>
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f92c:	b25b      	sxtb	r3, r3
 800f92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f932:	d103      	bne.n	800f93c <xQueueGenericSend+0x17c>
 800f934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f942:	b25b      	sxtb	r3, r3
 800f944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f948:	d103      	bne.n	800f952 <xQueueGenericSend+0x192>
 800f94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f952:	f002 f84f 	bl	80119f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f956:	1d3a      	adds	r2, r7, #4
 800f958:	f107 0314 	add.w	r3, r7, #20
 800f95c:	4611      	mov	r1, r2
 800f95e:	4618      	mov	r0, r3
 800f960:	f001 f8b8 	bl	8010ad4 <xTaskCheckForTimeOut>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d124      	bne.n	800f9b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f96a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f96c:	f000 faac 	bl	800fec8 <prvIsQueueFull>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d018      	beq.n	800f9a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	3310      	adds	r3, #16
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	4611      	mov	r1, r2
 800f97e:	4618      	mov	r0, r3
 800f980:	f000 ffb0 	bl	80108e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f986:	f000 fa37 	bl	800fdf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f98a:	f000 fddf 	bl	801054c <xTaskResumeAll>
 800f98e:	4603      	mov	r3, r0
 800f990:	2b00      	cmp	r3, #0
 800f992:	f47f af7c 	bne.w	800f88e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f996:	4b0c      	ldr	r3, [pc, #48]	; (800f9c8 <xQueueGenericSend+0x208>)
 800f998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	e772      	b.n	800f88e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9aa:	f000 fa25 	bl	800fdf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9ae:	f000 fdcd 	bl	801054c <xTaskResumeAll>
 800f9b2:	e76c      	b.n	800f88e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9b6:	f000 fa1f 	bl	800fdf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9ba:	f000 fdc7 	bl	801054c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f9be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3738      	adds	r7, #56	; 0x38
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08e      	sub	sp, #56	; 0x38
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10c      	bne.n	800f9fe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e8:	b672      	cpsid	i
 800f9ea:	f383 8811 	msr	BASEPRI, r3
 800f9ee:	f3bf 8f6f 	isb	sy
 800f9f2:	f3bf 8f4f 	dsb	sy
 800f9f6:	b662      	cpsie	i
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d103      	bne.n	800fa0c <xQueueGenericSendFromISR+0x40>
 800fa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d101      	bne.n	800fa10 <xQueueGenericSendFromISR+0x44>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e000      	b.n	800fa12 <xQueueGenericSendFromISR+0x46>
 800fa10:	2300      	movs	r3, #0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10c      	bne.n	800fa30 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1a:	b672      	cpsid	i
 800fa1c:	f383 8811 	msr	BASEPRI, r3
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	f3bf 8f4f 	dsb	sy
 800fa28:	b662      	cpsie	i
 800fa2a:	623b      	str	r3, [r7, #32]
}
 800fa2c:	bf00      	nop
 800fa2e:	e7fe      	b.n	800fa2e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d103      	bne.n	800fa3e <xQueueGenericSendFromISR+0x72>
 800fa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d101      	bne.n	800fa42 <xQueueGenericSendFromISR+0x76>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e000      	b.n	800fa44 <xQueueGenericSendFromISR+0x78>
 800fa42:	2300      	movs	r3, #0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10c      	bne.n	800fa62 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4c:	b672      	cpsid	i
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	b662      	cpsie	i
 800fa5c:	61fb      	str	r3, [r7, #28]
}
 800fa5e:	bf00      	nop
 800fa60:	e7fe      	b.n	800fa60 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa62:	f002 f87b 	bl	8011b5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fa66:	f3ef 8211 	mrs	r2, BASEPRI
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	b672      	cpsid	i
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	b662      	cpsie	i
 800fa7e:	61ba      	str	r2, [r7, #24]
 800fa80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fa82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d302      	bcc.n	800fa98 <xQueueGenericSendFromISR+0xcc>
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d12c      	bne.n	800faf2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800faa2:	683a      	ldr	r2, [r7, #0]
 800faa4:	68b9      	ldr	r1, [r7, #8]
 800faa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faa8:	f000 f916 	bl	800fcd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800faac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fab4:	d112      	bne.n	800fadc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d016      	beq.n	800faec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	3324      	adds	r3, #36	; 0x24
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 ff62 	bl	801098c <xTaskRemoveFromEventList>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00e      	beq.n	800faec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00b      	beq.n	800faec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2201      	movs	r2, #1
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	e007      	b.n	800faec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fadc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fae0:	3301      	adds	r3, #1
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	b25a      	sxtb	r2, r3
 800fae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800faec:	2301      	movs	r3, #1
 800faee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800faf0:	e001      	b.n	800faf6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	637b      	str	r3, [r7, #52]	; 0x34
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3738      	adds	r7, #56	; 0x38
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b08c      	sub	sp, #48	; 0x30
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10c      	bne.n	800fb40 <xQueueReceive+0x34>
	__asm volatile
 800fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2a:	b672      	cpsid	i
 800fb2c:	f383 8811 	msr	BASEPRI, r3
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	b662      	cpsie	i
 800fb3a:	623b      	str	r3, [r7, #32]
}
 800fb3c:	bf00      	nop
 800fb3e:	e7fe      	b.n	800fb3e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d103      	bne.n	800fb4e <xQueueReceive+0x42>
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <xQueueReceive+0x46>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e000      	b.n	800fb54 <xQueueReceive+0x48>
 800fb52:	2300      	movs	r3, #0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10c      	bne.n	800fb72 <xQueueReceive+0x66>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	b672      	cpsid	i
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	b662      	cpsie	i
 800fb6c:	61fb      	str	r3, [r7, #28]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb72:	f001 f8f9 	bl	8010d68 <xTaskGetSchedulerState>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d102      	bne.n	800fb82 <xQueueReceive+0x76>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d101      	bne.n	800fb86 <xQueueReceive+0x7a>
 800fb82:	2301      	movs	r3, #1
 800fb84:	e000      	b.n	800fb88 <xQueueReceive+0x7c>
 800fb86:	2300      	movs	r3, #0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d10c      	bne.n	800fba6 <xQueueReceive+0x9a>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb90:	b672      	cpsid	i
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	b662      	cpsie	i
 800fba0:	61bb      	str	r3, [r7, #24]
}
 800fba2:	bf00      	nop
 800fba4:	e7fe      	b.n	800fba4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fba6:	f001 fef1 	bl	801198c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d01f      	beq.n	800fbf6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fbb6:	68b9      	ldr	r1, [r7, #8]
 800fbb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbba:	f000 f8f7 	bl	800fdac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	1e5a      	subs	r2, r3, #1
 800fbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00f      	beq.n	800fbee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	3310      	adds	r3, #16
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 feda 	bl	801098c <xTaskRemoveFromEventList>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d007      	beq.n	800fbee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fbde:	4b3d      	ldr	r3, [pc, #244]	; (800fcd4 <xQueueReceive+0x1c8>)
 800fbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbe4:	601a      	str	r2, [r3, #0]
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fbee:	f001 ff01 	bl	80119f4 <vPortExitCritical>
				return pdPASS;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	e069      	b.n	800fcca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d103      	bne.n	800fc04 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbfc:	f001 fefa 	bl	80119f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc00:	2300      	movs	r3, #0
 800fc02:	e062      	b.n	800fcca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d106      	bne.n	800fc18 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc0a:	f107 0310 	add.w	r3, r7, #16
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 ff4a 	bl	8010aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc14:	2301      	movs	r3, #1
 800fc16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc18:	f001 feec 	bl	80119f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc1c:	f000 fc88 	bl	8010530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc20:	f001 feb4 	bl	801198c <vPortEnterCritical>
 800fc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc2a:	b25b      	sxtb	r3, r3
 800fc2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc30:	d103      	bne.n	800fc3a <xQueueReceive+0x12e>
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	2200      	movs	r2, #0
 800fc36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc40:	b25b      	sxtb	r3, r3
 800fc42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc46:	d103      	bne.n	800fc50 <xQueueReceive+0x144>
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc50:	f001 fed0 	bl	80119f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc54:	1d3a      	adds	r2, r7, #4
 800fc56:	f107 0310 	add.w	r3, r7, #16
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f000 ff39 	bl	8010ad4 <xTaskCheckForTimeOut>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d123      	bne.n	800fcb0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc6a:	f000 f917 	bl	800fe9c <prvIsQueueEmpty>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d017      	beq.n	800fca4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc76:	3324      	adds	r3, #36	; 0x24
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f000 fe31 	bl	80108e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc84:	f000 f8b8 	bl	800fdf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc88:	f000 fc60 	bl	801054c <xTaskResumeAll>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d189      	bne.n	800fba6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800fc92:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <xQueueReceive+0x1c8>)
 800fc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	e780      	b.n	800fba6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fca6:	f000 f8a7 	bl	800fdf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fcaa:	f000 fc4f 	bl	801054c <xTaskResumeAll>
 800fcae:	e77a      	b.n	800fba6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fcb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcb2:	f000 f8a1 	bl	800fdf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fcb6:	f000 fc49 	bl	801054c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcbc:	f000 f8ee 	bl	800fe9c <prvIsQueueEmpty>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f43f af6f 	beq.w	800fba6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fcc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3730      	adds	r7, #48	; 0x30
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	e000ed04 	.word	0xe000ed04

0800fcd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fce4:	2300      	movs	r3, #0
 800fce6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10d      	bne.n	800fd12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d14d      	bne.n	800fd9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f001 f84e 	bl	8010da4 <xTaskPriorityDisinherit>
 800fd08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	609a      	str	r2, [r3, #8]
 800fd10:	e043      	b.n	800fd9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d119      	bne.n	800fd4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6858      	ldr	r0, [r3, #4]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd20:	461a      	mov	r2, r3
 800fd22:	68b9      	ldr	r1, [r7, #8]
 800fd24:	f011 fa39 	bl	802119a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd30:	441a      	add	r2, r3
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d32b      	bcc.n	800fd9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	605a      	str	r2, [r3, #4]
 800fd4a:	e026      	b.n	800fd9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	68d8      	ldr	r0, [r3, #12]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd54:	461a      	mov	r2, r3
 800fd56:	68b9      	ldr	r1, [r7, #8]
 800fd58:	f011 fa1f 	bl	802119a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	68da      	ldr	r2, [r3, #12]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd64:	425b      	negs	r3, r3
 800fd66:	441a      	add	r2, r3
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	68da      	ldr	r2, [r3, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d207      	bcs.n	800fd88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	689a      	ldr	r2, [r3, #8]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd80:	425b      	negs	r3, r3
 800fd82:	441a      	add	r2, r3
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d105      	bne.n	800fd9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fda2:	697b      	ldr	r3, [r7, #20]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d018      	beq.n	800fdf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	68da      	ldr	r2, [r3, #12]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdc6:	441a      	add	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	68da      	ldr	r2, [r3, #12]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d303      	bcc.n	800fde0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	68d9      	ldr	r1, [r3, #12]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde8:	461a      	mov	r2, r3
 800fdea:	6838      	ldr	r0, [r7, #0]
 800fdec:	f011 f9d5 	bl	802119a <memcpy>
	}
}
 800fdf0:	bf00      	nop
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fe00:	f001 fdc4 	bl	801198c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe0c:	e011      	b.n	800fe32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d012      	beq.n	800fe3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	3324      	adds	r3, #36	; 0x24
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f000 fdb6 	bl	801098c <xTaskRemoveFromEventList>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fe26:	f000 febb 	bl	8010ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fe2a:	7bfb      	ldrb	r3, [r7, #15]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	dce9      	bgt.n	800fe0e <prvUnlockQueue+0x16>
 800fe3a:	e000      	b.n	800fe3e <prvUnlockQueue+0x46>
					break;
 800fe3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	22ff      	movs	r2, #255	; 0xff
 800fe42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fe46:	f001 fdd5 	bl	80119f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fe4a:	f001 fd9f 	bl	801198c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe56:	e011      	b.n	800fe7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	691b      	ldr	r3, [r3, #16]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d012      	beq.n	800fe86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	3310      	adds	r3, #16
 800fe64:	4618      	mov	r0, r3
 800fe66:	f000 fd91 	bl	801098c <xTaskRemoveFromEventList>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d001      	beq.n	800fe74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fe70:	f000 fe96 	bl	8010ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fe74:	7bbb      	ldrb	r3, [r7, #14]
 800fe76:	3b01      	subs	r3, #1
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	dce9      	bgt.n	800fe58 <prvUnlockQueue+0x60>
 800fe84:	e000      	b.n	800fe88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fe86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	22ff      	movs	r2, #255	; 0xff
 800fe8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fe90:	f001 fdb0 	bl	80119f4 <vPortExitCritical>
}
 800fe94:	bf00      	nop
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fea4:	f001 fd72 	bl	801198c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feac:	2b00      	cmp	r3, #0
 800feae:	d102      	bne.n	800feb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800feb0:	2301      	movs	r3, #1
 800feb2:	60fb      	str	r3, [r7, #12]
 800feb4:	e001      	b.n	800feba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800feb6:	2300      	movs	r3, #0
 800feb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800feba:	f001 fd9b 	bl	80119f4 <vPortExitCritical>

	return xReturn;
 800febe:	68fb      	ldr	r3, [r7, #12]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fed0:	f001 fd5c 	bl	801198c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fedc:	429a      	cmp	r2, r3
 800fede:	d102      	bne.n	800fee6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fee0:	2301      	movs	r3, #1
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	e001      	b.n	800feea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fee6:	2300      	movs	r3, #0
 800fee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800feea:	f001 fd83 	bl	80119f4 <vPortExitCritical>

	return xReturn;
 800feee:	68fb      	ldr	r3, [r7, #12]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ff02:	2300      	movs	r3, #0
 800ff04:	60fb      	str	r3, [r7, #12]
 800ff06:	e014      	b.n	800ff32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ff08:	4a0f      	ldr	r2, [pc, #60]	; (800ff48 <vQueueAddToRegistry+0x50>)
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d10b      	bne.n	800ff2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ff14:	490c      	ldr	r1, [pc, #48]	; (800ff48 <vQueueAddToRegistry+0x50>)
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ff1e:	4a0a      	ldr	r2, [pc, #40]	; (800ff48 <vQueueAddToRegistry+0x50>)
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	00db      	lsls	r3, r3, #3
 800ff24:	4413      	add	r3, r2
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ff2a:	e006      	b.n	800ff3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	60fb      	str	r3, [r7, #12]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2b07      	cmp	r3, #7
 800ff36:	d9e7      	bls.n	800ff08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	3714      	adds	r7, #20
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	2000d208 	.word	0x2000d208

0800ff4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ff5c:	f001 fd16 	bl	801198c <vPortEnterCritical>
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff66:	b25b      	sxtb	r3, r3
 800ff68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff6c:	d103      	bne.n	800ff76 <vQueueWaitForMessageRestricted+0x2a>
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff7c:	b25b      	sxtb	r3, r3
 800ff7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff82:	d103      	bne.n	800ff8c <vQueueWaitForMessageRestricted+0x40>
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff8c:	f001 fd32 	bl	80119f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d106      	bne.n	800ffa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	3324      	adds	r3, #36	; 0x24
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	68b9      	ldr	r1, [r7, #8]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 fcc5 	bl	8010930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ffa6:	6978      	ldr	r0, [r7, #20]
 800ffa8:	f7ff ff26 	bl	800fdf8 <prvUnlockQueue>
	}
 800ffac:	bf00      	nop
 800ffae:	3718      	adds	r7, #24
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b08e      	sub	sp, #56	; 0x38
 800ffb8:	af04      	add	r7, sp, #16
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ffc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10c      	bne.n	800ffe2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ffc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffcc:	b672      	cpsid	i
 800ffce:	f383 8811 	msr	BASEPRI, r3
 800ffd2:	f3bf 8f6f 	isb	sy
 800ffd6:	f3bf 8f4f 	dsb	sy
 800ffda:	b662      	cpsie	i
 800ffdc:	623b      	str	r3, [r7, #32]
}
 800ffde:	bf00      	nop
 800ffe0:	e7fe      	b.n	800ffe0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10c      	bne.n	8010002 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ffe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffec:	b672      	cpsid	i
 800ffee:	f383 8811 	msr	BASEPRI, r3
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	b662      	cpsie	i
 800fffc:	61fb      	str	r3, [r7, #28]
}
 800fffe:	bf00      	nop
 8010000:	e7fe      	b.n	8010000 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010002:	235c      	movs	r3, #92	; 0x5c
 8010004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2b5c      	cmp	r3, #92	; 0x5c
 801000a:	d00c      	beq.n	8010026 <xTaskCreateStatic+0x72>
	__asm volatile
 801000c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010010:	b672      	cpsid	i
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	b662      	cpsie	i
 8010020:	61bb      	str	r3, [r7, #24]
}
 8010022:	bf00      	nop
 8010024:	e7fe      	b.n	8010024 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010026:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	2b00      	cmp	r3, #0
 801002c:	d01e      	beq.n	801006c <xTaskCreateStatic+0xb8>
 801002e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010030:	2b00      	cmp	r3, #0
 8010032:	d01b      	beq.n	801006c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801003c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801003e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010040:	2202      	movs	r2, #2
 8010042:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010046:	2300      	movs	r3, #0
 8010048:	9303      	str	r3, [sp, #12]
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	9302      	str	r3, [sp, #8]
 801004e:	f107 0314 	add.w	r3, r7, #20
 8010052:	9301      	str	r3, [sp, #4]
 8010054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	68b9      	ldr	r1, [r7, #8]
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 f850 	bl	8010104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010066:	f000 f8df 	bl	8010228 <prvAddNewTaskToReadyList>
 801006a:	e001      	b.n	8010070 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801006c:	2300      	movs	r3, #0
 801006e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010070:	697b      	ldr	r3, [r7, #20]
	}
 8010072:	4618      	mov	r0, r3
 8010074:	3728      	adds	r7, #40	; 0x28
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}

0801007a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801007a:	b580      	push	{r7, lr}
 801007c:	b08c      	sub	sp, #48	; 0x30
 801007e:	af04      	add	r7, sp, #16
 8010080:	60f8      	str	r0, [r7, #12]
 8010082:	60b9      	str	r1, [r7, #8]
 8010084:	603b      	str	r3, [r7, #0]
 8010086:	4613      	mov	r3, r2
 8010088:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801008a:	88fb      	ldrh	r3, [r7, #6]
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	4618      	mov	r0, r3
 8010090:	f001 fda8 	bl	8011be4 <pvPortMalloc>
 8010094:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00e      	beq.n	80100ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801009c:	205c      	movs	r0, #92	; 0x5c
 801009e:	f001 fda1 	bl	8011be4 <pvPortMalloc>
 80100a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d003      	beq.n	80100b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	697a      	ldr	r2, [r7, #20]
 80100ae:	631a      	str	r2, [r3, #48]	; 0x30
 80100b0:	e005      	b.n	80100be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80100b2:	6978      	ldr	r0, [r7, #20]
 80100b4:	f001 fe60 	bl	8011d78 <vPortFree>
 80100b8:	e001      	b.n	80100be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80100ba:	2300      	movs	r3, #0
 80100bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d017      	beq.n	80100f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80100cc:	88fa      	ldrh	r2, [r7, #6]
 80100ce:	2300      	movs	r3, #0
 80100d0:	9303      	str	r3, [sp, #12]
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	9302      	str	r3, [sp, #8]
 80100d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	68b9      	ldr	r1, [r7, #8]
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f000 f80e 	bl	8010104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80100e8:	69f8      	ldr	r0, [r7, #28]
 80100ea:	f000 f89d 	bl	8010228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80100ee:	2301      	movs	r3, #1
 80100f0:	61bb      	str	r3, [r7, #24]
 80100f2:	e002      	b.n	80100fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80100f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80100fa:	69bb      	ldr	r3, [r7, #24]
	}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b088      	sub	sp, #32
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
 8010110:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	461a      	mov	r2, r3
 801011c:	21a5      	movs	r1, #165	; 0xa5
 801011e:	f010 ff73 	bl	8021008 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010126:	6879      	ldr	r1, [r7, #4]
 8010128:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801012c:	440b      	add	r3, r1
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	4413      	add	r3, r2
 8010132:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	f023 0307 	bic.w	r3, r3, #7
 801013a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	f003 0307 	and.w	r3, r3, #7
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00c      	beq.n	8010160 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014a:	b672      	cpsid	i
 801014c:	f383 8811 	msr	BASEPRI, r3
 8010150:	f3bf 8f6f 	isb	sy
 8010154:	f3bf 8f4f 	dsb	sy
 8010158:	b662      	cpsie	i
 801015a:	617b      	str	r3, [r7, #20]
}
 801015c:	bf00      	nop
 801015e:	e7fe      	b.n	801015e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d01f      	beq.n	80101a6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010166:	2300      	movs	r3, #0
 8010168:	61fb      	str	r3, [r7, #28]
 801016a:	e012      	b.n	8010192 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	4413      	add	r3, r2
 8010172:	7819      	ldrb	r1, [r3, #0]
 8010174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	4413      	add	r3, r2
 801017a:	3334      	adds	r3, #52	; 0x34
 801017c:	460a      	mov	r2, r1
 801017e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010180:	68ba      	ldr	r2, [r7, #8]
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4413      	add	r3, r2
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d006      	beq.n	801019a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	3301      	adds	r3, #1
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	2b0f      	cmp	r3, #15
 8010196:	d9e9      	bls.n	801016c <prvInitialiseNewTask+0x68>
 8010198:	e000      	b.n	801019c <prvInitialiseNewTask+0x98>
			{
				break;
 801019a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801019c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019e:	2200      	movs	r2, #0
 80101a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80101a4:	e003      	b.n	80101ae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80101ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b0:	2b37      	cmp	r3, #55	; 0x37
 80101b2:	d901      	bls.n	80101b8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80101b4:	2337      	movs	r3, #55	; 0x37
 80101b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80101b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	2200      	movs	r2, #0
 80101c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80101ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101cc:	3304      	adds	r3, #4
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff f952 	bl	800f478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80101d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d6:	3318      	adds	r3, #24
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff f94d 	bl	800f478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80101de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80101f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f6:	2200      	movs	r2, #0
 80101f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80101fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fc:	2200      	movs	r2, #0
 80101fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	68f9      	ldr	r1, [r7, #12]
 8010206:	69b8      	ldr	r0, [r7, #24]
 8010208:	f001 fab0 	bl	801176c <pxPortInitialiseStack>
 801020c:	4602      	mov	r2, r0
 801020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010210:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010214:	2b00      	cmp	r3, #0
 8010216:	d002      	beq.n	801021e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801021c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801021e:	bf00      	nop
 8010220:	3720      	adds	r7, #32
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
	...

08010228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010230:	f001 fbac 	bl	801198c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010234:	4b2d      	ldr	r3, [pc, #180]	; (80102ec <prvAddNewTaskToReadyList+0xc4>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3301      	adds	r3, #1
 801023a:	4a2c      	ldr	r2, [pc, #176]	; (80102ec <prvAddNewTaskToReadyList+0xc4>)
 801023c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801023e:	4b2c      	ldr	r3, [pc, #176]	; (80102f0 <prvAddNewTaskToReadyList+0xc8>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d109      	bne.n	801025a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010246:	4a2a      	ldr	r2, [pc, #168]	; (80102f0 <prvAddNewTaskToReadyList+0xc8>)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801024c:	4b27      	ldr	r3, [pc, #156]	; (80102ec <prvAddNewTaskToReadyList+0xc4>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b01      	cmp	r3, #1
 8010252:	d110      	bne.n	8010276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010254:	f000 fcc8 	bl	8010be8 <prvInitialiseTaskLists>
 8010258:	e00d      	b.n	8010276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801025a:	4b26      	ldr	r3, [pc, #152]	; (80102f4 <prvAddNewTaskToReadyList+0xcc>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d109      	bne.n	8010276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010262:	4b23      	ldr	r3, [pc, #140]	; (80102f0 <prvAddNewTaskToReadyList+0xc8>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026c:	429a      	cmp	r2, r3
 801026e:	d802      	bhi.n	8010276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010270:	4a1f      	ldr	r2, [pc, #124]	; (80102f0 <prvAddNewTaskToReadyList+0xc8>)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010276:	4b20      	ldr	r3, [pc, #128]	; (80102f8 <prvAddNewTaskToReadyList+0xd0>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3301      	adds	r3, #1
 801027c:	4a1e      	ldr	r2, [pc, #120]	; (80102f8 <prvAddNewTaskToReadyList+0xd0>)
 801027e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010280:	4b1d      	ldr	r3, [pc, #116]	; (80102f8 <prvAddNewTaskToReadyList+0xd0>)
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801028c:	4b1b      	ldr	r3, [pc, #108]	; (80102fc <prvAddNewTaskToReadyList+0xd4>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	429a      	cmp	r2, r3
 8010292:	d903      	bls.n	801029c <prvAddNewTaskToReadyList+0x74>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010298:	4a18      	ldr	r2, [pc, #96]	; (80102fc <prvAddNewTaskToReadyList+0xd4>)
 801029a:	6013      	str	r3, [r2, #0]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102a0:	4613      	mov	r3, r2
 80102a2:	009b      	lsls	r3, r3, #2
 80102a4:	4413      	add	r3, r2
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	4a15      	ldr	r2, [pc, #84]	; (8010300 <prvAddNewTaskToReadyList+0xd8>)
 80102aa:	441a      	add	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	3304      	adds	r3, #4
 80102b0:	4619      	mov	r1, r3
 80102b2:	4610      	mov	r0, r2
 80102b4:	f7ff f8ed 	bl	800f492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80102b8:	f001 fb9c 	bl	80119f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80102bc:	4b0d      	ldr	r3, [pc, #52]	; (80102f4 <prvAddNewTaskToReadyList+0xcc>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00e      	beq.n	80102e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80102c4:	4b0a      	ldr	r3, [pc, #40]	; (80102f0 <prvAddNewTaskToReadyList+0xc8>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d207      	bcs.n	80102e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80102d2:	4b0c      	ldr	r3, [pc, #48]	; (8010304 <prvAddNewTaskToReadyList+0xdc>)
 80102d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102e2:	bf00      	nop
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	2000d71c 	.word	0x2000d71c
 80102f0:	2000d248 	.word	0x2000d248
 80102f4:	2000d728 	.word	0x2000d728
 80102f8:	2000d738 	.word	0x2000d738
 80102fc:	2000d724 	.word	0x2000d724
 8010300:	2000d24c 	.word	0x2000d24c
 8010304:	e000ed04 	.word	0xe000ed04

08010308 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010310:	f001 fb3c 	bl	801198c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d102      	bne.n	8010320 <vTaskDelete+0x18>
 801031a:	4b2d      	ldr	r3, [pc, #180]	; (80103d0 <vTaskDelete+0xc8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	e000      	b.n	8010322 <vTaskDelete+0x1a>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	3304      	adds	r3, #4
 8010328:	4618      	mov	r0, r3
 801032a:	f7ff f90f 	bl	800f54c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010332:	2b00      	cmp	r3, #0
 8010334:	d004      	beq.n	8010340 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3318      	adds	r3, #24
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff f906 	bl	800f54c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010340:	4b24      	ldr	r3, [pc, #144]	; (80103d4 <vTaskDelete+0xcc>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3301      	adds	r3, #1
 8010346:	4a23      	ldr	r2, [pc, #140]	; (80103d4 <vTaskDelete+0xcc>)
 8010348:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801034a:	4b21      	ldr	r3, [pc, #132]	; (80103d0 <vTaskDelete+0xc8>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	429a      	cmp	r2, r3
 8010352:	d10b      	bne.n	801036c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	3304      	adds	r3, #4
 8010358:	4619      	mov	r1, r3
 801035a:	481f      	ldr	r0, [pc, #124]	; (80103d8 <vTaskDelete+0xd0>)
 801035c:	f7ff f899 	bl	800f492 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010360:	4b1e      	ldr	r3, [pc, #120]	; (80103dc <vTaskDelete+0xd4>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3301      	adds	r3, #1
 8010366:	4a1d      	ldr	r2, [pc, #116]	; (80103dc <vTaskDelete+0xd4>)
 8010368:	6013      	str	r3, [r2, #0]
 801036a:	e009      	b.n	8010380 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801036c:	4b1c      	ldr	r3, [pc, #112]	; (80103e0 <vTaskDelete+0xd8>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	3b01      	subs	r3, #1
 8010372:	4a1b      	ldr	r2, [pc, #108]	; (80103e0 <vTaskDelete+0xd8>)
 8010374:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f000 fca4 	bl	8010cc4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801037c:	f000 fcd4 	bl	8010d28 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8010380:	f001 fb38 	bl	80119f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010384:	4b17      	ldr	r3, [pc, #92]	; (80103e4 <vTaskDelete+0xdc>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d01d      	beq.n	80103c8 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 801038c:	4b10      	ldr	r3, [pc, #64]	; (80103d0 <vTaskDelete+0xc8>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	429a      	cmp	r2, r3
 8010394:	d118      	bne.n	80103c8 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010396:	4b14      	ldr	r3, [pc, #80]	; (80103e8 <vTaskDelete+0xe0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00c      	beq.n	80103b8 <vTaskDelete+0xb0>
	__asm volatile
 801039e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a2:	b672      	cpsid	i
 80103a4:	f383 8811 	msr	BASEPRI, r3
 80103a8:	f3bf 8f6f 	isb	sy
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	b662      	cpsie	i
 80103b2:	60bb      	str	r3, [r7, #8]
}
 80103b4:	bf00      	nop
 80103b6:	e7fe      	b.n	80103b6 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 80103b8:	4b0c      	ldr	r3, [pc, #48]	; (80103ec <vTaskDelete+0xe4>)
 80103ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103be:	601a      	str	r2, [r3, #0]
 80103c0:	f3bf 8f4f 	dsb	sy
 80103c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80103c8:	bf00      	nop
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	2000d248 	.word	0x2000d248
 80103d4:	2000d738 	.word	0x2000d738
 80103d8:	2000d6f0 	.word	0x2000d6f0
 80103dc:	2000d704 	.word	0x2000d704
 80103e0:	2000d71c 	.word	0x2000d71c
 80103e4:	2000d728 	.word	0x2000d728
 80103e8:	2000d744 	.word	0x2000d744
 80103ec:	e000ed04 	.word	0xe000ed04

080103f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d019      	beq.n	8010436 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010402:	4b14      	ldr	r3, [pc, #80]	; (8010454 <vTaskDelay+0x64>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00c      	beq.n	8010424 <vTaskDelay+0x34>
	__asm volatile
 801040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040e:	b672      	cpsid	i
 8010410:	f383 8811 	msr	BASEPRI, r3
 8010414:	f3bf 8f6f 	isb	sy
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	b662      	cpsie	i
 801041e:	60bb      	str	r3, [r7, #8]
}
 8010420:	bf00      	nop
 8010422:	e7fe      	b.n	8010422 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010424:	f000 f884 	bl	8010530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010428:	2100      	movs	r1, #0
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fd2c 	bl	8010e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010430:	f000 f88c 	bl	801054c <xTaskResumeAll>
 8010434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d107      	bne.n	801044c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801043c:	4b06      	ldr	r3, [pc, #24]	; (8010458 <vTaskDelay+0x68>)
 801043e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010442:	601a      	str	r2, [r3, #0]
 8010444:	f3bf 8f4f 	dsb	sy
 8010448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801044c:	bf00      	nop
 801044e:	3710      	adds	r7, #16
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	2000d744 	.word	0x2000d744
 8010458:	e000ed04 	.word	0xe000ed04

0801045c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b08a      	sub	sp, #40	; 0x28
 8010460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010462:	2300      	movs	r3, #0
 8010464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010466:	2300      	movs	r3, #0
 8010468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801046a:	463a      	mov	r2, r7
 801046c:	1d39      	adds	r1, r7, #4
 801046e:	f107 0308 	add.w	r3, r7, #8
 8010472:	4618      	mov	r0, r3
 8010474:	f7fe ffac 	bl	800f3d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	9202      	str	r2, [sp, #8]
 8010480:	9301      	str	r3, [sp, #4]
 8010482:	2300      	movs	r3, #0
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	2300      	movs	r3, #0
 8010488:	460a      	mov	r2, r1
 801048a:	4923      	ldr	r1, [pc, #140]	; (8010518 <vTaskStartScheduler+0xbc>)
 801048c:	4823      	ldr	r0, [pc, #140]	; (801051c <vTaskStartScheduler+0xc0>)
 801048e:	f7ff fd91 	bl	800ffb4 <xTaskCreateStatic>
 8010492:	4603      	mov	r3, r0
 8010494:	4a22      	ldr	r2, [pc, #136]	; (8010520 <vTaskStartScheduler+0xc4>)
 8010496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010498:	4b21      	ldr	r3, [pc, #132]	; (8010520 <vTaskStartScheduler+0xc4>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80104a0:	2301      	movs	r3, #1
 80104a2:	617b      	str	r3, [r7, #20]
 80104a4:	e001      	b.n	80104aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d102      	bne.n	80104b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80104b0:	f000 fd3e 	bl	8010f30 <xTimerCreateTimerTask>
 80104b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d118      	bne.n	80104ee <vTaskStartScheduler+0x92>
	__asm volatile
 80104bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c0:	b672      	cpsid	i
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	b662      	cpsie	i
 80104d0:	613b      	str	r3, [r7, #16]
}
 80104d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80104d4:	4b13      	ldr	r3, [pc, #76]	; (8010524 <vTaskStartScheduler+0xc8>)
 80104d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80104dc:	4b12      	ldr	r3, [pc, #72]	; (8010528 <vTaskStartScheduler+0xcc>)
 80104de:	2201      	movs	r2, #1
 80104e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80104e2:	4b12      	ldr	r3, [pc, #72]	; (801052c <vTaskStartScheduler+0xd0>)
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80104e8:	f001 f9d2 	bl	8011890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80104ec:	e010      	b.n	8010510 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104f4:	d10c      	bne.n	8010510 <vTaskStartScheduler+0xb4>
	__asm volatile
 80104f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fa:	b672      	cpsid	i
 80104fc:	f383 8811 	msr	BASEPRI, r3
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	b662      	cpsie	i
 801050a:	60fb      	str	r3, [r7, #12]
}
 801050c:	bf00      	nop
 801050e:	e7fe      	b.n	801050e <vTaskStartScheduler+0xb2>
}
 8010510:	bf00      	nop
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	080221f4 	.word	0x080221f4
 801051c:	08010bb9 	.word	0x08010bb9
 8010520:	2000d740 	.word	0x2000d740
 8010524:	2000d73c 	.word	0x2000d73c
 8010528:	2000d728 	.word	0x2000d728
 801052c:	2000d720 	.word	0x2000d720

08010530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010530:	b480      	push	{r7}
 8010532:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010534:	4b04      	ldr	r3, [pc, #16]	; (8010548 <vTaskSuspendAll+0x18>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	3301      	adds	r3, #1
 801053a:	4a03      	ldr	r2, [pc, #12]	; (8010548 <vTaskSuspendAll+0x18>)
 801053c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801053e:	bf00      	nop
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	2000d744 	.word	0x2000d744

0801054c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010552:	2300      	movs	r3, #0
 8010554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010556:	2300      	movs	r3, #0
 8010558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801055a:	4b43      	ldr	r3, [pc, #268]	; (8010668 <xTaskResumeAll+0x11c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d10c      	bne.n	801057c <xTaskResumeAll+0x30>
	__asm volatile
 8010562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010566:	b672      	cpsid	i
 8010568:	f383 8811 	msr	BASEPRI, r3
 801056c:	f3bf 8f6f 	isb	sy
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	b662      	cpsie	i
 8010576:	603b      	str	r3, [r7, #0]
}
 8010578:	bf00      	nop
 801057a:	e7fe      	b.n	801057a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801057c:	f001 fa06 	bl	801198c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010580:	4b39      	ldr	r3, [pc, #228]	; (8010668 <xTaskResumeAll+0x11c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3b01      	subs	r3, #1
 8010586:	4a38      	ldr	r2, [pc, #224]	; (8010668 <xTaskResumeAll+0x11c>)
 8010588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801058a:	4b37      	ldr	r3, [pc, #220]	; (8010668 <xTaskResumeAll+0x11c>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d162      	bne.n	8010658 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010592:	4b36      	ldr	r3, [pc, #216]	; (801066c <xTaskResumeAll+0x120>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d05e      	beq.n	8010658 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801059a:	e02f      	b.n	80105fc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801059c:	4b34      	ldr	r3, [pc, #208]	; (8010670 <xTaskResumeAll+0x124>)
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	3318      	adds	r3, #24
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fe ffcf 	bl	800f54c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	3304      	adds	r3, #4
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fe ffca 	bl	800f54c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105bc:	4b2d      	ldr	r3, [pc, #180]	; (8010674 <xTaskResumeAll+0x128>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d903      	bls.n	80105cc <xTaskResumeAll+0x80>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c8:	4a2a      	ldr	r2, [pc, #168]	; (8010674 <xTaskResumeAll+0x128>)
 80105ca:	6013      	str	r3, [r2, #0]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d0:	4613      	mov	r3, r2
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	4a27      	ldr	r2, [pc, #156]	; (8010678 <xTaskResumeAll+0x12c>)
 80105da:	441a      	add	r2, r3
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	3304      	adds	r3, #4
 80105e0:	4619      	mov	r1, r3
 80105e2:	4610      	mov	r0, r2
 80105e4:	f7fe ff55 	bl	800f492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ec:	4b23      	ldr	r3, [pc, #140]	; (801067c <xTaskResumeAll+0x130>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d302      	bcc.n	80105fc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80105f6:	4b22      	ldr	r3, [pc, #136]	; (8010680 <xTaskResumeAll+0x134>)
 80105f8:	2201      	movs	r2, #1
 80105fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105fc:	4b1c      	ldr	r3, [pc, #112]	; (8010670 <xTaskResumeAll+0x124>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1cb      	bne.n	801059c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d001      	beq.n	801060e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801060a:	f000 fb8d 	bl	8010d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801060e:	4b1d      	ldr	r3, [pc, #116]	; (8010684 <xTaskResumeAll+0x138>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d010      	beq.n	801063c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801061a:	f000 f847 	bl	80106ac <xTaskIncrementTick>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010624:	4b16      	ldr	r3, [pc, #88]	; (8010680 <xTaskResumeAll+0x134>)
 8010626:	2201      	movs	r2, #1
 8010628:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3b01      	subs	r3, #1
 801062e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1f1      	bne.n	801061a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8010636:	4b13      	ldr	r3, [pc, #76]	; (8010684 <xTaskResumeAll+0x138>)
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801063c:	4b10      	ldr	r3, [pc, #64]	; (8010680 <xTaskResumeAll+0x134>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d009      	beq.n	8010658 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010644:	2301      	movs	r3, #1
 8010646:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010648:	4b0f      	ldr	r3, [pc, #60]	; (8010688 <xTaskResumeAll+0x13c>)
 801064a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801064e:	601a      	str	r2, [r3, #0]
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010658:	f001 f9cc 	bl	80119f4 <vPortExitCritical>

	return xAlreadyYielded;
 801065c:	68bb      	ldr	r3, [r7, #8]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	2000d744 	.word	0x2000d744
 801066c:	2000d71c 	.word	0x2000d71c
 8010670:	2000d6dc 	.word	0x2000d6dc
 8010674:	2000d724 	.word	0x2000d724
 8010678:	2000d24c 	.word	0x2000d24c
 801067c:	2000d248 	.word	0x2000d248
 8010680:	2000d730 	.word	0x2000d730
 8010684:	2000d72c 	.word	0x2000d72c
 8010688:	e000ed04 	.word	0xe000ed04

0801068c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010692:	4b05      	ldr	r3, [pc, #20]	; (80106a8 <xTaskGetTickCount+0x1c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010698:	687b      	ldr	r3, [r7, #4]
}
 801069a:	4618      	mov	r0, r3
 801069c:	370c      	adds	r7, #12
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	2000d720 	.word	0x2000d720

080106ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80106b2:	2300      	movs	r3, #0
 80106b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106b6:	4b50      	ldr	r3, [pc, #320]	; (80107f8 <xTaskIncrementTick+0x14c>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f040 808b 	bne.w	80107d6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80106c0:	4b4e      	ldr	r3, [pc, #312]	; (80107fc <xTaskIncrementTick+0x150>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	3301      	adds	r3, #1
 80106c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80106c8:	4a4c      	ldr	r2, [pc, #304]	; (80107fc <xTaskIncrementTick+0x150>)
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d122      	bne.n	801071a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80106d4:	4b4a      	ldr	r3, [pc, #296]	; (8010800 <xTaskIncrementTick+0x154>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00c      	beq.n	80106f8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	b672      	cpsid	i
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	b662      	cpsie	i
 80106f2:	603b      	str	r3, [r7, #0]
}
 80106f4:	bf00      	nop
 80106f6:	e7fe      	b.n	80106f6 <xTaskIncrementTick+0x4a>
 80106f8:	4b41      	ldr	r3, [pc, #260]	; (8010800 <xTaskIncrementTick+0x154>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	60fb      	str	r3, [r7, #12]
 80106fe:	4b41      	ldr	r3, [pc, #260]	; (8010804 <xTaskIncrementTick+0x158>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4a3f      	ldr	r2, [pc, #252]	; (8010800 <xTaskIncrementTick+0x154>)
 8010704:	6013      	str	r3, [r2, #0]
 8010706:	4a3f      	ldr	r2, [pc, #252]	; (8010804 <xTaskIncrementTick+0x158>)
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	6013      	str	r3, [r2, #0]
 801070c:	4b3e      	ldr	r3, [pc, #248]	; (8010808 <xTaskIncrementTick+0x15c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	4a3d      	ldr	r2, [pc, #244]	; (8010808 <xTaskIncrementTick+0x15c>)
 8010714:	6013      	str	r3, [r2, #0]
 8010716:	f000 fb07 	bl	8010d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801071a:	4b3c      	ldr	r3, [pc, #240]	; (801080c <xTaskIncrementTick+0x160>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	693a      	ldr	r2, [r7, #16]
 8010720:	429a      	cmp	r2, r3
 8010722:	d349      	bcc.n	80107b8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010724:	4b36      	ldr	r3, [pc, #216]	; (8010800 <xTaskIncrementTick+0x154>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d104      	bne.n	8010738 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801072e:	4b37      	ldr	r3, [pc, #220]	; (801080c <xTaskIncrementTick+0x160>)
 8010730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010734:	601a      	str	r2, [r3, #0]
					break;
 8010736:	e03f      	b.n	80107b8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010738:	4b31      	ldr	r3, [pc, #196]	; (8010800 <xTaskIncrementTick+0x154>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	429a      	cmp	r2, r3
 801074e:	d203      	bcs.n	8010758 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010750:	4a2e      	ldr	r2, [pc, #184]	; (801080c <xTaskIncrementTick+0x160>)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010756:	e02f      	b.n	80107b8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	3304      	adds	r3, #4
 801075c:	4618      	mov	r0, r3
 801075e:	f7fe fef5 	bl	800f54c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010766:	2b00      	cmp	r3, #0
 8010768:	d004      	beq.n	8010774 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	3318      	adds	r3, #24
 801076e:	4618      	mov	r0, r3
 8010770:	f7fe feec 	bl	800f54c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010778:	4b25      	ldr	r3, [pc, #148]	; (8010810 <xTaskIncrementTick+0x164>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	429a      	cmp	r2, r3
 801077e:	d903      	bls.n	8010788 <xTaskIncrementTick+0xdc>
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010784:	4a22      	ldr	r2, [pc, #136]	; (8010810 <xTaskIncrementTick+0x164>)
 8010786:	6013      	str	r3, [r2, #0]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801078c:	4613      	mov	r3, r2
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4413      	add	r3, r2
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4a1f      	ldr	r2, [pc, #124]	; (8010814 <xTaskIncrementTick+0x168>)
 8010796:	441a      	add	r2, r3
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	3304      	adds	r3, #4
 801079c:	4619      	mov	r1, r3
 801079e:	4610      	mov	r0, r2
 80107a0:	f7fe fe77 	bl	800f492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a8:	4b1b      	ldr	r3, [pc, #108]	; (8010818 <xTaskIncrementTick+0x16c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d3b8      	bcc.n	8010724 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80107b2:	2301      	movs	r3, #1
 80107b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107b6:	e7b5      	b.n	8010724 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80107b8:	4b17      	ldr	r3, [pc, #92]	; (8010818 <xTaskIncrementTick+0x16c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107be:	4915      	ldr	r1, [pc, #84]	; (8010814 <xTaskIncrementTick+0x168>)
 80107c0:	4613      	mov	r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	440b      	add	r3, r1
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d907      	bls.n	80107e0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80107d0:	2301      	movs	r3, #1
 80107d2:	617b      	str	r3, [r7, #20]
 80107d4:	e004      	b.n	80107e0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80107d6:	4b11      	ldr	r3, [pc, #68]	; (801081c <xTaskIncrementTick+0x170>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	3301      	adds	r3, #1
 80107dc:	4a0f      	ldr	r2, [pc, #60]	; (801081c <xTaskIncrementTick+0x170>)
 80107de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80107e0:	4b0f      	ldr	r3, [pc, #60]	; (8010820 <xTaskIncrementTick+0x174>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d001      	beq.n	80107ec <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80107e8:	2301      	movs	r3, #1
 80107ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80107ec:	697b      	ldr	r3, [r7, #20]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3718      	adds	r7, #24
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	2000d744 	.word	0x2000d744
 80107fc:	2000d720 	.word	0x2000d720
 8010800:	2000d6d4 	.word	0x2000d6d4
 8010804:	2000d6d8 	.word	0x2000d6d8
 8010808:	2000d734 	.word	0x2000d734
 801080c:	2000d73c 	.word	0x2000d73c
 8010810:	2000d724 	.word	0x2000d724
 8010814:	2000d24c 	.word	0x2000d24c
 8010818:	2000d248 	.word	0x2000d248
 801081c:	2000d72c 	.word	0x2000d72c
 8010820:	2000d730 	.word	0x2000d730

08010824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801082a:	4b29      	ldr	r3, [pc, #164]	; (80108d0 <vTaskSwitchContext+0xac>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d003      	beq.n	801083a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010832:	4b28      	ldr	r3, [pc, #160]	; (80108d4 <vTaskSwitchContext+0xb0>)
 8010834:	2201      	movs	r2, #1
 8010836:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010838:	e043      	b.n	80108c2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 801083a:	4b26      	ldr	r3, [pc, #152]	; (80108d4 <vTaskSwitchContext+0xb0>)
 801083c:	2200      	movs	r2, #0
 801083e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010840:	4b25      	ldr	r3, [pc, #148]	; (80108d8 <vTaskSwitchContext+0xb4>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	60fb      	str	r3, [r7, #12]
 8010846:	e012      	b.n	801086e <vTaskSwitchContext+0x4a>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d10c      	bne.n	8010868 <vTaskSwitchContext+0x44>
	__asm volatile
 801084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010852:	b672      	cpsid	i
 8010854:	f383 8811 	msr	BASEPRI, r3
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	b662      	cpsie	i
 8010862:	607b      	str	r3, [r7, #4]
}
 8010864:	bf00      	nop
 8010866:	e7fe      	b.n	8010866 <vTaskSwitchContext+0x42>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	3b01      	subs	r3, #1
 801086c:	60fb      	str	r3, [r7, #12]
 801086e:	491b      	ldr	r1, [pc, #108]	; (80108dc <vTaskSwitchContext+0xb8>)
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	4613      	mov	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	440b      	add	r3, r1
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d0e2      	beq.n	8010848 <vTaskSwitchContext+0x24>
 8010882:	68fa      	ldr	r2, [r7, #12]
 8010884:	4613      	mov	r3, r2
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4413      	add	r3, r2
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	4a13      	ldr	r2, [pc, #76]	; (80108dc <vTaskSwitchContext+0xb8>)
 801088e:	4413      	add	r3, r2
 8010890:	60bb      	str	r3, [r7, #8]
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	685a      	ldr	r2, [r3, #4]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	605a      	str	r2, [r3, #4]
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	685a      	ldr	r2, [r3, #4]
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	3308      	adds	r3, #8
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d104      	bne.n	80108b2 <vTaskSwitchContext+0x8e>
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	605a      	str	r2, [r3, #4]
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	4a09      	ldr	r2, [pc, #36]	; (80108e0 <vTaskSwitchContext+0xbc>)
 80108ba:	6013      	str	r3, [r2, #0]
 80108bc:	4a06      	ldr	r2, [pc, #24]	; (80108d8 <vTaskSwitchContext+0xb4>)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6013      	str	r3, [r2, #0]
}
 80108c2:	bf00      	nop
 80108c4:	3714      	adds	r7, #20
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	2000d744 	.word	0x2000d744
 80108d4:	2000d730 	.word	0x2000d730
 80108d8:	2000d724 	.word	0x2000d724
 80108dc:	2000d24c 	.word	0x2000d24c
 80108e0:	2000d248 	.word	0x2000d248

080108e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d10c      	bne.n	801090e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80108f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f8:	b672      	cpsid	i
 80108fa:	f383 8811 	msr	BASEPRI, r3
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	b662      	cpsie	i
 8010908:	60fb      	str	r3, [r7, #12]
}
 801090a:	bf00      	nop
 801090c:	e7fe      	b.n	801090c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801090e:	4b07      	ldr	r3, [pc, #28]	; (801092c <vTaskPlaceOnEventList+0x48>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3318      	adds	r3, #24
 8010914:	4619      	mov	r1, r3
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f7fe fddf 	bl	800f4da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801091c:	2101      	movs	r1, #1
 801091e:	6838      	ldr	r0, [r7, #0]
 8010920:	f000 fab2 	bl	8010e88 <prvAddCurrentTaskToDelayedList>
}
 8010924:	bf00      	nop
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	2000d248 	.word	0x2000d248

08010930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010930:	b580      	push	{r7, lr}
 8010932:	b086      	sub	sp, #24
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10c      	bne.n	801095c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	b672      	cpsid	i
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	b662      	cpsie	i
 8010956:	617b      	str	r3, [r7, #20]
}
 8010958:	bf00      	nop
 801095a:	e7fe      	b.n	801095a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801095c:	4b0a      	ldr	r3, [pc, #40]	; (8010988 <vTaskPlaceOnEventListRestricted+0x58>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3318      	adds	r3, #24
 8010962:	4619      	mov	r1, r3
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7fe fd94 	bl	800f492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8010970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010974:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	68b8      	ldr	r0, [r7, #8]
 801097a:	f000 fa85 	bl	8010e88 <prvAddCurrentTaskToDelayedList>
	}
 801097e:	bf00      	nop
 8010980:	3718      	adds	r7, #24
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	2000d248 	.word	0x2000d248

0801098c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b086      	sub	sp, #24
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d10c      	bne.n	80109bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80109a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a6:	b672      	cpsid	i
 80109a8:	f383 8811 	msr	BASEPRI, r3
 80109ac:	f3bf 8f6f 	isb	sy
 80109b0:	f3bf 8f4f 	dsb	sy
 80109b4:	b662      	cpsie	i
 80109b6:	60fb      	str	r3, [r7, #12]
}
 80109b8:	bf00      	nop
 80109ba:	e7fe      	b.n	80109ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	3318      	adds	r3, #24
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fe fdc3 	bl	800f54c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109c6:	4b1e      	ldr	r3, [pc, #120]	; (8010a40 <xTaskRemoveFromEventList+0xb4>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d11d      	bne.n	8010a0a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	3304      	adds	r3, #4
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fe fdba 	bl	800f54c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109dc:	4b19      	ldr	r3, [pc, #100]	; (8010a44 <xTaskRemoveFromEventList+0xb8>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d903      	bls.n	80109ec <xTaskRemoveFromEventList+0x60>
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109e8:	4a16      	ldr	r2, [pc, #88]	; (8010a44 <xTaskRemoveFromEventList+0xb8>)
 80109ea:	6013      	str	r3, [r2, #0]
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f0:	4613      	mov	r3, r2
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	4413      	add	r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4a13      	ldr	r2, [pc, #76]	; (8010a48 <xTaskRemoveFromEventList+0xbc>)
 80109fa:	441a      	add	r2, r3
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	3304      	adds	r3, #4
 8010a00:	4619      	mov	r1, r3
 8010a02:	4610      	mov	r0, r2
 8010a04:	f7fe fd45 	bl	800f492 <vListInsertEnd>
 8010a08:	e005      	b.n	8010a16 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	3318      	adds	r3, #24
 8010a0e:	4619      	mov	r1, r3
 8010a10:	480e      	ldr	r0, [pc, #56]	; (8010a4c <xTaskRemoveFromEventList+0xc0>)
 8010a12:	f7fe fd3e 	bl	800f492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a1a:	4b0d      	ldr	r3, [pc, #52]	; (8010a50 <xTaskRemoveFromEventList+0xc4>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d905      	bls.n	8010a30 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a24:	2301      	movs	r3, #1
 8010a26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a28:	4b0a      	ldr	r3, [pc, #40]	; (8010a54 <xTaskRemoveFromEventList+0xc8>)
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	e001      	b.n	8010a34 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010a30:	2300      	movs	r3, #0
 8010a32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a34:	697b      	ldr	r3, [r7, #20]
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3718      	adds	r7, #24
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	2000d744 	.word	0x2000d744
 8010a44:	2000d724 	.word	0x2000d724
 8010a48:	2000d24c 	.word	0x2000d24c
 8010a4c:	2000d6dc 	.word	0x2000d6dc
 8010a50:	2000d248 	.word	0x2000d248
 8010a54:	2000d730 	.word	0x2000d730

08010a58 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d10c      	bne.n	8010a80 <vTaskSetTimeOutState+0x28>
	__asm volatile
 8010a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6a:	b672      	cpsid	i
 8010a6c:	f383 8811 	msr	BASEPRI, r3
 8010a70:	f3bf 8f6f 	isb	sy
 8010a74:	f3bf 8f4f 	dsb	sy
 8010a78:	b662      	cpsie	i
 8010a7a:	60fb      	str	r3, [r7, #12]
}
 8010a7c:	bf00      	nop
 8010a7e:	e7fe      	b.n	8010a7e <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8010a80:	f000 ff84 	bl	801198c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a84:	4b06      	ldr	r3, [pc, #24]	; (8010aa0 <vTaskSetTimeOutState+0x48>)
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8010a8c:	4b05      	ldr	r3, [pc, #20]	; (8010aa4 <vTaskSetTimeOutState+0x4c>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8010a94:	f000 ffae 	bl	80119f4 <vPortExitCritical>
}
 8010a98:	bf00      	nop
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	2000d734 	.word	0x2000d734
 8010aa4:	2000d720 	.word	0x2000d720

08010aa8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ab0:	4b06      	ldr	r3, [pc, #24]	; (8010acc <vTaskInternalSetTimeOutState+0x24>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ab8:	4b05      	ldr	r3, [pc, #20]	; (8010ad0 <vTaskInternalSetTimeOutState+0x28>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	605a      	str	r2, [r3, #4]
}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	2000d734 	.word	0x2000d734
 8010ad0:	2000d720 	.word	0x2000d720

08010ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b088      	sub	sp, #32
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d10c      	bne.n	8010afe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	b672      	cpsid	i
 8010aea:	f383 8811 	msr	BASEPRI, r3
 8010aee:	f3bf 8f6f 	isb	sy
 8010af2:	f3bf 8f4f 	dsb	sy
 8010af6:	b662      	cpsie	i
 8010af8:	613b      	str	r3, [r7, #16]
}
 8010afa:	bf00      	nop
 8010afc:	e7fe      	b.n	8010afc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10c      	bne.n	8010b1e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b08:	b672      	cpsid	i
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	b662      	cpsie	i
 8010b18:	60fb      	str	r3, [r7, #12]
}
 8010b1a:	bf00      	nop
 8010b1c:	e7fe      	b.n	8010b1c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010b1e:	f000 ff35 	bl	801198c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010b22:	4b1d      	ldr	r3, [pc, #116]	; (8010b98 <xTaskCheckForTimeOut+0xc4>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	69ba      	ldr	r2, [r7, #24]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b3a:	d102      	bne.n	8010b42 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	61fb      	str	r3, [r7, #28]
 8010b40:	e023      	b.n	8010b8a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	4b15      	ldr	r3, [pc, #84]	; (8010b9c <xTaskCheckForTimeOut+0xc8>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d007      	beq.n	8010b5e <xTaskCheckForTimeOut+0x8a>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	69ba      	ldr	r2, [r7, #24]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d302      	bcc.n	8010b5e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	61fb      	str	r3, [r7, #28]
 8010b5c:	e015      	b.n	8010b8a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d20b      	bcs.n	8010b80 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	1ad2      	subs	r2, r2, r3
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff ff97 	bl	8010aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	61fb      	str	r3, [r7, #28]
 8010b7e:	e004      	b.n	8010b8a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2200      	movs	r2, #0
 8010b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b86:	2301      	movs	r3, #1
 8010b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b8a:	f000 ff33 	bl	80119f4 <vPortExitCritical>

	return xReturn;
 8010b8e:	69fb      	ldr	r3, [r7, #28]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3720      	adds	r7, #32
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	2000d720 	.word	0x2000d720
 8010b9c:	2000d734 	.word	0x2000d734

08010ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010ba4:	4b03      	ldr	r3, [pc, #12]	; (8010bb4 <vTaskMissedYield+0x14>)
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	601a      	str	r2, [r3, #0]
}
 8010baa:	bf00      	nop
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	2000d730 	.word	0x2000d730

08010bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010bc0:	f000 f852 	bl	8010c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010bc4:	4b06      	ldr	r3, [pc, #24]	; (8010be0 <prvIdleTask+0x28>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d9f9      	bls.n	8010bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010bcc:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <prvIdleTask+0x2c>)
 8010bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	f3bf 8f4f 	dsb	sy
 8010bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010bdc:	e7f0      	b.n	8010bc0 <prvIdleTask+0x8>
 8010bde:	bf00      	nop
 8010be0:	2000d24c 	.word	0x2000d24c
 8010be4:	e000ed04 	.word	0xe000ed04

08010be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bee:	2300      	movs	r3, #0
 8010bf0:	607b      	str	r3, [r7, #4]
 8010bf2:	e00c      	b.n	8010c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	4613      	mov	r3, r2
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	4413      	add	r3, r2
 8010bfc:	009b      	lsls	r3, r3, #2
 8010bfe:	4a12      	ldr	r2, [pc, #72]	; (8010c48 <prvInitialiseTaskLists+0x60>)
 8010c00:	4413      	add	r3, r2
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fe fc18 	bl	800f438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	607b      	str	r3, [r7, #4]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2b37      	cmp	r3, #55	; 0x37
 8010c12:	d9ef      	bls.n	8010bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010c14:	480d      	ldr	r0, [pc, #52]	; (8010c4c <prvInitialiseTaskLists+0x64>)
 8010c16:	f7fe fc0f 	bl	800f438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010c1a:	480d      	ldr	r0, [pc, #52]	; (8010c50 <prvInitialiseTaskLists+0x68>)
 8010c1c:	f7fe fc0c 	bl	800f438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010c20:	480c      	ldr	r0, [pc, #48]	; (8010c54 <prvInitialiseTaskLists+0x6c>)
 8010c22:	f7fe fc09 	bl	800f438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010c26:	480c      	ldr	r0, [pc, #48]	; (8010c58 <prvInitialiseTaskLists+0x70>)
 8010c28:	f7fe fc06 	bl	800f438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010c2c:	480b      	ldr	r0, [pc, #44]	; (8010c5c <prvInitialiseTaskLists+0x74>)
 8010c2e:	f7fe fc03 	bl	800f438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c32:	4b0b      	ldr	r3, [pc, #44]	; (8010c60 <prvInitialiseTaskLists+0x78>)
 8010c34:	4a05      	ldr	r2, [pc, #20]	; (8010c4c <prvInitialiseTaskLists+0x64>)
 8010c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c38:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <prvInitialiseTaskLists+0x7c>)
 8010c3a:	4a05      	ldr	r2, [pc, #20]	; (8010c50 <prvInitialiseTaskLists+0x68>)
 8010c3c:	601a      	str	r2, [r3, #0]
}
 8010c3e:	bf00      	nop
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	2000d24c 	.word	0x2000d24c
 8010c4c:	2000d6ac 	.word	0x2000d6ac
 8010c50:	2000d6c0 	.word	0x2000d6c0
 8010c54:	2000d6dc 	.word	0x2000d6dc
 8010c58:	2000d6f0 	.word	0x2000d6f0
 8010c5c:	2000d708 	.word	0x2000d708
 8010c60:	2000d6d4 	.word	0x2000d6d4
 8010c64:	2000d6d8 	.word	0x2000d6d8

08010c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c6e:	e019      	b.n	8010ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c70:	f000 fe8c 	bl	801198c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c74:	4b10      	ldr	r3, [pc, #64]	; (8010cb8 <prvCheckTasksWaitingTermination+0x50>)
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	3304      	adds	r3, #4
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fe fc63 	bl	800f54c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c86:	4b0d      	ldr	r3, [pc, #52]	; (8010cbc <prvCheckTasksWaitingTermination+0x54>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	4a0b      	ldr	r2, [pc, #44]	; (8010cbc <prvCheckTasksWaitingTermination+0x54>)
 8010c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c90:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <prvCheckTasksWaitingTermination+0x58>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	3b01      	subs	r3, #1
 8010c96:	4a0a      	ldr	r2, [pc, #40]	; (8010cc0 <prvCheckTasksWaitingTermination+0x58>)
 8010c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c9a:	f000 feab 	bl	80119f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f810 	bl	8010cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ca4:	4b06      	ldr	r3, [pc, #24]	; (8010cc0 <prvCheckTasksWaitingTermination+0x58>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1e1      	bne.n	8010c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010cac:	bf00      	nop
 8010cae:	bf00      	nop
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	2000d6f0 	.word	0x2000d6f0
 8010cbc:	2000d71c 	.word	0x2000d71c
 8010cc0:	2000d704 	.word	0x2000d704

08010cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d108      	bne.n	8010ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f001 f84c 	bl	8011d78 <vPortFree>
				vPortFree( pxTCB );
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f001 f849 	bl	8011d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ce6:	e01a      	b.n	8010d1e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d103      	bne.n	8010cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 f840 	bl	8011d78 <vPortFree>
	}
 8010cf8:	e011      	b.n	8010d1e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	d00c      	beq.n	8010d1e <prvDeleteTCB+0x5a>
	__asm volatile
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	b672      	cpsid	i
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	b662      	cpsie	i
 8010d18:	60fb      	str	r3, [r7, #12]
}
 8010d1a:	bf00      	nop
 8010d1c:	e7fe      	b.n	8010d1c <prvDeleteTCB+0x58>
	}
 8010d1e:	bf00      	nop
 8010d20:	3710      	adds	r7, #16
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
	...

08010d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d2e:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <prvResetNextTaskUnblockTime+0x38>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d104      	bne.n	8010d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d38:	4b0a      	ldr	r3, [pc, #40]	; (8010d64 <prvResetNextTaskUnblockTime+0x3c>)
 8010d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010d40:	e008      	b.n	8010d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d42:	4b07      	ldr	r3, [pc, #28]	; (8010d60 <prvResetNextTaskUnblockTime+0x38>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	4a04      	ldr	r2, [pc, #16]	; (8010d64 <prvResetNextTaskUnblockTime+0x3c>)
 8010d52:	6013      	str	r3, [r2, #0]
}
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	2000d6d4 	.word	0x2000d6d4
 8010d64:	2000d73c 	.word	0x2000d73c

08010d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d6e:	4b0b      	ldr	r3, [pc, #44]	; (8010d9c <xTaskGetSchedulerState+0x34>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d76:	2301      	movs	r3, #1
 8010d78:	607b      	str	r3, [r7, #4]
 8010d7a:	e008      	b.n	8010d8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d7c:	4b08      	ldr	r3, [pc, #32]	; (8010da0 <xTaskGetSchedulerState+0x38>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d102      	bne.n	8010d8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d84:	2302      	movs	r3, #2
 8010d86:	607b      	str	r3, [r7, #4]
 8010d88:	e001      	b.n	8010d8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d8e:	687b      	ldr	r3, [r7, #4]
	}
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr
 8010d9c:	2000d728 	.word	0x2000d728
 8010da0:	2000d744 	.word	0x2000d744

08010da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010db0:	2300      	movs	r3, #0
 8010db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d05a      	beq.n	8010e70 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010dba:	4b30      	ldr	r3, [pc, #192]	; (8010e7c <xTaskPriorityDisinherit+0xd8>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	693a      	ldr	r2, [r7, #16]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d00c      	beq.n	8010dde <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	b672      	cpsid	i
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	b662      	cpsie	i
 8010dd8:	60fb      	str	r3, [r7, #12]
}
 8010dda:	bf00      	nop
 8010ddc:	e7fe      	b.n	8010ddc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d10c      	bne.n	8010e00 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dea:	b672      	cpsid	i
 8010dec:	f383 8811 	msr	BASEPRI, r3
 8010df0:	f3bf 8f6f 	isb	sy
 8010df4:	f3bf 8f4f 	dsb	sy
 8010df8:	b662      	cpsie	i
 8010dfa:	60bb      	str	r3, [r7, #8]
}
 8010dfc:	bf00      	nop
 8010dfe:	e7fe      	b.n	8010dfe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e04:	1e5a      	subs	r2, r3, #1
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d02c      	beq.n	8010e70 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d128      	bne.n	8010e70 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	3304      	adds	r3, #4
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fe fb92 	bl	800f54c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e40:	4b0f      	ldr	r3, [pc, #60]	; (8010e80 <xTaskPriorityDisinherit+0xdc>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d903      	bls.n	8010e50 <xTaskPriorityDisinherit+0xac>
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e4c:	4a0c      	ldr	r2, [pc, #48]	; (8010e80 <xTaskPriorityDisinherit+0xdc>)
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e54:	4613      	mov	r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	4413      	add	r3, r2
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4a09      	ldr	r2, [pc, #36]	; (8010e84 <xTaskPriorityDisinherit+0xe0>)
 8010e5e:	441a      	add	r2, r3
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	3304      	adds	r3, #4
 8010e64:	4619      	mov	r1, r3
 8010e66:	4610      	mov	r0, r2
 8010e68:	f7fe fb13 	bl	800f492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e70:	697b      	ldr	r3, [r7, #20]
	}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3718      	adds	r7, #24
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	2000d248 	.word	0x2000d248
 8010e80:	2000d724 	.word	0x2000d724
 8010e84:	2000d24c 	.word	0x2000d24c

08010e88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e92:	4b21      	ldr	r3, [pc, #132]	; (8010f18 <prvAddCurrentTaskToDelayedList+0x90>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e98:	4b20      	ldr	r3, [pc, #128]	; (8010f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe fb54 	bl	800f54c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010eaa:	d10a      	bne.n	8010ec2 <prvAddCurrentTaskToDelayedList+0x3a>
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d007      	beq.n	8010ec2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eb2:	4b1a      	ldr	r3, [pc, #104]	; (8010f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4819      	ldr	r0, [pc, #100]	; (8010f20 <prvAddCurrentTaskToDelayedList+0x98>)
 8010ebc:	f7fe fae9 	bl	800f492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ec0:	e026      	b.n	8010f10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010eca:	4b14      	ldr	r3, [pc, #80]	; (8010f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	68ba      	ldr	r2, [r7, #8]
 8010ed0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d209      	bcs.n	8010eee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eda:	4b12      	ldr	r3, [pc, #72]	; (8010f24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	4b0f      	ldr	r3, [pc, #60]	; (8010f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	4610      	mov	r0, r2
 8010ee8:	f7fe faf7 	bl	800f4da <vListInsert>
}
 8010eec:	e010      	b.n	8010f10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eee:	4b0e      	ldr	r3, [pc, #56]	; (8010f28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	4b0a      	ldr	r3, [pc, #40]	; (8010f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	3304      	adds	r3, #4
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4610      	mov	r0, r2
 8010efc:	f7fe faed 	bl	800f4da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f00:	4b0a      	ldr	r3, [pc, #40]	; (8010f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d202      	bcs.n	8010f10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010f0a:	4a08      	ldr	r2, [pc, #32]	; (8010f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	6013      	str	r3, [r2, #0]
}
 8010f10:	bf00      	nop
 8010f12:	3710      	adds	r7, #16
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	2000d720 	.word	0x2000d720
 8010f1c:	2000d248 	.word	0x2000d248
 8010f20:	2000d708 	.word	0x2000d708
 8010f24:	2000d6d8 	.word	0x2000d6d8
 8010f28:	2000d6d4 	.word	0x2000d6d4
 8010f2c:	2000d73c 	.word	0x2000d73c

08010f30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08a      	sub	sp, #40	; 0x28
 8010f34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010f36:	2300      	movs	r3, #0
 8010f38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010f3a:	f000 fbb5 	bl	80116a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010f3e:	4b1d      	ldr	r3, [pc, #116]	; (8010fb4 <xTimerCreateTimerTask+0x84>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d021      	beq.n	8010f8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010f46:	2300      	movs	r3, #0
 8010f48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f4e:	1d3a      	adds	r2, r7, #4
 8010f50:	f107 0108 	add.w	r1, r7, #8
 8010f54:	f107 030c 	add.w	r3, r7, #12
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7fe fa53 	bl	800f404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f5e:	6879      	ldr	r1, [r7, #4]
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	9202      	str	r2, [sp, #8]
 8010f66:	9301      	str	r3, [sp, #4]
 8010f68:	2302      	movs	r3, #2
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	460a      	mov	r2, r1
 8010f70:	4911      	ldr	r1, [pc, #68]	; (8010fb8 <xTimerCreateTimerTask+0x88>)
 8010f72:	4812      	ldr	r0, [pc, #72]	; (8010fbc <xTimerCreateTimerTask+0x8c>)
 8010f74:	f7ff f81e 	bl	800ffb4 <xTaskCreateStatic>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	4a11      	ldr	r2, [pc, #68]	; (8010fc0 <xTimerCreateTimerTask+0x90>)
 8010f7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010f7e:	4b10      	ldr	r3, [pc, #64]	; (8010fc0 <xTimerCreateTimerTask+0x90>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010f86:	2301      	movs	r3, #1
 8010f88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d10c      	bne.n	8010faa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8010f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f94:	b672      	cpsid	i
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	b662      	cpsie	i
 8010fa4:	613b      	str	r3, [r7, #16]
}
 8010fa6:	bf00      	nop
 8010fa8:	e7fe      	b.n	8010fa8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010faa:	697b      	ldr	r3, [r7, #20]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3718      	adds	r7, #24
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	2000d778 	.word	0x2000d778
 8010fb8:	080221fc 	.word	0x080221fc
 8010fbc:	08011241 	.word	0x08011241
 8010fc0:	2000d77c 	.word	0x2000d77c

08010fc4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b088      	sub	sp, #32
 8010fc8:	af02      	add	r7, sp, #8
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
 8010fd0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010fd2:	202c      	movs	r0, #44	; 0x2c
 8010fd4:	f000 fe06 	bl	8011be4 <pvPortMalloc>
 8010fd8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00d      	beq.n	8010ffc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	9301      	str	r3, [sp, #4]
 8010fec:	6a3b      	ldr	r3, [r7, #32]
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	68b9      	ldr	r1, [r7, #8]
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	f000 f847 	bl	801108a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010ffc:	697b      	ldr	r3, [r7, #20]
	}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3718      	adds	r7, #24
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011006:	b580      	push	{r7, lr}
 8011008:	b08a      	sub	sp, #40	; 0x28
 801100a:	af02      	add	r7, sp, #8
 801100c:	60f8      	str	r0, [r7, #12]
 801100e:	60b9      	str	r1, [r7, #8]
 8011010:	607a      	str	r2, [r7, #4]
 8011012:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011014:	232c      	movs	r3, #44	; 0x2c
 8011016:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	2b2c      	cmp	r3, #44	; 0x2c
 801101c:	d00c      	beq.n	8011038 <xTimerCreateStatic+0x32>
	__asm volatile
 801101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011022:	b672      	cpsid	i
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	b662      	cpsie	i
 8011032:	61bb      	str	r3, [r7, #24]
}
 8011034:	bf00      	nop
 8011036:	e7fe      	b.n	8011036 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011038:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10c      	bne.n	801105a <xTimerCreateStatic+0x54>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011044:	b672      	cpsid	i
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	b662      	cpsie	i
 8011054:	617b      	str	r3, [r7, #20]
}
 8011056:	bf00      	nop
 8011058:	e7fe      	b.n	8011058 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00d      	beq.n	8011080 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	2202      	movs	r2, #2
 8011068:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	9301      	str	r3, [sp, #4]
 8011070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	68b9      	ldr	r1, [r7, #8]
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	f000 f805 	bl	801108a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011080:	69fb      	ldr	r3, [r7, #28]
	}
 8011082:	4618      	mov	r0, r3
 8011084:	3720      	adds	r7, #32
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b086      	sub	sp, #24
 801108e:	af00      	add	r7, sp, #0
 8011090:	60f8      	str	r0, [r7, #12]
 8011092:	60b9      	str	r1, [r7, #8]
 8011094:	607a      	str	r2, [r7, #4]
 8011096:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d10c      	bne.n	80110b8 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 801109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a2:	b672      	cpsid	i
 80110a4:	f383 8811 	msr	BASEPRI, r3
 80110a8:	f3bf 8f6f 	isb	sy
 80110ac:	f3bf 8f4f 	dsb	sy
 80110b0:	b662      	cpsie	i
 80110b2:	617b      	str	r3, [r7, #20]
}
 80110b4:	bf00      	nop
 80110b6:	e7fe      	b.n	80110b6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 80110b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d01e      	beq.n	80110fc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80110be:	f000 faf3 	bl	80116a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80110c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80110c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	683a      	ldr	r2, [r7, #0]
 80110d2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	6a3a      	ldr	r2, [r7, #32]
 80110d8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110dc:	3304      	adds	r3, #4
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe f9ca 	bl	800f478 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d008      	beq.n	80110fc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110f0:	f043 0304 	orr.w	r3, r3, #4
 80110f4:	b2da      	uxtb	r2, r3
 80110f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80110fc:	bf00      	nop
 80110fe:	3718      	adds	r7, #24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08a      	sub	sp, #40	; 0x28
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
 8011110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011112:	2300      	movs	r3, #0
 8011114:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10c      	bne.n	8011136 <xTimerGenericCommand+0x32>
	__asm volatile
 801111c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011120:	b672      	cpsid	i
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	b662      	cpsie	i
 8011130:	623b      	str	r3, [r7, #32]
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011136:	4b1a      	ldr	r3, [pc, #104]	; (80111a0 <xTimerGenericCommand+0x9c>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d02a      	beq.n	8011194 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	2b05      	cmp	r3, #5
 801114e:	dc18      	bgt.n	8011182 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011150:	f7ff fe0a 	bl	8010d68 <xTaskGetSchedulerState>
 8011154:	4603      	mov	r3, r0
 8011156:	2b02      	cmp	r3, #2
 8011158:	d109      	bne.n	801116e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801115a:	4b11      	ldr	r3, [pc, #68]	; (80111a0 <xTimerGenericCommand+0x9c>)
 801115c:	6818      	ldr	r0, [r3, #0]
 801115e:	f107 0110 	add.w	r1, r7, #16
 8011162:	2300      	movs	r3, #0
 8011164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011166:	f7fe fb2b 	bl	800f7c0 <xQueueGenericSend>
 801116a:	6278      	str	r0, [r7, #36]	; 0x24
 801116c:	e012      	b.n	8011194 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801116e:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <xTimerGenericCommand+0x9c>)
 8011170:	6818      	ldr	r0, [r3, #0]
 8011172:	f107 0110 	add.w	r1, r7, #16
 8011176:	2300      	movs	r3, #0
 8011178:	2200      	movs	r2, #0
 801117a:	f7fe fb21 	bl	800f7c0 <xQueueGenericSend>
 801117e:	6278      	str	r0, [r7, #36]	; 0x24
 8011180:	e008      	b.n	8011194 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011182:	4b07      	ldr	r3, [pc, #28]	; (80111a0 <xTimerGenericCommand+0x9c>)
 8011184:	6818      	ldr	r0, [r3, #0]
 8011186:	f107 0110 	add.w	r1, r7, #16
 801118a:	2300      	movs	r3, #0
 801118c:	683a      	ldr	r2, [r7, #0]
 801118e:	f7fe fc1d 	bl	800f9cc <xQueueGenericSendFromISR>
 8011192:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011196:	4618      	mov	r0, r3
 8011198:	3728      	adds	r7, #40	; 0x28
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	2000d778 	.word	0x2000d778

080111a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b088      	sub	sp, #32
 80111a8:	af02      	add	r7, sp, #8
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ae:	4b23      	ldr	r3, [pc, #140]	; (801123c <prvProcessExpiredTimer+0x98>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	3304      	adds	r3, #4
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fe f9c5 	bl	800f54c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111c8:	f003 0304 	and.w	r3, r3, #4
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d024      	beq.n	801121a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	699a      	ldr	r2, [r3, #24]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	18d1      	adds	r1, r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	683a      	ldr	r2, [r7, #0]
 80111dc:	6978      	ldr	r0, [r7, #20]
 80111de:	f000 f8d3 	bl	8011388 <prvInsertTimerInActiveList>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d021      	beq.n	801122c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80111e8:	2300      	movs	r3, #0
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	2300      	movs	r3, #0
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	2100      	movs	r1, #0
 80111f2:	6978      	ldr	r0, [r7, #20]
 80111f4:	f7ff ff86 	bl	8011104 <xTimerGenericCommand>
 80111f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d115      	bne.n	801122c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011204:	b672      	cpsid	i
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	b662      	cpsie	i
 8011214:	60fb      	str	r3, [r7, #12]
}
 8011216:	bf00      	nop
 8011218:	e7fe      	b.n	8011218 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011220:	f023 0301 	bic.w	r3, r3, #1
 8011224:	b2da      	uxtb	r2, r3
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	6a1b      	ldr	r3, [r3, #32]
 8011230:	6978      	ldr	r0, [r7, #20]
 8011232:	4798      	blx	r3
}
 8011234:	bf00      	nop
 8011236:	3718      	adds	r7, #24
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	2000d770 	.word	0x2000d770

08011240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011248:	f107 0308 	add.w	r3, r7, #8
 801124c:	4618      	mov	r0, r3
 801124e:	f000 f857 	bl	8011300 <prvGetNextExpireTime>
 8011252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	4619      	mov	r1, r3
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f000 f803 	bl	8011264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801125e:	f000 f8d5 	bl	801140c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011262:	e7f1      	b.n	8011248 <prvTimerTask+0x8>

08011264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801126e:	f7ff f95f 	bl	8010530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011272:	f107 0308 	add.w	r3, r7, #8
 8011276:	4618      	mov	r0, r3
 8011278:	f000 f866 	bl	8011348 <prvSampleTimeNow>
 801127c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d130      	bne.n	80112e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d10a      	bne.n	80112a0 <prvProcessTimerOrBlockTask+0x3c>
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	429a      	cmp	r2, r3
 8011290:	d806      	bhi.n	80112a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011292:	f7ff f95b 	bl	801054c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011296:	68f9      	ldr	r1, [r7, #12]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f7ff ff83 	bl	80111a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801129e:	e024      	b.n	80112ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d008      	beq.n	80112b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80112a6:	4b13      	ldr	r3, [pc, #76]	; (80112f4 <prvProcessTimerOrBlockTask+0x90>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <prvProcessTimerOrBlockTask+0x50>
 80112b0:	2301      	movs	r3, #1
 80112b2:	e000      	b.n	80112b6 <prvProcessTimerOrBlockTask+0x52>
 80112b4:	2300      	movs	r3, #0
 80112b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80112b8:	4b0f      	ldr	r3, [pc, #60]	; (80112f8 <prvProcessTimerOrBlockTask+0x94>)
 80112ba:	6818      	ldr	r0, [r3, #0]
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	683a      	ldr	r2, [r7, #0]
 80112c4:	4619      	mov	r1, r3
 80112c6:	f7fe fe41 	bl	800ff4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80112ca:	f7ff f93f 	bl	801054c <xTaskResumeAll>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d10a      	bne.n	80112ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80112d4:	4b09      	ldr	r3, [pc, #36]	; (80112fc <prvProcessTimerOrBlockTask+0x98>)
 80112d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112da:	601a      	str	r2, [r3, #0]
 80112dc:	f3bf 8f4f 	dsb	sy
 80112e0:	f3bf 8f6f 	isb	sy
}
 80112e4:	e001      	b.n	80112ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80112e6:	f7ff f931 	bl	801054c <xTaskResumeAll>
}
 80112ea:	bf00      	nop
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	2000d774 	.word	0x2000d774
 80112f8:	2000d778 	.word	0x2000d778
 80112fc:	e000ed04 	.word	0xe000ed04

08011300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011308:	4b0e      	ldr	r3, [pc, #56]	; (8011344 <prvGetNextExpireTime+0x44>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <prvGetNextExpireTime+0x16>
 8011312:	2201      	movs	r2, #1
 8011314:	e000      	b.n	8011318 <prvGetNextExpireTime+0x18>
 8011316:	2200      	movs	r2, #0
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d105      	bne.n	8011330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011324:	4b07      	ldr	r3, [pc, #28]	; (8011344 <prvGetNextExpireTime+0x44>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	60fb      	str	r3, [r7, #12]
 801132e:	e001      	b.n	8011334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011330:	2300      	movs	r3, #0
 8011332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011334:	68fb      	ldr	r3, [r7, #12]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3714      	adds	r7, #20
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
 8011344:	2000d770 	.word	0x2000d770

08011348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011350:	f7ff f99c 	bl	801068c <xTaskGetTickCount>
 8011354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011356:	4b0b      	ldr	r3, [pc, #44]	; (8011384 <prvSampleTimeNow+0x3c>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	429a      	cmp	r2, r3
 801135e:	d205      	bcs.n	801136c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011360:	f000 f93c 	bl	80115dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2201      	movs	r2, #1
 8011368:	601a      	str	r2, [r3, #0]
 801136a:	e002      	b.n	8011372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2200      	movs	r2, #0
 8011370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011372:	4a04      	ldr	r2, [pc, #16]	; (8011384 <prvSampleTimeNow+0x3c>)
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011378:	68fb      	ldr	r3, [r7, #12]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	2000d780 	.word	0x2000d780

08011388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
 8011394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011396:	2300      	movs	r3, #0
 8011398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d812      	bhi.n	80113d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	1ad2      	subs	r2, r2, r3
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	699b      	ldr	r3, [r3, #24]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d302      	bcc.n	80113c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80113bc:	2301      	movs	r3, #1
 80113be:	617b      	str	r3, [r7, #20]
 80113c0:	e01b      	b.n	80113fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80113c2:	4b10      	ldr	r3, [pc, #64]	; (8011404 <prvInsertTimerInActiveList+0x7c>)
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	3304      	adds	r3, #4
 80113ca:	4619      	mov	r1, r3
 80113cc:	4610      	mov	r0, r2
 80113ce:	f7fe f884 	bl	800f4da <vListInsert>
 80113d2:	e012      	b.n	80113fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d206      	bcs.n	80113ea <prvInsertTimerInActiveList+0x62>
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d302      	bcc.n	80113ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80113e4:	2301      	movs	r3, #1
 80113e6:	617b      	str	r3, [r7, #20]
 80113e8:	e007      	b.n	80113fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80113ea:	4b07      	ldr	r3, [pc, #28]	; (8011408 <prvInsertTimerInActiveList+0x80>)
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	3304      	adds	r3, #4
 80113f2:	4619      	mov	r1, r3
 80113f4:	4610      	mov	r0, r2
 80113f6:	f7fe f870 	bl	800f4da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80113fa:	697b      	ldr	r3, [r7, #20]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3718      	adds	r7, #24
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	2000d774 	.word	0x2000d774
 8011408:	2000d770 	.word	0x2000d770

0801140c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b08e      	sub	sp, #56	; 0x38
 8011410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011412:	e0d0      	b.n	80115b6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	da1a      	bge.n	8011450 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801141a:	1d3b      	adds	r3, r7, #4
 801141c:	3304      	adds	r3, #4
 801141e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011422:	2b00      	cmp	r3, #0
 8011424:	d10c      	bne.n	8011440 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8011426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142a:	b672      	cpsid	i
 801142c:	f383 8811 	msr	BASEPRI, r3
 8011430:	f3bf 8f6f 	isb	sy
 8011434:	f3bf 8f4f 	dsb	sy
 8011438:	b662      	cpsie	i
 801143a:	61fb      	str	r3, [r7, #28]
}
 801143c:	bf00      	nop
 801143e:	e7fe      	b.n	801143e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011446:	6850      	ldr	r0, [r2, #4]
 8011448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801144a:	6892      	ldr	r2, [r2, #8]
 801144c:	4611      	mov	r1, r2
 801144e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	f2c0 80af 	blt.w	80115b6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	695b      	ldr	r3, [r3, #20]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d004      	beq.n	801146e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011466:	3304      	adds	r3, #4
 8011468:	4618      	mov	r0, r3
 801146a:	f7fe f86f 	bl	800f54c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801146e:	463b      	mov	r3, r7
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff ff69 	bl	8011348 <prvSampleTimeNow>
 8011476:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b09      	cmp	r3, #9
 801147c:	f200 809a 	bhi.w	80115b4 <prvProcessReceivedCommands+0x1a8>
 8011480:	a201      	add	r2, pc, #4	; (adr r2, 8011488 <prvProcessReceivedCommands+0x7c>)
 8011482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011486:	bf00      	nop
 8011488:	080114b1 	.word	0x080114b1
 801148c:	080114b1 	.word	0x080114b1
 8011490:	080114b1 	.word	0x080114b1
 8011494:	08011529 	.word	0x08011529
 8011498:	0801153d 	.word	0x0801153d
 801149c:	0801158b 	.word	0x0801158b
 80114a0:	080114b1 	.word	0x080114b1
 80114a4:	080114b1 	.word	0x080114b1
 80114a8:	08011529 	.word	0x08011529
 80114ac:	0801153d 	.word	0x0801153d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114b6:	f043 0301 	orr.w	r3, r3, #1
 80114ba:	b2da      	uxtb	r2, r3
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c6:	699b      	ldr	r3, [r3, #24]
 80114c8:	18d1      	adds	r1, r2, r3
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114d0:	f7ff ff5a 	bl	8011388 <prvInsertTimerInActiveList>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d06d      	beq.n	80115b6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114dc:	6a1b      	ldr	r3, [r3, #32]
 80114de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80114e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114e8:	f003 0304 	and.w	r3, r3, #4
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d062      	beq.n	80115b6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f4:	699b      	ldr	r3, [r3, #24]
 80114f6:	441a      	add	r2, r3
 80114f8:	2300      	movs	r3, #0
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	2300      	movs	r3, #0
 80114fe:	2100      	movs	r1, #0
 8011500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011502:	f7ff fdff 	bl	8011104 <xTimerGenericCommand>
 8011506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011508:	6a3b      	ldr	r3, [r7, #32]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d153      	bne.n	80115b6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 801150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011512:	b672      	cpsid	i
 8011514:	f383 8811 	msr	BASEPRI, r3
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	b662      	cpsie	i
 8011522:	61bb      	str	r3, [r7, #24]
}
 8011524:	bf00      	nop
 8011526:	e7fe      	b.n	8011526 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801152e:	f023 0301 	bic.w	r3, r3, #1
 8011532:	b2da      	uxtb	r2, r3
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801153a:	e03c      	b.n	80115b6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011542:	f043 0301 	orr.w	r3, r3, #1
 8011546:	b2da      	uxtb	r2, r3
 8011548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	699b      	ldr	r3, [r3, #24]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10c      	bne.n	8011576 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	b672      	cpsid	i
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	b662      	cpsie	i
 8011570:	617b      	str	r3, [r7, #20]
}
 8011572:	bf00      	nop
 8011574:	e7fe      	b.n	8011574 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011578:	699a      	ldr	r2, [r3, #24]
 801157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157c:	18d1      	adds	r1, r2, r3
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011584:	f7ff ff00 	bl	8011388 <prvInsertTimerInActiveList>
					break;
 8011588:	e015      	b.n	80115b6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011590:	f003 0302 	and.w	r3, r3, #2
 8011594:	2b00      	cmp	r3, #0
 8011596:	d103      	bne.n	80115a0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8011598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801159a:	f000 fbed 	bl	8011d78 <vPortFree>
 801159e:	e00a      	b.n	80115b6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115a6:	f023 0301 	bic.w	r3, r3, #1
 80115aa:	b2da      	uxtb	r2, r3
 80115ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80115b2:	e000      	b.n	80115b6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80115b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80115b6:	4b08      	ldr	r3, [pc, #32]	; (80115d8 <prvProcessReceivedCommands+0x1cc>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	1d39      	adds	r1, r7, #4
 80115bc:	2200      	movs	r2, #0
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fe faa4 	bl	800fb0c <xQueueReceive>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	f47f af24 	bne.w	8011414 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80115cc:	bf00      	nop
 80115ce:	bf00      	nop
 80115d0:	3730      	adds	r7, #48	; 0x30
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	2000d778 	.word	0x2000d778

080115dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b088      	sub	sp, #32
 80115e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115e2:	e04a      	b.n	801167a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115e4:	4b2e      	ldr	r3, [pc, #184]	; (80116a0 <prvSwitchTimerLists+0xc4>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115ee:	4b2c      	ldr	r3, [pc, #176]	; (80116a0 <prvSwitchTimerLists+0xc4>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	3304      	adds	r3, #4
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fd ffa5 	bl	800f54c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	68f8      	ldr	r0, [r7, #12]
 8011608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011610:	f003 0304 	and.w	r3, r3, #4
 8011614:	2b00      	cmp	r3, #0
 8011616:	d030      	beq.n	801167a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	699b      	ldr	r3, [r3, #24]
 801161c:	693a      	ldr	r2, [r7, #16]
 801161e:	4413      	add	r3, r2
 8011620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011622:	68ba      	ldr	r2, [r7, #8]
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	429a      	cmp	r2, r3
 8011628:	d90e      	bls.n	8011648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	68ba      	ldr	r2, [r7, #8]
 801162e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	68fa      	ldr	r2, [r7, #12]
 8011634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011636:	4b1a      	ldr	r3, [pc, #104]	; (80116a0 <prvSwitchTimerLists+0xc4>)
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	3304      	adds	r3, #4
 801163e:	4619      	mov	r1, r3
 8011640:	4610      	mov	r0, r2
 8011642:	f7fd ff4a 	bl	800f4da <vListInsert>
 8011646:	e018      	b.n	801167a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011648:	2300      	movs	r3, #0
 801164a:	9300      	str	r3, [sp, #0]
 801164c:	2300      	movs	r3, #0
 801164e:	693a      	ldr	r2, [r7, #16]
 8011650:	2100      	movs	r1, #0
 8011652:	68f8      	ldr	r0, [r7, #12]
 8011654:	f7ff fd56 	bl	8011104 <xTimerGenericCommand>
 8011658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d10c      	bne.n	801167a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8011660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011664:	b672      	cpsid	i
 8011666:	f383 8811 	msr	BASEPRI, r3
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	f3bf 8f4f 	dsb	sy
 8011672:	b662      	cpsie	i
 8011674:	603b      	str	r3, [r7, #0]
}
 8011676:	bf00      	nop
 8011678:	e7fe      	b.n	8011678 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801167a:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <prvSwitchTimerLists+0xc4>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1af      	bne.n	80115e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011684:	4b06      	ldr	r3, [pc, #24]	; (80116a0 <prvSwitchTimerLists+0xc4>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801168a:	4b06      	ldr	r3, [pc, #24]	; (80116a4 <prvSwitchTimerLists+0xc8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	4a04      	ldr	r2, [pc, #16]	; (80116a0 <prvSwitchTimerLists+0xc4>)
 8011690:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011692:	4a04      	ldr	r2, [pc, #16]	; (80116a4 <prvSwitchTimerLists+0xc8>)
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	6013      	str	r3, [r2, #0]
}
 8011698:	bf00      	nop
 801169a:	3718      	adds	r7, #24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	2000d770 	.word	0x2000d770
 80116a4:	2000d774 	.word	0x2000d774

080116a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80116ae:	f000 f96d 	bl	801198c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80116b2:	4b15      	ldr	r3, [pc, #84]	; (8011708 <prvCheckForValidListAndQueue+0x60>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d120      	bne.n	80116fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80116ba:	4814      	ldr	r0, [pc, #80]	; (801170c <prvCheckForValidListAndQueue+0x64>)
 80116bc:	f7fd febc 	bl	800f438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80116c0:	4813      	ldr	r0, [pc, #76]	; (8011710 <prvCheckForValidListAndQueue+0x68>)
 80116c2:	f7fd feb9 	bl	800f438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80116c6:	4b13      	ldr	r3, [pc, #76]	; (8011714 <prvCheckForValidListAndQueue+0x6c>)
 80116c8:	4a10      	ldr	r2, [pc, #64]	; (801170c <prvCheckForValidListAndQueue+0x64>)
 80116ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80116cc:	4b12      	ldr	r3, [pc, #72]	; (8011718 <prvCheckForValidListAndQueue+0x70>)
 80116ce:	4a10      	ldr	r2, [pc, #64]	; (8011710 <prvCheckForValidListAndQueue+0x68>)
 80116d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80116d2:	2300      	movs	r3, #0
 80116d4:	9300      	str	r3, [sp, #0]
 80116d6:	4b11      	ldr	r3, [pc, #68]	; (801171c <prvCheckForValidListAndQueue+0x74>)
 80116d8:	4a11      	ldr	r2, [pc, #68]	; (8011720 <prvCheckForValidListAndQueue+0x78>)
 80116da:	2110      	movs	r1, #16
 80116dc:	200a      	movs	r0, #10
 80116de:	f7fd ffc9 	bl	800f674 <xQueueGenericCreateStatic>
 80116e2:	4603      	mov	r3, r0
 80116e4:	4a08      	ldr	r2, [pc, #32]	; (8011708 <prvCheckForValidListAndQueue+0x60>)
 80116e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80116e8:	4b07      	ldr	r3, [pc, #28]	; (8011708 <prvCheckForValidListAndQueue+0x60>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d005      	beq.n	80116fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80116f0:	4b05      	ldr	r3, [pc, #20]	; (8011708 <prvCheckForValidListAndQueue+0x60>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	490b      	ldr	r1, [pc, #44]	; (8011724 <prvCheckForValidListAndQueue+0x7c>)
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fe fbfe 	bl	800fef8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116fc:	f000 f97a 	bl	80119f4 <vPortExitCritical>
}
 8011700:	bf00      	nop
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	2000d778 	.word	0x2000d778
 801170c:	2000d748 	.word	0x2000d748
 8011710:	2000d75c 	.word	0x2000d75c
 8011714:	2000d770 	.word	0x2000d770
 8011718:	2000d774 	.word	0x2000d774
 801171c:	2000d824 	.word	0x2000d824
 8011720:	2000d784 	.word	0x2000d784
 8011724:	08022204 	.word	0x08022204

08011728 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d10c      	bne.n	8011754 <pvTimerGetTimerID+0x2c>
	__asm volatile
 801173a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173e:	b672      	cpsid	i
 8011740:	f383 8811 	msr	BASEPRI, r3
 8011744:	f3bf 8f6f 	isb	sy
 8011748:	f3bf 8f4f 	dsb	sy
 801174c:	b662      	cpsie	i
 801174e:	60fb      	str	r3, [r7, #12]
}
 8011750:	bf00      	nop
 8011752:	e7fe      	b.n	8011752 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8011754:	f000 f91a 	bl	801198c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	69db      	ldr	r3, [r3, #28]
 801175c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801175e:	f000 f949 	bl	80119f4 <vPortExitCritical>

	return pvReturn;
 8011762:	693b      	ldr	r3, [r7, #16]
}
 8011764:	4618      	mov	r0, r3
 8011766:	3718      	adds	r7, #24
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	3b04      	subs	r3, #4
 801177c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	3b04      	subs	r3, #4
 801178a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	f023 0201 	bic.w	r2, r3, #1
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	3b04      	subs	r3, #4
 801179a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801179c:	4a0c      	ldr	r2, [pc, #48]	; (80117d0 <pxPortInitialiseStack+0x64>)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3b14      	subs	r3, #20
 80117a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	3b04      	subs	r3, #4
 80117b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	f06f 0202 	mvn.w	r2, #2
 80117ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3b20      	subs	r3, #32
 80117c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80117c2:	68fb      	ldr	r3, [r7, #12]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3714      	adds	r7, #20
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr
 80117d0:	080117d5 	.word	0x080117d5

080117d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80117d4:	b480      	push	{r7}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80117de:	4b14      	ldr	r3, [pc, #80]	; (8011830 <prvTaskExitError+0x5c>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117e6:	d00c      	beq.n	8011802 <prvTaskExitError+0x2e>
	__asm volatile
 80117e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ec:	b672      	cpsid	i
 80117ee:	f383 8811 	msr	BASEPRI, r3
 80117f2:	f3bf 8f6f 	isb	sy
 80117f6:	f3bf 8f4f 	dsb	sy
 80117fa:	b662      	cpsie	i
 80117fc:	60fb      	str	r3, [r7, #12]
}
 80117fe:	bf00      	nop
 8011800:	e7fe      	b.n	8011800 <prvTaskExitError+0x2c>
	__asm volatile
 8011802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011806:	b672      	cpsid	i
 8011808:	f383 8811 	msr	BASEPRI, r3
 801180c:	f3bf 8f6f 	isb	sy
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	b662      	cpsie	i
 8011816:	60bb      	str	r3, [r7, #8]
}
 8011818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801181a:	bf00      	nop
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d0fc      	beq.n	801181c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011822:	bf00      	nop
 8011824:	bf00      	nop
 8011826:	3714      	adds	r7, #20
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr
 8011830:	2000009c 	.word	0x2000009c
	...

08011840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011840:	4b07      	ldr	r3, [pc, #28]	; (8011860 <pxCurrentTCBConst2>)
 8011842:	6819      	ldr	r1, [r3, #0]
 8011844:	6808      	ldr	r0, [r1, #0]
 8011846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801184a:	f380 8809 	msr	PSP, r0
 801184e:	f3bf 8f6f 	isb	sy
 8011852:	f04f 0000 	mov.w	r0, #0
 8011856:	f380 8811 	msr	BASEPRI, r0
 801185a:	4770      	bx	lr
 801185c:	f3af 8000 	nop.w

08011860 <pxCurrentTCBConst2>:
 8011860:	2000d248 	.word	0x2000d248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011864:	bf00      	nop
 8011866:	bf00      	nop

08011868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011868:	4808      	ldr	r0, [pc, #32]	; (801188c <prvPortStartFirstTask+0x24>)
 801186a:	6800      	ldr	r0, [r0, #0]
 801186c:	6800      	ldr	r0, [r0, #0]
 801186e:	f380 8808 	msr	MSP, r0
 8011872:	f04f 0000 	mov.w	r0, #0
 8011876:	f380 8814 	msr	CONTROL, r0
 801187a:	b662      	cpsie	i
 801187c:	b661      	cpsie	f
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	f3bf 8f6f 	isb	sy
 8011886:	df00      	svc	0
 8011888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801188a:	bf00      	nop
 801188c:	e000ed08 	.word	0xe000ed08

08011890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011896:	4b37      	ldr	r3, [pc, #220]	; (8011974 <xPortStartScheduler+0xe4>)
 8011898:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	22ff      	movs	r2, #255	; 0xff
 80118a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	4b2f      	ldr	r3, [pc, #188]	; (8011978 <xPortStartScheduler+0xe8>)
 80118bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80118be:	4b2f      	ldr	r3, [pc, #188]	; (801197c <xPortStartScheduler+0xec>)
 80118c0:	2207      	movs	r2, #7
 80118c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118c4:	e009      	b.n	80118da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80118c6:	4b2d      	ldr	r3, [pc, #180]	; (801197c <xPortStartScheduler+0xec>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	3b01      	subs	r3, #1
 80118cc:	4a2b      	ldr	r2, [pc, #172]	; (801197c <xPortStartScheduler+0xec>)
 80118ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80118d0:	78fb      	ldrb	r3, [r7, #3]
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	005b      	lsls	r3, r3, #1
 80118d6:	b2db      	uxtb	r3, r3
 80118d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118da:	78fb      	ldrb	r3, [r7, #3]
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118e2:	2b80      	cmp	r3, #128	; 0x80
 80118e4:	d0ef      	beq.n	80118c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80118e6:	4b25      	ldr	r3, [pc, #148]	; (801197c <xPortStartScheduler+0xec>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f1c3 0307 	rsb	r3, r3, #7
 80118ee:	2b04      	cmp	r3, #4
 80118f0:	d00c      	beq.n	801190c <xPortStartScheduler+0x7c>
	__asm volatile
 80118f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f6:	b672      	cpsid	i
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	b662      	cpsie	i
 8011906:	60bb      	str	r3, [r7, #8]
}
 8011908:	bf00      	nop
 801190a:	e7fe      	b.n	801190a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801190c:	4b1b      	ldr	r3, [pc, #108]	; (801197c <xPortStartScheduler+0xec>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	021b      	lsls	r3, r3, #8
 8011912:	4a1a      	ldr	r2, [pc, #104]	; (801197c <xPortStartScheduler+0xec>)
 8011914:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011916:	4b19      	ldr	r3, [pc, #100]	; (801197c <xPortStartScheduler+0xec>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801191e:	4a17      	ldr	r2, [pc, #92]	; (801197c <xPortStartScheduler+0xec>)
 8011920:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	b2da      	uxtb	r2, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801192a:	4b15      	ldr	r3, [pc, #84]	; (8011980 <xPortStartScheduler+0xf0>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	4a14      	ldr	r2, [pc, #80]	; (8011980 <xPortStartScheduler+0xf0>)
 8011930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011934:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011936:	4b12      	ldr	r3, [pc, #72]	; (8011980 <xPortStartScheduler+0xf0>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4a11      	ldr	r2, [pc, #68]	; (8011980 <xPortStartScheduler+0xf0>)
 801193c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011940:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011942:	f000 f8dd 	bl	8011b00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011946:	4b0f      	ldr	r3, [pc, #60]	; (8011984 <xPortStartScheduler+0xf4>)
 8011948:	2200      	movs	r2, #0
 801194a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801194c:	f000 f8fc 	bl	8011b48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011950:	4b0d      	ldr	r3, [pc, #52]	; (8011988 <xPortStartScheduler+0xf8>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	4a0c      	ldr	r2, [pc, #48]	; (8011988 <xPortStartScheduler+0xf8>)
 8011956:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801195a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801195c:	f7ff ff84 	bl	8011868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011960:	f7fe ff60 	bl	8010824 <vTaskSwitchContext>
	prvTaskExitError();
 8011964:	f7ff ff36 	bl	80117d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011968:	2300      	movs	r3, #0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3710      	adds	r7, #16
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	e000e400 	.word	0xe000e400
 8011978:	2000d874 	.word	0x2000d874
 801197c:	2000d878 	.word	0x2000d878
 8011980:	e000ed20 	.word	0xe000ed20
 8011984:	2000009c 	.word	0x2000009c
 8011988:	e000ef34 	.word	0xe000ef34

0801198c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
	__asm volatile
 8011992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011996:	b672      	cpsid	i
 8011998:	f383 8811 	msr	BASEPRI, r3
 801199c:	f3bf 8f6f 	isb	sy
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	b662      	cpsie	i
 80119a6:	607b      	str	r3, [r7, #4]
}
 80119a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80119aa:	4b10      	ldr	r3, [pc, #64]	; (80119ec <vPortEnterCritical+0x60>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	3301      	adds	r3, #1
 80119b0:	4a0e      	ldr	r2, [pc, #56]	; (80119ec <vPortEnterCritical+0x60>)
 80119b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80119b4:	4b0d      	ldr	r3, [pc, #52]	; (80119ec <vPortEnterCritical+0x60>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d111      	bne.n	80119e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80119bc:	4b0c      	ldr	r3, [pc, #48]	; (80119f0 <vPortEnterCritical+0x64>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d00c      	beq.n	80119e0 <vPortEnterCritical+0x54>
	__asm volatile
 80119c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ca:	b672      	cpsid	i
 80119cc:	f383 8811 	msr	BASEPRI, r3
 80119d0:	f3bf 8f6f 	isb	sy
 80119d4:	f3bf 8f4f 	dsb	sy
 80119d8:	b662      	cpsie	i
 80119da:	603b      	str	r3, [r7, #0]
}
 80119dc:	bf00      	nop
 80119de:	e7fe      	b.n	80119de <vPortEnterCritical+0x52>
	}
}
 80119e0:	bf00      	nop
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr
 80119ec:	2000009c 	.word	0x2000009c
 80119f0:	e000ed04 	.word	0xe000ed04

080119f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80119fa:	4b13      	ldr	r3, [pc, #76]	; (8011a48 <vPortExitCritical+0x54>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d10c      	bne.n	8011a1c <vPortExitCritical+0x28>
	__asm volatile
 8011a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a06:	b672      	cpsid	i
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	b662      	cpsie	i
 8011a16:	607b      	str	r3, [r7, #4]
}
 8011a18:	bf00      	nop
 8011a1a:	e7fe      	b.n	8011a1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011a1c:	4b0a      	ldr	r3, [pc, #40]	; (8011a48 <vPortExitCritical+0x54>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	4a09      	ldr	r2, [pc, #36]	; (8011a48 <vPortExitCritical+0x54>)
 8011a24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a26:	4b08      	ldr	r3, [pc, #32]	; (8011a48 <vPortExitCritical+0x54>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d105      	bne.n	8011a3a <vPortExitCritical+0x46>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	f383 8811 	msr	BASEPRI, r3
}
 8011a38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011a3a:	bf00      	nop
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	2000009c 	.word	0x2000009c
 8011a4c:	00000000 	.word	0x00000000

08011a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011a50:	f3ef 8009 	mrs	r0, PSP
 8011a54:	f3bf 8f6f 	isb	sy
 8011a58:	4b15      	ldr	r3, [pc, #84]	; (8011ab0 <pxCurrentTCBConst>)
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	f01e 0f10 	tst.w	lr, #16
 8011a60:	bf08      	it	eq
 8011a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6a:	6010      	str	r0, [r2, #0]
 8011a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011a74:	b672      	cpsid	i
 8011a76:	f380 8811 	msr	BASEPRI, r0
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	b662      	cpsie	i
 8011a84:	f7fe fece 	bl	8010824 <vTaskSwitchContext>
 8011a88:	f04f 0000 	mov.w	r0, #0
 8011a8c:	f380 8811 	msr	BASEPRI, r0
 8011a90:	bc09      	pop	{r0, r3}
 8011a92:	6819      	ldr	r1, [r3, #0]
 8011a94:	6808      	ldr	r0, [r1, #0]
 8011a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9a:	f01e 0f10 	tst.w	lr, #16
 8011a9e:	bf08      	it	eq
 8011aa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011aa4:	f380 8809 	msr	PSP, r0
 8011aa8:	f3bf 8f6f 	isb	sy
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop

08011ab0 <pxCurrentTCBConst>:
 8011ab0:	2000d248 	.word	0x2000d248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ab4:	bf00      	nop
 8011ab6:	bf00      	nop

08011ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
	__asm volatile
 8011abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac2:	b672      	cpsid	i
 8011ac4:	f383 8811 	msr	BASEPRI, r3
 8011ac8:	f3bf 8f6f 	isb	sy
 8011acc:	f3bf 8f4f 	dsb	sy
 8011ad0:	b662      	cpsie	i
 8011ad2:	607b      	str	r3, [r7, #4]
}
 8011ad4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011ad6:	f7fe fde9 	bl	80106ac <xTaskIncrementTick>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d003      	beq.n	8011ae8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011ae0:	4b06      	ldr	r3, [pc, #24]	; (8011afc <SysTick_Handler+0x44>)
 8011ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	2300      	movs	r3, #0
 8011aea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	f383 8811 	msr	BASEPRI, r3
}
 8011af2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011af4:	bf00      	nop
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	e000ed04 	.word	0xe000ed04

08011b00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b00:	b480      	push	{r7}
 8011b02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b04:	4b0b      	ldr	r3, [pc, #44]	; (8011b34 <vPortSetupTimerInterrupt+0x34>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b0a:	4b0b      	ldr	r3, [pc, #44]	; (8011b38 <vPortSetupTimerInterrupt+0x38>)
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b10:	4b0a      	ldr	r3, [pc, #40]	; (8011b3c <vPortSetupTimerInterrupt+0x3c>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	4a0a      	ldr	r2, [pc, #40]	; (8011b40 <vPortSetupTimerInterrupt+0x40>)
 8011b16:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1a:	099b      	lsrs	r3, r3, #6
 8011b1c:	4a09      	ldr	r2, [pc, #36]	; (8011b44 <vPortSetupTimerInterrupt+0x44>)
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b22:	4b04      	ldr	r3, [pc, #16]	; (8011b34 <vPortSetupTimerInterrupt+0x34>)
 8011b24:	2207      	movs	r2, #7
 8011b26:	601a      	str	r2, [r3, #0]
}
 8011b28:	bf00      	nop
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	e000e010 	.word	0xe000e010
 8011b38:	e000e018 	.word	0xe000e018
 8011b3c:	20000004 	.word	0x20000004
 8011b40:	10624dd3 	.word	0x10624dd3
 8011b44:	e000e014 	.word	0xe000e014

08011b48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011b58 <vPortEnableVFP+0x10>
 8011b4c:	6801      	ldr	r1, [r0, #0]
 8011b4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011b52:	6001      	str	r1, [r0, #0]
 8011b54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011b56:	bf00      	nop
 8011b58:	e000ed88 	.word	0xe000ed88

08011b5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b085      	sub	sp, #20
 8011b60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011b62:	f3ef 8305 	mrs	r3, IPSR
 8011b66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2b0f      	cmp	r3, #15
 8011b6c:	d916      	bls.n	8011b9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011b6e:	4a19      	ldr	r2, [pc, #100]	; (8011bd4 <vPortValidateInterruptPriority+0x78>)
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	4413      	add	r3, r2
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b78:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <vPortValidateInterruptPriority+0x7c>)
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	7afa      	ldrb	r2, [r7, #11]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d20c      	bcs.n	8011b9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b86:	b672      	cpsid	i
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
 8011b94:	b662      	cpsie	i
 8011b96:	607b      	str	r3, [r7, #4]
}
 8011b98:	bf00      	nop
 8011b9a:	e7fe      	b.n	8011b9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011b9c:	4b0f      	ldr	r3, [pc, #60]	; (8011bdc <vPortValidateInterruptPriority+0x80>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011ba4:	4b0e      	ldr	r3, [pc, #56]	; (8011be0 <vPortValidateInterruptPriority+0x84>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d90c      	bls.n	8011bc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8011bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb0:	b672      	cpsid	i
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	b662      	cpsie	i
 8011bc0:	603b      	str	r3, [r7, #0]
}
 8011bc2:	bf00      	nop
 8011bc4:	e7fe      	b.n	8011bc4 <vPortValidateInterruptPriority+0x68>
	}
 8011bc6:	bf00      	nop
 8011bc8:	3714      	adds	r7, #20
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop
 8011bd4:	e000e3f0 	.word	0xe000e3f0
 8011bd8:	2000d874 	.word	0x2000d874
 8011bdc:	e000ed0c 	.word	0xe000ed0c
 8011be0:	2000d878 	.word	0x2000d878

08011be4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b08a      	sub	sp, #40	; 0x28
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011bec:	2300      	movs	r3, #0
 8011bee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011bf0:	f7fe fc9e 	bl	8010530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011bf4:	4b5b      	ldr	r3, [pc, #364]	; (8011d64 <pvPortMalloc+0x180>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d101      	bne.n	8011c00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011bfc:	f000 f91a 	bl	8011e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c00:	4b59      	ldr	r3, [pc, #356]	; (8011d68 <pvPortMalloc+0x184>)
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4013      	ands	r3, r2
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f040 8092 	bne.w	8011d32 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d01f      	beq.n	8011c54 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011c14:	2208      	movs	r2, #8
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	4413      	add	r3, r2
 8011c1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f003 0307 	and.w	r3, r3, #7
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d016      	beq.n	8011c54 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f023 0307 	bic.w	r3, r3, #7
 8011c2c:	3308      	adds	r3, #8
 8011c2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f003 0307 	and.w	r3, r3, #7
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00c      	beq.n	8011c54 <pvPortMalloc+0x70>
	__asm volatile
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	b672      	cpsid	i
 8011c40:	f383 8811 	msr	BASEPRI, r3
 8011c44:	f3bf 8f6f 	isb	sy
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	b662      	cpsie	i
 8011c4e:	617b      	str	r3, [r7, #20]
}
 8011c50:	bf00      	nop
 8011c52:	e7fe      	b.n	8011c52 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d06b      	beq.n	8011d32 <pvPortMalloc+0x14e>
 8011c5a:	4b44      	ldr	r3, [pc, #272]	; (8011d6c <pvPortMalloc+0x188>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d866      	bhi.n	8011d32 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011c64:	4b42      	ldr	r3, [pc, #264]	; (8011d70 <pvPortMalloc+0x18c>)
 8011c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011c68:	4b41      	ldr	r3, [pc, #260]	; (8011d70 <pvPortMalloc+0x18c>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c6e:	e004      	b.n	8011c7a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d903      	bls.n	8011c8c <pvPortMalloc+0xa8>
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1f1      	bne.n	8011c70 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011c8c:	4b35      	ldr	r3, [pc, #212]	; (8011d64 <pvPortMalloc+0x180>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d04d      	beq.n	8011d32 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2208      	movs	r2, #8
 8011c9c:	4413      	add	r3, r2
 8011c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	6a3b      	ldr	r3, [r7, #32]
 8011ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011caa:	685a      	ldr	r2, [r3, #4]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	1ad2      	subs	r2, r2, r3
 8011cb0:	2308      	movs	r3, #8
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d921      	bls.n	8011cfc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	f003 0307 	and.w	r3, r3, #7
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d00c      	beq.n	8011ce4 <pvPortMalloc+0x100>
	__asm volatile
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	b672      	cpsid	i
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	b662      	cpsie	i
 8011cde:	613b      	str	r3, [r7, #16]
}
 8011ce0:	bf00      	nop
 8011ce2:	e7fe      	b.n	8011ce2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce6:	685a      	ldr	r2, [r3, #4]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	1ad2      	subs	r2, r2, r3
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011cf6:	69b8      	ldr	r0, [r7, #24]
 8011cf8:	f000 f8fe 	bl	8011ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011cfc:	4b1b      	ldr	r3, [pc, #108]	; (8011d6c <pvPortMalloc+0x188>)
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	4a19      	ldr	r2, [pc, #100]	; (8011d6c <pvPortMalloc+0x188>)
 8011d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d0a:	4b18      	ldr	r3, [pc, #96]	; (8011d6c <pvPortMalloc+0x188>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	4b19      	ldr	r3, [pc, #100]	; (8011d74 <pvPortMalloc+0x190>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d203      	bcs.n	8011d1e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d16:	4b15      	ldr	r3, [pc, #84]	; (8011d6c <pvPortMalloc+0x188>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4a16      	ldr	r2, [pc, #88]	; (8011d74 <pvPortMalloc+0x190>)
 8011d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d20:	685a      	ldr	r2, [r3, #4]
 8011d22:	4b11      	ldr	r3, [pc, #68]	; (8011d68 <pvPortMalloc+0x184>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	431a      	orrs	r2, r3
 8011d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	2200      	movs	r2, #0
 8011d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d32:	f7fe fc0b 	bl	801054c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	f003 0307 	and.w	r3, r3, #7
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d00c      	beq.n	8011d5a <pvPortMalloc+0x176>
	__asm volatile
 8011d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d44:	b672      	cpsid	i
 8011d46:	f383 8811 	msr	BASEPRI, r3
 8011d4a:	f3bf 8f6f 	isb	sy
 8011d4e:	f3bf 8f4f 	dsb	sy
 8011d52:	b662      	cpsie	i
 8011d54:	60fb      	str	r3, [r7, #12]
}
 8011d56:	bf00      	nop
 8011d58:	e7fe      	b.n	8011d58 <pvPortMalloc+0x174>
	return pvReturn;
 8011d5a:	69fb      	ldr	r3, [r7, #28]
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3728      	adds	r7, #40	; 0x28
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20011484 	.word	0x20011484
 8011d68:	20011490 	.word	0x20011490
 8011d6c:	20011488 	.word	0x20011488
 8011d70:	2001147c 	.word	0x2001147c
 8011d74:	2001148c 	.word	0x2001148c

08011d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d04c      	beq.n	8011e24 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011d8a:	2308      	movs	r3, #8
 8011d8c:	425b      	negs	r3, r3
 8011d8e:	697a      	ldr	r2, [r7, #20]
 8011d90:	4413      	add	r3, r2
 8011d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	4b23      	ldr	r3, [pc, #140]	; (8011e2c <vPortFree+0xb4>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4013      	ands	r3, r2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d10c      	bne.n	8011dc0 <vPortFree+0x48>
	__asm volatile
 8011da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011daa:	b672      	cpsid	i
 8011dac:	f383 8811 	msr	BASEPRI, r3
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	b662      	cpsie	i
 8011dba:	60fb      	str	r3, [r7, #12]
}
 8011dbc:	bf00      	nop
 8011dbe:	e7fe      	b.n	8011dbe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00c      	beq.n	8011de2 <vPortFree+0x6a>
	__asm volatile
 8011dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dcc:	b672      	cpsid	i
 8011dce:	f383 8811 	msr	BASEPRI, r3
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	f3bf 8f4f 	dsb	sy
 8011dda:	b662      	cpsie	i
 8011ddc:	60bb      	str	r3, [r7, #8]
}
 8011dde:	bf00      	nop
 8011de0:	e7fe      	b.n	8011de0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	685a      	ldr	r2, [r3, #4]
 8011de6:	4b11      	ldr	r3, [pc, #68]	; (8011e2c <vPortFree+0xb4>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	4013      	ands	r3, r2
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d019      	beq.n	8011e24 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d115      	bne.n	8011e24 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	685a      	ldr	r2, [r3, #4]
 8011dfc:	4b0b      	ldr	r3, [pc, #44]	; (8011e2c <vPortFree+0xb4>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	43db      	mvns	r3, r3
 8011e02:	401a      	ands	r2, r3
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e08:	f7fe fb92 	bl	8010530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	685a      	ldr	r2, [r3, #4]
 8011e10:	4b07      	ldr	r3, [pc, #28]	; (8011e30 <vPortFree+0xb8>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	4413      	add	r3, r2
 8011e16:	4a06      	ldr	r2, [pc, #24]	; (8011e30 <vPortFree+0xb8>)
 8011e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e1a:	6938      	ldr	r0, [r7, #16]
 8011e1c:	f000 f86c 	bl	8011ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011e20:	f7fe fb94 	bl	801054c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e24:	bf00      	nop
 8011e26:	3718      	adds	r7, #24
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	20011490 	.word	0x20011490
 8011e30:	20011488 	.word	0x20011488

08011e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e34:	b480      	push	{r7}
 8011e36:	b085      	sub	sp, #20
 8011e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e40:	4b27      	ldr	r3, [pc, #156]	; (8011ee0 <prvHeapInit+0xac>)
 8011e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f003 0307 	and.w	r3, r3, #7
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d00c      	beq.n	8011e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	3307      	adds	r3, #7
 8011e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f023 0307 	bic.w	r3, r3, #7
 8011e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011e5c:	68ba      	ldr	r2, [r7, #8]
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	1ad3      	subs	r3, r2, r3
 8011e62:	4a1f      	ldr	r2, [pc, #124]	; (8011ee0 <prvHeapInit+0xac>)
 8011e64:	4413      	add	r3, r2
 8011e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011e6c:	4a1d      	ldr	r2, [pc, #116]	; (8011ee4 <prvHeapInit+0xb0>)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011e72:	4b1c      	ldr	r3, [pc, #112]	; (8011ee4 <prvHeapInit+0xb0>)
 8011e74:	2200      	movs	r2, #0
 8011e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	68ba      	ldr	r2, [r7, #8]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011e80:	2208      	movs	r2, #8
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	1a9b      	subs	r3, r3, r2
 8011e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f023 0307 	bic.w	r3, r3, #7
 8011e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	4a15      	ldr	r2, [pc, #84]	; (8011ee8 <prvHeapInit+0xb4>)
 8011e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011e96:	4b14      	ldr	r3, [pc, #80]	; (8011ee8 <prvHeapInit+0xb4>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011e9e:	4b12      	ldr	r3, [pc, #72]	; (8011ee8 <prvHeapInit+0xb4>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	1ad2      	subs	r2, r2, r3
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011eb4:	4b0c      	ldr	r3, [pc, #48]	; (8011ee8 <prvHeapInit+0xb4>)
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	4a0a      	ldr	r2, [pc, #40]	; (8011eec <prvHeapInit+0xb8>)
 8011ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	4a09      	ldr	r2, [pc, #36]	; (8011ef0 <prvHeapInit+0xbc>)
 8011eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ecc:	4b09      	ldr	r3, [pc, #36]	; (8011ef4 <prvHeapInit+0xc0>)
 8011ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011ed2:	601a      	str	r2, [r3, #0]
}
 8011ed4:	bf00      	nop
 8011ed6:	3714      	adds	r7, #20
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	2000d87c 	.word	0x2000d87c
 8011ee4:	2001147c 	.word	0x2001147c
 8011ee8:	20011484 	.word	0x20011484
 8011eec:	2001148c 	.word	0x2001148c
 8011ef0:	20011488 	.word	0x20011488
 8011ef4:	20011490 	.word	0x20011490

08011ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f00:	4b28      	ldr	r3, [pc, #160]	; (8011fa4 <prvInsertBlockIntoFreeList+0xac>)
 8011f02:	60fb      	str	r3, [r7, #12]
 8011f04:	e002      	b.n	8011f0c <prvInsertBlockIntoFreeList+0x14>
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	60fb      	str	r3, [r7, #12]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d8f7      	bhi.n	8011f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	4413      	add	r3, r2
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d108      	bne.n	8011f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	685a      	ldr	r2, [r3, #4]
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	441a      	add	r2, r3
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	441a      	add	r2, r3
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d118      	bne.n	8011f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	4b15      	ldr	r3, [pc, #84]	; (8011fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d00d      	beq.n	8011f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685a      	ldr	r2, [r3, #4]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	441a      	add	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	e008      	b.n	8011f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011f76:	4b0c      	ldr	r3, [pc, #48]	; (8011fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	601a      	str	r2, [r3, #0]
 8011f7e:	e003      	b.n	8011f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681a      	ldr	r2, [r3, #0]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d002      	beq.n	8011f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f96:	bf00      	nop
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	2001147c 	.word	0x2001147c
 8011fa8:	20011484 	.word	0x20011484

08011fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	4912      	ldr	r1, [pc, #72]	; (8011ffc <MX_USB_DEVICE_Init+0x50>)
 8011fb4:	4812      	ldr	r0, [pc, #72]	; (8012000 <MX_USB_DEVICE_Init+0x54>)
 8011fb6:	f7fb fd0f 	bl	800d9d8 <USBD_Init>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d001      	beq.n	8011fc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011fc0:	f7f2 fad6 	bl	8004570 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011fc4:	490f      	ldr	r1, [pc, #60]	; (8012004 <MX_USB_DEVICE_Init+0x58>)
 8011fc6:	480e      	ldr	r0, [pc, #56]	; (8012000 <MX_USB_DEVICE_Init+0x54>)
 8011fc8:	f7fb fd36 	bl	800da38 <USBD_RegisterClass>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d001      	beq.n	8011fd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011fd2:	f7f2 facd 	bl	8004570 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011fd6:	490c      	ldr	r1, [pc, #48]	; (8012008 <MX_USB_DEVICE_Init+0x5c>)
 8011fd8:	4809      	ldr	r0, [pc, #36]	; (8012000 <MX_USB_DEVICE_Init+0x54>)
 8011fda:	f7fb fc6d 	bl	800d8b8 <USBD_CDC_RegisterInterface>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d001      	beq.n	8011fe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011fe4:	f7f2 fac4 	bl	8004570 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011fe8:	4805      	ldr	r0, [pc, #20]	; (8012000 <MX_USB_DEVICE_Init+0x54>)
 8011fea:	f7fb fd5b 	bl	800daa4 <USBD_Start>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d001      	beq.n	8011ff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011ff4:	f7f2 fabc 	bl	8004570 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011ff8:	bf00      	nop
 8011ffa:	bd80      	pop	{r7, pc}
 8011ffc:	200000b4 	.word	0x200000b4
 8012000:	20011494 	.word	0x20011494
 8012004:	2000001c 	.word	0x2000001c
 8012008:	200000a0 	.word	0x200000a0

0801200c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012010:	2200      	movs	r2, #0
 8012012:	4905      	ldr	r1, [pc, #20]	; (8012028 <CDC_Init_FS+0x1c>)
 8012014:	4805      	ldr	r0, [pc, #20]	; (801202c <CDC_Init_FS+0x20>)
 8012016:	f7fb fc69 	bl	800d8ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801201a:	4905      	ldr	r1, [pc, #20]	; (8012030 <CDC_Init_FS+0x24>)
 801201c:	4803      	ldr	r0, [pc, #12]	; (801202c <CDC_Init_FS+0x20>)
 801201e:	f7fb fc87 	bl	800d930 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012024:	4618      	mov	r0, r3
 8012026:	bd80      	pop	{r7, pc}
 8012028:	20011f70 	.word	0x20011f70
 801202c:	20011494 	.word	0x20011494
 8012030:	20011770 	.word	0x20011770

08012034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012034:	b480      	push	{r7}
 8012036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801203a:	4618      	mov	r0, r3
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr

08012044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	4603      	mov	r3, r0
 801204c:	6039      	str	r1, [r7, #0]
 801204e:	71fb      	strb	r3, [r7, #7]
 8012050:	4613      	mov	r3, r2
 8012052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012054:	79fb      	ldrb	r3, [r7, #7]
 8012056:	2b23      	cmp	r3, #35	; 0x23
 8012058:	d84a      	bhi.n	80120f0 <CDC_Control_FS+0xac>
 801205a:	a201      	add	r2, pc, #4	; (adr r2, 8012060 <CDC_Control_FS+0x1c>)
 801205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012060:	080120f1 	.word	0x080120f1
 8012064:	080120f1 	.word	0x080120f1
 8012068:	080120f1 	.word	0x080120f1
 801206c:	080120f1 	.word	0x080120f1
 8012070:	080120f1 	.word	0x080120f1
 8012074:	080120f1 	.word	0x080120f1
 8012078:	080120f1 	.word	0x080120f1
 801207c:	080120f1 	.word	0x080120f1
 8012080:	080120f1 	.word	0x080120f1
 8012084:	080120f1 	.word	0x080120f1
 8012088:	080120f1 	.word	0x080120f1
 801208c:	080120f1 	.word	0x080120f1
 8012090:	080120f1 	.word	0x080120f1
 8012094:	080120f1 	.word	0x080120f1
 8012098:	080120f1 	.word	0x080120f1
 801209c:	080120f1 	.word	0x080120f1
 80120a0:	080120f1 	.word	0x080120f1
 80120a4:	080120f1 	.word	0x080120f1
 80120a8:	080120f1 	.word	0x080120f1
 80120ac:	080120f1 	.word	0x080120f1
 80120b0:	080120f1 	.word	0x080120f1
 80120b4:	080120f1 	.word	0x080120f1
 80120b8:	080120f1 	.word	0x080120f1
 80120bc:	080120f1 	.word	0x080120f1
 80120c0:	080120f1 	.word	0x080120f1
 80120c4:	080120f1 	.word	0x080120f1
 80120c8:	080120f1 	.word	0x080120f1
 80120cc:	080120f1 	.word	0x080120f1
 80120d0:	080120f1 	.word	0x080120f1
 80120d4:	080120f1 	.word	0x080120f1
 80120d8:	080120f1 	.word	0x080120f1
 80120dc:	080120f1 	.word	0x080120f1
 80120e0:	080120f1 	.word	0x080120f1
 80120e4:	080120f1 	.word	0x080120f1
 80120e8:	080120f1 	.word	0x080120f1
 80120ec:	080120f1 	.word	0x080120f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80120f0:	bf00      	nop
  }

  return (USBD_OK);
 80120f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	370c      	adds	r7, #12
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr

08012100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801210a:	6879      	ldr	r1, [r7, #4]
 801210c:	4805      	ldr	r0, [pc, #20]	; (8012124 <CDC_Receive_FS+0x24>)
 801210e:	f7fb fc0f 	bl	800d930 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012112:	4804      	ldr	r0, [pc, #16]	; (8012124 <CDC_Receive_FS+0x24>)
 8012114:	f7fb fc2a 	bl	800d96c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012118:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	20011494 	.word	0x20011494

08012128 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012128:	b480      	push	{r7}
 801212a:	b087      	sub	sp, #28
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	4613      	mov	r3, r2
 8012134:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012136:	2300      	movs	r3, #0
 8012138:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801213a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801213e:	4618      	mov	r0, r3
 8012140:	371c      	adds	r7, #28
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
	...

0801214c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	6039      	str	r1, [r7, #0]
 8012156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2212      	movs	r2, #18
 801215c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801215e:	4b03      	ldr	r3, [pc, #12]	; (801216c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012160:	4618      	mov	r0, r3
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr
 801216c:	200000d4 	.word	0x200000d4

08012170 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	6039      	str	r1, [r7, #0]
 801217a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	2204      	movs	r2, #4
 8012180:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012182:	4b03      	ldr	r3, [pc, #12]	; (8012190 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012184:	4618      	mov	r0, r3
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr
 8012190:	200000f4 	.word	0x200000f4

08012194 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	4603      	mov	r3, r0
 801219c:	6039      	str	r1, [r7, #0]
 801219e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80121a0:	79fb      	ldrb	r3, [r7, #7]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d105      	bne.n	80121b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80121a6:	683a      	ldr	r2, [r7, #0]
 80121a8:	4907      	ldr	r1, [pc, #28]	; (80121c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80121aa:	4808      	ldr	r0, [pc, #32]	; (80121cc <USBD_FS_ProductStrDescriptor+0x38>)
 80121ac:	f7fc fe50 	bl	800ee50 <USBD_GetString>
 80121b0:	e004      	b.n	80121bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	4904      	ldr	r1, [pc, #16]	; (80121c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80121b6:	4805      	ldr	r0, [pc, #20]	; (80121cc <USBD_FS_ProductStrDescriptor+0x38>)
 80121b8:	f7fc fe4a 	bl	800ee50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80121bc:	4b02      	ldr	r3, [pc, #8]	; (80121c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3708      	adds	r7, #8
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	20012770 	.word	0x20012770
 80121cc:	0802220c 	.word	0x0802220c

080121d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	6039      	str	r1, [r7, #0]
 80121da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	4904      	ldr	r1, [pc, #16]	; (80121f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80121e0:	4804      	ldr	r0, [pc, #16]	; (80121f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80121e2:	f7fc fe35 	bl	800ee50 <USBD_GetString>
  return USBD_StrDesc;
 80121e6:	4b02      	ldr	r3, [pc, #8]	; (80121f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	20012770 	.word	0x20012770
 80121f4:	08022224 	.word	0x08022224

080121f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	4603      	mov	r3, r0
 8012200:	6039      	str	r1, [r7, #0]
 8012202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	221a      	movs	r2, #26
 8012208:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801220a:	f000 f855 	bl	80122b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801220e:	4b02      	ldr	r3, [pc, #8]	; (8012218 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012210:	4618      	mov	r0, r3
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	200000f8 	.word	0x200000f8

0801221c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	4603      	mov	r3, r0
 8012224:	6039      	str	r1, [r7, #0]
 8012226:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012228:	79fb      	ldrb	r3, [r7, #7]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d105      	bne.n	801223a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801222e:	683a      	ldr	r2, [r7, #0]
 8012230:	4907      	ldr	r1, [pc, #28]	; (8012250 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012232:	4808      	ldr	r0, [pc, #32]	; (8012254 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012234:	f7fc fe0c 	bl	800ee50 <USBD_GetString>
 8012238:	e004      	b.n	8012244 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801223a:	683a      	ldr	r2, [r7, #0]
 801223c:	4904      	ldr	r1, [pc, #16]	; (8012250 <USBD_FS_ConfigStrDescriptor+0x34>)
 801223e:	4805      	ldr	r0, [pc, #20]	; (8012254 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012240:	f7fc fe06 	bl	800ee50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012244:	4b02      	ldr	r3, [pc, #8]	; (8012250 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012246:	4618      	mov	r0, r3
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	20012770 	.word	0x20012770
 8012254:	08022238 	.word	0x08022238

08012258 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	4603      	mov	r3, r0
 8012260:	6039      	str	r1, [r7, #0]
 8012262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012264:	79fb      	ldrb	r3, [r7, #7]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d105      	bne.n	8012276 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801226a:	683a      	ldr	r2, [r7, #0]
 801226c:	4907      	ldr	r1, [pc, #28]	; (801228c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801226e:	4808      	ldr	r0, [pc, #32]	; (8012290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012270:	f7fc fdee 	bl	800ee50 <USBD_GetString>
 8012274:	e004      	b.n	8012280 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012276:	683a      	ldr	r2, [r7, #0]
 8012278:	4904      	ldr	r1, [pc, #16]	; (801228c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801227a:	4805      	ldr	r0, [pc, #20]	; (8012290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801227c:	f7fc fde8 	bl	800ee50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012280:	4b02      	ldr	r3, [pc, #8]	; (801228c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012282:	4618      	mov	r0, r3
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20012770 	.word	0x20012770
 8012290:	08022244 	.word	0x08022244

08012294 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	6039      	str	r1, [r7, #0]
 801229e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	220c      	movs	r2, #12
 80122a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80122a6:	4b03      	ldr	r3, [pc, #12]	; (80122b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	370c      	adds	r7, #12
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr
 80122b4:	200000e8 	.word	0x200000e8

080122b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b084      	sub	sp, #16
 80122bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80122be:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <Get_SerialNum+0x44>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80122c4:	4b0e      	ldr	r3, [pc, #56]	; (8012300 <Get_SerialNum+0x48>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80122ca:	4b0e      	ldr	r3, [pc, #56]	; (8012304 <Get_SerialNum+0x4c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80122d0:	68fa      	ldr	r2, [r7, #12]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	4413      	add	r3, r2
 80122d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d009      	beq.n	80122f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80122de:	2208      	movs	r2, #8
 80122e0:	4909      	ldr	r1, [pc, #36]	; (8012308 <Get_SerialNum+0x50>)
 80122e2:	68f8      	ldr	r0, [r7, #12]
 80122e4:	f000 f814 	bl	8012310 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80122e8:	2204      	movs	r2, #4
 80122ea:	4908      	ldr	r1, [pc, #32]	; (801230c <Get_SerialNum+0x54>)
 80122ec:	68b8      	ldr	r0, [r7, #8]
 80122ee:	f000 f80f 	bl	8012310 <IntToUnicode>
  }
}
 80122f2:	bf00      	nop
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	1ff0f420 	.word	0x1ff0f420
 8012300:	1ff0f424 	.word	0x1ff0f424
 8012304:	1ff0f428 	.word	0x1ff0f428
 8012308:	200000fa 	.word	0x200000fa
 801230c:	2000010a 	.word	0x2000010a

08012310 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012310:	b480      	push	{r7}
 8012312:	b087      	sub	sp, #28
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	4613      	mov	r3, r2
 801231c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801231e:	2300      	movs	r3, #0
 8012320:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012322:	2300      	movs	r3, #0
 8012324:	75fb      	strb	r3, [r7, #23]
 8012326:	e027      	b.n	8012378 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	0f1b      	lsrs	r3, r3, #28
 801232c:	2b09      	cmp	r3, #9
 801232e:	d80b      	bhi.n	8012348 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	0f1b      	lsrs	r3, r3, #28
 8012334:	b2da      	uxtb	r2, r3
 8012336:	7dfb      	ldrb	r3, [r7, #23]
 8012338:	005b      	lsls	r3, r3, #1
 801233a:	4619      	mov	r1, r3
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	440b      	add	r3, r1
 8012340:	3230      	adds	r2, #48	; 0x30
 8012342:	b2d2      	uxtb	r2, r2
 8012344:	701a      	strb	r2, [r3, #0]
 8012346:	e00a      	b.n	801235e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	0f1b      	lsrs	r3, r3, #28
 801234c:	b2da      	uxtb	r2, r3
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	005b      	lsls	r3, r3, #1
 8012352:	4619      	mov	r1, r3
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	440b      	add	r3, r1
 8012358:	3237      	adds	r2, #55	; 0x37
 801235a:	b2d2      	uxtb	r2, r2
 801235c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	011b      	lsls	r3, r3, #4
 8012362:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012364:	7dfb      	ldrb	r3, [r7, #23]
 8012366:	005b      	lsls	r3, r3, #1
 8012368:	3301      	adds	r3, #1
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	4413      	add	r3, r2
 801236e:	2200      	movs	r2, #0
 8012370:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012372:	7dfb      	ldrb	r3, [r7, #23]
 8012374:	3301      	adds	r3, #1
 8012376:	75fb      	strb	r3, [r7, #23]
 8012378:	7dfa      	ldrb	r2, [r7, #23]
 801237a:	79fb      	ldrb	r3, [r7, #7]
 801237c:	429a      	cmp	r2, r3
 801237e:	d3d3      	bcc.n	8012328 <IntToUnicode+0x18>
  }
}
 8012380:	bf00      	nop
 8012382:	bf00      	nop
 8012384:	371c      	adds	r7, #28
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
	...

08012390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b0ae      	sub	sp, #184	; 0xb8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012398:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801239c:	2200      	movs	r2, #0
 801239e:	601a      	str	r2, [r3, #0]
 80123a0:	605a      	str	r2, [r3, #4]
 80123a2:	609a      	str	r2, [r3, #8]
 80123a4:	60da      	str	r2, [r3, #12]
 80123a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80123a8:	f107 0314 	add.w	r3, r7, #20
 80123ac:	2290      	movs	r2, #144	; 0x90
 80123ae:	2100      	movs	r1, #0
 80123b0:	4618      	mov	r0, r3
 80123b2:	f00e fe29 	bl	8021008 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80123be:	d161      	bne.n	8012484 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80123c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80123c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80123c6:	2300      	movs	r3, #0
 80123c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80123cc:	f107 0314 	add.w	r3, r7, #20
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f6 fef9 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d001      	beq.n	80123e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80123dc:	f7f2 f8c8 	bl	8004570 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80123e0:	4b2a      	ldr	r3, [pc, #168]	; (801248c <HAL_PCD_MspInit+0xfc>)
 80123e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e4:	4a29      	ldr	r2, [pc, #164]	; (801248c <HAL_PCD_MspInit+0xfc>)
 80123e6:	f043 0301 	orr.w	r3, r3, #1
 80123ea:	6313      	str	r3, [r2, #48]	; 0x30
 80123ec:	4b27      	ldr	r3, [pc, #156]	; (801248c <HAL_PCD_MspInit+0xfc>)
 80123ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123f0:	f003 0301 	and.w	r3, r3, #1
 80123f4:	613b      	str	r3, [r7, #16]
 80123f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80123f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80123fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012400:	2302      	movs	r3, #2
 8012402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012406:	2300      	movs	r3, #0
 8012408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801240c:	2303      	movs	r3, #3
 801240e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012412:	230a      	movs	r3, #10
 8012414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012418:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801241c:	4619      	mov	r1, r3
 801241e:	481c      	ldr	r0, [pc, #112]	; (8012490 <HAL_PCD_MspInit+0x100>)
 8012420:	f7f4 fcd4 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8012424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801242c:	2300      	movs	r3, #0
 801242e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012432:	2300      	movs	r3, #0
 8012434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8012438:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801243c:	4619      	mov	r1, r3
 801243e:	4814      	ldr	r0, [pc, #80]	; (8012490 <HAL_PCD_MspInit+0x100>)
 8012440:	f7f4 fcc4 	bl	8006dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012444:	4b11      	ldr	r3, [pc, #68]	; (801248c <HAL_PCD_MspInit+0xfc>)
 8012446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012448:	4a10      	ldr	r2, [pc, #64]	; (801248c <HAL_PCD_MspInit+0xfc>)
 801244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801244e:	6353      	str	r3, [r2, #52]	; 0x34
 8012450:	4b0e      	ldr	r3, [pc, #56]	; (801248c <HAL_PCD_MspInit+0xfc>)
 8012452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012458:	60fb      	str	r3, [r7, #12]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	4b0b      	ldr	r3, [pc, #44]	; (801248c <HAL_PCD_MspInit+0xfc>)
 801245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012460:	4a0a      	ldr	r2, [pc, #40]	; (801248c <HAL_PCD_MspInit+0xfc>)
 8012462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012466:	6453      	str	r3, [r2, #68]	; 0x44
 8012468:	4b08      	ldr	r3, [pc, #32]	; (801248c <HAL_PCD_MspInit+0xfc>)
 801246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012470:	60bb      	str	r3, [r7, #8]
 8012472:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012474:	2200      	movs	r2, #0
 8012476:	2105      	movs	r1, #5
 8012478:	2043      	movs	r0, #67	; 0x43
 801247a:	f7f3 fd41 	bl	8005f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801247e:	2043      	movs	r0, #67	; 0x43
 8012480:	f7f3 fd5a 	bl	8005f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012484:	bf00      	nop
 8012486:	37b8      	adds	r7, #184	; 0xb8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	40023800 	.word	0x40023800
 8012490:	40020000 	.word	0x40020000

08012494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80124a8:	4619      	mov	r1, r3
 80124aa:	4610      	mov	r0, r2
 80124ac:	f7fb fb47 	bl	800db3e <USBD_LL_SetupStage>
}
 80124b0:	bf00      	nop
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	460b      	mov	r3, r1
 80124c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80124ca:	78fa      	ldrb	r2, [r7, #3]
 80124cc:	6879      	ldr	r1, [r7, #4]
 80124ce:	4613      	mov	r3, r2
 80124d0:	00db      	lsls	r3, r3, #3
 80124d2:	4413      	add	r3, r2
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	440b      	add	r3, r1
 80124d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	78fb      	ldrb	r3, [r7, #3]
 80124e0:	4619      	mov	r1, r3
 80124e2:	f7fb fb81 	bl	800dbe8 <USBD_LL_DataOutStage>
}
 80124e6:	bf00      	nop
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b082      	sub	sp, #8
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	460b      	mov	r3, r1
 80124f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8012500:	78fa      	ldrb	r2, [r7, #3]
 8012502:	6879      	ldr	r1, [r7, #4]
 8012504:	4613      	mov	r3, r2
 8012506:	00db      	lsls	r3, r3, #3
 8012508:	4413      	add	r3, r2
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	440b      	add	r3, r1
 801250e:	334c      	adds	r3, #76	; 0x4c
 8012510:	681a      	ldr	r2, [r3, #0]
 8012512:	78fb      	ldrb	r3, [r7, #3]
 8012514:	4619      	mov	r1, r3
 8012516:	f7fb fc1a 	bl	800dd4e <USBD_LL_DataInStage>
}
 801251a:	bf00      	nop
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b082      	sub	sp, #8
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012530:	4618      	mov	r0, r3
 8012532:	f7fb fd4e 	bl	800dfd2 <USBD_LL_SOF>
}
 8012536:	bf00      	nop
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801253e:	b580      	push	{r7, lr}
 8012540:	b084      	sub	sp, #16
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012546:	2301      	movs	r3, #1
 8012548:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d102      	bne.n	8012558 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012552:	2300      	movs	r3, #0
 8012554:	73fb      	strb	r3, [r7, #15]
 8012556:	e008      	b.n	801256a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	2b02      	cmp	r3, #2
 801255e:	d102      	bne.n	8012566 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012560:	2301      	movs	r3, #1
 8012562:	73fb      	strb	r3, [r7, #15]
 8012564:	e001      	b.n	801256a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012566:	f7f2 f803 	bl	8004570 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012570:	7bfa      	ldrb	r2, [r7, #15]
 8012572:	4611      	mov	r1, r2
 8012574:	4618      	mov	r0, r3
 8012576:	f7fb fcee 	bl	800df56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012580:	4618      	mov	r0, r3
 8012582:	f7fb fc96 	bl	800deb2 <USBD_LL_Reset>
}
 8012586:	bf00      	nop
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fb fce9 	bl	800df76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	6812      	ldr	r2, [r2, #0]
 80125b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80125b6:	f043 0301 	orr.w	r3, r3, #1
 80125ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6a1b      	ldr	r3, [r3, #32]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d005      	beq.n	80125d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125c4:	4b04      	ldr	r3, [pc, #16]	; (80125d8 <HAL_PCD_SuspendCallback+0x48>)
 80125c6:	691b      	ldr	r3, [r3, #16]
 80125c8:	4a03      	ldr	r2, [pc, #12]	; (80125d8 <HAL_PCD_SuspendCallback+0x48>)
 80125ca:	f043 0306 	orr.w	r3, r3, #6
 80125ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80125d0:	bf00      	nop
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	e000ed00 	.word	0xe000ed00

080125dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fb fcd9 	bl	800dfa2 <USBD_LL_Resume>
}
 80125f0:	bf00      	nop
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	460b      	mov	r3, r1
 8012602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801260a:	78fa      	ldrb	r2, [r7, #3]
 801260c:	4611      	mov	r1, r2
 801260e:	4618      	mov	r0, r3
 8012610:	f7fb fd31 	bl	800e076 <USBD_LL_IsoOUTIncomplete>
}
 8012614:	bf00      	nop
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	460b      	mov	r3, r1
 8012626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801262e:	78fa      	ldrb	r2, [r7, #3]
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7fb fced 	bl	800e012 <USBD_LL_IsoINIncomplete>
}
 8012638:	bf00      	nop
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801264e:	4618      	mov	r0, r3
 8012650:	f7fb fd43 	bl	800e0da <USBD_LL_DevConnected>
}
 8012654:	bf00      	nop
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801266a:	4618      	mov	r0, r3
 801266c:	f7fb fd40 	bl	800e0f0 <USBD_LL_DevDisconnected>
}
 8012670:	bf00      	nop
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d13c      	bne.n	8012702 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012688:	4a20      	ldr	r2, [pc, #128]	; (801270c <USBD_LL_Init+0x94>)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	4a1e      	ldr	r2, [pc, #120]	; (801270c <USBD_LL_Init+0x94>)
 8012694:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012698:	4b1c      	ldr	r3, [pc, #112]	; (801270c <USBD_LL_Init+0x94>)
 801269a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801269e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80126a0:	4b1a      	ldr	r3, [pc, #104]	; (801270c <USBD_LL_Init+0x94>)
 80126a2:	2206      	movs	r2, #6
 80126a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80126a6:	4b19      	ldr	r3, [pc, #100]	; (801270c <USBD_LL_Init+0x94>)
 80126a8:	2202      	movs	r2, #2
 80126aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80126ac:	4b17      	ldr	r3, [pc, #92]	; (801270c <USBD_LL_Init+0x94>)
 80126ae:	2200      	movs	r2, #0
 80126b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80126b2:	4b16      	ldr	r3, [pc, #88]	; (801270c <USBD_LL_Init+0x94>)
 80126b4:	2202      	movs	r2, #2
 80126b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80126b8:	4b14      	ldr	r3, [pc, #80]	; (801270c <USBD_LL_Init+0x94>)
 80126ba:	2201      	movs	r2, #1
 80126bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80126be:	4b13      	ldr	r3, [pc, #76]	; (801270c <USBD_LL_Init+0x94>)
 80126c0:	2200      	movs	r2, #0
 80126c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80126c4:	4b11      	ldr	r3, [pc, #68]	; (801270c <USBD_LL_Init+0x94>)
 80126c6:	2200      	movs	r2, #0
 80126c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80126ca:	4b10      	ldr	r3, [pc, #64]	; (801270c <USBD_LL_Init+0x94>)
 80126cc:	2201      	movs	r2, #1
 80126ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80126d0:	4b0e      	ldr	r3, [pc, #56]	; (801270c <USBD_LL_Init+0x94>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80126d6:	480d      	ldr	r0, [pc, #52]	; (801270c <USBD_LL_Init+0x94>)
 80126d8:	f7f4 fd57 	bl	800718a <HAL_PCD_Init>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80126e2:	f7f1 ff45 	bl	8004570 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80126e6:	2180      	movs	r1, #128	; 0x80
 80126e8:	4808      	ldr	r0, [pc, #32]	; (801270c <USBD_LL_Init+0x94>)
 80126ea:	f7f5 ffd2 	bl	8008692 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80126ee:	2240      	movs	r2, #64	; 0x40
 80126f0:	2100      	movs	r1, #0
 80126f2:	4806      	ldr	r0, [pc, #24]	; (801270c <USBD_LL_Init+0x94>)
 80126f4:	f7f5 ff86 	bl	8008604 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80126f8:	2280      	movs	r2, #128	; 0x80
 80126fa:	2101      	movs	r1, #1
 80126fc:	4803      	ldr	r0, [pc, #12]	; (801270c <USBD_LL_Init+0x94>)
 80126fe:	f7f5 ff81 	bl	8008604 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012702:	2300      	movs	r3, #0
}
 8012704:	4618      	mov	r0, r3
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	20012970 	.word	0x20012970

08012710 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012718:	2300      	movs	r3, #0
 801271a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801271c:	2300      	movs	r3, #0
 801271e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012726:	4618      	mov	r0, r3
 8012728:	f7f4 fe53 	bl	80073d2 <HAL_PCD_Start>
 801272c:	4603      	mov	r3, r0
 801272e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012730:	7bfb      	ldrb	r3, [r7, #15]
 8012732:	4618      	mov	r0, r3
 8012734:	f000 f97e 	bl	8012a34 <USBD_Get_USB_Status>
 8012738:	4603      	mov	r3, r0
 801273a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801273c:	7bbb      	ldrb	r3, [r7, #14]
}
 801273e:	4618      	mov	r0, r3
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012746:	b580      	push	{r7, lr}
 8012748:	b084      	sub	sp, #16
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
 801274e:	4608      	mov	r0, r1
 8012750:	4611      	mov	r1, r2
 8012752:	461a      	mov	r2, r3
 8012754:	4603      	mov	r3, r0
 8012756:	70fb      	strb	r3, [r7, #3]
 8012758:	460b      	mov	r3, r1
 801275a:	70bb      	strb	r3, [r7, #2]
 801275c:	4613      	mov	r3, r2
 801275e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012760:	2300      	movs	r3, #0
 8012762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012764:	2300      	movs	r3, #0
 8012766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801276e:	78bb      	ldrb	r3, [r7, #2]
 8012770:	883a      	ldrh	r2, [r7, #0]
 8012772:	78f9      	ldrb	r1, [r7, #3]
 8012774:	f7f5 fb40 	bl	8007df8 <HAL_PCD_EP_Open>
 8012778:	4603      	mov	r3, r0
 801277a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801277c:	7bfb      	ldrb	r3, [r7, #15]
 801277e:	4618      	mov	r0, r3
 8012780:	f000 f958 	bl	8012a34 <USBD_Get_USB_Status>
 8012784:	4603      	mov	r3, r0
 8012786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012788:	7bbb      	ldrb	r3, [r7, #14]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012792:	b580      	push	{r7, lr}
 8012794:	b084      	sub	sp, #16
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
 801279a:	460b      	mov	r3, r1
 801279c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801279e:	2300      	movs	r3, #0
 80127a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127a2:	2300      	movs	r3, #0
 80127a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80127ac:	78fa      	ldrb	r2, [r7, #3]
 80127ae:	4611      	mov	r1, r2
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7f5 fb89 	bl	8007ec8 <HAL_PCD_EP_Close>
 80127b6:	4603      	mov	r3, r0
 80127b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127ba:	7bfb      	ldrb	r3, [r7, #15]
 80127bc:	4618      	mov	r0, r3
 80127be:	f000 f939 	bl	8012a34 <USBD_Get_USB_Status>
 80127c2:	4603      	mov	r3, r0
 80127c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3710      	adds	r7, #16
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127e0:	2300      	movs	r3, #0
 80127e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80127ea:	78fa      	ldrb	r2, [r7, #3]
 80127ec:	4611      	mov	r1, r2
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7f5 fc61 	bl	80080b6 <HAL_PCD_EP_SetStall>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127f8:	7bfb      	ldrb	r3, [r7, #15]
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 f91a 	bl	8012a34 <USBD_Get_USB_Status>
 8012800:	4603      	mov	r3, r0
 8012802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012804:	7bbb      	ldrb	r3, [r7, #14]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801280e:	b580      	push	{r7, lr}
 8012810:	b084      	sub	sp, #16
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
 8012816:	460b      	mov	r3, r1
 8012818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801281e:	2300      	movs	r3, #0
 8012820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012828:	78fa      	ldrb	r2, [r7, #3]
 801282a:	4611      	mov	r1, r2
 801282c:	4618      	mov	r0, r3
 801282e:	f7f5 fca6 	bl	800817e <HAL_PCD_EP_ClrStall>
 8012832:	4603      	mov	r3, r0
 8012834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012836:	7bfb      	ldrb	r3, [r7, #15]
 8012838:	4618      	mov	r0, r3
 801283a:	f000 f8fb 	bl	8012a34 <USBD_Get_USB_Status>
 801283e:	4603      	mov	r3, r0
 8012840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012842:	7bbb      	ldrb	r3, [r7, #14]
}
 8012844:	4618      	mov	r0, r3
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	460b      	mov	r3, r1
 8012856:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801285e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012864:	2b00      	cmp	r3, #0
 8012866:	da0b      	bge.n	8012880 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012868:	78fb      	ldrb	r3, [r7, #3]
 801286a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801286e:	68f9      	ldr	r1, [r7, #12]
 8012870:	4613      	mov	r3, r2
 8012872:	00db      	lsls	r3, r3, #3
 8012874:	4413      	add	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	440b      	add	r3, r1
 801287a:	333e      	adds	r3, #62	; 0x3e
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	e00b      	b.n	8012898 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012880:	78fb      	ldrb	r3, [r7, #3]
 8012882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012886:	68f9      	ldr	r1, [r7, #12]
 8012888:	4613      	mov	r3, r2
 801288a:	00db      	lsls	r3, r3, #3
 801288c:	4413      	add	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	440b      	add	r3, r1
 8012892:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012896:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012898:	4618      	mov	r0, r3
 801289a:	3714      	adds	r7, #20
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	460b      	mov	r3, r1
 80128ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128b0:	2300      	movs	r3, #0
 80128b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128b4:	2300      	movs	r3, #0
 80128b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128be:	78fa      	ldrb	r2, [r7, #3]
 80128c0:	4611      	mov	r1, r2
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7f5 fa73 	bl	8007dae <HAL_PCD_SetAddress>
 80128c8:	4603      	mov	r3, r0
 80128ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128cc:	7bfb      	ldrb	r3, [r7, #15]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f000 f8b0 	bl	8012a34 <USBD_Get_USB_Status>
 80128d4:	4603      	mov	r3, r0
 80128d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3710      	adds	r7, #16
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b086      	sub	sp, #24
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	60f8      	str	r0, [r7, #12]
 80128ea:	607a      	str	r2, [r7, #4]
 80128ec:	603b      	str	r3, [r7, #0]
 80128ee:	460b      	mov	r3, r1
 80128f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128f6:	2300      	movs	r3, #0
 80128f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012900:	7af9      	ldrb	r1, [r7, #11]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	f7f5 fb8c 	bl	8008022 <HAL_PCD_EP_Transmit>
 801290a:	4603      	mov	r3, r0
 801290c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	4618      	mov	r0, r3
 8012912:	f000 f88f 	bl	8012a34 <USBD_Get_USB_Status>
 8012916:	4603      	mov	r3, r0
 8012918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801291a:	7dbb      	ldrb	r3, [r7, #22]
}
 801291c:	4618      	mov	r0, r3
 801291e:	3718      	adds	r7, #24
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b086      	sub	sp, #24
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	607a      	str	r2, [r7, #4]
 801292e:	603b      	str	r3, [r7, #0]
 8012930:	460b      	mov	r3, r1
 8012932:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012934:	2300      	movs	r3, #0
 8012936:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012938:	2300      	movs	r3, #0
 801293a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012942:	7af9      	ldrb	r1, [r7, #11]
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	f7f5 fb08 	bl	8007f5c <HAL_PCD_EP_Receive>
 801294c:	4603      	mov	r3, r0
 801294e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012950:	7dfb      	ldrb	r3, [r7, #23]
 8012952:	4618      	mov	r0, r3
 8012954:	f000 f86e 	bl	8012a34 <USBD_Get_USB_Status>
 8012958:	4603      	mov	r3, r0
 801295a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801295c:	7dbb      	ldrb	r3, [r7, #22]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3718      	adds	r7, #24
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012966:	b580      	push	{r7, lr}
 8012968:	b082      	sub	sp, #8
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
 801296e:	460b      	mov	r3, r1
 8012970:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012978:	78fa      	ldrb	r2, [r7, #3]
 801297a:	4611      	mov	r1, r2
 801297c:	4618      	mov	r0, r3
 801297e:	f7f5 fb38 	bl	8007ff2 <HAL_PCD_EP_GetRxCount>
 8012982:	4603      	mov	r3, r0
}
 8012984:	4618      	mov	r0, r3
 8012986:	3708      	adds	r7, #8
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	460b      	mov	r3, r1
 8012996:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012998:	78fb      	ldrb	r3, [r7, #3]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d002      	beq.n	80129a4 <HAL_PCDEx_LPM_Callback+0x18>
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d01f      	beq.n	80129e2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80129a2:	e03b      	b.n	8012a1c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6a1b      	ldr	r3, [r3, #32]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d007      	beq.n	80129bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80129ac:	f000 f83c 	bl	8012a28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80129b0:	4b1c      	ldr	r3, [pc, #112]	; (8012a24 <HAL_PCDEx_LPM_Callback+0x98>)
 80129b2:	691b      	ldr	r3, [r3, #16]
 80129b4:	4a1b      	ldr	r2, [pc, #108]	; (8012a24 <HAL_PCDEx_LPM_Callback+0x98>)
 80129b6:	f023 0306 	bic.w	r3, r3, #6
 80129ba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	6812      	ldr	r2, [r2, #0]
 80129ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80129ce:	f023 0301 	bic.w	r3, r3, #1
 80129d2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fb fae1 	bl	800dfa2 <USBD_LL_Resume>
    break;
 80129e0:	e01c      	b.n	8012a1c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	6812      	ldr	r2, [r2, #0]
 80129f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80129f4:	f043 0301 	orr.w	r3, r3, #1
 80129f8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fb fab8 	bl	800df76 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6a1b      	ldr	r3, [r3, #32]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d005      	beq.n	8012a1a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a0e:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <HAL_PCDEx_LPM_Callback+0x98>)
 8012a10:	691b      	ldr	r3, [r3, #16]
 8012a12:	4a04      	ldr	r2, [pc, #16]	; (8012a24 <HAL_PCDEx_LPM_Callback+0x98>)
 8012a14:	f043 0306 	orr.w	r3, r3, #6
 8012a18:	6113      	str	r3, [r2, #16]
    break;
 8012a1a:	bf00      	nop
}
 8012a1c:	bf00      	nop
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	e000ed00 	.word	0xe000ed00

08012a28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012a2c:	f7f1 fd1c 	bl	8004468 <SystemClock_Config>
}
 8012a30:	bf00      	nop
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a42:	79fb      	ldrb	r3, [r7, #7]
 8012a44:	2b03      	cmp	r3, #3
 8012a46:	d817      	bhi.n	8012a78 <USBD_Get_USB_Status+0x44>
 8012a48:	a201      	add	r2, pc, #4	; (adr r2, 8012a50 <USBD_Get_USB_Status+0x1c>)
 8012a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a4e:	bf00      	nop
 8012a50:	08012a61 	.word	0x08012a61
 8012a54:	08012a67 	.word	0x08012a67
 8012a58:	08012a6d 	.word	0x08012a6d
 8012a5c:	08012a73 	.word	0x08012a73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012a60:	2300      	movs	r3, #0
 8012a62:	73fb      	strb	r3, [r7, #15]
    break;
 8012a64:	e00b      	b.n	8012a7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a66:	2303      	movs	r3, #3
 8012a68:	73fb      	strb	r3, [r7, #15]
    break;
 8012a6a:	e008      	b.n	8012a7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a70:	e005      	b.n	8012a7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a72:	2303      	movs	r3, #3
 8012a74:	73fb      	strb	r3, [r7, #15]
    break;
 8012a76:	e002      	b.n	8012a7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012a78:	2303      	movs	r3, #3
 8012a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a7c:	bf00      	nop
  }
  return usb_status;
 8012a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3714      	adds	r7, #20
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr

08012a8c <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus>:
 8012a8c:	4b04      	ldr	r3, [pc, #16]	; (8012aa0 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x14>)
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	b10a      	cbz	r2, 8012a96 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0xa>
 8012a92:	4803      	ldr	r0, [pc, #12]	; (8012aa0 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x14>)
 8012a94:	4770      	bx	lr
 8012a96:	4a03      	ldr	r2, [pc, #12]	; (8012aa4 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x18>)
 8012a98:	4801      	ldr	r0, [pc, #4]	; (8012aa0 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x14>)
 8012a9a:	6812      	ldr	r2, [r2, #0]
 8012a9c:	601a      	str	r2, [r3, #0]
 8012a9e:	4770      	bx	lr
 8012aa0:	2000011c 	.word	0x2000011c
 8012aa4:	200005b8 	.word	0x200005b8

08012aa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus>:
 8012aa8:	4a02      	ldr	r2, [pc, #8]	; (8012ab4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0xc>)
 8012aaa:	4b03      	ldr	r3, [pc, #12]	; (8012ab8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x10>)
 8012aac:	6812      	ldr	r2, [r2, #0]
 8012aae:	601a      	str	r2, [r3, #0]
 8012ab0:	4770      	bx	lr
 8012ab2:	bf00      	nop
 8012ab4:	200005b8 	.word	0x200005b8
 8012ab8:	2000011c 	.word	0x2000011c

08012abc <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus>:
 8012abc:	4b04      	ldr	r3, [pc, #16]	; (8012ad0 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x14>)
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	b10a      	cbz	r2, 8012ac6 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0xa>
 8012ac2:	4803      	ldr	r0, [pc, #12]	; (8012ad0 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x14>)
 8012ac4:	4770      	bx	lr
 8012ac6:	4a03      	ldr	r2, [pc, #12]	; (8012ad4 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x18>)
 8012ac8:	4801      	ldr	r0, [pc, #4]	; (8012ad0 <rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x14>)
 8012aca:	6812      	ldr	r2, [r2, #0]
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	4770      	bx	lr
 8012ad0:	20000130 	.word	0x20000130
 8012ad4:	200005b8 	.word	0x200005b8

08012ad8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus>:
 8012ad8:	4a02      	ldr	r2, [pc, #8]	; (8012ae4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0xc>)
 8012ada:	4b03      	ldr	r3, [pc, #12]	; (8012ae8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x10>)
 8012adc:	6812      	ldr	r2, [r2, #0]
 8012ade:	601a      	str	r2, [r3, #0]
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	200005b8 	.word	0x200005b8
 8012ae8:	20000130 	.word	0x20000130

08012aec <actuator_custom_msgs__msg__HandAirStatus__rosidl_typesupport_introspection_c__HandAirStatus_init_function>:
 8012aec:	f005 b9f0 	b.w	8017ed0 <actuator_custom_msgs__msg__HandAirStatus__init>

08012af0 <actuator_custom_msgs__msg__HandAirStatus__rosidl_typesupport_introspection_c__HandAirStatus_fini_function>:
 8012af0:	f005 b9f2 	b.w	8017ed8 <actuator_custom_msgs__msg__HandAirStatus__fini>

08012af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus>:
 8012af4:	4b04      	ldr	r3, [pc, #16]	; (8012b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x14>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	b10a      	cbz	r2, 8012afe <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0xa>
 8012afa:	4803      	ldr	r0, [pc, #12]	; (8012b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x14>)
 8012afc:	4770      	bx	lr
 8012afe:	4a03      	ldr	r2, [pc, #12]	; (8012b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x18>)
 8012b00:	4801      	ldr	r0, [pc, #4]	; (8012b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x14>)
 8012b02:	6812      	ldr	r2, [r2, #0]
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	4770      	bx	lr
 8012b08:	200002a4 	.word	0x200002a4
 8012b0c:	200005bc 	.word	0x200005bc

08012b10 <actuator_custom_msgs__msg__ShootAirStatus__rosidl_typesupport_introspection_c__ShootAirStatus_init_function>:
 8012b10:	f005 b9e4 	b.w	8017edc <actuator_custom_msgs__msg__ShootAirStatus__init>

08012b14 <actuator_custom_msgs__msg__ShootAirStatus__rosidl_typesupport_introspection_c__ShootAirStatus_fini_function>:
 8012b14:	f005 b9e6 	b.w	8017ee4 <actuator_custom_msgs__msg__ShootAirStatus__fini>

08012b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus>:
 8012b18:	4b04      	ldr	r3, [pc, #16]	; (8012b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x14>)
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	b10a      	cbz	r2, 8012b22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0xa>
 8012b1e:	4803      	ldr	r0, [pc, #12]	; (8012b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x14>)
 8012b20:	4770      	bx	lr
 8012b22:	4a03      	ldr	r2, [pc, #12]	; (8012b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x18>)
 8012b24:	4801      	ldr	r0, [pc, #4]	; (8012b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x14>)
 8012b26:	6812      	ldr	r2, [r2, #0]
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	4770      	bx	lr
 8012b2c:	200003a0 	.word	0x200003a0
 8012b30:	200005bc 	.word	0x200005bc

08012b34 <get_serialized_size_actuator_custom_msgs__msg__HandAirStatus.part.0>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	2101      	movs	r1, #1
 8012b38:	4604      	mov	r4, r0
 8012b3a:	f001 fe35 	bl	80147a8 <ucdr_alignment>
 8012b3e:	2101      	movs	r1, #1
 8012b40:	1866      	adds	r6, r4, r1
 8012b42:	f1c4 0401 	rsb	r4, r4, #1
 8012b46:	1985      	adds	r5, r0, r6
 8012b48:	4628      	mov	r0, r5
 8012b4a:	f001 fe2d 	bl	80147a8 <ucdr_alignment>
 8012b4e:	2101      	movs	r1, #1
 8012b50:	1846      	adds	r6, r0, r1
 8012b52:	442e      	add	r6, r5
 8012b54:	4630      	mov	r0, r6
 8012b56:	f001 fe27 	bl	80147a8 <ucdr_alignment>
 8012b5a:	2101      	movs	r1, #1
 8012b5c:	1845      	adds	r5, r0, r1
 8012b5e:	442e      	add	r6, r5
 8012b60:	4630      	mov	r0, r6
 8012b62:	f001 fe21 	bl	80147a8 <ucdr_alignment>
 8012b66:	2101      	movs	r1, #1
 8012b68:	1845      	adds	r5, r0, r1
 8012b6a:	4435      	add	r5, r6
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f001 fe1b 	bl	80147a8 <ucdr_alignment>
 8012b72:	2101      	movs	r1, #1
 8012b74:	4408      	add	r0, r1
 8012b76:	4405      	add	r5, r0
 8012b78:	4628      	mov	r0, r5
 8012b7a:	f001 fe15 	bl	80147a8 <ucdr_alignment>
 8012b7e:	4420      	add	r0, r4
 8012b80:	4428      	add	r0, r5
 8012b82:	bd70      	pop	{r4, r5, r6, pc}

08012b84 <get_serialized_size_actuator_custom_msgs__msg__HandAirStatus>:
 8012b84:	b110      	cbz	r0, 8012b8c <get_serialized_size_actuator_custom_msgs__msg__HandAirStatus+0x8>
 8012b86:	4608      	mov	r0, r1
 8012b88:	f7ff bfd4 	b.w	8012b34 <get_serialized_size_actuator_custom_msgs__msg__HandAirStatus.part.0>
 8012b8c:	4770      	bx	lr
 8012b8e:	bf00      	nop

08012b90 <_HandAirStatus__get_serialized_size>:
 8012b90:	b110      	cbz	r0, 8012b98 <_HandAirStatus__get_serialized_size+0x8>
 8012b92:	2000      	movs	r0, #0
 8012b94:	f7ff bfce 	b.w	8012b34 <get_serialized_size_actuator_custom_msgs__msg__HandAirStatus.part.0>
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop

08012b9c <_HandAirStatus__cdr_deserialize>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	b1c1      	cbz	r1, 8012bd4 <_HandAirStatus__cdr_deserialize+0x38>
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	f000 fa4c 	bl	8013040 <ucdr_deserialize_bool>
 8012ba8:	1c61      	adds	r1, r4, #1
 8012baa:	4628      	mov	r0, r5
 8012bac:	f000 fa48 	bl	8013040 <ucdr_deserialize_bool>
 8012bb0:	1ca1      	adds	r1, r4, #2
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f000 fa44 	bl	8013040 <ucdr_deserialize_bool>
 8012bb8:	1ce1      	adds	r1, r4, #3
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f000 fa40 	bl	8013040 <ucdr_deserialize_bool>
 8012bc0:	1d21      	adds	r1, r4, #4
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f000 fa3c 	bl	8013040 <ucdr_deserialize_bool>
 8012bc8:	1d61      	adds	r1, r4, #5
 8012bca:	4628      	mov	r0, r5
 8012bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bd0:	f000 ba36 	b.w	8013040 <ucdr_deserialize_bool>
 8012bd4:	4608      	mov	r0, r1
 8012bd6:	bd38      	pop	{r3, r4, r5, pc}

08012bd8 <_HandAirStatus__cdr_serialize>:
 8012bd8:	b1e0      	cbz	r0, 8012c14 <_HandAirStatus__cdr_serialize+0x3c>
 8012bda:	b538      	push	{r3, r4, r5, lr}
 8012bdc:	460d      	mov	r5, r1
 8012bde:	4604      	mov	r4, r0
 8012be0:	7801      	ldrb	r1, [r0, #0]
 8012be2:	4628      	mov	r0, r5
 8012be4:	f000 fa16 	bl	8013014 <ucdr_serialize_bool>
 8012be8:	7861      	ldrb	r1, [r4, #1]
 8012bea:	4628      	mov	r0, r5
 8012bec:	f000 fa12 	bl	8013014 <ucdr_serialize_bool>
 8012bf0:	78a1      	ldrb	r1, [r4, #2]
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f000 fa0e 	bl	8013014 <ucdr_serialize_bool>
 8012bf8:	78e1      	ldrb	r1, [r4, #3]
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f000 fa0a 	bl	8013014 <ucdr_serialize_bool>
 8012c00:	7921      	ldrb	r1, [r4, #4]
 8012c02:	4628      	mov	r0, r5
 8012c04:	f000 fa06 	bl	8013014 <ucdr_serialize_bool>
 8012c08:	7961      	ldrb	r1, [r4, #5]
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c10:	f000 ba00 	b.w	8013014 <ucdr_serialize_bool>
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop

08012c18 <max_serialized_size_actuator_custom_msgs__msg__HandAirStatus>:
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	2501      	movs	r5, #1
 8012c1c:	460c      	mov	r4, r1
 8012c1e:	1967      	adds	r7, r4, r5
 8012c20:	4629      	mov	r1, r5
 8012c22:	7005      	strb	r5, [r0, #0]
 8012c24:	4620      	mov	r0, r4
 8012c26:	f001 fdbf 	bl	80147a8 <ucdr_alignment>
 8012c2a:	4407      	add	r7, r0
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	1b2c      	subs	r4, r5, r4
 8012c30:	4638      	mov	r0, r7
 8012c32:	f001 fdb9 	bl	80147a8 <ucdr_alignment>
 8012c36:	1946      	adds	r6, r0, r5
 8012c38:	4629      	mov	r1, r5
 8012c3a:	4437      	add	r7, r6
 8012c3c:	4638      	mov	r0, r7
 8012c3e:	f001 fdb3 	bl	80147a8 <ucdr_alignment>
 8012c42:	1946      	adds	r6, r0, r5
 8012c44:	4629      	mov	r1, r5
 8012c46:	443e      	add	r6, r7
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f001 fdad 	bl	80147a8 <ucdr_alignment>
 8012c4e:	4428      	add	r0, r5
 8012c50:	4629      	mov	r1, r5
 8012c52:	4406      	add	r6, r0
 8012c54:	4630      	mov	r0, r6
 8012c56:	f001 fda7 	bl	80147a8 <ucdr_alignment>
 8012c5a:	4428      	add	r0, r5
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	4406      	add	r6, r0
 8012c60:	4630      	mov	r0, r6
 8012c62:	f001 fda1 	bl	80147a8 <ucdr_alignment>
 8012c66:	4420      	add	r0, r4
 8012c68:	4430      	add	r0, r6
 8012c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c6c <_HandAirStatus__max_serialized_size>:
 8012c6c:	b500      	push	{lr}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	2100      	movs	r1, #0
 8012c72:	f10d 0007 	add.w	r0, sp, #7
 8012c76:	f7ff ffcf 	bl	8012c18 <max_serialized_size_actuator_custom_msgs__msg__HandAirStatus>
 8012c7a:	b003      	add	sp, #12
 8012c7c:	f85d fb04 	ldr.w	pc, [sp], #4

08012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus>:
 8012c80:	4800      	ldr	r0, [pc, #0]	; (8012c84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_custom_msgs__msg__HandAirStatus+0x4>)
 8012c82:	4770      	bx	lr
 8012c84:	200003ac 	.word	0x200003ac

08012c88 <get_serialized_size_actuator_custom_msgs__msg__ShootAirStatus>:
 8012c88:	b1e0      	cbz	r0, 8012cc4 <get_serialized_size_actuator_custom_msgs__msg__ShootAirStatus+0x3c>
 8012c8a:	b570      	push	{r4, r5, r6, lr}
 8012c8c:	460d      	mov	r5, r1
 8012c8e:	2101      	movs	r1, #1
 8012c90:	4628      	mov	r0, r5
 8012c92:	f001 fd89 	bl	80147a8 <ucdr_alignment>
 8012c96:	1c6b      	adds	r3, r5, #1
 8012c98:	2101      	movs	r1, #1
 8012c9a:	f1c5 0501 	rsb	r5, r5, #1
 8012c9e:	181e      	adds	r6, r3, r0
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f001 fd81 	bl	80147a8 <ucdr_alignment>
 8012ca6:	2101      	movs	r1, #1
 8012ca8:	1844      	adds	r4, r0, r1
 8012caa:	4434      	add	r4, r6
 8012cac:	4620      	mov	r0, r4
 8012cae:	f001 fd7b 	bl	80147a8 <ucdr_alignment>
 8012cb2:	2101      	movs	r1, #1
 8012cb4:	4408      	add	r0, r1
 8012cb6:	4404      	add	r4, r0
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f001 fd75 	bl	80147a8 <ucdr_alignment>
 8012cbe:	4428      	add	r0, r5
 8012cc0:	4420      	add	r0, r4
 8012cc2:	bd70      	pop	{r4, r5, r6, pc}
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop

08012cc8 <_ShootAirStatus__cdr_deserialize>:
 8012cc8:	b538      	push	{r3, r4, r5, lr}
 8012cca:	460c      	mov	r4, r1
 8012ccc:	b181      	cbz	r1, 8012cf0 <_ShootAirStatus__cdr_deserialize+0x28>
 8012cce:	4605      	mov	r5, r0
 8012cd0:	f000 f9b6 	bl	8013040 <ucdr_deserialize_bool>
 8012cd4:	1c61      	adds	r1, r4, #1
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f000 f9b2 	bl	8013040 <ucdr_deserialize_bool>
 8012cdc:	1ca1      	adds	r1, r4, #2
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f000 f9ae 	bl	8013040 <ucdr_deserialize_bool>
 8012ce4:	1ce1      	adds	r1, r4, #3
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cec:	f000 b9a8 	b.w	8013040 <ucdr_deserialize_bool>
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	bd38      	pop	{r3, r4, r5, pc}

08012cf4 <_ShootAirStatus__cdr_serialize>:
 8012cf4:	b1a0      	cbz	r0, 8012d20 <_ShootAirStatus__cdr_serialize+0x2c>
 8012cf6:	b538      	push	{r3, r4, r5, lr}
 8012cf8:	460d      	mov	r5, r1
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	7801      	ldrb	r1, [r0, #0]
 8012cfe:	4628      	mov	r0, r5
 8012d00:	f000 f988 	bl	8013014 <ucdr_serialize_bool>
 8012d04:	7861      	ldrb	r1, [r4, #1]
 8012d06:	4628      	mov	r0, r5
 8012d08:	f000 f984 	bl	8013014 <ucdr_serialize_bool>
 8012d0c:	78a1      	ldrb	r1, [r4, #2]
 8012d0e:	4628      	mov	r0, r5
 8012d10:	f000 f980 	bl	8013014 <ucdr_serialize_bool>
 8012d14:	78e1      	ldrb	r1, [r4, #3]
 8012d16:	4628      	mov	r0, r5
 8012d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d1c:	f000 b97a 	b.w	8013014 <ucdr_serialize_bool>
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop

08012d24 <_ShootAirStatus__get_serialized_size>:
 8012d24:	b1c0      	cbz	r0, 8012d58 <_ShootAirStatus__get_serialized_size+0x34>
 8012d26:	2101      	movs	r1, #1
 8012d28:	2000      	movs	r0, #0
 8012d2a:	b538      	push	{r3, r4, r5, lr}
 8012d2c:	f001 fd3c 	bl	80147a8 <ucdr_alignment>
 8012d30:	2101      	movs	r1, #1
 8012d32:	1845      	adds	r5, r0, r1
 8012d34:	4628      	mov	r0, r5
 8012d36:	f001 fd37 	bl	80147a8 <ucdr_alignment>
 8012d3a:	2101      	movs	r1, #1
 8012d3c:	1844      	adds	r4, r0, r1
 8012d3e:	442c      	add	r4, r5
 8012d40:	4620      	mov	r0, r4
 8012d42:	f001 fd31 	bl	80147a8 <ucdr_alignment>
 8012d46:	2101      	movs	r1, #1
 8012d48:	4408      	add	r0, r1
 8012d4a:	4404      	add	r4, r0
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f001 fd2b 	bl	80147a8 <ucdr_alignment>
 8012d52:	3001      	adds	r0, #1
 8012d54:	4420      	add	r0, r4
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop

08012d5c <_ShootAirStatus__max_serialized_size>:
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	2101      	movs	r1, #1
 8012d60:	2000      	movs	r0, #0
 8012d62:	f001 fd21 	bl	80147a8 <ucdr_alignment>
 8012d66:	2101      	movs	r1, #1
 8012d68:	1845      	adds	r5, r0, r1
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	f001 fd1c 	bl	80147a8 <ucdr_alignment>
 8012d70:	2101      	movs	r1, #1
 8012d72:	1844      	adds	r4, r0, r1
 8012d74:	442c      	add	r4, r5
 8012d76:	4620      	mov	r0, r4
 8012d78:	f001 fd16 	bl	80147a8 <ucdr_alignment>
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	4408      	add	r0, r1
 8012d80:	4404      	add	r4, r0
 8012d82:	4620      	mov	r0, r4
 8012d84:	f001 fd10 	bl	80147a8 <ucdr_alignment>
 8012d88:	3001      	adds	r0, #1
 8012d8a:	4420      	add	r0, r4
 8012d8c:	bd38      	pop	{r3, r4, r5, pc}
 8012d8e:	bf00      	nop

08012d90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus>:
 8012d90:	4800      	ldr	r0, [pc, #0]	; (8012d94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_custom_msgs__msg__ShootAirStatus+0x4>)
 8012d92:	4770      	bx	lr
 8012d94:	200003d4 	.word	0x200003d4

08012d98 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012d98:	4b04      	ldr	r3, [pc, #16]	; (8012dac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	b10a      	cbz	r2, 8012da2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8012d9e:	4803      	ldr	r0, [pc, #12]	; (8012dac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8012da0:	4770      	bx	lr
 8012da2:	4a03      	ldr	r2, [pc, #12]	; (8012db0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8012da4:	4801      	ldr	r0, [pc, #4]	; (8012dac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8012da6:	6812      	ldr	r2, [r2, #0]
 8012da8:	601a      	str	r2, [r3, #0]
 8012daa:	4770      	bx	lr
 8012dac:	20000404 	.word	0x20000404
 8012db0:	200005b8 	.word	0x200005b8

08012db4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012db4:	4a02      	ldr	r2, [pc, #8]	; (8012dc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8012db6:	4b03      	ldr	r3, [pc, #12]	; (8012dc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8012db8:	6812      	ldr	r2, [r2, #0]
 8012dba:	601a      	str	r2, [r3, #0]
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	200005b8 	.word	0x200005b8
 8012dc4:	20000404 	.word	0x20000404

08012dc8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8012dc8:	f005 b88e 	b.w	8017ee8 <geometry_msgs__msg__Twist__init>

08012dcc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8012dcc:	f005 b8b0 	b.w	8017f30 <geometry_msgs__msg__Twist__fini>

08012dd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	4c08      	ldr	r4, [pc, #32]	; (8012df4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8012dd4:	f000 f818 	bl	8012e08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012dd8:	60e0      	str	r0, [r4, #12]
 8012dda:	f000 f815 	bl	8012e08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012dde:	4b06      	ldr	r3, [pc, #24]	; (8012df8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8012de0:	64a0      	str	r0, [r4, #72]	; 0x48
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	b10a      	cbz	r2, 8012dea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8012de6:	4804      	ldr	r0, [pc, #16]	; (8012df8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8012de8:	bd10      	pop	{r4, pc}
 8012dea:	4a04      	ldr	r2, [pc, #16]	; (8012dfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8012dec:	4802      	ldr	r0, [pc, #8]	; (8012df8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8012dee:	6812      	ldr	r2, [r2, #0]
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	bd10      	pop	{r4, pc}
 8012df4:	20000410 	.word	0x20000410
 8012df8:	20000488 	.word	0x20000488
 8012dfc:	200005bc 	.word	0x200005bc

08012e00 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8012e00:	f005 b8a2 	b.w	8017f48 <geometry_msgs__msg__Vector3__init>

08012e04 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8012e04:	f005 b8a4 	b.w	8017f50 <geometry_msgs__msg__Vector3__fini>

08012e08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8012e08:	4b04      	ldr	r3, [pc, #16]	; (8012e1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012e0a:	681a      	ldr	r2, [r3, #0]
 8012e0c:	b10a      	cbz	r2, 8012e12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8012e0e:	4803      	ldr	r0, [pc, #12]	; (8012e1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012e10:	4770      	bx	lr
 8012e12:	4a03      	ldr	r2, [pc, #12]	; (8012e20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8012e14:	4801      	ldr	r0, [pc, #4]	; (8012e1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012e16:	6812      	ldr	r2, [r2, #0]
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	4770      	bx	lr
 8012e1c:	20000548 	.word	0x20000548
 8012e20:	200005bc 	.word	0x200005bc

08012e24 <get_serialized_size_geometry_msgs__msg__Twist>:
 8012e24:	b538      	push	{r3, r4, r5, lr}
 8012e26:	4604      	mov	r4, r0
 8012e28:	b150      	cbz	r0, 8012e40 <get_serialized_size_geometry_msgs__msg__Twist+0x1c>
 8012e2a:	460d      	mov	r5, r1
 8012e2c:	f000 f866 	bl	8012efc <get_serialized_size_geometry_msgs__msg__Vector3>
 8012e30:	4603      	mov	r3, r0
 8012e32:	f104 0018 	add.w	r0, r4, #24
 8012e36:	461c      	mov	r4, r3
 8012e38:	18e9      	adds	r1, r5, r3
 8012e3a:	f000 f85f 	bl	8012efc <get_serialized_size_geometry_msgs__msg__Vector3>
 8012e3e:	4420      	add	r0, r4
 8012e40:	bd38      	pop	{r3, r4, r5, pc}
 8012e42:	bf00      	nop

08012e44 <_Twist__cdr_deserialize>:
 8012e44:	b570      	push	{r4, r5, r6, lr}
 8012e46:	460c      	mov	r4, r1
 8012e48:	b199      	cbz	r1, 8012e72 <_Twist__cdr_deserialize+0x2e>
 8012e4a:	4605      	mov	r5, r0
 8012e4c:	f000 f8de 	bl	801300c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012e50:	4603      	mov	r3, r0
 8012e52:	4621      	mov	r1, r4
 8012e54:	4628      	mov	r0, r5
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	4798      	blx	r3
 8012e5c:	f000 f8d6 	bl	801300c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012e60:	4603      	mov	r3, r0
 8012e62:	f104 0118 	add.w	r1, r4, #24
 8012e66:	4628      	mov	r0, r5
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	4718      	bx	r3
 8012e72:	4608      	mov	r0, r1
 8012e74:	bd70      	pop	{r4, r5, r6, pc}
 8012e76:	bf00      	nop

08012e78 <_Twist__cdr_serialize>:
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	9101      	str	r1, [sp, #4]
 8012e7e:	b1a0      	cbz	r0, 8012eaa <_Twist__cdr_serialize+0x32>
 8012e80:	4604      	mov	r4, r0
 8012e82:	f000 f8c3 	bl	801300c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012e86:	4603      	mov	r3, r0
 8012e88:	9901      	ldr	r1, [sp, #4]
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	689b      	ldr	r3, [r3, #8]
 8012e90:	4798      	blx	r3
 8012e92:	f000 f8bb 	bl	801300c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012e96:	4603      	mov	r3, r0
 8012e98:	9901      	ldr	r1, [sp, #4]
 8012e9a:	f104 0018 	add.w	r0, r4, #24
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	b002      	add	sp, #8
 8012ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ea8:	4718      	bx	r3
 8012eaa:	b002      	add	sp, #8
 8012eac:	bd10      	pop	{r4, pc}
 8012eae:	bf00      	nop

08012eb0 <_Twist__get_serialized_size>:
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	b148      	cbz	r0, 8012eca <_Twist__get_serialized_size+0x1a>
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	f000 f820 	bl	8012efc <get_serialized_size_geometry_msgs__msg__Vector3>
 8012ebc:	4601      	mov	r1, r0
 8012ebe:	f104 0018 	add.w	r0, r4, #24
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	f000 f81a 	bl	8012efc <get_serialized_size_geometry_msgs__msg__Vector3>
 8012ec8:	4420      	add	r0, r4
 8012eca:	bd10      	pop	{r4, pc}

08012ecc <_Twist__max_serialized_size>:
 8012ecc:	b510      	push	{r4, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	f10d 0007 	add.w	r0, sp, #7
 8012ed8:	f88d 3007 	strb.w	r3, [sp, #7]
 8012edc:	f000 f87c 	bl	8012fd8 <max_serialized_size_geometry_msgs__msg__Vector3>
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	f10d 0007 	add.w	r0, sp, #7
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	f000 f876 	bl	8012fd8 <max_serialized_size_geometry_msgs__msg__Vector3>
 8012eec:	4420      	add	r0, r4
 8012eee:	b002      	add	sp, #8
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	bf00      	nop

08012ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012ef4:	4800      	ldr	r0, [pc, #0]	; (8012ef8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8012ef6:	4770      	bx	lr
 8012ef8:	20000554 	.word	0x20000554

08012efc <get_serialized_size_geometry_msgs__msg__Vector3>:
 8012efc:	b1b8      	cbz	r0, 8012f2e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8012efe:	b538      	push	{r3, r4, r5, lr}
 8012f00:	460d      	mov	r5, r1
 8012f02:	2108      	movs	r1, #8
 8012f04:	4628      	mov	r0, r5
 8012f06:	f001 fc4f 	bl	80147a8 <ucdr_alignment>
 8012f0a:	f105 0308 	add.w	r3, r5, #8
 8012f0e:	2108      	movs	r1, #8
 8012f10:	f1c5 0508 	rsb	r5, r5, #8
 8012f14:	181c      	adds	r4, r3, r0
 8012f16:	4620      	mov	r0, r4
 8012f18:	f001 fc46 	bl	80147a8 <ucdr_alignment>
 8012f1c:	2108      	movs	r1, #8
 8012f1e:	4408      	add	r0, r1
 8012f20:	4404      	add	r4, r0
 8012f22:	4620      	mov	r0, r4
 8012f24:	f001 fc40 	bl	80147a8 <ucdr_alignment>
 8012f28:	4428      	add	r0, r5
 8012f2a:	4420      	add	r0, r4
 8012f2c:	bd38      	pop	{r3, r4, r5, pc}
 8012f2e:	4770      	bx	lr

08012f30 <_Vector3__cdr_deserialize>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	460c      	mov	r4, r1
 8012f34:	b171      	cbz	r1, 8012f54 <_Vector3__cdr_deserialize+0x24>
 8012f36:	4605      	mov	r5, r0
 8012f38:	f001 fb18 	bl	801456c <ucdr_deserialize_double>
 8012f3c:	f104 0108 	add.w	r1, r4, #8
 8012f40:	4628      	mov	r0, r5
 8012f42:	f001 fb13 	bl	801456c <ucdr_deserialize_double>
 8012f46:	f104 0110 	add.w	r1, r4, #16
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f50:	f001 bb0c 	b.w	801456c <ucdr_deserialize_double>
 8012f54:	4608      	mov	r0, r1
 8012f56:	bd38      	pop	{r3, r4, r5, pc}

08012f58 <_Vector3__cdr_serialize>:
 8012f58:	b198      	cbz	r0, 8012f82 <_Vector3__cdr_serialize+0x2a>
 8012f5a:	b538      	push	{r3, r4, r5, lr}
 8012f5c:	460d      	mov	r5, r1
 8012f5e:	4604      	mov	r4, r0
 8012f60:	ed90 0b00 	vldr	d0, [r0]
 8012f64:	4608      	mov	r0, r1
 8012f66:	f001 fa31 	bl	80143cc <ucdr_serialize_double>
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	ed94 0b02 	vldr	d0, [r4, #8]
 8012f70:	f001 fa2c 	bl	80143cc <ucdr_serialize_double>
 8012f74:	4628      	mov	r0, r5
 8012f76:	ed94 0b04 	vldr	d0, [r4, #16]
 8012f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f7e:	f001 ba25 	b.w	80143cc <ucdr_serialize_double>
 8012f82:	4770      	bx	lr

08012f84 <_Vector3__get_serialized_size>:
 8012f84:	b190      	cbz	r0, 8012fac <_Vector3__get_serialized_size+0x28>
 8012f86:	2108      	movs	r1, #8
 8012f88:	2000      	movs	r0, #0
 8012f8a:	b510      	push	{r4, lr}
 8012f8c:	f001 fc0c 	bl	80147a8 <ucdr_alignment>
 8012f90:	2108      	movs	r1, #8
 8012f92:	1844      	adds	r4, r0, r1
 8012f94:	4620      	mov	r0, r4
 8012f96:	f001 fc07 	bl	80147a8 <ucdr_alignment>
 8012f9a:	2108      	movs	r1, #8
 8012f9c:	4408      	add	r0, r1
 8012f9e:	4404      	add	r4, r0
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f001 fc01 	bl	80147a8 <ucdr_alignment>
 8012fa6:	3008      	adds	r0, #8
 8012fa8:	4420      	add	r0, r4
 8012faa:	bd10      	pop	{r4, pc}
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop

08012fb0 <_Vector3__max_serialized_size>:
 8012fb0:	b538      	push	{r3, r4, r5, lr}
 8012fb2:	2108      	movs	r1, #8
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	f001 fbf7 	bl	80147a8 <ucdr_alignment>
 8012fba:	2108      	movs	r1, #8
 8012fbc:	1845      	adds	r5, r0, r1
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f001 fbf2 	bl	80147a8 <ucdr_alignment>
 8012fc4:	2108      	movs	r1, #8
 8012fc6:	1844      	adds	r4, r0, r1
 8012fc8:	442c      	add	r4, r5
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f001 fbec 	bl	80147a8 <ucdr_alignment>
 8012fd0:	3008      	adds	r0, #8
 8012fd2:	4420      	add	r0, r4
 8012fd4:	bd38      	pop	{r3, r4, r5, pc}
 8012fd6:	bf00      	nop

08012fd8 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	460c      	mov	r4, r1
 8012fdc:	2301      	movs	r3, #1
 8012fde:	2108      	movs	r1, #8
 8012fe0:	f104 0508 	add.w	r5, r4, #8
 8012fe4:	7003      	strb	r3, [r0, #0]
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f1c4 0408 	rsb	r4, r4, #8
 8012fec:	f001 fbdc 	bl	80147a8 <ucdr_alignment>
 8012ff0:	1946      	adds	r6, r0, r5
 8012ff2:	2108      	movs	r1, #8
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f001 fbd7 	bl	80147a8 <ucdr_alignment>
 8012ffa:	2108      	movs	r1, #8
 8012ffc:	1845      	adds	r5, r0, r1
 8012ffe:	4435      	add	r5, r6
 8013000:	4628      	mov	r0, r5
 8013002:	f001 fbd1 	bl	80147a8 <ucdr_alignment>
 8013006:	4420      	add	r0, r4
 8013008:	4428      	add	r0, r5
 801300a:	bd70      	pop	{r4, r5, r6, pc}

0801300c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 801300c:	4800      	ldr	r0, [pc, #0]	; (8013010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 801300e:	4770      	bx	lr
 8013010:	2000057c 	.word	0x2000057c

08013014 <ucdr_serialize_bool>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	460d      	mov	r5, r1
 8013018:	2101      	movs	r1, #1
 801301a:	4604      	mov	r4, r0
 801301c:	f001 fb78 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013020:	b148      	cbz	r0, 8013036 <ucdr_serialize_bool+0x22>
 8013022:	68a3      	ldr	r3, [r4, #8]
 8013024:	2101      	movs	r1, #1
 8013026:	701d      	strb	r5, [r3, #0]
 8013028:	68a2      	ldr	r2, [r4, #8]
 801302a:	6923      	ldr	r3, [r4, #16]
 801302c:	440a      	add	r2, r1
 801302e:	7561      	strb	r1, [r4, #21]
 8013030:	440b      	add	r3, r1
 8013032:	60a2      	str	r2, [r4, #8]
 8013034:	6123      	str	r3, [r4, #16]
 8013036:	7da0      	ldrb	r0, [r4, #22]
 8013038:	f080 0001 	eor.w	r0, r0, #1
 801303c:	bd38      	pop	{r3, r4, r5, pc}
 801303e:	bf00      	nop

08013040 <ucdr_deserialize_bool>:
 8013040:	b538      	push	{r3, r4, r5, lr}
 8013042:	460d      	mov	r5, r1
 8013044:	2101      	movs	r1, #1
 8013046:	4604      	mov	r4, r0
 8013048:	f001 fb62 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801304c:	b160      	cbz	r0, 8013068 <ucdr_deserialize_bool+0x28>
 801304e:	68a2      	ldr	r2, [r4, #8]
 8013050:	2101      	movs	r1, #1
 8013052:	6923      	ldr	r3, [r4, #16]
 8013054:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013058:	440b      	add	r3, r1
 801305a:	3800      	subs	r0, #0
 801305c:	bf18      	it	ne
 801305e:	2001      	movne	r0, #1
 8013060:	7028      	strb	r0, [r5, #0]
 8013062:	60a2      	str	r2, [r4, #8]
 8013064:	6123      	str	r3, [r4, #16]
 8013066:	7561      	strb	r1, [r4, #21]
 8013068:	7da0      	ldrb	r0, [r4, #22]
 801306a:	f080 0001 	eor.w	r0, r0, #1
 801306e:	bd38      	pop	{r3, r4, r5, pc}

08013070 <ucdr_serialize_uint8_t>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	460d      	mov	r5, r1
 8013074:	2101      	movs	r1, #1
 8013076:	4604      	mov	r4, r0
 8013078:	f001 fb4a 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801307c:	b148      	cbz	r0, 8013092 <ucdr_serialize_uint8_t+0x22>
 801307e:	68a3      	ldr	r3, [r4, #8]
 8013080:	2101      	movs	r1, #1
 8013082:	701d      	strb	r5, [r3, #0]
 8013084:	68a2      	ldr	r2, [r4, #8]
 8013086:	6923      	ldr	r3, [r4, #16]
 8013088:	440a      	add	r2, r1
 801308a:	7561      	strb	r1, [r4, #21]
 801308c:	440b      	add	r3, r1
 801308e:	60a2      	str	r2, [r4, #8]
 8013090:	6123      	str	r3, [r4, #16]
 8013092:	7da0      	ldrb	r0, [r4, #22]
 8013094:	f080 0001 	eor.w	r0, r0, #1
 8013098:	bd38      	pop	{r3, r4, r5, pc}
 801309a:	bf00      	nop

0801309c <ucdr_deserialize_uint8_t>:
 801309c:	b538      	push	{r3, r4, r5, lr}
 801309e:	460d      	mov	r5, r1
 80130a0:	2101      	movs	r1, #1
 80130a2:	4604      	mov	r4, r0
 80130a4:	f001 fb34 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80130a8:	b150      	cbz	r0, 80130c0 <ucdr_deserialize_uint8_t+0x24>
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	2101      	movs	r1, #1
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	702b      	strb	r3, [r5, #0]
 80130b2:	68a2      	ldr	r2, [r4, #8]
 80130b4:	6923      	ldr	r3, [r4, #16]
 80130b6:	440a      	add	r2, r1
 80130b8:	7561      	strb	r1, [r4, #21]
 80130ba:	440b      	add	r3, r1
 80130bc:	60a2      	str	r2, [r4, #8]
 80130be:	6123      	str	r3, [r4, #16]
 80130c0:	7da0      	ldrb	r0, [r4, #22]
 80130c2:	f080 0001 	eor.w	r0, r0, #1
 80130c6:	bd38      	pop	{r3, r4, r5, pc}

080130c8 <ucdr_serialize_uint16_t>:
 80130c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130cc:	460b      	mov	r3, r1
 80130ce:	b082      	sub	sp, #8
 80130d0:	4604      	mov	r4, r0
 80130d2:	2102      	movs	r1, #2
 80130d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80130d8:	f001 fb6e 	bl	80147b8 <ucdr_buffer_alignment>
 80130dc:	4601      	mov	r1, r0
 80130de:	4620      	mov	r0, r4
 80130e0:	7d67      	ldrb	r7, [r4, #21]
 80130e2:	f001 fbb1 	bl	8014848 <ucdr_advance_buffer>
 80130e6:	2102      	movs	r1, #2
 80130e8:	4620      	mov	r0, r4
 80130ea:	f001 fb05 	bl	80146f8 <ucdr_check_buffer_available_for>
 80130ee:	bb78      	cbnz	r0, 8013150 <ucdr_serialize_uint16_t+0x88>
 80130f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80130f4:	42ab      	cmp	r3, r5
 80130f6:	d926      	bls.n	8013146 <ucdr_serialize_uint16_t+0x7e>
 80130f8:	1b5e      	subs	r6, r3, r5
 80130fa:	60a3      	str	r3, [r4, #8]
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	4620      	mov	r0, r4
 8013100:	f1c6 0802 	rsb	r8, r6, #2
 8013104:	4433      	add	r3, r6
 8013106:	4641      	mov	r1, r8
 8013108:	6123      	str	r3, [r4, #16]
 801310a:	f001 fb01 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801310e:	2800      	cmp	r0, #0
 8013110:	d03b      	beq.n	801318a <ucdr_serialize_uint16_t+0xc2>
 8013112:	7d23      	ldrb	r3, [r4, #20]
 8013114:	2b01      	cmp	r3, #1
 8013116:	d04a      	beq.n	80131ae <ucdr_serialize_uint16_t+0xe6>
 8013118:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801311c:	702b      	strb	r3, [r5, #0]
 801311e:	2e00      	cmp	r6, #0
 8013120:	d040      	beq.n	80131a4 <ucdr_serialize_uint16_t+0xdc>
 8013122:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013126:	706b      	strb	r3, [r5, #1]
 8013128:	6923      	ldr	r3, [r4, #16]
 801312a:	2102      	movs	r1, #2
 801312c:	68a2      	ldr	r2, [r4, #8]
 801312e:	3302      	adds	r3, #2
 8013130:	7da0      	ldrb	r0, [r4, #22]
 8013132:	4442      	add	r2, r8
 8013134:	7561      	strb	r1, [r4, #21]
 8013136:	1b9e      	subs	r6, r3, r6
 8013138:	f080 0001 	eor.w	r0, r0, #1
 801313c:	60a2      	str	r2, [r4, #8]
 801313e:	6126      	str	r6, [r4, #16]
 8013140:	b002      	add	sp, #8
 8013142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013146:	2102      	movs	r1, #2
 8013148:	4620      	mov	r0, r4
 801314a:	f001 fae1 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801314e:	b190      	cbz	r0, 8013176 <ucdr_serialize_uint16_t+0xae>
 8013150:	7d23      	ldrb	r3, [r4, #20]
 8013152:	2b01      	cmp	r3, #1
 8013154:	68a3      	ldr	r3, [r4, #8]
 8013156:	d014      	beq.n	8013182 <ucdr_serialize_uint16_t+0xba>
 8013158:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801315c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013160:	7019      	strb	r1, [r3, #0]
 8013162:	68a3      	ldr	r3, [r4, #8]
 8013164:	705a      	strb	r2, [r3, #1]
 8013166:	2102      	movs	r1, #2
 8013168:	68a2      	ldr	r2, [r4, #8]
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	440a      	add	r2, r1
 801316e:	7561      	strb	r1, [r4, #21]
 8013170:	440b      	add	r3, r1
 8013172:	60a2      	str	r2, [r4, #8]
 8013174:	6123      	str	r3, [r4, #16]
 8013176:	7da0      	ldrb	r0, [r4, #22]
 8013178:	f080 0001 	eor.w	r0, r0, #1
 801317c:	b002      	add	sp, #8
 801317e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013182:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013186:	801a      	strh	r2, [r3, #0]
 8013188:	e7ed      	b.n	8013166 <ucdr_serialize_uint16_t+0x9e>
 801318a:	68a2      	ldr	r2, [r4, #8]
 801318c:	6923      	ldr	r3, [r4, #16]
 801318e:	7da0      	ldrb	r0, [r4, #22]
 8013190:	1b92      	subs	r2, r2, r6
 8013192:	1b9b      	subs	r3, r3, r6
 8013194:	7567      	strb	r7, [r4, #21]
 8013196:	f080 0001 	eor.w	r0, r0, #1
 801319a:	60a2      	str	r2, [r4, #8]
 801319c:	6123      	str	r3, [r4, #16]
 801319e:	b002      	add	sp, #8
 80131a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a4:	68a3      	ldr	r3, [r4, #8]
 80131a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131aa:	701a      	strb	r2, [r3, #0]
 80131ac:	e7bc      	b.n	8013128 <ucdr_serialize_uint16_t+0x60>
 80131ae:	4628      	mov	r0, r5
 80131b0:	f10d 0506 	add.w	r5, sp, #6
 80131b4:	4632      	mov	r2, r6
 80131b6:	4629      	mov	r1, r5
 80131b8:	f00d ffef 	bl	802119a <memcpy>
 80131bc:	4642      	mov	r2, r8
 80131be:	19a9      	adds	r1, r5, r6
 80131c0:	68a0      	ldr	r0, [r4, #8]
 80131c2:	f00d ffea 	bl	802119a <memcpy>
 80131c6:	e7af      	b.n	8013128 <ucdr_serialize_uint16_t+0x60>

080131c8 <ucdr_serialize_endian_uint16_t>:
 80131c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131cc:	4604      	mov	r4, r0
 80131ce:	b083      	sub	sp, #12
 80131d0:	460d      	mov	r5, r1
 80131d2:	2102      	movs	r1, #2
 80131d4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80131d8:	f001 faee 	bl	80147b8 <ucdr_buffer_alignment>
 80131dc:	4601      	mov	r1, r0
 80131de:	4620      	mov	r0, r4
 80131e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80131e4:	f001 fb30 	bl	8014848 <ucdr_advance_buffer>
 80131e8:	2102      	movs	r1, #2
 80131ea:	4620      	mov	r0, r4
 80131ec:	f001 fa84 	bl	80146f8 <ucdr_check_buffer_available_for>
 80131f0:	bb70      	cbnz	r0, 8013250 <ucdr_serialize_endian_uint16_t+0x88>
 80131f2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80131f6:	42be      	cmp	r6, r7
 80131f8:	d925      	bls.n	8013246 <ucdr_serialize_endian_uint16_t+0x7e>
 80131fa:	6923      	ldr	r3, [r4, #16]
 80131fc:	4620      	mov	r0, r4
 80131fe:	60a6      	str	r6, [r4, #8]
 8013200:	1bf6      	subs	r6, r6, r7
 8013202:	4433      	add	r3, r6
 8013204:	f1c6 0902 	rsb	r9, r6, #2
 8013208:	6123      	str	r3, [r4, #16]
 801320a:	4649      	mov	r1, r9
 801320c:	f001 fa80 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013210:	2800      	cmp	r0, #0
 8013212:	d039      	beq.n	8013288 <ucdr_serialize_endian_uint16_t+0xc0>
 8013214:	2d01      	cmp	r5, #1
 8013216:	d04a      	beq.n	80132ae <ucdr_serialize_endian_uint16_t+0xe6>
 8013218:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801321c:	703b      	strb	r3, [r7, #0]
 801321e:	2e00      	cmp	r6, #0
 8013220:	d040      	beq.n	80132a4 <ucdr_serialize_endian_uint16_t+0xdc>
 8013222:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013226:	707b      	strb	r3, [r7, #1]
 8013228:	6923      	ldr	r3, [r4, #16]
 801322a:	2102      	movs	r1, #2
 801322c:	68a2      	ldr	r2, [r4, #8]
 801322e:	7da0      	ldrb	r0, [r4, #22]
 8013230:	3302      	adds	r3, #2
 8013232:	444a      	add	r2, r9
 8013234:	7561      	strb	r1, [r4, #21]
 8013236:	1b9b      	subs	r3, r3, r6
 8013238:	f080 0001 	eor.w	r0, r0, #1
 801323c:	60a2      	str	r2, [r4, #8]
 801323e:	6123      	str	r3, [r4, #16]
 8013240:	b003      	add	sp, #12
 8013242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013246:	2102      	movs	r1, #2
 8013248:	4620      	mov	r0, r4
 801324a:	f001 fa61 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801324e:	b188      	cbz	r0, 8013274 <ucdr_serialize_endian_uint16_t+0xac>
 8013250:	2d01      	cmp	r5, #1
 8013252:	68a3      	ldr	r3, [r4, #8]
 8013254:	d014      	beq.n	8013280 <ucdr_serialize_endian_uint16_t+0xb8>
 8013256:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801325a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801325e:	7019      	strb	r1, [r3, #0]
 8013260:	68a3      	ldr	r3, [r4, #8]
 8013262:	705a      	strb	r2, [r3, #1]
 8013264:	2102      	movs	r1, #2
 8013266:	68a2      	ldr	r2, [r4, #8]
 8013268:	6923      	ldr	r3, [r4, #16]
 801326a:	440a      	add	r2, r1
 801326c:	7561      	strb	r1, [r4, #21]
 801326e:	440b      	add	r3, r1
 8013270:	60a2      	str	r2, [r4, #8]
 8013272:	6123      	str	r3, [r4, #16]
 8013274:	7da0      	ldrb	r0, [r4, #22]
 8013276:	f080 0001 	eor.w	r0, r0, #1
 801327a:	b003      	add	sp, #12
 801327c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013280:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013284:	801a      	strh	r2, [r3, #0]
 8013286:	e7ed      	b.n	8013264 <ucdr_serialize_endian_uint16_t+0x9c>
 8013288:	68a2      	ldr	r2, [r4, #8]
 801328a:	6923      	ldr	r3, [r4, #16]
 801328c:	7da0      	ldrb	r0, [r4, #22]
 801328e:	1b92      	subs	r2, r2, r6
 8013290:	1b9b      	subs	r3, r3, r6
 8013292:	f884 8015 	strb.w	r8, [r4, #21]
 8013296:	f080 0001 	eor.w	r0, r0, #1
 801329a:	60a2      	str	r2, [r4, #8]
 801329c:	6123      	str	r3, [r4, #16]
 801329e:	b003      	add	sp, #12
 80132a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132a4:	68a3      	ldr	r3, [r4, #8]
 80132a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132aa:	701a      	strb	r2, [r3, #0]
 80132ac:	e7bc      	b.n	8013228 <ucdr_serialize_endian_uint16_t+0x60>
 80132ae:	f10d 0506 	add.w	r5, sp, #6
 80132b2:	4632      	mov	r2, r6
 80132b4:	4638      	mov	r0, r7
 80132b6:	4629      	mov	r1, r5
 80132b8:	f00d ff6f 	bl	802119a <memcpy>
 80132bc:	464a      	mov	r2, r9
 80132be:	19a9      	adds	r1, r5, r6
 80132c0:	68a0      	ldr	r0, [r4, #8]
 80132c2:	f00d ff6a 	bl	802119a <memcpy>
 80132c6:	e7af      	b.n	8013228 <ucdr_serialize_endian_uint16_t+0x60>

080132c8 <ucdr_deserialize_uint16_t>:
 80132c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132cc:	4604      	mov	r4, r0
 80132ce:	460d      	mov	r5, r1
 80132d0:	2102      	movs	r1, #2
 80132d2:	f001 fa71 	bl	80147b8 <ucdr_buffer_alignment>
 80132d6:	4601      	mov	r1, r0
 80132d8:	4620      	mov	r0, r4
 80132da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80132de:	f001 fab3 	bl	8014848 <ucdr_advance_buffer>
 80132e2:	2102      	movs	r1, #2
 80132e4:	4620      	mov	r0, r4
 80132e6:	f001 fa07 	bl	80146f8 <ucdr_check_buffer_available_for>
 80132ea:	bb60      	cbnz	r0, 8013346 <ucdr_deserialize_uint16_t+0x7e>
 80132ec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80132f0:	42be      	cmp	r6, r7
 80132f2:	d923      	bls.n	801333c <ucdr_deserialize_uint16_t+0x74>
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	4620      	mov	r0, r4
 80132f8:	60a6      	str	r6, [r4, #8]
 80132fa:	1bf6      	subs	r6, r6, r7
 80132fc:	4433      	add	r3, r6
 80132fe:	f1c6 0902 	rsb	r9, r6, #2
 8013302:	6123      	str	r3, [r4, #16]
 8013304:	4649      	mov	r1, r9
 8013306:	f001 fa03 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801330a:	2800      	cmp	r0, #0
 801330c:	d034      	beq.n	8013378 <ucdr_deserialize_uint16_t+0xb0>
 801330e:	7d23      	ldrb	r3, [r4, #20]
 8013310:	2b01      	cmp	r3, #1
 8013312:	d042      	beq.n	801339a <ucdr_deserialize_uint16_t+0xd2>
 8013314:	787b      	ldrb	r3, [r7, #1]
 8013316:	702b      	strb	r3, [r5, #0]
 8013318:	2e00      	cmp	r6, #0
 801331a:	d03a      	beq.n	8013392 <ucdr_deserialize_uint16_t+0xca>
 801331c:	783b      	ldrb	r3, [r7, #0]
 801331e:	706b      	strb	r3, [r5, #1]
 8013320:	6923      	ldr	r3, [r4, #16]
 8013322:	2102      	movs	r1, #2
 8013324:	68a2      	ldr	r2, [r4, #8]
 8013326:	3302      	adds	r3, #2
 8013328:	7da0      	ldrb	r0, [r4, #22]
 801332a:	444a      	add	r2, r9
 801332c:	7561      	strb	r1, [r4, #21]
 801332e:	1b9b      	subs	r3, r3, r6
 8013330:	f080 0001 	eor.w	r0, r0, #1
 8013334:	60a2      	str	r2, [r4, #8]
 8013336:	6123      	str	r3, [r4, #16]
 8013338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801333c:	2102      	movs	r1, #2
 801333e:	4620      	mov	r0, r4
 8013340:	f001 f9e6 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013344:	b180      	cbz	r0, 8013368 <ucdr_deserialize_uint16_t+0xa0>
 8013346:	7d23      	ldrb	r3, [r4, #20]
 8013348:	2b01      	cmp	r3, #1
 801334a:	68a3      	ldr	r3, [r4, #8]
 801334c:	d011      	beq.n	8013372 <ucdr_deserialize_uint16_t+0xaa>
 801334e:	785b      	ldrb	r3, [r3, #1]
 8013350:	702b      	strb	r3, [r5, #0]
 8013352:	68a3      	ldr	r3, [r4, #8]
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	706b      	strb	r3, [r5, #1]
 8013358:	2102      	movs	r1, #2
 801335a:	68a2      	ldr	r2, [r4, #8]
 801335c:	6923      	ldr	r3, [r4, #16]
 801335e:	440a      	add	r2, r1
 8013360:	7561      	strb	r1, [r4, #21]
 8013362:	440b      	add	r3, r1
 8013364:	60a2      	str	r2, [r4, #8]
 8013366:	6123      	str	r3, [r4, #16]
 8013368:	7da0      	ldrb	r0, [r4, #22]
 801336a:	f080 0001 	eor.w	r0, r0, #1
 801336e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013372:	881b      	ldrh	r3, [r3, #0]
 8013374:	802b      	strh	r3, [r5, #0]
 8013376:	e7ef      	b.n	8013358 <ucdr_deserialize_uint16_t+0x90>
 8013378:	68a2      	ldr	r2, [r4, #8]
 801337a:	6923      	ldr	r3, [r4, #16]
 801337c:	1b92      	subs	r2, r2, r6
 801337e:	7da0      	ldrb	r0, [r4, #22]
 8013380:	1b9b      	subs	r3, r3, r6
 8013382:	f884 8015 	strb.w	r8, [r4, #21]
 8013386:	f080 0001 	eor.w	r0, r0, #1
 801338a:	60a2      	str	r2, [r4, #8]
 801338c:	6123      	str	r3, [r4, #16]
 801338e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013392:	68a3      	ldr	r3, [r4, #8]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	706b      	strb	r3, [r5, #1]
 8013398:	e7c2      	b.n	8013320 <ucdr_deserialize_uint16_t+0x58>
 801339a:	4639      	mov	r1, r7
 801339c:	4632      	mov	r2, r6
 801339e:	4628      	mov	r0, r5
 80133a0:	f00d fefb 	bl	802119a <memcpy>
 80133a4:	464a      	mov	r2, r9
 80133a6:	19a8      	adds	r0, r5, r6
 80133a8:	68a1      	ldr	r1, [r4, #8]
 80133aa:	f00d fef6 	bl	802119a <memcpy>
 80133ae:	e7b7      	b.n	8013320 <ucdr_deserialize_uint16_t+0x58>

080133b0 <ucdr_deserialize_endian_uint16_t>:
 80133b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133b4:	4604      	mov	r4, r0
 80133b6:	460e      	mov	r6, r1
 80133b8:	2102      	movs	r1, #2
 80133ba:	4615      	mov	r5, r2
 80133bc:	f001 f9fc 	bl	80147b8 <ucdr_buffer_alignment>
 80133c0:	4601      	mov	r1, r0
 80133c2:	4620      	mov	r0, r4
 80133c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80133c8:	f001 fa3e 	bl	8014848 <ucdr_advance_buffer>
 80133cc:	2102      	movs	r1, #2
 80133ce:	4620      	mov	r0, r4
 80133d0:	f001 f992 	bl	80146f8 <ucdr_check_buffer_available_for>
 80133d4:	bb70      	cbnz	r0, 8013434 <ucdr_deserialize_endian_uint16_t+0x84>
 80133d6:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80133da:	454f      	cmp	r7, r9
 80133dc:	d925      	bls.n	801342a <ucdr_deserialize_endian_uint16_t+0x7a>
 80133de:	6923      	ldr	r3, [r4, #16]
 80133e0:	4620      	mov	r0, r4
 80133e2:	60a7      	str	r7, [r4, #8]
 80133e4:	eba7 0709 	sub.w	r7, r7, r9
 80133e8:	443b      	add	r3, r7
 80133ea:	f1c7 0a02 	rsb	sl, r7, #2
 80133ee:	6123      	str	r3, [r4, #16]
 80133f0:	4651      	mov	r1, sl
 80133f2:	f001 f98d 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	d034      	beq.n	8013464 <ucdr_deserialize_endian_uint16_t+0xb4>
 80133fa:	2e01      	cmp	r6, #1
 80133fc:	d043      	beq.n	8013486 <ucdr_deserialize_endian_uint16_t+0xd6>
 80133fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013402:	702b      	strb	r3, [r5, #0]
 8013404:	2f00      	cmp	r7, #0
 8013406:	d03a      	beq.n	801347e <ucdr_deserialize_endian_uint16_t+0xce>
 8013408:	f899 3000 	ldrb.w	r3, [r9]
 801340c:	706b      	strb	r3, [r5, #1]
 801340e:	6923      	ldr	r3, [r4, #16]
 8013410:	2102      	movs	r1, #2
 8013412:	68a2      	ldr	r2, [r4, #8]
 8013414:	3302      	adds	r3, #2
 8013416:	7da0      	ldrb	r0, [r4, #22]
 8013418:	4452      	add	r2, sl
 801341a:	7561      	strb	r1, [r4, #21]
 801341c:	1bdb      	subs	r3, r3, r7
 801341e:	f080 0001 	eor.w	r0, r0, #1
 8013422:	60a2      	str	r2, [r4, #8]
 8013424:	6123      	str	r3, [r4, #16]
 8013426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801342a:	2102      	movs	r1, #2
 801342c:	4620      	mov	r0, r4
 801342e:	f001 f96f 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013432:	b178      	cbz	r0, 8013454 <ucdr_deserialize_endian_uint16_t+0xa4>
 8013434:	2e01      	cmp	r6, #1
 8013436:	68a3      	ldr	r3, [r4, #8]
 8013438:	d011      	beq.n	801345e <ucdr_deserialize_endian_uint16_t+0xae>
 801343a:	785b      	ldrb	r3, [r3, #1]
 801343c:	702b      	strb	r3, [r5, #0]
 801343e:	68a3      	ldr	r3, [r4, #8]
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	706b      	strb	r3, [r5, #1]
 8013444:	2102      	movs	r1, #2
 8013446:	68a2      	ldr	r2, [r4, #8]
 8013448:	6923      	ldr	r3, [r4, #16]
 801344a:	440a      	add	r2, r1
 801344c:	7561      	strb	r1, [r4, #21]
 801344e:	440b      	add	r3, r1
 8013450:	60a2      	str	r2, [r4, #8]
 8013452:	6123      	str	r3, [r4, #16]
 8013454:	7da0      	ldrb	r0, [r4, #22]
 8013456:	f080 0001 	eor.w	r0, r0, #1
 801345a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801345e:	881b      	ldrh	r3, [r3, #0]
 8013460:	802b      	strh	r3, [r5, #0]
 8013462:	e7ef      	b.n	8013444 <ucdr_deserialize_endian_uint16_t+0x94>
 8013464:	68a2      	ldr	r2, [r4, #8]
 8013466:	6923      	ldr	r3, [r4, #16]
 8013468:	1bd2      	subs	r2, r2, r7
 801346a:	7da0      	ldrb	r0, [r4, #22]
 801346c:	1bdb      	subs	r3, r3, r7
 801346e:	f884 8015 	strb.w	r8, [r4, #21]
 8013472:	f080 0001 	eor.w	r0, r0, #1
 8013476:	60a2      	str	r2, [r4, #8]
 8013478:	6123      	str	r3, [r4, #16]
 801347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	706b      	strb	r3, [r5, #1]
 8013484:	e7c3      	b.n	801340e <ucdr_deserialize_endian_uint16_t+0x5e>
 8013486:	4649      	mov	r1, r9
 8013488:	463a      	mov	r2, r7
 801348a:	4628      	mov	r0, r5
 801348c:	f00d fe85 	bl	802119a <memcpy>
 8013490:	4652      	mov	r2, sl
 8013492:	19e8      	adds	r0, r5, r7
 8013494:	68a1      	ldr	r1, [r4, #8]
 8013496:	f00d fe80 	bl	802119a <memcpy>
 801349a:	e7b8      	b.n	801340e <ucdr_deserialize_endian_uint16_t+0x5e>

0801349c <ucdr_serialize_uint32_t>:
 801349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a0:	b082      	sub	sp, #8
 80134a2:	4604      	mov	r4, r0
 80134a4:	9101      	str	r1, [sp, #4]
 80134a6:	2104      	movs	r1, #4
 80134a8:	f001 f986 	bl	80147b8 <ucdr_buffer_alignment>
 80134ac:	4601      	mov	r1, r0
 80134ae:	4620      	mov	r0, r4
 80134b0:	7d67      	ldrb	r7, [r4, #21]
 80134b2:	f001 f9c9 	bl	8014848 <ucdr_advance_buffer>
 80134b6:	2104      	movs	r1, #4
 80134b8:	4620      	mov	r0, r4
 80134ba:	f001 f91d 	bl	80146f8 <ucdr_check_buffer_available_for>
 80134be:	2800      	cmp	r0, #0
 80134c0:	d139      	bne.n	8013536 <ucdr_serialize_uint32_t+0x9a>
 80134c2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80134c6:	42ab      	cmp	r3, r5
 80134c8:	d930      	bls.n	801352c <ucdr_serialize_uint32_t+0x90>
 80134ca:	1b5e      	subs	r6, r3, r5
 80134cc:	60a3      	str	r3, [r4, #8]
 80134ce:	6923      	ldr	r3, [r4, #16]
 80134d0:	4620      	mov	r0, r4
 80134d2:	f1c6 0804 	rsb	r8, r6, #4
 80134d6:	4433      	add	r3, r6
 80134d8:	4641      	mov	r1, r8
 80134da:	6123      	str	r3, [r4, #16]
 80134dc:	f001 f918 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d04c      	beq.n	801357e <ucdr_serialize_uint32_t+0xe2>
 80134e4:	7d23      	ldrb	r3, [r4, #20]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d063      	beq.n	80135b2 <ucdr_serialize_uint32_t+0x116>
 80134ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134ee:	702b      	strb	r3, [r5, #0]
 80134f0:	2e00      	cmp	r6, #0
 80134f2:	d051      	beq.n	8013598 <ucdr_serialize_uint32_t+0xfc>
 80134f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134f8:	2e01      	cmp	r6, #1
 80134fa:	706b      	strb	r3, [r5, #1]
 80134fc:	d050      	beq.n	80135a0 <ucdr_serialize_uint32_t+0x104>
 80134fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013502:	2e02      	cmp	r6, #2
 8013504:	70ab      	strb	r3, [r5, #2]
 8013506:	d04f      	beq.n	80135a8 <ucdr_serialize_uint32_t+0x10c>
 8013508:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801350c:	70eb      	strb	r3, [r5, #3]
 801350e:	6923      	ldr	r3, [r4, #16]
 8013510:	2104      	movs	r1, #4
 8013512:	68a2      	ldr	r2, [r4, #8]
 8013514:	3304      	adds	r3, #4
 8013516:	7da0      	ldrb	r0, [r4, #22]
 8013518:	4442      	add	r2, r8
 801351a:	7561      	strb	r1, [r4, #21]
 801351c:	1b9e      	subs	r6, r3, r6
 801351e:	f080 0001 	eor.w	r0, r0, #1
 8013522:	60a2      	str	r2, [r4, #8]
 8013524:	6126      	str	r6, [r4, #16]
 8013526:	b002      	add	sp, #8
 8013528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801352c:	2104      	movs	r1, #4
 801352e:	4620      	mov	r0, r4
 8013530:	f001 f8ee 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013534:	b1d0      	cbz	r0, 801356c <ucdr_serialize_uint32_t+0xd0>
 8013536:	7d23      	ldrb	r3, [r4, #20]
 8013538:	2b01      	cmp	r3, #1
 801353a:	68a3      	ldr	r3, [r4, #8]
 801353c:	d01c      	beq.n	8013578 <ucdr_serialize_uint32_t+0xdc>
 801353e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013542:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013546:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801354a:	7018      	strb	r0, [r3, #0]
 801354c:	68a3      	ldr	r3, [r4, #8]
 801354e:	705a      	strb	r2, [r3, #1]
 8013550:	68a3      	ldr	r3, [r4, #8]
 8013552:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013556:	7099      	strb	r1, [r3, #2]
 8013558:	68a3      	ldr	r3, [r4, #8]
 801355a:	70da      	strb	r2, [r3, #3]
 801355c:	2104      	movs	r1, #4
 801355e:	68a2      	ldr	r2, [r4, #8]
 8013560:	6923      	ldr	r3, [r4, #16]
 8013562:	440a      	add	r2, r1
 8013564:	7561      	strb	r1, [r4, #21]
 8013566:	440b      	add	r3, r1
 8013568:	60a2      	str	r2, [r4, #8]
 801356a:	6123      	str	r3, [r4, #16]
 801356c:	7da0      	ldrb	r0, [r4, #22]
 801356e:	f080 0001 	eor.w	r0, r0, #1
 8013572:	b002      	add	sp, #8
 8013574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013578:	9a01      	ldr	r2, [sp, #4]
 801357a:	601a      	str	r2, [r3, #0]
 801357c:	e7ee      	b.n	801355c <ucdr_serialize_uint32_t+0xc0>
 801357e:	68a2      	ldr	r2, [r4, #8]
 8013580:	6923      	ldr	r3, [r4, #16]
 8013582:	7da0      	ldrb	r0, [r4, #22]
 8013584:	1b92      	subs	r2, r2, r6
 8013586:	1b9b      	subs	r3, r3, r6
 8013588:	7567      	strb	r7, [r4, #21]
 801358a:	f080 0001 	eor.w	r0, r0, #1
 801358e:	60a2      	str	r2, [r4, #8]
 8013590:	6123      	str	r3, [r4, #16]
 8013592:	b002      	add	sp, #8
 8013594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013598:	68a3      	ldr	r3, [r4, #8]
 801359a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801359e:	701a      	strb	r2, [r3, #0]
 80135a0:	68a3      	ldr	r3, [r4, #8]
 80135a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80135a6:	701a      	strb	r2, [r3, #0]
 80135a8:	68a3      	ldr	r3, [r4, #8]
 80135aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80135ae:	701a      	strb	r2, [r3, #0]
 80135b0:	e7ad      	b.n	801350e <ucdr_serialize_uint32_t+0x72>
 80135b2:	4628      	mov	r0, r5
 80135b4:	ad01      	add	r5, sp, #4
 80135b6:	4632      	mov	r2, r6
 80135b8:	4629      	mov	r1, r5
 80135ba:	f00d fdee 	bl	802119a <memcpy>
 80135be:	4642      	mov	r2, r8
 80135c0:	19a9      	adds	r1, r5, r6
 80135c2:	68a0      	ldr	r0, [r4, #8]
 80135c4:	f00d fde9 	bl	802119a <memcpy>
 80135c8:	e7a1      	b.n	801350e <ucdr_serialize_uint32_t+0x72>
 80135ca:	bf00      	nop

080135cc <ucdr_serialize_endian_uint32_t>:
 80135cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135d0:	4604      	mov	r4, r0
 80135d2:	b083      	sub	sp, #12
 80135d4:	460d      	mov	r5, r1
 80135d6:	2104      	movs	r1, #4
 80135d8:	9201      	str	r2, [sp, #4]
 80135da:	f001 f8ed 	bl	80147b8 <ucdr_buffer_alignment>
 80135de:	4601      	mov	r1, r0
 80135e0:	4620      	mov	r0, r4
 80135e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80135e6:	f001 f92f 	bl	8014848 <ucdr_advance_buffer>
 80135ea:	2104      	movs	r1, #4
 80135ec:	4620      	mov	r0, r4
 80135ee:	f001 f883 	bl	80146f8 <ucdr_check_buffer_available_for>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d138      	bne.n	8013668 <ucdr_serialize_endian_uint32_t+0x9c>
 80135f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80135fa:	42b7      	cmp	r7, r6
 80135fc:	d92f      	bls.n	801365e <ucdr_serialize_endian_uint32_t+0x92>
 80135fe:	6923      	ldr	r3, [r4, #16]
 8013600:	4620      	mov	r0, r4
 8013602:	60a7      	str	r7, [r4, #8]
 8013604:	1bbf      	subs	r7, r7, r6
 8013606:	443b      	add	r3, r7
 8013608:	f1c7 0904 	rsb	r9, r7, #4
 801360c:	6123      	str	r3, [r4, #16]
 801360e:	4649      	mov	r1, r9
 8013610:	f001 f87e 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013614:	2800      	cmp	r0, #0
 8013616:	d04a      	beq.n	80136ae <ucdr_serialize_endian_uint32_t+0xe2>
 8013618:	2d01      	cmp	r5, #1
 801361a:	d063      	beq.n	80136e4 <ucdr_serialize_endian_uint32_t+0x118>
 801361c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013620:	7033      	strb	r3, [r6, #0]
 8013622:	2f00      	cmp	r7, #0
 8013624:	d051      	beq.n	80136ca <ucdr_serialize_endian_uint32_t+0xfe>
 8013626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801362a:	2f01      	cmp	r7, #1
 801362c:	7073      	strb	r3, [r6, #1]
 801362e:	d050      	beq.n	80136d2 <ucdr_serialize_endian_uint32_t+0x106>
 8013630:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013634:	2f02      	cmp	r7, #2
 8013636:	70b3      	strb	r3, [r6, #2]
 8013638:	d04f      	beq.n	80136da <ucdr_serialize_endian_uint32_t+0x10e>
 801363a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801363e:	70f3      	strb	r3, [r6, #3]
 8013640:	6923      	ldr	r3, [r4, #16]
 8013642:	2104      	movs	r1, #4
 8013644:	68a2      	ldr	r2, [r4, #8]
 8013646:	7da0      	ldrb	r0, [r4, #22]
 8013648:	3304      	adds	r3, #4
 801364a:	444a      	add	r2, r9
 801364c:	7561      	strb	r1, [r4, #21]
 801364e:	1bdb      	subs	r3, r3, r7
 8013650:	f080 0001 	eor.w	r0, r0, #1
 8013654:	60a2      	str	r2, [r4, #8]
 8013656:	6123      	str	r3, [r4, #16]
 8013658:	b003      	add	sp, #12
 801365a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801365e:	2104      	movs	r1, #4
 8013660:	4620      	mov	r0, r4
 8013662:	f001 f855 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013666:	b1c8      	cbz	r0, 801369c <ucdr_serialize_endian_uint32_t+0xd0>
 8013668:	2d01      	cmp	r5, #1
 801366a:	68a3      	ldr	r3, [r4, #8]
 801366c:	d01c      	beq.n	80136a8 <ucdr_serialize_endian_uint32_t+0xdc>
 801366e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013676:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801367a:	7018      	strb	r0, [r3, #0]
 801367c:	68a3      	ldr	r3, [r4, #8]
 801367e:	705a      	strb	r2, [r3, #1]
 8013680:	68a3      	ldr	r3, [r4, #8]
 8013682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013686:	7099      	strb	r1, [r3, #2]
 8013688:	68a3      	ldr	r3, [r4, #8]
 801368a:	70da      	strb	r2, [r3, #3]
 801368c:	2104      	movs	r1, #4
 801368e:	68a2      	ldr	r2, [r4, #8]
 8013690:	6923      	ldr	r3, [r4, #16]
 8013692:	440a      	add	r2, r1
 8013694:	7561      	strb	r1, [r4, #21]
 8013696:	440b      	add	r3, r1
 8013698:	60a2      	str	r2, [r4, #8]
 801369a:	6123      	str	r3, [r4, #16]
 801369c:	7da0      	ldrb	r0, [r4, #22]
 801369e:	f080 0001 	eor.w	r0, r0, #1
 80136a2:	b003      	add	sp, #12
 80136a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136a8:	9a01      	ldr	r2, [sp, #4]
 80136aa:	601a      	str	r2, [r3, #0]
 80136ac:	e7ee      	b.n	801368c <ucdr_serialize_endian_uint32_t+0xc0>
 80136ae:	68a2      	ldr	r2, [r4, #8]
 80136b0:	6923      	ldr	r3, [r4, #16]
 80136b2:	7da0      	ldrb	r0, [r4, #22]
 80136b4:	1bd2      	subs	r2, r2, r7
 80136b6:	1bdb      	subs	r3, r3, r7
 80136b8:	f884 8015 	strb.w	r8, [r4, #21]
 80136bc:	f080 0001 	eor.w	r0, r0, #1
 80136c0:	60a2      	str	r2, [r4, #8]
 80136c2:	6123      	str	r3, [r4, #16]
 80136c4:	b003      	add	sp, #12
 80136c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136ca:	68a3      	ldr	r3, [r4, #8]
 80136cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136d0:	701a      	strb	r2, [r3, #0]
 80136d2:	68a3      	ldr	r3, [r4, #8]
 80136d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80136d8:	701a      	strb	r2, [r3, #0]
 80136da:	68a3      	ldr	r3, [r4, #8]
 80136dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136e0:	701a      	strb	r2, [r3, #0]
 80136e2:	e7ad      	b.n	8013640 <ucdr_serialize_endian_uint32_t+0x74>
 80136e4:	ad01      	add	r5, sp, #4
 80136e6:	463a      	mov	r2, r7
 80136e8:	4630      	mov	r0, r6
 80136ea:	4629      	mov	r1, r5
 80136ec:	f00d fd55 	bl	802119a <memcpy>
 80136f0:	464a      	mov	r2, r9
 80136f2:	19e9      	adds	r1, r5, r7
 80136f4:	68a0      	ldr	r0, [r4, #8]
 80136f6:	f00d fd50 	bl	802119a <memcpy>
 80136fa:	e7a1      	b.n	8013640 <ucdr_serialize_endian_uint32_t+0x74>

080136fc <ucdr_deserialize_uint32_t>:
 80136fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013700:	4604      	mov	r4, r0
 8013702:	460d      	mov	r5, r1
 8013704:	2104      	movs	r1, #4
 8013706:	f001 f857 	bl	80147b8 <ucdr_buffer_alignment>
 801370a:	4601      	mov	r1, r0
 801370c:	4620      	mov	r0, r4
 801370e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013712:	f001 f899 	bl	8014848 <ucdr_advance_buffer>
 8013716:	2104      	movs	r1, #4
 8013718:	4620      	mov	r0, r4
 801371a:	f000 ffed 	bl	80146f8 <ucdr_check_buffer_available_for>
 801371e:	2800      	cmp	r0, #0
 8013720:	d138      	bne.n	8013794 <ucdr_deserialize_uint32_t+0x98>
 8013722:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013726:	42b7      	cmp	r7, r6
 8013728:	d92f      	bls.n	801378a <ucdr_deserialize_uint32_t+0x8e>
 801372a:	6923      	ldr	r3, [r4, #16]
 801372c:	4620      	mov	r0, r4
 801372e:	60a7      	str	r7, [r4, #8]
 8013730:	1bbf      	subs	r7, r7, r6
 8013732:	443b      	add	r3, r7
 8013734:	f1c7 0904 	rsb	r9, r7, #4
 8013738:	6123      	str	r3, [r4, #16]
 801373a:	4649      	mov	r1, r9
 801373c:	f000 ffe8 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013740:	2800      	cmp	r0, #0
 8013742:	d046      	beq.n	80137d2 <ucdr_deserialize_uint32_t+0xd6>
 8013744:	7d23      	ldrb	r3, [r4, #20]
 8013746:	2b01      	cmp	r3, #1
 8013748:	d05c      	beq.n	8013804 <ucdr_deserialize_uint32_t+0x108>
 801374a:	78f3      	ldrb	r3, [r6, #3]
 801374c:	702b      	strb	r3, [r5, #0]
 801374e:	2f00      	cmp	r7, #0
 8013750:	d04c      	beq.n	80137ec <ucdr_deserialize_uint32_t+0xf0>
 8013752:	78b3      	ldrb	r3, [r6, #2]
 8013754:	2f01      	cmp	r7, #1
 8013756:	706b      	strb	r3, [r5, #1]
 8013758:	f105 0302 	add.w	r3, r5, #2
 801375c:	d04a      	beq.n	80137f4 <ucdr_deserialize_uint32_t+0xf8>
 801375e:	7873      	ldrb	r3, [r6, #1]
 8013760:	2f02      	cmp	r7, #2
 8013762:	70ab      	strb	r3, [r5, #2]
 8013764:	f105 0303 	add.w	r3, r5, #3
 8013768:	d048      	beq.n	80137fc <ucdr_deserialize_uint32_t+0x100>
 801376a:	7833      	ldrb	r3, [r6, #0]
 801376c:	70eb      	strb	r3, [r5, #3]
 801376e:	6923      	ldr	r3, [r4, #16]
 8013770:	2104      	movs	r1, #4
 8013772:	68a2      	ldr	r2, [r4, #8]
 8013774:	3304      	adds	r3, #4
 8013776:	7da0      	ldrb	r0, [r4, #22]
 8013778:	444a      	add	r2, r9
 801377a:	7561      	strb	r1, [r4, #21]
 801377c:	1bdb      	subs	r3, r3, r7
 801377e:	f080 0001 	eor.w	r0, r0, #1
 8013782:	60a2      	str	r2, [r4, #8]
 8013784:	6123      	str	r3, [r4, #16]
 8013786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801378a:	2104      	movs	r1, #4
 801378c:	4620      	mov	r0, r4
 801378e:	f000 ffbf 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013792:	b1b0      	cbz	r0, 80137c2 <ucdr_deserialize_uint32_t+0xc6>
 8013794:	7d23      	ldrb	r3, [r4, #20]
 8013796:	2b01      	cmp	r3, #1
 8013798:	68a3      	ldr	r3, [r4, #8]
 801379a:	d017      	beq.n	80137cc <ucdr_deserialize_uint32_t+0xd0>
 801379c:	78db      	ldrb	r3, [r3, #3]
 801379e:	702b      	strb	r3, [r5, #0]
 80137a0:	68a3      	ldr	r3, [r4, #8]
 80137a2:	789b      	ldrb	r3, [r3, #2]
 80137a4:	706b      	strb	r3, [r5, #1]
 80137a6:	68a3      	ldr	r3, [r4, #8]
 80137a8:	785b      	ldrb	r3, [r3, #1]
 80137aa:	70ab      	strb	r3, [r5, #2]
 80137ac:	68a3      	ldr	r3, [r4, #8]
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	70eb      	strb	r3, [r5, #3]
 80137b2:	2104      	movs	r1, #4
 80137b4:	68a2      	ldr	r2, [r4, #8]
 80137b6:	6923      	ldr	r3, [r4, #16]
 80137b8:	440a      	add	r2, r1
 80137ba:	7561      	strb	r1, [r4, #21]
 80137bc:	440b      	add	r3, r1
 80137be:	60a2      	str	r2, [r4, #8]
 80137c0:	6123      	str	r3, [r4, #16]
 80137c2:	7da0      	ldrb	r0, [r4, #22]
 80137c4:	f080 0001 	eor.w	r0, r0, #1
 80137c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	602b      	str	r3, [r5, #0]
 80137d0:	e7ef      	b.n	80137b2 <ucdr_deserialize_uint32_t+0xb6>
 80137d2:	68a2      	ldr	r2, [r4, #8]
 80137d4:	6923      	ldr	r3, [r4, #16]
 80137d6:	1bd2      	subs	r2, r2, r7
 80137d8:	7da0      	ldrb	r0, [r4, #22]
 80137da:	1bdb      	subs	r3, r3, r7
 80137dc:	f884 8015 	strb.w	r8, [r4, #21]
 80137e0:	f080 0001 	eor.w	r0, r0, #1
 80137e4:	60a2      	str	r2, [r4, #8]
 80137e6:	6123      	str	r3, [r4, #16]
 80137e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ec:	68a3      	ldr	r3, [r4, #8]
 80137ee:	789b      	ldrb	r3, [r3, #2]
 80137f0:	706b      	strb	r3, [r5, #1]
 80137f2:	1cab      	adds	r3, r5, #2
 80137f4:	68a2      	ldr	r2, [r4, #8]
 80137f6:	7852      	ldrb	r2, [r2, #1]
 80137f8:	f803 2b01 	strb.w	r2, [r3], #1
 80137fc:	68a2      	ldr	r2, [r4, #8]
 80137fe:	7812      	ldrb	r2, [r2, #0]
 8013800:	701a      	strb	r2, [r3, #0]
 8013802:	e7b4      	b.n	801376e <ucdr_deserialize_uint32_t+0x72>
 8013804:	4631      	mov	r1, r6
 8013806:	463a      	mov	r2, r7
 8013808:	4628      	mov	r0, r5
 801380a:	f00d fcc6 	bl	802119a <memcpy>
 801380e:	464a      	mov	r2, r9
 8013810:	19e8      	adds	r0, r5, r7
 8013812:	68a1      	ldr	r1, [r4, #8]
 8013814:	f00d fcc1 	bl	802119a <memcpy>
 8013818:	e7a9      	b.n	801376e <ucdr_deserialize_uint32_t+0x72>
 801381a:	bf00      	nop

0801381c <ucdr_deserialize_endian_uint32_t>:
 801381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013820:	4604      	mov	r4, r0
 8013822:	460e      	mov	r6, r1
 8013824:	2104      	movs	r1, #4
 8013826:	4615      	mov	r5, r2
 8013828:	f000 ffc6 	bl	80147b8 <ucdr_buffer_alignment>
 801382c:	4601      	mov	r1, r0
 801382e:	4620      	mov	r0, r4
 8013830:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013834:	f001 f808 	bl	8014848 <ucdr_advance_buffer>
 8013838:	2104      	movs	r1, #4
 801383a:	4620      	mov	r0, r4
 801383c:	f000 ff5c 	bl	80146f8 <ucdr_check_buffer_available_for>
 8013840:	2800      	cmp	r0, #0
 8013842:	d13c      	bne.n	80138be <ucdr_deserialize_endian_uint32_t+0xa2>
 8013844:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013848:	42bb      	cmp	r3, r7
 801384a:	d933      	bls.n	80138b4 <ucdr_deserialize_endian_uint32_t+0x98>
 801384c:	eba3 0907 	sub.w	r9, r3, r7
 8013850:	60a3      	str	r3, [r4, #8]
 8013852:	6923      	ldr	r3, [r4, #16]
 8013854:	4620      	mov	r0, r4
 8013856:	f1c9 0a04 	rsb	sl, r9, #4
 801385a:	444b      	add	r3, r9
 801385c:	4651      	mov	r1, sl
 801385e:	6123      	str	r3, [r4, #16]
 8013860:	f000 ff56 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013864:	2800      	cmp	r0, #0
 8013866:	d048      	beq.n	80138fa <ucdr_deserialize_endian_uint32_t+0xde>
 8013868:	2e01      	cmp	r6, #1
 801386a:	d061      	beq.n	8013930 <ucdr_deserialize_endian_uint32_t+0x114>
 801386c:	78fb      	ldrb	r3, [r7, #3]
 801386e:	702b      	strb	r3, [r5, #0]
 8013870:	f1b9 0f00 	cmp.w	r9, #0
 8013874:	d050      	beq.n	8013918 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013876:	78bb      	ldrb	r3, [r7, #2]
 8013878:	f1b9 0f01 	cmp.w	r9, #1
 801387c:	706b      	strb	r3, [r5, #1]
 801387e:	f105 0302 	add.w	r3, r5, #2
 8013882:	d04d      	beq.n	8013920 <ucdr_deserialize_endian_uint32_t+0x104>
 8013884:	787b      	ldrb	r3, [r7, #1]
 8013886:	f1b9 0f02 	cmp.w	r9, #2
 801388a:	70ab      	strb	r3, [r5, #2]
 801388c:	f105 0303 	add.w	r3, r5, #3
 8013890:	d04a      	beq.n	8013928 <ucdr_deserialize_endian_uint32_t+0x10c>
 8013892:	783b      	ldrb	r3, [r7, #0]
 8013894:	70eb      	strb	r3, [r5, #3]
 8013896:	6923      	ldr	r3, [r4, #16]
 8013898:	2104      	movs	r1, #4
 801389a:	68a2      	ldr	r2, [r4, #8]
 801389c:	3304      	adds	r3, #4
 801389e:	7da0      	ldrb	r0, [r4, #22]
 80138a0:	4452      	add	r2, sl
 80138a2:	7561      	strb	r1, [r4, #21]
 80138a4:	eba3 0309 	sub.w	r3, r3, r9
 80138a8:	f080 0001 	eor.w	r0, r0, #1
 80138ac:	60a2      	str	r2, [r4, #8]
 80138ae:	6123      	str	r3, [r4, #16]
 80138b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b4:	2104      	movs	r1, #4
 80138b6:	4620      	mov	r0, r4
 80138b8:	f000 ff2a 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80138bc:	b1a8      	cbz	r0, 80138ea <ucdr_deserialize_endian_uint32_t+0xce>
 80138be:	2e01      	cmp	r6, #1
 80138c0:	68a3      	ldr	r3, [r4, #8]
 80138c2:	d017      	beq.n	80138f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 80138c4:	78db      	ldrb	r3, [r3, #3]
 80138c6:	702b      	strb	r3, [r5, #0]
 80138c8:	68a3      	ldr	r3, [r4, #8]
 80138ca:	789b      	ldrb	r3, [r3, #2]
 80138cc:	706b      	strb	r3, [r5, #1]
 80138ce:	68a3      	ldr	r3, [r4, #8]
 80138d0:	785b      	ldrb	r3, [r3, #1]
 80138d2:	70ab      	strb	r3, [r5, #2]
 80138d4:	68a3      	ldr	r3, [r4, #8]
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	70eb      	strb	r3, [r5, #3]
 80138da:	2104      	movs	r1, #4
 80138dc:	68a2      	ldr	r2, [r4, #8]
 80138de:	6923      	ldr	r3, [r4, #16]
 80138e0:	440a      	add	r2, r1
 80138e2:	7561      	strb	r1, [r4, #21]
 80138e4:	440b      	add	r3, r1
 80138e6:	60a2      	str	r2, [r4, #8]
 80138e8:	6123      	str	r3, [r4, #16]
 80138ea:	7da0      	ldrb	r0, [r4, #22]
 80138ec:	f080 0001 	eor.w	r0, r0, #1
 80138f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	602b      	str	r3, [r5, #0]
 80138f8:	e7ef      	b.n	80138da <ucdr_deserialize_endian_uint32_t+0xbe>
 80138fa:	68a2      	ldr	r2, [r4, #8]
 80138fc:	6923      	ldr	r3, [r4, #16]
 80138fe:	eba2 0209 	sub.w	r2, r2, r9
 8013902:	7da0      	ldrb	r0, [r4, #22]
 8013904:	eba3 0309 	sub.w	r3, r3, r9
 8013908:	f884 8015 	strb.w	r8, [r4, #21]
 801390c:	f080 0001 	eor.w	r0, r0, #1
 8013910:	60a2      	str	r2, [r4, #8]
 8013912:	6123      	str	r3, [r4, #16]
 8013914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013918:	68a3      	ldr	r3, [r4, #8]
 801391a:	789b      	ldrb	r3, [r3, #2]
 801391c:	706b      	strb	r3, [r5, #1]
 801391e:	1cab      	adds	r3, r5, #2
 8013920:	68a2      	ldr	r2, [r4, #8]
 8013922:	7852      	ldrb	r2, [r2, #1]
 8013924:	f803 2b01 	strb.w	r2, [r3], #1
 8013928:	68a2      	ldr	r2, [r4, #8]
 801392a:	7812      	ldrb	r2, [r2, #0]
 801392c:	701a      	strb	r2, [r3, #0]
 801392e:	e7b2      	b.n	8013896 <ucdr_deserialize_endian_uint32_t+0x7a>
 8013930:	4639      	mov	r1, r7
 8013932:	464a      	mov	r2, r9
 8013934:	4628      	mov	r0, r5
 8013936:	f00d fc30 	bl	802119a <memcpy>
 801393a:	4652      	mov	r2, sl
 801393c:	eb05 0009 	add.w	r0, r5, r9
 8013940:	68a1      	ldr	r1, [r4, #8]
 8013942:	f00d fc2a 	bl	802119a <memcpy>
 8013946:	e7a6      	b.n	8013896 <ucdr_deserialize_endian_uint32_t+0x7a>

08013948 <ucdr_serialize_uint64_t>:
 8013948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801394c:	4604      	mov	r4, r0
 801394e:	b082      	sub	sp, #8
 8013950:	2108      	movs	r1, #8
 8013952:	e9cd 2300 	strd	r2, r3, [sp]
 8013956:	f000 ff2f 	bl	80147b8 <ucdr_buffer_alignment>
 801395a:	4601      	mov	r1, r0
 801395c:	4620      	mov	r0, r4
 801395e:	7d67      	ldrb	r7, [r4, #21]
 8013960:	f000 ff72 	bl	8014848 <ucdr_advance_buffer>
 8013964:	2108      	movs	r1, #8
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fec6 	bl	80146f8 <ucdr_check_buffer_available_for>
 801396c:	2800      	cmp	r0, #0
 801396e:	d14e      	bne.n	8013a0e <ucdr_serialize_uint64_t+0xc6>
 8013970:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013974:	42ab      	cmp	r3, r5
 8013976:	d945      	bls.n	8013a04 <ucdr_serialize_uint64_t+0xbc>
 8013978:	1b5e      	subs	r6, r3, r5
 801397a:	60a3      	str	r3, [r4, #8]
 801397c:	6923      	ldr	r3, [r4, #16]
 801397e:	4620      	mov	r0, r4
 8013980:	f1c6 0808 	rsb	r8, r6, #8
 8013984:	4433      	add	r3, r6
 8013986:	4641      	mov	r1, r8
 8013988:	6123      	str	r3, [r4, #16]
 801398a:	f000 fec1 	bl	8014710 <ucdr_check_final_buffer_behavior>
 801398e:	2800      	cmp	r0, #0
 8013990:	d074      	beq.n	8013a7c <ucdr_serialize_uint64_t+0x134>
 8013992:	7d23      	ldrb	r3, [r4, #20]
 8013994:	2b01      	cmp	r3, #1
 8013996:	f000 809b 	beq.w	8013ad0 <ucdr_serialize_uint64_t+0x188>
 801399a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801399e:	702b      	strb	r3, [r5, #0]
 80139a0:	2e00      	cmp	r6, #0
 80139a2:	d078      	beq.n	8013a96 <ucdr_serialize_uint64_t+0x14e>
 80139a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80139a8:	2e01      	cmp	r6, #1
 80139aa:	706b      	strb	r3, [r5, #1]
 80139ac:	d077      	beq.n	8013a9e <ucdr_serialize_uint64_t+0x156>
 80139ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80139b2:	2e02      	cmp	r6, #2
 80139b4:	70ab      	strb	r3, [r5, #2]
 80139b6:	d076      	beq.n	8013aa6 <ucdr_serialize_uint64_t+0x15e>
 80139b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80139bc:	2e03      	cmp	r6, #3
 80139be:	70eb      	strb	r3, [r5, #3]
 80139c0:	d075      	beq.n	8013aae <ucdr_serialize_uint64_t+0x166>
 80139c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80139c6:	2e04      	cmp	r6, #4
 80139c8:	712b      	strb	r3, [r5, #4]
 80139ca:	d074      	beq.n	8013ab6 <ucdr_serialize_uint64_t+0x16e>
 80139cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80139d0:	2e05      	cmp	r6, #5
 80139d2:	716b      	strb	r3, [r5, #5]
 80139d4:	d073      	beq.n	8013abe <ucdr_serialize_uint64_t+0x176>
 80139d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80139da:	2e06      	cmp	r6, #6
 80139dc:	71ab      	strb	r3, [r5, #6]
 80139de:	d072      	beq.n	8013ac6 <ucdr_serialize_uint64_t+0x17e>
 80139e0:	f89d 3000 	ldrb.w	r3, [sp]
 80139e4:	71eb      	strb	r3, [r5, #7]
 80139e6:	6923      	ldr	r3, [r4, #16]
 80139e8:	2108      	movs	r1, #8
 80139ea:	68a2      	ldr	r2, [r4, #8]
 80139ec:	3308      	adds	r3, #8
 80139ee:	7da0      	ldrb	r0, [r4, #22]
 80139f0:	4442      	add	r2, r8
 80139f2:	7561      	strb	r1, [r4, #21]
 80139f4:	1b9e      	subs	r6, r3, r6
 80139f6:	f080 0001 	eor.w	r0, r0, #1
 80139fa:	60a2      	str	r2, [r4, #8]
 80139fc:	6126      	str	r6, [r4, #16]
 80139fe:	b002      	add	sp, #8
 8013a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a04:	2108      	movs	r1, #8
 8013a06:	4620      	mov	r0, r4
 8013a08:	f000 fe82 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013a0c:	b350      	cbz	r0, 8013a64 <ucdr_serialize_uint64_t+0x11c>
 8013a0e:	7d23      	ldrb	r3, [r4, #20]
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d02d      	beq.n	8013a70 <ucdr_serialize_uint64_t+0x128>
 8013a14:	68a3      	ldr	r3, [r4, #8]
 8013a16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013a1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013a22:	7018      	strb	r0, [r3, #0]
 8013a24:	68a3      	ldr	r3, [r4, #8]
 8013a26:	705a      	strb	r2, [r3, #1]
 8013a28:	68a3      	ldr	r3, [r4, #8]
 8013a2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013a32:	7099      	strb	r1, [r3, #2]
 8013a34:	68a3      	ldr	r3, [r4, #8]
 8013a36:	70da      	strb	r2, [r3, #3]
 8013a38:	68a3      	ldr	r3, [r4, #8]
 8013a3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013a3e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013a42:	7118      	strb	r0, [r3, #4]
 8013a44:	68a3      	ldr	r3, [r4, #8]
 8013a46:	715a      	strb	r2, [r3, #5]
 8013a48:	68a3      	ldr	r3, [r4, #8]
 8013a4a:	f89d 2000 	ldrb.w	r2, [sp]
 8013a4e:	7199      	strb	r1, [r3, #6]
 8013a50:	68a3      	ldr	r3, [r4, #8]
 8013a52:	71da      	strb	r2, [r3, #7]
 8013a54:	2108      	movs	r1, #8
 8013a56:	68a2      	ldr	r2, [r4, #8]
 8013a58:	6923      	ldr	r3, [r4, #16]
 8013a5a:	440a      	add	r2, r1
 8013a5c:	7561      	strb	r1, [r4, #21]
 8013a5e:	440b      	add	r3, r1
 8013a60:	60a2      	str	r2, [r4, #8]
 8013a62:	6123      	str	r3, [r4, #16]
 8013a64:	7da0      	ldrb	r0, [r4, #22]
 8013a66:	f080 0001 	eor.w	r0, r0, #1
 8013a6a:	b002      	add	sp, #8
 8013a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a70:	466b      	mov	r3, sp
 8013a72:	68a2      	ldr	r2, [r4, #8]
 8013a74:	cb03      	ldmia	r3!, {r0, r1}
 8013a76:	6010      	str	r0, [r2, #0]
 8013a78:	6051      	str	r1, [r2, #4]
 8013a7a:	e7eb      	b.n	8013a54 <ucdr_serialize_uint64_t+0x10c>
 8013a7c:	68a2      	ldr	r2, [r4, #8]
 8013a7e:	6923      	ldr	r3, [r4, #16]
 8013a80:	7da0      	ldrb	r0, [r4, #22]
 8013a82:	1b92      	subs	r2, r2, r6
 8013a84:	1b9b      	subs	r3, r3, r6
 8013a86:	7567      	strb	r7, [r4, #21]
 8013a88:	f080 0001 	eor.w	r0, r0, #1
 8013a8c:	60a2      	str	r2, [r4, #8]
 8013a8e:	6123      	str	r3, [r4, #16]
 8013a90:	b002      	add	sp, #8
 8013a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a96:	68a3      	ldr	r3, [r4, #8]
 8013a98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a9c:	701a      	strb	r2, [r3, #0]
 8013a9e:	68a3      	ldr	r3, [r4, #8]
 8013aa0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013aa4:	701a      	strb	r2, [r3, #0]
 8013aa6:	68a3      	ldr	r3, [r4, #8]
 8013aa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	68a3      	ldr	r3, [r4, #8]
 8013ab0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013ab4:	701a      	strb	r2, [r3, #0]
 8013ab6:	68a3      	ldr	r3, [r4, #8]
 8013ab8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013abc:	701a      	strb	r2, [r3, #0]
 8013abe:	68a3      	ldr	r3, [r4, #8]
 8013ac0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013ac4:	701a      	strb	r2, [r3, #0]
 8013ac6:	68a3      	ldr	r3, [r4, #8]
 8013ac8:	f89d 2000 	ldrb.w	r2, [sp]
 8013acc:	701a      	strb	r2, [r3, #0]
 8013ace:	e78a      	b.n	80139e6 <ucdr_serialize_uint64_t+0x9e>
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	466d      	mov	r5, sp
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	f00d fb5f 	bl	802119a <memcpy>
 8013adc:	4642      	mov	r2, r8
 8013ade:	19a9      	adds	r1, r5, r6
 8013ae0:	68a0      	ldr	r0, [r4, #8]
 8013ae2:	f00d fb5a 	bl	802119a <memcpy>
 8013ae6:	e77e      	b.n	80139e6 <ucdr_serialize_uint64_t+0x9e>

08013ae8 <ucdr_serialize_int16_t>:
 8013ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aec:	460b      	mov	r3, r1
 8013aee:	b082      	sub	sp, #8
 8013af0:	4604      	mov	r4, r0
 8013af2:	2102      	movs	r1, #2
 8013af4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013af8:	f000 fe5e 	bl	80147b8 <ucdr_buffer_alignment>
 8013afc:	4601      	mov	r1, r0
 8013afe:	4620      	mov	r0, r4
 8013b00:	7d67      	ldrb	r7, [r4, #21]
 8013b02:	f000 fea1 	bl	8014848 <ucdr_advance_buffer>
 8013b06:	2102      	movs	r1, #2
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f000 fdf5 	bl	80146f8 <ucdr_check_buffer_available_for>
 8013b0e:	bb78      	cbnz	r0, 8013b70 <ucdr_serialize_int16_t+0x88>
 8013b10:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013b14:	42ab      	cmp	r3, r5
 8013b16:	d926      	bls.n	8013b66 <ucdr_serialize_int16_t+0x7e>
 8013b18:	1b5e      	subs	r6, r3, r5
 8013b1a:	60a3      	str	r3, [r4, #8]
 8013b1c:	6923      	ldr	r3, [r4, #16]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f1c6 0802 	rsb	r8, r6, #2
 8013b24:	4433      	add	r3, r6
 8013b26:	4641      	mov	r1, r8
 8013b28:	6123      	str	r3, [r4, #16]
 8013b2a:	f000 fdf1 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d03b      	beq.n	8013baa <ucdr_serialize_int16_t+0xc2>
 8013b32:	7d23      	ldrb	r3, [r4, #20]
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d04a      	beq.n	8013bce <ucdr_serialize_int16_t+0xe6>
 8013b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013b3c:	702b      	strb	r3, [r5, #0]
 8013b3e:	2e00      	cmp	r6, #0
 8013b40:	d040      	beq.n	8013bc4 <ucdr_serialize_int16_t+0xdc>
 8013b42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013b46:	706b      	strb	r3, [r5, #1]
 8013b48:	6923      	ldr	r3, [r4, #16]
 8013b4a:	2102      	movs	r1, #2
 8013b4c:	68a2      	ldr	r2, [r4, #8]
 8013b4e:	3302      	adds	r3, #2
 8013b50:	7da0      	ldrb	r0, [r4, #22]
 8013b52:	4442      	add	r2, r8
 8013b54:	7561      	strb	r1, [r4, #21]
 8013b56:	1b9e      	subs	r6, r3, r6
 8013b58:	f080 0001 	eor.w	r0, r0, #1
 8013b5c:	60a2      	str	r2, [r4, #8]
 8013b5e:	6126      	str	r6, [r4, #16]
 8013b60:	b002      	add	sp, #8
 8013b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b66:	2102      	movs	r1, #2
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f000 fdd1 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013b6e:	b190      	cbz	r0, 8013b96 <ucdr_serialize_int16_t+0xae>
 8013b70:	7d23      	ldrb	r3, [r4, #20]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	68a3      	ldr	r3, [r4, #8]
 8013b76:	d014      	beq.n	8013ba2 <ucdr_serialize_int16_t+0xba>
 8013b78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013b7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b80:	7019      	strb	r1, [r3, #0]
 8013b82:	68a3      	ldr	r3, [r4, #8]
 8013b84:	705a      	strb	r2, [r3, #1]
 8013b86:	2102      	movs	r1, #2
 8013b88:	68a2      	ldr	r2, [r4, #8]
 8013b8a:	6923      	ldr	r3, [r4, #16]
 8013b8c:	440a      	add	r2, r1
 8013b8e:	7561      	strb	r1, [r4, #21]
 8013b90:	440b      	add	r3, r1
 8013b92:	60a2      	str	r2, [r4, #8]
 8013b94:	6123      	str	r3, [r4, #16]
 8013b96:	7da0      	ldrb	r0, [r4, #22]
 8013b98:	f080 0001 	eor.w	r0, r0, #1
 8013b9c:	b002      	add	sp, #8
 8013b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013ba6:	801a      	strh	r2, [r3, #0]
 8013ba8:	e7ed      	b.n	8013b86 <ucdr_serialize_int16_t+0x9e>
 8013baa:	68a2      	ldr	r2, [r4, #8]
 8013bac:	6923      	ldr	r3, [r4, #16]
 8013bae:	7da0      	ldrb	r0, [r4, #22]
 8013bb0:	1b92      	subs	r2, r2, r6
 8013bb2:	1b9b      	subs	r3, r3, r6
 8013bb4:	7567      	strb	r7, [r4, #21]
 8013bb6:	f080 0001 	eor.w	r0, r0, #1
 8013bba:	60a2      	str	r2, [r4, #8]
 8013bbc:	6123      	str	r3, [r4, #16]
 8013bbe:	b002      	add	sp, #8
 8013bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc4:	68a3      	ldr	r3, [r4, #8]
 8013bc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013bca:	701a      	strb	r2, [r3, #0]
 8013bcc:	e7bc      	b.n	8013b48 <ucdr_serialize_int16_t+0x60>
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f10d 0506 	add.w	r5, sp, #6
 8013bd4:	4632      	mov	r2, r6
 8013bd6:	4629      	mov	r1, r5
 8013bd8:	f00d fadf 	bl	802119a <memcpy>
 8013bdc:	4642      	mov	r2, r8
 8013bde:	19a9      	adds	r1, r5, r6
 8013be0:	68a0      	ldr	r0, [r4, #8]
 8013be2:	f00d fada 	bl	802119a <memcpy>
 8013be6:	e7af      	b.n	8013b48 <ucdr_serialize_int16_t+0x60>

08013be8 <ucdr_deserialize_int16_t>:
 8013be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bec:	4604      	mov	r4, r0
 8013bee:	460d      	mov	r5, r1
 8013bf0:	2102      	movs	r1, #2
 8013bf2:	f000 fde1 	bl	80147b8 <ucdr_buffer_alignment>
 8013bf6:	4601      	mov	r1, r0
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013bfe:	f000 fe23 	bl	8014848 <ucdr_advance_buffer>
 8013c02:	2102      	movs	r1, #2
 8013c04:	4620      	mov	r0, r4
 8013c06:	f000 fd77 	bl	80146f8 <ucdr_check_buffer_available_for>
 8013c0a:	bb60      	cbnz	r0, 8013c66 <ucdr_deserialize_int16_t+0x7e>
 8013c0c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013c10:	42be      	cmp	r6, r7
 8013c12:	d923      	bls.n	8013c5c <ucdr_deserialize_int16_t+0x74>
 8013c14:	6923      	ldr	r3, [r4, #16]
 8013c16:	4620      	mov	r0, r4
 8013c18:	60a6      	str	r6, [r4, #8]
 8013c1a:	1bf6      	subs	r6, r6, r7
 8013c1c:	4433      	add	r3, r6
 8013c1e:	f1c6 0902 	rsb	r9, r6, #2
 8013c22:	6123      	str	r3, [r4, #16]
 8013c24:	4649      	mov	r1, r9
 8013c26:	f000 fd73 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d034      	beq.n	8013c98 <ucdr_deserialize_int16_t+0xb0>
 8013c2e:	7d23      	ldrb	r3, [r4, #20]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d042      	beq.n	8013cba <ucdr_deserialize_int16_t+0xd2>
 8013c34:	787b      	ldrb	r3, [r7, #1]
 8013c36:	702b      	strb	r3, [r5, #0]
 8013c38:	2e00      	cmp	r6, #0
 8013c3a:	d03a      	beq.n	8013cb2 <ucdr_deserialize_int16_t+0xca>
 8013c3c:	783b      	ldrb	r3, [r7, #0]
 8013c3e:	706b      	strb	r3, [r5, #1]
 8013c40:	6923      	ldr	r3, [r4, #16]
 8013c42:	2102      	movs	r1, #2
 8013c44:	68a2      	ldr	r2, [r4, #8]
 8013c46:	3302      	adds	r3, #2
 8013c48:	7da0      	ldrb	r0, [r4, #22]
 8013c4a:	444a      	add	r2, r9
 8013c4c:	7561      	strb	r1, [r4, #21]
 8013c4e:	1b9b      	subs	r3, r3, r6
 8013c50:	f080 0001 	eor.w	r0, r0, #1
 8013c54:	60a2      	str	r2, [r4, #8]
 8013c56:	6123      	str	r3, [r4, #16]
 8013c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c5c:	2102      	movs	r1, #2
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f000 fd56 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013c64:	b180      	cbz	r0, 8013c88 <ucdr_deserialize_int16_t+0xa0>
 8013c66:	7d23      	ldrb	r3, [r4, #20]
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	68a3      	ldr	r3, [r4, #8]
 8013c6c:	d011      	beq.n	8013c92 <ucdr_deserialize_int16_t+0xaa>
 8013c6e:	785b      	ldrb	r3, [r3, #1]
 8013c70:	702b      	strb	r3, [r5, #0]
 8013c72:	68a3      	ldr	r3, [r4, #8]
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	706b      	strb	r3, [r5, #1]
 8013c78:	2102      	movs	r1, #2
 8013c7a:	68a2      	ldr	r2, [r4, #8]
 8013c7c:	6923      	ldr	r3, [r4, #16]
 8013c7e:	440a      	add	r2, r1
 8013c80:	7561      	strb	r1, [r4, #21]
 8013c82:	440b      	add	r3, r1
 8013c84:	60a2      	str	r2, [r4, #8]
 8013c86:	6123      	str	r3, [r4, #16]
 8013c88:	7da0      	ldrb	r0, [r4, #22]
 8013c8a:	f080 0001 	eor.w	r0, r0, #1
 8013c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c92:	881b      	ldrh	r3, [r3, #0]
 8013c94:	802b      	strh	r3, [r5, #0]
 8013c96:	e7ef      	b.n	8013c78 <ucdr_deserialize_int16_t+0x90>
 8013c98:	68a2      	ldr	r2, [r4, #8]
 8013c9a:	6923      	ldr	r3, [r4, #16]
 8013c9c:	1b92      	subs	r2, r2, r6
 8013c9e:	7da0      	ldrb	r0, [r4, #22]
 8013ca0:	1b9b      	subs	r3, r3, r6
 8013ca2:	f884 8015 	strb.w	r8, [r4, #21]
 8013ca6:	f080 0001 	eor.w	r0, r0, #1
 8013caa:	60a2      	str	r2, [r4, #8]
 8013cac:	6123      	str	r3, [r4, #16]
 8013cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cb2:	68a3      	ldr	r3, [r4, #8]
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	706b      	strb	r3, [r5, #1]
 8013cb8:	e7c2      	b.n	8013c40 <ucdr_deserialize_int16_t+0x58>
 8013cba:	4639      	mov	r1, r7
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f00d fa6b 	bl	802119a <memcpy>
 8013cc4:	464a      	mov	r2, r9
 8013cc6:	19a8      	adds	r0, r5, r6
 8013cc8:	68a1      	ldr	r1, [r4, #8]
 8013cca:	f00d fa66 	bl	802119a <memcpy>
 8013cce:	e7b7      	b.n	8013c40 <ucdr_deserialize_int16_t+0x58>

08013cd0 <ucdr_serialize_int32_t>:
 8013cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd4:	b082      	sub	sp, #8
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	9101      	str	r1, [sp, #4]
 8013cda:	2104      	movs	r1, #4
 8013cdc:	f000 fd6c 	bl	80147b8 <ucdr_buffer_alignment>
 8013ce0:	4601      	mov	r1, r0
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	7d67      	ldrb	r7, [r4, #21]
 8013ce6:	f000 fdaf 	bl	8014848 <ucdr_advance_buffer>
 8013cea:	2104      	movs	r1, #4
 8013cec:	4620      	mov	r0, r4
 8013cee:	f000 fd03 	bl	80146f8 <ucdr_check_buffer_available_for>
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	d139      	bne.n	8013d6a <ucdr_serialize_int32_t+0x9a>
 8013cf6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013cfa:	42ab      	cmp	r3, r5
 8013cfc:	d930      	bls.n	8013d60 <ucdr_serialize_int32_t+0x90>
 8013cfe:	1b5e      	subs	r6, r3, r5
 8013d00:	60a3      	str	r3, [r4, #8]
 8013d02:	6923      	ldr	r3, [r4, #16]
 8013d04:	4620      	mov	r0, r4
 8013d06:	f1c6 0804 	rsb	r8, r6, #4
 8013d0a:	4433      	add	r3, r6
 8013d0c:	4641      	mov	r1, r8
 8013d0e:	6123      	str	r3, [r4, #16]
 8013d10:	f000 fcfe 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	d04c      	beq.n	8013db2 <ucdr_serialize_int32_t+0xe2>
 8013d18:	7d23      	ldrb	r3, [r4, #20]
 8013d1a:	2b01      	cmp	r3, #1
 8013d1c:	d063      	beq.n	8013de6 <ucdr_serialize_int32_t+0x116>
 8013d1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013d22:	702b      	strb	r3, [r5, #0]
 8013d24:	2e00      	cmp	r6, #0
 8013d26:	d051      	beq.n	8013dcc <ucdr_serialize_int32_t+0xfc>
 8013d28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013d2c:	2e01      	cmp	r6, #1
 8013d2e:	706b      	strb	r3, [r5, #1]
 8013d30:	d050      	beq.n	8013dd4 <ucdr_serialize_int32_t+0x104>
 8013d32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013d36:	2e02      	cmp	r6, #2
 8013d38:	70ab      	strb	r3, [r5, #2]
 8013d3a:	d04f      	beq.n	8013ddc <ucdr_serialize_int32_t+0x10c>
 8013d3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013d40:	70eb      	strb	r3, [r5, #3]
 8013d42:	6923      	ldr	r3, [r4, #16]
 8013d44:	2104      	movs	r1, #4
 8013d46:	68a2      	ldr	r2, [r4, #8]
 8013d48:	3304      	adds	r3, #4
 8013d4a:	7da0      	ldrb	r0, [r4, #22]
 8013d4c:	4442      	add	r2, r8
 8013d4e:	7561      	strb	r1, [r4, #21]
 8013d50:	1b9e      	subs	r6, r3, r6
 8013d52:	f080 0001 	eor.w	r0, r0, #1
 8013d56:	60a2      	str	r2, [r4, #8]
 8013d58:	6126      	str	r6, [r4, #16]
 8013d5a:	b002      	add	sp, #8
 8013d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d60:	2104      	movs	r1, #4
 8013d62:	4620      	mov	r0, r4
 8013d64:	f000 fcd4 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013d68:	b1d0      	cbz	r0, 8013da0 <ucdr_serialize_int32_t+0xd0>
 8013d6a:	7d23      	ldrb	r3, [r4, #20]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	68a3      	ldr	r3, [r4, #8]
 8013d70:	d01c      	beq.n	8013dac <ucdr_serialize_int32_t+0xdc>
 8013d72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013d76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013d7e:	7018      	strb	r0, [r3, #0]
 8013d80:	68a3      	ldr	r3, [r4, #8]
 8013d82:	705a      	strb	r2, [r3, #1]
 8013d84:	68a3      	ldr	r3, [r4, #8]
 8013d86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013d8a:	7099      	strb	r1, [r3, #2]
 8013d8c:	68a3      	ldr	r3, [r4, #8]
 8013d8e:	70da      	strb	r2, [r3, #3]
 8013d90:	2104      	movs	r1, #4
 8013d92:	68a2      	ldr	r2, [r4, #8]
 8013d94:	6923      	ldr	r3, [r4, #16]
 8013d96:	440a      	add	r2, r1
 8013d98:	7561      	strb	r1, [r4, #21]
 8013d9a:	440b      	add	r3, r1
 8013d9c:	60a2      	str	r2, [r4, #8]
 8013d9e:	6123      	str	r3, [r4, #16]
 8013da0:	7da0      	ldrb	r0, [r4, #22]
 8013da2:	f080 0001 	eor.w	r0, r0, #1
 8013da6:	b002      	add	sp, #8
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dac:	9a01      	ldr	r2, [sp, #4]
 8013dae:	601a      	str	r2, [r3, #0]
 8013db0:	e7ee      	b.n	8013d90 <ucdr_serialize_int32_t+0xc0>
 8013db2:	68a2      	ldr	r2, [r4, #8]
 8013db4:	6923      	ldr	r3, [r4, #16]
 8013db6:	7da0      	ldrb	r0, [r4, #22]
 8013db8:	1b92      	subs	r2, r2, r6
 8013dba:	1b9b      	subs	r3, r3, r6
 8013dbc:	7567      	strb	r7, [r4, #21]
 8013dbe:	f080 0001 	eor.w	r0, r0, #1
 8013dc2:	60a2      	str	r2, [r4, #8]
 8013dc4:	6123      	str	r3, [r4, #16]
 8013dc6:	b002      	add	sp, #8
 8013dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dcc:	68a3      	ldr	r3, [r4, #8]
 8013dce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013dd2:	701a      	strb	r2, [r3, #0]
 8013dd4:	68a3      	ldr	r3, [r4, #8]
 8013dd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013dda:	701a      	strb	r2, [r3, #0]
 8013ddc:	68a3      	ldr	r3, [r4, #8]
 8013dde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013de2:	701a      	strb	r2, [r3, #0]
 8013de4:	e7ad      	b.n	8013d42 <ucdr_serialize_int32_t+0x72>
 8013de6:	4628      	mov	r0, r5
 8013de8:	ad01      	add	r5, sp, #4
 8013dea:	4632      	mov	r2, r6
 8013dec:	4629      	mov	r1, r5
 8013dee:	f00d f9d4 	bl	802119a <memcpy>
 8013df2:	4642      	mov	r2, r8
 8013df4:	19a9      	adds	r1, r5, r6
 8013df6:	68a0      	ldr	r0, [r4, #8]
 8013df8:	f00d f9cf 	bl	802119a <memcpy>
 8013dfc:	e7a1      	b.n	8013d42 <ucdr_serialize_int32_t+0x72>
 8013dfe:	bf00      	nop

08013e00 <ucdr_serialize_endian_int32_t>:
 8013e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e04:	4604      	mov	r4, r0
 8013e06:	b083      	sub	sp, #12
 8013e08:	460d      	mov	r5, r1
 8013e0a:	2104      	movs	r1, #4
 8013e0c:	9201      	str	r2, [sp, #4]
 8013e0e:	f000 fcd3 	bl	80147b8 <ucdr_buffer_alignment>
 8013e12:	4601      	mov	r1, r0
 8013e14:	4620      	mov	r0, r4
 8013e16:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013e1a:	f000 fd15 	bl	8014848 <ucdr_advance_buffer>
 8013e1e:	2104      	movs	r1, #4
 8013e20:	4620      	mov	r0, r4
 8013e22:	f000 fc69 	bl	80146f8 <ucdr_check_buffer_available_for>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	d138      	bne.n	8013e9c <ucdr_serialize_endian_int32_t+0x9c>
 8013e2a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013e2e:	42b7      	cmp	r7, r6
 8013e30:	d92f      	bls.n	8013e92 <ucdr_serialize_endian_int32_t+0x92>
 8013e32:	6923      	ldr	r3, [r4, #16]
 8013e34:	4620      	mov	r0, r4
 8013e36:	60a7      	str	r7, [r4, #8]
 8013e38:	1bbf      	subs	r7, r7, r6
 8013e3a:	443b      	add	r3, r7
 8013e3c:	f1c7 0904 	rsb	r9, r7, #4
 8013e40:	6123      	str	r3, [r4, #16]
 8013e42:	4649      	mov	r1, r9
 8013e44:	f000 fc64 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	d04a      	beq.n	8013ee2 <ucdr_serialize_endian_int32_t+0xe2>
 8013e4c:	2d01      	cmp	r5, #1
 8013e4e:	d063      	beq.n	8013f18 <ucdr_serialize_endian_int32_t+0x118>
 8013e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e54:	7033      	strb	r3, [r6, #0]
 8013e56:	2f00      	cmp	r7, #0
 8013e58:	d051      	beq.n	8013efe <ucdr_serialize_endian_int32_t+0xfe>
 8013e5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e5e:	2f01      	cmp	r7, #1
 8013e60:	7073      	strb	r3, [r6, #1]
 8013e62:	d050      	beq.n	8013f06 <ucdr_serialize_endian_int32_t+0x106>
 8013e64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e68:	2f02      	cmp	r7, #2
 8013e6a:	70b3      	strb	r3, [r6, #2]
 8013e6c:	d04f      	beq.n	8013f0e <ucdr_serialize_endian_int32_t+0x10e>
 8013e6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e72:	70f3      	strb	r3, [r6, #3]
 8013e74:	6923      	ldr	r3, [r4, #16]
 8013e76:	2104      	movs	r1, #4
 8013e78:	68a2      	ldr	r2, [r4, #8]
 8013e7a:	7da0      	ldrb	r0, [r4, #22]
 8013e7c:	3304      	adds	r3, #4
 8013e7e:	444a      	add	r2, r9
 8013e80:	7561      	strb	r1, [r4, #21]
 8013e82:	1bdb      	subs	r3, r3, r7
 8013e84:	f080 0001 	eor.w	r0, r0, #1
 8013e88:	60a2      	str	r2, [r4, #8]
 8013e8a:	6123      	str	r3, [r4, #16]
 8013e8c:	b003      	add	sp, #12
 8013e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e92:	2104      	movs	r1, #4
 8013e94:	4620      	mov	r0, r4
 8013e96:	f000 fc3b 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013e9a:	b1c8      	cbz	r0, 8013ed0 <ucdr_serialize_endian_int32_t+0xd0>
 8013e9c:	2d01      	cmp	r5, #1
 8013e9e:	68a3      	ldr	r3, [r4, #8]
 8013ea0:	d01c      	beq.n	8013edc <ucdr_serialize_endian_int32_t+0xdc>
 8013ea2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013ea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013eaa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013eae:	7018      	strb	r0, [r3, #0]
 8013eb0:	68a3      	ldr	r3, [r4, #8]
 8013eb2:	705a      	strb	r2, [r3, #1]
 8013eb4:	68a3      	ldr	r3, [r4, #8]
 8013eb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013eba:	7099      	strb	r1, [r3, #2]
 8013ebc:	68a3      	ldr	r3, [r4, #8]
 8013ebe:	70da      	strb	r2, [r3, #3]
 8013ec0:	2104      	movs	r1, #4
 8013ec2:	68a2      	ldr	r2, [r4, #8]
 8013ec4:	6923      	ldr	r3, [r4, #16]
 8013ec6:	440a      	add	r2, r1
 8013ec8:	7561      	strb	r1, [r4, #21]
 8013eca:	440b      	add	r3, r1
 8013ecc:	60a2      	str	r2, [r4, #8]
 8013ece:	6123      	str	r3, [r4, #16]
 8013ed0:	7da0      	ldrb	r0, [r4, #22]
 8013ed2:	f080 0001 	eor.w	r0, r0, #1
 8013ed6:	b003      	add	sp, #12
 8013ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013edc:	9a01      	ldr	r2, [sp, #4]
 8013ede:	601a      	str	r2, [r3, #0]
 8013ee0:	e7ee      	b.n	8013ec0 <ucdr_serialize_endian_int32_t+0xc0>
 8013ee2:	68a2      	ldr	r2, [r4, #8]
 8013ee4:	6923      	ldr	r3, [r4, #16]
 8013ee6:	7da0      	ldrb	r0, [r4, #22]
 8013ee8:	1bd2      	subs	r2, r2, r7
 8013eea:	1bdb      	subs	r3, r3, r7
 8013eec:	f884 8015 	strb.w	r8, [r4, #21]
 8013ef0:	f080 0001 	eor.w	r0, r0, #1
 8013ef4:	60a2      	str	r2, [r4, #8]
 8013ef6:	6123      	str	r3, [r4, #16]
 8013ef8:	b003      	add	sp, #12
 8013efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013efe:	68a3      	ldr	r3, [r4, #8]
 8013f00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f04:	701a      	strb	r2, [r3, #0]
 8013f06:	68a3      	ldr	r3, [r4, #8]
 8013f08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	68a3      	ldr	r3, [r4, #8]
 8013f10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f14:	701a      	strb	r2, [r3, #0]
 8013f16:	e7ad      	b.n	8013e74 <ucdr_serialize_endian_int32_t+0x74>
 8013f18:	ad01      	add	r5, sp, #4
 8013f1a:	463a      	mov	r2, r7
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	4629      	mov	r1, r5
 8013f20:	f00d f93b 	bl	802119a <memcpy>
 8013f24:	464a      	mov	r2, r9
 8013f26:	19e9      	adds	r1, r5, r7
 8013f28:	68a0      	ldr	r0, [r4, #8]
 8013f2a:	f00d f936 	bl	802119a <memcpy>
 8013f2e:	e7a1      	b.n	8013e74 <ucdr_serialize_endian_int32_t+0x74>

08013f30 <ucdr_deserialize_int32_t>:
 8013f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f34:	4604      	mov	r4, r0
 8013f36:	460d      	mov	r5, r1
 8013f38:	2104      	movs	r1, #4
 8013f3a:	f000 fc3d 	bl	80147b8 <ucdr_buffer_alignment>
 8013f3e:	4601      	mov	r1, r0
 8013f40:	4620      	mov	r0, r4
 8013f42:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f46:	f000 fc7f 	bl	8014848 <ucdr_advance_buffer>
 8013f4a:	2104      	movs	r1, #4
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f000 fbd3 	bl	80146f8 <ucdr_check_buffer_available_for>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d138      	bne.n	8013fc8 <ucdr_deserialize_int32_t+0x98>
 8013f56:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013f5a:	42b7      	cmp	r7, r6
 8013f5c:	d92f      	bls.n	8013fbe <ucdr_deserialize_int32_t+0x8e>
 8013f5e:	6923      	ldr	r3, [r4, #16]
 8013f60:	4620      	mov	r0, r4
 8013f62:	60a7      	str	r7, [r4, #8]
 8013f64:	1bbf      	subs	r7, r7, r6
 8013f66:	443b      	add	r3, r7
 8013f68:	f1c7 0904 	rsb	r9, r7, #4
 8013f6c:	6123      	str	r3, [r4, #16]
 8013f6e:	4649      	mov	r1, r9
 8013f70:	f000 fbce 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d046      	beq.n	8014006 <ucdr_deserialize_int32_t+0xd6>
 8013f78:	7d23      	ldrb	r3, [r4, #20]
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	d05c      	beq.n	8014038 <ucdr_deserialize_int32_t+0x108>
 8013f7e:	78f3      	ldrb	r3, [r6, #3]
 8013f80:	702b      	strb	r3, [r5, #0]
 8013f82:	2f00      	cmp	r7, #0
 8013f84:	d04c      	beq.n	8014020 <ucdr_deserialize_int32_t+0xf0>
 8013f86:	78b3      	ldrb	r3, [r6, #2]
 8013f88:	2f01      	cmp	r7, #1
 8013f8a:	706b      	strb	r3, [r5, #1]
 8013f8c:	f105 0302 	add.w	r3, r5, #2
 8013f90:	d04a      	beq.n	8014028 <ucdr_deserialize_int32_t+0xf8>
 8013f92:	7873      	ldrb	r3, [r6, #1]
 8013f94:	2f02      	cmp	r7, #2
 8013f96:	70ab      	strb	r3, [r5, #2]
 8013f98:	f105 0303 	add.w	r3, r5, #3
 8013f9c:	d048      	beq.n	8014030 <ucdr_deserialize_int32_t+0x100>
 8013f9e:	7833      	ldrb	r3, [r6, #0]
 8013fa0:	70eb      	strb	r3, [r5, #3]
 8013fa2:	6923      	ldr	r3, [r4, #16]
 8013fa4:	2104      	movs	r1, #4
 8013fa6:	68a2      	ldr	r2, [r4, #8]
 8013fa8:	3304      	adds	r3, #4
 8013faa:	7da0      	ldrb	r0, [r4, #22]
 8013fac:	444a      	add	r2, r9
 8013fae:	7561      	strb	r1, [r4, #21]
 8013fb0:	1bdb      	subs	r3, r3, r7
 8013fb2:	f080 0001 	eor.w	r0, r0, #1
 8013fb6:	60a2      	str	r2, [r4, #8]
 8013fb8:	6123      	str	r3, [r4, #16]
 8013fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fbe:	2104      	movs	r1, #4
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	f000 fba5 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8013fc6:	b1b0      	cbz	r0, 8013ff6 <ucdr_deserialize_int32_t+0xc6>
 8013fc8:	7d23      	ldrb	r3, [r4, #20]
 8013fca:	2b01      	cmp	r3, #1
 8013fcc:	68a3      	ldr	r3, [r4, #8]
 8013fce:	d017      	beq.n	8014000 <ucdr_deserialize_int32_t+0xd0>
 8013fd0:	78db      	ldrb	r3, [r3, #3]
 8013fd2:	702b      	strb	r3, [r5, #0]
 8013fd4:	68a3      	ldr	r3, [r4, #8]
 8013fd6:	789b      	ldrb	r3, [r3, #2]
 8013fd8:	706b      	strb	r3, [r5, #1]
 8013fda:	68a3      	ldr	r3, [r4, #8]
 8013fdc:	785b      	ldrb	r3, [r3, #1]
 8013fde:	70ab      	strb	r3, [r5, #2]
 8013fe0:	68a3      	ldr	r3, [r4, #8]
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	70eb      	strb	r3, [r5, #3]
 8013fe6:	2104      	movs	r1, #4
 8013fe8:	68a2      	ldr	r2, [r4, #8]
 8013fea:	6923      	ldr	r3, [r4, #16]
 8013fec:	440a      	add	r2, r1
 8013fee:	7561      	strb	r1, [r4, #21]
 8013ff0:	440b      	add	r3, r1
 8013ff2:	60a2      	str	r2, [r4, #8]
 8013ff4:	6123      	str	r3, [r4, #16]
 8013ff6:	7da0      	ldrb	r0, [r4, #22]
 8013ff8:	f080 0001 	eor.w	r0, r0, #1
 8013ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	602b      	str	r3, [r5, #0]
 8014004:	e7ef      	b.n	8013fe6 <ucdr_deserialize_int32_t+0xb6>
 8014006:	68a2      	ldr	r2, [r4, #8]
 8014008:	6923      	ldr	r3, [r4, #16]
 801400a:	1bd2      	subs	r2, r2, r7
 801400c:	7da0      	ldrb	r0, [r4, #22]
 801400e:	1bdb      	subs	r3, r3, r7
 8014010:	f884 8015 	strb.w	r8, [r4, #21]
 8014014:	f080 0001 	eor.w	r0, r0, #1
 8014018:	60a2      	str	r2, [r4, #8]
 801401a:	6123      	str	r3, [r4, #16]
 801401c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014020:	68a3      	ldr	r3, [r4, #8]
 8014022:	789b      	ldrb	r3, [r3, #2]
 8014024:	706b      	strb	r3, [r5, #1]
 8014026:	1cab      	adds	r3, r5, #2
 8014028:	68a2      	ldr	r2, [r4, #8]
 801402a:	7852      	ldrb	r2, [r2, #1]
 801402c:	f803 2b01 	strb.w	r2, [r3], #1
 8014030:	68a2      	ldr	r2, [r4, #8]
 8014032:	7812      	ldrb	r2, [r2, #0]
 8014034:	701a      	strb	r2, [r3, #0]
 8014036:	e7b4      	b.n	8013fa2 <ucdr_deserialize_int32_t+0x72>
 8014038:	4631      	mov	r1, r6
 801403a:	463a      	mov	r2, r7
 801403c:	4628      	mov	r0, r5
 801403e:	f00d f8ac 	bl	802119a <memcpy>
 8014042:	464a      	mov	r2, r9
 8014044:	19e8      	adds	r0, r5, r7
 8014046:	68a1      	ldr	r1, [r4, #8]
 8014048:	f00d f8a7 	bl	802119a <memcpy>
 801404c:	e7a9      	b.n	8013fa2 <ucdr_deserialize_int32_t+0x72>
 801404e:	bf00      	nop

08014050 <ucdr_deserialize_endian_int32_t>:
 8014050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014054:	4604      	mov	r4, r0
 8014056:	460e      	mov	r6, r1
 8014058:	2104      	movs	r1, #4
 801405a:	4615      	mov	r5, r2
 801405c:	f000 fbac 	bl	80147b8 <ucdr_buffer_alignment>
 8014060:	4601      	mov	r1, r0
 8014062:	4620      	mov	r0, r4
 8014064:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014068:	f000 fbee 	bl	8014848 <ucdr_advance_buffer>
 801406c:	2104      	movs	r1, #4
 801406e:	4620      	mov	r0, r4
 8014070:	f000 fb42 	bl	80146f8 <ucdr_check_buffer_available_for>
 8014074:	2800      	cmp	r0, #0
 8014076:	d13c      	bne.n	80140f2 <ucdr_deserialize_endian_int32_t+0xa2>
 8014078:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801407c:	42bb      	cmp	r3, r7
 801407e:	d933      	bls.n	80140e8 <ucdr_deserialize_endian_int32_t+0x98>
 8014080:	eba3 0907 	sub.w	r9, r3, r7
 8014084:	60a3      	str	r3, [r4, #8]
 8014086:	6923      	ldr	r3, [r4, #16]
 8014088:	4620      	mov	r0, r4
 801408a:	f1c9 0a04 	rsb	sl, r9, #4
 801408e:	444b      	add	r3, r9
 8014090:	4651      	mov	r1, sl
 8014092:	6123      	str	r3, [r4, #16]
 8014094:	f000 fb3c 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8014098:	2800      	cmp	r0, #0
 801409a:	d048      	beq.n	801412e <ucdr_deserialize_endian_int32_t+0xde>
 801409c:	2e01      	cmp	r6, #1
 801409e:	d061      	beq.n	8014164 <ucdr_deserialize_endian_int32_t+0x114>
 80140a0:	78fb      	ldrb	r3, [r7, #3]
 80140a2:	702b      	strb	r3, [r5, #0]
 80140a4:	f1b9 0f00 	cmp.w	r9, #0
 80140a8:	d050      	beq.n	801414c <ucdr_deserialize_endian_int32_t+0xfc>
 80140aa:	78bb      	ldrb	r3, [r7, #2]
 80140ac:	f1b9 0f01 	cmp.w	r9, #1
 80140b0:	706b      	strb	r3, [r5, #1]
 80140b2:	f105 0302 	add.w	r3, r5, #2
 80140b6:	d04d      	beq.n	8014154 <ucdr_deserialize_endian_int32_t+0x104>
 80140b8:	787b      	ldrb	r3, [r7, #1]
 80140ba:	f1b9 0f02 	cmp.w	r9, #2
 80140be:	70ab      	strb	r3, [r5, #2]
 80140c0:	f105 0303 	add.w	r3, r5, #3
 80140c4:	d04a      	beq.n	801415c <ucdr_deserialize_endian_int32_t+0x10c>
 80140c6:	783b      	ldrb	r3, [r7, #0]
 80140c8:	70eb      	strb	r3, [r5, #3]
 80140ca:	6923      	ldr	r3, [r4, #16]
 80140cc:	2104      	movs	r1, #4
 80140ce:	68a2      	ldr	r2, [r4, #8]
 80140d0:	3304      	adds	r3, #4
 80140d2:	7da0      	ldrb	r0, [r4, #22]
 80140d4:	4452      	add	r2, sl
 80140d6:	7561      	strb	r1, [r4, #21]
 80140d8:	eba3 0309 	sub.w	r3, r3, r9
 80140dc:	f080 0001 	eor.w	r0, r0, #1
 80140e0:	60a2      	str	r2, [r4, #8]
 80140e2:	6123      	str	r3, [r4, #16]
 80140e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140e8:	2104      	movs	r1, #4
 80140ea:	4620      	mov	r0, r4
 80140ec:	f000 fb10 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80140f0:	b1a8      	cbz	r0, 801411e <ucdr_deserialize_endian_int32_t+0xce>
 80140f2:	2e01      	cmp	r6, #1
 80140f4:	68a3      	ldr	r3, [r4, #8]
 80140f6:	d017      	beq.n	8014128 <ucdr_deserialize_endian_int32_t+0xd8>
 80140f8:	78db      	ldrb	r3, [r3, #3]
 80140fa:	702b      	strb	r3, [r5, #0]
 80140fc:	68a3      	ldr	r3, [r4, #8]
 80140fe:	789b      	ldrb	r3, [r3, #2]
 8014100:	706b      	strb	r3, [r5, #1]
 8014102:	68a3      	ldr	r3, [r4, #8]
 8014104:	785b      	ldrb	r3, [r3, #1]
 8014106:	70ab      	strb	r3, [r5, #2]
 8014108:	68a3      	ldr	r3, [r4, #8]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	70eb      	strb	r3, [r5, #3]
 801410e:	2104      	movs	r1, #4
 8014110:	68a2      	ldr	r2, [r4, #8]
 8014112:	6923      	ldr	r3, [r4, #16]
 8014114:	440a      	add	r2, r1
 8014116:	7561      	strb	r1, [r4, #21]
 8014118:	440b      	add	r3, r1
 801411a:	60a2      	str	r2, [r4, #8]
 801411c:	6123      	str	r3, [r4, #16]
 801411e:	7da0      	ldrb	r0, [r4, #22]
 8014120:	f080 0001 	eor.w	r0, r0, #1
 8014124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	602b      	str	r3, [r5, #0]
 801412c:	e7ef      	b.n	801410e <ucdr_deserialize_endian_int32_t+0xbe>
 801412e:	68a2      	ldr	r2, [r4, #8]
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	eba2 0209 	sub.w	r2, r2, r9
 8014136:	7da0      	ldrb	r0, [r4, #22]
 8014138:	eba3 0309 	sub.w	r3, r3, r9
 801413c:	f884 8015 	strb.w	r8, [r4, #21]
 8014140:	f080 0001 	eor.w	r0, r0, #1
 8014144:	60a2      	str	r2, [r4, #8]
 8014146:	6123      	str	r3, [r4, #16]
 8014148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414c:	68a3      	ldr	r3, [r4, #8]
 801414e:	789b      	ldrb	r3, [r3, #2]
 8014150:	706b      	strb	r3, [r5, #1]
 8014152:	1cab      	adds	r3, r5, #2
 8014154:	68a2      	ldr	r2, [r4, #8]
 8014156:	7852      	ldrb	r2, [r2, #1]
 8014158:	f803 2b01 	strb.w	r2, [r3], #1
 801415c:	68a2      	ldr	r2, [r4, #8]
 801415e:	7812      	ldrb	r2, [r2, #0]
 8014160:	701a      	strb	r2, [r3, #0]
 8014162:	e7b2      	b.n	80140ca <ucdr_deserialize_endian_int32_t+0x7a>
 8014164:	4639      	mov	r1, r7
 8014166:	464a      	mov	r2, r9
 8014168:	4628      	mov	r0, r5
 801416a:	f00d f816 	bl	802119a <memcpy>
 801416e:	4652      	mov	r2, sl
 8014170:	eb05 0009 	add.w	r0, r5, r9
 8014174:	68a1      	ldr	r1, [r4, #8]
 8014176:	f00d f810 	bl	802119a <memcpy>
 801417a:	e7a6      	b.n	80140ca <ucdr_deserialize_endian_int32_t+0x7a>

0801417c <ucdr_serialize_float>:
 801417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014180:	4604      	mov	r4, r0
 8014182:	b082      	sub	sp, #8
 8014184:	2104      	movs	r1, #4
 8014186:	ed8d 0a01 	vstr	s0, [sp, #4]
 801418a:	f000 fb15 	bl	80147b8 <ucdr_buffer_alignment>
 801418e:	4601      	mov	r1, r0
 8014190:	4620      	mov	r0, r4
 8014192:	7d67      	ldrb	r7, [r4, #21]
 8014194:	f000 fb58 	bl	8014848 <ucdr_advance_buffer>
 8014198:	2104      	movs	r1, #4
 801419a:	4620      	mov	r0, r4
 801419c:	f000 faac 	bl	80146f8 <ucdr_check_buffer_available_for>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d139      	bne.n	8014218 <ucdr_serialize_float+0x9c>
 80141a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80141a8:	42ab      	cmp	r3, r5
 80141aa:	d930      	bls.n	801420e <ucdr_serialize_float+0x92>
 80141ac:	1b5e      	subs	r6, r3, r5
 80141ae:	60a3      	str	r3, [r4, #8]
 80141b0:	6923      	ldr	r3, [r4, #16]
 80141b2:	4620      	mov	r0, r4
 80141b4:	f1c6 0804 	rsb	r8, r6, #4
 80141b8:	4433      	add	r3, r6
 80141ba:	4641      	mov	r1, r8
 80141bc:	6123      	str	r3, [r4, #16]
 80141be:	f000 faa7 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d04c      	beq.n	8014260 <ucdr_serialize_float+0xe4>
 80141c6:	7d23      	ldrb	r3, [r4, #20]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d063      	beq.n	8014294 <ucdr_serialize_float+0x118>
 80141cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141d0:	702b      	strb	r3, [r5, #0]
 80141d2:	2e00      	cmp	r6, #0
 80141d4:	d051      	beq.n	801427a <ucdr_serialize_float+0xfe>
 80141d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80141da:	2e01      	cmp	r6, #1
 80141dc:	706b      	strb	r3, [r5, #1]
 80141de:	d050      	beq.n	8014282 <ucdr_serialize_float+0x106>
 80141e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80141e4:	2e02      	cmp	r6, #2
 80141e6:	70ab      	strb	r3, [r5, #2]
 80141e8:	d04f      	beq.n	801428a <ucdr_serialize_float+0x10e>
 80141ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80141ee:	70eb      	strb	r3, [r5, #3]
 80141f0:	6923      	ldr	r3, [r4, #16]
 80141f2:	2104      	movs	r1, #4
 80141f4:	68a2      	ldr	r2, [r4, #8]
 80141f6:	3304      	adds	r3, #4
 80141f8:	7da0      	ldrb	r0, [r4, #22]
 80141fa:	4442      	add	r2, r8
 80141fc:	7561      	strb	r1, [r4, #21]
 80141fe:	1b9e      	subs	r6, r3, r6
 8014200:	f080 0001 	eor.w	r0, r0, #1
 8014204:	60a2      	str	r2, [r4, #8]
 8014206:	6126      	str	r6, [r4, #16]
 8014208:	b002      	add	sp, #8
 801420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801420e:	2104      	movs	r1, #4
 8014210:	4620      	mov	r0, r4
 8014212:	f000 fa7d 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8014216:	b1d0      	cbz	r0, 801424e <ucdr_serialize_float+0xd2>
 8014218:	7d23      	ldrb	r3, [r4, #20]
 801421a:	2b01      	cmp	r3, #1
 801421c:	68a3      	ldr	r3, [r4, #8]
 801421e:	d01c      	beq.n	801425a <ucdr_serialize_float+0xde>
 8014220:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014224:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014228:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801422c:	7018      	strb	r0, [r3, #0]
 801422e:	68a3      	ldr	r3, [r4, #8]
 8014230:	705a      	strb	r2, [r3, #1]
 8014232:	68a3      	ldr	r3, [r4, #8]
 8014234:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014238:	7099      	strb	r1, [r3, #2]
 801423a:	68a3      	ldr	r3, [r4, #8]
 801423c:	70da      	strb	r2, [r3, #3]
 801423e:	2104      	movs	r1, #4
 8014240:	68a2      	ldr	r2, [r4, #8]
 8014242:	6923      	ldr	r3, [r4, #16]
 8014244:	440a      	add	r2, r1
 8014246:	7561      	strb	r1, [r4, #21]
 8014248:	440b      	add	r3, r1
 801424a:	60a2      	str	r2, [r4, #8]
 801424c:	6123      	str	r3, [r4, #16]
 801424e:	7da0      	ldrb	r0, [r4, #22]
 8014250:	f080 0001 	eor.w	r0, r0, #1
 8014254:	b002      	add	sp, #8
 8014256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801425a:	9a01      	ldr	r2, [sp, #4]
 801425c:	601a      	str	r2, [r3, #0]
 801425e:	e7ee      	b.n	801423e <ucdr_serialize_float+0xc2>
 8014260:	68a2      	ldr	r2, [r4, #8]
 8014262:	6923      	ldr	r3, [r4, #16]
 8014264:	7da0      	ldrb	r0, [r4, #22]
 8014266:	1b92      	subs	r2, r2, r6
 8014268:	1b9b      	subs	r3, r3, r6
 801426a:	7567      	strb	r7, [r4, #21]
 801426c:	f080 0001 	eor.w	r0, r0, #1
 8014270:	60a2      	str	r2, [r4, #8]
 8014272:	6123      	str	r3, [r4, #16]
 8014274:	b002      	add	sp, #8
 8014276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801427a:	68a3      	ldr	r3, [r4, #8]
 801427c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014280:	701a      	strb	r2, [r3, #0]
 8014282:	68a3      	ldr	r3, [r4, #8]
 8014284:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014288:	701a      	strb	r2, [r3, #0]
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014290:	701a      	strb	r2, [r3, #0]
 8014292:	e7ad      	b.n	80141f0 <ucdr_serialize_float+0x74>
 8014294:	4628      	mov	r0, r5
 8014296:	ad01      	add	r5, sp, #4
 8014298:	4632      	mov	r2, r6
 801429a:	4629      	mov	r1, r5
 801429c:	f00c ff7d 	bl	802119a <memcpy>
 80142a0:	4642      	mov	r2, r8
 80142a2:	19a9      	adds	r1, r5, r6
 80142a4:	68a0      	ldr	r0, [r4, #8]
 80142a6:	f00c ff78 	bl	802119a <memcpy>
 80142aa:	e7a1      	b.n	80141f0 <ucdr_serialize_float+0x74>

080142ac <ucdr_deserialize_float>:
 80142ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	460d      	mov	r5, r1
 80142b4:	2104      	movs	r1, #4
 80142b6:	f000 fa7f 	bl	80147b8 <ucdr_buffer_alignment>
 80142ba:	4601      	mov	r1, r0
 80142bc:	4620      	mov	r0, r4
 80142be:	f894 8015 	ldrb.w	r8, [r4, #21]
 80142c2:	f000 fac1 	bl	8014848 <ucdr_advance_buffer>
 80142c6:	2104      	movs	r1, #4
 80142c8:	4620      	mov	r0, r4
 80142ca:	f000 fa15 	bl	80146f8 <ucdr_check_buffer_available_for>
 80142ce:	2800      	cmp	r0, #0
 80142d0:	d138      	bne.n	8014344 <ucdr_deserialize_float+0x98>
 80142d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80142d6:	42b7      	cmp	r7, r6
 80142d8:	d92f      	bls.n	801433a <ucdr_deserialize_float+0x8e>
 80142da:	6923      	ldr	r3, [r4, #16]
 80142dc:	4620      	mov	r0, r4
 80142de:	60a7      	str	r7, [r4, #8]
 80142e0:	1bbf      	subs	r7, r7, r6
 80142e2:	443b      	add	r3, r7
 80142e4:	f1c7 0904 	rsb	r9, r7, #4
 80142e8:	6123      	str	r3, [r4, #16]
 80142ea:	4649      	mov	r1, r9
 80142ec:	f000 fa10 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80142f0:	2800      	cmp	r0, #0
 80142f2:	d046      	beq.n	8014382 <ucdr_deserialize_float+0xd6>
 80142f4:	7d23      	ldrb	r3, [r4, #20]
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	d05c      	beq.n	80143b4 <ucdr_deserialize_float+0x108>
 80142fa:	78f3      	ldrb	r3, [r6, #3]
 80142fc:	702b      	strb	r3, [r5, #0]
 80142fe:	2f00      	cmp	r7, #0
 8014300:	d04c      	beq.n	801439c <ucdr_deserialize_float+0xf0>
 8014302:	78b3      	ldrb	r3, [r6, #2]
 8014304:	2f01      	cmp	r7, #1
 8014306:	706b      	strb	r3, [r5, #1]
 8014308:	f105 0302 	add.w	r3, r5, #2
 801430c:	d04a      	beq.n	80143a4 <ucdr_deserialize_float+0xf8>
 801430e:	7873      	ldrb	r3, [r6, #1]
 8014310:	2f02      	cmp	r7, #2
 8014312:	70ab      	strb	r3, [r5, #2]
 8014314:	f105 0303 	add.w	r3, r5, #3
 8014318:	d048      	beq.n	80143ac <ucdr_deserialize_float+0x100>
 801431a:	7833      	ldrb	r3, [r6, #0]
 801431c:	70eb      	strb	r3, [r5, #3]
 801431e:	6923      	ldr	r3, [r4, #16]
 8014320:	2104      	movs	r1, #4
 8014322:	68a2      	ldr	r2, [r4, #8]
 8014324:	3304      	adds	r3, #4
 8014326:	7da0      	ldrb	r0, [r4, #22]
 8014328:	444a      	add	r2, r9
 801432a:	7561      	strb	r1, [r4, #21]
 801432c:	1bdb      	subs	r3, r3, r7
 801432e:	f080 0001 	eor.w	r0, r0, #1
 8014332:	60a2      	str	r2, [r4, #8]
 8014334:	6123      	str	r3, [r4, #16]
 8014336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801433a:	2104      	movs	r1, #4
 801433c:	4620      	mov	r0, r4
 801433e:	f000 f9e7 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8014342:	b1b0      	cbz	r0, 8014372 <ucdr_deserialize_float+0xc6>
 8014344:	7d23      	ldrb	r3, [r4, #20]
 8014346:	2b01      	cmp	r3, #1
 8014348:	68a3      	ldr	r3, [r4, #8]
 801434a:	d017      	beq.n	801437c <ucdr_deserialize_float+0xd0>
 801434c:	78db      	ldrb	r3, [r3, #3]
 801434e:	702b      	strb	r3, [r5, #0]
 8014350:	68a3      	ldr	r3, [r4, #8]
 8014352:	789b      	ldrb	r3, [r3, #2]
 8014354:	706b      	strb	r3, [r5, #1]
 8014356:	68a3      	ldr	r3, [r4, #8]
 8014358:	785b      	ldrb	r3, [r3, #1]
 801435a:	70ab      	strb	r3, [r5, #2]
 801435c:	68a3      	ldr	r3, [r4, #8]
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	70eb      	strb	r3, [r5, #3]
 8014362:	2104      	movs	r1, #4
 8014364:	68a2      	ldr	r2, [r4, #8]
 8014366:	6923      	ldr	r3, [r4, #16]
 8014368:	440a      	add	r2, r1
 801436a:	7561      	strb	r1, [r4, #21]
 801436c:	440b      	add	r3, r1
 801436e:	60a2      	str	r2, [r4, #8]
 8014370:	6123      	str	r3, [r4, #16]
 8014372:	7da0      	ldrb	r0, [r4, #22]
 8014374:	f080 0001 	eor.w	r0, r0, #1
 8014378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	602b      	str	r3, [r5, #0]
 8014380:	e7ef      	b.n	8014362 <ucdr_deserialize_float+0xb6>
 8014382:	68a2      	ldr	r2, [r4, #8]
 8014384:	6923      	ldr	r3, [r4, #16]
 8014386:	1bd2      	subs	r2, r2, r7
 8014388:	7da0      	ldrb	r0, [r4, #22]
 801438a:	1bdb      	subs	r3, r3, r7
 801438c:	f884 8015 	strb.w	r8, [r4, #21]
 8014390:	f080 0001 	eor.w	r0, r0, #1
 8014394:	60a2      	str	r2, [r4, #8]
 8014396:	6123      	str	r3, [r4, #16]
 8014398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801439c:	68a3      	ldr	r3, [r4, #8]
 801439e:	789b      	ldrb	r3, [r3, #2]
 80143a0:	706b      	strb	r3, [r5, #1]
 80143a2:	1cab      	adds	r3, r5, #2
 80143a4:	68a2      	ldr	r2, [r4, #8]
 80143a6:	7852      	ldrb	r2, [r2, #1]
 80143a8:	f803 2b01 	strb.w	r2, [r3], #1
 80143ac:	68a2      	ldr	r2, [r4, #8]
 80143ae:	7812      	ldrb	r2, [r2, #0]
 80143b0:	701a      	strb	r2, [r3, #0]
 80143b2:	e7b4      	b.n	801431e <ucdr_deserialize_float+0x72>
 80143b4:	4631      	mov	r1, r6
 80143b6:	463a      	mov	r2, r7
 80143b8:	4628      	mov	r0, r5
 80143ba:	f00c feee 	bl	802119a <memcpy>
 80143be:	464a      	mov	r2, r9
 80143c0:	19e8      	adds	r0, r5, r7
 80143c2:	68a1      	ldr	r1, [r4, #8]
 80143c4:	f00c fee9 	bl	802119a <memcpy>
 80143c8:	e7a9      	b.n	801431e <ucdr_deserialize_float+0x72>
 80143ca:	bf00      	nop

080143cc <ucdr_serialize_double>:
 80143cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143d0:	4604      	mov	r4, r0
 80143d2:	b082      	sub	sp, #8
 80143d4:	2108      	movs	r1, #8
 80143d6:	ed8d 0b00 	vstr	d0, [sp]
 80143da:	f000 f9ed 	bl	80147b8 <ucdr_buffer_alignment>
 80143de:	4601      	mov	r1, r0
 80143e0:	4620      	mov	r0, r4
 80143e2:	7d67      	ldrb	r7, [r4, #21]
 80143e4:	f000 fa30 	bl	8014848 <ucdr_advance_buffer>
 80143e8:	2108      	movs	r1, #8
 80143ea:	4620      	mov	r0, r4
 80143ec:	f000 f984 	bl	80146f8 <ucdr_check_buffer_available_for>
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d14e      	bne.n	8014492 <ucdr_serialize_double+0xc6>
 80143f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80143f8:	42ab      	cmp	r3, r5
 80143fa:	d945      	bls.n	8014488 <ucdr_serialize_double+0xbc>
 80143fc:	1b5e      	subs	r6, r3, r5
 80143fe:	60a3      	str	r3, [r4, #8]
 8014400:	6923      	ldr	r3, [r4, #16]
 8014402:	4620      	mov	r0, r4
 8014404:	f1c6 0808 	rsb	r8, r6, #8
 8014408:	4433      	add	r3, r6
 801440a:	4641      	mov	r1, r8
 801440c:	6123      	str	r3, [r4, #16]
 801440e:	f000 f97f 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8014412:	2800      	cmp	r0, #0
 8014414:	d074      	beq.n	8014500 <ucdr_serialize_double+0x134>
 8014416:	7d23      	ldrb	r3, [r4, #20]
 8014418:	2b01      	cmp	r3, #1
 801441a:	f000 809b 	beq.w	8014554 <ucdr_serialize_double+0x188>
 801441e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014422:	702b      	strb	r3, [r5, #0]
 8014424:	2e00      	cmp	r6, #0
 8014426:	d078      	beq.n	801451a <ucdr_serialize_double+0x14e>
 8014428:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801442c:	2e01      	cmp	r6, #1
 801442e:	706b      	strb	r3, [r5, #1]
 8014430:	d077      	beq.n	8014522 <ucdr_serialize_double+0x156>
 8014432:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014436:	2e02      	cmp	r6, #2
 8014438:	70ab      	strb	r3, [r5, #2]
 801443a:	d076      	beq.n	801452a <ucdr_serialize_double+0x15e>
 801443c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014440:	2e03      	cmp	r6, #3
 8014442:	70eb      	strb	r3, [r5, #3]
 8014444:	d075      	beq.n	8014532 <ucdr_serialize_double+0x166>
 8014446:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801444a:	2e04      	cmp	r6, #4
 801444c:	712b      	strb	r3, [r5, #4]
 801444e:	d074      	beq.n	801453a <ucdr_serialize_double+0x16e>
 8014450:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014454:	2e05      	cmp	r6, #5
 8014456:	716b      	strb	r3, [r5, #5]
 8014458:	d073      	beq.n	8014542 <ucdr_serialize_double+0x176>
 801445a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801445e:	2e06      	cmp	r6, #6
 8014460:	71ab      	strb	r3, [r5, #6]
 8014462:	d072      	beq.n	801454a <ucdr_serialize_double+0x17e>
 8014464:	f89d 3000 	ldrb.w	r3, [sp]
 8014468:	71eb      	strb	r3, [r5, #7]
 801446a:	6923      	ldr	r3, [r4, #16]
 801446c:	2108      	movs	r1, #8
 801446e:	68a2      	ldr	r2, [r4, #8]
 8014470:	3308      	adds	r3, #8
 8014472:	7da0      	ldrb	r0, [r4, #22]
 8014474:	4442      	add	r2, r8
 8014476:	7561      	strb	r1, [r4, #21]
 8014478:	1b9e      	subs	r6, r3, r6
 801447a:	f080 0001 	eor.w	r0, r0, #1
 801447e:	60a2      	str	r2, [r4, #8]
 8014480:	6126      	str	r6, [r4, #16]
 8014482:	b002      	add	sp, #8
 8014484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014488:	2108      	movs	r1, #8
 801448a:	4620      	mov	r0, r4
 801448c:	f000 f940 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8014490:	b350      	cbz	r0, 80144e8 <ucdr_serialize_double+0x11c>
 8014492:	7d23      	ldrb	r3, [r4, #20]
 8014494:	2b01      	cmp	r3, #1
 8014496:	d02d      	beq.n	80144f4 <ucdr_serialize_double+0x128>
 8014498:	68a3      	ldr	r3, [r4, #8]
 801449a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801449e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80144a2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80144a6:	7018      	strb	r0, [r3, #0]
 80144a8:	68a3      	ldr	r3, [r4, #8]
 80144aa:	705a      	strb	r2, [r3, #1]
 80144ac:	68a3      	ldr	r3, [r4, #8]
 80144ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80144b6:	7099      	strb	r1, [r3, #2]
 80144b8:	68a3      	ldr	r3, [r4, #8]
 80144ba:	70da      	strb	r2, [r3, #3]
 80144bc:	68a3      	ldr	r3, [r4, #8]
 80144be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80144c2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80144c6:	7118      	strb	r0, [r3, #4]
 80144c8:	68a3      	ldr	r3, [r4, #8]
 80144ca:	715a      	strb	r2, [r3, #5]
 80144cc:	68a3      	ldr	r3, [r4, #8]
 80144ce:	f89d 2000 	ldrb.w	r2, [sp]
 80144d2:	7199      	strb	r1, [r3, #6]
 80144d4:	68a3      	ldr	r3, [r4, #8]
 80144d6:	71da      	strb	r2, [r3, #7]
 80144d8:	2108      	movs	r1, #8
 80144da:	68a2      	ldr	r2, [r4, #8]
 80144dc:	6923      	ldr	r3, [r4, #16]
 80144de:	440a      	add	r2, r1
 80144e0:	7561      	strb	r1, [r4, #21]
 80144e2:	440b      	add	r3, r1
 80144e4:	60a2      	str	r2, [r4, #8]
 80144e6:	6123      	str	r3, [r4, #16]
 80144e8:	7da0      	ldrb	r0, [r4, #22]
 80144ea:	f080 0001 	eor.w	r0, r0, #1
 80144ee:	b002      	add	sp, #8
 80144f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f4:	466b      	mov	r3, sp
 80144f6:	68a2      	ldr	r2, [r4, #8]
 80144f8:	cb03      	ldmia	r3!, {r0, r1}
 80144fa:	6010      	str	r0, [r2, #0]
 80144fc:	6051      	str	r1, [r2, #4]
 80144fe:	e7eb      	b.n	80144d8 <ucdr_serialize_double+0x10c>
 8014500:	68a2      	ldr	r2, [r4, #8]
 8014502:	6923      	ldr	r3, [r4, #16]
 8014504:	7da0      	ldrb	r0, [r4, #22]
 8014506:	1b92      	subs	r2, r2, r6
 8014508:	1b9b      	subs	r3, r3, r6
 801450a:	7567      	strb	r7, [r4, #21]
 801450c:	f080 0001 	eor.w	r0, r0, #1
 8014510:	60a2      	str	r2, [r4, #8]
 8014512:	6123      	str	r3, [r4, #16]
 8014514:	b002      	add	sp, #8
 8014516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801451a:	68a3      	ldr	r3, [r4, #8]
 801451c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014520:	701a      	strb	r2, [r3, #0]
 8014522:	68a3      	ldr	r3, [r4, #8]
 8014524:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014528:	701a      	strb	r2, [r3, #0]
 801452a:	68a3      	ldr	r3, [r4, #8]
 801452c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014530:	701a      	strb	r2, [r3, #0]
 8014532:	68a3      	ldr	r3, [r4, #8]
 8014534:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014538:	701a      	strb	r2, [r3, #0]
 801453a:	68a3      	ldr	r3, [r4, #8]
 801453c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014540:	701a      	strb	r2, [r3, #0]
 8014542:	68a3      	ldr	r3, [r4, #8]
 8014544:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014548:	701a      	strb	r2, [r3, #0]
 801454a:	68a3      	ldr	r3, [r4, #8]
 801454c:	f89d 2000 	ldrb.w	r2, [sp]
 8014550:	701a      	strb	r2, [r3, #0]
 8014552:	e78a      	b.n	801446a <ucdr_serialize_double+0x9e>
 8014554:	4628      	mov	r0, r5
 8014556:	466d      	mov	r5, sp
 8014558:	4632      	mov	r2, r6
 801455a:	4629      	mov	r1, r5
 801455c:	f00c fe1d 	bl	802119a <memcpy>
 8014560:	4642      	mov	r2, r8
 8014562:	19a9      	adds	r1, r5, r6
 8014564:	68a0      	ldr	r0, [r4, #8]
 8014566:	f00c fe18 	bl	802119a <memcpy>
 801456a:	e77e      	b.n	801446a <ucdr_serialize_double+0x9e>

0801456c <ucdr_deserialize_double>:
 801456c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014570:	4604      	mov	r4, r0
 8014572:	460d      	mov	r5, r1
 8014574:	2108      	movs	r1, #8
 8014576:	f000 f91f 	bl	80147b8 <ucdr_buffer_alignment>
 801457a:	4601      	mov	r1, r0
 801457c:	4620      	mov	r0, r4
 801457e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014582:	f000 f961 	bl	8014848 <ucdr_advance_buffer>
 8014586:	2108      	movs	r1, #8
 8014588:	4620      	mov	r0, r4
 801458a:	f000 f8b5 	bl	80146f8 <ucdr_check_buffer_available_for>
 801458e:	2800      	cmp	r0, #0
 8014590:	d151      	bne.n	8014636 <ucdr_deserialize_double+0xca>
 8014592:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014596:	42be      	cmp	r6, r7
 8014598:	d948      	bls.n	801462c <ucdr_deserialize_double+0xc0>
 801459a:	6923      	ldr	r3, [r4, #16]
 801459c:	4620      	mov	r0, r4
 801459e:	60a6      	str	r6, [r4, #8]
 80145a0:	1bf6      	subs	r6, r6, r7
 80145a2:	4433      	add	r3, r6
 80145a4:	f1c6 0908 	rsb	r9, r6, #8
 80145a8:	6123      	str	r3, [r4, #16]
 80145aa:	4649      	mov	r1, r9
 80145ac:	f000 f8b0 	bl	8014710 <ucdr_check_final_buffer_behavior>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d06d      	beq.n	8014690 <ucdr_deserialize_double+0x124>
 80145b4:	7d23      	ldrb	r3, [r4, #20]
 80145b6:	2b01      	cmp	r3, #1
 80145b8:	f000 8093 	beq.w	80146e2 <ucdr_deserialize_double+0x176>
 80145bc:	79fb      	ldrb	r3, [r7, #7]
 80145be:	702b      	strb	r3, [r5, #0]
 80145c0:	2e00      	cmp	r6, #0
 80145c2:	d072      	beq.n	80146aa <ucdr_deserialize_double+0x13e>
 80145c4:	79bb      	ldrb	r3, [r7, #6]
 80145c6:	2e01      	cmp	r6, #1
 80145c8:	706b      	strb	r3, [r5, #1]
 80145ca:	f105 0302 	add.w	r3, r5, #2
 80145ce:	d070      	beq.n	80146b2 <ucdr_deserialize_double+0x146>
 80145d0:	797b      	ldrb	r3, [r7, #5]
 80145d2:	2e02      	cmp	r6, #2
 80145d4:	70ab      	strb	r3, [r5, #2]
 80145d6:	f105 0303 	add.w	r3, r5, #3
 80145da:	d06e      	beq.n	80146ba <ucdr_deserialize_double+0x14e>
 80145dc:	793b      	ldrb	r3, [r7, #4]
 80145de:	2e03      	cmp	r6, #3
 80145e0:	70eb      	strb	r3, [r5, #3]
 80145e2:	f105 0304 	add.w	r3, r5, #4
 80145e6:	d06c      	beq.n	80146c2 <ucdr_deserialize_double+0x156>
 80145e8:	78fb      	ldrb	r3, [r7, #3]
 80145ea:	2e04      	cmp	r6, #4
 80145ec:	712b      	strb	r3, [r5, #4]
 80145ee:	f105 0305 	add.w	r3, r5, #5
 80145f2:	d06a      	beq.n	80146ca <ucdr_deserialize_double+0x15e>
 80145f4:	78bb      	ldrb	r3, [r7, #2]
 80145f6:	2e05      	cmp	r6, #5
 80145f8:	716b      	strb	r3, [r5, #5]
 80145fa:	f105 0306 	add.w	r3, r5, #6
 80145fe:	d068      	beq.n	80146d2 <ucdr_deserialize_double+0x166>
 8014600:	787b      	ldrb	r3, [r7, #1]
 8014602:	2e06      	cmp	r6, #6
 8014604:	71ab      	strb	r3, [r5, #6]
 8014606:	f105 0307 	add.w	r3, r5, #7
 801460a:	d066      	beq.n	80146da <ucdr_deserialize_double+0x16e>
 801460c:	783b      	ldrb	r3, [r7, #0]
 801460e:	71eb      	strb	r3, [r5, #7]
 8014610:	6923      	ldr	r3, [r4, #16]
 8014612:	2108      	movs	r1, #8
 8014614:	68a2      	ldr	r2, [r4, #8]
 8014616:	3308      	adds	r3, #8
 8014618:	7da0      	ldrb	r0, [r4, #22]
 801461a:	444a      	add	r2, r9
 801461c:	7561      	strb	r1, [r4, #21]
 801461e:	1b9e      	subs	r6, r3, r6
 8014620:	f080 0001 	eor.w	r0, r0, #1
 8014624:	60a2      	str	r2, [r4, #8]
 8014626:	6126      	str	r6, [r4, #16]
 8014628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801462c:	2108      	movs	r1, #8
 801462e:	4620      	mov	r0, r4
 8014630:	f000 f86e 	bl	8014710 <ucdr_check_final_buffer_behavior>
 8014634:	b310      	cbz	r0, 801467c <ucdr_deserialize_double+0x110>
 8014636:	7d23      	ldrb	r3, [r4, #20]
 8014638:	2b01      	cmp	r3, #1
 801463a:	68a3      	ldr	r3, [r4, #8]
 801463c:	d023      	beq.n	8014686 <ucdr_deserialize_double+0x11a>
 801463e:	79db      	ldrb	r3, [r3, #7]
 8014640:	702b      	strb	r3, [r5, #0]
 8014642:	68a3      	ldr	r3, [r4, #8]
 8014644:	799b      	ldrb	r3, [r3, #6]
 8014646:	706b      	strb	r3, [r5, #1]
 8014648:	68a3      	ldr	r3, [r4, #8]
 801464a:	795b      	ldrb	r3, [r3, #5]
 801464c:	70ab      	strb	r3, [r5, #2]
 801464e:	68a3      	ldr	r3, [r4, #8]
 8014650:	791b      	ldrb	r3, [r3, #4]
 8014652:	70eb      	strb	r3, [r5, #3]
 8014654:	68a3      	ldr	r3, [r4, #8]
 8014656:	78db      	ldrb	r3, [r3, #3]
 8014658:	712b      	strb	r3, [r5, #4]
 801465a:	68a3      	ldr	r3, [r4, #8]
 801465c:	789b      	ldrb	r3, [r3, #2]
 801465e:	716b      	strb	r3, [r5, #5]
 8014660:	68a3      	ldr	r3, [r4, #8]
 8014662:	785b      	ldrb	r3, [r3, #1]
 8014664:	71ab      	strb	r3, [r5, #6]
 8014666:	68a3      	ldr	r3, [r4, #8]
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	71eb      	strb	r3, [r5, #7]
 801466c:	2108      	movs	r1, #8
 801466e:	68a2      	ldr	r2, [r4, #8]
 8014670:	6923      	ldr	r3, [r4, #16]
 8014672:	440a      	add	r2, r1
 8014674:	7561      	strb	r1, [r4, #21]
 8014676:	440b      	add	r3, r1
 8014678:	60a2      	str	r2, [r4, #8]
 801467a:	6123      	str	r3, [r4, #16]
 801467c:	7da0      	ldrb	r0, [r4, #22]
 801467e:	f080 0001 	eor.w	r0, r0, #1
 8014682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	602a      	str	r2, [r5, #0]
 801468c:	606b      	str	r3, [r5, #4]
 801468e:	e7ed      	b.n	801466c <ucdr_deserialize_double+0x100>
 8014690:	68a2      	ldr	r2, [r4, #8]
 8014692:	6923      	ldr	r3, [r4, #16]
 8014694:	1b92      	subs	r2, r2, r6
 8014696:	7da0      	ldrb	r0, [r4, #22]
 8014698:	1b9b      	subs	r3, r3, r6
 801469a:	f884 8015 	strb.w	r8, [r4, #21]
 801469e:	f080 0001 	eor.w	r0, r0, #1
 80146a2:	60a2      	str	r2, [r4, #8]
 80146a4:	6123      	str	r3, [r4, #16]
 80146a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146aa:	68a3      	ldr	r3, [r4, #8]
 80146ac:	799b      	ldrb	r3, [r3, #6]
 80146ae:	706b      	strb	r3, [r5, #1]
 80146b0:	1cab      	adds	r3, r5, #2
 80146b2:	68a2      	ldr	r2, [r4, #8]
 80146b4:	7952      	ldrb	r2, [r2, #5]
 80146b6:	f803 2b01 	strb.w	r2, [r3], #1
 80146ba:	68a2      	ldr	r2, [r4, #8]
 80146bc:	7912      	ldrb	r2, [r2, #4]
 80146be:	f803 2b01 	strb.w	r2, [r3], #1
 80146c2:	68a2      	ldr	r2, [r4, #8]
 80146c4:	78d2      	ldrb	r2, [r2, #3]
 80146c6:	f803 2b01 	strb.w	r2, [r3], #1
 80146ca:	68a2      	ldr	r2, [r4, #8]
 80146cc:	7892      	ldrb	r2, [r2, #2]
 80146ce:	f803 2b01 	strb.w	r2, [r3], #1
 80146d2:	68a2      	ldr	r2, [r4, #8]
 80146d4:	7852      	ldrb	r2, [r2, #1]
 80146d6:	f803 2b01 	strb.w	r2, [r3], #1
 80146da:	68a2      	ldr	r2, [r4, #8]
 80146dc:	7812      	ldrb	r2, [r2, #0]
 80146de:	701a      	strb	r2, [r3, #0]
 80146e0:	e796      	b.n	8014610 <ucdr_deserialize_double+0xa4>
 80146e2:	4639      	mov	r1, r7
 80146e4:	4632      	mov	r2, r6
 80146e6:	4628      	mov	r0, r5
 80146e8:	f00c fd57 	bl	802119a <memcpy>
 80146ec:	464a      	mov	r2, r9
 80146ee:	19a8      	adds	r0, r5, r6
 80146f0:	68a1      	ldr	r1, [r4, #8]
 80146f2:	f00c fd52 	bl	802119a <memcpy>
 80146f6:	e78b      	b.n	8014610 <ucdr_deserialize_double+0xa4>

080146f8 <ucdr_check_buffer_available_for>:
 80146f8:	7d83      	ldrb	r3, [r0, #22]
 80146fa:	b93b      	cbnz	r3, 801470c <ucdr_check_buffer_available_for+0x14>
 80146fc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8014700:	4419      	add	r1, r3
 8014702:	4288      	cmp	r0, r1
 8014704:	bf34      	ite	cc
 8014706:	2000      	movcc	r0, #0
 8014708:	2001      	movcs	r0, #1
 801470a:	4770      	bx	lr
 801470c:	2000      	movs	r0, #0
 801470e:	4770      	bx	lr

08014710 <ucdr_check_final_buffer_behavior>:
 8014710:	7d83      	ldrb	r3, [r0, #22]
 8014712:	b943      	cbnz	r3, 8014726 <ucdr_check_final_buffer_behavior+0x16>
 8014714:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8014718:	b510      	push	{r4, lr}
 801471a:	4291      	cmp	r1, r2
 801471c:	4604      	mov	r4, r0
 801471e:	d205      	bcs.n	801472c <ucdr_check_final_buffer_behavior+0x1c>
 8014720:	2301      	movs	r3, #1
 8014722:	4618      	mov	r0, r3
 8014724:	bd10      	pop	{r4, pc}
 8014726:	2300      	movs	r3, #0
 8014728:	4618      	mov	r0, r3
 801472a:	4770      	bx	lr
 801472c:	6982      	ldr	r2, [r0, #24]
 801472e:	b13a      	cbz	r2, 8014740 <ucdr_check_final_buffer_behavior+0x30>
 8014730:	69c1      	ldr	r1, [r0, #28]
 8014732:	4790      	blx	r2
 8014734:	f080 0301 	eor.w	r3, r0, #1
 8014738:	75a0      	strb	r0, [r4, #22]
 801473a:	b2db      	uxtb	r3, r3
 801473c:	4618      	mov	r0, r3
 801473e:	bd10      	pop	{r4, pc}
 8014740:	2001      	movs	r0, #1
 8014742:	75a0      	strb	r0, [r4, #22]
 8014744:	e7fa      	b.n	801473c <ucdr_check_final_buffer_behavior+0x2c>
 8014746:	bf00      	nop

08014748 <ucdr_set_on_full_buffer_callback>:
 8014748:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop

08014750 <ucdr_init_buffer_origin_offset_endian>:
 8014750:	b410      	push	{r4}
 8014752:	9c01      	ldr	r4, [sp, #4]
 8014754:	440a      	add	r2, r1
 8014756:	6001      	str	r1, [r0, #0]
 8014758:	6042      	str	r2, [r0, #4]
 801475a:	190a      	adds	r2, r1, r4
 801475c:	441c      	add	r4, r3
 801475e:	6082      	str	r2, [r0, #8]
 8014760:	2200      	movs	r2, #0
 8014762:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8014766:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801476a:	7542      	strb	r2, [r0, #21]
 801476c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014770:	7582      	strb	r2, [r0, #22]
 8014772:	7503      	strb	r3, [r0, #20]
 8014774:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop

0801477c <ucdr_init_buffer_origin_offset>:
 801477c:	b510      	push	{r4, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	9c04      	ldr	r4, [sp, #16]
 8014782:	9400      	str	r4, [sp, #0]
 8014784:	2401      	movs	r4, #1
 8014786:	9401      	str	r4, [sp, #4]
 8014788:	f7ff ffe2 	bl	8014750 <ucdr_init_buffer_origin_offset_endian>
 801478c:	b002      	add	sp, #8
 801478e:	bd10      	pop	{r4, pc}

08014790 <ucdr_init_buffer_origin>:
 8014790:	b510      	push	{r4, lr}
 8014792:	2400      	movs	r4, #0
 8014794:	b082      	sub	sp, #8
 8014796:	9400      	str	r4, [sp, #0]
 8014798:	f7ff fff0 	bl	801477c <ucdr_init_buffer_origin_offset>
 801479c:	b002      	add	sp, #8
 801479e:	bd10      	pop	{r4, pc}

080147a0 <ucdr_init_buffer>:
 80147a0:	2300      	movs	r3, #0
 80147a2:	f7ff bff5 	b.w	8014790 <ucdr_init_buffer_origin>
 80147a6:	bf00      	nop

080147a8 <ucdr_alignment>:
 80147a8:	fbb0 f2f1 	udiv	r2, r0, r1
 80147ac:	fb02 0011 	mls	r0, r2, r1, r0
 80147b0:	1e4b      	subs	r3, r1, #1
 80147b2:	1a08      	subs	r0, r1, r0
 80147b4:	4018      	ands	r0, r3
 80147b6:	4770      	bx	lr

080147b8 <ucdr_buffer_alignment>:
 80147b8:	7d43      	ldrb	r3, [r0, #21]
 80147ba:	428b      	cmp	r3, r1
 80147bc:	d209      	bcs.n	80147d2 <ucdr_buffer_alignment+0x1a>
 80147be:	6903      	ldr	r3, [r0, #16]
 80147c0:	1e4a      	subs	r2, r1, #1
 80147c2:	fbb3 f0f1 	udiv	r0, r3, r1
 80147c6:	fb01 3010 	mls	r0, r1, r0, r3
 80147ca:	1a09      	subs	r1, r1, r0
 80147cc:	ea01 0002 	and.w	r0, r1, r2
 80147d0:	4770      	bx	lr
 80147d2:	2000      	movs	r0, #0
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop

080147d8 <ucdr_align_to>:
 80147d8:	b538      	push	{r3, r4, r5, lr}
 80147da:	4604      	mov	r4, r0
 80147dc:	460d      	mov	r5, r1
 80147de:	f7ff ffeb 	bl	80147b8 <ucdr_buffer_alignment>
 80147e2:	68a3      	ldr	r3, [r4, #8]
 80147e4:	7565      	strb	r5, [r4, #21]
 80147e6:	181a      	adds	r2, r3, r0
 80147e8:	6923      	ldr	r3, [r4, #16]
 80147ea:	4418      	add	r0, r3
 80147ec:	6863      	ldr	r3, [r4, #4]
 80147ee:	4293      	cmp	r3, r2
 80147f0:	6120      	str	r0, [r4, #16]
 80147f2:	bf28      	it	cs
 80147f4:	4613      	movcs	r3, r2
 80147f6:	60a3      	str	r3, [r4, #8]
 80147f8:	bd38      	pop	{r3, r4, r5, pc}
 80147fa:	bf00      	nop

080147fc <ucdr_buffer_length>:
 80147fc:	6882      	ldr	r2, [r0, #8]
 80147fe:	6800      	ldr	r0, [r0, #0]
 8014800:	1a10      	subs	r0, r2, r0
 8014802:	4770      	bx	lr

08014804 <ucdr_buffer_remaining>:
 8014804:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8014808:	1a10      	subs	r0, r2, r0
 801480a:	4770      	bx	lr

0801480c <ucdr_check_final_buffer_behavior_array>:
 801480c:	b538      	push	{r3, r4, r5, lr}
 801480e:	7d83      	ldrb	r3, [r0, #22]
 8014810:	b9a3      	cbnz	r3, 801483c <ucdr_check_final_buffer_behavior_array+0x30>
 8014812:	4604      	mov	r4, r0
 8014814:	460d      	mov	r5, r1
 8014816:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801481a:	429a      	cmp	r2, r3
 801481c:	d300      	bcc.n	8014820 <ucdr_check_final_buffer_behavior_array+0x14>
 801481e:	b931      	cbnz	r1, 801482e <ucdr_check_final_buffer_behavior_array+0x22>
 8014820:	4620      	mov	r0, r4
 8014822:	f7ff ffef 	bl	8014804 <ucdr_buffer_remaining>
 8014826:	42a8      	cmp	r0, r5
 8014828:	bf28      	it	cs
 801482a:	4628      	movcs	r0, r5
 801482c:	bd38      	pop	{r3, r4, r5, pc}
 801482e:	6983      	ldr	r3, [r0, #24]
 8014830:	b133      	cbz	r3, 8014840 <ucdr_check_final_buffer_behavior_array+0x34>
 8014832:	69c1      	ldr	r1, [r0, #28]
 8014834:	4798      	blx	r3
 8014836:	75a0      	strb	r0, [r4, #22]
 8014838:	2800      	cmp	r0, #0
 801483a:	d0f1      	beq.n	8014820 <ucdr_check_final_buffer_behavior_array+0x14>
 801483c:	2000      	movs	r0, #0
 801483e:	bd38      	pop	{r3, r4, r5, pc}
 8014840:	2301      	movs	r3, #1
 8014842:	7583      	strb	r3, [r0, #22]
 8014844:	e7fa      	b.n	801483c <ucdr_check_final_buffer_behavior_array+0x30>
 8014846:	bf00      	nop

08014848 <ucdr_advance_buffer>:
 8014848:	b538      	push	{r3, r4, r5, lr}
 801484a:	4604      	mov	r4, r0
 801484c:	460d      	mov	r5, r1
 801484e:	f7ff ff53 	bl	80146f8 <ucdr_check_buffer_available_for>
 8014852:	b178      	cbz	r0, 8014874 <ucdr_advance_buffer+0x2c>
 8014854:	6923      	ldr	r3, [r4, #16]
 8014856:	68a2      	ldr	r2, [r4, #8]
 8014858:	442b      	add	r3, r5
 801485a:	442a      	add	r2, r5
 801485c:	6123      	str	r3, [r4, #16]
 801485e:	2301      	movs	r3, #1
 8014860:	60a2      	str	r2, [r4, #8]
 8014862:	7563      	strb	r3, [r4, #21]
 8014864:	bd38      	pop	{r3, r4, r5, pc}
 8014866:	68a2      	ldr	r2, [r4, #8]
 8014868:	1a2d      	subs	r5, r5, r0
 801486a:	6923      	ldr	r3, [r4, #16]
 801486c:	4402      	add	r2, r0
 801486e:	4418      	add	r0, r3
 8014870:	60a2      	str	r2, [r4, #8]
 8014872:	6120      	str	r0, [r4, #16]
 8014874:	4629      	mov	r1, r5
 8014876:	2201      	movs	r2, #1
 8014878:	4620      	mov	r0, r4
 801487a:	f7ff ffc7 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801487e:	2800      	cmp	r0, #0
 8014880:	d1f1      	bne.n	8014866 <ucdr_advance_buffer+0x1e>
 8014882:	2301      	movs	r3, #1
 8014884:	7563      	strb	r3, [r4, #21]
 8014886:	bd38      	pop	{r3, r4, r5, pc}

08014888 <rcl_get_zero_initialized_init_options>:
 8014888:	2000      	movs	r0, #0
 801488a:	4770      	bx	lr

0801488c <rcl_init_options_init>:
 801488c:	b084      	sub	sp, #16
 801488e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014890:	b097      	sub	sp, #92	; 0x5c
 8014892:	ae1d      	add	r6, sp, #116	; 0x74
 8014894:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8014898:	2800      	cmp	r0, #0
 801489a:	d058      	beq.n	801494e <rcl_init_options_init+0xc2>
 801489c:	6803      	ldr	r3, [r0, #0]
 801489e:	4605      	mov	r5, r0
 80148a0:	b133      	cbz	r3, 80148b0 <rcl_init_options_init+0x24>
 80148a2:	2464      	movs	r4, #100	; 0x64
 80148a4:	4620      	mov	r0, r4
 80148a6:	b017      	add	sp, #92	; 0x5c
 80148a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80148ac:	b004      	add	sp, #16
 80148ae:	4770      	bx	lr
 80148b0:	4630      	mov	r0, r6
 80148b2:	f001 fbbb 	bl	801602c <rcutils_allocator_is_valid>
 80148b6:	2800      	cmp	r0, #0
 80148b8:	d049      	beq.n	801494e <rcl_init_options_init+0xc2>
 80148ba:	46b4      	mov	ip, r6
 80148bc:	ac11      	add	r4, sp, #68	; 0x44
 80148be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148c4:	f8dc 3000 	ldr.w	r3, [ip]
 80148c8:	2050      	movs	r0, #80	; 0x50
 80148ca:	9921      	ldr	r1, [sp, #132]	; 0x84
 80148cc:	6023      	str	r3, [r4, #0]
 80148ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148d0:	4798      	blx	r3
 80148d2:	4604      	mov	r4, r0
 80148d4:	6028      	str	r0, [r5, #0]
 80148d6:	2800      	cmp	r0, #0
 80148d8:	d03b      	beq.n	8014952 <rcl_init_options_init+0xc6>
 80148da:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80148de:	4686      	mov	lr, r0
 80148e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148e8:	f8dc 3000 	ldr.w	r3, [ip]
 80148ec:	a802      	add	r0, sp, #8
 80148ee:	f8ce 3000 	str.w	r3, [lr]
 80148f2:	f001 fdb9 	bl	8016468 <rmw_get_zero_initialized_init_options>
 80148f6:	f10d 0e08 	add.w	lr, sp, #8
 80148fa:	f104 0c18 	add.w	ip, r4, #24
 80148fe:	682f      	ldr	r7, [r5, #0]
 8014900:	ac20      	add	r4, sp, #128	; 0x80
 8014902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801490a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801490e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014916:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801491a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801491e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014926:	e88d 0003 	stmia.w	sp, {r0, r1}
 801492a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801492e:	f107 0018 	add.w	r0, r7, #24
 8014932:	f001 ff01 	bl	8016738 <rmw_init_options_init>
 8014936:	4604      	mov	r4, r0
 8014938:	2800      	cmp	r0, #0
 801493a:	d0b3      	beq.n	80148a4 <rcl_init_options_init+0x18>
 801493c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801493e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014940:	6828      	ldr	r0, [r5, #0]
 8014942:	4798      	blx	r3
 8014944:	4620      	mov	r0, r4
 8014946:	f006 ff55 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801494a:	4604      	mov	r4, r0
 801494c:	e7aa      	b.n	80148a4 <rcl_init_options_init+0x18>
 801494e:	240b      	movs	r4, #11
 8014950:	e7a8      	b.n	80148a4 <rcl_init_options_init+0x18>
 8014952:	240a      	movs	r4, #10
 8014954:	e7a6      	b.n	80148a4 <rcl_init_options_init+0x18>
 8014956:	bf00      	nop

08014958 <rcl_init_options_fini>:
 8014958:	b530      	push	{r4, r5, lr}
 801495a:	b087      	sub	sp, #28
 801495c:	b1f0      	cbz	r0, 801499c <rcl_init_options_fini+0x44>
 801495e:	6803      	ldr	r3, [r0, #0]
 8014960:	4604      	mov	r4, r0
 8014962:	b1db      	cbz	r3, 801499c <rcl_init_options_fini+0x44>
 8014964:	469c      	mov	ip, r3
 8014966:	f10d 0e04 	add.w	lr, sp, #4
 801496a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801496e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014972:	f8dc 3000 	ldr.w	r3, [ip]
 8014976:	a801      	add	r0, sp, #4
 8014978:	f8ce 3000 	str.w	r3, [lr]
 801497c:	f001 fb56 	bl	801602c <rcutils_allocator_is_valid>
 8014980:	b160      	cbz	r0, 801499c <rcl_init_options_fini+0x44>
 8014982:	6820      	ldr	r0, [r4, #0]
 8014984:	3018      	adds	r0, #24
 8014986:	f001 ff91 	bl	80168ac <rmw_init_options_fini>
 801498a:	4605      	mov	r5, r0
 801498c:	b950      	cbnz	r0, 80149a4 <rcl_init_options_fini+0x4c>
 801498e:	6820      	ldr	r0, [r4, #0]
 8014990:	9b02      	ldr	r3, [sp, #8]
 8014992:	9905      	ldr	r1, [sp, #20]
 8014994:	4798      	blx	r3
 8014996:	4628      	mov	r0, r5
 8014998:	b007      	add	sp, #28
 801499a:	bd30      	pop	{r4, r5, pc}
 801499c:	250b      	movs	r5, #11
 801499e:	4628      	mov	r0, r5
 80149a0:	b007      	add	sp, #28
 80149a2:	bd30      	pop	{r4, r5, pc}
 80149a4:	f006 ff26 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80149a8:	4605      	mov	r5, r0
 80149aa:	e7f8      	b.n	801499e <rcl_init_options_fini+0x46>

080149ac <rcl_init_options_copy>:
 80149ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b0:	b094      	sub	sp, #80	; 0x50
 80149b2:	2800      	cmp	r0, #0
 80149b4:	d05b      	beq.n	8014a6e <rcl_init_options_copy+0xc2>
 80149b6:	4604      	mov	r4, r0
 80149b8:	6800      	ldr	r0, [r0, #0]
 80149ba:	2800      	cmp	r0, #0
 80149bc:	d057      	beq.n	8014a6e <rcl_init_options_copy+0xc2>
 80149be:	460e      	mov	r6, r1
 80149c0:	f001 fb34 	bl	801602c <rcutils_allocator_is_valid>
 80149c4:	2e00      	cmp	r6, #0
 80149c6:	d052      	beq.n	8014a6e <rcl_init_options_copy+0xc2>
 80149c8:	f080 0001 	eor.w	r0, r0, #1
 80149cc:	b2c0      	uxtb	r0, r0
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d14d      	bne.n	8014a6e <rcl_init_options_copy+0xc2>
 80149d2:	6833      	ldr	r3, [r6, #0]
 80149d4:	b123      	cbz	r3, 80149e0 <rcl_init_options_copy+0x34>
 80149d6:	2464      	movs	r4, #100	; 0x64
 80149d8:	4620      	mov	r0, r4
 80149da:	b014      	add	sp, #80	; 0x50
 80149dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e0:	6827      	ldr	r7, [r4, #0]
 80149e2:	ad0f      	add	r5, sp, #60	; 0x3c
 80149e4:	46bc      	mov	ip, r7
 80149e6:	f8d7 8000 	ldr.w	r8, [r7]
 80149ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149f0:	f8dc 3000 	ldr.w	r3, [ip]
 80149f4:	2050      	movs	r0, #80	; 0x50
 80149f6:	4619      	mov	r1, r3
 80149f8:	602b      	str	r3, [r5, #0]
 80149fa:	47c0      	blx	r8
 80149fc:	4605      	mov	r5, r0
 80149fe:	6030      	str	r0, [r6, #0]
 8014a00:	b3d0      	cbz	r0, 8014a78 <rcl_init_options_copy+0xcc>
 8014a02:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8014a06:	4686      	mov	lr, r0
 8014a08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a10:	f8dc 3000 	ldr.w	r3, [ip]
 8014a14:	4668      	mov	r0, sp
 8014a16:	f8ce 3000 	str.w	r3, [lr]
 8014a1a:	f001 fd25 	bl	8016468 <rmw_get_zero_initialized_init_options>
 8014a1e:	46ee      	mov	lr, sp
 8014a20:	f105 0c18 	add.w	ip, r5, #24
 8014a24:	6824      	ldr	r4, [r4, #0]
 8014a26:	6835      	ldr	r5, [r6, #0]
 8014a28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a40:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014a44:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014a48:	f104 0018 	add.w	r0, r4, #24
 8014a4c:	f105 0118 	add.w	r1, r5, #24
 8014a50:	f001 feda 	bl	8016808 <rmw_init_options_copy>
 8014a54:	4604      	mov	r4, r0
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d0be      	beq.n	80149d8 <rcl_init_options_copy+0x2c>
 8014a5a:	f001 fb0d 	bl	8016078 <rcutils_get_error_string>
 8014a5e:	f001 fb23 	bl	80160a8 <rcutils_reset_error>
 8014a62:	4630      	mov	r0, r6
 8014a64:	f7ff ff78 	bl	8014958 <rcl_init_options_fini>
 8014a68:	b140      	cbz	r0, 8014a7c <rcl_init_options_copy+0xd0>
 8014a6a:	4604      	mov	r4, r0
 8014a6c:	e7b4      	b.n	80149d8 <rcl_init_options_copy+0x2c>
 8014a6e:	240b      	movs	r4, #11
 8014a70:	4620      	mov	r0, r4
 8014a72:	b014      	add	sp, #80	; 0x50
 8014a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a78:	240a      	movs	r4, #10
 8014a7a:	e7ad      	b.n	80149d8 <rcl_init_options_copy+0x2c>
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	b014      	add	sp, #80	; 0x50
 8014a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a84:	f006 beb6 	b.w	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>

08014a88 <rcl_init_options_set_domain_id>:
 8014a88:	b120      	cbz	r0, 8014a94 <rcl_init_options_set_domain_id+0xc>
 8014a8a:	6803      	ldr	r3, [r0, #0]
 8014a8c:	b113      	cbz	r3, 8014a94 <rcl_init_options_set_domain_id+0xc>
 8014a8e:	2000      	movs	r0, #0
 8014a90:	6259      	str	r1, [r3, #36]	; 0x24
 8014a92:	4770      	bx	lr
 8014a94:	200b      	movs	r0, #11
 8014a96:	4770      	bx	lr

08014a98 <rcl_get_zero_initialized_node>:
 8014a98:	4a03      	ldr	r2, [pc, #12]	; (8014aa8 <rcl_get_zero_initialized_node+0x10>)
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014aa0:	e883 0003 	stmia.w	r3, {r0, r1}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	4770      	bx	lr
 8014aa8:	08022788 	.word	0x08022788

08014aac <rcl_node_init>:
 8014aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab0:	b0a9      	sub	sp, #164	; 0xa4
 8014ab2:	4604      	mov	r4, r0
 8014ab4:	460e      	mov	r6, r1
 8014ab6:	4615      	mov	r5, r2
 8014ab8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8014abc:	a823      	add	r0, sp, #140	; 0x8c
 8014abe:	461f      	mov	r7, r3
 8014ac0:	f006 ffa8 	bl	801ba14 <rcl_guard_condition_get_default_options>
 8014ac4:	f1b8 0f00 	cmp.w	r8, #0
 8014ac8:	f000 80f3 	beq.w	8014cb2 <rcl_node_init+0x206>
 8014acc:	4640      	mov	r0, r8
 8014ace:	f001 faad 	bl	801602c <rcutils_allocator_is_valid>
 8014ad2:	2d00      	cmp	r5, #0
 8014ad4:	bf18      	it	ne
 8014ad6:	2c00      	cmpne	r4, #0
 8014ad8:	f080 0001 	eor.w	r0, r0, #1
 8014adc:	bf0c      	ite	eq
 8014ade:	f04f 0c01 	moveq.w	ip, #1
 8014ae2:	f04f 0c00 	movne.w	ip, #0
 8014ae6:	2e00      	cmp	r6, #0
 8014ae8:	bf08      	it	eq
 8014aea:	f04c 0c01 	orreq.w	ip, ip, #1
 8014aee:	ea4c 0c00 	orr.w	ip, ip, r0
 8014af2:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8014af6:	f040 80dc 	bne.w	8014cb2 <rcl_node_init+0x206>
 8014afa:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014afe:	f1ba 0f00 	cmp.w	sl, #0
 8014b02:	f040 80fc 	bne.w	8014cfe <rcl_node_init+0x252>
 8014b06:	2f00      	cmp	r7, #0
 8014b08:	f000 80d3 	beq.w	8014cb2 <rcl_node_init+0x206>
 8014b0c:	4638      	mov	r0, r7
 8014b0e:	f006 fe8f 	bl	801b830 <rcl_context_is_valid>
 8014b12:	4683      	mov	fp, r0
 8014b14:	2800      	cmp	r0, #0
 8014b16:	f000 80d2 	beq.w	8014cbe <rcl_node_init+0x212>
 8014b1a:	4652      	mov	r2, sl
 8014b1c:	4630      	mov	r0, r6
 8014b1e:	a922      	add	r1, sp, #136	; 0x88
 8014b20:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8014b24:	f001 fd4e 	bl	80165c4 <rmw_validate_node_name>
 8014b28:	4682      	mov	sl, r0
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	f040 80c3 	bne.w	8014cb6 <rcl_node_init+0x20a>
 8014b30:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014b32:	2800      	cmp	r0, #0
 8014b34:	f040 80f1 	bne.w	8014d1a <rcl_node_init+0x26e>
 8014b38:	4628      	mov	r0, r5
 8014b3a:	f7eb fb8b 	bl	8000254 <strlen>
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f040 80c0 	bne.w	8014cc4 <rcl_node_init+0x218>
 8014b44:	4d79      	ldr	r5, [pc, #484]	; (8014d2c <rcl_node_init+0x280>)
 8014b46:	a922      	add	r1, sp, #136	; 0x88
 8014b48:	2200      	movs	r2, #0
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f001 fd1c 	bl	8016588 <rmw_validate_namespace>
 8014b50:	4682      	mov	sl, r0
 8014b52:	2800      	cmp	r0, #0
 8014b54:	f040 80af 	bne.w	8014cb6 <rcl_node_init+0x20a>
 8014b58:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014b5a:	2800      	cmp	r0, #0
 8014b5c:	f040 80d5 	bne.w	8014d0a <rcl_node_init+0x25e>
 8014b60:	f8d8 3000 	ldr.w	r3, [r8]
 8014b64:	2078      	movs	r0, #120	; 0x78
 8014b66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b6a:	4798      	blx	r3
 8014b6c:	4682      	mov	sl, r0
 8014b6e:	6060      	str	r0, [r4, #4]
 8014b70:	2800      	cmp	r0, #0
 8014b72:	f000 80cf 	beq.w	8014d14 <rcl_node_init+0x268>
 8014b76:	2200      	movs	r2, #0
 8014b78:	2300      	movs	r3, #0
 8014b7a:	a808      	add	r0, sp, #32
 8014b7c:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8014b80:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8014b84:	f000 f934 	bl	8014df0 <rcl_node_get_default_options>
 8014b88:	a908      	add	r1, sp, #32
 8014b8a:	4650      	mov	r0, sl
 8014b8c:	2268      	movs	r2, #104	; 0x68
 8014b8e:	f00c fb04 	bl	802119a <memcpy>
 8014b92:	6861      	ldr	r1, [r4, #4]
 8014b94:	4640      	mov	r0, r8
 8014b96:	6027      	str	r7, [r4, #0]
 8014b98:	f000 f938 	bl	8014e0c <rcl_node_options_copy>
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d158      	bne.n	8014c52 <rcl_node_init+0x1a6>
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	f7eb fb57 	bl	8000254 <strlen>
 8014ba6:	4428      	add	r0, r5
 8014ba8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014bac:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014bb0:	2b2f      	cmp	r3, #47	; 0x2f
 8014bb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014bb6:	9300      	str	r3, [sp, #0]
 8014bb8:	bf0c      	ite	eq
 8014bba:	4b5d      	ldreq	r3, [pc, #372]	; (8014d30 <rcl_node_init+0x284>)
 8014bbc:	4b5d      	ldrne	r3, [pc, #372]	; (8014d34 <rcl_node_init+0x288>)
 8014bbe:	9302      	str	r3, [sp, #8]
 8014bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014bc4:	9301      	str	r3, [sp, #4]
 8014bc6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014bca:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014bce:	f001 fa87 	bl	80160e0 <rcutils_format_string_limit>
 8014bd2:	6823      	ldr	r3, [r4, #0]
 8014bd4:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8014bd8:	4631      	mov	r1, r6
 8014bda:	6818      	ldr	r0, [r3, #0]
 8014bdc:	462a      	mov	r2, r5
 8014bde:	6866      	ldr	r6, [r4, #4]
 8014be0:	3028      	adds	r0, #40	; 0x28
 8014be2:	f002 f88f 	bl	8016d04 <rmw_create_node>
 8014be6:	6863      	ldr	r3, [r4, #4]
 8014be8:	66b0      	str	r0, [r6, #104]	; 0x68
 8014bea:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d032      	beq.n	8014c56 <rcl_node_init+0x1aa>
 8014bf0:	f002 f918 	bl	8016e24 <rmw_node_get_graph_guard_condition>
 8014bf4:	4682      	mov	sl, r0
 8014bf6:	b360      	cbz	r0, 8014c52 <rcl_node_init+0x1a6>
 8014bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8014bfc:	2008      	movs	r0, #8
 8014bfe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c02:	6866      	ldr	r6, [r4, #4]
 8014c04:	4798      	blx	r3
 8014c06:	6863      	ldr	r3, [r4, #4]
 8014c08:	66f0      	str	r0, [r6, #108]	; 0x6c
 8014c0a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8014c0e:	f1bb 0f00 	cmp.w	fp, #0
 8014c12:	d020      	beq.n	8014c56 <rcl_node_init+0x1aa>
 8014c14:	a806      	add	r0, sp, #24
 8014c16:	ae23      	add	r6, sp, #140	; 0x8c
 8014c18:	f006 fe70 	bl	801b8fc <rcl_get_zero_initialized_guard_condition>
 8014c1c:	a806      	add	r0, sp, #24
 8014c1e:	6863      	ldr	r3, [r4, #4]
 8014c20:	46c4      	mov	ip, r8
 8014c22:	c803      	ldmia	r0, {r0, r1}
 8014c24:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8014c28:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014c2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014c32:	f8dc 3000 	ldr.w	r3, [ip]
 8014c36:	6033      	str	r3, [r6, #0]
 8014c38:	ab28      	add	r3, sp, #160	; 0xa0
 8014c3a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014c3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c42:	4651      	mov	r1, sl
 8014c44:	463a      	mov	r2, r7
 8014c46:	4670      	mov	r0, lr
 8014c48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c4a:	f006 fe61 	bl	801b910 <rcl_guard_condition_init_from_rmw>
 8014c4e:	4682      	mov	sl, r0
 8014c50:	b328      	cbz	r0, 8014c9e <rcl_node_init+0x1f2>
 8014c52:	6863      	ldr	r3, [r4, #4]
 8014c54:	b1f3      	cbz	r3, 8014c94 <rcl_node_init+0x1e8>
 8014c56:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014c58:	b128      	cbz	r0, 8014c66 <rcl_node_init+0x1ba>
 8014c5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c5e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c62:	4798      	blx	r3
 8014c64:	6863      	ldr	r3, [r4, #4]
 8014c66:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014c68:	b110      	cbz	r0, 8014c70 <rcl_node_init+0x1c4>
 8014c6a:	f002 f85d 	bl	8016d28 <rmw_destroy_node>
 8014c6e:	6863      	ldr	r3, [r4, #4]
 8014c70:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8014c72:	b148      	cbz	r0, 8014c88 <rcl_node_init+0x1dc>
 8014c74:	f006 fea8 	bl	801b9c8 <rcl_guard_condition_fini>
 8014c78:	6863      	ldr	r3, [r4, #4]
 8014c7a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c7e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8014c80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c84:	4798      	blx	r3
 8014c86:	6863      	ldr	r3, [r4, #4]
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c92:	4798      	blx	r3
 8014c94:	2300      	movs	r3, #0
 8014c96:	f04f 0a01 	mov.w	sl, #1
 8014c9a:	e9c4 3300 	strd	r3, r3, [r4]
 8014c9e:	f1b9 0f00 	cmp.w	r9, #0
 8014ca2:	d008      	beq.n	8014cb6 <rcl_node_init+0x20a>
 8014ca4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cae:	4798      	blx	r3
 8014cb0:	e001      	b.n	8014cb6 <rcl_node_init+0x20a>
 8014cb2:	f04f 0a0b 	mov.w	sl, #11
 8014cb6:	4650      	mov	r0, sl
 8014cb8:	b029      	add	sp, #164	; 0xa4
 8014cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cbe:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8014cc2:	e7f8      	b.n	8014cb6 <rcl_node_init+0x20a>
 8014cc4:	782b      	ldrb	r3, [r5, #0]
 8014cc6:	2b2f      	cmp	r3, #47	; 0x2f
 8014cc8:	f43f af3d 	beq.w	8014b46 <rcl_node_init+0x9a>
 8014ccc:	9503      	str	r5, [sp, #12]
 8014cce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	4b18      	ldr	r3, [pc, #96]	; (8014d38 <rcl_node_init+0x28c>)
 8014cd6:	9302      	str	r3, [sp, #8]
 8014cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014cdc:	9301      	str	r3, [sp, #4]
 8014cde:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014ce2:	f001 f9fd 	bl	80160e0 <rcutils_format_string_limit>
 8014ce6:	4605      	mov	r5, r0
 8014ce8:	b1e0      	cbz	r0, 8014d24 <rcl_node_init+0x278>
 8014cea:	2200      	movs	r2, #0
 8014cec:	a922      	add	r1, sp, #136	; 0x88
 8014cee:	9222      	str	r2, [sp, #136]	; 0x88
 8014cf0:	f001 fc4a 	bl	8016588 <rmw_validate_namespace>
 8014cf4:	4682      	mov	sl, r0
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	d1d4      	bne.n	8014ca4 <rcl_node_init+0x1f8>
 8014cfa:	46d9      	mov	r9, fp
 8014cfc:	e72c      	b.n	8014b58 <rcl_node_init+0xac>
 8014cfe:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8014d02:	4650      	mov	r0, sl
 8014d04:	b029      	add	sp, #164	; 0xa4
 8014d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0a:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8014d0e:	f001 fc4d 	bl	80165ac <rmw_namespace_validation_result_string>
 8014d12:	e7c4      	b.n	8014c9e <rcl_node_init+0x1f2>
 8014d14:	f04f 0a0a 	mov.w	sl, #10
 8014d18:	e7c1      	b.n	8014c9e <rcl_node_init+0x1f2>
 8014d1a:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8014d1e:	f001 fca5 	bl	801666c <rmw_node_name_validation_result_string>
 8014d22:	e7c8      	b.n	8014cb6 <rcl_node_init+0x20a>
 8014d24:	f04f 0a0a 	mov.w	sl, #10
 8014d28:	e7c5      	b.n	8014cb6 <rcl_node_init+0x20a>
 8014d2a:	bf00      	nop
 8014d2c:	08022770 	.word	0x08022770
 8014d30:	08022778 	.word	0x08022778
 8014d34:	08022780 	.word	0x08022780
 8014d38:	08022774 	.word	0x08022774

08014d3c <rcl_node_fini>:
 8014d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3e:	b320      	cbz	r0, 8014d8a <rcl_node_fini+0x4e>
 8014d40:	6845      	ldr	r5, [r0, #4]
 8014d42:	4604      	mov	r4, r0
 8014d44:	b1fd      	cbz	r5, 8014d86 <rcl_node_fini+0x4a>
 8014d46:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8014d48:	686f      	ldr	r7, [r5, #4]
 8014d4a:	692e      	ldr	r6, [r5, #16]
 8014d4c:	f001 ffec 	bl	8016d28 <rmw_destroy_node>
 8014d50:	6863      	ldr	r3, [r4, #4]
 8014d52:	4605      	mov	r5, r0
 8014d54:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8014d56:	f006 fe37 	bl	801b9c8 <rcl_guard_condition_fini>
 8014d5a:	ea55 0300 	orrs.w	r3, r5, r0
 8014d5e:	6863      	ldr	r3, [r4, #4]
 8014d60:	4631      	mov	r1, r6
 8014d62:	bf14      	ite	ne
 8014d64:	2501      	movne	r5, #1
 8014d66:	2500      	moveq	r5, #0
 8014d68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8014d6a:	47b8      	blx	r7
 8014d6c:	6863      	ldr	r3, [r4, #4]
 8014d6e:	4631      	mov	r1, r6
 8014d70:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014d72:	47b8      	blx	r7
 8014d74:	6863      	ldr	r3, [r4, #4]
 8014d76:	4631      	mov	r1, r6
 8014d78:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014d7a:	47b8      	blx	r7
 8014d7c:	4631      	mov	r1, r6
 8014d7e:	6860      	ldr	r0, [r4, #4]
 8014d80:	47b8      	blx	r7
 8014d82:	2300      	movs	r3, #0
 8014d84:	6063      	str	r3, [r4, #4]
 8014d86:	4628      	mov	r0, r5
 8014d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d8a:	25c8      	movs	r5, #200	; 0xc8
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d90 <rcl_node_is_valid_except_context>:
 8014d90:	b128      	cbz	r0, 8014d9e <rcl_node_is_valid_except_context+0xe>
 8014d92:	6840      	ldr	r0, [r0, #4]
 8014d94:	b118      	cbz	r0, 8014d9e <rcl_node_is_valid_except_context+0xe>
 8014d96:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014d98:	3800      	subs	r0, #0
 8014d9a:	bf18      	it	ne
 8014d9c:	2001      	movne	r0, #1
 8014d9e:	4770      	bx	lr

08014da0 <rcl_node_is_valid>:
 8014da0:	b130      	cbz	r0, 8014db0 <rcl_node_is_valid+0x10>
 8014da2:	6843      	ldr	r3, [r0, #4]
 8014da4:	b123      	cbz	r3, 8014db0 <rcl_node_is_valid+0x10>
 8014da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014da8:	b113      	cbz	r3, 8014db0 <rcl_node_is_valid+0x10>
 8014daa:	6800      	ldr	r0, [r0, #0]
 8014dac:	f006 bd40 	b.w	801b830 <rcl_context_is_valid>
 8014db0:	2000      	movs	r0, #0
 8014db2:	4770      	bx	lr

08014db4 <rcl_node_get_name>:
 8014db4:	b120      	cbz	r0, 8014dc0 <rcl_node_get_name+0xc>
 8014db6:	6840      	ldr	r0, [r0, #4]
 8014db8:	b110      	cbz	r0, 8014dc0 <rcl_node_get_name+0xc>
 8014dba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014dbc:	b100      	cbz	r0, 8014dc0 <rcl_node_get_name+0xc>
 8014dbe:	6880      	ldr	r0, [r0, #8]
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop

08014dc4 <rcl_node_get_namespace>:
 8014dc4:	b120      	cbz	r0, 8014dd0 <rcl_node_get_namespace+0xc>
 8014dc6:	6840      	ldr	r0, [r0, #4]
 8014dc8:	b110      	cbz	r0, 8014dd0 <rcl_node_get_namespace+0xc>
 8014dca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014dcc:	b100      	cbz	r0, 8014dd0 <rcl_node_get_namespace+0xc>
 8014dce:	68c0      	ldr	r0, [r0, #12]
 8014dd0:	4770      	bx	lr
 8014dd2:	bf00      	nop

08014dd4 <rcl_node_get_options>:
 8014dd4:	b128      	cbz	r0, 8014de2 <rcl_node_get_options+0xe>
 8014dd6:	6840      	ldr	r0, [r0, #4]
 8014dd8:	b118      	cbz	r0, 8014de2 <rcl_node_get_options+0xe>
 8014dda:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	bf08      	it	eq
 8014de0:	2000      	moveq	r0, #0
 8014de2:	4770      	bx	lr

08014de4 <rcl_node_get_rmw_handle>:
 8014de4:	b110      	cbz	r0, 8014dec <rcl_node_get_rmw_handle+0x8>
 8014de6:	6840      	ldr	r0, [r0, #4]
 8014de8:	b100      	cbz	r0, 8014dec <rcl_node_get_rmw_handle+0x8>
 8014dea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014dec:	4770      	bx	lr
 8014dee:	bf00      	nop

08014df0 <rcl_node_get_default_options>:
 8014df0:	b510      	push	{r4, lr}
 8014df2:	4604      	mov	r4, r0
 8014df4:	2268      	movs	r2, #104	; 0x68
 8014df6:	2100      	movs	r1, #0
 8014df8:	f00c f906 	bl	8021008 <memset>
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f001 f907 	bl	8016010 <rcutils_get_default_allocator>
 8014e02:	2301      	movs	r3, #1
 8014e04:	4620      	mov	r0, r4
 8014e06:	7523      	strb	r3, [r4, #20]
 8014e08:	bd10      	pop	{r4, pc}
 8014e0a:	bf00      	nop

08014e0c <rcl_node_options_copy>:
 8014e0c:	2800      	cmp	r0, #0
 8014e0e:	bf18      	it	ne
 8014e10:	4288      	cmpne	r0, r1
 8014e12:	d01b      	beq.n	8014e4c <rcl_node_options_copy+0x40>
 8014e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e16:	fab1 f681 	clz	r6, r1
 8014e1a:	460c      	mov	r4, r1
 8014e1c:	0976      	lsrs	r6, r6, #5
 8014e1e:	b199      	cbz	r1, 8014e48 <rcl_node_options_copy+0x3c>
 8014e20:	4605      	mov	r5, r0
 8014e22:	8a87      	ldrh	r7, [r0, #20]
 8014e24:	4684      	mov	ip, r0
 8014e26:	468e      	mov	lr, r1
 8014e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e2e:	682b      	ldr	r3, [r5, #0]
 8014e30:	2250      	movs	r2, #80	; 0x50
 8014e32:	f10c 0118 	add.w	r1, ip, #24
 8014e36:	f104 0018 	add.w	r0, r4, #24
 8014e3a:	f8ce 3000 	str.w	r3, [lr]
 8014e3e:	82a7      	strh	r7, [r4, #20]
 8014e40:	f00c f9ab 	bl	802119a <memcpy>
 8014e44:	4630      	mov	r0, r6
 8014e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e48:	200b      	movs	r0, #11
 8014e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e4c:	200b      	movs	r0, #11
 8014e4e:	4770      	bx	lr

08014e50 <rcl_get_zero_initialized_subscription>:
 8014e50:	4b01      	ldr	r3, [pc, #4]	; (8014e58 <rcl_get_zero_initialized_subscription+0x8>)
 8014e52:	6818      	ldr	r0, [r3, #0]
 8014e54:	4770      	bx	lr
 8014e56:	bf00      	nop
 8014e58:	08022790 	.word	0x08022790

08014e5c <rcl_subscription_init>:
 8014e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e60:	b088      	sub	sp, #32
 8014e62:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014e64:	b1ff      	cbz	r7, 8014ea6 <rcl_subscription_init+0x4a>
 8014e66:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8014e6a:	4605      	mov	r5, r0
 8014e6c:	460e      	mov	r6, r1
 8014e6e:	4691      	mov	r9, r2
 8014e70:	4650      	mov	r0, sl
 8014e72:	4698      	mov	r8, r3
 8014e74:	f001 f8da 	bl	801602c <rcutils_allocator_is_valid>
 8014e78:	f080 0401 	eor.w	r4, r0, #1
 8014e7c:	b2e4      	uxtb	r4, r4
 8014e7e:	b994      	cbnz	r4, 8014ea6 <rcl_subscription_init+0x4a>
 8014e80:	b18d      	cbz	r5, 8014ea6 <rcl_subscription_init+0x4a>
 8014e82:	4630      	mov	r0, r6
 8014e84:	f7ff ff8c 	bl	8014da0 <rcl_node_is_valid>
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	d055      	beq.n	8014f38 <rcl_subscription_init+0xdc>
 8014e8c:	f1b9 0f00 	cmp.w	r9, #0
 8014e90:	d009      	beq.n	8014ea6 <rcl_subscription_init+0x4a>
 8014e92:	f1b8 0f00 	cmp.w	r8, #0
 8014e96:	d006      	beq.n	8014ea6 <rcl_subscription_init+0x4a>
 8014e98:	682b      	ldr	r3, [r5, #0]
 8014e9a:	b14b      	cbz	r3, 8014eb0 <rcl_subscription_init+0x54>
 8014e9c:	2464      	movs	r4, #100	; 0x64
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	b008      	add	sp, #32
 8014ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ea6:	240b      	movs	r4, #11
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	b008      	add	sp, #32
 8014eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eb0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014eb4:	aa07      	add	r2, sp, #28
 8014eb6:	9307      	str	r3, [sp, #28]
 8014eb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014ebc:	9205      	str	r2, [sp, #20]
 8014ebe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014ec2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014ec6:	4641      	mov	r1, r8
 8014ec8:	4630      	mov	r0, r6
 8014eca:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8014ece:	f006 feeb 	bl	801bca8 <rcl_node_resolve_name>
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	d15f      	bne.n	8014f96 <rcl_subscription_init+0x13a>
 8014ed6:	21c8      	movs	r1, #200	; 0xc8
 8014ed8:	2001      	movs	r0, #1
 8014eda:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8014ede:	4798      	blx	r3
 8014ee0:	6028      	str	r0, [r5, #0]
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d05f      	beq.n	8014fa6 <rcl_subscription_init+0x14a>
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	f7ff ff7c 	bl	8014de4 <rcl_node_get_rmw_handle>
 8014eec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014ef0:	4649      	mov	r1, r9
 8014ef2:	9a07      	ldr	r2, [sp, #28]
 8014ef4:	9300      	str	r3, [sp, #0]
 8014ef6:	463b      	mov	r3, r7
 8014ef8:	682c      	ldr	r4, [r5, #0]
 8014efa:	f002 f831 	bl	8016f60 <rmw_create_subscription>
 8014efe:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8014f02:	682c      	ldr	r4, [r5, #0]
 8014f04:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8014f08:	b348      	cbz	r0, 8014f5e <rcl_subscription_init+0x102>
 8014f0a:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8014f0e:	f002 f91d 	bl	801714c <rmw_subscription_get_actual_qos>
 8014f12:	4604      	mov	r4, r0
 8014f14:	b9a8      	cbnz	r0, 8014f42 <rcl_subscription_init+0xe6>
 8014f16:	6828      	ldr	r0, [r5, #0]
 8014f18:	2270      	movs	r2, #112	; 0x70
 8014f1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8014f1e:	4639      	mov	r1, r7
 8014f20:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8014f24:	f00c f939 	bl	802119a <memcpy>
 8014f28:	9807      	ldr	r0, [sp, #28]
 8014f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014f2e:	4798      	blx	r3
 8014f30:	4620      	mov	r0, r4
 8014f32:	b008      	add	sp, #32
 8014f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f38:	24c8      	movs	r4, #200	; 0xc8
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	b008      	add	sp, #32
 8014f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f42:	682c      	ldr	r4, [r5, #0]
 8014f44:	b36c      	cbz	r4, 8014fa2 <rcl_subscription_init+0x146>
 8014f46:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8014f4a:	b14b      	cbz	r3, 8014f60 <rcl_subscription_init+0x104>
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	f7ff ff49 	bl	8014de4 <rcl_node_get_rmw_handle>
 8014f52:	682b      	ldr	r3, [r5, #0]
 8014f54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8014f58:	f002 f90c 	bl	8017174 <rmw_destroy_subscription>
 8014f5c:	682c      	ldr	r4, [r5, #0]
 8014f5e:	b194      	cbz	r4, 8014f86 <rcl_subscription_init+0x12a>
 8014f60:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8014f64:	4630      	mov	r0, r6
 8014f66:	f001 f861 	bl	801602c <rcutils_allocator_is_valid>
 8014f6a:	b158      	cbz	r0, 8014f84 <rcl_subscription_init+0x128>
 8014f6c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8014f6e:	b148      	cbz	r0, 8014f84 <rcl_subscription_init+0x128>
 8014f70:	4631      	mov	r1, r6
 8014f72:	f001 fa8d 	bl	8016490 <rmw_subscription_content_filter_options_fini>
 8014f76:	4606      	mov	r6, r0
 8014f78:	b9c8      	cbnz	r0, 8014fae <rcl_subscription_init+0x152>
 8014f7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014f7c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014f7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8014f80:	4798      	blx	r3
 8014f82:	66e6      	str	r6, [r4, #108]	; 0x6c
 8014f84:	682c      	ldr	r4, [r5, #0]
 8014f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f88:	4620      	mov	r0, r4
 8014f8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014f8c:	2401      	movs	r4, #1
 8014f8e:	4798      	blx	r3
 8014f90:	2300      	movs	r3, #0
 8014f92:	602b      	str	r3, [r5, #0]
 8014f94:	e7c8      	b.n	8014f28 <rcl_subscription_init+0xcc>
 8014f96:	2867      	cmp	r0, #103	; 0x67
 8014f98:	d007      	beq.n	8014faa <rcl_subscription_init+0x14e>
 8014f9a:	2869      	cmp	r0, #105	; 0x69
 8014f9c:	d005      	beq.n	8014faa <rcl_subscription_init+0x14e>
 8014f9e:	280a      	cmp	r0, #10
 8014fa0:	d001      	beq.n	8014fa6 <rcl_subscription_init+0x14a>
 8014fa2:	2401      	movs	r4, #1
 8014fa4:	e7c0      	b.n	8014f28 <rcl_subscription_init+0xcc>
 8014fa6:	240a      	movs	r4, #10
 8014fa8:	e7be      	b.n	8014f28 <rcl_subscription_init+0xcc>
 8014faa:	2467      	movs	r4, #103	; 0x67
 8014fac:	e7bc      	b.n	8014f28 <rcl_subscription_init+0xcc>
 8014fae:	f006 fc21 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014fb2:	682c      	ldr	r4, [r5, #0]
 8014fb4:	e7e7      	b.n	8014f86 <rcl_subscription_init+0x12a>
 8014fb6:	bf00      	nop

08014fb8 <rcl_subscription_fini>:
 8014fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	d039      	beq.n	8015034 <rcl_subscription_fini+0x7c>
 8014fc0:	4604      	mov	r4, r0
 8014fc2:	4608      	mov	r0, r1
 8014fc4:	460d      	mov	r5, r1
 8014fc6:	f7ff fee3 	bl	8014d90 <rcl_node_is_valid_except_context>
 8014fca:	2800      	cmp	r0, #0
 8014fcc:	d037      	beq.n	801503e <rcl_subscription_fini+0x86>
 8014fce:	6823      	ldr	r3, [r4, #0]
 8014fd0:	b363      	cbz	r3, 801502c <rcl_subscription_fini+0x74>
 8014fd2:	4628      	mov	r0, r5
 8014fd4:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 8014fd6:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8014fda:	f7ff ff03 	bl	8014de4 <rcl_node_get_rmw_handle>
 8014fde:	b390      	cbz	r0, 8015046 <rcl_subscription_fini+0x8e>
 8014fe0:	6823      	ldr	r3, [r4, #0]
 8014fe2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8014fe6:	f002 f8c5 	bl	8017174 <rmw_destroy_subscription>
 8014fea:	6826      	ldr	r6, [r4, #0]
 8014fec:	1e05      	subs	r5, r0, #0
 8014fee:	bf18      	it	ne
 8014ff0:	2501      	movne	r5, #1
 8014ff2:	b37e      	cbz	r6, 8015054 <rcl_subscription_fini+0x9c>
 8014ff4:	f106 0950 	add.w	r9, r6, #80	; 0x50
 8014ff8:	4648      	mov	r0, r9
 8014ffa:	f001 f817 	bl	801602c <rcutils_allocator_is_valid>
 8014ffe:	b358      	cbz	r0, 8015058 <rcl_subscription_fini+0xa0>
 8015000:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8015002:	b150      	cbz	r0, 801501a <rcl_subscription_fini+0x62>
 8015004:	4649      	mov	r1, r9
 8015006:	f001 fa43 	bl	8016490 <rmw_subscription_content_filter_options_fini>
 801500a:	4681      	mov	r9, r0
 801500c:	b9e8      	cbnz	r0, 801504a <rcl_subscription_fini+0x92>
 801500e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8015010:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8015012:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8015014:	4798      	blx	r3
 8015016:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
 801501a:	6826      	ldr	r6, [r4, #0]
 801501c:	4630      	mov	r0, r6
 801501e:	4641      	mov	r1, r8
 8015020:	47b8      	blx	r7
 8015022:	2300      	movs	r3, #0
 8015024:	4628      	mov	r0, r5
 8015026:	6023      	str	r3, [r4, #0]
 8015028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801502c:	461d      	mov	r5, r3
 801502e:	4628      	mov	r0, r5
 8015030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015034:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8015038:	4628      	mov	r0, r5
 801503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801503e:	25c8      	movs	r5, #200	; 0xc8
 8015040:	4628      	mov	r0, r5
 8015042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015046:	250b      	movs	r5, #11
 8015048:	e7f1      	b.n	801502e <rcl_subscription_fini+0x76>
 801504a:	f006 fbd3 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801504e:	6826      	ldr	r6, [r4, #0]
 8015050:	2800      	cmp	r0, #0
 8015052:	d0e3      	beq.n	801501c <rcl_subscription_fini+0x64>
 8015054:	2501      	movs	r5, #1
 8015056:	e7e1      	b.n	801501c <rcl_subscription_fini+0x64>
 8015058:	6826      	ldr	r6, [r4, #0]
 801505a:	2501      	movs	r5, #1
 801505c:	e7de      	b.n	801501c <rcl_subscription_fini+0x64>
 801505e:	bf00      	nop

08015060 <rcl_subscription_get_default_options>:
 8015060:	b570      	push	{r4, r5, r6, lr}
 8015062:	4d14      	ldr	r5, [pc, #80]	; (80150b4 <rcl_subscription_get_default_options+0x54>)
 8015064:	b08a      	sub	sp, #40	; 0x28
 8015066:	4604      	mov	r4, r0
 8015068:	2250      	movs	r2, #80	; 0x50
 801506a:	4913      	ldr	r1, [pc, #76]	; (80150b8 <rcl_subscription_get_default_options+0x58>)
 801506c:	4628      	mov	r0, r5
 801506e:	f00c f894 	bl	802119a <memcpy>
 8015072:	a804      	add	r0, sp, #16
 8015074:	f000 ffcc 	bl	8016010 <rcutils_get_default_allocator>
 8015078:	f10d 0c10 	add.w	ip, sp, #16
 801507c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8015080:	466e      	mov	r6, sp
 8015082:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015086:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801508a:	f8dc 3000 	ldr.w	r3, [ip]
 801508e:	4630      	mov	r0, r6
 8015090:	f8ce 3000 	str.w	r3, [lr]
 8015094:	f001 fa16 	bl	80164c4 <rmw_get_default_subscription_options>
 8015098:	f105 0364 	add.w	r3, r5, #100	; 0x64
 801509c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80150a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80150a4:	2270      	movs	r2, #112	; 0x70
 80150a6:	4629      	mov	r1, r5
 80150a8:	4620      	mov	r0, r4
 80150aa:	f00c f876 	bl	802119a <memcpy>
 80150ae:	4620      	mov	r0, r4
 80150b0:	b00a      	add	sp, #40	; 0x28
 80150b2:	bd70      	pop	{r4, r5, r6, pc}
 80150b4:	20012e78 	.word	0x20012e78
 80150b8:	08022798 	.word	0x08022798

080150bc <rcl_take>:
 80150bc:	2800      	cmp	r0, #0
 80150be:	d049      	beq.n	8015154 <rcl_take+0x98>
 80150c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c4:	4615      	mov	r5, r2
 80150c6:	6802      	ldr	r2, [r0, #0]
 80150c8:	b0a4      	sub	sp, #144	; 0x90
 80150ca:	4604      	mov	r4, r0
 80150cc:	2a00      	cmp	r2, #0
 80150ce:	d039      	beq.n	8015144 <rcl_take+0x88>
 80150d0:	461f      	mov	r7, r3
 80150d2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80150d6:	b3ab      	cbz	r3, 8015144 <rcl_take+0x88>
 80150d8:	460e      	mov	r6, r1
 80150da:	2900      	cmp	r1, #0
 80150dc:	d038      	beq.n	8015150 <rcl_take+0x94>
 80150de:	2d00      	cmp	r5, #0
 80150e0:	d03c      	beq.n	801515c <rcl_take+0xa0>
 80150e2:	a802      	add	r0, sp, #8
 80150e4:	f04f 0800 	mov.w	r8, #0
 80150e8:	f001 f9f2 	bl	80164d0 <rmw_get_zero_initialized_message_info>
 80150ec:	f10d 0c08 	add.w	ip, sp, #8
 80150f0:	46ae      	mov	lr, r5
 80150f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80150f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80150fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80150fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015102:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015106:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801510a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801510e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8015112:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8015116:	462b      	mov	r3, r5
 8015118:	6820      	ldr	r0, [r4, #0]
 801511a:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801511e:	4631      	mov	r1, r6
 8015120:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8015124:	9700      	str	r7, [sp, #0]
 8015126:	f002 f887 	bl	8017238 <rmw_take_with_info>
 801512a:	4603      	mov	r3, r0
 801512c:	b9c0      	cbnz	r0, 8015160 <rcl_take+0xa4>
 801512e:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8015132:	f240 1291 	movw	r2, #401	; 0x191
 8015136:	2900      	cmp	r1, #0
 8015138:	bf08      	it	eq
 801513a:	4613      	moveq	r3, r2
 801513c:	4618      	mov	r0, r3
 801513e:	b024      	add	sp, #144	; 0x90
 8015140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015144:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015148:	4618      	mov	r0, r3
 801514a:	b024      	add	sp, #144	; 0x90
 801514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015150:	230b      	movs	r3, #11
 8015152:	e7f3      	b.n	801513c <rcl_take+0x80>
 8015154:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015158:	4618      	mov	r0, r3
 801515a:	4770      	bx	lr
 801515c:	ad14      	add	r5, sp, #80	; 0x50
 801515e:	e7c0      	b.n	80150e2 <rcl_take+0x26>
 8015160:	f006 fb48 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015164:	4603      	mov	r3, r0
 8015166:	e7e9      	b.n	801513c <rcl_take+0x80>

08015168 <rcl_subscription_get_rmw_handle>:
 8015168:	b118      	cbz	r0, 8015172 <rcl_subscription_get_rmw_handle+0xa>
 801516a:	6800      	ldr	r0, [r0, #0]
 801516c:	b108      	cbz	r0, 8015172 <rcl_subscription_get_rmw_handle+0xa>
 801516e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8015172:	4770      	bx	lr

08015174 <rcl_subscription_is_valid>:
 8015174:	b130      	cbz	r0, 8015184 <rcl_subscription_is_valid+0x10>
 8015176:	6800      	ldr	r0, [r0, #0]
 8015178:	b120      	cbz	r0, 8015184 <rcl_subscription_is_valid+0x10>
 801517a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801517e:	3800      	subs	r0, #0
 8015180:	bf18      	it	ne
 8015182:	2001      	movne	r0, #1
 8015184:	4770      	bx	lr
 8015186:	bf00      	nop

08015188 <_rclc_check_for_new_data>:
 8015188:	2800      	cmp	r0, #0
 801518a:	d046      	beq.n	801521a <_rclc_check_for_new_data+0x92>
 801518c:	4603      	mov	r3, r0
 801518e:	b530      	push	{r4, r5, lr}
 8015190:	7802      	ldrb	r2, [r0, #0]
 8015192:	b085      	sub	sp, #20
 8015194:	2a0a      	cmp	r2, #10
 8015196:	d842      	bhi.n	801521e <_rclc_check_for_new_data+0x96>
 8015198:	e8df f002 	tbb	[pc, r2]
 801519c:	14181212 	.word	0x14181212
 80151a0:	06060614 	.word	0x06060614
 80151a4:	2e1a      	.short	0x2e1a
 80151a6:	16          	.byte	0x16
 80151a7:	00          	.byte	0x00
 80151a8:	6a0a      	ldr	r2, [r1, #32]
 80151aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80151ac:	2000      	movs	r0, #0
 80151ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80151b2:	1a12      	subs	r2, r2, r0
 80151b4:	bf18      	it	ne
 80151b6:	2201      	movne	r2, #1
 80151b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80151bc:	b005      	add	sp, #20
 80151be:	bd30      	pop	{r4, r5, pc}
 80151c0:	680a      	ldr	r2, [r1, #0]
 80151c2:	e7f2      	b.n	80151aa <_rclc_check_for_new_data+0x22>
 80151c4:	698a      	ldr	r2, [r1, #24]
 80151c6:	e7f0      	b.n	80151aa <_rclc_check_for_new_data+0x22>
 80151c8:	688a      	ldr	r2, [r1, #8]
 80151ca:	e7ee      	b.n	80151aa <_rclc_check_for_new_data+0x22>
 80151cc:	690a      	ldr	r2, [r1, #16]
 80151ce:	e7ec      	b.n	80151aa <_rclc_check_for_new_data+0x22>
 80151d0:	685c      	ldr	r4, [r3, #4]
 80151d2:	4608      	mov	r0, r1
 80151d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80151d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151e0:	f104 0110 	add.w	r1, r4, #16
 80151e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80151e8:	9500      	str	r5, [sp, #0]
 80151ea:	f104 0341 	add.w	r3, r4, #65	; 0x41
 80151ee:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80151f2:	f008 f92d 	bl	801d450 <rcl_action_client_wait_set_get_entities_ready>
 80151f6:	e7e1      	b.n	80151bc <_rclc_check_for_new_data+0x34>
 80151f8:	685c      	ldr	r4, [r3, #4]
 80151fa:	4608      	mov	r0, r1
 80151fc:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8015200:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015204:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8015208:	e9cd 2100 	strd	r2, r1, [sp]
 801520c:	f104 0220 	add.w	r2, r4, #32
 8015210:	f104 0110 	add.w	r1, r4, #16
 8015214:	f008 fb34 	bl	801d880 <rcl_action_server_wait_set_get_entities_ready>
 8015218:	e7d0      	b.n	80151bc <_rclc_check_for_new_data+0x34>
 801521a:	200b      	movs	r0, #11
 801521c:	4770      	bx	lr
 801521e:	2001      	movs	r0, #1
 8015220:	e7cc      	b.n	80151bc <_rclc_check_for_new_data+0x34>
 8015222:	bf00      	nop

08015224 <_rclc_take_new_data>:
 8015224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015226:	b09b      	sub	sp, #108	; 0x6c
 8015228:	2800      	cmp	r0, #0
 801522a:	f000 8088 	beq.w	801533e <_rclc_take_new_data+0x11a>
 801522e:	7803      	ldrb	r3, [r0, #0]
 8015230:	4604      	mov	r4, r0
 8015232:	2b0a      	cmp	r3, #10
 8015234:	f200 8167 	bhi.w	8015506 <_rclc_take_new_data+0x2e2>
 8015238:	e8df f003 	tbb	[pc, r3]
 801523c:	44152d2d 	.word	0x44152d2d
 8015240:	19191944 	.word	0x19191944
 8015244:	065a      	.short	0x065a
 8015246:	15          	.byte	0x15
 8015247:	00          	.byte	0x00
 8015248:	6840      	ldr	r0, [r0, #4]
 801524a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801524e:	2b00      	cmp	r3, #0
 8015250:	f040 80b2 	bne.w	80153b8 <_rclc_take_new_data+0x194>
 8015254:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8015258:	2b00      	cmp	r3, #0
 801525a:	f040 80e4 	bne.w	8015426 <_rclc_take_new_data+0x202>
 801525e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8015262:	2b00      	cmp	r3, #0
 8015264:	d16f      	bne.n	8015346 <_rclc_take_new_data+0x122>
 8015266:	2500      	movs	r5, #0
 8015268:	4628      	mov	r0, r5
 801526a:	b01b      	add	sp, #108	; 0x6c
 801526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801526e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015270:	6a0b      	ldr	r3, [r1, #32]
 8015272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d0f5      	beq.n	8015266 <_rclc_take_new_data+0x42>
 801527a:	6882      	ldr	r2, [r0, #8]
 801527c:	f100 0110 	add.w	r1, r0, #16
 8015280:	6840      	ldr	r0, [r0, #4]
 8015282:	f006 feeb 	bl	801c05c <rcl_take_request>
 8015286:	4605      	mov	r5, r0
 8015288:	2800      	cmp	r0, #0
 801528a:	d0ec      	beq.n	8015266 <_rclc_take_new_data+0x42>
 801528c:	f240 2359 	movw	r3, #601	; 0x259
 8015290:	4298      	cmp	r0, r3
 8015292:	d013      	beq.n	80152bc <_rclc_take_new_data+0x98>
 8015294:	e029      	b.n	80152ea <_rclc_take_new_data+0xc6>
 8015296:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015298:	680b      	ldr	r3, [r1, #0]
 801529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d0e1      	beq.n	8015266 <_rclc_take_new_data+0x42>
 80152a2:	2300      	movs	r3, #0
 80152a4:	aa0a      	add	r2, sp, #40	; 0x28
 80152a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80152aa:	f7ff ff07 	bl	80150bc <rcl_take>
 80152ae:	4605      	mov	r5, r0
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d0d9      	beq.n	8015268 <_rclc_take_new_data+0x44>
 80152b4:	f240 1391 	movw	r3, #401	; 0x191
 80152b8:	4298      	cmp	r0, r3
 80152ba:	d116      	bne.n	80152ea <_rclc_take_new_data+0xc6>
 80152bc:	2300      	movs	r3, #0
 80152be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80152c2:	e7d1      	b.n	8015268 <_rclc_take_new_data+0x44>
 80152c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80152c6:	698b      	ldr	r3, [r1, #24]
 80152c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d0ca      	beq.n	8015266 <_rclc_take_new_data+0x42>
 80152d0:	6882      	ldr	r2, [r0, #8]
 80152d2:	f100 0110 	add.w	r1, r0, #16
 80152d6:	6840      	ldr	r0, [r0, #4]
 80152d8:	f006 fa3a 	bl	801b750 <rcl_take_response>
 80152dc:	4605      	mov	r5, r0
 80152de:	2800      	cmp	r0, #0
 80152e0:	d0c1      	beq.n	8015266 <_rclc_take_new_data+0x42>
 80152e2:	f240 13f5 	movw	r3, #501	; 0x1f5
 80152e6:	4298      	cmp	r0, r3
 80152e8:	d0be      	beq.n	8015268 <_rclc_take_new_data+0x44>
 80152ea:	f000 fedd 	bl	80160a8 <rcutils_reset_error>
 80152ee:	e7bb      	b.n	8015268 <_rclc_take_new_data+0x44>
 80152f0:	6840      	ldr	r0, [r0, #4]
 80152f2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d17d      	bne.n	80153f6 <_rclc_take_new_data+0x1d2>
 80152fa:	69c3      	ldr	r3, [r0, #28]
 80152fc:	b11b      	cbz	r3, 8015306 <_rclc_take_new_data+0xe2>
 80152fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8015302:	2b00      	cmp	r3, #0
 8015304:	d144      	bne.n	8015390 <_rclc_take_new_data+0x16c>
 8015306:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801530a:	2b00      	cmp	r3, #0
 801530c:	f040 80ac 	bne.w	8015468 <_rclc_take_new_data+0x244>
 8015310:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8015314:	2b00      	cmp	r3, #0
 8015316:	d0a6      	beq.n	8015266 <_rclc_take_new_data+0x42>
 8015318:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801531a:	a90a      	add	r1, sp, #40	; 0x28
 801531c:	3010      	adds	r0, #16
 801531e:	f007 ff6f 	bl	801d200 <rcl_action_take_result_response>
 8015322:	4605      	mov	r5, r0
 8015324:	2800      	cmp	r0, #0
 8015326:	d1e0      	bne.n	80152ea <_rclc_take_new_data+0xc6>
 8015328:	6860      	ldr	r0, [r4, #4]
 801532a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801532e:	f008 fbd7 	bl	801dae0 <rclc_action_find_handle_by_result_request_sequence_number>
 8015332:	2800      	cmp	r0, #0
 8015334:	d098      	beq.n	8015268 <_rclc_take_new_data+0x44>
 8015336:	2301      	movs	r3, #1
 8015338:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 801533c:	e794      	b.n	8015268 <_rclc_take_new_data+0x44>
 801533e:	250b      	movs	r5, #11
 8015340:	4628      	mov	r0, r5
 8015342:	b01b      	add	sp, #108	; 0x6c
 8015344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015346:	ae04      	add	r6, sp, #16
 8015348:	3010      	adds	r0, #16
 801534a:	aa0a      	add	r2, sp, #40	; 0x28
 801534c:	4631      	mov	r1, r6
 801534e:	f008 f9cb 	bl	801d6e8 <rcl_action_take_cancel_request>
 8015352:	4605      	mov	r5, r0
 8015354:	2800      	cmp	r0, #0
 8015356:	d1c8      	bne.n	80152ea <_rclc_take_new_data+0xc6>
 8015358:	a90a      	add	r1, sp, #40	; 0x28
 801535a:	6860      	ldr	r0, [r4, #4]
 801535c:	f008 fb80 	bl	801da60 <rclc_action_find_goal_handle_by_uuid>
 8015360:	4607      	mov	r7, r0
 8015362:	2800      	cmp	r0, #0
 8015364:	f000 80bb 	beq.w	80154de <_rclc_take_new_data+0x2ba>
 8015368:	2101      	movs	r1, #1
 801536a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801536e:	f008 fb01 	bl	801d974 <rcl_action_transition_goal_state>
 8015372:	2803      	cmp	r0, #3
 8015374:	4684      	mov	ip, r0
 8015376:	f040 80a7 	bne.w	80154c8 <_rclc_take_new_data+0x2a4>
 801537a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 801537e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015382:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015386:	e884 0003 	stmia.w	r4, {r0, r1}
 801538a:	f887 c008 	strb.w	ip, [r7, #8]
 801538e:	e76b      	b.n	8015268 <_rclc_take_new_data+0x44>
 8015390:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8015392:	3010      	adds	r0, #16
 8015394:	f007 ffb4 	bl	801d300 <rcl_action_take_feedback>
 8015398:	4605      	mov	r5, r0
 801539a:	2800      	cmp	r0, #0
 801539c:	d1a5      	bne.n	80152ea <_rclc_take_new_data+0xc6>
 801539e:	6860      	ldr	r0, [r4, #4]
 80153a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80153a2:	f008 fb5d 	bl	801da60 <rclc_action_find_goal_handle_by_uuid>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2800      	cmp	r0, #0
 80153aa:	f000 80a3 	beq.w	80154f4 <_rclc_take_new_data+0x2d0>
 80153ae:	2201      	movs	r2, #1
 80153b0:	6860      	ldr	r0, [r4, #4]
 80153b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80153b6:	e7a6      	b.n	8015306 <_rclc_take_new_data+0xe2>
 80153b8:	f008 fb2c 	bl	801da14 <rclc_action_take_goal_handle>
 80153bc:	4606      	mov	r6, r0
 80153be:	6860      	ldr	r0, [r4, #4]
 80153c0:	2e00      	cmp	r6, #0
 80153c2:	f43f af47 	beq.w	8015254 <_rclc_take_new_data+0x30>
 80153c6:	6070      	str	r0, [r6, #4]
 80153c8:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80153cc:	69f2      	ldr	r2, [r6, #28]
 80153ce:	3010      	adds	r0, #16
 80153d0:	f008 f8d4 	bl	801d57c <rcl_action_take_goal_request>
 80153d4:	4605      	mov	r5, r0
 80153d6:	2800      	cmp	r0, #0
 80153d8:	f040 808e 	bne.w	80154f8 <_rclc_take_new_data+0x2d4>
 80153dc:	69f7      	ldr	r7, [r6, #28]
 80153de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80153e0:	7235      	strb	r5, [r6, #8]
 80153e2:	f8c6 0009 	str.w	r0, [r6, #9]
 80153e6:	f8c6 100d 	str.w	r1, [r6, #13]
 80153ea:	6860      	ldr	r0, [r4, #4]
 80153ec:	f8c6 2011 	str.w	r2, [r6, #17]
 80153f0:	f8c6 3015 	str.w	r3, [r6, #21]
 80153f4:	e72e      	b.n	8015254 <_rclc_take_new_data+0x30>
 80153f6:	aa04      	add	r2, sp, #16
 80153f8:	a90a      	add	r1, sp, #40	; 0x28
 80153fa:	3010      	adds	r0, #16
 80153fc:	f007 fe88 	bl	801d110 <rcl_action_take_goal_response>
 8015400:	4605      	mov	r5, r0
 8015402:	2800      	cmp	r0, #0
 8015404:	f47f af71 	bne.w	80152ea <_rclc_take_new_data+0xc6>
 8015408:	6860      	ldr	r0, [r4, #4]
 801540a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801540e:	f008 fb55 	bl	801dabc <rclc_action_find_handle_by_goal_request_sequence_number>
 8015412:	b130      	cbz	r0, 8015422 <_rclc_take_new_data+0x1fe>
 8015414:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015418:	2201      	movs	r2, #1
 801541a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 801541e:	f880 2020 	strb.w	r2, [r0, #32]
 8015422:	6860      	ldr	r0, [r4, #4]
 8015424:	e769      	b.n	80152fa <_rclc_take_new_data+0xd6>
 8015426:	3010      	adds	r0, #16
 8015428:	aa04      	add	r2, sp, #16
 801542a:	a90a      	add	r1, sp, #40	; 0x28
 801542c:	f008 f91c 	bl	801d668 <rcl_action_take_result_request>
 8015430:	4605      	mov	r5, r0
 8015432:	2800      	cmp	r0, #0
 8015434:	f47f af59 	bne.w	80152ea <_rclc_take_new_data+0xc6>
 8015438:	a904      	add	r1, sp, #16
 801543a:	6860      	ldr	r0, [r4, #4]
 801543c:	f008 fb10 	bl	801da60 <rclc_action_find_goal_handle_by_uuid>
 8015440:	4607      	mov	r7, r0
 8015442:	b160      	cbz	r0, 801545e <_rclc_take_new_data+0x23a>
 8015444:	ad0a      	add	r5, sp, #40	; 0x28
 8015446:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801544a:	f04f 0c02 	mov.w	ip, #2
 801544e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015450:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015452:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015456:	e886 0003 	stmia.w	r6, {r0, r1}
 801545a:	f887 c008 	strb.w	ip, [r7, #8]
 801545e:	6860      	ldr	r0, [r4, #4]
 8015460:	2300      	movs	r3, #0
 8015462:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8015466:	e6fa      	b.n	801525e <_rclc_take_new_data+0x3a>
 8015468:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801546c:	a90a      	add	r1, sp, #40	; 0x28
 801546e:	3010      	adds	r0, #16
 8015470:	f007 ff06 	bl	801d280 <rcl_action_take_cancel_response>
 8015474:	4605      	mov	r5, r0
 8015476:	2800      	cmp	r0, #0
 8015478:	f47f af37 	bne.w	80152ea <_rclc_take_new_data+0xc6>
 801547c:	6860      	ldr	r0, [r4, #4]
 801547e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015482:	f008 fb3f 	bl	801db04 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8015486:	4606      	mov	r6, r0
 8015488:	6860      	ldr	r0, [r4, #4]
 801548a:	2e00      	cmp	r6, #0
 801548c:	f43f af40 	beq.w	8015310 <_rclc_take_new_data+0xec>
 8015490:	2701      	movs	r7, #1
 8015492:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015494:	84b7      	strh	r7, [r6, #36]	; 0x24
 8015496:	2b00      	cmp	r3, #0
 8015498:	f43f af3a 	beq.w	8015310 <_rclc_take_new_data+0xec>
 801549c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801549e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80154a2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80154a6:	f008 fadb 	bl	801da60 <rclc_action_find_goal_handle_by_uuid>
 80154aa:	b138      	cbz	r0, 80154bc <_rclc_take_new_data+0x298>
 80154ac:	6860      	ldr	r0, [r4, #4]
 80154ae:	3501      	adds	r5, #1
 80154b0:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 80154b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80154b6:	42ab      	cmp	r3, r5
 80154b8:	d8f0      	bhi.n	801549c <_rclc_take_new_data+0x278>
 80154ba:	e729      	b.n	8015310 <_rclc_take_new_data+0xec>
 80154bc:	6860      	ldr	r0, [r4, #4]
 80154be:	3501      	adds	r5, #1
 80154c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80154c2:	42ab      	cmp	r3, r5
 80154c4:	d8ea      	bhi.n	801549c <_rclc_take_new_data+0x278>
 80154c6:	e723      	b.n	8015310 <_rclc_take_new_data+0xec>
 80154c8:	ab06      	add	r3, sp, #24
 80154ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154cc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80154d0:	2103      	movs	r1, #3
 80154d2:	6860      	ldr	r0, [r4, #4]
 80154d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80154d8:	f008 fb8a 	bl	801dbf0 <rclc_action_server_goal_cancel_reject>
 80154dc:	e6c4      	b.n	8015268 <_rclc_take_new_data+0x44>
 80154de:	ab06      	add	r3, sp, #24
 80154e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80154e6:	2102      	movs	r1, #2
 80154e8:	6860      	ldr	r0, [r4, #4]
 80154ea:	e896 000c 	ldmia.w	r6, {r2, r3}
 80154ee:	f008 fb7f 	bl	801dbf0 <rclc_action_server_goal_cancel_reject>
 80154f2:	e6b9      	b.n	8015268 <_rclc_take_new_data+0x44>
 80154f4:	6860      	ldr	r0, [r4, #4]
 80154f6:	e706      	b.n	8015306 <_rclc_take_new_data+0xe2>
 80154f8:	4631      	mov	r1, r6
 80154fa:	6860      	ldr	r0, [r4, #4]
 80154fc:	f008 fa9a 	bl	801da34 <rclc_action_remove_used_goal_handle>
 8015500:	f000 fdd2 	bl	80160a8 <rcutils_reset_error>
 8015504:	e6b0      	b.n	8015268 <_rclc_take_new_data+0x44>
 8015506:	2501      	movs	r5, #1
 8015508:	e6ae      	b.n	8015268 <_rclc_take_new_data+0x44>
 801550a:	bf00      	nop

0801550c <_rclc_execute.part.0>:
 801550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801550e:	7803      	ldrb	r3, [r0, #0]
 8015510:	b085      	sub	sp, #20
 8015512:	4604      	mov	r4, r0
 8015514:	2b0a      	cmp	r3, #10
 8015516:	f200 8139 	bhi.w	801578c <_rclc_execute.part.0+0x280>
 801551a:	e8df f003 	tbb	[pc, r3]
 801551e:	4268      	.short	0x4268
 8015520:	06a75b4d 	.word	0x06a75b4d
 8015524:	721d0606 	.word	0x721d0606
 8015528:	62          	.byte	0x62
 8015529:	00          	.byte	0x00
 801552a:	2b06      	cmp	r3, #6
 801552c:	f000 8126 	beq.w	801577c <_rclc_execute.part.0+0x270>
 8015530:	2b07      	cmp	r3, #7
 8015532:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015534:	f040 811c 	bne.w	8015770 <_rclc_execute.part.0+0x264>
 8015538:	f104 0510 	add.w	r5, r4, #16
 801553c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8015540:	6880      	ldr	r0, [r0, #8]
 8015542:	4798      	blx	r3
 8015544:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015546:	4629      	mov	r1, r5
 8015548:	6860      	ldr	r0, [r4, #4]
 801554a:	f006 fdc7 	bl	801c0dc <rcl_send_response>
 801554e:	4604      	mov	r4, r0
 8015550:	b378      	cbz	r0, 80155b2 <_rclc_execute.part.0+0xa6>
 8015552:	f000 fda9 	bl	80160a8 <rcutils_reset_error>
 8015556:	e02c      	b.n	80155b2 <_rclc_execute.part.0+0xa6>
 8015558:	6840      	ldr	r0, [r0, #4]
 801555a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801555e:	2b00      	cmp	r3, #0
 8015560:	f000 808e 	beq.w	8015680 <_rclc_execute.part.0+0x174>
 8015564:	2600      	movs	r6, #0
 8015566:	2701      	movs	r7, #1
 8015568:	e004      	b.n	8015574 <_rclc_execute.part.0+0x68>
 801556a:	f008 fa2d 	bl	801d9c8 <rclc_action_send_result_request>
 801556e:	b998      	cbnz	r0, 8015598 <_rclc_execute.part.0+0x8c>
 8015570:	722f      	strb	r7, [r5, #8]
 8015572:	6860      	ldr	r0, [r4, #4]
 8015574:	f008 fad8 	bl	801db28 <rclc_action_find_first_handle_with_goal_response>
 8015578:	4605      	mov	r5, r0
 801557a:	2800      	cmp	r0, #0
 801557c:	d07f      	beq.n	801567e <_rclc_execute.part.0+0x172>
 801557e:	6863      	ldr	r3, [r4, #4]
 8015580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015582:	699b      	ldr	r3, [r3, #24]
 8015584:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8015588:	f885 6020 	strb.w	r6, [r5, #32]
 801558c:	4798      	blx	r3
 801558e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8015592:	4628      	mov	r0, r5
 8015594:	2b00      	cmp	r3, #0
 8015596:	d1e8      	bne.n	801556a <_rclc_execute.part.0+0x5e>
 8015598:	6860      	ldr	r0, [r4, #4]
 801559a:	4629      	mov	r1, r5
 801559c:	f008 fa4a 	bl	801da34 <rclc_action_remove_used_goal_handle>
 80155a0:	e7e7      	b.n	8015572 <_rclc_execute.part.0+0x66>
 80155a2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80155a6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 80155aa:	b100      	cbz	r0, 80155ae <_rclc_execute.part.0+0xa2>
 80155ac:	68a0      	ldr	r0, [r4, #8]
 80155ae:	2400      	movs	r4, #0
 80155b0:	4798      	blx	r3
 80155b2:	4620      	mov	r0, r4
 80155b4:	b005      	add	sp, #20
 80155b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155b8:	6840      	ldr	r0, [r0, #4]
 80155ba:	f006 fe5f 	bl	801c27c <rcl_timer_call>
 80155be:	f240 3321 	movw	r3, #801	; 0x321
 80155c2:	4604      	mov	r4, r0
 80155c4:	4298      	cmp	r0, r3
 80155c6:	d001      	beq.n	80155cc <_rclc_execute.part.0+0xc0>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d1c2      	bne.n	8015552 <_rclc_execute.part.0+0x46>
 80155cc:	2400      	movs	r4, #0
 80155ce:	4620      	mov	r0, r4
 80155d0:	b005      	add	sp, #20
 80155d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d4:	2400      	movs	r4, #0
 80155d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80155d8:	6880      	ldr	r0, [r0, #8]
 80155da:	4798      	blx	r3
 80155dc:	4620      	mov	r0, r4
 80155de:	b005      	add	sp, #20
 80155e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155e2:	2400      	movs	r4, #0
 80155e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80155e6:	4798      	blx	r3
 80155e8:	4620      	mov	r0, r4
 80155ea:	b005      	add	sp, #20
 80155ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155ee:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80155f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155f4:	b100      	cbz	r0, 80155f8 <_rclc_execute.part.0+0xec>
 80155f6:	68a0      	ldr	r0, [r4, #8]
 80155f8:	2400      	movs	r4, #0
 80155fa:	4798      	blx	r3
 80155fc:	4620      	mov	r0, r4
 80155fe:	b005      	add	sp, #20
 8015600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015602:	6840      	ldr	r0, [r0, #4]
 8015604:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015608:	bb3b      	cbnz	r3, 801565a <_rclc_execute.part.0+0x14e>
 801560a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d07d      	beq.n	801570e <_rclc_execute.part.0+0x202>
 8015612:	f640 0634 	movw	r6, #2100	; 0x834
 8015616:	2701      	movs	r7, #1
 8015618:	e007      	b.n	801562a <_rclc_execute.part.0+0x11e>
 801561a:	4628      	mov	r0, r5
 801561c:	f008 fa9c 	bl	801db58 <rclc_action_server_response_goal_request>
 8015620:	4629      	mov	r1, r5
 8015622:	6860      	ldr	r0, [r4, #4]
 8015624:	f008 fa06 	bl	801da34 <rclc_action_remove_used_goal_handle>
 8015628:	6860      	ldr	r0, [r4, #4]
 801562a:	2100      	movs	r1, #0
 801562c:	f008 fa2e 	bl	801da8c <rclc_action_find_first_handle_by_status>
 8015630:	4605      	mov	r5, r0
 8015632:	2800      	cmp	r0, #0
 8015634:	d068      	beq.n	8015708 <_rclc_execute.part.0+0x1fc>
 8015636:	6863      	ldr	r3, [r4, #4]
 8015638:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801563a:	699b      	ldr	r3, [r3, #24]
 801563c:	4798      	blx	r3
 801563e:	42b0      	cmp	r0, r6
 8015640:	f04f 0100 	mov.w	r1, #0
 8015644:	d1e9      	bne.n	801561a <_rclc_execute.part.0+0x10e>
 8015646:	2101      	movs	r1, #1
 8015648:	4628      	mov	r0, r5
 801564a:	f008 fa85 	bl	801db58 <rclc_action_server_response_goal_request>
 801564e:	722f      	strb	r7, [r5, #8]
 8015650:	e7ea      	b.n	8015628 <_rclc_execute.part.0+0x11c>
 8015652:	6848      	ldr	r0, [r1, #4]
 8015654:	f008 f9ee 	bl	801da34 <rclc_action_remove_used_goal_handle>
 8015658:	6860      	ldr	r0, [r4, #4]
 801565a:	f008 fa23 	bl	801daa4 <rclc_action_find_first_terminated_handle>
 801565e:	4601      	mov	r1, r0
 8015660:	2800      	cmp	r0, #0
 8015662:	d1f6      	bne.n	8015652 <_rclc_execute.part.0+0x146>
 8015664:	6860      	ldr	r0, [r4, #4]
 8015666:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801566a:	e7ce      	b.n	801560a <_rclc_execute.part.0+0xfe>
 801566c:	2400      	movs	r4, #0
 801566e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015670:	f100 0110 	add.w	r1, r0, #16
 8015674:	6880      	ldr	r0, [r0, #8]
 8015676:	4798      	blx	r3
 8015678:	4620      	mov	r0, r4
 801567a:	b005      	add	sp, #20
 801567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801567e:	6860      	ldr	r0, [r4, #4]
 8015680:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8015684:	b18b      	cbz	r3, 80156aa <_rclc_execute.part.0+0x19e>
 8015686:	68c5      	ldr	r5, [r0, #12]
 8015688:	b32d      	cbz	r5, 80156d6 <_rclc_execute.part.0+0x1ca>
 801568a:	2600      	movs	r6, #0
 801568c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8015690:	b143      	cbz	r3, 80156a4 <_rclc_execute.part.0+0x198>
 8015692:	69c3      	ldr	r3, [r0, #28]
 8015694:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8015698:	b123      	cbz	r3, 80156a4 <_rclc_execute.part.0+0x198>
 801569a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801569c:	4628      	mov	r0, r5
 801569e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80156a0:	4798      	blx	r3
 80156a2:	6860      	ldr	r0, [r4, #4]
 80156a4:	682d      	ldr	r5, [r5, #0]
 80156a6:	2d00      	cmp	r5, #0
 80156a8:	d1f0      	bne.n	801568c <_rclc_execute.part.0+0x180>
 80156aa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80156ae:	b193      	cbz	r3, 80156d6 <_rclc_execute.part.0+0x1ca>
 80156b0:	68c5      	ldr	r5, [r0, #12]
 80156b2:	b185      	cbz	r5, 80156d6 <_rclc_execute.part.0+0x1ca>
 80156b4:	2600      	movs	r6, #0
 80156b6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80156ba:	b14b      	cbz	r3, 80156d0 <_rclc_execute.part.0+0x1c4>
 80156bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80156be:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 80156c2:	b12b      	cbz	r3, 80156d0 <_rclc_execute.part.0+0x1c4>
 80156c4:	4628      	mov	r0, r5
 80156c6:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 80156ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80156cc:	4798      	blx	r3
 80156ce:	6860      	ldr	r0, [r4, #4]
 80156d0:	682d      	ldr	r5, [r5, #0]
 80156d2:	2d00      	cmp	r5, #0
 80156d4:	d1ef      	bne.n	80156b6 <_rclc_execute.part.0+0x1aa>
 80156d6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f43f af76 	beq.w	80155cc <_rclc_execute.part.0+0xc0>
 80156e0:	2700      	movs	r7, #0
 80156e2:	e00b      	b.n	80156fc <_rclc_execute.part.0+0x1f0>
 80156e4:	6863      	ldr	r3, [r4, #4]
 80156e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80156e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80156ea:	6a1e      	ldr	r6, [r3, #32]
 80156ec:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 80156f0:	47b0      	blx	r6
 80156f2:	6860      	ldr	r0, [r4, #4]
 80156f4:	4629      	mov	r1, r5
 80156f6:	f008 f99d 	bl	801da34 <rclc_action_remove_used_goal_handle>
 80156fa:	6860      	ldr	r0, [r4, #4]
 80156fc:	f008 fa20 	bl	801db40 <rclc_action_find_first_handle_with_result_response>
 8015700:	4605      	mov	r5, r0
 8015702:	2800      	cmp	r0, #0
 8015704:	d1ee      	bne.n	80156e4 <_rclc_execute.part.0+0x1d8>
 8015706:	e761      	b.n	80155cc <_rclc_execute.part.0+0xc0>
 8015708:	6860      	ldr	r0, [r4, #4]
 801570a:	f880 5020 	strb.w	r5, [r0, #32]
 801570e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8015712:	2b00      	cmp	r3, #0
 8015714:	f43f af5a 	beq.w	80155cc <_rclc_execute.part.0+0xc0>
 8015718:	68c5      	ldr	r5, [r0, #12]
 801571a:	b1b5      	cbz	r5, 801574a <_rclc_execute.part.0+0x23e>
 801571c:	2602      	movs	r6, #2
 801571e:	e001      	b.n	8015724 <_rclc_execute.part.0+0x218>
 8015720:	682d      	ldr	r5, [r5, #0]
 8015722:	b195      	cbz	r5, 801574a <_rclc_execute.part.0+0x23e>
 8015724:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8015728:	2b03      	cmp	r3, #3
 801572a:	d1f9      	bne.n	8015720 <_rclc_execute.part.0+0x214>
 801572c:	69c3      	ldr	r3, [r0, #28]
 801572e:	4628      	mov	r0, r5
 8015730:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015732:	4798      	blx	r3
 8015734:	4603      	mov	r3, r0
 8015736:	f105 0260 	add.w	r2, r5, #96	; 0x60
 801573a:	4628      	mov	r0, r5
 801573c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015740:	b143      	cbz	r3, 8015754 <_rclc_execute.part.0+0x248>
 8015742:	f008 fa29 	bl	801db98 <rclc_action_server_goal_cancel_accept>
 8015746:	6860      	ldr	r0, [r4, #4]
 8015748:	e7ea      	b.n	8015720 <_rclc_execute.part.0+0x214>
 801574a:	2300      	movs	r3, #0
 801574c:	461c      	mov	r4, r3
 801574e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8015752:	e72e      	b.n	80155b2 <_rclc_execute.part.0+0xa6>
 8015754:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8015756:	f105 0758 	add.w	r7, r5, #88	; 0x58
 801575a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801575e:	2101      	movs	r1, #1
 8015760:	6860      	ldr	r0, [r4, #4]
 8015762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015766:	f008 fa43 	bl	801dbf0 <rclc_action_server_goal_cancel_reject>
 801576a:	722e      	strb	r6, [r5, #8]
 801576c:	6860      	ldr	r0, [r4, #4]
 801576e:	e7d7      	b.n	8015720 <_rclc_execute.part.0+0x214>
 8015770:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8015772:	f104 0510 	add.w	r5, r4, #16
 8015776:	6880      	ldr	r0, [r0, #8]
 8015778:	4798      	blx	r3
 801577a:	e6e3      	b.n	8015544 <_rclc_execute.part.0+0x38>
 801577c:	f100 0510 	add.w	r5, r0, #16
 8015780:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015782:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8015784:	4629      	mov	r1, r5
 8015786:	6880      	ldr	r0, [r0, #8]
 8015788:	4798      	blx	r3
 801578a:	e6db      	b.n	8015544 <_rclc_execute.part.0+0x38>
 801578c:	2401      	movs	r4, #1
 801578e:	e710      	b.n	80155b2 <_rclc_execute.part.0+0xa6>

08015790 <rclc_executor_trigger_any>:
 8015790:	2800      	cmp	r0, #0
 8015792:	d03d      	beq.n	8015810 <rclc_executor_trigger_any+0x80>
 8015794:	2900      	cmp	r1, #0
 8015796:	d03c      	beq.n	8015812 <rclc_executor_trigger_any+0x82>
 8015798:	4603      	mov	r3, r0
 801579a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 801579e:	2200      	movs	r2, #0
 80157a0:	2800      	cmp	r0, #0
 80157a2:	d035      	beq.n	8015810 <rclc_executor_trigger_any+0x80>
 80157a4:	b430      	push	{r4, r5}
 80157a6:	f893 c000 	ldrb.w	ip, [r3]
 80157aa:	f1bc 0f08 	cmp.w	ip, #8
 80157ae:	d11d      	bne.n	80157ec <rclc_executor_trigger_any+0x5c>
 80157b0:	685c      	ldr	r4, [r3, #4]
 80157b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80157b4:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80157b8:	d105      	bne.n	80157c6 <rclc_executor_trigger_any+0x36>
 80157ba:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80157be:	b910      	cbnz	r0, 80157c6 <rclc_executor_trigger_any+0x36>
 80157c0:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 80157c4:	b128      	cbz	r0, 80157d2 <rclc_executor_trigger_any+0x42>
 80157c6:	bc30      	pop	{r4, r5}
 80157c8:	4770      	bx	lr
 80157ca:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d1f9      	bne.n	80157c6 <rclc_executor_trigger_any+0x36>
 80157d2:	3201      	adds	r2, #1
 80157d4:	3340      	adds	r3, #64	; 0x40
 80157d6:	4291      	cmp	r1, r2
 80157d8:	d017      	beq.n	801580a <rclc_executor_trigger_any+0x7a>
 80157da:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 80157de:	2800      	cmp	r0, #0
 80157e0:	d0f1      	beq.n	80157c6 <rclc_executor_trigger_any+0x36>
 80157e2:	f893 c000 	ldrb.w	ip, [r3]
 80157e6:	f1bc 0f08 	cmp.w	ip, #8
 80157ea:	d0e1      	beq.n	80157b0 <rclc_executor_trigger_any+0x20>
 80157ec:	f1bc 0f09 	cmp.w	ip, #9
 80157f0:	d1eb      	bne.n	80157ca <rclc_executor_trigger_any+0x3a>
 80157f2:	685c      	ldr	r4, [r3, #4]
 80157f4:	6a25      	ldr	r5, [r4, #32]
 80157f6:	2d00      	cmp	r5, #0
 80157f8:	d1e5      	bne.n	80157c6 <rclc_executor_trigger_any+0x36>
 80157fa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80157fe:	2800      	cmp	r0, #0
 8015800:	d1e1      	bne.n	80157c6 <rclc_executor_trigger_any+0x36>
 8015802:	3201      	adds	r2, #1
 8015804:	3340      	adds	r3, #64	; 0x40
 8015806:	4291      	cmp	r1, r2
 8015808:	d1e7      	bne.n	80157da <rclc_executor_trigger_any+0x4a>
 801580a:	2000      	movs	r0, #0
 801580c:	bc30      	pop	{r4, r5}
 801580e:	4770      	bx	lr
 8015810:	4770      	bx	lr
 8015812:	4608      	mov	r0, r1
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop

08015818 <rclc_executor_init>:
 8015818:	2900      	cmp	r1, #0
 801581a:	d06a      	beq.n	80158f2 <rclc_executor_init+0xda>
 801581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015820:	4605      	mov	r5, r0
 8015822:	b0b0      	sub	sp, #192	; 0xc0
 8015824:	2800      	cmp	r0, #0
 8015826:	d05c      	beq.n	80158e2 <rclc_executor_init+0xca>
 8015828:	4616      	mov	r6, r2
 801582a:	4618      	mov	r0, r3
 801582c:	4688      	mov	r8, r1
 801582e:	461f      	mov	r7, r3
 8015830:	f000 fbfc 	bl	801602c <rcutils_allocator_is_valid>
 8015834:	2e00      	cmp	r6, #0
 8015836:	d054      	beq.n	80158e2 <rclc_executor_init+0xca>
 8015838:	f080 0401 	eor.w	r4, r0, #1
 801583c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8015840:	d14f      	bne.n	80158e2 <rclc_executor_init+0xca>
 8015842:	2288      	movs	r2, #136	; 0x88
 8015844:	4930      	ldr	r1, [pc, #192]	; (8015908 <rclc_executor_init+0xf0>)
 8015846:	a80e      	add	r0, sp, #56	; 0x38
 8015848:	f00b fca7 	bl	802119a <memcpy>
 801584c:	a90e      	add	r1, sp, #56	; 0x38
 801584e:	2288      	movs	r2, #136	; 0x88
 8015850:	4628      	mov	r0, r5
 8015852:	f00b fca2 	bl	802119a <memcpy>
 8015856:	4668      	mov	r0, sp
 8015858:	f8c5 8000 	str.w	r8, [r5]
 801585c:	60ae      	str	r6, [r5, #8]
 801585e:	f006 fe83 	bl	801c568 <rcl_get_zero_initialized_wait_set>
 8015862:	46ec      	mov	ip, sp
 8015864:	f105 0e14 	add.w	lr, r5, #20
 8015868:	f8d7 8000 	ldr.w	r8, [r7]
 801586c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015870:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015874:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015878:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801587c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015880:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015900 <rclc_executor_init+0xe8>
 8015884:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015888:	f8dc 3000 	ldr.w	r3, [ip]
 801588c:	01b0      	lsls	r0, r6, #6
 801588e:	6939      	ldr	r1, [r7, #16]
 8015890:	f8ce 3000 	str.w	r3, [lr]
 8015894:	612f      	str	r7, [r5, #16]
 8015896:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 801589a:	47c0      	blx	r8
 801589c:	6068      	str	r0, [r5, #4]
 801589e:	b908      	cbnz	r0, 80158a4 <rclc_executor_init+0x8c>
 80158a0:	e029      	b.n	80158f6 <rclc_executor_init+0xde>
 80158a2:	6868      	ldr	r0, [r5, #4]
 80158a4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80158a8:	3401      	adds	r4, #1
 80158aa:	4631      	mov	r1, r6
 80158ac:	f000 fab8 	bl	8015e20 <rclc_executor_handle_init>
 80158b0:	42a6      	cmp	r6, r4
 80158b2:	d8f6      	bhi.n	80158a2 <rclc_executor_init+0x8a>
 80158b4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80158b8:	f000 faa6 	bl	8015e08 <rclc_executor_handle_counters_zero_init>
 80158bc:	4a13      	ldr	r2, [pc, #76]	; (801590c <rclc_executor_init+0xf4>)
 80158be:	2300      	movs	r3, #0
 80158c0:	6868      	ldr	r0, [r5, #4]
 80158c2:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 80158c6:	b168      	cbz	r0, 80158e4 <rclc_executor_init+0xcc>
 80158c8:	68ab      	ldr	r3, [r5, #8]
 80158ca:	b173      	cbz	r3, 80158ea <rclc_executor_init+0xd2>
 80158cc:	692a      	ldr	r2, [r5, #16]
 80158ce:	fab2 f382 	clz	r3, r2
 80158d2:	095b      	lsrs	r3, r3, #5
 80158d4:	b14a      	cbz	r2, 80158ea <rclc_executor_init+0xd2>
 80158d6:	4618      	mov	r0, r3
 80158d8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 80158dc:	b030      	add	sp, #192	; 0xc0
 80158de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e2:	200b      	movs	r0, #11
 80158e4:	b030      	add	sp, #192	; 0xc0
 80158e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ea:	2000      	movs	r0, #0
 80158ec:	b030      	add	sp, #192	; 0xc0
 80158ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f2:	200b      	movs	r0, #11
 80158f4:	4770      	bx	lr
 80158f6:	200a      	movs	r0, #10
 80158f8:	e7f4      	b.n	80158e4 <rclc_executor_init+0xcc>
 80158fa:	bf00      	nop
 80158fc:	f3af 8000 	nop.w
 8015900:	3b9aca00 	.word	0x3b9aca00
 8015904:	00000000 	.word	0x00000000
 8015908:	080227e8 	.word	0x080227e8
 801590c:	08015791 	.word	0x08015791

08015910 <rclc_executor_fini>:
 8015910:	b318      	cbz	r0, 801595a <rclc_executor_fini+0x4a>
 8015912:	b570      	push	{r4, r5, r6, lr}
 8015914:	4604      	mov	r4, r0
 8015916:	6840      	ldr	r0, [r0, #4]
 8015918:	b1e8      	cbz	r0, 8015956 <rclc_executor_fini+0x46>
 801591a:	68a2      	ldr	r2, [r4, #8]
 801591c:	6923      	ldr	r3, [r4, #16]
 801591e:	b1d2      	cbz	r2, 8015956 <rclc_executor_fini+0x46>
 8015920:	fab3 f583 	clz	r5, r3
 8015924:	096d      	lsrs	r5, r5, #5
 8015926:	b1b3      	cbz	r3, 8015956 <rclc_executor_fini+0x46>
 8015928:	685a      	ldr	r2, [r3, #4]
 801592a:	f104 0614 	add.w	r6, r4, #20
 801592e:	6919      	ldr	r1, [r3, #16]
 8015930:	4790      	blx	r2
 8015932:	2200      	movs	r2, #0
 8015934:	2300      	movs	r3, #0
 8015936:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801593a:	6065      	str	r5, [r4, #4]
 801593c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8015940:	f000 fa62 	bl	8015e08 <rclc_executor_handle_counters_zero_init>
 8015944:	4630      	mov	r0, r6
 8015946:	f006 fe23 	bl	801c590 <rcl_wait_set_is_valid>
 801594a:	b940      	cbnz	r0, 801595e <rclc_executor_fini+0x4e>
 801594c:	a308      	add	r3, pc, #32	; (adr r3, 8015970 <rclc_executor_fini+0x60>)
 801594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015952:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8015956:	2000      	movs	r0, #0
 8015958:	bd70      	pop	{r4, r5, r6, pc}
 801595a:	2000      	movs	r0, #0
 801595c:	4770      	bx	lr
 801595e:	4630      	mov	r0, r6
 8015960:	f006 fe1c 	bl	801c59c <rcl_wait_set_fini>
 8015964:	2800      	cmp	r0, #0
 8015966:	d0f1      	beq.n	801594c <rclc_executor_fini+0x3c>
 8015968:	f000 fb9e 	bl	80160a8 <rcutils_reset_error>
 801596c:	e7ee      	b.n	801594c <rclc_executor_fini+0x3c>
 801596e:	bf00      	nop
 8015970:	3b9aca00 	.word	0x3b9aca00
 8015974:	00000000 	.word	0x00000000

08015978 <rclc_executor_add_subscription>:
 8015978:	2b00      	cmp	r3, #0
 801597a:	bf18      	it	ne
 801597c:	2a00      	cmpne	r2, #0
 801597e:	b570      	push	{r4, r5, r6, lr}
 8015980:	4604      	mov	r4, r0
 8015982:	bf0c      	ite	eq
 8015984:	2001      	moveq	r0, #1
 8015986:	2000      	movne	r0, #0
 8015988:	f89d c010 	ldrb.w	ip, [sp, #16]
 801598c:	2900      	cmp	r1, #0
 801598e:	bf08      	it	eq
 8015990:	f040 0001 	orreq.w	r0, r0, #1
 8015994:	bb28      	cbnz	r0, 80159e2 <rclc_executor_add_subscription+0x6a>
 8015996:	fab4 f584 	clz	r5, r4
 801599a:	096d      	lsrs	r5, r5, #5
 801599c:	b30c      	cbz	r4, 80159e2 <rclc_executor_add_subscription+0x6a>
 801599e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 80159a2:	4286      	cmp	r6, r0
 80159a4:	d301      	bcc.n	80159aa <rclc_executor_add_subscription+0x32>
 80159a6:	2001      	movs	r0, #1
 80159a8:	bd70      	pop	{r4, r5, r6, pc}
 80159aa:	6860      	ldr	r0, [r4, #4]
 80159ac:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 80159b0:	f800 500e 	strb.w	r5, [r0, lr]
 80159b4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80159b8:	3601      	adds	r6, #1
 80159ba:	6303      	str	r3, [r0, #48]	; 0x30
 80159bc:	2301      	movs	r3, #1
 80159be:	62c5      	str	r5, [r0, #44]	; 0x2c
 80159c0:	f104 0514 	add.w	r5, r4, #20
 80159c4:	f880 c001 	strb.w	ip, [r0, #1]
 80159c8:	8703      	strh	r3, [r0, #56]	; 0x38
 80159ca:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80159ce:	4628      	mov	r0, r5
 80159d0:	60e6      	str	r6, [r4, #12]
 80159d2:	f006 fddd 	bl	801c590 <rcl_wait_set_is_valid>
 80159d6:	b930      	cbnz	r0, 80159e6 <rclc_executor_add_subscription+0x6e>
 80159d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80159da:	2000      	movs	r0, #0
 80159dc:	3301      	adds	r3, #1
 80159de:	64a3      	str	r3, [r4, #72]	; 0x48
 80159e0:	bd70      	pop	{r4, r5, r6, pc}
 80159e2:	200b      	movs	r0, #11
 80159e4:	bd70      	pop	{r4, r5, r6, pc}
 80159e6:	4628      	mov	r0, r5
 80159e8:	f006 fdd8 	bl	801c59c <rcl_wait_set_fini>
 80159ec:	2800      	cmp	r0, #0
 80159ee:	d0f3      	beq.n	80159d8 <rclc_executor_add_subscription+0x60>
 80159f0:	bd70      	pop	{r4, r5, r6, pc}
 80159f2:	bf00      	nop

080159f4 <rclc_executor_prepare>:
 80159f4:	2800      	cmp	r0, #0
 80159f6:	d044      	beq.n	8015a82 <rclc_executor_prepare+0x8e>
 80159f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159fa:	f100 0514 	add.w	r5, r0, #20
 80159fe:	b09b      	sub	sp, #108	; 0x6c
 8015a00:	4604      	mov	r4, r0
 8015a02:	4628      	mov	r0, r5
 8015a04:	f006 fdc4 	bl	801c590 <rcl_wait_set_is_valid>
 8015a08:	b110      	cbz	r0, 8015a10 <rclc_executor_prepare+0x1c>
 8015a0a:	2000      	movs	r0, #0
 8015a0c:	b01b      	add	sp, #108	; 0x6c
 8015a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a10:	4628      	mov	r0, r5
 8015a12:	f006 fdc3 	bl	801c59c <rcl_wait_set_fini>
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d130      	bne.n	8015a7c <rclc_executor_prepare+0x88>
 8015a1a:	a80c      	add	r0, sp, #48	; 0x30
 8015a1c:	ae04      	add	r6, sp, #16
 8015a1e:	f006 fda3 	bl	801c568 <rcl_get_zero_initialized_wait_set>
 8015a22:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015a26:	46ae      	mov	lr, r5
 8015a28:	6927      	ldr	r7, [r4, #16]
 8015a2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015a32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015a3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015a42:	f8dc 3000 	ldr.w	r3, [ip]
 8015a46:	f8ce 3000 	str.w	r3, [lr]
 8015a4a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015a4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	4628      	mov	r0, r5
 8015a52:	6822      	ldr	r2, [r4, #0]
 8015a54:	6033      	str	r3, [r6, #0]
 8015a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a58:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8015a5a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015a5e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8015a62:	e9cd 2100 	strd	r2, r1, [sp]
 8015a66:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8015a68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015a6a:	f007 f897 	bl	801cb9c <rcl_wait_set_init>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d0cc      	beq.n	8015a0c <rclc_executor_prepare+0x18>
 8015a72:	900b      	str	r0, [sp, #44]	; 0x2c
 8015a74:	f000 fb18 	bl	80160a8 <rcutils_reset_error>
 8015a78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015a7a:	e7c7      	b.n	8015a0c <rclc_executor_prepare+0x18>
 8015a7c:	f000 fb14 	bl	80160a8 <rcutils_reset_error>
 8015a80:	e7cb      	b.n	8015a1a <rclc_executor_prepare+0x26>
 8015a82:	200b      	movs	r0, #11
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop

08015a88 <rclc_executor_spin_some.part.0>:
 8015a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a8c:	4605      	mov	r5, r0
 8015a8e:	4691      	mov	r9, r2
 8015a90:	4698      	mov	r8, r3
 8015a92:	f7ff ffaf 	bl	80159f4 <rclc_executor_prepare>
 8015a96:	f105 0614 	add.w	r6, r5, #20
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f006 fe4a 	bl	801c734 <rcl_wait_set_clear>
 8015aa0:	4607      	mov	r7, r0
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	f040 80a8 	bne.w	8015bf8 <rclc_executor_spin_some.part.0+0x170>
 8015aa8:	68ab      	ldr	r3, [r5, #8]
 8015aaa:	b30b      	cbz	r3, 8015af0 <rclc_executor_spin_some.part.0+0x68>
 8015aac:	4604      	mov	r4, r0
 8015aae:	6869      	ldr	r1, [r5, #4]
 8015ab0:	01a2      	lsls	r2, r4, #6
 8015ab2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8015ab6:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8015aba:	b1cb      	cbz	r3, 8015af0 <rclc_executor_spin_some.part.0+0x68>
 8015abc:	5c8b      	ldrb	r3, [r1, r2]
 8015abe:	2b0a      	cmp	r3, #10
 8015ac0:	f200 80de 	bhi.w	8015c80 <rclc_executor_spin_some.part.0+0x1f8>
 8015ac4:	e8df f003 	tbb	[pc, r3]
 8015ac8:	8da99d9d 	.word	0x8da99d9d
 8015acc:	0606068d 	.word	0x0606068d
 8015ad0:	c1ce      	.short	0xc1ce
 8015ad2:	b5          	.byte	0xb5
 8015ad3:	00          	.byte	0x00
 8015ad4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015ad8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015adc:	4630      	mov	r0, r6
 8015ade:	f007 f979 	bl	801cdd4 <rcl_wait_set_add_service>
 8015ae2:	2800      	cmp	r0, #0
 8015ae4:	f040 8087 	bne.w	8015bf6 <rclc_executor_spin_some.part.0+0x16e>
 8015ae8:	3401      	adds	r4, #1
 8015aea:	68ab      	ldr	r3, [r5, #8]
 8015aec:	429c      	cmp	r4, r3
 8015aee:	d3de      	bcc.n	8015aae <rclc_executor_spin_some.part.0+0x26>
 8015af0:	4643      	mov	r3, r8
 8015af2:	464a      	mov	r2, r9
 8015af4:	4630      	mov	r0, r6
 8015af6:	f007 f99b 	bl	801ce30 <rcl_wait>
 8015afa:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	f000 80c6 	beq.w	8015c90 <rclc_executor_spin_some.part.0+0x208>
 8015b04:	2b01      	cmp	r3, #1
 8015b06:	f040 80bb 	bne.w	8015c80 <rclc_executor_spin_some.part.0+0x1f8>
 8015b0a:	68ab      	ldr	r3, [r5, #8]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f000 8159 	beq.w	8015dc4 <rclc_executor_spin_some.part.0+0x33c>
 8015b12:	2400      	movs	r4, #0
 8015b14:	f240 1991 	movw	r9, #401	; 0x191
 8015b18:	46a0      	mov	r8, r4
 8015b1a:	e00a      	b.n	8015b32 <rclc_executor_spin_some.part.0+0xaa>
 8015b1c:	f7ff fb34 	bl	8015188 <_rclc_check_for_new_data>
 8015b20:	4604      	mov	r4, r0
 8015b22:	b110      	cbz	r0, 8015b2a <rclc_executor_spin_some.part.0+0xa2>
 8015b24:	4548      	cmp	r0, r9
 8015b26:	f040 80b1 	bne.w	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015b2a:	68ab      	ldr	r3, [r5, #8]
 8015b2c:	4598      	cmp	r8, r3
 8015b2e:	f080 8126 	bcs.w	8015d7e <rclc_executor_spin_some.part.0+0x2f6>
 8015b32:	686a      	ldr	r2, [r5, #4]
 8015b34:	4631      	mov	r1, r6
 8015b36:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015b3a:	f108 0801 	add.w	r8, r8, #1
 8015b3e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8015b42:	f1bc 0f00 	cmp.w	ip, #0
 8015b46:	d1e9      	bne.n	8015b1c <rclc_executor_spin_some.part.0+0x94>
 8015b48:	4619      	mov	r1, r3
 8015b4a:	4610      	mov	r0, r2
 8015b4c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8015b50:	4798      	blx	r3
 8015b52:	2800      	cmp	r0, #0
 8015b54:	f000 809a 	beq.w	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015b58:	68ab      	ldr	r3, [r5, #8]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	f000 8096 	beq.w	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015b60:	f04f 0800 	mov.w	r8, #0
 8015b64:	f240 1991 	movw	r9, #401	; 0x191
 8015b68:	e009      	b.n	8015b7e <rclc_executor_spin_some.part.0+0xf6>
 8015b6a:	f7ff fb5b 	bl	8015224 <_rclc_take_new_data>
 8015b6e:	4604      	mov	r4, r0
 8015b70:	b110      	cbz	r0, 8015b78 <rclc_executor_spin_some.part.0+0xf0>
 8015b72:	4548      	cmp	r0, r9
 8015b74:	f040 808a 	bne.w	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015b78:	68ab      	ldr	r3, [r5, #8]
 8015b7a:	4598      	cmp	r8, r3
 8015b7c:	d209      	bcs.n	8015b92 <rclc_executor_spin_some.part.0+0x10a>
 8015b7e:	6868      	ldr	r0, [r5, #4]
 8015b80:	4631      	mov	r1, r6
 8015b82:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8015b86:	f108 0801 	add.w	r8, r8, #1
 8015b8a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8015b8e:	2a00      	cmp	r2, #0
 8015b90:	d1eb      	bne.n	8015b6a <rclc_executor_spin_some.part.0+0xe2>
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d07a      	beq.n	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015b96:	2600      	movs	r6, #0
 8015b98:	e00e      	b.n	8015bb8 <rclc_executor_spin_some.part.0+0x130>
 8015b9a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8015b9e:	2a08      	cmp	r2, #8
 8015ba0:	f000 80fc 	beq.w	8015d9c <rclc_executor_spin_some.part.0+0x314>
 8015ba4:	2a09      	cmp	r2, #9
 8015ba6:	f000 80ee 	beq.w	8015d86 <rclc_executor_spin_some.part.0+0x2fe>
 8015baa:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8015bae:	b98a      	cbnz	r2, 8015bd4 <rclc_executor_spin_some.part.0+0x14c>
 8015bb0:	3601      	adds	r6, #1
 8015bb2:	429e      	cmp	r6, r3
 8015bb4:	d267      	bcs.n	8015c86 <rclc_executor_spin_some.part.0+0x1fe>
 8015bb6:	2400      	movs	r4, #0
 8015bb8:	686a      	ldr	r2, [r5, #4]
 8015bba:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8015bbe:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8015bc2:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8015bc6:	2900      	cmp	r1, #0
 8015bc8:	d060      	beq.n	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015bca:	7841      	ldrb	r1, [r0, #1]
 8015bcc:	2900      	cmp	r1, #0
 8015bce:	d0e4      	beq.n	8015b9a <rclc_executor_spin_some.part.0+0x112>
 8015bd0:	2901      	cmp	r1, #1
 8015bd2:	d1ed      	bne.n	8015bb0 <rclc_executor_spin_some.part.0+0x128>
 8015bd4:	f7ff fc9a 	bl	801550c <_rclc_execute.part.0>
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	f040 80b5 	bne.w	8015d48 <rclc_executor_spin_some.part.0+0x2c0>
 8015bde:	68ab      	ldr	r3, [r5, #8]
 8015be0:	e7e6      	b.n	8015bb0 <rclc_executor_spin_some.part.0+0x128>
 8015be2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015be6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015bea:	4630      	mov	r0, r6
 8015bec:	f007 f8c6 	bl	801cd7c <rcl_wait_set_add_client>
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	f43f af79 	beq.w	8015ae8 <rclc_executor_spin_some.part.0+0x60>
 8015bf6:	4607      	mov	r7, r0
 8015bf8:	f000 fa56 	bl	80160a8 <rcutils_reset_error>
 8015bfc:	4638      	mov	r0, r7
 8015bfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c02:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015c06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f006 fd66 	bl	801c6dc <rcl_wait_set_add_subscription>
 8015c10:	2800      	cmp	r0, #0
 8015c12:	f43f af69 	beq.w	8015ae8 <rclc_executor_spin_some.part.0+0x60>
 8015c16:	4607      	mov	r7, r0
 8015c18:	e7ee      	b.n	8015bf8 <rclc_executor_spin_some.part.0+0x170>
 8015c1a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015c1e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015c22:	4630      	mov	r0, r6
 8015c24:	f007 f87a 	bl	801cd1c <rcl_wait_set_add_timer>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	f43f af5d 	beq.w	8015ae8 <rclc_executor_spin_some.part.0+0x60>
 8015c2e:	4607      	mov	r7, r0
 8015c30:	e7e2      	b.n	8015bf8 <rclc_executor_spin_some.part.0+0x170>
 8015c32:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015c36:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f007 f842 	bl	801ccc4 <rcl_wait_set_add_guard_condition>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	f43f af51 	beq.w	8015ae8 <rclc_executor_spin_some.part.0+0x60>
 8015c46:	4607      	mov	r7, r0
 8015c48:	e7d6      	b.n	8015bf8 <rclc_executor_spin_some.part.0+0x170>
 8015c4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015c4e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015c52:	4630      	mov	r0, r6
 8015c54:	3110      	adds	r1, #16
 8015c56:	f007 fdbf 	bl	801d7d8 <rcl_action_wait_set_add_action_server>
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	f43f af44 	beq.w	8015ae8 <rclc_executor_spin_some.part.0+0x60>
 8015c60:	4607      	mov	r7, r0
 8015c62:	e7c9      	b.n	8015bf8 <rclc_executor_spin_some.part.0+0x170>
 8015c64:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015c68:	2300      	movs	r3, #0
 8015c6a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015c6e:	4630      	mov	r0, r6
 8015c70:	3110      	adds	r1, #16
 8015c72:	f007 fb89 	bl	801d388 <rcl_action_wait_set_add_action_client>
 8015c76:	2800      	cmp	r0, #0
 8015c78:	f43f af36 	beq.w	8015ae8 <rclc_executor_spin_some.part.0+0x60>
 8015c7c:	4607      	mov	r7, r0
 8015c7e:	e7bb      	b.n	8015bf8 <rclc_executor_spin_some.part.0+0x170>
 8015c80:	2701      	movs	r7, #1
 8015c82:	f000 fa11 	bl	80160a8 <rcutils_reset_error>
 8015c86:	4638      	mov	r0, r7
 8015c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8c:	4627      	mov	r7, r4
 8015c8e:	e7fa      	b.n	8015c86 <rclc_executor_spin_some.part.0+0x1fe>
 8015c90:	68ab      	ldr	r3, [r5, #8]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f000 8093 	beq.w	8015dbe <rclc_executor_spin_some.part.0+0x336>
 8015c98:	2400      	movs	r4, #0
 8015c9a:	f240 1991 	movw	r9, #401	; 0x191
 8015c9e:	46a0      	mov	r8, r4
 8015ca0:	e008      	b.n	8015cb4 <rclc_executor_spin_some.part.0+0x22c>
 8015ca2:	f7ff fa71 	bl	8015188 <_rclc_check_for_new_data>
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	b108      	cbz	r0, 8015cae <rclc_executor_spin_some.part.0+0x226>
 8015caa:	4548      	cmp	r0, r9
 8015cac:	d1ee      	bne.n	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015cae:	68ab      	ldr	r3, [r5, #8]
 8015cb0:	4598      	cmp	r8, r3
 8015cb2:	d266      	bcs.n	8015d82 <rclc_executor_spin_some.part.0+0x2fa>
 8015cb4:	686a      	ldr	r2, [r5, #4]
 8015cb6:	4631      	mov	r1, r6
 8015cb8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015cbc:	f108 0801 	add.w	r8, r8, #1
 8015cc0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8015cc4:	f1bc 0f00 	cmp.w	ip, #0
 8015cc8:	d1eb      	bne.n	8015ca2 <rclc_executor_spin_some.part.0+0x21a>
 8015cca:	4619      	mov	r1, r3
 8015ccc:	4610      	mov	r0, r2
 8015cce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8015cd2:	4798      	blx	r3
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	d0d9      	beq.n	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015cd8:	68ab      	ldr	r3, [r5, #8]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d0d6      	beq.n	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015cde:	f04f 0a00 	mov.w	sl, #0
 8015ce2:	f240 1891 	movw	r8, #401	; 0x191
 8015ce6:	f240 2959 	movw	r9, #601	; 0x259
 8015cea:	e00e      	b.n	8015d0a <rclc_executor_spin_some.part.0+0x282>
 8015cec:	f813 300b 	ldrb.w	r3, [r3, fp]
 8015cf0:	2b08      	cmp	r3, #8
 8015cf2:	d034      	beq.n	8015d5e <rclc_executor_spin_some.part.0+0x2d6>
 8015cf4:	2b09      	cmp	r3, #9
 8015cf6:	d029      	beq.n	8015d4c <rclc_executor_spin_some.part.0+0x2c4>
 8015cf8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015cfc:	bb03      	cbnz	r3, 8015d40 <rclc_executor_spin_some.part.0+0x2b8>
 8015cfe:	f10a 0a01 	add.w	sl, sl, #1
 8015d02:	68ab      	ldr	r3, [r5, #8]
 8015d04:	459a      	cmp	sl, r3
 8015d06:	d2be      	bcs.n	8015c86 <rclc_executor_spin_some.part.0+0x1fe>
 8015d08:	2400      	movs	r4, #0
 8015d0a:	6868      	ldr	r0, [r5, #4]
 8015d0c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015d10:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8015d14:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d0b7      	beq.n	8015c8c <rclc_executor_spin_some.part.0+0x204>
 8015d1c:	4631      	mov	r1, r6
 8015d1e:	f7ff fa81 	bl	8015224 <_rclc_take_new_data>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	bf18      	it	ne
 8015d26:	4540      	cmpne	r0, r8
 8015d28:	d001      	beq.n	8015d2e <rclc_executor_spin_some.part.0+0x2a6>
 8015d2a:	4548      	cmp	r0, r9
 8015d2c:	d10c      	bne.n	8015d48 <rclc_executor_spin_some.part.0+0x2c0>
 8015d2e:	686b      	ldr	r3, [r5, #4]
 8015d30:	eb13 000b 	adds.w	r0, r3, fp
 8015d34:	d021      	beq.n	8015d7a <rclc_executor_spin_some.part.0+0x2f2>
 8015d36:	7842      	ldrb	r2, [r0, #1]
 8015d38:	2a00      	cmp	r2, #0
 8015d3a:	d0d7      	beq.n	8015cec <rclc_executor_spin_some.part.0+0x264>
 8015d3c:	2a01      	cmp	r2, #1
 8015d3e:	d1de      	bne.n	8015cfe <rclc_executor_spin_some.part.0+0x276>
 8015d40:	f7ff fbe4 	bl	801550c <_rclc_execute.part.0>
 8015d44:	2800      	cmp	r0, #0
 8015d46:	d0da      	beq.n	8015cfe <rclc_executor_spin_some.part.0+0x276>
 8015d48:	4607      	mov	r7, r0
 8015d4a:	e79c      	b.n	8015c86 <rclc_executor_spin_some.part.0+0x1fe>
 8015d4c:	6843      	ldr	r3, [r0, #4]
 8015d4e:	6a1a      	ldr	r2, [r3, #32]
 8015d50:	2a00      	cmp	r2, #0
 8015d52:	d1f5      	bne.n	8015d40 <rclc_executor_spin_some.part.0+0x2b8>
 8015d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d0d0      	beq.n	8015cfe <rclc_executor_spin_some.part.0+0x276>
 8015d5c:	e7f0      	b.n	8015d40 <rclc_executor_spin_some.part.0+0x2b8>
 8015d5e:	6843      	ldr	r3, [r0, #4]
 8015d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015d62:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8015d66:	d1eb      	bne.n	8015d40 <rclc_executor_spin_some.part.0+0x2b8>
 8015d68:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015d6c:	2a00      	cmp	r2, #0
 8015d6e:	d1e7      	bne.n	8015d40 <rclc_executor_spin_some.part.0+0x2b8>
 8015d70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d0c2      	beq.n	8015cfe <rclc_executor_spin_some.part.0+0x276>
 8015d78:	e7e2      	b.n	8015d40 <rclc_executor_spin_some.part.0+0x2b8>
 8015d7a:	270b      	movs	r7, #11
 8015d7c:	e783      	b.n	8015c86 <rclc_executor_spin_some.part.0+0x1fe>
 8015d7e:	686a      	ldr	r2, [r5, #4]
 8015d80:	e6e2      	b.n	8015b48 <rclc_executor_spin_some.part.0+0xc0>
 8015d82:	686a      	ldr	r2, [r5, #4]
 8015d84:	e7a1      	b.n	8015cca <rclc_executor_spin_some.part.0+0x242>
 8015d86:	6842      	ldr	r2, [r0, #4]
 8015d88:	6a11      	ldr	r1, [r2, #32]
 8015d8a:	2900      	cmp	r1, #0
 8015d8c:	f47f af22 	bne.w	8015bd4 <rclc_executor_spin_some.part.0+0x14c>
 8015d90:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8015d94:	2a00      	cmp	r2, #0
 8015d96:	f43f af0b 	beq.w	8015bb0 <rclc_executor_spin_some.part.0+0x128>
 8015d9a:	e71b      	b.n	8015bd4 <rclc_executor_spin_some.part.0+0x14c>
 8015d9c:	6842      	ldr	r2, [r0, #4]
 8015d9e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8015da0:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8015da4:	f47f af16 	bne.w	8015bd4 <rclc_executor_spin_some.part.0+0x14c>
 8015da8:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8015dac:	2900      	cmp	r1, #0
 8015dae:	f47f af11 	bne.w	8015bd4 <rclc_executor_spin_some.part.0+0x14c>
 8015db2:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8015db6:	2a00      	cmp	r2, #0
 8015db8:	f43f aefa 	beq.w	8015bb0 <rclc_executor_spin_some.part.0+0x128>
 8015dbc:	e70a      	b.n	8015bd4 <rclc_executor_spin_some.part.0+0x14c>
 8015dbe:	686a      	ldr	r2, [r5, #4]
 8015dc0:	461c      	mov	r4, r3
 8015dc2:	e782      	b.n	8015cca <rclc_executor_spin_some.part.0+0x242>
 8015dc4:	686a      	ldr	r2, [r5, #4]
 8015dc6:	461c      	mov	r4, r3
 8015dc8:	e6be      	b.n	8015b48 <rclc_executor_spin_some.part.0+0xc0>
 8015dca:	bf00      	nop

08015dcc <rclc_executor_spin>:
 8015dcc:	b1d0      	cbz	r0, 8015e04 <rclc_executor_spin+0x38>
 8015dce:	b510      	push	{r4, lr}
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	e004      	b.n	8015de0 <rclc_executor_spin+0x14>
 8015dd6:	f7ff fe57 	bl	8015a88 <rclc_executor_spin_some.part.0>
 8015dda:	f030 0302 	bics.w	r3, r0, #2
 8015dde:	d10f      	bne.n	8015e00 <rclc_executor_spin+0x34>
 8015de0:	6820      	ldr	r0, [r4, #0]
 8015de2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8015de6:	e9cd 2300 	strd	r2, r3, [sp]
 8015dea:	f005 fd21 	bl	801b830 <rcl_context_is_valid>
 8015dee:	4601      	mov	r1, r0
 8015df0:	4620      	mov	r0, r4
 8015df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015df6:	2900      	cmp	r1, #0
 8015df8:	d1ed      	bne.n	8015dd6 <rclc_executor_spin+0xa>
 8015dfa:	f000 f955 	bl	80160a8 <rcutils_reset_error>
 8015dfe:	2001      	movs	r0, #1
 8015e00:	b002      	add	sp, #8
 8015e02:	bd10      	pop	{r4, pc}
 8015e04:	200b      	movs	r0, #11
 8015e06:	4770      	bx	lr

08015e08 <rclc_executor_handle_counters_zero_init>:
 8015e08:	b130      	cbz	r0, 8015e18 <rclc_executor_handle_counters_zero_init+0x10>
 8015e0a:	2220      	movs	r2, #32
 8015e0c:	2100      	movs	r1, #0
 8015e0e:	b508      	push	{r3, lr}
 8015e10:	f00b f8fa 	bl	8021008 <memset>
 8015e14:	2000      	movs	r0, #0
 8015e16:	bd08      	pop	{r3, pc}
 8015e18:	200b      	movs	r0, #11
 8015e1a:	4770      	bx	lr
 8015e1c:	0000      	movs	r0, r0
	...

08015e20 <rclc_executor_handle_init>:
 8015e20:	4603      	mov	r3, r0
 8015e22:	b178      	cbz	r0, 8015e44 <rclc_executor_handle_init+0x24>
 8015e24:	2200      	movs	r2, #0
 8015e26:	f04f 0c0b 	mov.w	ip, #11
 8015e2a:	6341      	str	r1, [r0, #52]	; 0x34
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	f8a3 c000 	strh.w	ip, [r3]
 8015e32:	631a      	str	r2, [r3, #48]	; 0x30
 8015e34:	871a      	strh	r2, [r3, #56]	; 0x38
 8015e36:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8015e48 <rclc_executor_handle_init+0x28>
 8015e3a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8015e3e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8015e42:	4770      	bx	lr
 8015e44:	200b      	movs	r0, #11
 8015e46:	4770      	bx	lr
	...

08015e50 <rclc_support_init_with_options>:
 8015e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e54:	b083      	sub	sp, #12
 8015e56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	bf18      	it	ne
 8015e5c:	2f00      	cmpne	r7, #0
 8015e5e:	d027      	beq.n	8015eb0 <rclc_support_init_with_options+0x60>
 8015e60:	4604      	mov	r4, r0
 8015e62:	b328      	cbz	r0, 8015eb0 <rclc_support_init_with_options+0x60>
 8015e64:	46e9      	mov	r9, sp
 8015e66:	461d      	mov	r5, r3
 8015e68:	460e      	mov	r6, r1
 8015e6a:	4690      	mov	r8, r2
 8015e6c:	4648      	mov	r0, r9
 8015e6e:	f005 fcd5 	bl	801b81c <rcl_get_zero_initialized_context>
 8015e72:	462a      	mov	r2, r5
 8015e74:	4623      	mov	r3, r4
 8015e76:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015e7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8015e7e:	4641      	mov	r1, r8
 8015e80:	4630      	mov	r0, r6
 8015e82:	f005 fde9 	bl	801ba58 <rcl_init>
 8015e86:	4605      	mov	r5, r0
 8015e88:	b960      	cbnz	r0, 8015ea4 <rclc_support_init_with_options+0x54>
 8015e8a:	463a      	mov	r2, r7
 8015e8c:	f104 010c 	add.w	r1, r4, #12
 8015e90:	2003      	movs	r0, #3
 8015e92:	60a7      	str	r7, [r4, #8]
 8015e94:	f006 f95e 	bl	801c154 <rcl_clock_init>
 8015e98:	4605      	mov	r5, r0
 8015e9a:	b918      	cbnz	r0, 8015ea4 <rclc_support_init_with_options+0x54>
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	b003      	add	sp, #12
 8015ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ea4:	f000 f900 	bl	80160a8 <rcutils_reset_error>
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	b003      	add	sp, #12
 8015eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eb0:	250b      	movs	r5, #11
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	b003      	add	sp, #12
 8015eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eba:	bf00      	nop

08015ebc <rclc_node_init_with_options>:
 8015ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ec0:	b087      	sub	sp, #28
 8015ec2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015ec4:	2e00      	cmp	r6, #0
 8015ec6:	bf18      	it	ne
 8015ec8:	2b00      	cmpne	r3, #0
 8015eca:	bf0c      	ite	eq
 8015ecc:	f04f 0c01 	moveq.w	ip, #1
 8015ed0:	f04f 0c00 	movne.w	ip, #0
 8015ed4:	2a00      	cmp	r2, #0
 8015ed6:	bf08      	it	eq
 8015ed8:	f04c 0c01 	orreq.w	ip, ip, #1
 8015edc:	2900      	cmp	r1, #0
 8015ede:	bf08      	it	eq
 8015ee0:	f04c 0c01 	orreq.w	ip, ip, #1
 8015ee4:	f1bc 0f00 	cmp.w	ip, #0
 8015ee8:	d118      	bne.n	8015f1c <rclc_node_init_with_options+0x60>
 8015eea:	4604      	mov	r4, r0
 8015eec:	b1b0      	cbz	r0, 8015f1c <rclc_node_init_with_options+0x60>
 8015eee:	f10d 0910 	add.w	r9, sp, #16
 8015ef2:	460d      	mov	r5, r1
 8015ef4:	4698      	mov	r8, r3
 8015ef6:	4617      	mov	r7, r2
 8015ef8:	4648      	mov	r0, r9
 8015efa:	f7fe fdcd 	bl	8014a98 <rcl_get_zero_initialized_node>
 8015efe:	9600      	str	r6, [sp, #0]
 8015f00:	4643      	mov	r3, r8
 8015f02:	463a      	mov	r2, r7
 8015f04:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015f08:	e884 0003 	stmia.w	r4, {r0, r1}
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	4620      	mov	r0, r4
 8015f10:	f7fe fdcc 	bl	8014aac <rcl_node_init>
 8015f14:	b930      	cbnz	r0, 8015f24 <rclc_node_init_with_options+0x68>
 8015f16:	b007      	add	sp, #28
 8015f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f1c:	200b      	movs	r0, #11
 8015f1e:	b007      	add	sp, #28
 8015f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f24:	9003      	str	r0, [sp, #12]
 8015f26:	f000 f8bf 	bl	80160a8 <rcutils_reset_error>
 8015f2a:	9803      	ldr	r0, [sp, #12]
 8015f2c:	b007      	add	sp, #28
 8015f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f32:	bf00      	nop

08015f34 <rclc_subscription_init_default>:
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	bf18      	it	ne
 8015f38:	2a00      	cmpne	r2, #0
 8015f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f3e:	4616      	mov	r6, r2
 8015f40:	bf0c      	ite	eq
 8015f42:	2201      	moveq	r2, #1
 8015f44:	2200      	movne	r2, #0
 8015f46:	b0a0      	sub	sp, #128	; 0x80
 8015f48:	2900      	cmp	r1, #0
 8015f4a:	bf08      	it	eq
 8015f4c:	f042 0201 	orreq.w	r2, r2, #1
 8015f50:	bb1a      	cbnz	r2, 8015f9a <rclc_subscription_init_default+0x66>
 8015f52:	4604      	mov	r4, r0
 8015f54:	b308      	cbz	r0, 8015f9a <rclc_subscription_init_default+0x66>
 8015f56:	f10d 0810 	add.w	r8, sp, #16
 8015f5a:	461f      	mov	r7, r3
 8015f5c:	460d      	mov	r5, r1
 8015f5e:	f7fe ff77 	bl	8014e50 <rcl_get_zero_initialized_subscription>
 8015f62:	6020      	str	r0, [r4, #0]
 8015f64:	4640      	mov	r0, r8
 8015f66:	f7ff f87b 	bl	8015060 <rcl_subscription_get_default_options>
 8015f6a:	2250      	movs	r2, #80	; 0x50
 8015f6c:	490d      	ldr	r1, [pc, #52]	; (8015fa4 <rclc_subscription_init_default+0x70>)
 8015f6e:	4640      	mov	r0, r8
 8015f70:	f00b f913 	bl	802119a <memcpy>
 8015f74:	463b      	mov	r3, r7
 8015f76:	4632      	mov	r2, r6
 8015f78:	4629      	mov	r1, r5
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f8cd 8000 	str.w	r8, [sp]
 8015f80:	f7fe ff6c 	bl	8014e5c <rcl_subscription_init>
 8015f84:	b910      	cbnz	r0, 8015f8c <rclc_subscription_init_default+0x58>
 8015f86:	b020      	add	sp, #128	; 0x80
 8015f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f8c:	9003      	str	r0, [sp, #12]
 8015f8e:	f000 f88b 	bl	80160a8 <rcutils_reset_error>
 8015f92:	9803      	ldr	r0, [sp, #12]
 8015f94:	b020      	add	sp, #128	; 0x80
 8015f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f9a:	200b      	movs	r0, #11
 8015f9c:	b020      	add	sp, #128	; 0x80
 8015f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fa2:	bf00      	nop
 8015fa4:	08022870 	.word	0x08022870

08015fa8 <__default_zero_allocate>:
 8015fa8:	f00a ba2a 	b.w	8020400 <calloc>

08015fac <__default_reallocate>:
 8015fac:	f00a bbc8 	b.w	8020740 <realloc>

08015fb0 <__default_deallocate>:
 8015fb0:	f00a baa6 	b.w	8020500 <free>

08015fb4 <__default_allocate>:
 8015fb4:	f00a ba9c 	b.w	80204f0 <malloc>

08015fb8 <rcutils_get_zero_initialized_allocator>:
 8015fb8:	b510      	push	{r4, lr}
 8015fba:	4c05      	ldr	r4, [pc, #20]	; (8015fd0 <rcutils_get_zero_initialized_allocator+0x18>)
 8015fbc:	4686      	mov	lr, r0
 8015fbe:	4684      	mov	ip, r0
 8015fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fc6:	6823      	ldr	r3, [r4, #0]
 8015fc8:	4670      	mov	r0, lr
 8015fca:	f8cc 3000 	str.w	r3, [ip]
 8015fce:	bd10      	pop	{r4, pc}
 8015fd0:	080228c0 	.word	0x080228c0

08015fd4 <rcutils_set_default_allocator>:
 8015fd4:	b1a8      	cbz	r0, 8016002 <rcutils_set_default_allocator+0x2e>
 8015fd6:	6802      	ldr	r2, [r0, #0]
 8015fd8:	b1a2      	cbz	r2, 8016004 <rcutils_set_default_allocator+0x30>
 8015fda:	6841      	ldr	r1, [r0, #4]
 8015fdc:	b1a1      	cbz	r1, 8016008 <rcutils_set_default_allocator+0x34>
 8015fde:	b410      	push	{r4}
 8015fe0:	68c4      	ldr	r4, [r0, #12]
 8015fe2:	b164      	cbz	r4, 8015ffe <rcutils_set_default_allocator+0x2a>
 8015fe4:	6880      	ldr	r0, [r0, #8]
 8015fe6:	b138      	cbz	r0, 8015ff8 <rcutils_set_default_allocator+0x24>
 8015fe8:	4b08      	ldr	r3, [pc, #32]	; (801600c <rcutils_set_default_allocator+0x38>)
 8015fea:	601a      	str	r2, [r3, #0]
 8015fec:	2200      	movs	r2, #0
 8015fee:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8015ff2:	2001      	movs	r0, #1
 8015ff4:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8015ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ffc:	4770      	bx	lr
 8015ffe:	4620      	mov	r0, r4
 8016000:	e7fa      	b.n	8015ff8 <rcutils_set_default_allocator+0x24>
 8016002:	4770      	bx	lr
 8016004:	4610      	mov	r0, r2
 8016006:	4770      	bx	lr
 8016008:	4608      	mov	r0, r1
 801600a:	4770      	bx	lr
 801600c:	200005a4 	.word	0x200005a4

08016010 <rcutils_get_default_allocator>:
 8016010:	b510      	push	{r4, lr}
 8016012:	4c05      	ldr	r4, [pc, #20]	; (8016028 <rcutils_get_default_allocator+0x18>)
 8016014:	4686      	mov	lr, r0
 8016016:	4684      	mov	ip, r0
 8016018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801601a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801601e:	6823      	ldr	r3, [r4, #0]
 8016020:	4670      	mov	r0, lr
 8016022:	f8cc 3000 	str.w	r3, [ip]
 8016026:	bd10      	pop	{r4, pc}
 8016028:	200005a4 	.word	0x200005a4

0801602c <rcutils_allocator_is_valid>:
 801602c:	b158      	cbz	r0, 8016046 <rcutils_allocator_is_valid+0x1a>
 801602e:	6803      	ldr	r3, [r0, #0]
 8016030:	b143      	cbz	r3, 8016044 <rcutils_allocator_is_valid+0x18>
 8016032:	6843      	ldr	r3, [r0, #4]
 8016034:	b133      	cbz	r3, 8016044 <rcutils_allocator_is_valid+0x18>
 8016036:	68c3      	ldr	r3, [r0, #12]
 8016038:	b123      	cbz	r3, 8016044 <rcutils_allocator_is_valid+0x18>
 801603a:	6880      	ldr	r0, [r0, #8]
 801603c:	3800      	subs	r0, #0
 801603e:	bf18      	it	ne
 8016040:	2001      	movne	r0, #1
 8016042:	4770      	bx	lr
 8016044:	4618      	mov	r0, r3
 8016046:	4770      	bx	lr

08016048 <rcutils_get_env>:
 8016048:	b168      	cbz	r0, 8016066 <rcutils_get_env+0x1e>
 801604a:	b510      	push	{r4, lr}
 801604c:	460c      	mov	r4, r1
 801604e:	b129      	cbz	r1, 801605c <rcutils_get_env+0x14>
 8016050:	f00a fa06 	bl	8020460 <getenv>
 8016054:	b120      	cbz	r0, 8016060 <rcutils_get_env+0x18>
 8016056:	6020      	str	r0, [r4, #0]
 8016058:	2000      	movs	r0, #0
 801605a:	bd10      	pop	{r4, pc}
 801605c:	4803      	ldr	r0, [pc, #12]	; (801606c <rcutils_get_env+0x24>)
 801605e:	bd10      	pop	{r4, pc}
 8016060:	4b03      	ldr	r3, [pc, #12]	; (8016070 <rcutils_get_env+0x28>)
 8016062:	6023      	str	r3, [r4, #0]
 8016064:	bd10      	pop	{r4, pc}
 8016066:	4803      	ldr	r0, [pc, #12]	; (8016074 <rcutils_get_env+0x2c>)
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop
 801606c:	080228f0 	.word	0x080228f0
 8016070:	080233a8 	.word	0x080233a8
 8016074:	080228d4 	.word	0x080228d4

08016078 <rcutils_get_error_string>:
 8016078:	4b06      	ldr	r3, [pc, #24]	; (8016094 <rcutils_get_error_string+0x1c>)
 801607a:	781b      	ldrb	r3, [r3, #0]
 801607c:	b13b      	cbz	r3, 801608e <rcutils_get_error_string+0x16>
 801607e:	4b06      	ldr	r3, [pc, #24]	; (8016098 <rcutils_get_error_string+0x20>)
 8016080:	781a      	ldrb	r2, [r3, #0]
 8016082:	b90a      	cbnz	r2, 8016088 <rcutils_get_error_string+0x10>
 8016084:	2201      	movs	r2, #1
 8016086:	701a      	strb	r2, [r3, #0]
 8016088:	4b04      	ldr	r3, [pc, #16]	; (801609c <rcutils_get_error_string+0x24>)
 801608a:	7818      	ldrb	r0, [r3, #0]
 801608c:	4770      	bx	lr
 801608e:	4b04      	ldr	r3, [pc, #16]	; (80160a0 <rcutils_get_error_string+0x28>)
 8016090:	7818      	ldrb	r0, [r3, #0]
 8016092:	4770      	bx	lr
 8016094:	20012ee8 	.word	0x20012ee8
 8016098:	20012f01 	.word	0x20012f01
 801609c:	20012f00 	.word	0x20012f00
 80160a0:	0802290c 	.word	0x0802290c
 80160a4:	00000000 	.word	0x00000000

080160a8 <rcutils_reset_error>:
 80160a8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80160c8 <rcutils_reset_error+0x20>
 80160ac:	2300      	movs	r3, #0
 80160ae:	4a08      	ldr	r2, [pc, #32]	; (80160d0 <rcutils_reset_error+0x28>)
 80160b0:	4808      	ldr	r0, [pc, #32]	; (80160d4 <rcutils_reset_error+0x2c>)
 80160b2:	8013      	strh	r3, [r2, #0]
 80160b4:	4908      	ldr	r1, [pc, #32]	; (80160d8 <rcutils_reset_error+0x30>)
 80160b6:	7003      	strb	r3, [r0, #0]
 80160b8:	700b      	strb	r3, [r1, #0]
 80160ba:	ed82 7b02 	vstr	d7, [r2, #8]
 80160be:	4a07      	ldr	r2, [pc, #28]	; (80160dc <rcutils_reset_error+0x34>)
 80160c0:	7013      	strb	r3, [r2, #0]
 80160c2:	4770      	bx	lr
 80160c4:	f3af 8000 	nop.w
	...
 80160d0:	20012ef0 	.word	0x20012ef0
 80160d4:	20012f01 	.word	0x20012f01
 80160d8:	20012f00 	.word	0x20012f00
 80160dc:	20012ee8 	.word	0x20012ee8

080160e0 <rcutils_format_string_limit>:
 80160e0:	b40f      	push	{r0, r1, r2, r3}
 80160e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160e4:	b083      	sub	sp, #12
 80160e6:	ac08      	add	r4, sp, #32
 80160e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80160ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80160ee:	b326      	cbz	r6, 801613a <rcutils_format_string_limit+0x5a>
 80160f0:	a808      	add	r0, sp, #32
 80160f2:	f7ff ff9b 	bl	801602c <rcutils_allocator_is_valid>
 80160f6:	b300      	cbz	r0, 801613a <rcutils_format_string_limit+0x5a>
 80160f8:	2100      	movs	r1, #0
 80160fa:	ab0f      	add	r3, sp, #60	; 0x3c
 80160fc:	4632      	mov	r2, r6
 80160fe:	4608      	mov	r0, r1
 8016100:	e9cd 3300 	strd	r3, r3, [sp]
 8016104:	f000 f906 	bl	8016314 <rcutils_vsnprintf>
 8016108:	1c43      	adds	r3, r0, #1
 801610a:	4605      	mov	r5, r0
 801610c:	d015      	beq.n	801613a <rcutils_format_string_limit+0x5a>
 801610e:	1c47      	adds	r7, r0, #1
 8016110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016112:	429f      	cmp	r7, r3
 8016114:	d901      	bls.n	801611a <rcutils_format_string_limit+0x3a>
 8016116:	1e5d      	subs	r5, r3, #1
 8016118:	461f      	mov	r7, r3
 801611a:	9b08      	ldr	r3, [sp, #32]
 801611c:	4638      	mov	r0, r7
 801611e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016120:	4798      	blx	r3
 8016122:	4604      	mov	r4, r0
 8016124:	b148      	cbz	r0, 801613a <rcutils_format_string_limit+0x5a>
 8016126:	4632      	mov	r2, r6
 8016128:	4639      	mov	r1, r7
 801612a:	9b01      	ldr	r3, [sp, #4]
 801612c:	f000 f8f2 	bl	8016314 <rcutils_vsnprintf>
 8016130:	2800      	cmp	r0, #0
 8016132:	db09      	blt.n	8016148 <rcutils_format_string_limit+0x68>
 8016134:	2300      	movs	r3, #0
 8016136:	5563      	strb	r3, [r4, r5]
 8016138:	e000      	b.n	801613c <rcutils_format_string_limit+0x5c>
 801613a:	2400      	movs	r4, #0
 801613c:	4620      	mov	r0, r4
 801613e:	b003      	add	sp, #12
 8016140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016144:	b004      	add	sp, #16
 8016146:	4770      	bx	lr
 8016148:	4620      	mov	r0, r4
 801614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801614c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801614e:	2400      	movs	r4, #0
 8016150:	4798      	blx	r3
 8016152:	e7f3      	b.n	801613c <rcutils_format_string_limit+0x5c>

08016154 <rcutils_repl_str>:
 8016154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016158:	ed2d 8b02 	vpush	{d8}
 801615c:	b087      	sub	sp, #28
 801615e:	2600      	movs	r6, #0
 8016160:	4680      	mov	r8, r0
 8016162:	468a      	mov	sl, r1
 8016164:	9000      	str	r0, [sp, #0]
 8016166:	4608      	mov	r0, r1
 8016168:	ee08 2a10 	vmov	s16, r2
 801616c:	4699      	mov	r9, r3
 801616e:	2510      	movs	r5, #16
 8016170:	f7ea f870 	bl	8000254 <strlen>
 8016174:	4637      	mov	r7, r6
 8016176:	46b3      	mov	fp, r6
 8016178:	9001      	str	r0, [sp, #4]
 801617a:	e01e      	b.n	80161ba <rcutils_repl_str+0x66>
 801617c:	f10b 0b01 	add.w	fp, fp, #1
 8016180:	9b01      	ldr	r3, [sp, #4]
 8016182:	455e      	cmp	r6, fp
 8016184:	eb04 0803 	add.w	r8, r4, r3
 8016188:	d211      	bcs.n	80161ae <rcutils_repl_str+0x5a>
 801618a:	442e      	add	r6, r5
 801618c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016190:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016198:	00b1      	lsls	r1, r6, #2
 801619a:	4798      	blx	r3
 801619c:	2800      	cmp	r0, #0
 801619e:	f000 8088 	beq.w	80162b2 <rcutils_repl_str+0x15e>
 80161a2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80161a6:	4607      	mov	r7, r0
 80161a8:	bf28      	it	cs
 80161aa:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80161ae:	9a00      	ldr	r2, [sp, #0]
 80161b0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80161b4:	1aa4      	subs	r4, r4, r2
 80161b6:	f843 4c04 	str.w	r4, [r3, #-4]
 80161ba:	4651      	mov	r1, sl
 80161bc:	4640      	mov	r0, r8
 80161be:	f00a ff4a 	bl	8021056 <strstr>
 80161c2:	4604      	mov	r4, r0
 80161c4:	4638      	mov	r0, r7
 80161c6:	2c00      	cmp	r4, #0
 80161c8:	d1d8      	bne.n	801617c <rcutils_repl_str+0x28>
 80161ca:	4640      	mov	r0, r8
 80161cc:	f7ea f842 	bl	8000254 <strlen>
 80161d0:	9b00      	ldr	r3, [sp, #0]
 80161d2:	eba8 0803 	sub.w	r8, r8, r3
 80161d6:	eb08 0400 	add.w	r4, r8, r0
 80161da:	9402      	str	r4, [sp, #8]
 80161dc:	f1bb 0f00 	cmp.w	fp, #0
 80161e0:	d045      	beq.n	801626e <rcutils_repl_str+0x11a>
 80161e2:	ee18 0a10 	vmov	r0, s16
 80161e6:	f7ea f835 	bl	8000254 <strlen>
 80161ea:	9a01      	ldr	r2, [sp, #4]
 80161ec:	4606      	mov	r6, r0
 80161ee:	f8d9 3000 	ldr.w	r3, [r9]
 80161f2:	1a82      	subs	r2, r0, r2
 80161f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80161f8:	fb0b 4202 	mla	r2, fp, r2, r4
 80161fc:	1c50      	adds	r0, r2, #1
 80161fe:	9205      	str	r2, [sp, #20]
 8016200:	4798      	blx	r3
 8016202:	4682      	mov	sl, r0
 8016204:	2800      	cmp	r0, #0
 8016206:	d054      	beq.n	80162b2 <rcutils_repl_str+0x15e>
 8016208:	683a      	ldr	r2, [r7, #0]
 801620a:	463d      	mov	r5, r7
 801620c:	9900      	ldr	r1, [sp, #0]
 801620e:	2401      	movs	r4, #1
 8016210:	f00a ffc3 	bl	802119a <memcpy>
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801621a:	eb0a 0803 	add.w	r8, sl, r3
 801621e:	ee18 7a10 	vmov	r7, s16
 8016222:	f8dd a000 	ldr.w	sl, [sp]
 8016226:	f8cd 9000 	str.w	r9, [sp]
 801622a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801622e:	4632      	mov	r2, r6
 8016230:	4639      	mov	r1, r7
 8016232:	4640      	mov	r0, r8
 8016234:	44b0      	add	r8, r6
 8016236:	f00a ffb0 	bl	802119a <memcpy>
 801623a:	f855 2b04 	ldr.w	r2, [r5], #4
 801623e:	45a3      	cmp	fp, r4
 8016240:	444a      	add	r2, r9
 8016242:	eb0a 0102 	add.w	r1, sl, r2
 8016246:	d02a      	beq.n	801629e <rcutils_repl_str+0x14a>
 8016248:	6828      	ldr	r0, [r5, #0]
 801624a:	1a82      	subs	r2, r0, r2
 801624c:	4640      	mov	r0, r8
 801624e:	4490      	add	r8, r2
 8016250:	f00a ffa3 	bl	802119a <memcpy>
 8016254:	1c62      	adds	r2, r4, #1
 8016256:	45a3      	cmp	fp, r4
 8016258:	4614      	mov	r4, r2
 801625a:	d8e8      	bhi.n	801622e <rcutils_repl_str+0xda>
 801625c:	f8dd 9000 	ldr.w	r9, [sp]
 8016260:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8016264:	2300      	movs	r3, #0
 8016266:	9a05      	ldr	r2, [sp, #20]
 8016268:	f80a 3002 	strb.w	r3, [sl, r2]
 801626c:	e00b      	b.n	8016286 <rcutils_repl_str+0x132>
 801626e:	4620      	mov	r0, r4
 8016270:	f8d9 3000 	ldr.w	r3, [r9]
 8016274:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016278:	3001      	adds	r0, #1
 801627a:	4798      	blx	r3
 801627c:	4682      	mov	sl, r0
 801627e:	b110      	cbz	r0, 8016286 <rcutils_repl_str+0x132>
 8016280:	9900      	ldr	r1, [sp, #0]
 8016282:	f00a ff82 	bl	802118a <strcpy>
 8016286:	4638      	mov	r0, r7
 8016288:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801628c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016290:	4798      	blx	r3
 8016292:	4650      	mov	r0, sl
 8016294:	b007      	add	sp, #28
 8016296:	ecbd 8b02 	vpop	{d8}
 801629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629e:	9b02      	ldr	r3, [sp, #8]
 80162a0:	4640      	mov	r0, r8
 80162a2:	f8dd 9000 	ldr.w	r9, [sp]
 80162a6:	1a9a      	subs	r2, r3, r2
 80162a8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80162ac:	f00a ff75 	bl	802119a <memcpy>
 80162b0:	e7d8      	b.n	8016264 <rcutils_repl_str+0x110>
 80162b2:	f04f 0a00 	mov.w	sl, #0
 80162b6:	e7e6      	b.n	8016286 <rcutils_repl_str+0x132>

080162b8 <rcutils_snprintf>:
 80162b8:	b40c      	push	{r2, r3}
 80162ba:	b530      	push	{r4, r5, lr}
 80162bc:	b083      	sub	sp, #12
 80162be:	ab06      	add	r3, sp, #24
 80162c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80162c4:	9301      	str	r3, [sp, #4]
 80162c6:	b1e2      	cbz	r2, 8016302 <rcutils_snprintf+0x4a>
 80162c8:	fab0 f480 	clz	r4, r0
 80162cc:	fab1 f581 	clz	r5, r1
 80162d0:	ea50 0c01 	orrs.w	ip, r0, r1
 80162d4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80162d8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80162dc:	d008      	beq.n	80162f0 <rcutils_snprintf+0x38>
 80162de:	b984      	cbnz	r4, 8016302 <rcutils_snprintf+0x4a>
 80162e0:	b97d      	cbnz	r5, 8016302 <rcutils_snprintf+0x4a>
 80162e2:	f00a fdc3 	bl	8020e6c <vsniprintf>
 80162e6:	b003      	add	sp, #12
 80162e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162ec:	b002      	add	sp, #8
 80162ee:	4770      	bx	lr
 80162f0:	4661      	mov	r1, ip
 80162f2:	4660      	mov	r0, ip
 80162f4:	f00a fdba 	bl	8020e6c <vsniprintf>
 80162f8:	b003      	add	sp, #12
 80162fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162fe:	b002      	add	sp, #8
 8016300:	4770      	bx	lr
 8016302:	f00a ff15 	bl	8021130 <__errno>
 8016306:	2216      	movs	r2, #22
 8016308:	4603      	mov	r3, r0
 801630a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801630e:	601a      	str	r2, [r3, #0]
 8016310:	e7e9      	b.n	80162e6 <rcutils_snprintf+0x2e>
 8016312:	bf00      	nop

08016314 <rcutils_vsnprintf>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	b1b2      	cbz	r2, 8016346 <rcutils_vsnprintf+0x32>
 8016318:	fab0 f480 	clz	r4, r0
 801631c:	fab1 f581 	clz	r5, r1
 8016320:	ea50 0c01 	orrs.w	ip, r0, r1
 8016324:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016328:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801632c:	d005      	beq.n	801633a <rcutils_vsnprintf+0x26>
 801632e:	b954      	cbnz	r4, 8016346 <rcutils_vsnprintf+0x32>
 8016330:	b94d      	cbnz	r5, 8016346 <rcutils_vsnprintf+0x32>
 8016332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016336:	f00a bd99 	b.w	8020e6c <vsniprintf>
 801633a:	4661      	mov	r1, ip
 801633c:	4660      	mov	r0, ip
 801633e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016342:	f00a bd93 	b.w	8020e6c <vsniprintf>
 8016346:	f00a fef3 	bl	8021130 <__errno>
 801634a:	2316      	movs	r3, #22
 801634c:	6003      	str	r3, [r0, #0]
 801634e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016352:	bd70      	pop	{r4, r5, r6, pc}

08016354 <rcutils_strdup>:
 8016354:	b084      	sub	sp, #16
 8016356:	b570      	push	{r4, r5, r6, lr}
 8016358:	b082      	sub	sp, #8
 801635a:	4605      	mov	r5, r0
 801635c:	ac07      	add	r4, sp, #28
 801635e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016362:	b1b0      	cbz	r0, 8016392 <rcutils_strdup+0x3e>
 8016364:	f7e9 ff76 	bl	8000254 <strlen>
 8016368:	1c42      	adds	r2, r0, #1
 801636a:	9b07      	ldr	r3, [sp, #28]
 801636c:	4606      	mov	r6, r0
 801636e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016370:	4610      	mov	r0, r2
 8016372:	9201      	str	r2, [sp, #4]
 8016374:	4798      	blx	r3
 8016376:	4604      	mov	r4, r0
 8016378:	b128      	cbz	r0, 8016386 <rcutils_strdup+0x32>
 801637a:	9a01      	ldr	r2, [sp, #4]
 801637c:	4629      	mov	r1, r5
 801637e:	f00a ff0c 	bl	802119a <memcpy>
 8016382:	2300      	movs	r3, #0
 8016384:	55a3      	strb	r3, [r4, r6]
 8016386:	4620      	mov	r0, r4
 8016388:	b002      	add	sp, #8
 801638a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801638e:	b004      	add	sp, #16
 8016390:	4770      	bx	lr
 8016392:	4604      	mov	r4, r0
 8016394:	e7f7      	b.n	8016386 <rcutils_strdup+0x32>
 8016396:	bf00      	nop

08016398 <rcutils_strndup>:
 8016398:	b082      	sub	sp, #8
 801639a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639c:	ac06      	add	r4, sp, #24
 801639e:	4605      	mov	r5, r0
 80163a0:	e884 000c 	stmia.w	r4, {r2, r3}
 80163a4:	b188      	cbz	r0, 80163ca <rcutils_strndup+0x32>
 80163a6:	1c4f      	adds	r7, r1, #1
 80163a8:	460e      	mov	r6, r1
 80163aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80163ac:	4638      	mov	r0, r7
 80163ae:	4790      	blx	r2
 80163b0:	4604      	mov	r4, r0
 80163b2:	b128      	cbz	r0, 80163c0 <rcutils_strndup+0x28>
 80163b4:	463a      	mov	r2, r7
 80163b6:	4629      	mov	r1, r5
 80163b8:	f00a feef 	bl	802119a <memcpy>
 80163bc:	2300      	movs	r3, #0
 80163be:	55a3      	strb	r3, [r4, r6]
 80163c0:	4620      	mov	r0, r4
 80163c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163c6:	b002      	add	sp, #8
 80163c8:	4770      	bx	lr
 80163ca:	4604      	mov	r4, r0
 80163cc:	e7f8      	b.n	80163c0 <rcutils_strndup+0x28>
 80163ce:	bf00      	nop

080163d0 <rcutils_system_time_now>:
 80163d0:	b300      	cbz	r0, 8016414 <rcutils_system_time_now+0x44>
 80163d2:	b570      	push	{r4, r5, r6, lr}
 80163d4:	b084      	sub	sp, #16
 80163d6:	4604      	mov	r4, r0
 80163d8:	2001      	movs	r0, #1
 80163da:	4669      	mov	r1, sp
 80163dc:	f7ee f9bc 	bl	8004758 <clock_gettime>
 80163e0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80163e4:	2900      	cmp	r1, #0
 80163e6:	db12      	blt.n	801640e <rcutils_system_time_now+0x3e>
 80163e8:	ea53 0201 	orrs.w	r2, r3, r1
 80163ec:	9d02      	ldr	r5, [sp, #8]
 80163ee:	d101      	bne.n	80163f4 <rcutils_system_time_now+0x24>
 80163f0:	2d00      	cmp	r5, #0
 80163f2:	db0c      	blt.n	801640e <rcutils_system_time_now+0x3e>
 80163f4:	4e08      	ldr	r6, [pc, #32]	; (8016418 <rcutils_system_time_now+0x48>)
 80163f6:	2000      	movs	r0, #0
 80163f8:	fba3 3206 	umull	r3, r2, r3, r6
 80163fc:	195b      	adds	r3, r3, r5
 80163fe:	fb06 2201 	mla	r2, r6, r1, r2
 8016402:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8016406:	e9c4 3200 	strd	r3, r2, [r4]
 801640a:	b004      	add	sp, #16
 801640c:	bd70      	pop	{r4, r5, r6, pc}
 801640e:	2002      	movs	r0, #2
 8016410:	b004      	add	sp, #16
 8016412:	bd70      	pop	{r4, r5, r6, pc}
 8016414:	200b      	movs	r0, #11
 8016416:	4770      	bx	lr
 8016418:	3b9aca00 	.word	0x3b9aca00

0801641c <rcutils_steady_time_now>:
 801641c:	b300      	cbz	r0, 8016460 <rcutils_steady_time_now+0x44>
 801641e:	b570      	push	{r4, r5, r6, lr}
 8016420:	b084      	sub	sp, #16
 8016422:	4604      	mov	r4, r0
 8016424:	2000      	movs	r0, #0
 8016426:	4669      	mov	r1, sp
 8016428:	f7ee f996 	bl	8004758 <clock_gettime>
 801642c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016430:	2900      	cmp	r1, #0
 8016432:	db12      	blt.n	801645a <rcutils_steady_time_now+0x3e>
 8016434:	ea53 0201 	orrs.w	r2, r3, r1
 8016438:	9d02      	ldr	r5, [sp, #8]
 801643a:	d101      	bne.n	8016440 <rcutils_steady_time_now+0x24>
 801643c:	2d00      	cmp	r5, #0
 801643e:	db0c      	blt.n	801645a <rcutils_steady_time_now+0x3e>
 8016440:	4e08      	ldr	r6, [pc, #32]	; (8016464 <rcutils_steady_time_now+0x48>)
 8016442:	2000      	movs	r0, #0
 8016444:	fba3 3206 	umull	r3, r2, r3, r6
 8016448:	195b      	adds	r3, r3, r5
 801644a:	fb06 2201 	mla	r2, r6, r1, r2
 801644e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8016452:	e9c4 3200 	strd	r3, r2, [r4]
 8016456:	b004      	add	sp, #16
 8016458:	bd70      	pop	{r4, r5, r6, pc}
 801645a:	2002      	movs	r0, #2
 801645c:	b004      	add	sp, #16
 801645e:	bd70      	pop	{r4, r5, r6, pc}
 8016460:	200b      	movs	r0, #11
 8016462:	4770      	bx	lr
 8016464:	3b9aca00 	.word	0x3b9aca00

08016468 <rmw_get_zero_initialized_init_options>:
 8016468:	b510      	push	{r4, lr}
 801646a:	4604      	mov	r4, r0
 801646c:	2238      	movs	r2, #56	; 0x38
 801646e:	2100      	movs	r1, #0
 8016470:	f00a fdca 	bl	8021008 <memset>
 8016474:	f104 0010 	add.w	r0, r4, #16
 8016478:	f000 f806 	bl	8016488 <rmw_get_default_security_options>
 801647c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016480:	4620      	mov	r0, r4
 8016482:	60e3      	str	r3, [r4, #12]
 8016484:	bd10      	pop	{r4, pc}
 8016486:	bf00      	nop

08016488 <rmw_get_default_security_options>:
 8016488:	2200      	movs	r2, #0
 801648a:	7002      	strb	r2, [r0, #0]
 801648c:	6042      	str	r2, [r0, #4]
 801648e:	4770      	bx	lr

08016490 <rmw_subscription_content_filter_options_fini>:
 8016490:	b1b0      	cbz	r0, 80164c0 <rmw_subscription_content_filter_options_fini+0x30>
 8016492:	b538      	push	{r3, r4, r5, lr}
 8016494:	4604      	mov	r4, r0
 8016496:	4608      	mov	r0, r1
 8016498:	460d      	mov	r5, r1
 801649a:	f7ff fdc7 	bl	801602c <rcutils_allocator_is_valid>
 801649e:	b168      	cbz	r0, 80164bc <rmw_subscription_content_filter_options_fini+0x2c>
 80164a0:	6820      	ldr	r0, [r4, #0]
 80164a2:	b120      	cbz	r0, 80164ae <rmw_subscription_content_filter_options_fini+0x1e>
 80164a4:	686b      	ldr	r3, [r5, #4]
 80164a6:	6929      	ldr	r1, [r5, #16]
 80164a8:	4798      	blx	r3
 80164aa:	2300      	movs	r3, #0
 80164ac:	6023      	str	r3, [r4, #0]
 80164ae:	1d20      	adds	r0, r4, #4
 80164b0:	f007 fc72 	bl	801dd98 <rcutils_string_array_fini>
 80164b4:	3800      	subs	r0, #0
 80164b6:	bf18      	it	ne
 80164b8:	2001      	movne	r0, #1
 80164ba:	bd38      	pop	{r3, r4, r5, pc}
 80164bc:	200b      	movs	r0, #11
 80164be:	bd38      	pop	{r3, r4, r5, pc}
 80164c0:	200b      	movs	r0, #11
 80164c2:	4770      	bx	lr

080164c4 <rmw_get_default_subscription_options>:
 80164c4:	2200      	movs	r2, #0
 80164c6:	e9c0 2200 	strd	r2, r2, [r0]
 80164ca:	6082      	str	r2, [r0, #8]
 80164cc:	4770      	bx	lr
 80164ce:	bf00      	nop

080164d0 <rmw_get_zero_initialized_message_info>:
 80164d0:	b510      	push	{r4, lr}
 80164d2:	4604      	mov	r4, r0
 80164d4:	2240      	movs	r2, #64	; 0x40
 80164d6:	2100      	movs	r1, #0
 80164d8:	f00a fd96 	bl	8021008 <memset>
 80164dc:	4620      	mov	r0, r4
 80164de:	bd10      	pop	{r4, pc}

080164e0 <rmw_validate_namespace_with_size>:
 80164e0:	2800      	cmp	r0, #0
 80164e2:	d043      	beq.n	801656c <rmw_validate_namespace_with_size+0x8c>
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	4614      	mov	r4, r2
 80164e8:	b0c2      	sub	sp, #264	; 0x108
 80164ea:	b32a      	cbz	r2, 8016538 <rmw_validate_namespace_with_size+0x58>
 80164ec:	2901      	cmp	r1, #1
 80164ee:	460d      	mov	r5, r1
 80164f0:	461e      	mov	r6, r3
 80164f2:	d102      	bne.n	80164fa <rmw_validate_namespace_with_size+0x1a>
 80164f4:	7803      	ldrb	r3, [r0, #0]
 80164f6:	2b2f      	cmp	r3, #47	; 0x2f
 80164f8:	d012      	beq.n	8016520 <rmw_validate_namespace_with_size+0x40>
 80164fa:	aa01      	add	r2, sp, #4
 80164fc:	4669      	mov	r1, sp
 80164fe:	f007 fe3f 	bl	801e180 <rmw_validate_full_topic_name>
 8016502:	b980      	cbnz	r0, 8016526 <rmw_validate_namespace_with_size+0x46>
 8016504:	9a00      	ldr	r2, [sp, #0]
 8016506:	b14a      	cbz	r2, 801651c <rmw_validate_namespace_with_size+0x3c>
 8016508:	2a07      	cmp	r2, #7
 801650a:	d007      	beq.n	801651c <rmw_validate_namespace_with_size+0x3c>
 801650c:	1e53      	subs	r3, r2, #1
 801650e:	2b05      	cmp	r3, #5
 8016510:	d82e      	bhi.n	8016570 <rmw_validate_namespace_with_size+0x90>
 8016512:	e8df f003 	tbb	[pc, r3]
 8016516:	1f1c      	.short	0x1f1c
 8016518:	14282522 	.word	0x14282522
 801651c:	2df5      	cmp	r5, #245	; 0xf5
 801651e:	d804      	bhi.n	801652a <rmw_validate_namespace_with_size+0x4a>
 8016520:	2300      	movs	r3, #0
 8016522:	4618      	mov	r0, r3
 8016524:	6023      	str	r3, [r4, #0]
 8016526:	b042      	add	sp, #264	; 0x108
 8016528:	bd70      	pop	{r4, r5, r6, pc}
 801652a:	2307      	movs	r3, #7
 801652c:	6023      	str	r3, [r4, #0]
 801652e:	2e00      	cmp	r6, #0
 8016530:	d0f9      	beq.n	8016526 <rmw_validate_namespace_with_size+0x46>
 8016532:	23f4      	movs	r3, #244	; 0xf4
 8016534:	6033      	str	r3, [r6, #0]
 8016536:	e7f6      	b.n	8016526 <rmw_validate_namespace_with_size+0x46>
 8016538:	200b      	movs	r0, #11
 801653a:	b042      	add	sp, #264	; 0x108
 801653c:	bd70      	pop	{r4, r5, r6, pc}
 801653e:	2306      	movs	r3, #6
 8016540:	6023      	str	r3, [r4, #0]
 8016542:	2e00      	cmp	r6, #0
 8016544:	d0ef      	beq.n	8016526 <rmw_validate_namespace_with_size+0x46>
 8016546:	9b01      	ldr	r3, [sp, #4]
 8016548:	6033      	str	r3, [r6, #0]
 801654a:	b042      	add	sp, #264	; 0x108
 801654c:	bd70      	pop	{r4, r5, r6, pc}
 801654e:	2301      	movs	r3, #1
 8016550:	6023      	str	r3, [r4, #0]
 8016552:	e7f6      	b.n	8016542 <rmw_validate_namespace_with_size+0x62>
 8016554:	2302      	movs	r3, #2
 8016556:	6023      	str	r3, [r4, #0]
 8016558:	e7f3      	b.n	8016542 <rmw_validate_namespace_with_size+0x62>
 801655a:	2303      	movs	r3, #3
 801655c:	6023      	str	r3, [r4, #0]
 801655e:	e7f0      	b.n	8016542 <rmw_validate_namespace_with_size+0x62>
 8016560:	2304      	movs	r3, #4
 8016562:	6023      	str	r3, [r4, #0]
 8016564:	e7ed      	b.n	8016542 <rmw_validate_namespace_with_size+0x62>
 8016566:	2305      	movs	r3, #5
 8016568:	6023      	str	r3, [r4, #0]
 801656a:	e7ea      	b.n	8016542 <rmw_validate_namespace_with_size+0x62>
 801656c:	200b      	movs	r0, #11
 801656e:	4770      	bx	lr
 8016570:	4613      	mov	r3, r2
 8016572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016576:	4a03      	ldr	r2, [pc, #12]	; (8016584 <rmw_validate_namespace_with_size+0xa4>)
 8016578:	a802      	add	r0, sp, #8
 801657a:	f7ff fe9d 	bl	80162b8 <rcutils_snprintf>
 801657e:	2001      	movs	r0, #1
 8016580:	e7d1      	b.n	8016526 <rmw_validate_namespace_with_size+0x46>
 8016582:	bf00      	nop
 8016584:	08022910 	.word	0x08022910

08016588 <rmw_validate_namespace>:
 8016588:	b168      	cbz	r0, 80165a6 <rmw_validate_namespace+0x1e>
 801658a:	b570      	push	{r4, r5, r6, lr}
 801658c:	460d      	mov	r5, r1
 801658e:	4616      	mov	r6, r2
 8016590:	4604      	mov	r4, r0
 8016592:	f7e9 fe5f 	bl	8000254 <strlen>
 8016596:	4633      	mov	r3, r6
 8016598:	4601      	mov	r1, r0
 801659a:	462a      	mov	r2, r5
 801659c:	4620      	mov	r0, r4
 801659e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165a2:	f7ff bf9d 	b.w	80164e0 <rmw_validate_namespace_with_size>
 80165a6:	200b      	movs	r0, #11
 80165a8:	4770      	bx	lr
 80165aa:	bf00      	nop

080165ac <rmw_namespace_validation_result_string>:
 80165ac:	2807      	cmp	r0, #7
 80165ae:	d803      	bhi.n	80165b8 <rmw_namespace_validation_result_string+0xc>
 80165b0:	4b02      	ldr	r3, [pc, #8]	; (80165bc <rmw_namespace_validation_result_string+0x10>)
 80165b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80165b6:	4770      	bx	lr
 80165b8:	4801      	ldr	r0, [pc, #4]	; (80165c0 <rmw_namespace_validation_result_string+0x14>)
 80165ba:	4770      	bx	lr
 80165bc:	08022b08 	.word	0x08022b08
 80165c0:	08022960 	.word	0x08022960

080165c4 <rmw_validate_node_name>:
 80165c4:	2800      	cmp	r0, #0
 80165c6:	d042      	beq.n	801664e <rmw_validate_node_name+0x8a>
 80165c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165cc:	460d      	mov	r5, r1
 80165ce:	2900      	cmp	r1, #0
 80165d0:	d03f      	beq.n	8016652 <rmw_validate_node_name+0x8e>
 80165d2:	4604      	mov	r4, r0
 80165d4:	4616      	mov	r6, r2
 80165d6:	f7e9 fe3d 	bl	8000254 <strlen>
 80165da:	b310      	cbz	r0, 8016622 <rmw_validate_node_name+0x5e>
 80165dc:	1e63      	subs	r3, r4, #1
 80165de:	f1c4 0101 	rsb	r1, r4, #1
 80165e2:	eb03 0800 	add.w	r8, r3, r0
 80165e6:	18cf      	adds	r7, r1, r3
 80165e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80165ec:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80165f0:	f02e 0c20 	bic.w	ip, lr, #32
 80165f4:	2a09      	cmp	r2, #9
 80165f6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80165fa:	d905      	bls.n	8016608 <rmw_validate_node_name+0x44>
 80165fc:	f1bc 0f19 	cmp.w	ip, #25
 8016600:	d902      	bls.n	8016608 <rmw_validate_node_name+0x44>
 8016602:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8016606:	d114      	bne.n	8016632 <rmw_validate_node_name+0x6e>
 8016608:	4598      	cmp	r8, r3
 801660a:	d1ec      	bne.n	80165e6 <rmw_validate_node_name+0x22>
 801660c:	7822      	ldrb	r2, [r4, #0]
 801660e:	4b16      	ldr	r3, [pc, #88]	; (8016668 <rmw_validate_node_name+0xa4>)
 8016610:	5cd3      	ldrb	r3, [r2, r3]
 8016612:	f013 0304 	ands.w	r3, r3, #4
 8016616:	d113      	bne.n	8016640 <rmw_validate_node_name+0x7c>
 8016618:	28ff      	cmp	r0, #255	; 0xff
 801661a:	d81c      	bhi.n	8016656 <rmw_validate_node_name+0x92>
 801661c:	4618      	mov	r0, r3
 801661e:	602b      	str	r3, [r5, #0]
 8016620:	e00c      	b.n	801663c <rmw_validate_node_name+0x78>
 8016622:	2301      	movs	r3, #1
 8016624:	602b      	str	r3, [r5, #0]
 8016626:	b17e      	cbz	r6, 8016648 <rmw_validate_node_name+0x84>
 8016628:	2300      	movs	r3, #0
 801662a:	4618      	mov	r0, r3
 801662c:	6033      	str	r3, [r6, #0]
 801662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016632:	2302      	movs	r3, #2
 8016634:	602b      	str	r3, [r5, #0]
 8016636:	b13e      	cbz	r6, 8016648 <rmw_validate_node_name+0x84>
 8016638:	2000      	movs	r0, #0
 801663a:	6037      	str	r7, [r6, #0]
 801663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016640:	2303      	movs	r3, #3
 8016642:	602b      	str	r3, [r5, #0]
 8016644:	2e00      	cmp	r6, #0
 8016646:	d1ef      	bne.n	8016628 <rmw_validate_node_name+0x64>
 8016648:	2000      	movs	r0, #0
 801664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664e:	200b      	movs	r0, #11
 8016650:	4770      	bx	lr
 8016652:	200b      	movs	r0, #11
 8016654:	e7f2      	b.n	801663c <rmw_validate_node_name+0x78>
 8016656:	2204      	movs	r2, #4
 8016658:	602a      	str	r2, [r5, #0]
 801665a:	2e00      	cmp	r6, #0
 801665c:	d0f4      	beq.n	8016648 <rmw_validate_node_name+0x84>
 801665e:	22fe      	movs	r2, #254	; 0xfe
 8016660:	4618      	mov	r0, r3
 8016662:	6032      	str	r2, [r6, #0]
 8016664:	e7ea      	b.n	801663c <rmw_validate_node_name+0x78>
 8016666:	bf00      	nop
 8016668:	080234be 	.word	0x080234be

0801666c <rmw_node_name_validation_result_string>:
 801666c:	2804      	cmp	r0, #4
 801666e:	d803      	bhi.n	8016678 <rmw_node_name_validation_result_string+0xc>
 8016670:	4b02      	ldr	r3, [pc, #8]	; (801667c <rmw_node_name_validation_result_string+0x10>)
 8016672:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8016676:	4770      	bx	lr
 8016678:	4801      	ldr	r0, [pc, #4]	; (8016680 <rmw_node_name_validation_result_string+0x14>)
 801667a:	4770      	bx	lr
 801667c:	08022c14 	.word	0x08022c14
 8016680:	08022b28 	.word	0x08022b28

08016684 <rmw_uros_set_custom_transport>:
 8016684:	b470      	push	{r4, r5, r6}
 8016686:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801668a:	b162      	cbz	r2, 80166a6 <rmw_uros_set_custom_transport+0x22>
 801668c:	b15b      	cbz	r3, 80166a6 <rmw_uros_set_custom_transport+0x22>
 801668e:	b155      	cbz	r5, 80166a6 <rmw_uros_set_custom_transport+0x22>
 8016690:	b14e      	cbz	r6, 80166a6 <rmw_uros_set_custom_transport+0x22>
 8016692:	4c06      	ldr	r4, [pc, #24]	; (80166ac <rmw_uros_set_custom_transport+0x28>)
 8016694:	7020      	strb	r0, [r4, #0]
 8016696:	2000      	movs	r0, #0
 8016698:	6166      	str	r6, [r4, #20]
 801669a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801669e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80166a2:	bc70      	pop	{r4, r5, r6}
 80166a4:	4770      	bx	lr
 80166a6:	200b      	movs	r0, #11
 80166a8:	bc70      	pop	{r4, r5, r6}
 80166aa:	4770      	bx	lr
 80166ac:	20012f04 	.word	0x20012f04

080166b0 <rmw_uros_ping_agent>:
 80166b0:	4b1f      	ldr	r3, [pc, #124]	; (8016730 <rmw_uros_ping_agent+0x80>)
 80166b2:	7b1a      	ldrb	r2, [r3, #12]
 80166b4:	b570      	push	{r4, r5, r6, lr}
 80166b6:	4605      	mov	r5, r0
 80166b8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80166bc:	460e      	mov	r6, r1
 80166be:	b192      	cbz	r2, 80166e6 <rmw_uros_ping_agent+0x36>
 80166c0:	681c      	ldr	r4, [r3, #0]
 80166c2:	b184      	cbz	r4, 80166e6 <rmw_uros_ping_agent+0x36>
 80166c4:	68a0      	ldr	r0, [r4, #8]
 80166c6:	4632      	mov	r2, r6
 80166c8:	4629      	mov	r1, r5
 80166ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80166ce:	f001 ff0f 	bl	80184f0 <uxr_ping_agent_session>
 80166d2:	6864      	ldr	r4, [r4, #4]
 80166d4:	f080 0301 	eor.w	r3, r0, #1
 80166d8:	b2d8      	uxtb	r0, r3
 80166da:	b10c      	cbz	r4, 80166e0 <rmw_uros_ping_agent+0x30>
 80166dc:	2800      	cmp	r0, #0
 80166de:	d1f1      	bne.n	80166c4 <rmw_uros_ping_agent+0x14>
 80166e0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80166e4:	bd70      	pop	{r4, r5, r6, pc}
 80166e6:	4b13      	ldr	r3, [pc, #76]	; (8016734 <rmw_uros_ping_agent+0x84>)
 80166e8:	2100      	movs	r1, #0
 80166ea:	781a      	ldrb	r2, [r3, #0]
 80166ec:	6918      	ldr	r0, [r3, #16]
 80166ee:	f88d 2200 	strb.w	r2, [sp, #512]	; 0x200
 80166f2:	685a      	ldr	r2, [r3, #4]
 80166f4:	909c      	str	r0, [sp, #624]	; 0x270
 80166f6:	92a3      	str	r2, [sp, #652]	; 0x28c
 80166f8:	6958      	ldr	r0, [r3, #20]
 80166fa:	68da      	ldr	r2, [r3, #12]
 80166fc:	689b      	ldr	r3, [r3, #8]
 80166fe:	929b      	str	r2, [sp, #620]	; 0x26c
 8016700:	466a      	mov	r2, sp
 8016702:	909d      	str	r0, [sp, #628]	; 0x274
 8016704:	4608      	mov	r0, r1
 8016706:	939a      	str	r3, [sp, #616]	; 0x268
 8016708:	f000 fdea 	bl	80172e0 <rmw_uxrce_transport_init>
 801670c:	2800      	cmp	r0, #0
 801670e:	d1e7      	bne.n	80166e0 <rmw_uros_ping_agent+0x30>
 8016710:	4632      	mov	r2, r6
 8016712:	4629      	mov	r1, r5
 8016714:	a89e      	add	r0, sp, #632	; 0x278
 8016716:	f001 ff37 	bl	8018588 <uxr_ping_agent_attempts>
 801671a:	4604      	mov	r4, r0
 801671c:	4668      	mov	r0, sp
 801671e:	f001 feb3 	bl	8018488 <uxr_close_custom_transport>
 8016722:	f084 0301 	eor.w	r3, r4, #1
 8016726:	b2d8      	uxtb	r0, r3
 8016728:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801672c:	bd70      	pop	{r4, r5, r6, pc}
 801672e:	bf00      	nop
 8016730:	2001785c 	.word	0x2001785c
 8016734:	20012f04 	.word	0x20012f04

08016738 <rmw_init_options_init>:
 8016738:	b084      	sub	sp, #16
 801673a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801673c:	b083      	sub	sp, #12
 801673e:	ad09      	add	r5, sp, #36	; 0x24
 8016740:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016744:	b130      	cbz	r0, 8016754 <rmw_init_options_init+0x1c>
 8016746:	4604      	mov	r4, r0
 8016748:	4628      	mov	r0, r5
 801674a:	f7ff fc6f 	bl	801602c <rcutils_allocator_is_valid>
 801674e:	b108      	cbz	r0, 8016754 <rmw_init_options_init+0x1c>
 8016750:	68a6      	ldr	r6, [r4, #8]
 8016752:	b12e      	cbz	r6, 8016760 <rmw_init_options_init+0x28>
 8016754:	200b      	movs	r0, #11
 8016756:	b003      	add	sp, #12
 8016758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801675c:	b004      	add	sp, #16
 801675e:	4770      	bx	lr
 8016760:	2200      	movs	r2, #0
 8016762:	2300      	movs	r3, #0
 8016764:	f104 0c20 	add.w	ip, r4, #32
 8016768:	f8df e098 	ldr.w	lr, [pc, #152]	; 8016804 <rmw_init_options_init+0xcc>
 801676c:	466f      	mov	r7, sp
 801676e:	e9c4 2300 	strd	r2, r3, [r4]
 8016772:	4b20      	ldr	r3, [pc, #128]	; (80167f4 <rmw_init_options_init+0xbc>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	60a3      	str	r3, [r4, #8]
 8016778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801677a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801677e:	682b      	ldr	r3, [r5, #0]
 8016780:	4638      	mov	r0, r7
 8016782:	f8cc 3000 	str.w	r3, [ip]
 8016786:	f8c4 e01c 	str.w	lr, [r4, #28]
 801678a:	60e6      	str	r6, [r4, #12]
 801678c:	f7ff fe7c 	bl	8016488 <rmw_get_default_security_options>
 8016790:	f104 0310 	add.w	r3, r4, #16
 8016794:	2203      	movs	r2, #3
 8016796:	e897 0003 	ldmia.w	r7, {r0, r1}
 801679a:	e883 0003 	stmia.w	r3, {r0, r1}
 801679e:	4816      	ldr	r0, [pc, #88]	; (80167f8 <rmw_init_options_init+0xc0>)
 80167a0:	4916      	ldr	r1, [pc, #88]	; (80167fc <rmw_init_options_init+0xc4>)
 80167a2:	7626      	strb	r6, [r4, #24]
 80167a4:	f000 feb4 	bl	8017510 <rmw_uxrce_init_init_options_impl_memory>
 80167a8:	4813      	ldr	r0, [pc, #76]	; (80167f8 <rmw_init_options_init+0xc0>)
 80167aa:	f007 fe4d 	bl	801e448 <get_memory>
 80167ae:	b1f0      	cbz	r0, 80167ee <rmw_init_options_init+0xb6>
 80167b0:	4a13      	ldr	r2, [pc, #76]	; (8016800 <rmw_init_options_init+0xc8>)
 80167b2:	6883      	ldr	r3, [r0, #8]
 80167b4:	6851      	ldr	r1, [r2, #4]
 80167b6:	6363      	str	r3, [r4, #52]	; 0x34
 80167b8:	7810      	ldrb	r0, [r2, #0]
 80167ba:	6159      	str	r1, [r3, #20]
 80167bc:	68d1      	ldr	r1, [r2, #12]
 80167be:	7418      	strb	r0, [r3, #16]
 80167c0:	61d9      	str	r1, [r3, #28]
 80167c2:	6911      	ldr	r1, [r2, #16]
 80167c4:	6219      	str	r1, [r3, #32]
 80167c6:	6951      	ldr	r1, [r2, #20]
 80167c8:	6892      	ldr	r2, [r2, #8]
 80167ca:	6259      	str	r1, [r3, #36]	; 0x24
 80167cc:	619a      	str	r2, [r3, #24]
 80167ce:	f003 ffa3 	bl	801a718 <uxr_nanos>
 80167d2:	f009 ff49 	bl	8020668 <srand>
 80167d6:	f009 ff75 	bl	80206c4 <rand>
 80167da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167dc:	6298      	str	r0, [r3, #40]	; 0x28
 80167de:	2800      	cmp	r0, #0
 80167e0:	d0f9      	beq.n	80167d6 <rmw_init_options_init+0x9e>
 80167e2:	2000      	movs	r0, #0
 80167e4:	b003      	add	sp, #12
 80167e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167ea:	b004      	add	sp, #16
 80167ec:	4770      	bx	lr
 80167ee:	2001      	movs	r0, #1
 80167f0:	e7b1      	b.n	8016756 <rmw_init_options_init+0x1e>
 80167f2:	bf00      	nop
 80167f4:	080232dc 	.word	0x080232dc
 80167f8:	2001781c 	.word	0x2001781c
 80167fc:	200130b8 	.word	0x200130b8
 8016800:	20012f04 	.word	0x20012f04
 8016804:	08022770 	.word	0x08022770

08016808 <rmw_init_options_copy>:
 8016808:	2800      	cmp	r0, #0
 801680a:	d047      	beq.n	801689c <rmw_init_options_copy+0x94>
 801680c:	b570      	push	{r4, r5, r6, lr}
 801680e:	460d      	mov	r5, r1
 8016810:	b149      	cbz	r1, 8016826 <rmw_init_options_copy+0x1e>
 8016812:	4604      	mov	r4, r0
 8016814:	6880      	ldr	r0, [r0, #8]
 8016816:	b120      	cbz	r0, 8016822 <rmw_init_options_copy+0x1a>
 8016818:	4b22      	ldr	r3, [pc, #136]	; (80168a4 <rmw_init_options_copy+0x9c>)
 801681a:	6819      	ldr	r1, [r3, #0]
 801681c:	f7e9 fd10 	bl	8000240 <strcmp>
 8016820:	bba8      	cbnz	r0, 801688e <rmw_init_options_copy+0x86>
 8016822:	68ab      	ldr	r3, [r5, #8]
 8016824:	b11b      	cbz	r3, 801682e <rmw_init_options_copy+0x26>
 8016826:	f04f 0c0b 	mov.w	ip, #11
 801682a:	4660      	mov	r0, ip
 801682c:	bd70      	pop	{r4, r5, r6, pc}
 801682e:	4623      	mov	r3, r4
 8016830:	462a      	mov	r2, r5
 8016832:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8016836:	f8d3 e000 	ldr.w	lr, [r3]
 801683a:	3310      	adds	r3, #16
 801683c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8016840:	3210      	adds	r2, #16
 8016842:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8016846:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801684a:	42b3      	cmp	r3, r6
 801684c:	f842 ec10 	str.w	lr, [r2, #-16]
 8016850:	f842 cc0c 	str.w	ip, [r2, #-12]
 8016854:	f842 0c08 	str.w	r0, [r2, #-8]
 8016858:	f842 1c04 	str.w	r1, [r2, #-4]
 801685c:	d1eb      	bne.n	8016836 <rmw_init_options_copy+0x2e>
 801685e:	6819      	ldr	r1, [r3, #0]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	4811      	ldr	r0, [pc, #68]	; (80168a8 <rmw_init_options_copy+0xa0>)
 8016864:	6011      	str	r1, [r2, #0]
 8016866:	6053      	str	r3, [r2, #4]
 8016868:	f007 fdee 	bl	801e448 <get_memory>
 801686c:	b198      	cbz	r0, 8016896 <rmw_init_options_copy+0x8e>
 801686e:	6883      	ldr	r3, [r0, #8]
 8016870:	f04f 0c00 	mov.w	ip, #0
 8016874:	636b      	str	r3, [r5, #52]	; 0x34
 8016876:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8016878:	f103 0410 	add.w	r4, r3, #16
 801687c:	3510      	adds	r5, #16
 801687e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801688a:	4660      	mov	r0, ip
 801688c:	bd70      	pop	{r4, r5, r6, pc}
 801688e:	f04f 0c0c 	mov.w	ip, #12
 8016892:	4660      	mov	r0, ip
 8016894:	bd70      	pop	{r4, r5, r6, pc}
 8016896:	f04f 0c01 	mov.w	ip, #1
 801689a:	e7c6      	b.n	801682a <rmw_init_options_copy+0x22>
 801689c:	f04f 0c0b 	mov.w	ip, #11
 80168a0:	4660      	mov	r0, ip
 80168a2:	4770      	bx	lr
 80168a4:	080232dc 	.word	0x080232dc
 80168a8:	2001781c 	.word	0x2001781c

080168ac <rmw_init_options_fini>:
 80168ac:	b510      	push	{r4, lr}
 80168ae:	b08e      	sub	sp, #56	; 0x38
 80168b0:	b388      	cbz	r0, 8016916 <rmw_init_options_fini+0x6a>
 80168b2:	4604      	mov	r4, r0
 80168b4:	3020      	adds	r0, #32
 80168b6:	f7ff fbb9 	bl	801602c <rcutils_allocator_is_valid>
 80168ba:	b360      	cbz	r0, 8016916 <rmw_init_options_fini+0x6a>
 80168bc:	68a0      	ldr	r0, [r4, #8]
 80168be:	b120      	cbz	r0, 80168ca <rmw_init_options_fini+0x1e>
 80168c0:	4b1a      	ldr	r3, [pc, #104]	; (801692c <rmw_init_options_fini+0x80>)
 80168c2:	6819      	ldr	r1, [r3, #0]
 80168c4:	f7e9 fcbc 	bl	8000240 <strcmp>
 80168c8:	bb68      	cbnz	r0, 8016926 <rmw_init_options_fini+0x7a>
 80168ca:	4b19      	ldr	r3, [pc, #100]	; (8016930 <rmw_init_options_fini+0x84>)
 80168cc:	6819      	ldr	r1, [r3, #0]
 80168ce:	b331      	cbz	r1, 801691e <rmw_init_options_fini+0x72>
 80168d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80168d2:	e001      	b.n	80168d8 <rmw_init_options_fini+0x2c>
 80168d4:	6849      	ldr	r1, [r1, #4]
 80168d6:	b311      	cbz	r1, 801691e <rmw_init_options_fini+0x72>
 80168d8:	688b      	ldr	r3, [r1, #8]
 80168da:	429a      	cmp	r2, r3
 80168dc:	d1fa      	bne.n	80168d4 <rmw_init_options_fini+0x28>
 80168de:	4814      	ldr	r0, [pc, #80]	; (8016930 <rmw_init_options_fini+0x84>)
 80168e0:	f007 fdc2 	bl	801e468 <put_memory>
 80168e4:	4668      	mov	r0, sp
 80168e6:	f7ff fdbf 	bl	8016468 <rmw_get_zero_initialized_init_options>
 80168ea:	46ee      	mov	lr, sp
 80168ec:	46a4      	mov	ip, r4
 80168ee:	2400      	movs	r4, #0
 80168f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80168fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016900:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016908:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801690c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016910:	4620      	mov	r0, r4
 8016912:	b00e      	add	sp, #56	; 0x38
 8016914:	bd10      	pop	{r4, pc}
 8016916:	240b      	movs	r4, #11
 8016918:	4620      	mov	r0, r4
 801691a:	b00e      	add	sp, #56	; 0x38
 801691c:	bd10      	pop	{r4, pc}
 801691e:	2401      	movs	r4, #1
 8016920:	4620      	mov	r0, r4
 8016922:	b00e      	add	sp, #56	; 0x38
 8016924:	bd10      	pop	{r4, pc}
 8016926:	240c      	movs	r4, #12
 8016928:	e7f2      	b.n	8016910 <rmw_init_options_fini+0x64>
 801692a:	bf00      	nop
 801692c:	080232dc 	.word	0x080232dc
 8016930:	2001781c 	.word	0x2001781c

08016934 <rmw_init>:
 8016934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016938:	b083      	sub	sp, #12
 801693a:	2800      	cmp	r0, #0
 801693c:	f000 80d3 	beq.w	8016ae6 <rmw_init+0x1b2>
 8016940:	460e      	mov	r6, r1
 8016942:	2900      	cmp	r1, #0
 8016944:	f000 80cf 	beq.w	8016ae6 <rmw_init+0x1b2>
 8016948:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801694a:	4605      	mov	r5, r0
 801694c:	2b00      	cmp	r3, #0
 801694e:	f000 80ca 	beq.w	8016ae6 <rmw_init+0x1b2>
 8016952:	4b78      	ldr	r3, [pc, #480]	; (8016b34 <rmw_init+0x200>)
 8016954:	6880      	ldr	r0, [r0, #8]
 8016956:	681f      	ldr	r7, [r3, #0]
 8016958:	b128      	cbz	r0, 8016966 <rmw_init+0x32>
 801695a:	4639      	mov	r1, r7
 801695c:	f7e9 fc70 	bl	8000240 <strcmp>
 8016960:	2800      	cmp	r0, #0
 8016962:	f040 80ca 	bne.w	8016afa <rmw_init+0x1c6>
 8016966:	4c74      	ldr	r4, [pc, #464]	; (8016b38 <rmw_init+0x204>)
 8016968:	f04f 0800 	mov.w	r8, #0
 801696c:	4973      	ldr	r1, [pc, #460]	; (8016b3c <rmw_init+0x208>)
 801696e:	4874      	ldr	r0, [pc, #464]	; (8016b40 <rmw_init+0x20c>)
 8016970:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016974:	60b7      	str	r7, [r6, #8]
 8016976:	e9c6 2300 	strd	r2, r3, [r6]
 801697a:	68eb      	ldr	r3, [r5, #12]
 801697c:	2201      	movs	r2, #1
 801697e:	64b3      	str	r3, [r6, #72]	; 0x48
 8016980:	f000 fd66 	bl	8017450 <rmw_uxrce_init_session_memory>
 8016984:	4620      	mov	r0, r4
 8016986:	2204      	movs	r2, #4
 8016988:	496e      	ldr	r1, [pc, #440]	; (8016b44 <rmw_init+0x210>)
 801698a:	f000 fda1 	bl	80174d0 <rmw_uxrce_init_static_input_buffer_memory>
 801698e:	486c      	ldr	r0, [pc, #432]	; (8016b40 <rmw_init+0x20c>)
 8016990:	f884 800d 	strb.w	r8, [r4, #13]
 8016994:	f007 fd58 	bl	801e448 <get_memory>
 8016998:	2800      	cmp	r0, #0
 801699a:	f000 80a9 	beq.w	8016af0 <rmw_init+0x1bc>
 801699e:	6884      	ldr	r4, [r0, #8]
 80169a0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80169a2:	f104 0910 	add.w	r9, r4, #16
 80169a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80169a8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80169ac:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80169b0:	9101      	str	r1, [sp, #4]
 80169b2:	4661      	mov	r1, ip
 80169b4:	6a00      	ldr	r0, [r0, #32]
 80169b6:	9000      	str	r0, [sp, #0]
 80169b8:	4648      	mov	r0, r9
 80169ba:	f001 fd27 	bl	801840c <uxr_set_custom_transport_callbacks>
 80169be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80169c2:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80169c6:	4960      	ldr	r1, [pc, #384]	; (8016b48 <rmw_init+0x214>)
 80169c8:	4860      	ldr	r0, [pc, #384]	; (8016b4c <rmw_init+0x218>)
 80169ca:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80169ce:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80169d2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80169d6:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80169da:	2201      	movs	r2, #1
 80169dc:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80169e0:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80169e4:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80169e8:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80169ec:	64f4      	str	r4, [r6, #76]	; 0x4c
 80169ee:	f000 fd0f 	bl	8017410 <rmw_uxrce_init_node_memory>
 80169f2:	2205      	movs	r2, #5
 80169f4:	4956      	ldr	r1, [pc, #344]	; (8016b50 <rmw_init+0x21c>)
 80169f6:	4857      	ldr	r0, [pc, #348]	; (8016b54 <rmw_init+0x220>)
 80169f8:	f000 fcea 	bl	80173d0 <rmw_uxrce_init_subscription_memory>
 80169fc:	220a      	movs	r2, #10
 80169fe:	4956      	ldr	r1, [pc, #344]	; (8016b58 <rmw_init+0x224>)
 8016a00:	4856      	ldr	r0, [pc, #344]	; (8016b5c <rmw_init+0x228>)
 8016a02:	f000 fcc5 	bl	8017390 <rmw_uxrce_init_publisher_memory>
 8016a06:	2201      	movs	r2, #1
 8016a08:	4955      	ldr	r1, [pc, #340]	; (8016b60 <rmw_init+0x22c>)
 8016a0a:	4856      	ldr	r0, [pc, #344]	; (8016b64 <rmw_init+0x230>)
 8016a0c:	f000 fc80 	bl	8017310 <rmw_uxrce_init_service_memory>
 8016a10:	2201      	movs	r2, #1
 8016a12:	4955      	ldr	r1, [pc, #340]	; (8016b68 <rmw_init+0x234>)
 8016a14:	4855      	ldr	r0, [pc, #340]	; (8016b6c <rmw_init+0x238>)
 8016a16:	f000 fc9b 	bl	8017350 <rmw_uxrce_init_client_memory>
 8016a1a:	220f      	movs	r2, #15
 8016a1c:	4954      	ldr	r1, [pc, #336]	; (8016b70 <rmw_init+0x23c>)
 8016a1e:	4855      	ldr	r0, [pc, #340]	; (8016b74 <rmw_init+0x240>)
 8016a20:	f000 fd36 	bl	8017490 <rmw_uxrce_init_topic_memory>
 8016a24:	2203      	movs	r2, #3
 8016a26:	4954      	ldr	r1, [pc, #336]	; (8016b78 <rmw_init+0x244>)
 8016a28:	4854      	ldr	r0, [pc, #336]	; (8016b7c <rmw_init+0x248>)
 8016a2a:	f000 fd71 	bl	8017510 <rmw_uxrce_init_init_options_impl_memory>
 8016a2e:	2204      	movs	r2, #4
 8016a30:	4953      	ldr	r1, [pc, #332]	; (8016b80 <rmw_init+0x24c>)
 8016a32:	4854      	ldr	r0, [pc, #336]	; (8016b84 <rmw_init+0x250>)
 8016a34:	f000 fd8c 	bl	8017550 <rmw_uxrce_init_wait_set_memory>
 8016a38:	4953      	ldr	r1, [pc, #332]	; (8016b88 <rmw_init+0x254>)
 8016a3a:	4854      	ldr	r0, [pc, #336]	; (8016b8c <rmw_init+0x258>)
 8016a3c:	2204      	movs	r2, #4
 8016a3e:	f000 fda7 	bl	8017590 <rmw_uxrce_init_guard_condition_memory>
 8016a42:	4642      	mov	r2, r8
 8016a44:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8016a46:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016a48:	f000 fc4a 	bl	80172e0 <rmw_uxrce_transport_init>
 8016a4c:	4607      	mov	r7, r0
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d158      	bne.n	8016b04 <rmw_init+0x1d0>
 8016a52:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8016a54:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8016a58:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8016a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a5e:	4628      	mov	r0, r5
 8016a60:	f002 f80a 	bl	8018a78 <uxr_init_session>
 8016a64:	4622      	mov	r2, r4
 8016a66:	494a      	ldr	r1, [pc, #296]	; (8016b90 <rmw_init+0x25c>)
 8016a68:	4628      	mov	r0, r5
 8016a6a:	f002 f829 	bl	8018ac0 <uxr_set_topic_callback>
 8016a6e:	463a      	mov	r2, r7
 8016a70:	4948      	ldr	r1, [pc, #288]	; (8016b94 <rmw_init+0x260>)
 8016a72:	4628      	mov	r0, r5
 8016a74:	f002 f820 	bl	8018ab8 <uxr_set_status_callback>
 8016a78:	463a      	mov	r2, r7
 8016a7a:	4947      	ldr	r1, [pc, #284]	; (8016b98 <rmw_init+0x264>)
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	f002 f823 	bl	8018ac8 <uxr_set_request_callback>
 8016a82:	463a      	mov	r2, r7
 8016a84:	4945      	ldr	r1, [pc, #276]	; (8016b9c <rmw_init+0x268>)
 8016a86:	4628      	mov	r0, r5
 8016a88:	f002 f822 	bl	8018ad0 <uxr_set_reply_callback>
 8016a8c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8016a90:	2304      	movs	r3, #4
 8016a92:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8016a96:	0092      	lsls	r2, r2, #2
 8016a98:	4628      	mov	r0, r5
 8016a9a:	f002 f859 	bl	8018b50 <uxr_create_input_reliable_stream>
 8016a9e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8016aa2:	2304      	movs	r3, #4
 8016aa4:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8016aa8:	0092      	lsls	r2, r2, #2
 8016aaa:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8016aae:	4628      	mov	r0, r5
 8016ab0:	f002 f824 	bl	8018afc <uxr_create_output_reliable_stream>
 8016ab4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f002 f843 	bl	8018b44 <uxr_create_input_best_effort_stream>
 8016abe:	f241 3194 	movw	r1, #5012	; 0x1394
 8016ac2:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8016ac6:	4628      	mov	r0, r5
 8016ac8:	4421      	add	r1, r4
 8016aca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8016ace:	f002 f803 	bl	8018ad8 <uxr_create_output_best_effort_stream>
 8016ad2:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f002 fdb6 	bl	8019648 <uxr_create_session>
 8016adc:	b1f8      	cbz	r0, 8016b1e <rmw_init+0x1ea>
 8016ade:	4638      	mov	r0, r7
 8016ae0:	b003      	add	sp, #12
 8016ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ae6:	270b      	movs	r7, #11
 8016ae8:	4638      	mov	r0, r7
 8016aea:	b003      	add	sp, #12
 8016aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016af0:	2701      	movs	r7, #1
 8016af2:	4638      	mov	r0, r7
 8016af4:	b003      	add	sp, #12
 8016af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016afa:	270c      	movs	r7, #12
 8016afc:	4638      	mov	r0, r7
 8016afe:	b003      	add	sp, #12
 8016b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b04:	4648      	mov	r0, r9
 8016b06:	f001 fcbf 	bl	8018488 <uxr_close_custom_transport>
 8016b0a:	4621      	mov	r1, r4
 8016b0c:	480c      	ldr	r0, [pc, #48]	; (8016b40 <rmw_init+0x20c>)
 8016b0e:	f007 fcab 	bl	801e468 <put_memory>
 8016b12:	4638      	mov	r0, r7
 8016b14:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8016b18:	b003      	add	sp, #12
 8016b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b1e:	4648      	mov	r0, r9
 8016b20:	f001 fcb2 	bl	8018488 <uxr_close_custom_transport>
 8016b24:	4621      	mov	r1, r4
 8016b26:	4806      	ldr	r0, [pc, #24]	; (8016b40 <rmw_init+0x20c>)
 8016b28:	f007 fc9e 	bl	801e468 <put_memory>
 8016b2c:	64f7      	str	r7, [r6, #76]	; 0x4c
 8016b2e:	2701      	movs	r7, #1
 8016b30:	e7d5      	b.n	8016ade <rmw_init+0x1aa>
 8016b32:	bf00      	nop
 8016b34:	080232dc 	.word	0x080232dc
 8016b38:	2001786c 	.word	0x2001786c
 8016b3c:	20013b18 	.word	0x20013b18
 8016b40:	2001785c 	.word	0x2001785c
 8016b44:	200150c0 	.word	0x200150c0
 8016b48:	2001313c 	.word	0x2001313c
 8016b4c:	2001782c 	.word	0x2001782c
 8016b50:	200171c0 	.word	0x200171c0
 8016b54:	2001787c 	.word	0x2001787c
 8016b58:	200131e0 	.word	0x200131e0
 8016b5c:	2001783c 	.word	0x2001783c
 8016b60:	20013a50 	.word	0x20013a50
 8016b64:	2001784c 	.word	0x2001784c
 8016b68:	20012f70 	.word	0x20012f70
 8016b6c:	20012f5c 	.word	0x20012f5c
 8016b70:	200175f8 	.word	0x200175f8
 8016b74:	2001788c 	.word	0x2001788c
 8016b78:	200130b8 	.word	0x200130b8
 8016b7c:	2001781c 	.word	0x2001781c
 8016b80:	2001779c 	.word	0x2001779c
 8016b84:	2001789c 	.word	0x2001789c
 8016b88:	20013038 	.word	0x20013038
 8016b8c:	2001780c 	.word	0x2001780c
 8016b90:	0801e281 	.word	0x0801e281
 8016b94:	0801e279 	.word	0x0801e279
 8016b98:	0801e319 	.word	0x0801e319
 8016b9c:	0801e3b5 	.word	0x0801e3b5

08016ba0 <rmw_context_fini>:
 8016ba0:	4b17      	ldr	r3, [pc, #92]	; (8016c00 <rmw_context_fini+0x60>)
 8016ba2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8016ba4:	b570      	push	{r4, r5, r6, lr}
 8016ba6:	681c      	ldr	r4, [r3, #0]
 8016ba8:	4605      	mov	r5, r0
 8016baa:	b334      	cbz	r4, 8016bfa <rmw_context_fini+0x5a>
 8016bac:	2600      	movs	r6, #0
 8016bae:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8016bb2:	6902      	ldr	r2, [r0, #16]
 8016bb4:	428a      	cmp	r2, r1
 8016bb6:	d018      	beq.n	8016bea <rmw_context_fini+0x4a>
 8016bb8:	2c00      	cmp	r4, #0
 8016bba:	d1f8      	bne.n	8016bae <rmw_context_fini+0xe>
 8016bbc:	b189      	cbz	r1, 8016be2 <rmw_context_fini+0x42>
 8016bbe:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8016bc2:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8016bc6:	789b      	ldrb	r3, [r3, #2]
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	bf14      	ite	ne
 8016bcc:	210a      	movne	r1, #10
 8016bce:	2100      	moveq	r1, #0
 8016bd0:	f002 fd12 	bl	80195f8 <uxr_delete_session_retries>
 8016bd4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8016bd6:	f000 fcfb 	bl	80175d0 <rmw_uxrce_fini_session_memory>
 8016bda:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8016bdc:	3010      	adds	r0, #16
 8016bde:	f001 fc53 	bl	8018488 <uxr_close_custom_transport>
 8016be2:	2300      	movs	r3, #0
 8016be4:	4630      	mov	r0, r6
 8016be6:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016be8:	bd70      	pop	{r4, r5, r6, pc}
 8016bea:	3018      	adds	r0, #24
 8016bec:	f000 f89c 	bl	8016d28 <rmw_destroy_node>
 8016bf0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8016bf2:	4606      	mov	r6, r0
 8016bf4:	2c00      	cmp	r4, #0
 8016bf6:	d1da      	bne.n	8016bae <rmw_context_fini+0xe>
 8016bf8:	e7e0      	b.n	8016bbc <rmw_context_fini+0x1c>
 8016bfa:	4626      	mov	r6, r4
 8016bfc:	e7de      	b.n	8016bbc <rmw_context_fini+0x1c>
 8016bfe:	bf00      	nop
 8016c00:	2001782c 	.word	0x2001782c

08016c04 <create_node>:
 8016c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c08:	b083      	sub	sp, #12
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d064      	beq.n	8016cd8 <create_node+0xd4>
 8016c0e:	4606      	mov	r6, r0
 8016c10:	4838      	ldr	r0, [pc, #224]	; (8016cf4 <create_node+0xf0>)
 8016c12:	460f      	mov	r7, r1
 8016c14:	4690      	mov	r8, r2
 8016c16:	461d      	mov	r5, r3
 8016c18:	f007 fc16 	bl	801e448 <get_memory>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	d05b      	beq.n	8016cd8 <create_node+0xd4>
 8016c20:	6884      	ldr	r4, [r0, #8]
 8016c22:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016c24:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8016c28:	f104 0518 	add.w	r5, r4, #24
 8016c2c:	6123      	str	r3, [r4, #16]
 8016c2e:	f007 fc73 	bl	801e518 <rmw_get_implementation_identifier>
 8016c32:	f8c4 9020 	str.w	r9, [r4, #32]
 8016c36:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8016c3a:	4630      	mov	r0, r6
 8016c3c:	f7e9 fb0a 	bl	8000254 <strlen>
 8016c40:	1c42      	adds	r2, r0, #1
 8016c42:	2a3c      	cmp	r2, #60	; 0x3c
 8016c44:	d840      	bhi.n	8016cc8 <create_node+0xc4>
 8016c46:	4648      	mov	r0, r9
 8016c48:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	f00a faa4 	bl	802119a <memcpy>
 8016c52:	4638      	mov	r0, r7
 8016c54:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8016c58:	f7e9 fafc 	bl	8000254 <strlen>
 8016c5c:	1c42      	adds	r2, r0, #1
 8016c5e:	2a3c      	cmp	r2, #60	; 0x3c
 8016c60:	d832      	bhi.n	8016cc8 <create_node+0xc4>
 8016c62:	4639      	mov	r1, r7
 8016c64:	4648      	mov	r0, r9
 8016c66:	f00a fa98 	bl	802119a <memcpy>
 8016c6a:	6923      	ldr	r3, [r4, #16]
 8016c6c:	2101      	movs	r1, #1
 8016c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c72:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8016c76:	1842      	adds	r2, r0, r1
 8016c78:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8016c7c:	f001 fc08 	bl	8018490 <uxr_object_id>
 8016c80:	6160      	str	r0, [r4, #20]
 8016c82:	783b      	ldrb	r3, [r7, #0]
 8016c84:	2b2f      	cmp	r3, #47	; 0x2f
 8016c86:	d12c      	bne.n	8016ce2 <create_node+0xde>
 8016c88:	787b      	ldrb	r3, [r7, #1]
 8016c8a:	bb53      	cbnz	r3, 8016ce2 <create_node+0xde>
 8016c8c:	4633      	mov	r3, r6
 8016c8e:	4a1a      	ldr	r2, [pc, #104]	; (8016cf8 <create_node+0xf4>)
 8016c90:	213c      	movs	r1, #60	; 0x3c
 8016c92:	481a      	ldr	r0, [pc, #104]	; (8016cfc <create_node+0xf8>)
 8016c94:	f00a f848 	bl	8020d28 <sniprintf>
 8016c98:	6920      	ldr	r0, [r4, #16]
 8016c9a:	2106      	movs	r1, #6
 8016c9c:	fa1f f388 	uxth.w	r3, r8
 8016ca0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8016ca4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016ca8:	9101      	str	r1, [sp, #4]
 8016caa:	4914      	ldr	r1, [pc, #80]	; (8016cfc <create_node+0xf8>)
 8016cac:	9100      	str	r1, [sp, #0]
 8016cae:	6811      	ldr	r1, [r2, #0]
 8016cb0:	6962      	ldr	r2, [r4, #20]
 8016cb2:	f001 fa1f 	bl	80180f4 <uxr_buffer_create_participant_bin>
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	6920      	ldr	r0, [r4, #16]
 8016cba:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016cbe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016cc2:	f000 fe07 	bl	80178d4 <run_xrce_session>
 8016cc6:	b918      	cbnz	r0, 8016cd0 <create_node+0xcc>
 8016cc8:	4628      	mov	r0, r5
 8016cca:	2500      	movs	r5, #0
 8016ccc:	f000 fc86 	bl	80175dc <rmw_uxrce_fini_node_memory>
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	b003      	add	sp, #12
 8016cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cd8:	2500      	movs	r5, #0
 8016cda:	4628      	mov	r0, r5
 8016cdc:	b003      	add	sp, #12
 8016cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ce2:	463b      	mov	r3, r7
 8016ce4:	4a06      	ldr	r2, [pc, #24]	; (8016d00 <create_node+0xfc>)
 8016ce6:	213c      	movs	r1, #60	; 0x3c
 8016ce8:	9600      	str	r6, [sp, #0]
 8016cea:	4804      	ldr	r0, [pc, #16]	; (8016cfc <create_node+0xf8>)
 8016cec:	f00a f81c 	bl	8020d28 <sniprintf>
 8016cf0:	e7d2      	b.n	8016c98 <create_node+0x94>
 8016cf2:	bf00      	nop
 8016cf4:	2001782c 	.word	0x2001782c
 8016cf8:	08022c38 	.word	0x08022c38
 8016cfc:	20012f20 	.word	0x20012f20
 8016d00:	08022780 	.word	0x08022780

08016d04 <rmw_create_node>:
 8016d04:	468c      	mov	ip, r1
 8016d06:	4611      	mov	r1, r2
 8016d08:	f1bc 0f00 	cmp.w	ip, #0
 8016d0c:	d00a      	beq.n	8016d24 <rmw_create_node+0x20>
 8016d0e:	f89c 3000 	ldrb.w	r3, [ip]
 8016d12:	b13b      	cbz	r3, 8016d24 <rmw_create_node+0x20>
 8016d14:	b132      	cbz	r2, 8016d24 <rmw_create_node+0x20>
 8016d16:	7813      	ldrb	r3, [r2, #0]
 8016d18:	b123      	cbz	r3, 8016d24 <rmw_create_node+0x20>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8016d1e:	4660      	mov	r0, ip
 8016d20:	f7ff bf70 	b.w	8016c04 <create_node>
 8016d24:	2000      	movs	r0, #0
 8016d26:	4770      	bx	lr

08016d28 <rmw_destroy_node>:
 8016d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d2a:	b328      	cbz	r0, 8016d78 <rmw_destroy_node+0x50>
 8016d2c:	4607      	mov	r7, r0
 8016d2e:	6800      	ldr	r0, [r0, #0]
 8016d30:	b120      	cbz	r0, 8016d3c <rmw_destroy_node+0x14>
 8016d32:	4b37      	ldr	r3, [pc, #220]	; (8016e10 <rmw_destroy_node+0xe8>)
 8016d34:	6819      	ldr	r1, [r3, #0]
 8016d36:	f7e9 fa83 	bl	8000240 <strcmp>
 8016d3a:	b9e8      	cbnz	r0, 8016d78 <rmw_destroy_node+0x50>
 8016d3c:	687d      	ldr	r5, [r7, #4]
 8016d3e:	b1dd      	cbz	r5, 8016d78 <rmw_destroy_node+0x50>
 8016d40:	4b34      	ldr	r3, [pc, #208]	; (8016e14 <rmw_destroy_node+0xec>)
 8016d42:	681c      	ldr	r4, [r3, #0]
 8016d44:	2c00      	cmp	r4, #0
 8016d46:	d060      	beq.n	8016e0a <rmw_destroy_node+0xe2>
 8016d48:	2600      	movs	r6, #0
 8016d4a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016d4e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8016d52:	429d      	cmp	r5, r3
 8016d54:	d013      	beq.n	8016d7e <rmw_destroy_node+0x56>
 8016d56:	2c00      	cmp	r4, #0
 8016d58:	d1f7      	bne.n	8016d4a <rmw_destroy_node+0x22>
 8016d5a:	4b2f      	ldr	r3, [pc, #188]	; (8016e18 <rmw_destroy_node+0xf0>)
 8016d5c:	681c      	ldr	r4, [r3, #0]
 8016d5e:	b1c4      	cbz	r4, 8016d92 <rmw_destroy_node+0x6a>
 8016d60:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016d64:	6a0b      	ldr	r3, [r1, #32]
 8016d66:	429d      	cmp	r5, r3
 8016d68:	d1f9      	bne.n	8016d5e <rmw_destroy_node+0x36>
 8016d6a:	317c      	adds	r1, #124	; 0x7c
 8016d6c:	4638      	mov	r0, r7
 8016d6e:	f000 fa01 	bl	8017174 <rmw_destroy_subscription>
 8016d72:	2801      	cmp	r0, #1
 8016d74:	4606      	mov	r6, r0
 8016d76:	d1f2      	bne.n	8016d5e <rmw_destroy_node+0x36>
 8016d78:	2601      	movs	r6, #1
 8016d7a:	4630      	mov	r0, r6
 8016d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d7e:	3184      	adds	r1, #132	; 0x84
 8016d80:	4638      	mov	r0, r7
 8016d82:	f000 f855 	bl	8016e30 <rmw_destroy_publisher>
 8016d86:	2801      	cmp	r0, #1
 8016d88:	4606      	mov	r6, r0
 8016d8a:	d0f5      	beq.n	8016d78 <rmw_destroy_node+0x50>
 8016d8c:	2c00      	cmp	r4, #0
 8016d8e:	d1dc      	bne.n	8016d4a <rmw_destroy_node+0x22>
 8016d90:	e7e3      	b.n	8016d5a <rmw_destroy_node+0x32>
 8016d92:	4b22      	ldr	r3, [pc, #136]	; (8016e1c <rmw_destroy_node+0xf4>)
 8016d94:	681c      	ldr	r4, [r3, #0]
 8016d96:	b16c      	cbz	r4, 8016db4 <rmw_destroy_node+0x8c>
 8016d98:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016d9c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8016d9e:	429d      	cmp	r5, r3
 8016da0:	d1f9      	bne.n	8016d96 <rmw_destroy_node+0x6e>
 8016da2:	317c      	adds	r1, #124	; 0x7c
 8016da4:	4638      	mov	r0, r7
 8016da6:	f000 f897 	bl	8016ed8 <rmw_destroy_service>
 8016daa:	2801      	cmp	r0, #1
 8016dac:	4606      	mov	r6, r0
 8016dae:	d0e3      	beq.n	8016d78 <rmw_destroy_node+0x50>
 8016db0:	2c00      	cmp	r4, #0
 8016db2:	d1f1      	bne.n	8016d98 <rmw_destroy_node+0x70>
 8016db4:	4b1a      	ldr	r3, [pc, #104]	; (8016e20 <rmw_destroy_node+0xf8>)
 8016db6:	681c      	ldr	r4, [r3, #0]
 8016db8:	b16c      	cbz	r4, 8016dd6 <rmw_destroy_node+0xae>
 8016dba:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016dbe:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8016dc0:	429d      	cmp	r5, r3
 8016dc2:	d1f9      	bne.n	8016db8 <rmw_destroy_node+0x90>
 8016dc4:	317c      	adds	r1, #124	; 0x7c
 8016dc6:	4638      	mov	r0, r7
 8016dc8:	f007 fb62 	bl	801e490 <rmw_destroy_client>
 8016dcc:	2801      	cmp	r0, #1
 8016dce:	4606      	mov	r6, r0
 8016dd0:	d0d2      	beq.n	8016d78 <rmw_destroy_node+0x50>
 8016dd2:	2c00      	cmp	r4, #0
 8016dd4:	d1f1      	bne.n	8016dba <rmw_destroy_node+0x92>
 8016dd6:	6928      	ldr	r0, [r5, #16]
 8016dd8:	696a      	ldr	r2, [r5, #20]
 8016dda:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016dde:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016de2:	6819      	ldr	r1, [r3, #0]
 8016de4:	f001 f93a 	bl	801805c <uxr_buffer_delete_entity>
 8016de8:	4602      	mov	r2, r0
 8016dea:	6928      	ldr	r0, [r5, #16]
 8016dec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016df0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016df4:	f000 fd6e 	bl	80178d4 <run_xrce_session>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	4638      	mov	r0, r7
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	bf08      	it	eq
 8016e00:	2602      	moveq	r6, #2
 8016e02:	f000 fbeb 	bl	80175dc <rmw_uxrce_fini_node_memory>
 8016e06:	4630      	mov	r0, r6
 8016e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e0a:	4626      	mov	r6, r4
 8016e0c:	e7a5      	b.n	8016d5a <rmw_destroy_node+0x32>
 8016e0e:	bf00      	nop
 8016e10:	080232dc 	.word	0x080232dc
 8016e14:	2001783c 	.word	0x2001783c
 8016e18:	2001787c 	.word	0x2001787c
 8016e1c:	2001784c 	.word	0x2001784c
 8016e20:	20012f5c 	.word	0x20012f5c

08016e24 <rmw_node_get_graph_guard_condition>:
 8016e24:	6843      	ldr	r3, [r0, #4]
 8016e26:	6918      	ldr	r0, [r3, #16]
 8016e28:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8016e2c:	4770      	bx	lr
 8016e2e:	bf00      	nop

08016e30 <rmw_destroy_publisher>:
 8016e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e34:	b128      	cbz	r0, 8016e42 <rmw_destroy_publisher+0x12>
 8016e36:	4604      	mov	r4, r0
 8016e38:	6800      	ldr	r0, [r0, #0]
 8016e3a:	460d      	mov	r5, r1
 8016e3c:	f000 fdc4 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 8016e40:	b918      	cbnz	r0, 8016e4a <rmw_destroy_publisher+0x1a>
 8016e42:	2401      	movs	r4, #1
 8016e44:	4620      	mov	r0, r4
 8016e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e4a:	6863      	ldr	r3, [r4, #4]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d0f8      	beq.n	8016e42 <rmw_destroy_publisher+0x12>
 8016e50:	fab5 f485 	clz	r4, r5
 8016e54:	0964      	lsrs	r4, r4, #5
 8016e56:	2d00      	cmp	r5, #0
 8016e58:	d0f3      	beq.n	8016e42 <rmw_destroy_publisher+0x12>
 8016e5a:	6828      	ldr	r0, [r5, #0]
 8016e5c:	f000 fdb4 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d0ee      	beq.n	8016e42 <rmw_destroy_publisher+0x12>
 8016e64:	686e      	ldr	r6, [r5, #4]
 8016e66:	2e00      	cmp	r6, #0
 8016e68:	d0eb      	beq.n	8016e42 <rmw_destroy_publisher+0x12>
 8016e6a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8016e6c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016e70:	f007 fbd2 	bl	801e618 <destroy_topic>
 8016e74:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016e78:	6972      	ldr	r2, [r6, #20]
 8016e7a:	6918      	ldr	r0, [r3, #16]
 8016e7c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016e80:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016e84:	6819      	ldr	r1, [r3, #0]
 8016e86:	f001 f8e9 	bl	801805c <uxr_buffer_delete_entity>
 8016e8a:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016e8e:	4680      	mov	r8, r0
 8016e90:	6932      	ldr	r2, [r6, #16]
 8016e92:	6918      	ldr	r0, [r3, #16]
 8016e94:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016e98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016e9c:	6819      	ldr	r1, [r3, #0]
 8016e9e:	f001 f8dd 	bl	801805c <uxr_buffer_delete_entity>
 8016ea2:	4606      	mov	r6, r0
 8016ea4:	6938      	ldr	r0, [r7, #16]
 8016ea6:	4642      	mov	r2, r8
 8016ea8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016eac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016eb0:	f000 fd10 	bl	80178d4 <run_xrce_session>
 8016eb4:	693f      	ldr	r7, [r7, #16]
 8016eb6:	4632      	mov	r2, r6
 8016eb8:	4606      	mov	r6, r0
 8016eba:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016ebe:	4638      	mov	r0, r7
 8016ec0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016ec4:	f000 fd06 	bl	80178d4 <run_xrce_session>
 8016ec8:	b126      	cbz	r6, 8016ed4 <rmw_destroy_publisher+0xa4>
 8016eca:	b118      	cbz	r0, 8016ed4 <rmw_destroy_publisher+0xa4>
 8016ecc:	4628      	mov	r0, r5
 8016ece:	f000 fb9d 	bl	801760c <rmw_uxrce_fini_publisher_memory>
 8016ed2:	e7b7      	b.n	8016e44 <rmw_destroy_publisher+0x14>
 8016ed4:	2402      	movs	r4, #2
 8016ed6:	e7f9      	b.n	8016ecc <rmw_destroy_publisher+0x9c>

08016ed8 <rmw_destroy_service>:
 8016ed8:	b570      	push	{r4, r5, r6, lr}
 8016eda:	b128      	cbz	r0, 8016ee8 <rmw_destroy_service+0x10>
 8016edc:	4604      	mov	r4, r0
 8016ede:	6800      	ldr	r0, [r0, #0]
 8016ee0:	460d      	mov	r5, r1
 8016ee2:	f000 fd71 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 8016ee6:	b910      	cbnz	r0, 8016eee <rmw_destroy_service+0x16>
 8016ee8:	2401      	movs	r4, #1
 8016eea:	4620      	mov	r0, r4
 8016eec:	bd70      	pop	{r4, r5, r6, pc}
 8016eee:	6863      	ldr	r3, [r4, #4]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d0f9      	beq.n	8016ee8 <rmw_destroy_service+0x10>
 8016ef4:	2d00      	cmp	r5, #0
 8016ef6:	d0f7      	beq.n	8016ee8 <rmw_destroy_service+0x10>
 8016ef8:	6828      	ldr	r0, [r5, #0]
 8016efa:	f000 fd65 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d0f2      	beq.n	8016ee8 <rmw_destroy_service+0x10>
 8016f02:	686e      	ldr	r6, [r5, #4]
 8016f04:	2e00      	cmp	r6, #0
 8016f06:	d0ef      	beq.n	8016ee8 <rmw_destroy_service+0x10>
 8016f08:	6864      	ldr	r4, [r4, #4]
 8016f0a:	6932      	ldr	r2, [r6, #16]
 8016f0c:	6920      	ldr	r0, [r4, #16]
 8016f0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016f12:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016f16:	6819      	ldr	r1, [r3, #0]
 8016f18:	f001 fc28 	bl	801876c <uxr_buffer_cancel_data>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	6920      	ldr	r0, [r4, #16]
 8016f20:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016f24:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016f28:	f000 fcd4 	bl	80178d4 <run_xrce_session>
 8016f2c:	6920      	ldr	r0, [r4, #16]
 8016f2e:	6932      	ldr	r2, [r6, #16]
 8016f30:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016f34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016f38:	6819      	ldr	r1, [r3, #0]
 8016f3a:	f001 f88f 	bl	801805c <uxr_buffer_delete_entity>
 8016f3e:	4602      	mov	r2, r0
 8016f40:	6920      	ldr	r0, [r4, #16]
 8016f42:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016f46:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016f4a:	f000 fcc3 	bl	80178d4 <run_xrce_session>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	4628      	mov	r0, r5
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	bf14      	ite	ne
 8016f56:	2400      	movne	r4, #0
 8016f58:	2402      	moveq	r4, #2
 8016f5a:	f000 fb83 	bl	8017664 <rmw_uxrce_fini_service_memory>
 8016f5e:	e7c4      	b.n	8016eea <rmw_destroy_service+0x12>

08016f60 <rmw_create_subscription>:
 8016f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f64:	b08d      	sub	sp, #52	; 0x34
 8016f66:	2900      	cmp	r1, #0
 8016f68:	f000 80d8 	beq.w	801711c <rmw_create_subscription+0x1bc>
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	2800      	cmp	r0, #0
 8016f70:	f000 80d4 	beq.w	801711c <rmw_create_subscription+0x1bc>
 8016f74:	6800      	ldr	r0, [r0, #0]
 8016f76:	460e      	mov	r6, r1
 8016f78:	4615      	mov	r5, r2
 8016f7a:	461f      	mov	r7, r3
 8016f7c:	f000 fd24 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 8016f80:	f080 0001 	eor.w	r0, r0, #1
 8016f84:	b2c0      	uxtb	r0, r0
 8016f86:	2800      	cmp	r0, #0
 8016f88:	f040 80c8 	bne.w	801711c <rmw_create_subscription+0x1bc>
 8016f8c:	2d00      	cmp	r5, #0
 8016f8e:	f000 80c5 	beq.w	801711c <rmw_create_subscription+0x1bc>
 8016f92:	782b      	ldrb	r3, [r5, #0]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	f000 80c1 	beq.w	801711c <rmw_create_subscription+0x1bc>
 8016f9a:	2f00      	cmp	r7, #0
 8016f9c:	f000 80be 	beq.w	801711c <rmw_create_subscription+0x1bc>
 8016fa0:	4867      	ldr	r0, [pc, #412]	; (8017140 <rmw_create_subscription+0x1e0>)
 8016fa2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016fa6:	f007 fa4f 	bl	801e448 <get_memory>
 8016faa:	4604      	mov	r4, r0
 8016fac:	2800      	cmp	r0, #0
 8016fae:	f000 80b6 	beq.w	801711e <rmw_create_subscription+0x1be>
 8016fb2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016fb6:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8016fba:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8016fbe:	f007 faab 	bl	801e518 <rmw_get_implementation_identifier>
 8016fc2:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8016fc6:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8016fca:	4628      	mov	r0, r5
 8016fcc:	f7e9 f942 	bl	8000254 <strlen>
 8016fd0:	3001      	adds	r0, #1
 8016fd2:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8016fd6:	283c      	cmp	r0, #60	; 0x3c
 8016fd8:	f200 80a5 	bhi.w	8017126 <rmw_create_subscription+0x1c6>
 8016fdc:	462b      	mov	r3, r5
 8016fde:	4a59      	ldr	r2, [pc, #356]	; (8017144 <rmw_create_subscription+0x1e4>)
 8016fe0:	213c      	movs	r1, #60	; 0x3c
 8016fe2:	4650      	mov	r0, sl
 8016fe4:	f009 fea0 	bl	8020d28 <sniprintf>
 8016fe8:	4639      	mov	r1, r7
 8016fea:	2250      	movs	r2, #80	; 0x50
 8016fec:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8016ff0:	f8c8 9020 	str.w	r9, [r8, #32]
 8016ff4:	f00a f8d1 	bl	802119a <memcpy>
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	4953      	ldr	r1, [pc, #332]	; (8017148 <rmw_create_subscription+0x1e8>)
 8016ffc:	f000 fcf2 	bl	80179e4 <get_message_typesupport_handle>
 8017000:	2800      	cmp	r0, #0
 8017002:	f000 8090 	beq.w	8017126 <rmw_create_subscription+0x1c6>
 8017006:	6842      	ldr	r2, [r0, #4]
 8017008:	f8c8 2018 	str.w	r2, [r8, #24]
 801700c:	2a00      	cmp	r2, #0
 801700e:	f000 808a 	beq.w	8017126 <rmw_create_subscription+0x1c6>
 8017012:	4629      	mov	r1, r5
 8017014:	463b      	mov	r3, r7
 8017016:	4648      	mov	r0, r9
 8017018:	f007 faae 	bl	801e578 <create_topic>
 801701c:	f8c8 001c 	str.w	r0, [r8, #28]
 8017020:	2800      	cmp	r0, #0
 8017022:	f000 8085 	beq.w	8017130 <rmw_create_subscription+0x1d0>
 8017026:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801702a:	2104      	movs	r1, #4
 801702c:	2506      	movs	r5, #6
 801702e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017032:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8017036:	1c42      	adds	r2, r0, #1
 8017038:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801703c:	f001 fa28 	bl	8018490 <uxr_object_id>
 8017040:	f8c8 0010 	str.w	r0, [r8, #16]
 8017044:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017048:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801704c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017050:	9500      	str	r5, [sp, #0]
 8017052:	6819      	ldr	r1, [r3, #0]
 8017054:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017058:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801705c:	f001 f8b2 	bl	80181c4 <uxr_buffer_create_subscriber_bin>
 8017060:	4602      	mov	r2, r0
 8017062:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8017066:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801706a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801706e:	f000 fc31 	bl	80178d4 <run_xrce_session>
 8017072:	2800      	cmp	r0, #0
 8017074:	d057      	beq.n	8017126 <rmw_create_subscription+0x1c6>
 8017076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801707a:	4629      	mov	r1, r5
 801707c:	ae08      	add	r6, sp, #32
 801707e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017082:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8017086:	1c42      	adds	r2, r0, #1
 8017088:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801708c:	f001 fa00 	bl	8018490 <uxr_object_id>
 8017090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017094:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8017098:	4639      	mov	r1, r7
 801709a:	f8c8 0014 	str.w	r0, [r8, #20]
 801709e:	4630      	mov	r0, r6
 80170a0:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80170a4:	9305      	str	r3, [sp, #20]
 80170a6:	f000 fc31 	bl	801790c <convert_qos_profile>
 80170aa:	9503      	str	r5, [sp, #12]
 80170ac:	9b05      	ldr	r3, [sp, #20]
 80170ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80170b2:	9001      	str	r0, [sp, #4]
 80170b4:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80170b8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	f8db 1000 	ldr.w	r1, [fp]
 80170c4:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80170c8:	f001 f8ac 	bl	8018224 <uxr_buffer_create_datareader_bin>
 80170cc:	4602      	mov	r2, r0
 80170ce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80170d2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80170d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80170da:	f000 fbfb 	bl	80178d4 <run_xrce_session>
 80170de:	b310      	cbz	r0, 8017126 <rmw_create_subscription+0x1c6>
 80170e0:	7a3b      	ldrb	r3, [r7, #8]
 80170e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	920a      	str	r2, [sp, #40]	; 0x28
 80170ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80170f2:	f04f 0200 	mov.w	r2, #0
 80170f6:	bf08      	it	eq
 80170f8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80170fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017100:	bf18      	it	ne
 8017102:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8017106:	920b      	str	r2, [sp, #44]	; 0x2c
 8017108:	9307      	str	r3, [sp, #28]
 801710a:	ab0a      	add	r3, sp, #40	; 0x28
 801710c:	9300      	str	r3, [sp, #0]
 801710e:	9b07      	ldr	r3, [sp, #28]
 8017110:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8017114:	6809      	ldr	r1, [r1, #0]
 8017116:	f001 faef 	bl	80186f8 <uxr_buffer_request_data>
 801711a:	e000      	b.n	801711e <rmw_create_subscription+0x1be>
 801711c:	2400      	movs	r4, #0
 801711e:	4620      	mov	r0, r4
 8017120:	b00d      	add	sp, #52	; 0x34
 8017122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017126:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801712a:	b108      	cbz	r0, 8017130 <rmw_create_subscription+0x1d0>
 801712c:	f000 fac6 	bl	80176bc <rmw_uxrce_fini_topic_memory>
 8017130:	4620      	mov	r0, r4
 8017132:	2400      	movs	r4, #0
 8017134:	f000 fa80 	bl	8017638 <rmw_uxrce_fini_subscription_memory>
 8017138:	4620      	mov	r0, r4
 801713a:	b00d      	add	sp, #52	; 0x34
 801713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017140:	2001787c 	.word	0x2001787c
 8017144:	08022c38 	.word	0x08022c38
 8017148:	08022410 	.word	0x08022410

0801714c <rmw_subscription_get_actual_qos>:
 801714c:	b178      	cbz	r0, 801716e <rmw_subscription_get_actual_qos+0x22>
 801714e:	b510      	push	{r4, lr}
 8017150:	fab1 f481 	clz	r4, r1
 8017154:	0964      	lsrs	r4, r4, #5
 8017156:	b141      	cbz	r1, 801716a <rmw_subscription_get_actual_qos+0x1e>
 8017158:	6843      	ldr	r3, [r0, #4]
 801715a:	2250      	movs	r2, #80	; 0x50
 801715c:	4608      	mov	r0, r1
 801715e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8017162:	f00a f81a 	bl	802119a <memcpy>
 8017166:	4620      	mov	r0, r4
 8017168:	bd10      	pop	{r4, pc}
 801716a:	200b      	movs	r0, #11
 801716c:	bd10      	pop	{r4, pc}
 801716e:	200b      	movs	r0, #11
 8017170:	4770      	bx	lr
 8017172:	bf00      	nop

08017174 <rmw_destroy_subscription>:
 8017174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017178:	b128      	cbz	r0, 8017186 <rmw_destroy_subscription+0x12>
 801717a:	4604      	mov	r4, r0
 801717c:	6800      	ldr	r0, [r0, #0]
 801717e:	460d      	mov	r5, r1
 8017180:	f000 fc22 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 8017184:	b918      	cbnz	r0, 801718e <rmw_destroy_subscription+0x1a>
 8017186:	2401      	movs	r4, #1
 8017188:	4620      	mov	r0, r4
 801718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801718e:	6863      	ldr	r3, [r4, #4]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d0f8      	beq.n	8017186 <rmw_destroy_subscription+0x12>
 8017194:	fab5 f485 	clz	r4, r5
 8017198:	0964      	lsrs	r4, r4, #5
 801719a:	2d00      	cmp	r5, #0
 801719c:	d0f3      	beq.n	8017186 <rmw_destroy_subscription+0x12>
 801719e:	6828      	ldr	r0, [r5, #0]
 80171a0:	f000 fc12 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 80171a4:	2800      	cmp	r0, #0
 80171a6:	d0ee      	beq.n	8017186 <rmw_destroy_subscription+0x12>
 80171a8:	686e      	ldr	r6, [r5, #4]
 80171aa:	2e00      	cmp	r6, #0
 80171ac:	d0eb      	beq.n	8017186 <rmw_destroy_subscription+0x12>
 80171ae:	6a37      	ldr	r7, [r6, #32]
 80171b0:	6972      	ldr	r2, [r6, #20]
 80171b2:	6938      	ldr	r0, [r7, #16]
 80171b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80171b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80171bc:	6819      	ldr	r1, [r3, #0]
 80171be:	f001 fad5 	bl	801876c <uxr_buffer_cancel_data>
 80171c2:	4602      	mov	r2, r0
 80171c4:	6938      	ldr	r0, [r7, #16]
 80171c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80171ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80171ce:	f000 fb81 	bl	80178d4 <run_xrce_session>
 80171d2:	69f0      	ldr	r0, [r6, #28]
 80171d4:	f007 fa20 	bl	801e618 <destroy_topic>
 80171d8:	6a33      	ldr	r3, [r6, #32]
 80171da:	6972      	ldr	r2, [r6, #20]
 80171dc:	6918      	ldr	r0, [r3, #16]
 80171de:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80171e2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80171e6:	6819      	ldr	r1, [r3, #0]
 80171e8:	f000 ff38 	bl	801805c <uxr_buffer_delete_entity>
 80171ec:	6a33      	ldr	r3, [r6, #32]
 80171ee:	4680      	mov	r8, r0
 80171f0:	6932      	ldr	r2, [r6, #16]
 80171f2:	6918      	ldr	r0, [r3, #16]
 80171f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80171f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80171fc:	6819      	ldr	r1, [r3, #0]
 80171fe:	f000 ff2d 	bl	801805c <uxr_buffer_delete_entity>
 8017202:	4606      	mov	r6, r0
 8017204:	6938      	ldr	r0, [r7, #16]
 8017206:	4642      	mov	r2, r8
 8017208:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801720c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017210:	f000 fb60 	bl	80178d4 <run_xrce_session>
 8017214:	693f      	ldr	r7, [r7, #16]
 8017216:	4632      	mov	r2, r6
 8017218:	4606      	mov	r6, r0
 801721a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801721e:	4638      	mov	r0, r7
 8017220:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017224:	f000 fb56 	bl	80178d4 <run_xrce_session>
 8017228:	b126      	cbz	r6, 8017234 <rmw_destroy_subscription+0xc0>
 801722a:	b118      	cbz	r0, 8017234 <rmw_destroy_subscription+0xc0>
 801722c:	4628      	mov	r0, r5
 801722e:	f000 fa03 	bl	8017638 <rmw_uxrce_fini_subscription_memory>
 8017232:	e7a9      	b.n	8017188 <rmw_destroy_subscription+0x14>
 8017234:	2402      	movs	r4, #2
 8017236:	e7f9      	b.n	801722c <rmw_destroy_subscription+0xb8>

08017238 <rmw_take_with_info>:
 8017238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801723a:	4604      	mov	r4, r0
 801723c:	6800      	ldr	r0, [r0, #0]
 801723e:	b089      	sub	sp, #36	; 0x24
 8017240:	460f      	mov	r7, r1
 8017242:	4615      	mov	r5, r2
 8017244:	b128      	cbz	r0, 8017252 <rmw_take_with_info+0x1a>
 8017246:	4b24      	ldr	r3, [pc, #144]	; (80172d8 <rmw_take_with_info+0xa0>)
 8017248:	6819      	ldr	r1, [r3, #0]
 801724a:	f7e8 fff9 	bl	8000240 <strcmp>
 801724e:	2800      	cmp	r0, #0
 8017250:	d13e      	bne.n	80172d0 <rmw_take_with_info+0x98>
 8017252:	b305      	cbz	r5, 8017296 <rmw_take_with_info+0x5e>
 8017254:	2300      	movs	r3, #0
 8017256:	6864      	ldr	r4, [r4, #4]
 8017258:	702b      	strb	r3, [r5, #0]
 801725a:	f000 fabd 	bl	80177d8 <rmw_uxrce_clean_expired_static_input_buffer>
 801725e:	4620      	mov	r0, r4
 8017260:	f000 fa92 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017264:	4606      	mov	r6, r0
 8017266:	b1f0      	cbz	r0, 80172a6 <rmw_take_with_info+0x6e>
 8017268:	6881      	ldr	r1, [r0, #8]
 801726a:	4668      	mov	r0, sp
 801726c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8017270:	3110      	adds	r1, #16
 8017272:	f7fd fa95 	bl	80147a0 <ucdr_init_buffer>
 8017276:	69a3      	ldr	r3, [r4, #24]
 8017278:	4639      	mov	r1, r7
 801727a:	4668      	mov	r0, sp
 801727c:	68db      	ldr	r3, [r3, #12]
 801727e:	4798      	blx	r3
 8017280:	4604      	mov	r4, r0
 8017282:	4631      	mov	r1, r6
 8017284:	4815      	ldr	r0, [pc, #84]	; (80172dc <rmw_take_with_info+0xa4>)
 8017286:	f007 f8ef 	bl	801e468 <put_memory>
 801728a:	702c      	strb	r4, [r5, #0]
 801728c:	f084 0001 	eor.w	r0, r4, #1
 8017290:	b2c0      	uxtb	r0, r0
 8017292:	b009      	add	sp, #36	; 0x24
 8017294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017296:	6864      	ldr	r4, [r4, #4]
 8017298:	f000 fa9e 	bl	80177d8 <rmw_uxrce_clean_expired_static_input_buffer>
 801729c:	4620      	mov	r0, r4
 801729e:	f000 fa73 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 80172a2:	4605      	mov	r5, r0
 80172a4:	b910      	cbnz	r0, 80172ac <rmw_take_with_info+0x74>
 80172a6:	2001      	movs	r0, #1
 80172a8:	b009      	add	sp, #36	; 0x24
 80172aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172ac:	68a9      	ldr	r1, [r5, #8]
 80172ae:	4668      	mov	r0, sp
 80172b0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80172b4:	3110      	adds	r1, #16
 80172b6:	f7fd fa73 	bl	80147a0 <ucdr_init_buffer>
 80172ba:	69a3      	ldr	r3, [r4, #24]
 80172bc:	4639      	mov	r1, r7
 80172be:	4668      	mov	r0, sp
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	4798      	blx	r3
 80172c4:	4629      	mov	r1, r5
 80172c6:	4604      	mov	r4, r0
 80172c8:	4804      	ldr	r0, [pc, #16]	; (80172dc <rmw_take_with_info+0xa4>)
 80172ca:	f007 f8cd 	bl	801e468 <put_memory>
 80172ce:	e7dd      	b.n	801728c <rmw_take_with_info+0x54>
 80172d0:	200c      	movs	r0, #12
 80172d2:	b009      	add	sp, #36	; 0x24
 80172d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172d6:	bf00      	nop
 80172d8:	080232dc 	.word	0x080232dc
 80172dc:	2001786c 	.word	0x2001786c

080172e0 <rmw_uxrce_transport_init>:
 80172e0:	b508      	push	{r3, lr}
 80172e2:	b108      	cbz	r0, 80172e8 <rmw_uxrce_transport_init+0x8>
 80172e4:	f100 0210 	add.w	r2, r0, #16
 80172e8:	b139      	cbz	r1, 80172fa <rmw_uxrce_transport_init+0x1a>
 80172ea:	6949      	ldr	r1, [r1, #20]
 80172ec:	4610      	mov	r0, r2
 80172ee:	f001 f897 	bl	8018420 <uxr_init_custom_transport>
 80172f2:	f080 0001 	eor.w	r0, r0, #1
 80172f6:	b2c0      	uxtb	r0, r0
 80172f8:	bd08      	pop	{r3, pc}
 80172fa:	4b04      	ldr	r3, [pc, #16]	; (801730c <rmw_uxrce_transport_init+0x2c>)
 80172fc:	4610      	mov	r0, r2
 80172fe:	6859      	ldr	r1, [r3, #4]
 8017300:	f001 f88e 	bl	8018420 <uxr_init_custom_transport>
 8017304:	f080 0001 	eor.w	r0, r0, #1
 8017308:	b2c0      	uxtb	r0, r0
 801730a:	bd08      	pop	{r3, pc}
 801730c:	20012f04 	.word	0x20012f04

08017310 <rmw_uxrce_init_service_memory>:
 8017310:	b1e2      	cbz	r2, 801734c <rmw_uxrce_init_service_memory+0x3c>
 8017312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017316:	7b05      	ldrb	r5, [r0, #12]
 8017318:	4606      	mov	r6, r0
 801731a:	b9ad      	cbnz	r5, 8017348 <rmw_uxrce_init_service_memory+0x38>
 801731c:	23c8      	movs	r3, #200	; 0xc8
 801731e:	4617      	mov	r7, r2
 8017320:	460c      	mov	r4, r1
 8017322:	46a8      	mov	r8, r5
 8017324:	6083      	str	r3, [r0, #8]
 8017326:	f240 1301 	movw	r3, #257	; 0x101
 801732a:	e9c0 5500 	strd	r5, r5, [r0]
 801732e:	8183      	strh	r3, [r0, #12]
 8017330:	3501      	adds	r5, #1
 8017332:	4621      	mov	r1, r4
 8017334:	4630      	mov	r0, r6
 8017336:	f007 f897 	bl	801e468 <put_memory>
 801733a:	42af      	cmp	r7, r5
 801733c:	60a4      	str	r4, [r4, #8]
 801733e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8017342:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8017346:	d1f3      	bne.n	8017330 <rmw_uxrce_init_service_memory+0x20>
 8017348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801734c:	4770      	bx	lr
 801734e:	bf00      	nop

08017350 <rmw_uxrce_init_client_memory>:
 8017350:	b1e2      	cbz	r2, 801738c <rmw_uxrce_init_client_memory+0x3c>
 8017352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017356:	7b05      	ldrb	r5, [r0, #12]
 8017358:	4606      	mov	r6, r0
 801735a:	b9ad      	cbnz	r5, 8017388 <rmw_uxrce_init_client_memory+0x38>
 801735c:	23c8      	movs	r3, #200	; 0xc8
 801735e:	4617      	mov	r7, r2
 8017360:	460c      	mov	r4, r1
 8017362:	46a8      	mov	r8, r5
 8017364:	6083      	str	r3, [r0, #8]
 8017366:	f240 1301 	movw	r3, #257	; 0x101
 801736a:	e9c0 5500 	strd	r5, r5, [r0]
 801736e:	8183      	strh	r3, [r0, #12]
 8017370:	3501      	adds	r5, #1
 8017372:	4621      	mov	r1, r4
 8017374:	4630      	mov	r0, r6
 8017376:	f007 f877 	bl	801e468 <put_memory>
 801737a:	42af      	cmp	r7, r5
 801737c:	60a4      	str	r4, [r4, #8]
 801737e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8017382:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8017386:	d1f3      	bne.n	8017370 <rmw_uxrce_init_client_memory+0x20>
 8017388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801738c:	4770      	bx	lr
 801738e:	bf00      	nop

08017390 <rmw_uxrce_init_publisher_memory>:
 8017390:	b1e2      	cbz	r2, 80173cc <rmw_uxrce_init_publisher_memory+0x3c>
 8017392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017396:	7b05      	ldrb	r5, [r0, #12]
 8017398:	4606      	mov	r6, r0
 801739a:	b9ad      	cbnz	r5, 80173c8 <rmw_uxrce_init_publisher_memory+0x38>
 801739c:	23d8      	movs	r3, #216	; 0xd8
 801739e:	4617      	mov	r7, r2
 80173a0:	460c      	mov	r4, r1
 80173a2:	46a8      	mov	r8, r5
 80173a4:	6083      	str	r3, [r0, #8]
 80173a6:	f240 1301 	movw	r3, #257	; 0x101
 80173aa:	e9c0 5500 	strd	r5, r5, [r0]
 80173ae:	8183      	strh	r3, [r0, #12]
 80173b0:	3501      	adds	r5, #1
 80173b2:	4621      	mov	r1, r4
 80173b4:	4630      	mov	r0, r6
 80173b6:	f007 f857 	bl	801e468 <put_memory>
 80173ba:	42af      	cmp	r7, r5
 80173bc:	60a4      	str	r4, [r4, #8]
 80173be:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80173c2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80173c6:	d1f3      	bne.n	80173b0 <rmw_uxrce_init_publisher_memory+0x20>
 80173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173cc:	4770      	bx	lr
 80173ce:	bf00      	nop

080173d0 <rmw_uxrce_init_subscription_memory>:
 80173d0:	b1e2      	cbz	r2, 801740c <rmw_uxrce_init_subscription_memory+0x3c>
 80173d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d6:	7b05      	ldrb	r5, [r0, #12]
 80173d8:	4606      	mov	r6, r0
 80173da:	b9ad      	cbnz	r5, 8017408 <rmw_uxrce_init_subscription_memory+0x38>
 80173dc:	23d8      	movs	r3, #216	; 0xd8
 80173de:	4617      	mov	r7, r2
 80173e0:	460c      	mov	r4, r1
 80173e2:	46a8      	mov	r8, r5
 80173e4:	6083      	str	r3, [r0, #8]
 80173e6:	f240 1301 	movw	r3, #257	; 0x101
 80173ea:	e9c0 5500 	strd	r5, r5, [r0]
 80173ee:	8183      	strh	r3, [r0, #12]
 80173f0:	3501      	adds	r5, #1
 80173f2:	4621      	mov	r1, r4
 80173f4:	4630      	mov	r0, r6
 80173f6:	f007 f837 	bl	801e468 <put_memory>
 80173fa:	42af      	cmp	r7, r5
 80173fc:	60a4      	str	r4, [r4, #8]
 80173fe:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8017402:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8017406:	d1f3      	bne.n	80173f0 <rmw_uxrce_init_subscription_memory+0x20>
 8017408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801740c:	4770      	bx	lr
 801740e:	bf00      	nop

08017410 <rmw_uxrce_init_node_memory>:
 8017410:	b1e2      	cbz	r2, 801744c <rmw_uxrce_init_node_memory+0x3c>
 8017412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017416:	7b05      	ldrb	r5, [r0, #12]
 8017418:	4606      	mov	r6, r0
 801741a:	b9ad      	cbnz	r5, 8017448 <rmw_uxrce_init_node_memory+0x38>
 801741c:	23a4      	movs	r3, #164	; 0xa4
 801741e:	4617      	mov	r7, r2
 8017420:	460c      	mov	r4, r1
 8017422:	46a8      	mov	r8, r5
 8017424:	6083      	str	r3, [r0, #8]
 8017426:	f240 1301 	movw	r3, #257	; 0x101
 801742a:	e9c0 5500 	strd	r5, r5, [r0]
 801742e:	8183      	strh	r3, [r0, #12]
 8017430:	3501      	adds	r5, #1
 8017432:	4621      	mov	r1, r4
 8017434:	4630      	mov	r0, r6
 8017436:	f007 f817 	bl	801e468 <put_memory>
 801743a:	42af      	cmp	r7, r5
 801743c:	60a4      	str	r4, [r4, #8]
 801743e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8017442:	f804 8c98 	strb.w	r8, [r4, #-152]
 8017446:	d1f3      	bne.n	8017430 <rmw_uxrce_init_node_memory+0x20>
 8017448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801744c:	4770      	bx	lr
 801744e:	bf00      	nop

08017450 <rmw_uxrce_init_session_memory>:
 8017450:	b1ea      	cbz	r2, 801748e <rmw_uxrce_init_session_memory+0x3e>
 8017452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017456:	7b05      	ldrb	r5, [r0, #12]
 8017458:	4606      	mov	r6, r0
 801745a:	b9b5      	cbnz	r5, 801748a <rmw_uxrce_init_session_memory+0x3a>
 801745c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8017460:	f240 1301 	movw	r3, #257	; 0x101
 8017464:	4617      	mov	r7, r2
 8017466:	460c      	mov	r4, r1
 8017468:	46a9      	mov	r9, r5
 801746a:	f8c0 8008 	str.w	r8, [r0, #8]
 801746e:	8183      	strh	r3, [r0, #12]
 8017470:	e9c0 5500 	strd	r5, r5, [r0]
 8017474:	3501      	adds	r5, #1
 8017476:	4621      	mov	r1, r4
 8017478:	4630      	mov	r0, r6
 801747a:	f006 fff5 	bl	801e468 <put_memory>
 801747e:	42af      	cmp	r7, r5
 8017480:	60a4      	str	r4, [r4, #8]
 8017482:	f884 900c 	strb.w	r9, [r4, #12]
 8017486:	4444      	add	r4, r8
 8017488:	d1f4      	bne.n	8017474 <rmw_uxrce_init_session_memory+0x24>
 801748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801748e:	4770      	bx	lr

08017490 <rmw_uxrce_init_topic_memory>:
 8017490:	b1e2      	cbz	r2, 80174cc <rmw_uxrce_init_topic_memory+0x3c>
 8017492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017496:	7b05      	ldrb	r5, [r0, #12]
 8017498:	4606      	mov	r6, r0
 801749a:	b9ad      	cbnz	r5, 80174c8 <rmw_uxrce_init_topic_memory+0x38>
 801749c:	231c      	movs	r3, #28
 801749e:	4617      	mov	r7, r2
 80174a0:	460c      	mov	r4, r1
 80174a2:	46a8      	mov	r8, r5
 80174a4:	6083      	str	r3, [r0, #8]
 80174a6:	f240 1301 	movw	r3, #257	; 0x101
 80174aa:	e9c0 5500 	strd	r5, r5, [r0]
 80174ae:	8183      	strh	r3, [r0, #12]
 80174b0:	3501      	adds	r5, #1
 80174b2:	4621      	mov	r1, r4
 80174b4:	4630      	mov	r0, r6
 80174b6:	f006 ffd7 	bl	801e468 <put_memory>
 80174ba:	42af      	cmp	r7, r5
 80174bc:	60a4      	str	r4, [r4, #8]
 80174be:	f104 041c 	add.w	r4, r4, #28
 80174c2:	f804 8c10 	strb.w	r8, [r4, #-16]
 80174c6:	d1f3      	bne.n	80174b0 <rmw_uxrce_init_topic_memory+0x20>
 80174c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174cc:	4770      	bx	lr
 80174ce:	bf00      	nop

080174d0 <rmw_uxrce_init_static_input_buffer_memory>:
 80174d0:	b1ea      	cbz	r2, 801750e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80174d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174d6:	7b05      	ldrb	r5, [r0, #12]
 80174d8:	4606      	mov	r6, r0
 80174da:	b9b5      	cbnz	r5, 801750a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80174dc:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80174e0:	4617      	mov	r7, r2
 80174e2:	460c      	mov	r4, r1
 80174e4:	46a8      	mov	r8, r5
 80174e6:	6083      	str	r3, [r0, #8]
 80174e8:	f240 1301 	movw	r3, #257	; 0x101
 80174ec:	e9c0 5500 	strd	r5, r5, [r0]
 80174f0:	8183      	strh	r3, [r0, #12]
 80174f2:	3501      	adds	r5, #1
 80174f4:	4621      	mov	r1, r4
 80174f6:	4630      	mov	r0, r6
 80174f8:	f006 ffb6 	bl	801e468 <put_memory>
 80174fc:	42af      	cmp	r7, r5
 80174fe:	60a4      	str	r4, [r4, #8]
 8017500:	f884 800c 	strb.w	r8, [r4, #12]
 8017504:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8017508:	d1f3      	bne.n	80174f2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801750a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801750e:	4770      	bx	lr

08017510 <rmw_uxrce_init_init_options_impl_memory>:
 8017510:	b1e2      	cbz	r2, 801754c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8017512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017516:	7b05      	ldrb	r5, [r0, #12]
 8017518:	4606      	mov	r6, r0
 801751a:	b9ad      	cbnz	r5, 8017548 <rmw_uxrce_init_init_options_impl_memory+0x38>
 801751c:	232c      	movs	r3, #44	; 0x2c
 801751e:	4617      	mov	r7, r2
 8017520:	460c      	mov	r4, r1
 8017522:	46a8      	mov	r8, r5
 8017524:	6083      	str	r3, [r0, #8]
 8017526:	f240 1301 	movw	r3, #257	; 0x101
 801752a:	e9c0 5500 	strd	r5, r5, [r0]
 801752e:	8183      	strh	r3, [r0, #12]
 8017530:	3501      	adds	r5, #1
 8017532:	4621      	mov	r1, r4
 8017534:	4630      	mov	r0, r6
 8017536:	f006 ff97 	bl	801e468 <put_memory>
 801753a:	42af      	cmp	r7, r5
 801753c:	60a4      	str	r4, [r4, #8]
 801753e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8017542:	f804 8c20 	strb.w	r8, [r4, #-32]
 8017546:	d1f3      	bne.n	8017530 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8017548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop

08017550 <rmw_uxrce_init_wait_set_memory>:
 8017550:	b1e2      	cbz	r2, 801758c <rmw_uxrce_init_wait_set_memory+0x3c>
 8017552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017556:	7b05      	ldrb	r5, [r0, #12]
 8017558:	4606      	mov	r6, r0
 801755a:	b9ad      	cbnz	r5, 8017588 <rmw_uxrce_init_wait_set_memory+0x38>
 801755c:	231c      	movs	r3, #28
 801755e:	4617      	mov	r7, r2
 8017560:	460c      	mov	r4, r1
 8017562:	46a8      	mov	r8, r5
 8017564:	6083      	str	r3, [r0, #8]
 8017566:	f240 1301 	movw	r3, #257	; 0x101
 801756a:	e9c0 5500 	strd	r5, r5, [r0]
 801756e:	8183      	strh	r3, [r0, #12]
 8017570:	3501      	adds	r5, #1
 8017572:	4621      	mov	r1, r4
 8017574:	4630      	mov	r0, r6
 8017576:	f006 ff77 	bl	801e468 <put_memory>
 801757a:	42af      	cmp	r7, r5
 801757c:	60a4      	str	r4, [r4, #8]
 801757e:	f104 041c 	add.w	r4, r4, #28
 8017582:	f804 8c10 	strb.w	r8, [r4, #-16]
 8017586:	d1f3      	bne.n	8017570 <rmw_uxrce_init_wait_set_memory+0x20>
 8017588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801758c:	4770      	bx	lr
 801758e:	bf00      	nop

08017590 <rmw_uxrce_init_guard_condition_memory>:
 8017590:	b1e2      	cbz	r2, 80175cc <rmw_uxrce_init_guard_condition_memory+0x3c>
 8017592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017596:	7b05      	ldrb	r5, [r0, #12]
 8017598:	4606      	mov	r6, r0
 801759a:	b9ad      	cbnz	r5, 80175c8 <rmw_uxrce_init_guard_condition_memory+0x38>
 801759c:	2320      	movs	r3, #32
 801759e:	4617      	mov	r7, r2
 80175a0:	460c      	mov	r4, r1
 80175a2:	46a8      	mov	r8, r5
 80175a4:	6083      	str	r3, [r0, #8]
 80175a6:	f240 1301 	movw	r3, #257	; 0x101
 80175aa:	e9c0 5500 	strd	r5, r5, [r0]
 80175ae:	8183      	strh	r3, [r0, #12]
 80175b0:	3501      	adds	r5, #1
 80175b2:	4621      	mov	r1, r4
 80175b4:	4630      	mov	r0, r6
 80175b6:	f006 ff57 	bl	801e468 <put_memory>
 80175ba:	42af      	cmp	r7, r5
 80175bc:	60a4      	str	r4, [r4, #8]
 80175be:	f104 0420 	add.w	r4, r4, #32
 80175c2:	f804 8c14 	strb.w	r8, [r4, #-20]
 80175c6:	d1f3      	bne.n	80175b0 <rmw_uxrce_init_guard_condition_memory+0x20>
 80175c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175cc:	4770      	bx	lr
 80175ce:	bf00      	nop

080175d0 <rmw_uxrce_fini_session_memory>:
 80175d0:	4601      	mov	r1, r0
 80175d2:	4801      	ldr	r0, [pc, #4]	; (80175d8 <rmw_uxrce_fini_session_memory+0x8>)
 80175d4:	f006 bf48 	b.w	801e468 <put_memory>
 80175d8:	2001785c 	.word	0x2001785c

080175dc <rmw_uxrce_fini_node_memory>:
 80175dc:	b538      	push	{r3, r4, r5, lr}
 80175de:	4604      	mov	r4, r0
 80175e0:	6800      	ldr	r0, [r0, #0]
 80175e2:	b128      	cbz	r0, 80175f0 <rmw_uxrce_fini_node_memory+0x14>
 80175e4:	4b07      	ldr	r3, [pc, #28]	; (8017604 <rmw_uxrce_fini_node_memory+0x28>)
 80175e6:	6819      	ldr	r1, [r3, #0]
 80175e8:	f7e8 fe2a 	bl	8000240 <strcmp>
 80175ec:	b940      	cbnz	r0, 8017600 <rmw_uxrce_fini_node_memory+0x24>
 80175ee:	6020      	str	r0, [r4, #0]
 80175f0:	6861      	ldr	r1, [r4, #4]
 80175f2:	b129      	cbz	r1, 8017600 <rmw_uxrce_fini_node_memory+0x24>
 80175f4:	2500      	movs	r5, #0
 80175f6:	4804      	ldr	r0, [pc, #16]	; (8017608 <rmw_uxrce_fini_node_memory+0x2c>)
 80175f8:	610d      	str	r5, [r1, #16]
 80175fa:	f006 ff35 	bl	801e468 <put_memory>
 80175fe:	6065      	str	r5, [r4, #4]
 8017600:	bd38      	pop	{r3, r4, r5, pc}
 8017602:	bf00      	nop
 8017604:	080232dc 	.word	0x080232dc
 8017608:	2001782c 	.word	0x2001782c

0801760c <rmw_uxrce_fini_publisher_memory>:
 801760c:	b510      	push	{r4, lr}
 801760e:	4604      	mov	r4, r0
 8017610:	6800      	ldr	r0, [r0, #0]
 8017612:	b128      	cbz	r0, 8017620 <rmw_uxrce_fini_publisher_memory+0x14>
 8017614:	4b06      	ldr	r3, [pc, #24]	; (8017630 <rmw_uxrce_fini_publisher_memory+0x24>)
 8017616:	6819      	ldr	r1, [r3, #0]
 8017618:	f7e8 fe12 	bl	8000240 <strcmp>
 801761c:	b938      	cbnz	r0, 801762e <rmw_uxrce_fini_publisher_memory+0x22>
 801761e:	6020      	str	r0, [r4, #0]
 8017620:	6861      	ldr	r1, [r4, #4]
 8017622:	b121      	cbz	r1, 801762e <rmw_uxrce_fini_publisher_memory+0x22>
 8017624:	4803      	ldr	r0, [pc, #12]	; (8017634 <rmw_uxrce_fini_publisher_memory+0x28>)
 8017626:	f006 ff1f 	bl	801e468 <put_memory>
 801762a:	2300      	movs	r3, #0
 801762c:	6063      	str	r3, [r4, #4]
 801762e:	bd10      	pop	{r4, pc}
 8017630:	080232dc 	.word	0x080232dc
 8017634:	2001783c 	.word	0x2001783c

08017638 <rmw_uxrce_fini_subscription_memory>:
 8017638:	b510      	push	{r4, lr}
 801763a:	4604      	mov	r4, r0
 801763c:	6800      	ldr	r0, [r0, #0]
 801763e:	b128      	cbz	r0, 801764c <rmw_uxrce_fini_subscription_memory+0x14>
 8017640:	4b06      	ldr	r3, [pc, #24]	; (801765c <rmw_uxrce_fini_subscription_memory+0x24>)
 8017642:	6819      	ldr	r1, [r3, #0]
 8017644:	f7e8 fdfc 	bl	8000240 <strcmp>
 8017648:	b938      	cbnz	r0, 801765a <rmw_uxrce_fini_subscription_memory+0x22>
 801764a:	6020      	str	r0, [r4, #0]
 801764c:	6861      	ldr	r1, [r4, #4]
 801764e:	b121      	cbz	r1, 801765a <rmw_uxrce_fini_subscription_memory+0x22>
 8017650:	4803      	ldr	r0, [pc, #12]	; (8017660 <rmw_uxrce_fini_subscription_memory+0x28>)
 8017652:	f006 ff09 	bl	801e468 <put_memory>
 8017656:	2300      	movs	r3, #0
 8017658:	6063      	str	r3, [r4, #4]
 801765a:	bd10      	pop	{r4, pc}
 801765c:	080232dc 	.word	0x080232dc
 8017660:	2001787c 	.word	0x2001787c

08017664 <rmw_uxrce_fini_service_memory>:
 8017664:	b510      	push	{r4, lr}
 8017666:	4604      	mov	r4, r0
 8017668:	6800      	ldr	r0, [r0, #0]
 801766a:	b128      	cbz	r0, 8017678 <rmw_uxrce_fini_service_memory+0x14>
 801766c:	4b06      	ldr	r3, [pc, #24]	; (8017688 <rmw_uxrce_fini_service_memory+0x24>)
 801766e:	6819      	ldr	r1, [r3, #0]
 8017670:	f7e8 fde6 	bl	8000240 <strcmp>
 8017674:	b938      	cbnz	r0, 8017686 <rmw_uxrce_fini_service_memory+0x22>
 8017676:	6020      	str	r0, [r4, #0]
 8017678:	6861      	ldr	r1, [r4, #4]
 801767a:	b121      	cbz	r1, 8017686 <rmw_uxrce_fini_service_memory+0x22>
 801767c:	4803      	ldr	r0, [pc, #12]	; (801768c <rmw_uxrce_fini_service_memory+0x28>)
 801767e:	f006 fef3 	bl	801e468 <put_memory>
 8017682:	2300      	movs	r3, #0
 8017684:	6063      	str	r3, [r4, #4]
 8017686:	bd10      	pop	{r4, pc}
 8017688:	080232dc 	.word	0x080232dc
 801768c:	2001784c 	.word	0x2001784c

08017690 <rmw_uxrce_fini_client_memory>:
 8017690:	b510      	push	{r4, lr}
 8017692:	4604      	mov	r4, r0
 8017694:	6800      	ldr	r0, [r0, #0]
 8017696:	b128      	cbz	r0, 80176a4 <rmw_uxrce_fini_client_memory+0x14>
 8017698:	4b06      	ldr	r3, [pc, #24]	; (80176b4 <rmw_uxrce_fini_client_memory+0x24>)
 801769a:	6819      	ldr	r1, [r3, #0]
 801769c:	f7e8 fdd0 	bl	8000240 <strcmp>
 80176a0:	b938      	cbnz	r0, 80176b2 <rmw_uxrce_fini_client_memory+0x22>
 80176a2:	6020      	str	r0, [r4, #0]
 80176a4:	6861      	ldr	r1, [r4, #4]
 80176a6:	b121      	cbz	r1, 80176b2 <rmw_uxrce_fini_client_memory+0x22>
 80176a8:	4803      	ldr	r0, [pc, #12]	; (80176b8 <rmw_uxrce_fini_client_memory+0x28>)
 80176aa:	f006 fedd 	bl	801e468 <put_memory>
 80176ae:	2300      	movs	r3, #0
 80176b0:	6063      	str	r3, [r4, #4]
 80176b2:	bd10      	pop	{r4, pc}
 80176b4:	080232dc 	.word	0x080232dc
 80176b8:	20012f5c 	.word	0x20012f5c

080176bc <rmw_uxrce_fini_topic_memory>:
 80176bc:	b510      	push	{r4, lr}
 80176be:	4604      	mov	r4, r0
 80176c0:	4803      	ldr	r0, [pc, #12]	; (80176d0 <rmw_uxrce_fini_topic_memory+0x14>)
 80176c2:	4621      	mov	r1, r4
 80176c4:	f006 fed0 	bl	801e468 <put_memory>
 80176c8:	2300      	movs	r3, #0
 80176ca:	61a3      	str	r3, [r4, #24]
 80176cc:	bd10      	pop	{r4, pc}
 80176ce:	bf00      	nop
 80176d0:	2001788c 	.word	0x2001788c

080176d4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80176d4:	b082      	sub	sp, #8
 80176d6:	492b      	ldr	r1, [pc, #172]	; (8017784 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80176d8:	b530      	push	{r4, r5, lr}
 80176da:	680d      	ldr	r5, [r1, #0]
 80176dc:	ac03      	add	r4, sp, #12
 80176de:	e884 000c 	stmia.w	r4, {r2, r3}
 80176e2:	461c      	mov	r4, r3
 80176e4:	2d00      	cmp	r5, #0
 80176e6:	d04b      	beq.n	8017780 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 80176e8:	462b      	mov	r3, r5
 80176ea:	2100      	movs	r1, #0
 80176ec:	689a      	ldr	r2, [r3, #8]
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80176f4:	4290      	cmp	r0, r2
 80176f6:	bf08      	it	eq
 80176f8:	3101      	addeq	r1, #1
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d1f6      	bne.n	80176ec <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80176fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017702:	2b02      	cmp	r3, #2
 8017704:	d029      	beq.n	801775a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8017706:	d820      	bhi.n	801774a <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8017708:	428c      	cmp	r4, r1
 801770a:	d828      	bhi.n	801775e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801770c:	fab4 f284 	clz	r2, r4
 8017710:	0952      	lsrs	r2, r2, #5
 8017712:	b324      	cbz	r4, 801775e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8017714:	b1dd      	cbz	r5, 801774e <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8017716:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801771a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801771e:	e001      	b.n	8017724 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8017720:	686d      	ldr	r5, [r5, #4]
 8017722:	b1ad      	cbz	r5, 8017750 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8017724:	68ab      	ldr	r3, [r5, #8]
 8017726:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 801772a:	4288      	cmp	r0, r1
 801772c:	d1f8      	bne.n	8017720 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801772e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8017732:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8017736:	4561      	cmp	r1, ip
 8017738:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801773c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8017740:	daee      	bge.n	8017720 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8017742:	468c      	mov	ip, r1
 8017744:	461c      	mov	r4, r3
 8017746:	462a      	mov	r2, r5
 8017748:	e7ea      	b.n	8017720 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801774a:	2b03      	cmp	r3, #3
 801774c:	d0dc      	beq.n	8017708 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801774e:	2200      	movs	r2, #0
 8017750:	4610      	mov	r0, r2
 8017752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017756:	b002      	add	sp, #8
 8017758:	4770      	bx	lr
 801775a:	428c      	cmp	r4, r1
 801775c:	d905      	bls.n	801776a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801775e:	4809      	ldr	r0, [pc, #36]	; (8017784 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8017760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017764:	b002      	add	sp, #8
 8017766:	f006 be6f 	b.w	801e448 <get_memory>
 801776a:	fab4 f284 	clz	r2, r4
 801776e:	0952      	lsrs	r2, r2, #5
 8017770:	2c00      	cmp	r4, #0
 8017772:	d1ed      	bne.n	8017750 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8017774:	4803      	ldr	r0, [pc, #12]	; (8017784 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8017776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801777a:	b002      	add	sp, #8
 801777c:	f006 be64 	b.w	801e448 <get_memory>
 8017780:	4629      	mov	r1, r5
 8017782:	e7bc      	b.n	80176fe <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8017784:	2001786c 	.word	0x2001786c

08017788 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8017788:	4b12      	ldr	r3, [pc, #72]	; (80177d4 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	b530      	push	{r4, r5, lr}
 801778e:	b1f3      	cbz	r3, 80177ce <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8017790:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8017794:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8017798:	2400      	movs	r4, #0
 801779a:	e001      	b.n	80177a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	b1a3      	cbz	r3, 80177ca <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80177a0:	689a      	ldr	r2, [r3, #8]
 80177a2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80177a6:	4288      	cmp	r0, r1
 80177a8:	d1f8      	bne.n	801779c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80177aa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 80177ae:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 80177b2:	4571      	cmp	r1, lr
 80177b4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80177b8:	eb72 050c 	sbcs.w	r5, r2, ip
 80177bc:	daee      	bge.n	801779c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80177be:	461c      	mov	r4, r3
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	468e      	mov	lr, r1
 80177c4:	4694      	mov	ip, r2
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d1ea      	bne.n	80177a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80177ca:	4620      	mov	r0, r4
 80177cc:	bd30      	pop	{r4, r5, pc}
 80177ce:	461c      	mov	r4, r3
 80177d0:	4620      	mov	r0, r4
 80177d2:	bd30      	pop	{r4, r5, pc}
 80177d4:	2001786c 	.word	0x2001786c

080177d8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80177d8:	4b3d      	ldr	r3, [pc, #244]	; (80178d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80177da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177de:	681f      	ldr	r7, [r3, #0]
 80177e0:	ed2d 8b06 	vpush	{d8-d10}
 80177e4:	b08d      	sub	sp, #52	; 0x34
 80177e6:	f007 fa0b 	bl	801ec00 <rmw_uros_epoch_nanos>
 80177ea:	2f00      	cmp	r7, #0
 80177ec:	d05d      	beq.n	80178aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80177ee:	46b8      	mov	r8, r7
 80177f0:	4681      	mov	r9, r0
 80177f2:	468a      	mov	sl, r1
 80177f4:	ac04      	add	r4, sp, #16
 80177f6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80177fa:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 80177fe:	2b04      	cmp	r3, #4
 8017800:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 80178b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8017804:	ed9f ab2e 	vldr	d10, [pc, #184]	; 80178c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8017808:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 80178c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801780c:	d03f      	beq.n	801788e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801780e:	2b05      	cmp	r3, #5
 8017810:	d044      	beq.n	801789c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8017812:	2b03      	cmp	r3, #3
 8017814:	d03b      	beq.n	801788e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8017816:	ed8d 8b04 	vstr	d8, [sp, #16]
 801781a:	ed8d ab06 	vstr	d10, [sp, #24]
 801781e:	ab08      	add	r3, sp, #32
 8017820:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017824:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8017828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801782a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801782e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017832:	f006 fc1d 	bl	801e070 <rmw_time_equal>
 8017836:	b118      	cbz	r0, 8017840 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8017838:	ed8d 9b04 	vstr	d9, [sp, #16]
 801783c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8017840:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8017844:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8017848:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801784c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8017850:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017854:	f006 fc62 	bl	801e11c <rmw_time_total_nsec>
 8017858:	1830      	adds	r0, r6, r0
 801785a:	eb47 0101 	adc.w	r1, r7, r1
 801785e:	4548      	cmp	r0, r9
 8017860:	eb71 030a 	sbcs.w	r3, r1, sl
 8017864:	db05      	blt.n	8017872 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8017866:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801786a:	4591      	cmp	r9, r2
 801786c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8017870:	da03      	bge.n	801787a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8017872:	4641      	mov	r1, r8
 8017874:	4816      	ldr	r0, [pc, #88]	; (80178d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8017876:	f006 fdf7 	bl	801e468 <put_memory>
 801787a:	f1bb 0f00 	cmp.w	fp, #0
 801787e:	d014      	beq.n	80178aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017880:	46d8      	mov	r8, fp
 8017882:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017886:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 801788a:	2b04      	cmp	r3, #4
 801788c:	d1bf      	bne.n	801780e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801788e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8017892:	3340      	adds	r3, #64	; 0x40
 8017894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801789a:	e7c0      	b.n	801781e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801789c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80178a0:	3348      	adds	r3, #72	; 0x48
 80178a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80178a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80178a8:	e7b9      	b.n	801781e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80178aa:	b00d      	add	sp, #52	; 0x34
 80178ac:	ecbd 8b06 	vpop	{d8-d10}
 80178b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b4:	f3af 8000 	nop.w
	...
 80178c0:	00000001 	.word	0x00000001
 80178c4:	00000000 	.word	0x00000000
 80178c8:	0000001e 	.word	0x0000001e
 80178cc:	00000000 	.word	0x00000000
 80178d0:	2001786c 	.word	0x2001786c

080178d4 <run_xrce_session>:
 80178d4:	b510      	push	{r4, lr}
 80178d6:	788c      	ldrb	r4, [r1, #2]
 80178d8:	b086      	sub	sp, #24
 80178da:	2c01      	cmp	r4, #1
 80178dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80178e0:	d00c      	beq.n	80178fc <run_xrce_session+0x28>
 80178e2:	2401      	movs	r4, #1
 80178e4:	4619      	mov	r1, r3
 80178e6:	f10d 020e 	add.w	r2, sp, #14
 80178ea:	f10d 0317 	add.w	r3, sp, #23
 80178ee:	9400      	str	r4, [sp, #0]
 80178f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80178f4:	f001 fd30 	bl	8019358 <uxr_run_session_until_all_status>
 80178f8:	b006      	add	sp, #24
 80178fa:	bd10      	pop	{r4, pc}
 80178fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017900:	f001 f94c 	bl	8018b9c <uxr_flash_output_streams>
 8017904:	4620      	mov	r0, r4
 8017906:	b006      	add	sp, #24
 8017908:	bd10      	pop	{r4, pc}
 801790a:	bf00      	nop

0801790c <convert_qos_profile>:
 801790c:	7a4a      	ldrb	r2, [r1, #9]
 801790e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8017912:	2a02      	cmp	r2, #2
 8017914:	bf18      	it	ne
 8017916:	2200      	movne	r2, #0
 8017918:	7002      	strb	r2, [r0, #0]
 801791a:	f1ac 0202 	sub.w	r2, ip, #2
 801791e:	fab2 f282 	clz	r2, r2
 8017922:	0952      	lsrs	r2, r2, #5
 8017924:	7042      	strb	r2, [r0, #1]
 8017926:	780a      	ldrb	r2, [r1, #0]
 8017928:	8889      	ldrh	r1, [r1, #4]
 801792a:	f1a2 0202 	sub.w	r2, r2, #2
 801792e:	8081      	strh	r1, [r0, #4]
 8017930:	fab2 f282 	clz	r2, r2
 8017934:	0952      	lsrs	r2, r2, #5
 8017936:	7082      	strb	r2, [r0, #2]
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop

0801793c <generate_type_name>:
 801793c:	2300      	movs	r3, #0
 801793e:	b530      	push	{r4, r5, lr}
 8017940:	700b      	strb	r3, [r1, #0]
 8017942:	b087      	sub	sp, #28
 8017944:	6803      	ldr	r3, [r0, #0]
 8017946:	4614      	mov	r4, r2
 8017948:	b1bb      	cbz	r3, 801797a <generate_type_name+0x3e>
 801794a:	4a0e      	ldr	r2, [pc, #56]	; (8017984 <generate_type_name+0x48>)
 801794c:	4615      	mov	r5, r2
 801794e:	9500      	str	r5, [sp, #0]
 8017950:	9203      	str	r2, [sp, #12]
 8017952:	4d0d      	ldr	r5, [pc, #52]	; (8017988 <generate_type_name+0x4c>)
 8017954:	6842      	ldr	r2, [r0, #4]
 8017956:	4608      	mov	r0, r1
 8017958:	490c      	ldr	r1, [pc, #48]	; (801798c <generate_type_name+0x50>)
 801795a:	9204      	str	r2, [sp, #16]
 801795c:	9105      	str	r1, [sp, #20]
 801795e:	9102      	str	r1, [sp, #8]
 8017960:	4621      	mov	r1, r4
 8017962:	4a0b      	ldr	r2, [pc, #44]	; (8017990 <generate_type_name+0x54>)
 8017964:	9501      	str	r5, [sp, #4]
 8017966:	f009 f9df 	bl	8020d28 <sniprintf>
 801796a:	2800      	cmp	r0, #0
 801796c:	bfa8      	it	ge
 801796e:	4284      	cmpge	r4, r0
 8017970:	bfcc      	ite	gt
 8017972:	2001      	movgt	r0, #1
 8017974:	2000      	movle	r0, #0
 8017976:	b007      	add	sp, #28
 8017978:	bd30      	pop	{r4, r5, pc}
 801797a:	4b06      	ldr	r3, [pc, #24]	; (8017994 <generate_type_name+0x58>)
 801797c:	4a01      	ldr	r2, [pc, #4]	; (8017984 <generate_type_name+0x48>)
 801797e:	461d      	mov	r5, r3
 8017980:	e7e5      	b.n	801794e <generate_type_name+0x12>
 8017982:	bf00      	nop
 8017984:	08022c28 	.word	0x08022c28
 8017988:	08022c40 	.word	0x08022c40
 801798c:	08022c3c 	.word	0x08022c3c
 8017990:	08022c2c 	.word	0x08022c2c
 8017994:	080233a8 	.word	0x080233a8

08017998 <generate_topic_name>:
 8017998:	b530      	push	{r4, r5, lr}
 801799a:	4614      	mov	r4, r2
 801799c:	b083      	sub	sp, #12
 801799e:	4605      	mov	r5, r0
 80179a0:	4b07      	ldr	r3, [pc, #28]	; (80179c0 <generate_topic_name+0x28>)
 80179a2:	4a08      	ldr	r2, [pc, #32]	; (80179c4 <generate_topic_name+0x2c>)
 80179a4:	4608      	mov	r0, r1
 80179a6:	9500      	str	r5, [sp, #0]
 80179a8:	4621      	mov	r1, r4
 80179aa:	f009 f9bd 	bl	8020d28 <sniprintf>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	bfa8      	it	ge
 80179b2:	4284      	cmpge	r4, r0
 80179b4:	bfcc      	ite	gt
 80179b6:	2001      	movgt	r0, #1
 80179b8:	2000      	movle	r0, #0
 80179ba:	b003      	add	sp, #12
 80179bc:	bd30      	pop	{r4, r5, pc}
 80179be:	bf00      	nop
 80179c0:	08022c44 	.word	0x08022c44
 80179c4:	08022778 	.word	0x08022778

080179c8 <is_uxrce_rmw_identifier_valid>:
 80179c8:	b510      	push	{r4, lr}
 80179ca:	4604      	mov	r4, r0
 80179cc:	b140      	cbz	r0, 80179e0 <is_uxrce_rmw_identifier_valid+0x18>
 80179ce:	f006 fda3 	bl	801e518 <rmw_get_implementation_identifier>
 80179d2:	4601      	mov	r1, r0
 80179d4:	4620      	mov	r0, r4
 80179d6:	f7e8 fc33 	bl	8000240 <strcmp>
 80179da:	fab0 f080 	clz	r0, r0
 80179de:	0940      	lsrs	r0, r0, #5
 80179e0:	bd10      	pop	{r4, pc}
 80179e2:	bf00      	nop

080179e4 <get_message_typesupport_handle>:
 80179e4:	6883      	ldr	r3, [r0, #8]
 80179e6:	4718      	bx	r3

080179e8 <get_message_typesupport_handle_function>:
 80179e8:	b510      	push	{r4, lr}
 80179ea:	4604      	mov	r4, r0
 80179ec:	6800      	ldr	r0, [r0, #0]
 80179ee:	f7e8 fc27 	bl	8000240 <strcmp>
 80179f2:	2800      	cmp	r0, #0
 80179f4:	bf0c      	ite	eq
 80179f6:	4620      	moveq	r0, r4
 80179f8:	2000      	movne	r0, #0
 80179fa:	bd10      	pop	{r4, pc}

080179fc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80179fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a00:	6805      	ldr	r5, [r0, #0]
 8017a02:	4604      	mov	r4, r0
 8017a04:	460e      	mov	r6, r1
 8017a06:	4628      	mov	r0, r5
 8017a08:	f7e8 fc1a 	bl	8000240 <strcmp>
 8017a0c:	b1c8      	cbz	r0, 8017a42 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017a0e:	4b11      	ldr	r3, [pc, #68]	; (8017a54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	429d      	cmp	r5, r3
 8017a14:	d112      	bne.n	8017a3c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017a16:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017a1a:	f8d8 4000 	ldr.w	r4, [r8]
 8017a1e:	b16c      	cbz	r4, 8017a3c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017a20:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017a24:	2700      	movs	r7, #0
 8017a26:	3d04      	subs	r5, #4
 8017a28:	4631      	mov	r1, r6
 8017a2a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017a2e:	f7e8 fc07 	bl	8000240 <strcmp>
 8017a32:	00bb      	lsls	r3, r7, #2
 8017a34:	b140      	cbz	r0, 8017a48 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8017a36:	3701      	adds	r7, #1
 8017a38:	42bc      	cmp	r4, r7
 8017a3a:	d1f5      	bne.n	8017a28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017a3c:	2000      	movs	r0, #0
 8017a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a42:	4620      	mov	r0, r4
 8017a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a50:	58d3      	ldr	r3, [r2, r3]
 8017a52:	4718      	bx	r3
 8017a54:	200005b8 	.word	0x200005b8

08017a58 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8017a58:	4b04      	ldr	r3, [pc, #16]	; (8017a6c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8017a5a:	681a      	ldr	r2, [r3, #0]
 8017a5c:	b10a      	cbz	r2, 8017a62 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 8017a5e:	4803      	ldr	r0, [pc, #12]	; (8017a6c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8017a60:	4770      	bx	lr
 8017a62:	4a03      	ldr	r2, [pc, #12]	; (8017a70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8017a64:	4801      	ldr	r0, [pc, #4]	; (8017a6c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8017a66:	6812      	ldr	r2, [r2, #0]
 8017a68:	601a      	str	r2, [r3, #0]
 8017a6a:	4770      	bx	lr
 8017a6c:	200005c8 	.word	0x200005c8
 8017a70:	200005b8 	.word	0x200005b8

08017a74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8017a74:	4a02      	ldr	r2, [pc, #8]	; (8017a80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 8017a76:	4b03      	ldr	r3, [pc, #12]	; (8017a84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 8017a78:	6812      	ldr	r2, [r2, #0]
 8017a7a:	601a      	str	r2, [r3, #0]
 8017a7c:	4770      	bx	lr
 8017a7e:	bf00      	nop
 8017a80:	200005b8 	.word	0x200005b8
 8017a84:	200005c8 	.word	0x200005c8

08017a88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 8017a88:	4b04      	ldr	r3, [pc, #16]	; (8017a9c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	b10a      	cbz	r2, 8017a92 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xa>
 8017a8e:	4803      	ldr	r0, [pc, #12]	; (8017a9c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 8017a90:	4770      	bx	lr
 8017a92:	4a03      	ldr	r2, [pc, #12]	; (8017aa0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x18>)
 8017a94:	4801      	ldr	r0, [pc, #4]	; (8017a9c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 8017a96:	6812      	ldr	r2, [r2, #0]
 8017a98:	601a      	str	r2, [r3, #0]
 8017a9a:	4770      	bx	lr
 8017a9c:	200005dc 	.word	0x200005dc
 8017aa0:	200005b8 	.word	0x200005b8

08017aa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 8017aa4:	4a02      	ldr	r2, [pc, #8]	; (8017ab0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xc>)
 8017aa6:	4b03      	ldr	r3, [pc, #12]	; (8017ab4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x10>)
 8017aa8:	6812      	ldr	r2, [r2, #0]
 8017aaa:	601a      	str	r2, [r3, #0]
 8017aac:	4770      	bx	lr
 8017aae:	bf00      	nop
 8017ab0:	200005b8 	.word	0x200005b8
 8017ab4:	200005dc 	.word	0x200005dc

08017ab8 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 8017ab8:	f007 b8dc 	b.w	801ec74 <std_msgs__msg__Float32__init>

08017abc <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 8017abc:	f007 b8de 	b.w	801ec7c <std_msgs__msg__Float32__fini>

08017ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8017ac0:	4b04      	ldr	r3, [pc, #16]	; (8017ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8017ac2:	681a      	ldr	r2, [r3, #0]
 8017ac4:	b10a      	cbz	r2, 8017aca <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 8017ac6:	4803      	ldr	r0, [pc, #12]	; (8017ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8017ac8:	4770      	bx	lr
 8017aca:	4a03      	ldr	r2, [pc, #12]	; (8017ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8017acc:	4801      	ldr	r0, [pc, #4]	; (8017ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8017ace:	6812      	ldr	r2, [r2, #0]
 8017ad0:	601a      	str	r2, [r3, #0]
 8017ad2:	4770      	bx	lr
 8017ad4:	20000624 	.word	0x20000624
 8017ad8:	200005bc 	.word	0x200005bc

08017adc <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__size_function__Int32MultiArray__data>:
 8017adc:	6840      	ldr	r0, [r0, #4]
 8017ade:	4770      	bx	lr

08017ae0 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Int32MultiArray__data>:
 8017ae0:	6800      	ldr	r0, [r0, #0]
 8017ae2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8017ae6:	4770      	bx	lr

08017ae8 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Int32MultiArray__data>:
 8017ae8:	6803      	ldr	r3, [r0, #0]
 8017aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017aee:	6013      	str	r3, [r2, #0]
 8017af0:	4770      	bx	lr
 8017af2:	bf00      	nop

08017af4 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__assign_function__Int32MultiArray__data>:
 8017af4:	6812      	ldr	r2, [r2, #0]
 8017af6:	6803      	ldr	r3, [r0, #0]
 8017af8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop

08017b00 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_init_function>:
 8017b00:	f007 b8be 	b.w	801ec80 <std_msgs__msg__Int32MultiArray__init>

08017b04 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_fini_function>:
 8017b04:	f007 b8e0 	b.w	801ecc8 <std_msgs__msg__Int32MultiArray__fini>

08017b08 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__resize_function__Int32MultiArray__data>:
 8017b08:	b510      	push	{r4, lr}
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	b082      	sub	sp, #8
 8017b0e:	9101      	str	r1, [sp, #4]
 8017b10:	f007 f89c 	bl	801ec4c <rosidl_runtime_c__int32__Sequence__fini>
 8017b14:	9901      	ldr	r1, [sp, #4]
 8017b16:	4620      	mov	r0, r4
 8017b18:	b002      	add	sp, #8
 8017b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b1e:	f007 b87d 	b.w	801ec1c <rosidl_runtime_c__int32__Sequence__init>
 8017b22:	bf00      	nop

08017b24 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_function__Int32MultiArray__data>:
 8017b24:	6800      	ldr	r0, [r0, #0]
 8017b26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8017b2a:	4770      	bx	lr

08017b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 8017b2c:	b508      	push	{r3, lr}
 8017b2e:	f000 f857 	bl	8017be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8017b32:	4b06      	ldr	r3, [pc, #24]	; (8017b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 8017b34:	4906      	ldr	r1, [pc, #24]	; (8017b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x24>)
 8017b36:	681a      	ldr	r2, [r3, #0]
 8017b38:	60c8      	str	r0, [r1, #12]
 8017b3a:	b10a      	cbz	r2, 8017b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>
 8017b3c:	4803      	ldr	r0, [pc, #12]	; (8017b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 8017b3e:	bd08      	pop	{r3, pc}
 8017b40:	4a04      	ldr	r2, [pc, #16]	; (8017b54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x28>)
 8017b42:	4802      	ldr	r0, [pc, #8]	; (8017b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 8017b44:	6812      	ldr	r2, [r2, #0]
 8017b46:	601a      	str	r2, [r3, #0]
 8017b48:	bd08      	pop	{r3, pc}
 8017b4a:	bf00      	nop
 8017b4c:	200006a8 	.word	0x200006a8
 8017b50:	20000630 	.word	0x20000630
 8017b54:	200005bc 	.word	0x200005bc

08017b58 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8017b58:	6840      	ldr	r0, [r0, #4]
 8017b5a:	4770      	bx	lr

08017b5c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8017b5c:	6800      	ldr	r0, [r0, #0]
 8017b5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017b62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8017b66:	4770      	bx	lr

08017b68 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8017b68:	6803      	ldr	r3, [r0, #0]
 8017b6a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017b6e:	4694      	mov	ip, r2
 8017b70:	b500      	push	{lr}
 8017b72:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8017b76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017b7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017b7e:	f8de 3000 	ldr.w	r3, [lr]
 8017b82:	f8cc 3000 	str.w	r3, [ip]
 8017b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b8a:	bf00      	nop

08017b8c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8017b8c:	6803      	ldr	r3, [r0, #0]
 8017b8e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017b92:	b500      	push	{lr}
 8017b94:	4696      	mov	lr, r2
 8017b96:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8017b9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017b9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ba2:	f8de 3000 	ldr.w	r3, [lr]
 8017ba6:	f8cc 3000 	str.w	r3, [ip]
 8017baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bae:	bf00      	nop

08017bb0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8017bb0:	f007 b91e 	b.w	801edf0 <std_msgs__msg__MultiArrayLayout__init>

08017bb4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 8017bb4:	f007 b92e 	b.w	801ee14 <std_msgs__msg__MultiArrayLayout__fini>

08017bb8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8017bb8:	b510      	push	{r4, lr}
 8017bba:	4604      	mov	r4, r0
 8017bbc:	b082      	sub	sp, #8
 8017bbe:	9101      	str	r1, [sp, #4]
 8017bc0:	f007 f8ee 	bl	801eda0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8017bc4:	9901      	ldr	r1, [sp, #4]
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	b002      	add	sp, #8
 8017bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bce:	f007 b8e3 	b.w	801ed98 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8017bd2:	bf00      	nop

08017bd4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 8017bd4:	6800      	ldr	r0, [r0, #0]
 8017bd6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017bda:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8017bde:	4770      	bx	lr

08017be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8017be0:	b508      	push	{r3, lr}
 8017be2:	f007 f91f 	bl	801ee24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017be6:	4b06      	ldr	r3, [pc, #24]	; (8017c00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8017be8:	4906      	ldr	r1, [pc, #24]	; (8017c04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8017bea:	681a      	ldr	r2, [r3, #0]
 8017bec:	60c8      	str	r0, [r1, #12]
 8017bee:	b10a      	cbz	r2, 8017bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8017bf0:	4803      	ldr	r0, [pc, #12]	; (8017c00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8017bf2:	bd08      	pop	{r3, pc}
 8017bf4:	4a04      	ldr	r2, [pc, #16]	; (8017c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 8017bf6:	4802      	ldr	r0, [pc, #8]	; (8017c00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8017bf8:	6812      	ldr	r2, [r2, #0]
 8017bfa:	601a      	str	r2, [r3, #0]
 8017bfc:	bd08      	pop	{r3, pc}
 8017bfe:	bf00      	nop
 8017c00:	2000072c 	.word	0x2000072c
 8017c04:	200006b4 	.word	0x200006b4
 8017c08:	200005bc 	.word	0x200005bc

08017c0c <_Float32__max_serialized_size>:
 8017c0c:	2104      	movs	r1, #4
 8017c0e:	2000      	movs	r0, #0
 8017c10:	b508      	push	{r3, lr}
 8017c12:	f7fc fdc9 	bl	80147a8 <ucdr_alignment>
 8017c16:	3004      	adds	r0, #4
 8017c18:	bd08      	pop	{r3, pc}
 8017c1a:	bf00      	nop

08017c1c <_Float32__cdr_deserialize>:
 8017c1c:	b109      	cbz	r1, 8017c22 <_Float32__cdr_deserialize+0x6>
 8017c1e:	f7fc bb45 	b.w	80142ac <ucdr_deserialize_float>
 8017c22:	4608      	mov	r0, r1
 8017c24:	4770      	bx	lr
 8017c26:	bf00      	nop

08017c28 <get_serialized_size_std_msgs__msg__Float32>:
 8017c28:	b138      	cbz	r0, 8017c3a <get_serialized_size_std_msgs__msg__Float32+0x12>
 8017c2a:	b508      	push	{r3, lr}
 8017c2c:	460b      	mov	r3, r1
 8017c2e:	2104      	movs	r1, #4
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7fc fdb9 	bl	80147a8 <ucdr_alignment>
 8017c36:	3004      	adds	r0, #4
 8017c38:	bd08      	pop	{r3, pc}
 8017c3a:	4770      	bx	lr

08017c3c <_Float32__cdr_serialize>:
 8017c3c:	b120      	cbz	r0, 8017c48 <_Float32__cdr_serialize+0xc>
 8017c3e:	ed90 0a00 	vldr	s0, [r0]
 8017c42:	4608      	mov	r0, r1
 8017c44:	f7fc ba9a 	b.w	801417c <ucdr_serialize_float>
 8017c48:	4770      	bx	lr
 8017c4a:	bf00      	nop

08017c4c <_Float32__get_serialized_size>:
 8017c4c:	b130      	cbz	r0, 8017c5c <_Float32__get_serialized_size+0x10>
 8017c4e:	2104      	movs	r1, #4
 8017c50:	2000      	movs	r0, #0
 8017c52:	b508      	push	{r3, lr}
 8017c54:	f7fc fda8 	bl	80147a8 <ucdr_alignment>
 8017c58:	3004      	adds	r0, #4
 8017c5a:	bd08      	pop	{r3, pc}
 8017c5c:	4770      	bx	lr
 8017c5e:	bf00      	nop

08017c60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8017c60:	4800      	ldr	r0, [pc, #0]	; (8017c64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 8017c62:	4770      	bx	lr
 8017c64:	20000738 	.word	0x20000738

08017c68 <_Int32MultiArray__max_serialized_size>:
 8017c68:	b500      	push	{lr}
 8017c6a:	b083      	sub	sp, #12
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	2100      	movs	r1, #0
 8017c70:	f10d 0007 	add.w	r0, sp, #7
 8017c74:	f88d 3007 	strb.w	r3, [sp, #7]
 8017c78:	f000 f91c 	bl	8017eb4 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8017c7c:	b003      	add	sp, #12
 8017c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c82:	bf00      	nop

08017c84 <get_serialized_size_std_msgs__msg__Int32MultiArray>:
 8017c84:	b570      	push	{r4, r5, r6, lr}
 8017c86:	4604      	mov	r4, r0
 8017c88:	b160      	cbz	r0, 8017ca4 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>
 8017c8a:	460d      	mov	r5, r1
 8017c8c:	f000 f8b6 	bl	8017dfc <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8017c90:	6966      	ldr	r6, [r4, #20]
 8017c92:	2104      	movs	r1, #4
 8017c94:	182c      	adds	r4, r5, r0
 8017c96:	4620      	mov	r0, r4
 8017c98:	f7fc fd86 	bl	80147a8 <ucdr_alignment>
 8017c9c:	1d03      	adds	r3, r0, #4
 8017c9e:	441c      	add	r4, r3
 8017ca0:	b90e      	cbnz	r6, 8017ca6 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x22>
 8017ca2:	1b60      	subs	r0, r4, r5
 8017ca4:	bd70      	pop	{r4, r5, r6, pc}
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	2104      	movs	r1, #4
 8017caa:	f7fc fd7d 	bl	80147a8 <ucdr_alignment>
 8017cae:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017cb2:	181c      	adds	r4, r3, r0
 8017cb4:	1b60      	subs	r0, r4, r5
 8017cb6:	e7f5      	b.n	8017ca4 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>

08017cb8 <_Int32MultiArray__cdr_deserialize>:
 8017cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cba:	460c      	mov	r4, r1
 8017cbc:	b083      	sub	sp, #12
 8017cbe:	b1d9      	cbz	r1, 8017cf8 <_Int32MultiArray__cdr_deserialize+0x40>
 8017cc0:	4606      	mov	r6, r0
 8017cc2:	f000 f901 	bl	8017ec8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	4621      	mov	r1, r4
 8017cca:	4630      	mov	r0, r6
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	68db      	ldr	r3, [r3, #12]
 8017cd0:	4798      	blx	r3
 8017cd2:	69a7      	ldr	r7, [r4, #24]
 8017cd4:	ab01      	add	r3, sp, #4
 8017cd6:	6921      	ldr	r1, [r4, #16]
 8017cd8:	463a      	mov	r2, r7
 8017cda:	4630      	mov	r0, r6
 8017cdc:	f000 f9a4 	bl	8018028 <ucdr_deserialize_sequence_int32_t>
 8017ce0:	9b01      	ldr	r3, [sp, #4]
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	b920      	cbnz	r0, 8017cf0 <_Int32MultiArray__cdr_deserialize+0x38>
 8017ce6:	429f      	cmp	r7, r3
 8017ce8:	d30a      	bcc.n	8017d00 <_Int32MultiArray__cdr_deserialize+0x48>
 8017cea:	4628      	mov	r0, r5
 8017cec:	b003      	add	sp, #12
 8017cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	6163      	str	r3, [r4, #20]
 8017cf4:	b003      	add	sp, #12
 8017cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cf8:	460d      	mov	r5, r1
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	b003      	add	sp, #12
 8017cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d00:	2301      	movs	r3, #1
 8017d02:	4630      	mov	r0, r6
 8017d04:	75b5      	strb	r5, [r6, #22]
 8017d06:	2104      	movs	r1, #4
 8017d08:	7573      	strb	r3, [r6, #21]
 8017d0a:	6165      	str	r5, [r4, #20]
 8017d0c:	f7fc fd64 	bl	80147d8 <ucdr_align_to>
 8017d10:	9901      	ldr	r1, [sp, #4]
 8017d12:	4630      	mov	r0, r6
 8017d14:	0089      	lsls	r1, r1, #2
 8017d16:	f7fc fd97 	bl	8014848 <ucdr_advance_buffer>
 8017d1a:	4628      	mov	r0, r5
 8017d1c:	b003      	add	sp, #12
 8017d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d20 <_Int32MultiArray__cdr_serialize>:
 8017d20:	b188      	cbz	r0, 8017d46 <_Int32MultiArray__cdr_serialize+0x26>
 8017d22:	b538      	push	{r3, r4, r5, lr}
 8017d24:	4604      	mov	r4, r0
 8017d26:	460d      	mov	r5, r1
 8017d28:	f000 f8ce 	bl	8017ec8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	4629      	mov	r1, r5
 8017d30:	4620      	mov	r0, r4
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	689b      	ldr	r3, [r3, #8]
 8017d36:	4798      	blx	r3
 8017d38:	4628      	mov	r0, r5
 8017d3a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8017d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d42:	f000 b95f 	b.w	8018004 <ucdr_serialize_sequence_int32_t>
 8017d46:	4770      	bx	lr

08017d48 <_Int32MultiArray__get_serialized_size>:
 8017d48:	b538      	push	{r3, r4, r5, lr}
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	b150      	cbz	r0, 8017d64 <_Int32MultiArray__get_serialized_size+0x1c>
 8017d4e:	2100      	movs	r1, #0
 8017d50:	f000 f854 	bl	8017dfc <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8017d54:	6965      	ldr	r5, [r4, #20]
 8017d56:	4604      	mov	r4, r0
 8017d58:	2104      	movs	r1, #4
 8017d5a:	f7fc fd25 	bl	80147a8 <ucdr_alignment>
 8017d5e:	4404      	add	r4, r0
 8017d60:	3404      	adds	r4, #4
 8017d62:	b90d      	cbnz	r5, 8017d68 <_Int32MultiArray__get_serialized_size+0x20>
 8017d64:	4620      	mov	r0, r4
 8017d66:	bd38      	pop	{r3, r4, r5, pc}
 8017d68:	4620      	mov	r0, r4
 8017d6a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8017d6e:	2104      	movs	r1, #4
 8017d70:	f7fc fd1a 	bl	80147a8 <ucdr_alignment>
 8017d74:	4404      	add	r4, r0
 8017d76:	4620      	mov	r0, r4
 8017d78:	bd38      	pop	{r3, r4, r5, pc}
 8017d7a:	bf00      	nop

08017d7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 8017d7c:	4800      	ldr	r0, [pc, #0]	; (8017d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x4>)
 8017d7e:	4770      	bx	lr
 8017d80:	20000760 	.word	0x20000760

08017d84 <_MultiArrayLayout__max_serialized_size>:
 8017d84:	2104      	movs	r1, #4
 8017d86:	2000      	movs	r0, #0
 8017d88:	b508      	push	{r3, lr}
 8017d8a:	f7fc fd0d 	bl	80147a8 <ucdr_alignment>
 8017d8e:	3004      	adds	r0, #4
 8017d90:	bd08      	pop	{r3, pc}
 8017d92:	bf00      	nop

08017d94 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8017d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d98:	4689      	mov	r9, r1
 8017d9a:	4607      	mov	r7, r0
 8017d9c:	2104      	movs	r1, #4
 8017d9e:	4648      	mov	r0, r9
 8017da0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8017da4:	f7fc fd00 	bl	80147a8 <ucdr_alignment>
 8017da8:	f109 0304 	add.w	r3, r9, #4
 8017dac:	18c6      	adds	r6, r0, r3
 8017dae:	f1b8 0f00 	cmp.w	r8, #0
 8017db2:	d018      	beq.n	8017de6 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8017db4:	2500      	movs	r5, #0
 8017db6:	f007 f8d3 	bl	801ef60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017dba:	683a      	ldr	r2, [r7, #0]
 8017dbc:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8017dc0:	6843      	ldr	r3, [r0, #4]
 8017dc2:	4631      	mov	r1, r6
 8017dc4:	3501      	adds	r5, #1
 8017dc6:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8017dca:	695b      	ldr	r3, [r3, #20]
 8017dcc:	4798      	blx	r3
 8017dce:	4604      	mov	r4, r0
 8017dd0:	4630      	mov	r0, r6
 8017dd2:	2c04      	cmp	r4, #4
 8017dd4:	4621      	mov	r1, r4
 8017dd6:	bf28      	it	cs
 8017dd8:	2104      	movcs	r1, #4
 8017dda:	f7fc fce5 	bl	80147a8 <ucdr_alignment>
 8017dde:	45a8      	cmp	r8, r5
 8017de0:	4404      	add	r4, r0
 8017de2:	4426      	add	r6, r4
 8017de4:	d1e7      	bne.n	8017db6 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8017de6:	f1c9 0904 	rsb	r9, r9, #4
 8017dea:	4630      	mov	r0, r6
 8017dec:	2104      	movs	r1, #4
 8017dee:	444e      	add	r6, r9
 8017df0:	f7fc fcda 	bl	80147a8 <ucdr_alignment>
 8017df4:	4430      	add	r0, r6
 8017df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dfa:	bf00      	nop

08017dfc <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8017dfc:	b108      	cbz	r0, 8017e02 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8017dfe:	f7ff bfc9 	b.w	8017d94 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8017e02:	4770      	bx	lr

08017e04 <_MultiArrayLayout__get_serialized_size>:
 8017e04:	b110      	cbz	r0, 8017e0c <_MultiArrayLayout__get_serialized_size+0x8>
 8017e06:	2100      	movs	r1, #0
 8017e08:	f7ff bfc4 	b.w	8017d94 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8017e0c:	4770      	bx	lr
 8017e0e:	bf00      	nop

08017e10 <_MultiArrayLayout__cdr_deserialize>:
 8017e10:	b349      	cbz	r1, 8017e66 <_MultiArrayLayout__cdr_deserialize+0x56>
 8017e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e14:	b083      	sub	sp, #12
 8017e16:	460e      	mov	r6, r1
 8017e18:	4607      	mov	r7, r0
 8017e1a:	a901      	add	r1, sp, #4
 8017e1c:	f7fb fc6e 	bl	80136fc <ucdr_deserialize_uint32_t>
 8017e20:	9b01      	ldr	r3, [sp, #4]
 8017e22:	68b2      	ldr	r2, [r6, #8]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d31b      	bcc.n	8017e60 <_MultiArrayLayout__cdr_deserialize+0x50>
 8017e28:	6073      	str	r3, [r6, #4]
 8017e2a:	b18b      	cbz	r3, 8017e50 <_MultiArrayLayout__cdr_deserialize+0x40>
 8017e2c:	2400      	movs	r4, #0
 8017e2e:	4625      	mov	r5, r4
 8017e30:	e002      	b.n	8017e38 <_MultiArrayLayout__cdr_deserialize+0x28>
 8017e32:	9b01      	ldr	r3, [sp, #4]
 8017e34:	429d      	cmp	r5, r3
 8017e36:	d20b      	bcs.n	8017e50 <_MultiArrayLayout__cdr_deserialize+0x40>
 8017e38:	f007 f892 	bl	801ef60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017e3c:	6831      	ldr	r1, [r6, #0]
 8017e3e:	6843      	ldr	r3, [r0, #4]
 8017e40:	4638      	mov	r0, r7
 8017e42:	4421      	add	r1, r4
 8017e44:	3501      	adds	r5, #1
 8017e46:	68db      	ldr	r3, [r3, #12]
 8017e48:	3414      	adds	r4, #20
 8017e4a:	4798      	blx	r3
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d1f0      	bne.n	8017e32 <_MultiArrayLayout__cdr_deserialize+0x22>
 8017e50:	f106 010c 	add.w	r1, r6, #12
 8017e54:	4638      	mov	r0, r7
 8017e56:	b003      	add	sp, #12
 8017e58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e5c:	f7fb bc4e 	b.w	80136fc <ucdr_deserialize_uint32_t>
 8017e60:	2000      	movs	r0, #0
 8017e62:	b003      	add	sp, #12
 8017e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e66:	2000      	movs	r0, #0
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop

08017e6c <_MultiArrayLayout__cdr_serialize>:
 8017e6c:	b308      	cbz	r0, 8017eb2 <_MultiArrayLayout__cdr_serialize+0x46>
 8017e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e70:	6847      	ldr	r7, [r0, #4]
 8017e72:	4605      	mov	r5, r0
 8017e74:	460e      	mov	r6, r1
 8017e76:	4608      	mov	r0, r1
 8017e78:	4639      	mov	r1, r7
 8017e7a:	f7fb fb0f 	bl	801349c <ucdr_serialize_uint32_t>
 8017e7e:	b190      	cbz	r0, 8017ea6 <_MultiArrayLayout__cdr_serialize+0x3a>
 8017e80:	b18f      	cbz	r7, 8017ea6 <_MultiArrayLayout__cdr_serialize+0x3a>
 8017e82:	2400      	movs	r4, #0
 8017e84:	e001      	b.n	8017e8a <_MultiArrayLayout__cdr_serialize+0x1e>
 8017e86:	42a7      	cmp	r7, r4
 8017e88:	d00d      	beq.n	8017ea6 <_MultiArrayLayout__cdr_serialize+0x3a>
 8017e8a:	f007 f869 	bl	801ef60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8017e8e:	682a      	ldr	r2, [r5, #0]
 8017e90:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8017e94:	6843      	ldr	r3, [r0, #4]
 8017e96:	4631      	mov	r1, r6
 8017e98:	3401      	adds	r4, #1
 8017e9a:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8017e9e:	689b      	ldr	r3, [r3, #8]
 8017ea0:	4798      	blx	r3
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	d1ef      	bne.n	8017e86 <_MultiArrayLayout__cdr_serialize+0x1a>
 8017ea6:	68e9      	ldr	r1, [r5, #12]
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017eae:	f7fb baf5 	b.w	801349c <ucdr_serialize_uint32_t>
 8017eb2:	4770      	bx	lr

08017eb4 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8017eb4:	b508      	push	{r3, lr}
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	4603      	mov	r3, r0
 8017eba:	4608      	mov	r0, r1
 8017ebc:	2104      	movs	r1, #4
 8017ebe:	701a      	strb	r2, [r3, #0]
 8017ec0:	f7fc fc72 	bl	80147a8 <ucdr_alignment>
 8017ec4:	3004      	adds	r0, #4
 8017ec6:	bd08      	pop	{r3, pc}

08017ec8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8017ec8:	4800      	ldr	r0, [pc, #0]	; (8017ecc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8017eca:	4770      	bx	lr
 8017ecc:	20000788 	.word	0x20000788

08017ed0 <actuator_custom_msgs__msg__HandAirStatus__init>:
 8017ed0:	3800      	subs	r0, #0
 8017ed2:	bf18      	it	ne
 8017ed4:	2001      	movne	r0, #1
 8017ed6:	4770      	bx	lr

08017ed8 <actuator_custom_msgs__msg__HandAirStatus__fini>:
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop

08017edc <actuator_custom_msgs__msg__ShootAirStatus__init>:
 8017edc:	3800      	subs	r0, #0
 8017ede:	bf18      	it	ne
 8017ee0:	2001      	movne	r0, #1
 8017ee2:	4770      	bx	lr

08017ee4 <actuator_custom_msgs__msg__ShootAirStatus__fini>:
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop

08017ee8 <geometry_msgs__msg__Twist__init>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	4605      	mov	r5, r0
 8017eec:	b1a8      	cbz	r0, 8017f1a <geometry_msgs__msg__Twist__init+0x32>
 8017eee:	f000 f82b 	bl	8017f48 <geometry_msgs__msg__Vector3__init>
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	b140      	cbz	r0, 8017f08 <geometry_msgs__msg__Twist__init+0x20>
 8017ef6:	f105 0618 	add.w	r6, r5, #24
 8017efa:	4630      	mov	r0, r6
 8017efc:	f000 f824 	bl	8017f48 <geometry_msgs__msg__Vector3__init>
 8017f00:	4604      	mov	r4, r0
 8017f02:	b168      	cbz	r0, 8017f20 <geometry_msgs__msg__Twist__init+0x38>
 8017f04:	4620      	mov	r0, r4
 8017f06:	bd70      	pop	{r4, r5, r6, pc}
 8017f08:	4628      	mov	r0, r5
 8017f0a:	f000 f821 	bl	8017f50 <geometry_msgs__msg__Vector3__fini>
 8017f0e:	f105 0018 	add.w	r0, r5, #24
 8017f12:	f000 f81d 	bl	8017f50 <geometry_msgs__msg__Vector3__fini>
 8017f16:	4620      	mov	r0, r4
 8017f18:	bd70      	pop	{r4, r5, r6, pc}
 8017f1a:	4604      	mov	r4, r0
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	bd70      	pop	{r4, r5, r6, pc}
 8017f20:	4628      	mov	r0, r5
 8017f22:	f000 f815 	bl	8017f50 <geometry_msgs__msg__Vector3__fini>
 8017f26:	4630      	mov	r0, r6
 8017f28:	f000 f812 	bl	8017f50 <geometry_msgs__msg__Vector3__fini>
 8017f2c:	e7ea      	b.n	8017f04 <geometry_msgs__msg__Twist__init+0x1c>
 8017f2e:	bf00      	nop

08017f30 <geometry_msgs__msg__Twist__fini>:
 8017f30:	b148      	cbz	r0, 8017f46 <geometry_msgs__msg__Twist__fini+0x16>
 8017f32:	b510      	push	{r4, lr}
 8017f34:	4604      	mov	r4, r0
 8017f36:	f000 f80b 	bl	8017f50 <geometry_msgs__msg__Vector3__fini>
 8017f3a:	f104 0018 	add.w	r0, r4, #24
 8017f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f42:	f000 b805 	b.w	8017f50 <geometry_msgs__msg__Vector3__fini>
 8017f46:	4770      	bx	lr

08017f48 <geometry_msgs__msg__Vector3__init>:
 8017f48:	3800      	subs	r0, #0
 8017f4a:	bf18      	it	ne
 8017f4c:	2001      	movne	r0, #1
 8017f4e:	4770      	bx	lr

08017f50 <geometry_msgs__msg__Vector3__fini>:
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop

08017f54 <ucdr_serialize_sequence_char>:
 8017f54:	b570      	push	{r4, r5, r6, lr}
 8017f56:	4615      	mov	r5, r2
 8017f58:	460e      	mov	r6, r1
 8017f5a:	7d01      	ldrb	r1, [r0, #20]
 8017f5c:	4604      	mov	r4, r0
 8017f5e:	f7fb fb35 	bl	80135cc <ucdr_serialize_endian_uint32_t>
 8017f62:	b90d      	cbnz	r5, 8017f68 <ucdr_serialize_sequence_char+0x14>
 8017f64:	2001      	movs	r0, #1
 8017f66:	bd70      	pop	{r4, r5, r6, pc}
 8017f68:	462b      	mov	r3, r5
 8017f6a:	4632      	mov	r2, r6
 8017f6c:	7d21      	ldrb	r1, [r4, #20]
 8017f6e:	4620      	mov	r0, r4
 8017f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f74:	f006 bff8 	b.w	801ef68 <ucdr_serialize_endian_array_char>

08017f78 <ucdr_deserialize_sequence_char>:
 8017f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f7c:	461d      	mov	r5, r3
 8017f7e:	4616      	mov	r6, r2
 8017f80:	460f      	mov	r7, r1
 8017f82:	461a      	mov	r2, r3
 8017f84:	7d01      	ldrb	r1, [r0, #20]
 8017f86:	4604      	mov	r4, r0
 8017f88:	f7fb fc48 	bl	801381c <ucdr_deserialize_endian_uint32_t>
 8017f8c:	682b      	ldr	r3, [r5, #0]
 8017f8e:	429e      	cmp	r6, r3
 8017f90:	d201      	bcs.n	8017f96 <ucdr_deserialize_sequence_char+0x1e>
 8017f92:	2201      	movs	r2, #1
 8017f94:	75a2      	strb	r2, [r4, #22]
 8017f96:	b913      	cbnz	r3, 8017f9e <ucdr_deserialize_sequence_char+0x26>
 8017f98:	2001      	movs	r0, #1
 8017f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f9e:	463a      	mov	r2, r7
 8017fa0:	7d21      	ldrb	r1, [r4, #20]
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa8:	f007 b810 	b.w	801efcc <ucdr_deserialize_endian_array_char>

08017fac <ucdr_serialize_sequence_uint8_t>:
 8017fac:	b570      	push	{r4, r5, r6, lr}
 8017fae:	4615      	mov	r5, r2
 8017fb0:	460e      	mov	r6, r1
 8017fb2:	7d01      	ldrb	r1, [r0, #20]
 8017fb4:	4604      	mov	r4, r0
 8017fb6:	f7fb fb09 	bl	80135cc <ucdr_serialize_endian_uint32_t>
 8017fba:	b90d      	cbnz	r5, 8017fc0 <ucdr_serialize_sequence_uint8_t+0x14>
 8017fbc:	2001      	movs	r0, #1
 8017fbe:	bd70      	pop	{r4, r5, r6, pc}
 8017fc0:	462b      	mov	r3, r5
 8017fc2:	4632      	mov	r2, r6
 8017fc4:	7d21      	ldrb	r1, [r4, #20]
 8017fc6:	4620      	mov	r0, r4
 8017fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fcc:	f007 b864 	b.w	801f098 <ucdr_serialize_endian_array_uint8_t>

08017fd0 <ucdr_deserialize_sequence_uint8_t>:
 8017fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd4:	461d      	mov	r5, r3
 8017fd6:	4616      	mov	r6, r2
 8017fd8:	460f      	mov	r7, r1
 8017fda:	461a      	mov	r2, r3
 8017fdc:	7d01      	ldrb	r1, [r0, #20]
 8017fde:	4604      	mov	r4, r0
 8017fe0:	f7fb fc1c 	bl	801381c <ucdr_deserialize_endian_uint32_t>
 8017fe4:	682b      	ldr	r3, [r5, #0]
 8017fe6:	429e      	cmp	r6, r3
 8017fe8:	d201      	bcs.n	8017fee <ucdr_deserialize_sequence_uint8_t+0x1e>
 8017fea:	2201      	movs	r2, #1
 8017fec:	75a2      	strb	r2, [r4, #22]
 8017fee:	b913      	cbnz	r3, 8017ff6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8017ff0:	2001      	movs	r0, #1
 8017ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ff6:	463a      	mov	r2, r7
 8017ff8:	7d21      	ldrb	r1, [r4, #20]
 8017ffa:	4620      	mov	r0, r4
 8017ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018000:	f007 b8b0 	b.w	801f164 <ucdr_deserialize_endian_array_uint8_t>

08018004 <ucdr_serialize_sequence_int32_t>:
 8018004:	b570      	push	{r4, r5, r6, lr}
 8018006:	4615      	mov	r5, r2
 8018008:	460e      	mov	r6, r1
 801800a:	7d01      	ldrb	r1, [r0, #20]
 801800c:	4604      	mov	r4, r0
 801800e:	f7fb fadd 	bl	80135cc <ucdr_serialize_endian_uint32_t>
 8018012:	b90d      	cbnz	r5, 8018018 <ucdr_serialize_sequence_int32_t+0x14>
 8018014:	2001      	movs	r0, #1
 8018016:	bd70      	pop	{r4, r5, r6, pc}
 8018018:	462b      	mov	r3, r5
 801801a:	4632      	mov	r2, r6
 801801c:	7d21      	ldrb	r1, [r4, #20]
 801801e:	4620      	mov	r0, r4
 8018020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018024:	f007 b8d2 	b.w	801f1cc <ucdr_serialize_endian_array_int32_t>

08018028 <ucdr_deserialize_sequence_int32_t>:
 8018028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801802c:	461d      	mov	r5, r3
 801802e:	4616      	mov	r6, r2
 8018030:	460f      	mov	r7, r1
 8018032:	461a      	mov	r2, r3
 8018034:	7d01      	ldrb	r1, [r0, #20]
 8018036:	4604      	mov	r4, r0
 8018038:	f7fb fbf0 	bl	801381c <ucdr_deserialize_endian_uint32_t>
 801803c:	682b      	ldr	r3, [r5, #0]
 801803e:	429e      	cmp	r6, r3
 8018040:	d201      	bcs.n	8018046 <ucdr_deserialize_sequence_int32_t+0x1e>
 8018042:	2201      	movs	r2, #1
 8018044:	75a2      	strb	r2, [r4, #22]
 8018046:	b913      	cbnz	r3, 801804e <ucdr_deserialize_sequence_int32_t+0x26>
 8018048:	2001      	movs	r0, #1
 801804a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801804e:	463a      	mov	r2, r7
 8018050:	7d21      	ldrb	r1, [r4, #20]
 8018052:	4620      	mov	r0, r4
 8018054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018058:	f007 b90e 	b.w	801f278 <ucdr_deserialize_endian_array_int32_t>

0801805c <uxr_buffer_delete_entity>:
 801805c:	b510      	push	{r4, lr}
 801805e:	2300      	movs	r3, #0
 8018060:	b08e      	sub	sp, #56	; 0x38
 8018062:	4604      	mov	r4, r0
 8018064:	9103      	str	r1, [sp, #12]
 8018066:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801806a:	2303      	movs	r3, #3
 801806c:	2204      	movs	r2, #4
 801806e:	9300      	str	r3, [sp, #0]
 8018070:	ab06      	add	r3, sp, #24
 8018072:	f001 fbc7 	bl	8019804 <uxr_prepare_stream_to_write_submessage>
 8018076:	b918      	cbnz	r0, 8018080 <uxr_buffer_delete_entity+0x24>
 8018078:	4604      	mov	r4, r0
 801807a:	4620      	mov	r0, r4
 801807c:	b00e      	add	sp, #56	; 0x38
 801807e:	bd10      	pop	{r4, pc}
 8018080:	9902      	ldr	r1, [sp, #8]
 8018082:	aa05      	add	r2, sp, #20
 8018084:	4620      	mov	r0, r4
 8018086:	f001 fcf9 	bl	8019a7c <uxr_init_base_object_request>
 801808a:	4604      	mov	r4, r0
 801808c:	a905      	add	r1, sp, #20
 801808e:	a806      	add	r0, sp, #24
 8018090:	f003 f980 	bl	801b394 <uxr_serialize_DELETE_Payload>
 8018094:	4620      	mov	r0, r4
 8018096:	b00e      	add	sp, #56	; 0x38
 8018098:	bd10      	pop	{r4, pc}
 801809a:	bf00      	nop

0801809c <uxr_common_create_entity>:
 801809c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80180a0:	b510      	push	{r4, lr}
 80180a2:	f1bc 0f01 	cmp.w	ip, #1
 80180a6:	b08c      	sub	sp, #48	; 0x30
 80180a8:	4604      	mov	r4, r0
 80180aa:	9202      	str	r2, [sp, #8]
 80180ac:	bf0c      	ite	eq
 80180ae:	f003 0201 	andeq.w	r2, r3, #1
 80180b2:	2200      	movne	r2, #0
 80180b4:	330e      	adds	r3, #14
 80180b6:	9103      	str	r1, [sp, #12]
 80180b8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80180bc:	441a      	add	r2, r3
 80180be:	ab04      	add	r3, sp, #16
 80180c0:	9101      	str	r1, [sp, #4]
 80180c2:	2101      	movs	r1, #1
 80180c4:	b292      	uxth	r2, r2
 80180c6:	9100      	str	r1, [sp, #0]
 80180c8:	9903      	ldr	r1, [sp, #12]
 80180ca:	f001 fb9b 	bl	8019804 <uxr_prepare_stream_to_write_submessage>
 80180ce:	b918      	cbnz	r0, 80180d8 <uxr_common_create_entity+0x3c>
 80180d0:	4604      	mov	r4, r0
 80180d2:	4620      	mov	r0, r4
 80180d4:	b00c      	add	sp, #48	; 0x30
 80180d6:	bd10      	pop	{r4, pc}
 80180d8:	9902      	ldr	r1, [sp, #8]
 80180da:	4620      	mov	r0, r4
 80180dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180de:	f001 fccd 	bl	8019a7c <uxr_init_base_object_request>
 80180e2:	4604      	mov	r4, r0
 80180e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80180e6:	a804      	add	r0, sp, #16
 80180e8:	f003 f898 	bl	801b21c <uxr_serialize_CREATE_Payload>
 80180ec:	4620      	mov	r0, r4
 80180ee:	b00c      	add	sp, #48	; 0x30
 80180f0:	bd10      	pop	{r4, pc}
 80180f2:	bf00      	nop

080180f4 <uxr_buffer_create_participant_bin>:
 80180f4:	b570      	push	{r4, r5, r6, lr}
 80180f6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80180fa:	4605      	mov	r5, r0
 80180fc:	ac11      	add	r4, sp, #68	; 0x44
 80180fe:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8018102:	2303      	movs	r3, #3
 8018104:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8018108:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801810c:	7223      	strb	r3, [r4, #8]
 801810e:	2300      	movs	r3, #0
 8018110:	2201      	movs	r2, #1
 8018112:	f88d 3014 	strb.w	r3, [sp, #20]
 8018116:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8018118:	7122      	strb	r2, [r4, #4]
 801811a:	b1cb      	cbz	r3, 8018150 <uxr_buffer_create_participant_bin+0x5c>
 801811c:	f88d 201c 	strb.w	r2, [sp, #28]
 8018120:	9308      	str	r3, [sp, #32]
 8018122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018126:	a915      	add	r1, sp, #84	; 0x54
 8018128:	a809      	add	r0, sp, #36	; 0x24
 801812a:	f7fc fb39 	bl	80147a0 <ucdr_init_buffer>
 801812e:	a905      	add	r1, sp, #20
 8018130:	a809      	add	r0, sp, #36	; 0x24
 8018132:	f002 fd39 	bl	801aba8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8018136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018138:	9600      	str	r6, [sp, #0]
 801813a:	4628      	mov	r0, r5
 801813c:	9401      	str	r4, [sp, #4]
 801813e:	60e3      	str	r3, [r4, #12]
 8018140:	b29b      	uxth	r3, r3
 8018142:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018146:	f7ff ffa9 	bl	801809c <uxr_common_create_entity>
 801814a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801814e:	bd70      	pop	{r4, r5, r6, pc}
 8018150:	f88d 301c 	strb.w	r3, [sp, #28]
 8018154:	e7e5      	b.n	8018122 <uxr_buffer_create_participant_bin+0x2e>
 8018156:	bf00      	nop

08018158 <uxr_buffer_create_topic_bin>:
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801815e:	4605      	mov	r5, r0
 8018160:	4618      	mov	r0, r3
 8018162:	9105      	str	r1, [sp, #20]
 8018164:	a997      	add	r1, sp, #604	; 0x25c
 8018166:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 801816a:	ac13      	add	r4, sp, #76	; 0x4c
 801816c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8018170:	2302      	movs	r3, #2
 8018172:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8018176:	f000 f9ad 	bl	80184d4 <uxr_object_id_to_raw>
 801817a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 801817c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018180:	a917      	add	r1, sp, #92	; 0x5c
 8018182:	a80b      	add	r0, sp, #44	; 0x2c
 8018184:	9306      	str	r3, [sp, #24]
 8018186:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8018188:	930a      	str	r3, [sp, #40]	; 0x28
 801818a:	2303      	movs	r3, #3
 801818c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8018190:	2301      	movs	r3, #1
 8018192:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018196:	2300      	movs	r3, #0
 8018198:	f88d 301c 	strb.w	r3, [sp, #28]
 801819c:	f7fc fb00 	bl	80147a0 <ucdr_init_buffer>
 80181a0:	a906      	add	r1, sp, #24
 80181a2:	a80b      	add	r0, sp, #44	; 0x2c
 80181a4:	f002 fd22 	bl	801abec <uxr_serialize_OBJK_Topic_Binary>
 80181a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181aa:	4628      	mov	r0, r5
 80181ac:	9600      	str	r6, [sp, #0]
 80181ae:	9316      	str	r3, [sp, #88]	; 0x58
 80181b0:	b29b      	uxth	r3, r3
 80181b2:	9401      	str	r4, [sp, #4]
 80181b4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80181b8:	f7ff ff70 	bl	801809c <uxr_common_create_entity>
 80181bc:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80181c0:	bd70      	pop	{r4, r5, r6, pc}
 80181c2:	bf00      	nop

080181c4 <uxr_buffer_create_subscriber_bin>:
 80181c4:	b570      	push	{r4, r5, r6, lr}
 80181c6:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80181ca:	4605      	mov	r5, r0
 80181cc:	4618      	mov	r0, r3
 80181ce:	9105      	str	r1, [sp, #20]
 80181d0:	a992      	add	r1, sp, #584	; 0x248
 80181d2:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80181d6:	ac0e      	add	r4, sp, #56	; 0x38
 80181d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80181dc:	2304      	movs	r3, #4
 80181de:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80181e2:	f000 f977 	bl	80184d4 <uxr_object_id_to_raw>
 80181e6:	2300      	movs	r3, #0
 80181e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80181ec:	a912      	add	r1, sp, #72	; 0x48
 80181ee:	a806      	add	r0, sp, #24
 80181f0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80181f4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80181f8:	2303      	movs	r3, #3
 80181fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80181fe:	f7fc facf 	bl	80147a0 <ucdr_init_buffer>
 8018202:	a993      	add	r1, sp, #588	; 0x24c
 8018204:	a806      	add	r0, sp, #24
 8018206:	f002 fda5 	bl	801ad54 <uxr_serialize_OBJK_Subscriber_Binary>
 801820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801820c:	4628      	mov	r0, r5
 801820e:	9600      	str	r6, [sp, #0]
 8018210:	9311      	str	r3, [sp, #68]	; 0x44
 8018212:	b29b      	uxth	r3, r3
 8018214:	9401      	str	r4, [sp, #4]
 8018216:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801821a:	f7ff ff3f 	bl	801809c <uxr_common_create_entity>
 801821e:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8018222:	bd70      	pop	{r4, r5, r6, pc}

08018224 <uxr_buffer_create_datareader_bin>:
 8018224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018228:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801822c:	4606      	mov	r6, r0
 801822e:	4618      	mov	r0, r3
 8018230:	2703      	movs	r7, #3
 8018232:	ac1f      	add	r4, sp, #124	; 0x7c
 8018234:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8018238:	9105      	str	r1, [sp, #20]
 801823a:	a9a3      	add	r1, sp, #652	; 0x28c
 801823c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8018240:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8018244:	2306      	movs	r3, #6
 8018246:	7123      	strb	r3, [r4, #4]
 8018248:	f000 f944 	bl	80184d4 <uxr_object_id_to_raw>
 801824c:	a90e      	add	r1, sp, #56	; 0x38
 801824e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8018250:	7227      	strb	r7, [r4, #8]
 8018252:	f000 f93f 	bl	80184d4 <uxr_object_id_to_raw>
 8018256:	2300      	movs	r3, #0
 8018258:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801825c:	3d00      	subs	r5, #0
 801825e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8018262:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8018266:	bf18      	it	ne
 8018268:	2501      	movne	r5, #1
 801826a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801826e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8018272:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8018276:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801827a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801827e:	2301      	movs	r3, #1
 8018280:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8018284:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8018288:	bb8a      	cbnz	r2, 80182ee <uxr_buffer_create_datareader_bin+0xca>
 801828a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801828e:	f04f 0c13 	mov.w	ip, #19
 8018292:	250b      	movs	r5, #11
 8018294:	2221      	movs	r2, #33	; 0x21
 8018296:	2111      	movs	r1, #17
 8018298:	2009      	movs	r0, #9
 801829a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801829e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 80182a2:	b923      	cbnz	r3, 80182ae <uxr_buffer_create_datareader_bin+0x8a>
 80182a4:	4672      	mov	r2, lr
 80182a6:	4661      	mov	r1, ip
 80182a8:	4628      	mov	r0, r5
 80182aa:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80182ae:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d025      	beq.n	8018302 <uxr_buffer_create_datareader_bin+0xde>
 80182b6:	2b03      	cmp	r3, #3
 80182b8:	d029      	beq.n	801830e <uxr_buffer_create_datareader_bin+0xea>
 80182ba:	b32b      	cbz	r3, 8018308 <uxr_buffer_create_datareader_bin+0xe4>
 80182bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80182c0:	a923      	add	r1, sp, #140	; 0x8c
 80182c2:	a806      	add	r0, sp, #24
 80182c4:	f7fc fa6c 	bl	80147a0 <ucdr_init_buffer>
 80182c8:	a90e      	add	r1, sp, #56	; 0x38
 80182ca:	a806      	add	r0, sp, #24
 80182cc:	f002 fdb8 	bl	801ae40 <uxr_serialize_OBJK_DataReader_Binary>
 80182d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182d2:	f8cd 8000 	str.w	r8, [sp]
 80182d6:	4630      	mov	r0, r6
 80182d8:	9401      	str	r4, [sp, #4]
 80182da:	60e3      	str	r3, [r4, #12]
 80182dc:	b29b      	uxth	r3, r3
 80182de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80182e2:	f7ff fedb 	bl	801809c <uxr_common_create_entity>
 80182e6:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80182ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ee:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80182f2:	f04f 0c12 	mov.w	ip, #18
 80182f6:	250a      	movs	r5, #10
 80182f8:	2220      	movs	r2, #32
 80182fa:	2110      	movs	r1, #16
 80182fc:	2008      	movs	r0, #8
 80182fe:	2702      	movs	r7, #2
 8018300:	e7cd      	b.n	801829e <uxr_buffer_create_datareader_bin+0x7a>
 8018302:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8018306:	e7d9      	b.n	80182bc <uxr_buffer_create_datareader_bin+0x98>
 8018308:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801830c:	e7d6      	b.n	80182bc <uxr_buffer_create_datareader_bin+0x98>
 801830e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018312:	e7d3      	b.n	80182bc <uxr_buffer_create_datareader_bin+0x98>

08018314 <get_custom_error>:
 8018314:	4b01      	ldr	r3, [pc, #4]	; (801831c <get_custom_error+0x8>)
 8018316:	7818      	ldrb	r0, [r3, #0]
 8018318:	4770      	bx	lr
 801831a:	bf00      	nop
 801831c:	200178ac 	.word	0x200178ac

08018320 <recv_custom_msg>:
 8018320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018324:	4693      	mov	fp, r2
 8018326:	b089      	sub	sp, #36	; 0x24
 8018328:	2200      	movs	r2, #0
 801832a:	4604      	mov	r4, r0
 801832c:	468a      	mov	sl, r1
 801832e:	9305      	str	r3, [sp, #20]
 8018330:	f88d 201e 	strb.w	r2, [sp, #30]
 8018334:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8018338:	b322      	cbz	r2, 8018384 <recv_custom_msg+0x64>
 801833a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801833e:	f10d 081f 	add.w	r8, sp, #31
 8018342:	af05      	add	r7, sp, #20
 8018344:	f10d 061e 	add.w	r6, sp, #30
 8018348:	f44f 7500 	mov.w	r5, #512	; 0x200
 801834c:	e002      	b.n	8018354 <recv_custom_msg+0x34>
 801834e:	9b05      	ldr	r3, [sp, #20]
 8018350:	2b00      	cmp	r3, #0
 8018352:	dd0f      	ble.n	8018374 <recv_custom_msg+0x54>
 8018354:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018358:	4623      	mov	r3, r4
 801835a:	4622      	mov	r2, r4
 801835c:	4648      	mov	r0, r9
 801835e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018362:	e9cd 5600 	strd	r5, r6, [sp]
 8018366:	f001 fd9f 	bl	8019ea8 <uxr_read_framed_msg>
 801836a:	2800      	cmp	r0, #0
 801836c:	d0ef      	beq.n	801834e <recv_custom_msg+0x2e>
 801836e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018372:	b1b3      	cbz	r3, 80183a2 <recv_custom_msg+0x82>
 8018374:	4b0f      	ldr	r3, [pc, #60]	; (80183b4 <recv_custom_msg+0x94>)
 8018376:	2000      	movs	r0, #0
 8018378:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801837c:	701a      	strb	r2, [r3, #0]
 801837e:	b009      	add	sp, #36	; 0x24
 8018380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018384:	f10d 021f 	add.w	r2, sp, #31
 8018388:	4601      	mov	r1, r0
 801838a:	9200      	str	r2, [sp, #0]
 801838c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018390:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8018394:	47a8      	blx	r5
 8018396:	2800      	cmp	r0, #0
 8018398:	d0ec      	beq.n	8018374 <recv_custom_msg+0x54>
 801839a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d1e8      	bne.n	8018374 <recv_custom_msg+0x54>
 80183a2:	f8cb 0000 	str.w	r0, [fp]
 80183a6:	2001      	movs	r0, #1
 80183a8:	f8ca 4000 	str.w	r4, [sl]
 80183ac:	b009      	add	sp, #36	; 0x24
 80183ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b2:	bf00      	nop
 80183b4:	200178ac 	.word	0x200178ac

080183b8 <send_custom_msg>:
 80183b8:	b530      	push	{r4, r5, lr}
 80183ba:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80183be:	b087      	sub	sp, #28
 80183c0:	4614      	mov	r4, r2
 80183c2:	b995      	cbnz	r5, 80183ea <send_custom_msg+0x32>
 80183c4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80183c8:	f10d 0317 	add.w	r3, sp, #23
 80183cc:	47a8      	blx	r5
 80183ce:	1e03      	subs	r3, r0, #0
 80183d0:	bf18      	it	ne
 80183d2:	2301      	movne	r3, #1
 80183d4:	42a0      	cmp	r0, r4
 80183d6:	bf18      	it	ne
 80183d8:	2300      	movne	r3, #0
 80183da:	b91b      	cbnz	r3, 80183e4 <send_custom_msg+0x2c>
 80183dc:	4a0a      	ldr	r2, [pc, #40]	; (8018408 <send_custom_msg+0x50>)
 80183de:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80183e2:	7011      	strb	r1, [r2, #0]
 80183e4:	4618      	mov	r0, r3
 80183e6:	b007      	add	sp, #28
 80183e8:	bd30      	pop	{r4, r5, pc}
 80183ea:	460b      	mov	r3, r1
 80183ec:	2200      	movs	r2, #0
 80183ee:	f10d 0117 	add.w	r1, sp, #23
 80183f2:	9400      	str	r4, [sp, #0]
 80183f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80183f8:	4602      	mov	r2, r0
 80183fa:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80183fe:	f200 2002 	addw	r0, r0, #514	; 0x202
 8018402:	f001 fb73 	bl	8019aec <uxr_write_framed_msg>
 8018406:	e7e2      	b.n	80183ce <send_custom_msg+0x16>
 8018408:	200178ac 	.word	0x200178ac

0801840c <uxr_set_custom_transport_callbacks>:
 801840c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8018410:	9901      	ldr	r1, [sp, #4]
 8018412:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8018416:	9b00      	ldr	r3, [sp, #0]
 8018418:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801841c:	4770      	bx	lr
 801841e:	bf00      	nop

08018420 <uxr_init_custom_transport>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8018426:	b303      	cbz	r3, 801846a <uxr_init_custom_transport+0x4a>
 8018428:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801842c:	4604      	mov	r4, r0
 801842e:	b1e2      	cbz	r2, 801846a <uxr_init_custom_transport+0x4a>
 8018430:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018434:	b1ca      	cbz	r2, 801846a <uxr_init_custom_transport+0x4a>
 8018436:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801843a:	b1b2      	cbz	r2, 801846a <uxr_init_custom_transport+0x4a>
 801843c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018440:	4798      	blx	r3
 8018442:	4605      	mov	r5, r0
 8018444:	b188      	cbz	r0, 801846a <uxr_init_custom_transport+0x4a>
 8018446:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801844a:	b98b      	cbnz	r3, 8018470 <uxr_init_custom_transport+0x50>
 801844c:	4b0b      	ldr	r3, [pc, #44]	; (801847c <uxr_init_custom_transport+0x5c>)
 801844e:	4628      	mov	r0, r5
 8018450:	490b      	ldr	r1, [pc, #44]	; (8018480 <uxr_init_custom_transport+0x60>)
 8018452:	4a0c      	ldr	r2, [pc, #48]	; (8018484 <uxr_init_custom_transport+0x64>)
 8018454:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8018458:	f44f 7300 	mov.w	r3, #512	; 0x200
 801845c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018460:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018464:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8018468:	bd38      	pop	{r3, r4, r5, pc}
 801846a:	2500      	movs	r5, #0
 801846c:	4628      	mov	r0, r5
 801846e:	bd38      	pop	{r3, r4, r5, pc}
 8018470:	2100      	movs	r1, #0
 8018472:	f204 2002 	addw	r0, r4, #514	; 0x202
 8018476:	f001 fb33 	bl	8019ae0 <uxr_init_framing_io>
 801847a:	e7e7      	b.n	801844c <uxr_init_custom_transport+0x2c>
 801847c:	08018321 	.word	0x08018321
 8018480:	080183b9 	.word	0x080183b9
 8018484:	08018315 	.word	0x08018315

08018488 <uxr_close_custom_transport>:
 8018488:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801848c:	4718      	bx	r3
 801848e:	bf00      	nop

08018490 <uxr_object_id>:
 8018490:	b082      	sub	sp, #8
 8018492:	2300      	movs	r3, #0
 8018494:	f88d 1006 	strb.w	r1, [sp, #6]
 8018498:	f360 030f 	bfi	r3, r0, #0, #16
 801849c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80184a0:	f362 431f 	bfi	r3, r2, #16, #16
 80184a4:	4618      	mov	r0, r3
 80184a6:	b002      	add	sp, #8
 80184a8:	4770      	bx	lr
 80184aa:	bf00      	nop

080184ac <uxr_object_id_from_raw>:
 80184ac:	7843      	ldrb	r3, [r0, #1]
 80184ae:	b082      	sub	sp, #8
 80184b0:	7801      	ldrb	r1, [r0, #0]
 80184b2:	2000      	movs	r0, #0
 80184b4:	091a      	lsrs	r2, r3, #4
 80184b6:	f003 030f 	and.w	r3, r3, #15
 80184ba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80184be:	f88d 3006 	strb.w	r3, [sp, #6]
 80184c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80184c6:	f362 000f 	bfi	r0, r2, #0, #16
 80184ca:	f363 401f 	bfi	r0, r3, #16, #16
 80184ce:	b002      	add	sp, #8
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop

080184d4 <uxr_object_id_to_raw>:
 80184d4:	4602      	mov	r2, r0
 80184d6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80184da:	b082      	sub	sp, #8
 80184dc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80184e0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80184e4:	f881 c000 	strb.w	ip, [r1]
 80184e8:	7048      	strb	r0, [r1, #1]
 80184ea:	b002      	add	sp, #8
 80184ec:	4770      	bx	lr
 80184ee:	bf00      	nop

080184f0 <uxr_ping_agent_session>:
 80184f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184f4:	4617      	mov	r7, r2
 80184f6:	b091      	sub	sp, #68	; 0x44
 80184f8:	2210      	movs	r2, #16
 80184fa:	4606      	mov	r6, r0
 80184fc:	4688      	mov	r8, r1
 80184fe:	a808      	add	r0, sp, #32
 8018500:	eb0d 0102 	add.w	r1, sp, r2
 8018504:	2500      	movs	r5, #0
 8018506:	f7fc f94b 	bl	80147a0 <ucdr_init_buffer>
 801850a:	4b1e      	ldr	r3, [pc, #120]	; (8018584 <uxr_ping_agent_session+0x94>)
 801850c:	2402      	movs	r4, #2
 801850e:	462a      	mov	r2, r5
 8018510:	881b      	ldrh	r3, [r3, #0]
 8018512:	a808      	add	r0, sp, #32
 8018514:	9500      	str	r5, [sp, #0]
 8018516:	f8ad 300a 	strh.w	r3, [sp, #10]
 801851a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801851e:	7831      	ldrb	r1, [r6, #0]
 8018520:	f8ad 3008 	strh.w	r3, [sp, #8]
 8018524:	462b      	mov	r3, r5
 8018526:	9403      	str	r4, [sp, #12]
 8018528:	f002 f90c 	bl	801a744 <uxr_serialize_message_header>
 801852c:	4621      	mov	r1, r4
 801852e:	462b      	mov	r3, r5
 8018530:	2208      	movs	r2, #8
 8018532:	a808      	add	r0, sp, #32
 8018534:	f002 f88e 	bl	801a654 <uxr_buffer_submessage_header>
 8018538:	4604      	mov	r4, r0
 801853a:	a902      	add	r1, sp, #8
 801853c:	a808      	add	r0, sp, #32
 801853e:	f002 fefd 	bl	801b33c <uxr_serialize_GET_INFO_Payload>
 8018542:	b104      	cbz	r4, 8018546 <uxr_ping_agent_session+0x56>
 8018544:	b918      	cbnz	r0, 801854e <uxr_ping_agent_session+0x5e>
 8018546:	2000      	movs	r0, #0
 8018548:	b011      	add	sp, #68	; 0x44
 801854a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801854e:	a808      	add	r0, sp, #32
 8018550:	f7fc f954 	bl	80147fc <ucdr_buffer_length>
 8018554:	4681      	mov	r9, r0
 8018556:	e00d      	b.n	8018574 <uxr_ping_agent_session+0x84>
 8018558:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801855a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801855e:	47a0      	blx	r4
 8018560:	4604      	mov	r4, r0
 8018562:	4641      	mov	r1, r8
 8018564:	4630      	mov	r0, r6
 8018566:	f000 ff4d 	bl	8019404 <uxr_run_session_until_pong>
 801856a:	ea04 0c00 	and.w	ip, r4, r0
 801856e:	f01c 00ff 	ands.w	r0, ip, #255	; 0xff
 8018572:	d1e9      	bne.n	8018548 <uxr_ping_agent_session+0x58>
 8018574:	42af      	cmp	r7, r5
 8018576:	464a      	mov	r2, r9
 8018578:	a904      	add	r1, sp, #16
 801857a:	f105 0501 	add.w	r5, r5, #1
 801857e:	d1eb      	bne.n	8018558 <uxr_ping_agent_session+0x68>
 8018580:	e7e1      	b.n	8018546 <uxr_ping_agent_session+0x56>
 8018582:	bf00      	nop
 8018584:	08022254 	.word	0x08022254

08018588 <uxr_ping_agent_attempts>:
 8018588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801858c:	ed2d 8b02 	vpush	{d8}
 8018590:	b0d3      	sub	sp, #332	; 0x14c
 8018592:	4606      	mov	r6, r0
 8018594:	468a      	mov	sl, r1
 8018596:	2400      	movs	r4, #0
 8018598:	a90c      	add	r1, sp, #48	; 0x30
 801859a:	a810      	add	r0, sp, #64	; 0x40
 801859c:	9205      	str	r2, [sp, #20]
 801859e:	2210      	movs	r2, #16
 80185a0:	f7fc f8fe 	bl	80147a0 <ucdr_init_buffer>
 80185a4:	4b53      	ldr	r3, [pc, #332]	; (80186f4 <uxr_ping_agent_attempts+0x16c>)
 80185a6:	2502      	movs	r5, #2
 80185a8:	4622      	mov	r2, r4
 80185aa:	881b      	ldrh	r3, [r3, #0]
 80185ac:	2180      	movs	r1, #128	; 0x80
 80185ae:	a810      	add	r0, sp, #64	; 0x40
 80185b0:	9400      	str	r4, [sp, #0]
 80185b2:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
 80185b6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80185ba:	9521      	str	r5, [sp, #132]	; 0x84
 80185bc:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
 80185c0:	4623      	mov	r3, r4
 80185c2:	f002 f8bf 	bl	801a744 <uxr_serialize_message_header>
 80185c6:	4623      	mov	r3, r4
 80185c8:	4629      	mov	r1, r5
 80185ca:	2208      	movs	r2, #8
 80185cc:	a810      	add	r0, sp, #64	; 0x40
 80185ce:	f002 f841 	bl	801a654 <uxr_buffer_submessage_header>
 80185d2:	4681      	mov	r9, r0
 80185d4:	a920      	add	r1, sp, #128	; 0x80
 80185d6:	a810      	add	r0, sp, #64	; 0x40
 80185d8:	f002 feb0 	bl	801b33c <uxr_serialize_GET_INFO_Payload>
 80185dc:	ea09 0000 	and.w	r0, r9, r0
 80185e0:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 80185e4:	d107      	bne.n	80185f6 <uxr_ping_agent_attempts+0x6e>
 80185e6:	f04f 0b00 	mov.w	fp, #0
 80185ea:	4658      	mov	r0, fp
 80185ec:	b053      	add	sp, #332	; 0x14c
 80185ee:	ecbd 8b02 	vpop	{d8}
 80185f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f6:	a810      	add	r0, sp, #64	; 0x40
 80185f8:	9404      	str	r4, [sp, #16]
 80185fa:	f7fc f8ff 	bl	80147fc <ucdr_buffer_length>
 80185fe:	ee08 0a10 	vmov	s16, r0
 8018602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018606:	4293      	cmp	r3, r2
 8018608:	d0ed      	beq.n	80185e6 <uxr_ping_agent_attempts+0x5e>
 801860a:	ee18 2a10 	vmov	r2, s16
 801860e:	a90c      	add	r1, sp, #48	; 0x30
 8018610:	4655      	mov	r5, sl
 8018612:	f04f 0800 	mov.w	r8, #0
 8018616:	e9d6 0300 	ldrd	r0, r3, [r6]
 801861a:	4798      	blx	r3
 801861c:	f002 f860 	bl	801a6e0 <uxr_millis>
 8018620:	9003      	str	r0, [sp, #12]
 8018622:	e00b      	b.n	801863c <uxr_ping_agent_attempts+0xb4>
 8018624:	f002 f85c 	bl	801a6e0 <uxr_millis>
 8018628:	9b03      	ldr	r3, [sp, #12]
 801862a:	1ac0      	subs	r0, r0, r3
 801862c:	1a2d      	subs	r5, r5, r0
 801862e:	f002 f857 	bl	801a6e0 <uxr_millis>
 8018632:	9003      	str	r0, [sp, #12]
 8018634:	2d00      	cmp	r5, #0
 8018636:	dd30      	ble.n	801869a <uxr_ping_agent_attempts+0x112>
 8018638:	2f00      	cmp	r7, #0
 801863a:	d02e      	beq.n	801869a <uxr_ping_agent_attempts+0x112>
 801863c:	4653      	mov	r3, sl
 801863e:	aa09      	add	r2, sp, #36	; 0x24
 8018640:	a908      	add	r1, sp, #32
 8018642:	6830      	ldr	r0, [r6, #0]
 8018644:	68b4      	ldr	r4, [r6, #8]
 8018646:	464f      	mov	r7, r9
 8018648:	f8cd 8020 	str.w	r8, [sp, #32]
 801864c:	47a0      	blx	r4
 801864e:	4683      	mov	fp, r0
 8018650:	2800      	cmp	r0, #0
 8018652:	d0e7      	beq.n	8018624 <uxr_ping_agent_attempts+0x9c>
 8018654:	a818      	add	r0, sp, #96	; 0x60
 8018656:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801865a:	f7fc f8a1 	bl	80147a0 <ucdr_init_buffer>
 801865e:	ab07      	add	r3, sp, #28
 8018660:	f10d 0219 	add.w	r2, sp, #25
 8018664:	a918      	add	r1, sp, #96	; 0x60
 8018666:	a80a      	add	r0, sp, #40	; 0x28
 8018668:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
 801866c:	f001 f9be 	bl	80199ec <uxr_read_session_header>
 8018670:	22c8      	movs	r2, #200	; 0xc8
 8018672:	2100      	movs	r1, #0
 8018674:	a820      	add	r0, sp, #128	; 0x80
 8018676:	f008 fcc7 	bl	8021008 <memset>
 801867a:	a818      	add	r0, sp, #96	; 0x60
 801867c:	f7fc f8c2 	bl	8014804 <ucdr_buffer_remaining>
 8018680:	2804      	cmp	r0, #4
 8018682:	d816      	bhi.n	80186b2 <uxr_ping_agent_attempts+0x12a>
 8018684:	f89d 3135 	ldrb.w	r3, [sp, #309]	; 0x135
 8018688:	2b00      	cmp	r3, #0
 801868a:	bf13      	iteet	ne
 801868c:	f04f 0b01 	movne.w	fp, #1
 8018690:	f04f 0b00 	moveq.w	fp, #0
 8018694:	2701      	moveq	r7, #1
 8018696:	2700      	movne	r7, #0
 8018698:	e7c4      	b.n	8018624 <uxr_ping_agent_attempts+0x9c>
 801869a:	9b04      	ldr	r3, [sp, #16]
 801869c:	3301      	adds	r3, #1
 801869e:	9304      	str	r3, [sp, #16]
 80186a0:	f1bb 0f00 	cmp.w	fp, #0
 80186a4:	d0ad      	beq.n	8018602 <uxr_ping_agent_attempts+0x7a>
 80186a6:	4658      	mov	r0, fp
 80186a8:	b053      	add	sp, #332	; 0x14c
 80186aa:	ecbd 8b02 	vpop	{d8}
 80186ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186b2:	f10d 031e 	add.w	r3, sp, #30
 80186b6:	f10d 021b 	add.w	r2, sp, #27
 80186ba:	f10d 011a 	add.w	r1, sp, #26
 80186be:	a818      	add	r0, sp, #96	; 0x60
 80186c0:	f88d 801a 	strb.w	r8, [sp, #26]
 80186c4:	f8ad 801e 	strh.w	r8, [sp, #30]
 80186c8:	f88d 801b 	strb.w	r8, [sp, #27]
 80186cc:	f002 f88c 	bl	801a7e8 <uxr_deserialize_submessage_header>
 80186d0:	a818      	add	r0, sp, #96	; 0x60
 80186d2:	f7fc f897 	bl	8014804 <ucdr_buffer_remaining>
 80186d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80186da:	4298      	cmp	r0, r3
 80186dc:	d3d2      	bcc.n	8018684 <uxr_ping_agent_attempts+0xfc>
 80186de:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80186e2:	2b06      	cmp	r3, #6
 80186e4:	d1ce      	bne.n	8018684 <uxr_ping_agent_attempts+0xfc>
 80186e6:	a918      	add	r1, sp, #96	; 0x60
 80186e8:	a820      	add	r0, sp, #128	; 0x80
 80186ea:	f88d 8135 	strb.w	r8, [sp, #309]	; 0x135
 80186ee:	f000 fac9 	bl	8018c84 <read_submessage_info>
 80186f2:	e7c7      	b.n	8018684 <uxr_ping_agent_attempts+0xfc>
 80186f4:	08022254 	.word	0x08022254

080186f8 <uxr_buffer_request_data>:
 80186f8:	b530      	push	{r4, r5, lr}
 80186fa:	b095      	sub	sp, #84	; 0x54
 80186fc:	4604      	mov	r4, r0
 80186fe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8018700:	9303      	str	r3, [sp, #12]
 8018702:	2d00      	cmp	r5, #0
 8018704:	f88d 301c 	strb.w	r3, [sp, #28]
 8018708:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801870c:	f04f 0200 	mov.w	r2, #0
 8018710:	bf14      	ite	ne
 8018712:	2101      	movne	r1, #1
 8018714:	4611      	moveq	r1, r2
 8018716:	f88d 201d 	strb.w	r2, [sp, #29]
 801871a:	f88d 201e 	strb.w	r2, [sp, #30]
 801871e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018722:	d021      	beq.n	8018768 <uxr_buffer_request_data+0x70>
 8018724:	686b      	ldr	r3, [r5, #4]
 8018726:	2210      	movs	r2, #16
 8018728:	6829      	ldr	r1, [r5, #0]
 801872a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801872e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8018732:	2308      	movs	r3, #8
 8018734:	2100      	movs	r1, #0
 8018736:	4620      	mov	r0, r4
 8018738:	e9cd 3100 	strd	r3, r1, [sp]
 801873c:	ab0c      	add	r3, sp, #48	; 0x30
 801873e:	9905      	ldr	r1, [sp, #20]
 8018740:	f001 f860 	bl	8019804 <uxr_prepare_stream_to_write_submessage>
 8018744:	b918      	cbnz	r0, 801874e <uxr_buffer_request_data+0x56>
 8018746:	4604      	mov	r4, r0
 8018748:	4620      	mov	r0, r4
 801874a:	b015      	add	sp, #84	; 0x54
 801874c:	bd30      	pop	{r4, r5, pc}
 801874e:	9904      	ldr	r1, [sp, #16]
 8018750:	aa06      	add	r2, sp, #24
 8018752:	4620      	mov	r0, r4
 8018754:	f001 f992 	bl	8019a7c <uxr_init_base_object_request>
 8018758:	4604      	mov	r4, r0
 801875a:	a906      	add	r1, sp, #24
 801875c:	a80c      	add	r0, sp, #48	; 0x30
 801875e:	f002 fec3 	bl	801b4e8 <uxr_serialize_READ_DATA_Payload>
 8018762:	4620      	mov	r0, r4
 8018764:	b015      	add	sp, #84	; 0x54
 8018766:	bd30      	pop	{r4, r5, pc}
 8018768:	2208      	movs	r2, #8
 801876a:	e7e2      	b.n	8018732 <uxr_buffer_request_data+0x3a>

0801876c <uxr_buffer_cancel_data>:
 801876c:	b510      	push	{r4, lr}
 801876e:	2300      	movs	r3, #0
 8018770:	b094      	sub	sp, #80	; 0x50
 8018772:	4604      	mov	r4, r0
 8018774:	9205      	str	r2, [sp, #20]
 8018776:	9301      	str	r3, [sp, #4]
 8018778:	f8ad 301c 	strh.w	r3, [sp, #28]
 801877c:	f88d 301e 	strb.w	r3, [sp, #30]
 8018780:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8018784:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8018788:	2308      	movs	r3, #8
 801878a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801878e:	2201      	movs	r2, #1
 8018790:	9300      	str	r3, [sp, #0]
 8018792:	ab0c      	add	r3, sp, #48	; 0x30
 8018794:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8018798:	2210      	movs	r2, #16
 801879a:	f001 f833 	bl	8019804 <uxr_prepare_stream_to_write_submessage>
 801879e:	b918      	cbnz	r0, 80187a8 <uxr_buffer_cancel_data+0x3c>
 80187a0:	4604      	mov	r4, r0
 80187a2:	4620      	mov	r0, r4
 80187a4:	b014      	add	sp, #80	; 0x50
 80187a6:	bd10      	pop	{r4, pc}
 80187a8:	9905      	ldr	r1, [sp, #20]
 80187aa:	aa06      	add	r2, sp, #24
 80187ac:	4620      	mov	r0, r4
 80187ae:	f001 f965 	bl	8019a7c <uxr_init_base_object_request>
 80187b2:	4604      	mov	r4, r0
 80187b4:	a906      	add	r1, sp, #24
 80187b6:	a80c      	add	r0, sp, #48	; 0x30
 80187b8:	f002 fe96 	bl	801b4e8 <uxr_serialize_READ_DATA_Payload>
 80187bc:	4620      	mov	r0, r4
 80187be:	b014      	add	sp, #80	; 0x50
 80187c0:	bd10      	pop	{r4, pc}
 80187c2:	bf00      	nop

080187c4 <read_submessage_format>:
 80187c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187c8:	b095      	sub	sp, #84	; 0x54
 80187ca:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 80187ce:	b113      	cbz	r3, 80187d6 <read_submessage_format+0x12>
 80187d0:	b015      	add	sp, #84	; 0x54
 80187d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187d6:	4606      	mov	r6, r0
 80187d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80187da:	460c      	mov	r4, r1
 80187dc:	4615      	mov	r5, r2
 80187de:	9004      	str	r0, [sp, #16]
 80187e0:	4699      	mov	r9, r3
 80187e2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80187e4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80187e8:	9005      	str	r0, [sp, #20]
 80187ea:	a80c      	add	r0, sp, #48	; 0x30
 80187ec:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80187f0:	1a52      	subs	r2, r2, r1
 80187f2:	f7fb ffd5 	bl	80147a0 <ucdr_init_buffer>
 80187f6:	a80c      	add	r0, sp, #48	; 0x30
 80187f8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80187fc:	f7fb ffa4 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 8018800:	69e2      	ldr	r2, [r4, #28]
 8018802:	b19a      	cbz	r2, 801882c <read_submessage_format+0x68>
 8018804:	f1b8 0f07 	cmp.w	r8, #7
 8018808:	f882 9014 	strb.w	r9, [r2, #20]
 801880c:	d040      	beq.n	8018890 <read_submessage_format+0xcc>
 801880e:	f1b8 0f08 	cmp.w	r8, #8
 8018812:	d02e      	beq.n	8018872 <read_submessage_format+0xae>
 8018814:	f1b8 0f06 	cmp.w	r8, #6
 8018818:	d011      	beq.n	801883e <read_submessage_format+0x7a>
 801881a:	2301      	movs	r3, #1
 801881c:	7513      	strb	r3, [r2, #20]
 801881e:	4629      	mov	r1, r5
 8018820:	4620      	mov	r0, r4
 8018822:	f7fc f811 	bl	8014848 <ucdr_advance_buffer>
 8018826:	b015      	add	sp, #84	; 0x54
 8018828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801882c:	f1b8 0f07 	cmp.w	r8, #7
 8018830:	d02e      	beq.n	8018890 <read_submessage_format+0xcc>
 8018832:	f1b8 0f08 	cmp.w	r8, #8
 8018836:	d01c      	beq.n	8018872 <read_submessage_format+0xae>
 8018838:	f1b8 0f06 	cmp.w	r8, #6
 801883c:	d1ef      	bne.n	801881e <read_submessage_format+0x5a>
 801883e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8018842:	f1b8 0f00 	cmp.w	r8, #0
 8018846:	d011      	beq.n	801886c <read_submessage_format+0xa8>
 8018848:	ab0c      	add	r3, sp, #48	; 0x30
 801884a:	9501      	str	r5, [sp, #4]
 801884c:	463a      	mov	r2, r7
 801884e:	4630      	mov	r0, r6
 8018850:	9300      	str	r3, [sp, #0]
 8018852:	2306      	movs	r3, #6
 8018854:	f88d 3016 	strb.w	r3, [sp, #22]
 8018858:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801885c:	9302      	str	r3, [sp, #8]
 801885e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018862:	47c0      	blx	r8
 8018864:	2301      	movs	r3, #1
 8018866:	69e2      	ldr	r2, [r4, #28]
 8018868:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801886c:	2a00      	cmp	r2, #0
 801886e:	d1d4      	bne.n	801881a <read_submessage_format+0x56>
 8018870:	e7d5      	b.n	801881e <read_submessage_format+0x5a>
 8018872:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8018876:	2b00      	cmp	r3, #0
 8018878:	d0f8      	beq.n	801886c <read_submessage_format+0xa8>
 801887a:	a80c      	add	r0, sp, #48	; 0x30
 801887c:	a906      	add	r1, sp, #24
 801887e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018882:	f002 fefd 	bl	801b680 <uxr_deserialize_SampleIdentity>
 8018886:	b9a0      	cbnz	r0, 80188b2 <read_submessage_format+0xee>
 8018888:	69e2      	ldr	r2, [r4, #28]
 801888a:	2a00      	cmp	r2, #0
 801888c:	d1c5      	bne.n	801881a <read_submessage_format+0x56>
 801888e:	e7c6      	b.n	801881e <read_submessage_format+0x5a>
 8018890:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8018894:	b13b      	cbz	r3, 80188a6 <read_submessage_format+0xe2>
 8018896:	a906      	add	r1, sp, #24
 8018898:	a80c      	add	r0, sp, #48	; 0x30
 801889a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801889e:	f002 fbad 	bl	801affc <uxr_deserialize_BaseObjectRequest>
 80188a2:	bb60      	cbnz	r0, 80188fe <read_submessage_format+0x13a>
 80188a4:	69e2      	ldr	r2, [r4, #28]
 80188a6:	68a3      	ldr	r3, [r4, #8]
 80188a8:	442b      	add	r3, r5
 80188aa:	60a3      	str	r3, [r4, #8]
 80188ac:	2a00      	cmp	r2, #0
 80188ae:	d1b4      	bne.n	801881a <read_submessage_format+0x56>
 80188b0:	e7b5      	b.n	801881e <read_submessage_format+0x5a>
 80188b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188b4:	a80c      	add	r0, sp, #48	; 0x30
 80188b6:	eba8 0803 	sub.w	r8, r8, r3
 80188ba:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80188be:	44a8      	add	r8, r5
 80188c0:	1a52      	subs	r2, r2, r1
 80188c2:	f7fb ff6d 	bl	80147a0 <ucdr_init_buffer>
 80188c6:	a80c      	add	r0, sp, #48	; 0x30
 80188c8:	fa1f f888 	uxth.w	r8, r8
 80188cc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80188d0:	f7fb ff3a 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 80188d4:	ab0c      	add	r3, sp, #48	; 0x30
 80188d6:	2108      	movs	r1, #8
 80188d8:	f8cd 8004 	str.w	r8, [sp, #4]
 80188dc:	9300      	str	r3, [sp, #0]
 80188de:	463a      	mov	r2, r7
 80188e0:	f88d 1016 	strb.w	r1, [sp, #22]
 80188e4:	ab06      	add	r3, sp, #24
 80188e6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 80188ea:	4630      	mov	r0, r6
 80188ec:	9102      	str	r1, [sp, #8]
 80188ee:	9905      	ldr	r1, [sp, #20]
 80188f0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 80188f4:	47b8      	blx	r7
 80188f6:	2301      	movs	r3, #1
 80188f8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80188fc:	e7c4      	b.n	8018888 <read_submessage_format+0xc4>
 80188fe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8018902:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018904:	a80c      	add	r0, sp, #48	; 0x30
 8018906:	1a52      	subs	r2, r2, r1
 8018908:	eba8 0803 	sub.w	r8, r8, r3
 801890c:	f7fb ff48 	bl	80147a0 <ucdr_init_buffer>
 8018910:	a80c      	add	r0, sp, #48	; 0x30
 8018912:	44a8      	add	r8, r5
 8018914:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018918:	f7fb ff16 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 801891c:	ab0c      	add	r3, sp, #48	; 0x30
 801891e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018922:	fa1f f888 	uxth.w	r8, r8
 8018926:	9300      	str	r3, [sp, #0]
 8018928:	463a      	mov	r2, r7
 801892a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801892e:	4630      	mov	r0, r6
 8018930:	f8cd 8004 	str.w	r8, [sp, #4]
 8018934:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018938:	2107      	movs	r1, #7
 801893a:	f88d 1016 	strb.w	r1, [sp, #22]
 801893e:	b29b      	uxth	r3, r3
 8018940:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8018944:	9102      	str	r1, [sp, #8]
 8018946:	9905      	ldr	r1, [sp, #20]
 8018948:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801894c:	47b8      	blx	r7
 801894e:	2301      	movs	r3, #1
 8018950:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018954:	e7a6      	b.n	80188a4 <read_submessage_format+0xe0>
 8018956:	bf00      	nop

08018958 <on_get_fragmentation_info>:
 8018958:	b500      	push	{lr}
 801895a:	b08b      	sub	sp, #44	; 0x2c
 801895c:	4601      	mov	r1, r0
 801895e:	2204      	movs	r2, #4
 8018960:	a802      	add	r0, sp, #8
 8018962:	f7fb ff1d 	bl	80147a0 <ucdr_init_buffer>
 8018966:	f10d 0305 	add.w	r3, sp, #5
 801896a:	f10d 0206 	add.w	r2, sp, #6
 801896e:	a901      	add	r1, sp, #4
 8018970:	a802      	add	r0, sp, #8
 8018972:	f001 fe89 	bl	801a688 <uxr_read_submessage_header>
 8018976:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801897a:	2b0d      	cmp	r3, #13
 801897c:	d003      	beq.n	8018986 <on_get_fragmentation_info+0x2e>
 801897e:	2000      	movs	r0, #0
 8018980:	b00b      	add	sp, #44	; 0x2c
 8018982:	f85d fb04 	ldr.w	pc, [sp], #4
 8018986:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801898a:	f013 0f02 	tst.w	r3, #2
 801898e:	bf14      	ite	ne
 8018990:	2002      	movne	r0, #2
 8018992:	2001      	moveq	r0, #1
 8018994:	b00b      	add	sp, #44	; 0x2c
 8018996:	f85d fb04 	ldr.w	pc, [sp], #4
 801899a:	bf00      	nop

0801899c <read_submessage_get_info>:
 801899c:	b570      	push	{r4, r5, r6, lr}
 801899e:	2500      	movs	r5, #0
 80189a0:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80189a4:	460e      	mov	r6, r1
 80189a6:	4604      	mov	r4, r0
 80189a8:	f44f 7224 	mov.w	r2, #656	; 0x290
 80189ac:	4629      	mov	r1, r5
 80189ae:	a810      	add	r0, sp, #64	; 0x40
 80189b0:	9503      	str	r5, [sp, #12]
 80189b2:	9504      	str	r5, [sp, #16]
 80189b4:	f008 fb28 	bl	8021008 <memset>
 80189b8:	a903      	add	r1, sp, #12
 80189ba:	4630      	mov	r0, r6
 80189bc:	f002 fcd4 	bl	801b368 <uxr_deserialize_GET_INFO_Payload>
 80189c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80189c4:	4620      	mov	r0, r4
 80189c6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80189ca:	f001 f84f 	bl	8019a6c <uxr_session_header_offset>
 80189ce:	462b      	mov	r3, r5
 80189d0:	220c      	movs	r2, #12
 80189d2:	a905      	add	r1, sp, #20
 80189d4:	9000      	str	r0, [sp, #0]
 80189d6:	a808      	add	r0, sp, #32
 80189d8:	f7fb fed0 	bl	801477c <ucdr_init_buffer_origin_offset>
 80189dc:	a910      	add	r1, sp, #64	; 0x40
 80189de:	a808      	add	r0, sp, #32
 80189e0:	f002 fd36 	bl	801b450 <uxr_serialize_INFO_Payload>
 80189e4:	9b08      	ldr	r3, [sp, #32]
 80189e6:	462a      	mov	r2, r5
 80189e8:	4629      	mov	r1, r5
 80189ea:	4620      	mov	r0, r4
 80189ec:	f000 ffea 	bl	80199c4 <uxr_stamp_session_header>
 80189f0:	a808      	add	r0, sp, #32
 80189f2:	f7fb ff03 	bl	80147fc <ucdr_buffer_length>
 80189f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80189f8:	4602      	mov	r2, r0
 80189fa:	a905      	add	r1, sp, #20
 80189fc:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018a00:	47a0      	blx	r4
 8018a02:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8018a06:	bd70      	pop	{r4, r5, r6, pc}

08018a08 <write_submessage_acknack.isra.0>:
 8018a08:	b570      	push	{r4, r5, r6, lr}
 8018a0a:	b092      	sub	sp, #72	; 0x48
 8018a0c:	4605      	mov	r5, r0
 8018a0e:	460e      	mov	r6, r1
 8018a10:	4614      	mov	r4, r2
 8018a12:	f001 f82b 	bl	8019a6c <uxr_session_header_offset>
 8018a16:	a905      	add	r1, sp, #20
 8018a18:	9000      	str	r0, [sp, #0]
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	a80a      	add	r0, sp, #40	; 0x28
 8018a1e:	2211      	movs	r2, #17
 8018a20:	f7fb feac 	bl	801477c <ucdr_init_buffer_origin_offset>
 8018a24:	2218      	movs	r2, #24
 8018a26:	2300      	movs	r3, #0
 8018a28:	210a      	movs	r1, #10
 8018a2a:	fb02 5404 	mla	r4, r2, r4, r5
 8018a2e:	a80a      	add	r0, sp, #40	; 0x28
 8018a30:	2205      	movs	r2, #5
 8018a32:	3450      	adds	r4, #80	; 0x50
 8018a34:	f001 fe0e 	bl	801a654 <uxr_buffer_submessage_header>
 8018a38:	a903      	add	r1, sp, #12
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f006 fe24 	bl	801f688 <uxr_compute_acknack>
 8018a40:	ba40      	rev16	r0, r0
 8018a42:	a903      	add	r1, sp, #12
 8018a44:	f88d 6010 	strb.w	r6, [sp, #16]
 8018a48:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018a4c:	a80a      	add	r0, sp, #40	; 0x28
 8018a4e:	f002 fd71 	bl	801b534 <uxr_serialize_ACKNACK_Payload>
 8018a52:	2200      	movs	r2, #0
 8018a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a56:	4628      	mov	r0, r5
 8018a58:	4611      	mov	r1, r2
 8018a5a:	f000 ffb3 	bl	80199c4 <uxr_stamp_session_header>
 8018a5e:	a80a      	add	r0, sp, #40	; 0x28
 8018a60:	f7fb fecc 	bl	80147fc <ucdr_buffer_length>
 8018a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8018a66:	4602      	mov	r2, r0
 8018a68:	a905      	add	r1, sp, #20
 8018a6a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018a6e:	47a0      	blx	r4
 8018a70:	b012      	add	sp, #72	; 0x48
 8018a72:	bd70      	pop	{r4, r5, r6, pc}
 8018a74:	0000      	movs	r0, r0
	...

08018a78 <uxr_init_session>:
 8018a78:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8018ab0 <uxr_init_session+0x38>
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	b510      	push	{r4, lr}
 8018a80:	4604      	mov	r4, r0
 8018a82:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8018a86:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8018a8a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8018a8e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8018a92:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8018a96:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8018a9a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8018a9e:	2181      	movs	r1, #129	; 0x81
 8018aa0:	f000 fef4 	bl	801988c <uxr_init_session_info>
 8018aa4:	f104 0008 	add.w	r0, r4, #8
 8018aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aac:	f001 bcee 	b.w	801a48c <uxr_init_stream_storage>
	...

08018ab8 <uxr_set_status_callback>:
 8018ab8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8018abc:	4770      	bx	lr
 8018abe:	bf00      	nop

08018ac0 <uxr_set_topic_callback>:
 8018ac0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop

08018ac8 <uxr_set_request_callback>:
 8018ac8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8018acc:	4770      	bx	lr
 8018ace:	bf00      	nop

08018ad0 <uxr_set_reply_callback>:
 8018ad0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8018ad4:	4770      	bx	lr
 8018ad6:	bf00      	nop

08018ad8 <uxr_create_output_best_effort_stream>:
 8018ad8:	b510      	push	{r4, lr}
 8018ada:	4604      	mov	r4, r0
 8018adc:	b084      	sub	sp, #16
 8018ade:	e9cd 2100 	strd	r2, r1, [sp]
 8018ae2:	f000 ffc3 	bl	8019a6c <uxr_session_header_offset>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	f104 0008 	add.w	r0, r4, #8
 8018aec:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018af0:	b004      	add	sp, #16
 8018af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018af6:	f001 bd0f 	b.w	801a518 <uxr_add_output_best_effort_buffer>
 8018afa:	bf00      	nop

08018afc <uxr_create_output_reliable_stream>:
 8018afc:	b530      	push	{r4, r5, lr}
 8018afe:	b089      	sub	sp, #36	; 0x24
 8018b00:	4604      	mov	r4, r0
 8018b02:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018b06:	9303      	str	r3, [sp, #12]
 8018b08:	f000 ffb0 	bl	8019a6c <uxr_session_header_offset>
 8018b0c:	4605      	mov	r5, r0
 8018b0e:	9905      	ldr	r1, [sp, #20]
 8018b10:	f104 0008 	add.w	r0, r4, #8
 8018b14:	9500      	str	r5, [sp, #0]
 8018b16:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018b1a:	f001 fd11 	bl	801a540 <uxr_add_output_reliable_buffer>
 8018b1e:	2200      	movs	r2, #0
 8018b20:	fa5f fc80 	uxtb.w	ip, r0
 8018b24:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018b28:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018b2c:	0e03      	lsrs	r3, r0, #24
 8018b2e:	f36c 0207 	bfi	r2, ip, #0, #8
 8018b32:	f364 220f 	bfi	r2, r4, #8, #8
 8018b36:	f361 4217 	bfi	r2, r1, #16, #8
 8018b3a:	f363 621f 	bfi	r2, r3, #24, #8
 8018b3e:	4610      	mov	r0, r2
 8018b40:	b009      	add	sp, #36	; 0x24
 8018b42:	bd30      	pop	{r4, r5, pc}

08018b44 <uxr_create_input_best_effort_stream>:
 8018b44:	b082      	sub	sp, #8
 8018b46:	3008      	adds	r0, #8
 8018b48:	b002      	add	sp, #8
 8018b4a:	f001 bd13 	b.w	801a574 <uxr_add_input_best_effort_buffer>
 8018b4e:	bf00      	nop

08018b50 <uxr_create_input_reliable_stream>:
 8018b50:	b510      	push	{r4, lr}
 8018b52:	4c0c      	ldr	r4, [pc, #48]	; (8018b84 <uxr_create_input_reliable_stream+0x34>)
 8018b54:	b084      	sub	sp, #16
 8018b56:	3008      	adds	r0, #8
 8018b58:	9400      	str	r4, [sp, #0]
 8018b5a:	f001 fd21 	bl	801a5a0 <uxr_add_input_reliable_buffer>
 8018b5e:	2200      	movs	r2, #0
 8018b60:	fa5f fe80 	uxtb.w	lr, r0
 8018b64:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018b68:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018b6c:	0e03      	lsrs	r3, r0, #24
 8018b6e:	f36e 0207 	bfi	r2, lr, #0, #8
 8018b72:	f36c 220f 	bfi	r2, ip, #8, #8
 8018b76:	f361 4217 	bfi	r2, r1, #16, #8
 8018b7a:	f363 621f 	bfi	r2, r3, #24, #8
 8018b7e:	4610      	mov	r0, r2
 8018b80:	b004      	add	sp, #16
 8018b82:	bd10      	pop	{r4, pc}
 8018b84:	08018959 	.word	0x08018959

08018b88 <uxr_epoch_nanos>:
 8018b88:	b510      	push	{r4, lr}
 8018b8a:	4604      	mov	r4, r0
 8018b8c:	f001 fdc4 	bl	801a718 <uxr_nanos>
 8018b90:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8018b94:	1ac0      	subs	r0, r0, r3
 8018b96:	eb61 0102 	sbc.w	r1, r1, r2
 8018b9a:	bd10      	pop	{r4, pc}

08018b9c <uxr_flash_output_streams>:
 8018b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ba0:	7e03      	ldrb	r3, [r0, #24]
 8018ba2:	b084      	sub	sp, #16
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	b1fb      	cbz	r3, 8018be8 <uxr_flash_output_streams+0x4c>
 8018ba8:	f04f 0900 	mov.w	r9, #0
 8018bac:	f10d 0802 	add.w	r8, sp, #2
 8018bb0:	af03      	add	r7, sp, #12
 8018bb2:	ae02      	add	r6, sp, #8
 8018bb4:	4648      	mov	r0, r9
 8018bb6:	2201      	movs	r2, #1
 8018bb8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8018bbc:	4611      	mov	r1, r2
 8018bbe:	3508      	adds	r5, #8
 8018bc0:	f001 fc0a 	bl	801a3d8 <uxr_stream_id>
 8018bc4:	4684      	mov	ip, r0
 8018bc6:	4643      	mov	r3, r8
 8018bc8:	463a      	mov	r2, r7
 8018bca:	4631      	mov	r1, r6
 8018bcc:	4628      	mov	r0, r5
 8018bce:	f8cd c004 	str.w	ip, [sp, #4]
 8018bd2:	f006 fde3 	bl	801f79c <uxr_prepare_best_effort_buffer_to_send>
 8018bd6:	2800      	cmp	r0, #0
 8018bd8:	d13d      	bne.n	8018c56 <uxr_flash_output_streams+0xba>
 8018bda:	f109 0901 	add.w	r9, r9, #1
 8018bde:	7e23      	ldrb	r3, [r4, #24]
 8018be0:	fa5f f089 	uxtb.w	r0, r9
 8018be4:	4283      	cmp	r3, r0
 8018be6:	d8e6      	bhi.n	8018bb6 <uxr_flash_output_streams+0x1a>
 8018be8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018bec:	b383      	cbz	r3, 8018c50 <uxr_flash_output_streams+0xb4>
 8018bee:	f04f 0900 	mov.w	r9, #0
 8018bf2:	f10d 0802 	add.w	r8, sp, #2
 8018bf6:	af03      	add	r7, sp, #12
 8018bf8:	ae02      	add	r6, sp, #8
 8018bfa:	4648      	mov	r0, r9
 8018bfc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018c00:	2201      	movs	r2, #1
 8018c02:	2102      	movs	r1, #2
 8018c04:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018c08:	f001 fbe6 	bl	801a3d8 <uxr_stream_id>
 8018c0c:	9001      	str	r0, [sp, #4]
 8018c0e:	3520      	adds	r5, #32
 8018c10:	e00c      	b.n	8018c2c <uxr_flash_output_streams+0x90>
 8018c12:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018c16:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018c1a:	9b02      	ldr	r3, [sp, #8]
 8018c1c:	f000 fed2 	bl	80199c4 <uxr_stamp_session_header>
 8018c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c22:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018c26:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8018c2a:	47d0      	blx	sl
 8018c2c:	4643      	mov	r3, r8
 8018c2e:	463a      	mov	r2, r7
 8018c30:	4631      	mov	r1, r6
 8018c32:	4628      	mov	r0, r5
 8018c34:	f006 ffd4 	bl	801fbe0 <uxr_prepare_next_reliable_buffer_to_send>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d1e8      	bne.n	8018c12 <uxr_flash_output_streams+0x76>
 8018c40:	f109 0901 	add.w	r9, r9, #1
 8018c44:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018c48:	fa5f f089 	uxtb.w	r0, r9
 8018c4c:	4283      	cmp	r3, r0
 8018c4e:	d8d5      	bhi.n	8018bfc <uxr_flash_output_streams+0x60>
 8018c50:	b004      	add	sp, #16
 8018c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c56:	9b02      	ldr	r3, [sp, #8]
 8018c58:	4620      	mov	r0, r4
 8018c5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018c5e:	f109 0901 	add.w	r9, r9, #1
 8018c62:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018c66:	f000 fead 	bl	80199c4 <uxr_stamp_session_header>
 8018c6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c6c:	9a03      	ldr	r2, [sp, #12]
 8018c6e:	685d      	ldr	r5, [r3, #4]
 8018c70:	6818      	ldr	r0, [r3, #0]
 8018c72:	9902      	ldr	r1, [sp, #8]
 8018c74:	47a8      	blx	r5
 8018c76:	7e23      	ldrb	r3, [r4, #24]
 8018c78:	fa5f f089 	uxtb.w	r0, r9
 8018c7c:	4283      	cmp	r3, r0
 8018c7e:	d89a      	bhi.n	8018bb6 <uxr_flash_output_streams+0x1a>
 8018c80:	e7b2      	b.n	8018be8 <uxr_flash_output_streams+0x4c>
 8018c82:	bf00      	nop

08018c84 <read_submessage_info>:
 8018c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c88:	460d      	mov	r5, r1
 8018c8a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8018c8e:	4606      	mov	r6, r0
 8018c90:	4669      	mov	r1, sp
 8018c92:	4628      	mov	r0, r5
 8018c94:	f002 fa64 	bl	801b160 <uxr_deserialize_BaseObjectReply>
 8018c98:	4604      	mov	r4, r0
 8018c9a:	a902      	add	r1, sp, #8
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8018ca2:	f7fa f9cd 	bl	8013040 <ucdr_deserialize_bool>
 8018ca6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018caa:	4004      	ands	r4, r0
 8018cac:	b2e4      	uxtb	r4, r4
 8018cae:	b95b      	cbnz	r3, 8018cc8 <read_submessage_info+0x44>
 8018cb0:	a987      	add	r1, sp, #540	; 0x21c
 8018cb2:	4628      	mov	r0, r5
 8018cb4:	f7fa f9c4 	bl	8013040 <ucdr_deserialize_bool>
 8018cb8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8018cbc:	4680      	mov	r8, r0
 8018cbe:	b94b      	cbnz	r3, 8018cd4 <read_submessage_info+0x50>
 8018cc0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8018cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc8:	a903      	add	r1, sp, #12
 8018cca:	4628      	mov	r0, r5
 8018ccc:	f002 f8f4 	bl	801aeb8 <uxr_deserialize_ObjectVariant>
 8018cd0:	4004      	ands	r4, r0
 8018cd2:	e7ed      	b.n	8018cb0 <read_submessage_info+0x2c>
 8018cd4:	a988      	add	r1, sp, #544	; 0x220
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f7fa f9e0 	bl	801309c <ucdr_deserialize_uint8_t>
 8018cdc:	ea14 0f08 	tst.w	r4, r8
 8018ce0:	d0ee      	beq.n	8018cc0 <read_submessage_info+0x3c>
 8018ce2:	2800      	cmp	r0, #0
 8018ce4:	d0ec      	beq.n	8018cc0 <read_submessage_info+0x3c>
 8018ce6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8018cea:	2b0d      	cmp	r3, #13
 8018cec:	d1e8      	bne.n	8018cc0 <read_submessage_info+0x3c>
 8018cee:	a98a      	add	r1, sp, #552	; 0x228
 8018cf0:	4628      	mov	r0, r5
 8018cf2:	f7fa ff79 	bl	8013be8 <ucdr_deserialize_int16_t>
 8018cf6:	b138      	cbz	r0, 8018d08 <read_submessage_info+0x84>
 8018cf8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	dd06      	ble.n	8018d0e <read_submessage_info+0x8a>
 8018d00:	2f00      	cmp	r7, #0
 8018d02:	bf14      	ite	ne
 8018d04:	2001      	movne	r0, #1
 8018d06:	2002      	moveq	r0, #2
 8018d08:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8018d0c:	e7d8      	b.n	8018cc0 <read_submessage_info+0x3c>
 8018d0e:	2000      	movs	r0, #0
 8018d10:	e7fa      	b.n	8018d08 <read_submessage_info+0x84>
 8018d12:	bf00      	nop

08018d14 <read_submessage_list>:
 8018d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d18:	4604      	mov	r4, r0
 8018d1a:	b097      	sub	sp, #92	; 0x5c
 8018d1c:	460d      	mov	r5, r1
 8018d1e:	4ec1      	ldr	r6, [pc, #772]	; (8019024 <read_submessage_list+0x310>)
 8018d20:	9209      	str	r2, [sp, #36]	; 0x24
 8018d22:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018d26:	aa0c      	add	r2, sp, #48	; 0x30
 8018d28:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8018d2c:	4628      	mov	r0, r5
 8018d2e:	f001 fcab 	bl	801a688 <uxr_read_submessage_header>
 8018d32:	2800      	cmp	r0, #0
 8018d34:	f000 8142 	beq.w	8018fbc <read_submessage_list+0x2a8>
 8018d38:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8018d3c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018d40:	3b02      	subs	r3, #2
 8018d42:	2b0d      	cmp	r3, #13
 8018d44:	d8ed      	bhi.n	8018d22 <read_submessage_list+0xe>
 8018d46:	a101      	add	r1, pc, #4	; (adr r1, 8018d4c <read_submessage_list+0x38>)
 8018d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d4c:	08018fb3 	.word	0x08018fb3
 8018d50:	08018d23 	.word	0x08018d23
 8018d54:	08018fa3 	.word	0x08018fa3
 8018d58:	08018f41 	.word	0x08018f41
 8018d5c:	08018f37 	.word	0x08018f37
 8018d60:	08018d23 	.word	0x08018d23
 8018d64:	08018d23 	.word	0x08018d23
 8018d68:	08018e8d 	.word	0x08018e8d
 8018d6c:	08018e1f 	.word	0x08018e1f
 8018d70:	08018ddf 	.word	0x08018ddf
 8018d74:	08018d23 	.word	0x08018d23
 8018d78:	08018d23 	.word	0x08018d23
 8018d7c:	08018d23 	.word	0x08018d23
 8018d80:	08018d85 	.word	0x08018d85
 8018d84:	a910      	add	r1, sp, #64	; 0x40
 8018d86:	4628      	mov	r0, r5
 8018d88:	f002 fc28 	bl	801b5dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8018d8c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8018d90:	f1b8 0f00 	cmp.w	r8, #0
 8018d94:	f000 811a 	beq.w	8018fcc <read_submessage_list+0x2b8>
 8018d98:	f001 fcbe 	bl	801a718 <uxr_nanos>
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	460b      	mov	r3, r1
 8018da0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8018da4:	2100      	movs	r1, #0
 8018da6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018da8:	9006      	str	r0, [sp, #24]
 8018daa:	468c      	mov	ip, r1
 8018dac:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018dae:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018db2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018db4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018db8:	468c      	mov	ip, r1
 8018dba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018dbc:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018dc0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8018dc4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8018dc8:	fbc7 0106 	smlal	r0, r1, r7, r6
 8018dcc:	e9cd 0100 	strd	r0, r1, [sp]
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	47c0      	blx	r8
 8018dd4:	f04f 0301 	mov.w	r3, #1
 8018dd8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8018ddc:	e7a1      	b.n	8018d22 <read_submessage_list+0xe>
 8018dde:	a910      	add	r1, sp, #64	; 0x40
 8018de0:	4628      	mov	r0, r5
 8018de2:	f002 fbe7 	bl	801b5b4 <uxr_deserialize_HEARTBEAT_Payload>
 8018de6:	2100      	movs	r1, #0
 8018de8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018dec:	f001 fb22 	bl	801a434 <uxr_stream_id_from_raw>
 8018df0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018df4:	900f      	str	r0, [sp, #60]	; 0x3c
 8018df6:	f104 0008 	add.w	r0, r4, #8
 8018dfa:	4641      	mov	r1, r8
 8018dfc:	f001 fc08 	bl	801a610 <uxr_get_input_reliable_stream>
 8018e00:	2800      	cmp	r0, #0
 8018e02:	d08e      	beq.n	8018d22 <read_submessage_list+0xe>
 8018e04:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8018e08:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018e0c:	f006 fc30 	bl	801f670 <uxr_process_heartbeat>
 8018e10:	4642      	mov	r2, r8
 8018e12:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8018e16:	4620      	mov	r0, r4
 8018e18:	f7ff fdf6 	bl	8018a08 <write_submessage_acknack.isra.0>
 8018e1c:	e781      	b.n	8018d22 <read_submessage_list+0xe>
 8018e1e:	a910      	add	r1, sp, #64	; 0x40
 8018e20:	4628      	mov	r0, r5
 8018e22:	f002 fb9f 	bl	801b564 <uxr_deserialize_ACKNACK_Payload>
 8018e26:	2100      	movs	r1, #0
 8018e28:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018e2c:	f001 fb02 	bl	801a434 <uxr_stream_id_from_raw>
 8018e30:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8018e34:	900d      	str	r0, [sp, #52]	; 0x34
 8018e36:	f104 0008 	add.w	r0, r4, #8
 8018e3a:	f001 fbd3 	bl	801a5e4 <uxr_get_output_reliable_stream>
 8018e3e:	4680      	mov	r8, r0
 8018e40:	2800      	cmp	r0, #0
 8018e42:	f43f af6e 	beq.w	8018d22 <read_submessage_list+0xe>
 8018e46:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8018e4a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018e4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8018e52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018e56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018e5a:	b289      	uxth	r1, r1
 8018e5c:	f006 ff68 	bl	801fd30 <uxr_process_acknack>
 8018e60:	4640      	mov	r0, r8
 8018e62:	f006 ff29 	bl	801fcb8 <uxr_begin_output_nack_buffer_it>
 8018e66:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018e6a:	e005      	b.n	8018e78 <read_submessage_list+0x164>
 8018e6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018e6e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8018e72:	e9d3 0900 	ldrd	r0, r9, [r3]
 8018e76:	47c8      	blx	r9
 8018e78:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8018e7c:	aa0f      	add	r2, sp, #60	; 0x3c
 8018e7e:	4651      	mov	r1, sl
 8018e80:	4640      	mov	r0, r8
 8018e82:	f006 ff1b 	bl	801fcbc <uxr_next_reliable_nack_buffer_to_send>
 8018e86:	2800      	cmp	r0, #0
 8018e88:	d1f0      	bne.n	8018e6c <read_submessage_list+0x158>
 8018e8a:	e74a      	b.n	8018d22 <read_submessage_list+0xe>
 8018e8c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018e90:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018e94:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8018e98:	4628      	mov	r0, r5
 8018e9a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8018e9e:	4651      	mov	r1, sl
 8018ea0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8018ea4:	f1a8 0804 	sub.w	r8, r8, #4
 8018ea8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8018eac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8018eb0:	fa1f f888 	uxth.w	r8, r8
 8018eb4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018eb8:	f009 090e 	and.w	r9, r9, #14
 8018ebc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8018ec0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8018ec4:	f002 f89a 	bl	801affc <uxr_deserialize_BaseObjectRequest>
 8018ec8:	4650      	mov	r0, sl
 8018eca:	a90f      	add	r1, sp, #60	; 0x3c
 8018ecc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018ed0:	f000 fdf4 	bl	8019abc <uxr_parse_base_object_request>
 8018ed4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018ed6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8018eda:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8018ede:	9110      	str	r1, [sp, #64]	; 0x40
 8018ee0:	f1bb 0f00 	cmp.w	fp, #0
 8018ee4:	d006      	beq.n	8018ef4 <read_submessage_list+0x1e0>
 8018ee6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018eea:	4652      	mov	r2, sl
 8018eec:	4620      	mov	r0, r4
 8018eee:	9300      	str	r3, [sp, #0]
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	47d8      	blx	fp
 8018ef4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018ef6:	b182      	cbz	r2, 8018f1a <read_submessage_list+0x206>
 8018ef8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8018efa:	f04f 0c00 	mov.w	ip, #0
 8018efe:	3902      	subs	r1, #2
 8018f00:	e003      	b.n	8018f0a <read_submessage_list+0x1f6>
 8018f02:	f10c 0c01 	add.w	ip, ip, #1
 8018f06:	4594      	cmp	ip, r2
 8018f08:	d007      	beq.n	8018f1a <read_submessage_list+0x206>
 8018f0a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8018f0e:	4553      	cmp	r3, sl
 8018f10:	d1f7      	bne.n	8018f02 <read_submessage_list+0x1ee>
 8018f12:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018f14:	2200      	movs	r2, #0
 8018f16:	f803 200c 	strb.w	r2, [r3, ip]
 8018f1a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018f1e:	464b      	mov	r3, r9
 8018f20:	4642      	mov	r2, r8
 8018f22:	4620      	mov	r0, r4
 8018f24:	9102      	str	r1, [sp, #8]
 8018f26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018f28:	9101      	str	r1, [sp, #4]
 8018f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018f2c:	9100      	str	r1, [sp, #0]
 8018f2e:	4629      	mov	r1, r5
 8018f30:	f7ff fc48 	bl	80187c4 <read_submessage_format>
 8018f34:	e6f5      	b.n	8018d22 <read_submessage_list+0xe>
 8018f36:	4629      	mov	r1, r5
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f7ff fea3 	bl	8018c84 <read_submessage_info>
 8018f3e:	e6f0      	b.n	8018d22 <read_submessage_list+0xe>
 8018f40:	2a00      	cmp	r2, #0
 8018f42:	d03e      	beq.n	8018fc2 <read_submessage_list+0x2ae>
 8018f44:	a910      	add	r1, sp, #64	; 0x40
 8018f46:	4628      	mov	r0, r5
 8018f48:	f002 fa64 	bl	801b414 <uxr_deserialize_STATUS_Payload>
 8018f4c:	a90e      	add	r1, sp, #56	; 0x38
 8018f4e:	aa0d      	add	r2, sp, #52	; 0x34
 8018f50:	a810      	add	r0, sp, #64	; 0x40
 8018f52:	f000 fdb3 	bl	8019abc <uxr_parse_base_object_request>
 8018f56:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018f58:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8018f5c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018f60:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8018f64:	910f      	str	r1, [sp, #60]	; 0x3c
 8018f66:	f1ba 0f00 	cmp.w	sl, #0
 8018f6a:	d006      	beq.n	8018f7a <read_submessage_list+0x266>
 8018f6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018f70:	4642      	mov	r2, r8
 8018f72:	4620      	mov	r0, r4
 8018f74:	9300      	str	r3, [sp, #0]
 8018f76:	464b      	mov	r3, r9
 8018f78:	47d0      	blx	sl
 8018f7a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018f7c:	2a00      	cmp	r2, #0
 8018f7e:	f43f aed0 	beq.w	8018d22 <read_submessage_list+0xe>
 8018f82:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8018f84:	2100      	movs	r1, #0
 8018f86:	3802      	subs	r0, #2
 8018f88:	e003      	b.n	8018f92 <read_submessage_list+0x27e>
 8018f8a:	3101      	adds	r1, #1
 8018f8c:	4291      	cmp	r1, r2
 8018f8e:	f43f aec8 	beq.w	8018d22 <read_submessage_list+0xe>
 8018f92:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8018f96:	4543      	cmp	r3, r8
 8018f98:	d1f7      	bne.n	8018f8a <read_submessage_list+0x276>
 8018f9a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018f9c:	f803 9001 	strb.w	r9, [r3, r1]
 8018fa0:	e6bf      	b.n	8018d22 <read_submessage_list+0xe>
 8018fa2:	2a00      	cmp	r2, #0
 8018fa4:	f47f aebd 	bne.w	8018d22 <read_submessage_list+0xe>
 8018fa8:	4629      	mov	r1, r5
 8018faa:	4620      	mov	r0, r4
 8018fac:	f000 fcca 	bl	8019944 <uxr_read_create_session_status>
 8018fb0:	e6b7      	b.n	8018d22 <read_submessage_list+0xe>
 8018fb2:	4629      	mov	r1, r5
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	f7ff fcf1 	bl	801899c <read_submessage_get_info>
 8018fba:	e6b2      	b.n	8018d22 <read_submessage_list+0xe>
 8018fbc:	b017      	add	sp, #92	; 0x5c
 8018fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fc2:	4629      	mov	r1, r5
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	f000 fccb 	bl	8019960 <uxr_read_delete_session_status>
 8018fca:	e6aa      	b.n	8018d22 <read_submessage_list+0xe>
 8018fcc:	f001 fba4 	bl	801a718 <uxr_nanos>
 8018fd0:	4642      	mov	r2, r8
 8018fd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fd6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018fda:	1818      	adds	r0, r3, r0
 8018fdc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018fde:	eb42 0101 	adc.w	r1, r2, r1
 8018fe2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018fe4:	4642      	mov	r2, r8
 8018fe6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018fea:	469c      	mov	ip, r3
 8018fec:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8018ff0:	fbc3 7806 	smlal	r7, r8, r3, r6
 8018ff4:	4643      	mov	r3, r8
 8018ff6:	eb1c 0c07 	adds.w	ip, ip, r7
 8018ffa:	eb42 0203 	adc.w	r2, r2, r3
 8018ffe:	ebb0 030c 	subs.w	r3, r0, ip
 8019002:	eb61 0202 	sbc.w	r2, r1, r2
 8019006:	2a00      	cmp	r2, #0
 8019008:	db08      	blt.n	801901c <read_submessage_list+0x308>
 801900a:	085b      	lsrs	r3, r3, #1
 801900c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8019010:	1052      	asrs	r2, r2, #1
 8019012:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8019016:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801901a:	e6db      	b.n	8018dd4 <read_submessage_list+0xc0>
 801901c:	3301      	adds	r3, #1
 801901e:	f142 0200 	adc.w	r2, r2, #0
 8019022:	e7f2      	b.n	801900a <read_submessage_list+0x2f6>
 8019024:	3b9aca00 	.word	0x3b9aca00

08019028 <listen_message_reliably>:
 8019028:	1e0b      	subs	r3, r1, #0
 801902a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801902e:	bfb8      	it	lt
 8019030:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8019034:	b09d      	sub	sp, #116	; 0x74
 8019036:	4680      	mov	r8, r0
 8019038:	9305      	str	r3, [sp, #20]
 801903a:	f001 fb51 	bl	801a6e0 <uxr_millis>
 801903e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8019042:	4681      	mov	r9, r0
 8019044:	2a00      	cmp	r2, #0
 8019046:	f000 809a 	beq.w	801917e <listen_message_reliably+0x156>
 801904a:	2600      	movs	r6, #0
 801904c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019050:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8019054:	460f      	mov	r7, r1
 8019056:	4630      	mov	r0, r6
 8019058:	9303      	str	r3, [sp, #12]
 801905a:	e00e      	b.n	801907a <listen_message_reliably+0x52>
 801905c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801905e:	3601      	adds	r6, #1
 8019060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019062:	455a      	cmp	r2, fp
 8019064:	9903      	ldr	r1, [sp, #12]
 8019066:	b2f0      	uxtb	r0, r6
 8019068:	eb73 0101 	sbcs.w	r1, r3, r1
 801906c:	da01      	bge.n	8019072 <listen_message_reliably+0x4a>
 801906e:	4693      	mov	fp, r2
 8019070:	9303      	str	r3, [sp, #12]
 8019072:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8019076:	4283      	cmp	r3, r0
 8019078:	d95f      	bls.n	801913a <listen_message_reliably+0x112>
 801907a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801907e:	2102      	movs	r1, #2
 8019080:	2201      	movs	r2, #1
 8019082:	00e4      	lsls	r4, r4, #3
 8019084:	f001 f9a8 	bl	801a3d8 <uxr_stream_id>
 8019088:	4601      	mov	r1, r0
 801908a:	f104 0520 	add.w	r5, r4, #32
 801908e:	463b      	mov	r3, r7
 8019090:	464a      	mov	r2, r9
 8019092:	9109      	str	r1, [sp, #36]	; 0x24
 8019094:	4445      	add	r5, r8
 8019096:	4628      	mov	r0, r5
 8019098:	f006 fde2 	bl	801fc60 <uxr_update_output_stream_heartbeat_timestamp>
 801909c:	eb08 0304 	add.w	r3, r8, r4
 80190a0:	2800      	cmp	r0, #0
 80190a2:	d0db      	beq.n	801905c <listen_message_reliably+0x34>
 80190a4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80190a8:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80190ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80190b0:	4640      	mov	r0, r8
 80190b2:	3501      	adds	r5, #1
 80190b4:	4444      	add	r4, r8
 80190b6:	9304      	str	r3, [sp, #16]
 80190b8:	f000 fcd8 	bl	8019a6c <uxr_session_header_offset>
 80190bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80190c0:	2300      	movs	r3, #0
 80190c2:	2211      	movs	r2, #17
 80190c4:	a90c      	add	r1, sp, #48	; 0x30
 80190c6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80190ca:	9000      	str	r0, [sp, #0]
 80190cc:	4650      	mov	r0, sl
 80190ce:	3601      	adds	r6, #1
 80190d0:	f7fb fb54 	bl	801477c <ucdr_init_buffer_origin_offset>
 80190d4:	2300      	movs	r3, #0
 80190d6:	2205      	movs	r2, #5
 80190d8:	210b      	movs	r1, #11
 80190da:	4650      	mov	r0, sl
 80190dc:	f001 faba 	bl	801a654 <uxr_buffer_submessage_header>
 80190e0:	2101      	movs	r1, #1
 80190e2:	8968      	ldrh	r0, [r5, #10]
 80190e4:	f006 fe5e 	bl	801fda4 <uxr_seq_num_add>
 80190e8:	892b      	ldrh	r3, [r5, #8]
 80190ea:	4602      	mov	r2, r0
 80190ec:	a90a      	add	r1, sp, #40	; 0x28
 80190ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80190f2:	4650      	mov	r0, sl
 80190f4:	9b04      	ldr	r3, [sp, #16]
 80190f6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80190fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80190fe:	f002 fa45 	bl	801b58c <uxr_serialize_HEARTBEAT_Payload>
 8019102:	2200      	movs	r2, #0
 8019104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019106:	4640      	mov	r0, r8
 8019108:	4611      	mov	r1, r2
 801910a:	f000 fc5b 	bl	80199c4 <uxr_stamp_session_header>
 801910e:	4650      	mov	r0, sl
 8019110:	f7fb fb74 	bl	80147fc <ucdr_buffer_length>
 8019114:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8019118:	4602      	mov	r2, r0
 801911a:	a90c      	add	r1, sp, #48	; 0x30
 801911c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8019120:	47a8      	blx	r5
 8019122:	9903      	ldr	r1, [sp, #12]
 8019124:	b2f0      	uxtb	r0, r6
 8019126:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801912a:	455a      	cmp	r2, fp
 801912c:	eb73 0101 	sbcs.w	r1, r3, r1
 8019130:	db9d      	blt.n	801906e <listen_message_reliably+0x46>
 8019132:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8019136:	4283      	cmp	r3, r0
 8019138:	d89f      	bhi.n	801907a <listen_message_reliably+0x52>
 801913a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801913e:	9a03      	ldr	r2, [sp, #12]
 8019140:	429a      	cmp	r2, r3
 8019142:	bf08      	it	eq
 8019144:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8019148:	d019      	beq.n	801917e <listen_message_reliably+0x156>
 801914a:	ebab 0309 	sub.w	r3, fp, r9
 801914e:	2b00      	cmp	r3, #0
 8019150:	9d05      	ldr	r5, [sp, #20]
 8019152:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8019156:	aa08      	add	r2, sp, #32
 8019158:	bf08      	it	eq
 801915a:	2301      	moveq	r3, #1
 801915c:	a907      	add	r1, sp, #28
 801915e:	6884      	ldr	r4, [r0, #8]
 8019160:	429d      	cmp	r5, r3
 8019162:	6800      	ldr	r0, [r0, #0]
 8019164:	bfa8      	it	ge
 8019166:	461d      	movge	r5, r3
 8019168:	462b      	mov	r3, r5
 801916a:	47a0      	blx	r4
 801916c:	b948      	cbnz	r0, 8019182 <listen_message_reliably+0x15a>
 801916e:	9b05      	ldr	r3, [sp, #20]
 8019170:	1b5b      	subs	r3, r3, r5
 8019172:	2b00      	cmp	r3, #0
 8019174:	9305      	str	r3, [sp, #20]
 8019176:	f73f af60 	bgt.w	801903a <listen_message_reliably+0x12>
 801917a:	4604      	mov	r4, r0
 801917c:	e012      	b.n	80191a4 <listen_message_reliably+0x17c>
 801917e:	9b05      	ldr	r3, [sp, #20]
 8019180:	e7e5      	b.n	801914e <listen_message_reliably+0x126>
 8019182:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8019186:	4604      	mov	r4, r0
 8019188:	2500      	movs	r5, #0
 801918a:	a80c      	add	r0, sp, #48	; 0x30
 801918c:	f7fb fb08 	bl	80147a0 <ucdr_init_buffer>
 8019190:	f10d 031a 	add.w	r3, sp, #26
 8019194:	aa06      	add	r2, sp, #24
 8019196:	a90c      	add	r1, sp, #48	; 0x30
 8019198:	4640      	mov	r0, r8
 801919a:	f88d 5018 	strb.w	r5, [sp, #24]
 801919e:	f000 fc25 	bl	80199ec <uxr_read_session_header>
 80191a2:	b918      	cbnz	r0, 80191ac <listen_message_reliably+0x184>
 80191a4:	4620      	mov	r0, r4
 80191a6:	b01d      	add	sp, #116	; 0x74
 80191a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ac:	4629      	mov	r1, r5
 80191ae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80191b2:	f001 f93f 	bl	801a434 <uxr_stream_id_from_raw>
 80191b6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80191ba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80191be:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80191c2:	2e01      	cmp	r6, #1
 80191c4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80191c8:	d04b      	beq.n	8019262 <listen_message_reliably+0x23a>
 80191ca:	2e02      	cmp	r6, #2
 80191cc:	d00f      	beq.n	80191ee <listen_message_reliably+0x1c6>
 80191ce:	2e00      	cmp	r6, #0
 80191d0:	d1e8      	bne.n	80191a4 <listen_message_reliably+0x17c>
 80191d2:	4631      	mov	r1, r6
 80191d4:	4630      	mov	r0, r6
 80191d6:	f001 f92d 	bl	801a434 <uxr_stream_id_from_raw>
 80191da:	4602      	mov	r2, r0
 80191dc:	a90c      	add	r1, sp, #48	; 0x30
 80191de:	4640      	mov	r0, r8
 80191e0:	920a      	str	r2, [sp, #40]	; 0x28
 80191e2:	f7ff fd97 	bl	8018d14 <read_submessage_list>
 80191e6:	4620      	mov	r0, r4
 80191e8:	b01d      	add	sp, #116	; 0x74
 80191ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ee:	4629      	mov	r1, r5
 80191f0:	f108 0008 	add.w	r0, r8, #8
 80191f4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80191f8:	f001 fa0a 	bl	801a610 <uxr_get_input_reliable_stream>
 80191fc:	4607      	mov	r7, r0
 80191fe:	b338      	cbz	r0, 8019250 <listen_message_reliably+0x228>
 8019200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019202:	a80c      	add	r0, sp, #48	; 0x30
 8019204:	9203      	str	r2, [sp, #12]
 8019206:	f7fb fafd 	bl	8014804 <ucdr_buffer_remaining>
 801920a:	4603      	mov	r3, r0
 801920c:	f10d 0019 	add.w	r0, sp, #25
 8019210:	9a03      	ldr	r2, [sp, #12]
 8019212:	4651      	mov	r1, sl
 8019214:	9000      	str	r0, [sp, #0]
 8019216:	4638      	mov	r0, r7
 8019218:	f006 f92e 	bl	801f478 <uxr_receive_reliable_message>
 801921c:	b1c0      	cbz	r0, 8019250 <listen_message_reliably+0x228>
 801921e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019222:	b393      	cbz	r3, 801928a <listen_message_reliably+0x262>
 8019224:	ae14      	add	r6, sp, #80	; 0x50
 8019226:	f04f 0a02 	mov.w	sl, #2
 801922a:	e00a      	b.n	8019242 <listen_message_reliably+0x21a>
 801922c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8019230:	4631      	mov	r1, r6
 8019232:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8019236:	4640      	mov	r0, r8
 8019238:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801923c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801923e:	f7ff fd69 	bl	8018d14 <read_submessage_list>
 8019242:	2204      	movs	r2, #4
 8019244:	4631      	mov	r1, r6
 8019246:	4638      	mov	r0, r7
 8019248:	f006 f998 	bl	801f57c <uxr_next_input_reliable_buffer_available>
 801924c:	2800      	cmp	r0, #0
 801924e:	d1ed      	bne.n	801922c <listen_message_reliably+0x204>
 8019250:	4640      	mov	r0, r8
 8019252:	462a      	mov	r2, r5
 8019254:	4649      	mov	r1, r9
 8019256:	f7ff fbd7 	bl	8018a08 <write_submessage_acknack.isra.0>
 801925a:	4620      	mov	r0, r4
 801925c:	b01d      	add	sp, #116	; 0x74
 801925e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019262:	4629      	mov	r1, r5
 8019264:	f108 0008 	add.w	r0, r8, #8
 8019268:	f001 f9c8 	bl	801a5fc <uxr_get_input_best_effort_stream>
 801926c:	2800      	cmp	r0, #0
 801926e:	d099      	beq.n	80191a4 <listen_message_reliably+0x17c>
 8019270:	4651      	mov	r1, sl
 8019272:	f006 f877 	bl	801f364 <uxr_receive_best_effort_message>
 8019276:	2800      	cmp	r0, #0
 8019278:	d094      	beq.n	80191a4 <listen_message_reliably+0x17c>
 801927a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801927e:	a90c      	add	r1, sp, #48	; 0x30
 8019280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019282:	4640      	mov	r0, r8
 8019284:	f7ff fd46 	bl	8018d14 <read_submessage_list>
 8019288:	e78c      	b.n	80191a4 <listen_message_reliably+0x17c>
 801928a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801928e:	a90c      	add	r1, sp, #48	; 0x30
 8019290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019292:	4640      	mov	r0, r8
 8019294:	f7ff fd3e 	bl	8018d14 <read_submessage_list>
 8019298:	e7c4      	b.n	8019224 <listen_message_reliably+0x1fc>
 801929a:	bf00      	nop

0801929c <uxr_run_session_timeout>:
 801929c:	b570      	push	{r4, r5, r6, lr}
 801929e:	4604      	mov	r4, r0
 80192a0:	460d      	mov	r5, r1
 80192a2:	f001 fa1d 	bl	801a6e0 <uxr_millis>
 80192a6:	4606      	mov	r6, r0
 80192a8:	4620      	mov	r0, r4
 80192aa:	f7ff fc77 	bl	8018b9c <uxr_flash_output_streams>
 80192ae:	4629      	mov	r1, r5
 80192b0:	4620      	mov	r0, r4
 80192b2:	f7ff feb9 	bl	8019028 <listen_message_reliably>
 80192b6:	f001 fa13 	bl	801a6e0 <uxr_millis>
 80192ba:	1b83      	subs	r3, r0, r6
 80192bc:	1ae9      	subs	r1, r5, r3
 80192be:	2900      	cmp	r1, #0
 80192c0:	dcf6      	bgt.n	80192b0 <uxr_run_session_timeout+0x14>
 80192c2:	f104 0008 	add.w	r0, r4, #8
 80192c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192ca:	f001 b9ad 	b.w	801a628 <uxr_output_streams_confirmed>
 80192ce:	bf00      	nop

080192d0 <uxr_run_session_until_data>:
 80192d0:	b570      	push	{r4, r5, r6, lr}
 80192d2:	4604      	mov	r4, r0
 80192d4:	460d      	mov	r5, r1
 80192d6:	f001 fa03 	bl	801a6e0 <uxr_millis>
 80192da:	4606      	mov	r6, r0
 80192dc:	4620      	mov	r0, r4
 80192de:	f7ff fc5d 	bl	8018b9c <uxr_flash_output_streams>
 80192e2:	2300      	movs	r3, #0
 80192e4:	4629      	mov	r1, r5
 80192e6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80192ea:	e005      	b.n	80192f8 <uxr_run_session_until_data+0x28>
 80192ec:	f001 f9f8 	bl	801a6e0 <uxr_millis>
 80192f0:	1b83      	subs	r3, r0, r6
 80192f2:	1ae9      	subs	r1, r5, r3
 80192f4:	2900      	cmp	r1, #0
 80192f6:	dd07      	ble.n	8019308 <uxr_run_session_until_data+0x38>
 80192f8:	4620      	mov	r0, r4
 80192fa:	f7ff fe95 	bl	8019028 <listen_message_reliably>
 80192fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8019302:	2800      	cmp	r0, #0
 8019304:	d0f2      	beq.n	80192ec <uxr_run_session_until_data+0x1c>
 8019306:	bd70      	pop	{r4, r5, r6, pc}
 8019308:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801930c:	bd70      	pop	{r4, r5, r6, pc}
 801930e:	bf00      	nop

08019310 <uxr_run_session_until_confirm_delivery>:
 8019310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019314:	4606      	mov	r6, r0
 8019316:	460d      	mov	r5, r1
 8019318:	f001 f9e2 	bl	801a6e0 <uxr_millis>
 801931c:	4607      	mov	r7, r0
 801931e:	4630      	mov	r0, r6
 8019320:	f106 0808 	add.w	r8, r6, #8
 8019324:	f7ff fc3a 	bl	8018b9c <uxr_flash_output_streams>
 8019328:	2d00      	cmp	r5, #0
 801932a:	db10      	blt.n	801934e <uxr_run_session_until_confirm_delivery+0x3e>
 801932c:	462c      	mov	r4, r5
 801932e:	e006      	b.n	801933e <uxr_run_session_until_confirm_delivery+0x2e>
 8019330:	f7ff fe7a 	bl	8019028 <listen_message_reliably>
 8019334:	f001 f9d4 	bl	801a6e0 <uxr_millis>
 8019338:	1bc3      	subs	r3, r0, r7
 801933a:	1aec      	subs	r4, r5, r3
 801933c:	d407      	bmi.n	801934e <uxr_run_session_until_confirm_delivery+0x3e>
 801933e:	4640      	mov	r0, r8
 8019340:	f001 f972 	bl	801a628 <uxr_output_streams_confirmed>
 8019344:	4603      	mov	r3, r0
 8019346:	4621      	mov	r1, r4
 8019348:	4630      	mov	r0, r6
 801934a:	2b00      	cmp	r3, #0
 801934c:	d0f0      	beq.n	8019330 <uxr_run_session_until_confirm_delivery+0x20>
 801934e:	4640      	mov	r0, r8
 8019350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019354:	f001 b968 	b.w	801a628 <uxr_output_streams_confirmed>

08019358 <uxr_run_session_until_all_status>:
 8019358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8019360:	4606      	mov	r6, r0
 8019362:	4688      	mov	r8, r1
 8019364:	4692      	mov	sl, r2
 8019366:	461f      	mov	r7, r3
 8019368:	f7ff fc18 	bl	8018b9c <uxr_flash_output_streams>
 801936c:	f1bb 0f00 	cmp.w	fp, #0
 8019370:	d004      	beq.n	801937c <uxr_run_session_until_all_status+0x24>
 8019372:	465a      	mov	r2, fp
 8019374:	21ff      	movs	r1, #255	; 0xff
 8019376:	4638      	mov	r0, r7
 8019378:	f007 fe46 	bl	8021008 <memset>
 801937c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8019380:	1e7d      	subs	r5, r7, #1
 8019382:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8019386:	f001 f9ab 	bl	801a6e0 <uxr_millis>
 801938a:	4641      	mov	r1, r8
 801938c:	4681      	mov	r9, r0
 801938e:	4630      	mov	r0, r6
 8019390:	f7ff fe4a 	bl	8019028 <listen_message_reliably>
 8019394:	f001 f9a4 	bl	801a6e0 <uxr_millis>
 8019398:	eba0 0009 	sub.w	r0, r0, r9
 801939c:	eba8 0100 	sub.w	r1, r8, r0
 80193a0:	f1bb 0f00 	cmp.w	fp, #0
 80193a4:	d029      	beq.n	80193fa <uxr_run_session_until_all_status+0xa2>
 80193a6:	46ae      	mov	lr, r5
 80193a8:	f04f 0c00 	mov.w	ip, #0
 80193ac:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80193b0:	2cff      	cmp	r4, #255	; 0xff
 80193b2:	d015      	beq.n	80193e0 <uxr_run_session_until_all_status+0x88>
 80193b4:	f10c 0c01 	add.w	ip, ip, #1
 80193b8:	45e3      	cmp	fp, ip
 80193ba:	d8f7      	bhi.n	80193ac <uxr_run_session_until_all_status+0x54>
 80193bc:	2300      	movs	r3, #0
 80193be:	67f3      	str	r3, [r6, #124]	; 0x7c
 80193c0:	e000      	b.n	80193c4 <uxr_run_session_until_all_status+0x6c>
 80193c2:	b158      	cbz	r0, 80193dc <uxr_run_session_until_all_status+0x84>
 80193c4:	462b      	mov	r3, r5
 80193c6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80193ca:	3302      	adds	r3, #2
 80193cc:	2801      	cmp	r0, #1
 80193ce:	eba3 0307 	sub.w	r3, r3, r7
 80193d2:	bf8c      	ite	hi
 80193d4:	2000      	movhi	r0, #0
 80193d6:	2001      	movls	r0, #1
 80193d8:	459b      	cmp	fp, r3
 80193da:	d8f2      	bhi.n	80193c2 <uxr_run_session_until_all_status+0x6a>
 80193dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193e0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80193e4:	f10c 0c01 	add.w	ip, ip, #1
 80193e8:	45dc      	cmp	ip, fp
 80193ea:	d201      	bcs.n	80193f0 <uxr_run_session_until_all_status+0x98>
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d0dd      	beq.n	80193ac <uxr_run_session_until_all_status+0x54>
 80193f0:	2900      	cmp	r1, #0
 80193f2:	dde3      	ble.n	80193bc <uxr_run_session_until_all_status+0x64>
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d1ca      	bne.n	801938e <uxr_run_session_until_all_status+0x36>
 80193f8:	e7e0      	b.n	80193bc <uxr_run_session_until_all_status+0x64>
 80193fa:	2001      	movs	r0, #1
 80193fc:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8019400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019404 <uxr_run_session_until_pong>:
 8019404:	b570      	push	{r4, r5, r6, lr}
 8019406:	4604      	mov	r4, r0
 8019408:	460d      	mov	r5, r1
 801940a:	f001 f969 	bl	801a6e0 <uxr_millis>
 801940e:	4606      	mov	r6, r0
 8019410:	4620      	mov	r0, r4
 8019412:	f7ff fbc3 	bl	8018b9c <uxr_flash_output_streams>
 8019416:	2300      	movs	r3, #0
 8019418:	4629      	mov	r1, r5
 801941a:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 801941e:	e005      	b.n	801942c <uxr_run_session_until_pong+0x28>
 8019420:	f001 f95e 	bl	801a6e0 <uxr_millis>
 8019424:	1b83      	subs	r3, r0, r6
 8019426:	1ae9      	subs	r1, r5, r3
 8019428:	2900      	cmp	r1, #0
 801942a:	dd0c      	ble.n	8019446 <uxr_run_session_until_pong+0x42>
 801942c:	4620      	mov	r0, r4
 801942e:	f7ff fdfb 	bl	8019028 <listen_message_reliably>
 8019432:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 8019436:	2800      	cmp	r0, #0
 8019438:	d0f2      	beq.n	8019420 <uxr_run_session_until_pong+0x1c>
 801943a:	f1a0 0001 	sub.w	r0, r0, #1
 801943e:	fab0 f080 	clz	r0, r0
 8019442:	0940      	lsrs	r0, r0, #5
 8019444:	bd70      	pop	{r4, r5, r6, pc}
 8019446:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 801944a:	f1a0 0001 	sub.w	r0, r0, #1
 801944e:	fab0 f080 	clz	r0, r0
 8019452:	0940      	lsrs	r0, r0, #5
 8019454:	bd70      	pop	{r4, r5, r6, pc}
 8019456:	bf00      	nop

08019458 <wait_session_status>:
 8019458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801945c:	4604      	mov	r4, r0
 801945e:	b09d      	sub	sp, #116	; 0x74
 8019460:	20ff      	movs	r0, #255	; 0xff
 8019462:	9303      	str	r3, [sp, #12]
 8019464:	7160      	strb	r0, [r4, #5]
 8019466:	2b00      	cmp	r3, #0
 8019468:	f000 80b6 	beq.w	80195d8 <wait_session_status+0x180>
 801946c:	4689      	mov	r9, r1
 801946e:	4692      	mov	sl, r2
 8019470:	f04f 0b00 	mov.w	fp, #0
 8019474:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019476:	4652      	mov	r2, sl
 8019478:	4649      	mov	r1, r9
 801947a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801947e:	47a8      	blx	r5
 8019480:	f001 f92e 	bl	801a6e0 <uxr_millis>
 8019484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019488:	4605      	mov	r5, r0
 801948a:	e009      	b.n	80194a0 <wait_session_status+0x48>
 801948c:	f001 f928 	bl	801a6e0 <uxr_millis>
 8019490:	1b40      	subs	r0, r0, r5
 8019492:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8019496:	2b00      	cmp	r3, #0
 8019498:	dd40      	ble.n	801951c <wait_session_status+0xc4>
 801949a:	7960      	ldrb	r0, [r4, #5]
 801949c:	28ff      	cmp	r0, #255	; 0xff
 801949e:	d145      	bne.n	801952c <wait_session_status+0xd4>
 80194a0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80194a2:	a908      	add	r1, sp, #32
 80194a4:	6896      	ldr	r6, [r2, #8]
 80194a6:	6810      	ldr	r0, [r2, #0]
 80194a8:	aa09      	add	r2, sp, #36	; 0x24
 80194aa:	47b0      	blx	r6
 80194ac:	2800      	cmp	r0, #0
 80194ae:	d0ed      	beq.n	801948c <wait_session_status+0x34>
 80194b0:	a80c      	add	r0, sp, #48	; 0x30
 80194b2:	2600      	movs	r6, #0
 80194b4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80194b8:	f7fb f972 	bl	80147a0 <ucdr_init_buffer>
 80194bc:	f10d 031e 	add.w	r3, sp, #30
 80194c0:	aa07      	add	r2, sp, #28
 80194c2:	a90c      	add	r1, sp, #48	; 0x30
 80194c4:	4620      	mov	r0, r4
 80194c6:	f88d 601c 	strb.w	r6, [sp, #28]
 80194ca:	f000 fa8f 	bl	80199ec <uxr_read_session_header>
 80194ce:	2800      	cmp	r0, #0
 80194d0:	d0dc      	beq.n	801948c <wait_session_status+0x34>
 80194d2:	4631      	mov	r1, r6
 80194d4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80194d8:	f000 ffac 	bl	801a434 <uxr_stream_id_from_raw>
 80194dc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80194e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80194e4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80194e8:	2f01      	cmp	r7, #1
 80194ea:	9302      	str	r3, [sp, #8]
 80194ec:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80194f0:	d05c      	beq.n	80195ac <wait_session_status+0x154>
 80194f2:	2f02      	cmp	r7, #2
 80194f4:	d020      	beq.n	8019538 <wait_session_status+0xe0>
 80194f6:	2f00      	cmp	r7, #0
 80194f8:	d1c8      	bne.n	801948c <wait_session_status+0x34>
 80194fa:	4639      	mov	r1, r7
 80194fc:	4638      	mov	r0, r7
 80194fe:	f000 ff99 	bl	801a434 <uxr_stream_id_from_raw>
 8019502:	a90c      	add	r1, sp, #48	; 0x30
 8019504:	4602      	mov	r2, r0
 8019506:	900b      	str	r0, [sp, #44]	; 0x2c
 8019508:	4620      	mov	r0, r4
 801950a:	f7ff fc03 	bl	8018d14 <read_submessage_list>
 801950e:	f001 f8e7 	bl	801a6e0 <uxr_millis>
 8019512:	1b40      	subs	r0, r0, r5
 8019514:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8019518:	2b00      	cmp	r3, #0
 801951a:	dcbe      	bgt.n	801949a <wait_session_status+0x42>
 801951c:	f10b 0b01 	add.w	fp, fp, #1
 8019520:	9b03      	ldr	r3, [sp, #12]
 8019522:	7960      	ldrb	r0, [r4, #5]
 8019524:	455b      	cmp	r3, fp
 8019526:	d001      	beq.n	801952c <wait_session_status+0xd4>
 8019528:	28ff      	cmp	r0, #255	; 0xff
 801952a:	d0a3      	beq.n	8019474 <wait_session_status+0x1c>
 801952c:	38ff      	subs	r0, #255	; 0xff
 801952e:	bf18      	it	ne
 8019530:	2001      	movne	r0, #1
 8019532:	b01d      	add	sp, #116	; 0x74
 8019534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019538:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801953c:	4631      	mov	r1, r6
 801953e:	f104 0008 	add.w	r0, r4, #8
 8019542:	9304      	str	r3, [sp, #16]
 8019544:	f001 f864 	bl	801a610 <uxr_get_input_reliable_stream>
 8019548:	4680      	mov	r8, r0
 801954a:	b348      	cbz	r0, 80195a0 <wait_session_status+0x148>
 801954c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801954e:	a80c      	add	r0, sp, #48	; 0x30
 8019550:	9205      	str	r2, [sp, #20]
 8019552:	f7fb f957 	bl	8014804 <ucdr_buffer_remaining>
 8019556:	4603      	mov	r3, r0
 8019558:	f10d 001d 	add.w	r0, sp, #29
 801955c:	9a05      	ldr	r2, [sp, #20]
 801955e:	9000      	str	r0, [sp, #0]
 8019560:	4640      	mov	r0, r8
 8019562:	9902      	ldr	r1, [sp, #8]
 8019564:	f005 ff88 	bl	801f478 <uxr_receive_reliable_message>
 8019568:	b1d0      	cbz	r0, 80195a0 <wait_session_status+0x148>
 801956a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d03a      	beq.n	80195e8 <wait_session_status+0x190>
 8019572:	9f04      	ldr	r7, [sp, #16]
 8019574:	e00a      	b.n	801958c <wait_session_status+0x134>
 8019576:	f04f 0302 	mov.w	r3, #2
 801957a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801957e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8019582:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8019586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019588:	f7ff fbc4 	bl	8018d14 <read_submessage_list>
 801958c:	a914      	add	r1, sp, #80	; 0x50
 801958e:	2204      	movs	r2, #4
 8019590:	4640      	mov	r0, r8
 8019592:	f005 fff3 	bl	801f57c <uxr_next_input_reliable_buffer_available>
 8019596:	4603      	mov	r3, r0
 8019598:	a914      	add	r1, sp, #80	; 0x50
 801959a:	4620      	mov	r0, r4
 801959c:	2b00      	cmp	r3, #0
 801959e:	d1ea      	bne.n	8019576 <wait_session_status+0x11e>
 80195a0:	4632      	mov	r2, r6
 80195a2:	9904      	ldr	r1, [sp, #16]
 80195a4:	4620      	mov	r0, r4
 80195a6:	f7ff fa2f 	bl	8018a08 <write_submessage_acknack.isra.0>
 80195aa:	e76f      	b.n	801948c <wait_session_status+0x34>
 80195ac:	4631      	mov	r1, r6
 80195ae:	f104 0008 	add.w	r0, r4, #8
 80195b2:	f001 f823 	bl	801a5fc <uxr_get_input_best_effort_stream>
 80195b6:	2800      	cmp	r0, #0
 80195b8:	f43f af68 	beq.w	801948c <wait_session_status+0x34>
 80195bc:	9902      	ldr	r1, [sp, #8]
 80195be:	f005 fed1 	bl	801f364 <uxr_receive_best_effort_message>
 80195c2:	2800      	cmp	r0, #0
 80195c4:	f43f af62 	beq.w	801948c <wait_session_status+0x34>
 80195c8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80195cc:	a90c      	add	r1, sp, #48	; 0x30
 80195ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80195d0:	4620      	mov	r0, r4
 80195d2:	f7ff fb9f 	bl	8018d14 <read_submessage_list>
 80195d6:	e759      	b.n	801948c <wait_session_status+0x34>
 80195d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80195da:	e9d3 0400 	ldrd	r0, r4, [r3]
 80195de:	47a0      	blx	r4
 80195e0:	2001      	movs	r0, #1
 80195e2:	b01d      	add	sp, #116	; 0x74
 80195e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195e8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80195ec:	a90c      	add	r1, sp, #48	; 0x30
 80195ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80195f0:	4620      	mov	r0, r4
 80195f2:	f7ff fb8f 	bl	8018d14 <read_submessage_list>
 80195f6:	e7bc      	b.n	8019572 <wait_session_status+0x11a>

080195f8 <uxr_delete_session_retries>:
 80195f8:	b530      	push	{r4, r5, lr}
 80195fa:	b08f      	sub	sp, #60	; 0x3c
 80195fc:	4604      	mov	r4, r0
 80195fe:	460d      	mov	r5, r1
 8019600:	f000 fa34 	bl	8019a6c <uxr_session_header_offset>
 8019604:	2300      	movs	r3, #0
 8019606:	2210      	movs	r2, #16
 8019608:	a902      	add	r1, sp, #8
 801960a:	9000      	str	r0, [sp, #0]
 801960c:	a806      	add	r0, sp, #24
 801960e:	f7fb f8b5 	bl	801477c <ucdr_init_buffer_origin_offset>
 8019612:	a906      	add	r1, sp, #24
 8019614:	4620      	mov	r0, r4
 8019616:	f000 f979 	bl	801990c <uxr_buffer_delete_session>
 801961a:	2200      	movs	r2, #0
 801961c:	9b06      	ldr	r3, [sp, #24]
 801961e:	4620      	mov	r0, r4
 8019620:	4611      	mov	r1, r2
 8019622:	f000 f9cf 	bl	80199c4 <uxr_stamp_session_header>
 8019626:	a806      	add	r0, sp, #24
 8019628:	f7fb f8e8 	bl	80147fc <ucdr_buffer_length>
 801962c:	462b      	mov	r3, r5
 801962e:	4602      	mov	r2, r0
 8019630:	a902      	add	r1, sp, #8
 8019632:	4620      	mov	r0, r4
 8019634:	f7ff ff10 	bl	8019458 <wait_session_status>
 8019638:	b118      	cbz	r0, 8019642 <uxr_delete_session_retries+0x4a>
 801963a:	7960      	ldrb	r0, [r4, #5]
 801963c:	fab0 f080 	clz	r0, r0
 8019640:	0940      	lsrs	r0, r0, #5
 8019642:	b00f      	add	sp, #60	; 0x3c
 8019644:	bd30      	pop	{r4, r5, pc}
 8019646:	bf00      	nop

08019648 <uxr_create_session>:
 8019648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801964c:	f100 0b08 	add.w	fp, r0, #8
 8019650:	4604      	mov	r4, r0
 8019652:	b0ab      	sub	sp, #172	; 0xac
 8019654:	4658      	mov	r0, fp
 8019656:	465e      	mov	r6, fp
 8019658:	f000 ff22 	bl	801a4a0 <uxr_reset_stream_storage>
 801965c:	4620      	mov	r0, r4
 801965e:	f000 fa05 	bl	8019a6c <uxr_session_header_offset>
 8019662:	2300      	movs	r3, #0
 8019664:	221c      	movs	r2, #28
 8019666:	a90b      	add	r1, sp, #44	; 0x2c
 8019668:	9000      	str	r0, [sp, #0]
 801966a:	a812      	add	r0, sp, #72	; 0x48
 801966c:	f7fb f886 	bl	801477c <ucdr_init_buffer_origin_offset>
 8019670:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019672:	a912      	add	r1, sp, #72	; 0x48
 8019674:	4620      	mov	r0, r4
 8019676:	8a1a      	ldrh	r2, [r3, #16]
 8019678:	3a04      	subs	r2, #4
 801967a:	b292      	uxth	r2, r2
 801967c:	f000 f91c 	bl	80198b8 <uxr_buffer_create_session>
 8019680:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019682:	4620      	mov	r0, r4
 8019684:	f000 f98a 	bl	801999c <uxr_stamp_create_session_header>
 8019688:	a812      	add	r0, sp, #72	; 0x48
 801968a:	f7fb f8b7 	bl	80147fc <ucdr_buffer_length>
 801968e:	23ff      	movs	r3, #255	; 0xff
 8019690:	4681      	mov	r9, r0
 8019692:	7163      	strb	r3, [r4, #5]
 8019694:	230a      	movs	r3, #10
 8019696:	9303      	str	r3, [sp, #12]
 8019698:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801969a:	464a      	mov	r2, r9
 801969c:	a90b      	add	r1, sp, #44	; 0x2c
 801969e:	e9d3 0500 	ldrd	r0, r5, [r3]
 80196a2:	47a8      	blx	r5
 80196a4:	f001 f81c 	bl	801a6e0 <uxr_millis>
 80196a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80196ac:	4605      	mov	r5, r0
 80196ae:	e009      	b.n	80196c4 <uxr_create_session+0x7c>
 80196b0:	f001 f816 	bl	801a6e0 <uxr_millis>
 80196b4:	1b40      	subs	r0, r0, r5
 80196b6:	7962      	ldrb	r2, [r4, #5]
 80196b8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80196bc:	2b00      	cmp	r3, #0
 80196be:	dd38      	ble.n	8019732 <uxr_create_session+0xea>
 80196c0:	2aff      	cmp	r2, #255	; 0xff
 80196c2:	d13c      	bne.n	801973e <uxr_create_session+0xf6>
 80196c4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80196c6:	a907      	add	r1, sp, #28
 80196c8:	6897      	ldr	r7, [r2, #8]
 80196ca:	6810      	ldr	r0, [r2, #0]
 80196cc:	aa08      	add	r2, sp, #32
 80196ce:	47b8      	blx	r7
 80196d0:	2800      	cmp	r0, #0
 80196d2:	d0ed      	beq.n	80196b0 <uxr_create_session+0x68>
 80196d4:	a81a      	add	r0, sp, #104	; 0x68
 80196d6:	2700      	movs	r7, #0
 80196d8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80196dc:	f7fb f860 	bl	80147a0 <ucdr_init_buffer>
 80196e0:	f10d 031a 	add.w	r3, sp, #26
 80196e4:	aa06      	add	r2, sp, #24
 80196e6:	a91a      	add	r1, sp, #104	; 0x68
 80196e8:	4620      	mov	r0, r4
 80196ea:	f88d 7018 	strb.w	r7, [sp, #24]
 80196ee:	f000 f97d 	bl	80199ec <uxr_read_session_header>
 80196f2:	2800      	cmp	r0, #0
 80196f4:	d0dc      	beq.n	80196b0 <uxr_create_session+0x68>
 80196f6:	4639      	mov	r1, r7
 80196f8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80196fc:	f000 fe9a 	bl	801a434 <uxr_stream_id_from_raw>
 8019700:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019704:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8019708:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801970c:	2f01      	cmp	r7, #1
 801970e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8019712:	d053      	beq.n	80197bc <uxr_create_session+0x174>
 8019714:	2f02      	cmp	r7, #2
 8019716:	d018      	beq.n	801974a <uxr_create_session+0x102>
 8019718:	2f00      	cmp	r7, #0
 801971a:	d1c9      	bne.n	80196b0 <uxr_create_session+0x68>
 801971c:	4639      	mov	r1, r7
 801971e:	4638      	mov	r0, r7
 8019720:	f000 fe88 	bl	801a434 <uxr_stream_id_from_raw>
 8019724:	a91a      	add	r1, sp, #104	; 0x68
 8019726:	4602      	mov	r2, r0
 8019728:	900a      	str	r0, [sp, #40]	; 0x28
 801972a:	4620      	mov	r0, r4
 801972c:	f7ff faf2 	bl	8018d14 <read_submessage_list>
 8019730:	e7be      	b.n	80196b0 <uxr_create_session+0x68>
 8019732:	9b03      	ldr	r3, [sp, #12]
 8019734:	3b01      	subs	r3, #1
 8019736:	9303      	str	r3, [sp, #12]
 8019738:	d001      	beq.n	801973e <uxr_create_session+0xf6>
 801973a:	2aff      	cmp	r2, #255	; 0xff
 801973c:	d0ac      	beq.n	8019698 <uxr_create_session+0x50>
 801973e:	2a00      	cmp	r2, #0
 8019740:	d051      	beq.n	80197e6 <uxr_create_session+0x19e>
 8019742:	2000      	movs	r0, #0
 8019744:	b02b      	add	sp, #172	; 0xac
 8019746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801974a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801974e:	4641      	mov	r1, r8
 8019750:	4630      	mov	r0, r6
 8019752:	9304      	str	r3, [sp, #16]
 8019754:	f000 ff5c 	bl	801a610 <uxr_get_input_reliable_stream>
 8019758:	4682      	mov	sl, r0
 801975a:	b348      	cbz	r0, 80197b0 <uxr_create_session+0x168>
 801975c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801975e:	a81a      	add	r0, sp, #104	; 0x68
 8019760:	9205      	str	r2, [sp, #20]
 8019762:	f7fb f84f 	bl	8014804 <ucdr_buffer_remaining>
 8019766:	4603      	mov	r3, r0
 8019768:	f10d 0019 	add.w	r0, sp, #25
 801976c:	9a05      	ldr	r2, [sp, #20]
 801976e:	4659      	mov	r1, fp
 8019770:	9000      	str	r0, [sp, #0]
 8019772:	4650      	mov	r0, sl
 8019774:	f005 fe80 	bl	801f478 <uxr_receive_reliable_message>
 8019778:	b1d0      	cbz	r0, 80197b0 <uxr_create_session+0x168>
 801977a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d038      	beq.n	80197f4 <uxr_create_session+0x1ac>
 8019782:	9f04      	ldr	r7, [sp, #16]
 8019784:	e00a      	b.n	801979c <uxr_create_session+0x154>
 8019786:	f04f 0302 	mov.w	r3, #2
 801978a:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 801978e:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8019792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019798:	f7ff fabc 	bl	8018d14 <read_submessage_list>
 801979c:	a922      	add	r1, sp, #136	; 0x88
 801979e:	2204      	movs	r2, #4
 80197a0:	4650      	mov	r0, sl
 80197a2:	f005 feeb 	bl	801f57c <uxr_next_input_reliable_buffer_available>
 80197a6:	4603      	mov	r3, r0
 80197a8:	a922      	add	r1, sp, #136	; 0x88
 80197aa:	4620      	mov	r0, r4
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d1ea      	bne.n	8019786 <uxr_create_session+0x13e>
 80197b0:	4642      	mov	r2, r8
 80197b2:	9904      	ldr	r1, [sp, #16]
 80197b4:	4620      	mov	r0, r4
 80197b6:	f7ff f927 	bl	8018a08 <write_submessage_acknack.isra.0>
 80197ba:	e779      	b.n	80196b0 <uxr_create_session+0x68>
 80197bc:	4641      	mov	r1, r8
 80197be:	4630      	mov	r0, r6
 80197c0:	f000 ff1c 	bl	801a5fc <uxr_get_input_best_effort_stream>
 80197c4:	2800      	cmp	r0, #0
 80197c6:	f43f af73 	beq.w	80196b0 <uxr_create_session+0x68>
 80197ca:	4659      	mov	r1, fp
 80197cc:	f005 fdca 	bl	801f364 <uxr_receive_best_effort_message>
 80197d0:	2800      	cmp	r0, #0
 80197d2:	f43f af6d 	beq.w	80196b0 <uxr_create_session+0x68>
 80197d6:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80197da:	a91a      	add	r1, sp, #104	; 0x68
 80197dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197de:	4620      	mov	r0, r4
 80197e0:	f7ff fa98 	bl	8018d14 <read_submessage_list>
 80197e4:	e764      	b.n	80196b0 <uxr_create_session+0x68>
 80197e6:	4630      	mov	r0, r6
 80197e8:	f000 fe5a 	bl	801a4a0 <uxr_reset_stream_storage>
 80197ec:	2001      	movs	r0, #1
 80197ee:	b02b      	add	sp, #172	; 0xac
 80197f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197f4:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80197f8:	a91a      	add	r1, sp, #104	; 0x68
 80197fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197fc:	4620      	mov	r0, r4
 80197fe:	f7ff fa89 	bl	8018d14 <read_submessage_list>
 8019802:	e7be      	b.n	8019782 <uxr_create_session+0x13a>

08019804 <uxr_prepare_stream_to_write_submessage>:
 8019804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019808:	b082      	sub	sp, #8
 801980a:	4604      	mov	r4, r0
 801980c:	4610      	mov	r0, r2
 801980e:	4615      	mov	r5, r2
 8019810:	461e      	mov	r6, r3
 8019812:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8019816:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801981a:	f105 0904 	add.w	r9, r5, #4
 801981e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8019822:	9101      	str	r1, [sp, #4]
 8019824:	f000 ff56 	bl	801a6d4 <uxr_submessage_padding>
 8019828:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801982c:	4481      	add	r9, r0
 801982e:	2b01      	cmp	r3, #1
 8019830:	d01d      	beq.n	801986e <uxr_prepare_stream_to_write_submessage+0x6a>
 8019832:	2b02      	cmp	r3, #2
 8019834:	d116      	bne.n	8019864 <uxr_prepare_stream_to_write_submessage+0x60>
 8019836:	f104 0008 	add.w	r0, r4, #8
 801983a:	4651      	mov	r1, sl
 801983c:	f000 fed2 	bl	801a5e4 <uxr_get_output_reliable_stream>
 8019840:	4604      	mov	r4, r0
 8019842:	b158      	cbz	r0, 801985c <uxr_prepare_stream_to_write_submessage+0x58>
 8019844:	4649      	mov	r1, r9
 8019846:	4632      	mov	r2, r6
 8019848:	f006 f85c 	bl	801f904 <uxr_prepare_reliable_buffer_to_write>
 801984c:	4604      	mov	r4, r0
 801984e:	b12c      	cbz	r4, 801985c <uxr_prepare_stream_to_write_submessage+0x58>
 8019850:	4643      	mov	r3, r8
 8019852:	b2aa      	uxth	r2, r5
 8019854:	4639      	mov	r1, r7
 8019856:	4630      	mov	r0, r6
 8019858:	f000 fefc 	bl	801a654 <uxr_buffer_submessage_header>
 801985c:	4620      	mov	r0, r4
 801985e:	b002      	add	sp, #8
 8019860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019864:	2400      	movs	r4, #0
 8019866:	4620      	mov	r0, r4
 8019868:	b002      	add	sp, #8
 801986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801986e:	f104 0008 	add.w	r0, r4, #8
 8019872:	4651      	mov	r1, sl
 8019874:	f000 feae 	bl	801a5d4 <uxr_get_output_best_effort_stream>
 8019878:	4604      	mov	r4, r0
 801987a:	2800      	cmp	r0, #0
 801987c:	d0ee      	beq.n	801985c <uxr_prepare_stream_to_write_submessage+0x58>
 801987e:	4649      	mov	r1, r9
 8019880:	4632      	mov	r2, r6
 8019882:	f005 ff6b 	bl	801f75c <uxr_prepare_best_effort_buffer_to_write>
 8019886:	4604      	mov	r4, r0
 8019888:	e7e1      	b.n	801984e <uxr_prepare_stream_to_write_submessage+0x4a>
 801988a:	bf00      	nop

0801988c <uxr_init_session_info>:
 801988c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019890:	23ff      	movs	r3, #255	; 0xff
 8019892:	7102      	strb	r2, [r0, #4]
 8019894:	f880 c001 	strb.w	ip, [r0, #1]
 8019898:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801989c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80198a0:	7001      	strb	r1, [r0, #0]
 80198a2:	f880 c002 	strb.w	ip, [r0, #2]
 80198a6:	7143      	strb	r3, [r0, #5]
 80198a8:	70c2      	strb	r2, [r0, #3]
 80198aa:	b500      	push	{lr}
 80198ac:	f04f 0e09 	mov.w	lr, #9
 80198b0:	f8a0 e006 	strh.w	lr, [r0, #6]
 80198b4:	f85d fb04 	ldr.w	pc, [sp], #4

080198b8 <uxr_buffer_create_session>:
 80198b8:	b530      	push	{r4, r5, lr}
 80198ba:	2300      	movs	r3, #0
 80198bc:	b089      	sub	sp, #36	; 0x24
 80198be:	4d12      	ldr	r5, [pc, #72]	; (8019908 <uxr_buffer_create_session+0x50>)
 80198c0:	460c      	mov	r4, r1
 80198c2:	9307      	str	r3, [sp, #28]
 80198c4:	4619      	mov	r1, r3
 80198c6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80198ca:	2201      	movs	r2, #1
 80198cc:	9301      	str	r3, [sp, #4]
 80198ce:	80c2      	strh	r2, [r0, #6]
 80198d0:	f88d 2004 	strb.w	r2, [sp, #4]
 80198d4:	682a      	ldr	r2, [r5, #0]
 80198d6:	9303      	str	r3, [sp, #12]
 80198d8:	9200      	str	r2, [sp, #0]
 80198da:	88aa      	ldrh	r2, [r5, #4]
 80198dc:	9306      	str	r3, [sp, #24]
 80198de:	f8ad 2006 	strh.w	r2, [sp, #6]
 80198e2:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80198e6:	9202      	str	r2, [sp, #8]
 80198e8:	7802      	ldrb	r2, [r0, #0]
 80198ea:	4620      	mov	r0, r4
 80198ec:	f88d 200c 	strb.w	r2, [sp, #12]
 80198f0:	2210      	movs	r2, #16
 80198f2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80198f6:	f000 fead 	bl	801a654 <uxr_buffer_submessage_header>
 80198fa:	4669      	mov	r1, sp
 80198fc:	4620      	mov	r0, r4
 80198fe:	f001 fc8b 	bl	801b218 <uxr_serialize_CREATE_CLIENT_Payload>
 8019902:	b009      	add	sp, #36	; 0x24
 8019904:	bd30      	pop	{r4, r5, pc}
 8019906:	bf00      	nop
 8019908:	08022258 	.word	0x08022258

0801990c <uxr_buffer_delete_session>:
 801990c:	4a0c      	ldr	r2, [pc, #48]	; (8019940 <uxr_buffer_delete_session+0x34>)
 801990e:	2302      	movs	r3, #2
 8019910:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8019914:	b510      	push	{r4, lr}
 8019916:	460c      	mov	r4, r1
 8019918:	b082      	sub	sp, #8
 801991a:	8911      	ldrh	r1, [r2, #8]
 801991c:	2204      	movs	r2, #4
 801991e:	80c3      	strh	r3, [r0, #6]
 8019920:	2300      	movs	r3, #0
 8019922:	f8ad 1006 	strh.w	r1, [sp, #6]
 8019926:	4620      	mov	r0, r4
 8019928:	2103      	movs	r1, #3
 801992a:	f8ad c004 	strh.w	ip, [sp, #4]
 801992e:	f000 fe91 	bl	801a654 <uxr_buffer_submessage_header>
 8019932:	a901      	add	r1, sp, #4
 8019934:	4620      	mov	r0, r4
 8019936:	f001 fd2d 	bl	801b394 <uxr_serialize_DELETE_Payload>
 801993a:	b002      	add	sp, #8
 801993c:	bd10      	pop	{r4, pc}
 801993e:	bf00      	nop
 8019940:	08022258 	.word	0x08022258

08019944 <uxr_read_create_session_status>:
 8019944:	b510      	push	{r4, lr}
 8019946:	460b      	mov	r3, r1
 8019948:	b088      	sub	sp, #32
 801994a:	4604      	mov	r4, r0
 801994c:	a901      	add	r1, sp, #4
 801994e:	4618      	mov	r0, r3
 8019950:	f001 fd30 	bl	801b3b4 <uxr_deserialize_STATUS_AGENT_Payload>
 8019954:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019958:	7163      	strb	r3, [r4, #5]
 801995a:	b008      	add	sp, #32
 801995c:	bd10      	pop	{r4, pc}
 801995e:	bf00      	nop

08019960 <uxr_read_delete_session_status>:
 8019960:	b510      	push	{r4, lr}
 8019962:	b084      	sub	sp, #16
 8019964:	4604      	mov	r4, r0
 8019966:	4608      	mov	r0, r1
 8019968:	a902      	add	r1, sp, #8
 801996a:	f001 fd53 	bl	801b414 <uxr_deserialize_STATUS_Payload>
 801996e:	88e3      	ldrh	r3, [r4, #6]
 8019970:	2b02      	cmp	r3, #2
 8019972:	d001      	beq.n	8019978 <uxr_read_delete_session_status+0x18>
 8019974:	b004      	add	sp, #16
 8019976:	bd10      	pop	{r4, pc}
 8019978:	f10d 000a 	add.w	r0, sp, #10
 801997c:	f7fe fd96 	bl	80184ac <uxr_object_id_from_raw>
 8019980:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8019984:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8019988:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801998c:	b29b      	uxth	r3, r3
 801998e:	2b02      	cmp	r3, #2
 8019990:	d1f0      	bne.n	8019974 <uxr_read_delete_session_status+0x14>
 8019992:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019996:	7163      	strb	r3, [r4, #5]
 8019998:	e7ec      	b.n	8019974 <uxr_read_delete_session_status+0x14>
 801999a:	bf00      	nop

0801999c <uxr_stamp_create_session_header>:
 801999c:	b510      	push	{r4, lr}
 801999e:	2208      	movs	r2, #8
 80199a0:	b08a      	sub	sp, #40	; 0x28
 80199a2:	4604      	mov	r4, r0
 80199a4:	eb0d 0002 	add.w	r0, sp, r2
 80199a8:	f7fa fefa 	bl	80147a0 <ucdr_init_buffer>
 80199ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199b0:	2300      	movs	r3, #0
 80199b2:	a802      	add	r0, sp, #8
 80199b4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80199b8:	9400      	str	r4, [sp, #0]
 80199ba:	461a      	mov	r2, r3
 80199bc:	f000 fec2 	bl	801a744 <uxr_serialize_message_header>
 80199c0:	b00a      	add	sp, #40	; 0x28
 80199c2:	bd10      	pop	{r4, pc}

080199c4 <uxr_stamp_session_header>:
 80199c4:	b530      	push	{r4, r5, lr}
 80199c6:	b08d      	sub	sp, #52	; 0x34
 80199c8:	4604      	mov	r4, r0
 80199ca:	460d      	mov	r5, r1
 80199cc:	4619      	mov	r1, r3
 80199ce:	a804      	add	r0, sp, #16
 80199d0:	9203      	str	r2, [sp, #12]
 80199d2:	2208      	movs	r2, #8
 80199d4:	f7fa fee4 	bl	80147a0 <ucdr_init_buffer>
 80199d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199dc:	9b03      	ldr	r3, [sp, #12]
 80199de:	462a      	mov	r2, r5
 80199e0:	a804      	add	r0, sp, #16
 80199e2:	9400      	str	r4, [sp, #0]
 80199e4:	f000 feae 	bl	801a744 <uxr_serialize_message_header>
 80199e8:	b00d      	add	sp, #52	; 0x34
 80199ea:	bd30      	pop	{r4, r5, pc}

080199ec <uxr_read_session_header>:
 80199ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f0:	4607      	mov	r7, r0
 80199f2:	b084      	sub	sp, #16
 80199f4:	4608      	mov	r0, r1
 80199f6:	460c      	mov	r4, r1
 80199f8:	4615      	mov	r5, r2
 80199fa:	461e      	mov	r6, r3
 80199fc:	f7fa ff02 	bl	8014804 <ucdr_buffer_remaining>
 8019a00:	2808      	cmp	r0, #8
 8019a02:	d803      	bhi.n	8019a0c <uxr_read_session_header+0x20>
 8019a04:	2000      	movs	r0, #0
 8019a06:	b004      	add	sp, #16
 8019a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a0c:	f10d 080c 	add.w	r8, sp, #12
 8019a10:	4633      	mov	r3, r6
 8019a12:	462a      	mov	r2, r5
 8019a14:	4620      	mov	r0, r4
 8019a16:	f10d 010b 	add.w	r1, sp, #11
 8019a1a:	f8cd 8000 	str.w	r8, [sp]
 8019a1e:	f000 feaf 	bl	801a780 <uxr_deserialize_message_header>
 8019a22:	783a      	ldrb	r2, [r7, #0]
 8019a24:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8019a28:	4293      	cmp	r3, r2
 8019a2a:	d1eb      	bne.n	8019a04 <uxr_read_session_header+0x18>
 8019a2c:	061b      	lsls	r3, r3, #24
 8019a2e:	d41b      	bmi.n	8019a68 <uxr_read_session_header+0x7c>
 8019a30:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019a34:	787b      	ldrb	r3, [r7, #1]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d003      	beq.n	8019a42 <uxr_read_session_header+0x56>
 8019a3a:	2001      	movs	r0, #1
 8019a3c:	f080 0001 	eor.w	r0, r0, #1
 8019a40:	e7e1      	b.n	8019a06 <uxr_read_session_header+0x1a>
 8019a42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8019a46:	1cb8      	adds	r0, r7, #2
 8019a48:	78bb      	ldrb	r3, [r7, #2]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	d1f5      	bne.n	8019a3a <uxr_read_session_header+0x4e>
 8019a4e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8019a52:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8019a56:	429a      	cmp	r2, r3
 8019a58:	d1ef      	bne.n	8019a3a <uxr_read_session_header+0x4e>
 8019a5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8019a5e:	7843      	ldrb	r3, [r0, #1]
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d1ea      	bne.n	8019a3a <uxr_read_session_header+0x4e>
 8019a64:	2000      	movs	r0, #0
 8019a66:	e7e9      	b.n	8019a3c <uxr_read_session_header+0x50>
 8019a68:	2001      	movs	r0, #1
 8019a6a:	e7cc      	b.n	8019a06 <uxr_read_session_header+0x1a>

08019a6c <uxr_session_header_offset>:
 8019a6c:	f990 3000 	ldrsb.w	r3, [r0]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	bfac      	ite	ge
 8019a74:	2008      	movge	r0, #8
 8019a76:	2004      	movlt	r0, #4
 8019a78:	4770      	bx	lr
 8019a7a:	bf00      	nop

08019a7c <uxr_init_base_object_request>:
 8019a7c:	b510      	push	{r4, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8019a84:	9101      	str	r1, [sp, #4]
 8019a86:	88c3      	ldrh	r3, [r0, #6]
 8019a88:	f1a3 010a 	sub.w	r1, r3, #10
 8019a8c:	b289      	uxth	r1, r1
 8019a8e:	42a1      	cmp	r1, r4
 8019a90:	d80f      	bhi.n	8019ab2 <uxr_init_base_object_request+0x36>
 8019a92:	3301      	adds	r3, #1
 8019a94:	b29c      	uxth	r4, r3
 8019a96:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8019a9a:	b2db      	uxtb	r3, r3
 8019a9c:	80c4      	strh	r4, [r0, #6]
 8019a9e:	1c91      	adds	r1, r2, #2
 8019aa0:	9801      	ldr	r0, [sp, #4]
 8019aa2:	f882 c000 	strb.w	ip, [r2]
 8019aa6:	7053      	strb	r3, [r2, #1]
 8019aa8:	f7fe fd14 	bl	80184d4 <uxr_object_id_to_raw>
 8019aac:	4620      	mov	r0, r4
 8019aae:	b002      	add	sp, #8
 8019ab0:	bd10      	pop	{r4, pc}
 8019ab2:	230a      	movs	r3, #10
 8019ab4:	f04f 0c00 	mov.w	ip, #0
 8019ab8:	461c      	mov	r4, r3
 8019aba:	e7ef      	b.n	8019a9c <uxr_init_base_object_request+0x20>

08019abc <uxr_parse_base_object_request>:
 8019abc:	b570      	push	{r4, r5, r6, lr}
 8019abe:	4604      	mov	r4, r0
 8019ac0:	3002      	adds	r0, #2
 8019ac2:	460d      	mov	r5, r1
 8019ac4:	4616      	mov	r6, r2
 8019ac6:	f7fe fcf1 	bl	80184ac <uxr_object_id_from_raw>
 8019aca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8019ace:	8028      	strh	r0, [r5, #0]
 8019ad0:	806b      	strh	r3, [r5, #2]
 8019ad2:	7822      	ldrb	r2, [r4, #0]
 8019ad4:	7863      	ldrb	r3, [r4, #1]
 8019ad6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019ada:	8033      	strh	r3, [r6, #0]
 8019adc:	bd70      	pop	{r4, r5, r6, pc}
 8019ade:	bf00      	nop

08019ae0 <uxr_init_framing_io>:
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	7041      	strb	r1, [r0, #1]
 8019ae4:	7003      	strb	r3, [r0, #0]
 8019ae6:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019ae8:	4770      	bx	lr
 8019aea:	bf00      	nop

08019aec <uxr_write_framed_msg>:
 8019aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af0:	4617      	mov	r7, r2
 8019af2:	7842      	ldrb	r2, [r0, #1]
 8019af4:	460e      	mov	r6, r1
 8019af6:	b083      	sub	sp, #12
 8019af8:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019afc:	469b      	mov	fp, r3
 8019afe:	237e      	movs	r3, #126	; 0x7e
 8019b00:	4604      	mov	r4, r0
 8019b02:	2901      	cmp	r1, #1
 8019b04:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8019b08:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019b0c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8019b10:	f240 8115 	bls.w	8019d3e <uxr_write_framed_msg+0x252>
 8019b14:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019b18:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019b1c:	2202      	movs	r2, #2
 8019b1e:	2901      	cmp	r1, #1
 8019b20:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b24:	d952      	bls.n	8019bcc <uxr_write_framed_msg+0xe0>
 8019b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b28:	2103      	movs	r1, #3
 8019b2a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8019b2e:	b2dd      	uxtb	r5, r3
 8019b30:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019b34:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019b38:	2a01      	cmp	r2, #1
 8019b3a:	d95c      	bls.n	8019bf6 <uxr_write_framed_msg+0x10a>
 8019b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b3e:	1862      	adds	r2, r4, r1
 8019b40:	3101      	adds	r1, #1
 8019b42:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019b46:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8019b4a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019b4e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019b52:	2a01      	cmp	r2, #1
 8019b54:	d961      	bls.n	8019c1a <uxr_write_framed_msg+0x12e>
 8019b56:	1c4a      	adds	r2, r1, #1
 8019b58:	4421      	add	r1, r4
 8019b5a:	b2d2      	uxtb	r2, r2
 8019b5c:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019b60:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d06a      	beq.n	8019c3e <uxr_write_framed_msg+0x152>
 8019b68:	f04f 0800 	mov.w	r8, #0
 8019b6c:	46c1      	mov	r9, r8
 8019b6e:	e016      	b.n	8019b9e <uxr_write_framed_msg+0xb2>
 8019b70:	2a29      	cmp	r2, #41	; 0x29
 8019b72:	d868      	bhi.n	8019c46 <uxr_write_framed_msg+0x15a>
 8019b74:	18a0      	adds	r0, r4, r2
 8019b76:	3201      	adds	r2, #1
 8019b78:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019b7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b80:	ea88 0101 	eor.w	r1, r8, r1
 8019b84:	4b7d      	ldr	r3, [pc, #500]	; (8019d7c <uxr_write_framed_msg+0x290>)
 8019b86:	f109 0901 	add.w	r9, r9, #1
 8019b8a:	b2c9      	uxtb	r1, r1
 8019b8c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019b90:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b96:	454b      	cmp	r3, r9
 8019b98:	d969      	bls.n	8019c6e <uxr_write_framed_msg+0x182>
 8019b9a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019b9e:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019ba2:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019ba6:	2801      	cmp	r0, #1
 8019ba8:	d8e2      	bhi.n	8019b70 <uxr_write_framed_msg+0x84>
 8019baa:	1c50      	adds	r0, r2, #1
 8019bac:	b2c0      	uxtb	r0, r0
 8019bae:	2829      	cmp	r0, #41	; 0x29
 8019bb0:	d849      	bhi.n	8019c46 <uxr_write_framed_msg+0x15a>
 8019bb2:	18a0      	adds	r0, r4, r2
 8019bb4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019bb8:	3202      	adds	r2, #2
 8019bba:	f081 0520 	eor.w	r5, r1, #32
 8019bbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019bc2:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019bc6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019bca:	e7d9      	b.n	8019b80 <uxr_write_framed_msg+0x94>
 8019bcc:	2104      	movs	r1, #4
 8019bce:	f04f 0c03 	mov.w	ip, #3
 8019bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bd4:	4422      	add	r2, r4
 8019bd6:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019bda:	44a4      	add	ip, r4
 8019bdc:	b2dd      	uxtb	r5, r3
 8019bde:	f080 0020 	eor.w	r0, r0, #32
 8019be2:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8019be6:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019bea:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8019bee:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019bf2:	2a01      	cmp	r2, #1
 8019bf4:	d8a2      	bhi.n	8019b3c <uxr_write_framed_msg+0x50>
 8019bf6:	1862      	adds	r2, r4, r1
 8019bf8:	207d      	movs	r0, #125	; 0x7d
 8019bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bfc:	f085 0520 	eor.w	r5, r5, #32
 8019c00:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8019c04:	3102      	adds	r1, #2
 8019c06:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019c0a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8019c0e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019c12:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019c16:	2a01      	cmp	r2, #1
 8019c18:	d89d      	bhi.n	8019b56 <uxr_write_framed_msg+0x6a>
 8019c1a:	1c4d      	adds	r5, r1, #1
 8019c1c:	1c8a      	adds	r2, r1, #2
 8019c1e:	f080 0020 	eor.w	r0, r0, #32
 8019c22:	4421      	add	r1, r4
 8019c24:	fa54 f585 	uxtab	r5, r4, r5
 8019c28:	b2d2      	uxtb	r2, r2
 8019c2a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8019c2e:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8019c32:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8019c36:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d194      	bne.n	8019b68 <uxr_write_framed_msg+0x7c>
 8019c3e:	4619      	mov	r1, r3
 8019c40:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019c44:	e019      	b.n	8019c7a <uxr_write_framed_msg+0x18e>
 8019c46:	2500      	movs	r5, #0
 8019c48:	e000      	b.n	8019c4c <uxr_write_framed_msg+0x160>
 8019c4a:	b160      	cbz	r0, 8019c66 <uxr_write_framed_msg+0x17a>
 8019c4c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019c50:	1b52      	subs	r2, r2, r5
 8019c52:	4653      	mov	r3, sl
 8019c54:	4638      	mov	r0, r7
 8019c56:	4421      	add	r1, r4
 8019c58:	47b0      	blx	r6
 8019c5a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019c5e:	4405      	add	r5, r0
 8019c60:	4295      	cmp	r5, r2
 8019c62:	d3f2      	bcc.n	8019c4a <uxr_write_framed_msg+0x15e>
 8019c64:	d066      	beq.n	8019d34 <uxr_write_framed_msg+0x248>
 8019c66:	2000      	movs	r0, #0
 8019c68:	b003      	add	sp, #12
 8019c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c6e:	fa5f f188 	uxtb.w	r1, r8
 8019c72:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019c76:	f8ad 8004 	strh.w	r8, [sp, #4]
 8019c7a:	f04f 0900 	mov.w	r9, #0
 8019c7e:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8019c82:	46c8      	mov	r8, r9
 8019c84:	e013      	b.n	8019cae <uxr_write_framed_msg+0x1c2>
 8019c86:	2a29      	cmp	r2, #41	; 0x29
 8019c88:	d824      	bhi.n	8019cd4 <uxr_write_framed_msg+0x1e8>
 8019c8a:	18a3      	adds	r3, r4, r2
 8019c8c:	3201      	adds	r2, #1
 8019c8e:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8019c92:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019c96:	f109 0901 	add.w	r9, r9, #1
 8019c9a:	f1b9 0f02 	cmp.w	r9, #2
 8019c9e:	d02d      	beq.n	8019cfc <uxr_write_framed_msg+0x210>
 8019ca0:	f109 0308 	add.w	r3, r9, #8
 8019ca4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019ca8:	446b      	add	r3, sp
 8019caa:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019cae:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8019cb2:	2b01      	cmp	r3, #1
 8019cb4:	d8e7      	bhi.n	8019c86 <uxr_write_framed_msg+0x19a>
 8019cb6:	1c53      	adds	r3, r2, #1
 8019cb8:	b2db      	uxtb	r3, r3
 8019cba:	2b29      	cmp	r3, #41	; 0x29
 8019cbc:	d80a      	bhi.n	8019cd4 <uxr_write_framed_msg+0x1e8>
 8019cbe:	18a3      	adds	r3, r4, r2
 8019cc0:	f081 0120 	eor.w	r1, r1, #32
 8019cc4:	3202      	adds	r2, #2
 8019cc6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8019cca:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8019cce:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019cd2:	e7e0      	b.n	8019c96 <uxr_write_framed_msg+0x1aa>
 8019cd4:	2500      	movs	r5, #0
 8019cd6:	e001      	b.n	8019cdc <uxr_write_framed_msg+0x1f0>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d0c4      	beq.n	8019c66 <uxr_write_framed_msg+0x17a>
 8019cdc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019ce0:	1b52      	subs	r2, r2, r5
 8019ce2:	4653      	mov	r3, sl
 8019ce4:	4638      	mov	r0, r7
 8019ce6:	4421      	add	r1, r4
 8019ce8:	47b0      	blx	r6
 8019cea:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019cee:	4405      	add	r5, r0
 8019cf0:	4295      	cmp	r5, r2
 8019cf2:	d3f1      	bcc.n	8019cd8 <uxr_write_framed_msg+0x1ec>
 8019cf4:	d1b7      	bne.n	8019c66 <uxr_write_framed_msg+0x17a>
 8019cf6:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8019cfa:	e7d1      	b.n	8019ca0 <uxr_write_framed_msg+0x1b4>
 8019cfc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019d00:	b19a      	cbz	r2, 8019d2a <uxr_write_framed_msg+0x23e>
 8019d02:	2500      	movs	r5, #0
 8019d04:	e001      	b.n	8019d0a <uxr_write_framed_msg+0x21e>
 8019d06:	2800      	cmp	r0, #0
 8019d08:	d0ad      	beq.n	8019c66 <uxr_write_framed_msg+0x17a>
 8019d0a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019d0e:	1b52      	subs	r2, r2, r5
 8019d10:	4653      	mov	r3, sl
 8019d12:	4638      	mov	r0, r7
 8019d14:	4421      	add	r1, r4
 8019d16:	47b0      	blx	r6
 8019d18:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019d1c:	4405      	add	r5, r0
 8019d1e:	4295      	cmp	r5, r2
 8019d20:	d3f1      	bcc.n	8019d06 <uxr_write_framed_msg+0x21a>
 8019d22:	d1a0      	bne.n	8019c66 <uxr_write_framed_msg+0x17a>
 8019d24:	2300      	movs	r3, #0
 8019d26:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d2c:	b298      	uxth	r0, r3
 8019d2e:	b003      	add	sp, #12
 8019d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d34:	f04f 0300 	mov.w	r3, #0
 8019d38:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019d3c:	e72a      	b.n	8019b94 <uxr_write_framed_msg+0xa8>
 8019d3e:	217d      	movs	r1, #125	; 0x7d
 8019d40:	f082 0220 	eor.w	r2, r2, #32
 8019d44:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019d48:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019d4c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8019d50:	2203      	movs	r2, #3
 8019d52:	2901      	cmp	r1, #1
 8019d54:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019d58:	d803      	bhi.n	8019d62 <uxr_write_framed_msg+0x276>
 8019d5a:	2105      	movs	r1, #5
 8019d5c:	f04f 0c04 	mov.w	ip, #4
 8019d60:	e737      	b.n	8019bd2 <uxr_write_framed_msg+0xe6>
 8019d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d64:	2104      	movs	r1, #4
 8019d66:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019d6a:	b2dd      	uxtb	r5, r3
 8019d6c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019d70:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019d74:	2a01      	cmp	r2, #1
 8019d76:	f63f aee1 	bhi.w	8019b3c <uxr_write_framed_msg+0x50>
 8019d7a:	e73c      	b.n	8019bf6 <uxr_write_framed_msg+0x10a>
 8019d7c:	08022edc 	.word	0x08022edc

08019d80 <uxr_framing_read_transport>:
 8019d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d84:	4604      	mov	r4, r0
 8019d86:	b085      	sub	sp, #20
 8019d88:	4692      	mov	sl, r2
 8019d8a:	4689      	mov	r9, r1
 8019d8c:	461d      	mov	r5, r3
 8019d8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019d90:	f000 fca6 	bl	801a6e0 <uxr_millis>
 8019d94:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019d98:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019d9c:	4680      	mov	r8, r0
 8019d9e:	42ba      	cmp	r2, r7
 8019da0:	d05f      	beq.n	8019e62 <uxr_framing_read_transport+0xe2>
 8019da2:	d817      	bhi.n	8019dd4 <uxr_framing_read_transport+0x54>
 8019da4:	3f01      	subs	r7, #1
 8019da6:	1aba      	subs	r2, r7, r2
 8019da8:	2700      	movs	r7, #0
 8019daa:	b2d2      	uxtb	r2, r2
 8019dac:	42b2      	cmp	r2, r6
 8019dae:	d81a      	bhi.n	8019de6 <uxr_framing_read_transport+0x66>
 8019db0:	19d3      	adds	r3, r2, r7
 8019db2:	42b3      	cmp	r3, r6
 8019db4:	d852      	bhi.n	8019e5c <uxr_framing_read_transport+0xdc>
 8019db6:	b9d2      	cbnz	r2, 8019dee <uxr_framing_read_transport+0x6e>
 8019db8:	2600      	movs	r6, #0
 8019dba:	f000 fc91 	bl	801a6e0 <uxr_millis>
 8019dbe:	682b      	ldr	r3, [r5, #0]
 8019dc0:	eba0 0008 	sub.w	r0, r0, r8
 8019dc4:	1a1b      	subs	r3, r3, r0
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019dcc:	602b      	str	r3, [r5, #0]
 8019dce:	b005      	add	sp, #20
 8019dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd4:	2f00      	cmp	r7, #0
 8019dd6:	d060      	beq.n	8019e9a <uxr_framing_read_transport+0x11a>
 8019dd8:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8019ddc:	3f01      	subs	r7, #1
 8019dde:	b2d2      	uxtb	r2, r2
 8019de0:	b2ff      	uxtb	r7, r7
 8019de2:	42b2      	cmp	r2, r6
 8019de4:	d9e4      	bls.n	8019db0 <uxr_framing_read_transport+0x30>
 8019de6:	b2f2      	uxtb	r2, r6
 8019de8:	2700      	movs	r7, #0
 8019dea:	2a00      	cmp	r2, #0
 8019dec:	d0e4      	beq.n	8019db8 <uxr_framing_read_transport+0x38>
 8019dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019df0:	4650      	mov	r0, sl
 8019df2:	9203      	str	r2, [sp, #12]
 8019df4:	9300      	str	r3, [sp, #0]
 8019df6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019dfa:	682b      	ldr	r3, [r5, #0]
 8019dfc:	3102      	adds	r1, #2
 8019dfe:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019ea4 <uxr_framing_read_transport+0x124>
 8019e02:	4421      	add	r1, r4
 8019e04:	47c8      	blx	r9
 8019e06:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019e0a:	4606      	mov	r6, r0
 8019e0c:	4403      	add	r3, r0
 8019e0e:	0859      	lsrs	r1, r3, #1
 8019e10:	fbab 2101 	umull	r2, r1, fp, r1
 8019e14:	222a      	movs	r2, #42	; 0x2a
 8019e16:	0889      	lsrs	r1, r1, #2
 8019e18:	fb02 3111 	mls	r1, r2, r1, r3
 8019e1c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d0c9      	beq.n	8019db8 <uxr_framing_read_transport+0x38>
 8019e24:	9a03      	ldr	r2, [sp, #12]
 8019e26:	4290      	cmp	r0, r2
 8019e28:	d1c7      	bne.n	8019dba <uxr_framing_read_transport+0x3a>
 8019e2a:	2f00      	cmp	r7, #0
 8019e2c:	d0c5      	beq.n	8019dba <uxr_framing_read_transport+0x3a>
 8019e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e30:	3102      	adds	r1, #2
 8019e32:	463a      	mov	r2, r7
 8019e34:	4650      	mov	r0, sl
 8019e36:	4421      	add	r1, r4
 8019e38:	9300      	str	r3, [sp, #0]
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	47c8      	blx	r9
 8019e3e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019e42:	4406      	add	r6, r0
 8019e44:	1813      	adds	r3, r2, r0
 8019e46:	085a      	lsrs	r2, r3, #1
 8019e48:	fbab 1b02 	umull	r1, fp, fp, r2
 8019e4c:	222a      	movs	r2, #42	; 0x2a
 8019e4e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019e52:	fb02 331b 	mls	r3, r2, fp, r3
 8019e56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019e5a:	e7ae      	b.n	8019dba <uxr_framing_read_transport+0x3a>
 8019e5c:	1ab6      	subs	r6, r6, r2
 8019e5e:	b2f7      	uxtb	r7, r6
 8019e60:	e7a9      	b.n	8019db6 <uxr_framing_read_transport+0x36>
 8019e62:	2300      	movs	r3, #0
 8019e64:	2e28      	cmp	r6, #40	; 0x28
 8019e66:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8019e68:	d9bd      	bls.n	8019de6 <uxr_framing_read_transport+0x66>
 8019e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e6c:	2229      	movs	r2, #41	; 0x29
 8019e6e:	1ca1      	adds	r1, r4, #2
 8019e70:	4650      	mov	r0, sl
 8019e72:	9300      	str	r3, [sp, #0]
 8019e74:	682b      	ldr	r3, [r5, #0]
 8019e76:	47c8      	blx	r9
 8019e78:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019e7c:	4606      	mov	r6, r0
 8019e7e:	212a      	movs	r1, #42	; 0x2a
 8019e80:	4403      	add	r3, r0
 8019e82:	4808      	ldr	r0, [pc, #32]	; (8019ea4 <uxr_framing_read_transport+0x124>)
 8019e84:	085a      	lsrs	r2, r3, #1
 8019e86:	fba0 0202 	umull	r0, r2, r0, r2
 8019e8a:	0892      	lsrs	r2, r2, #2
 8019e8c:	fb01 3312 	mls	r3, r1, r2, r3
 8019e90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019e94:	2e00      	cmp	r6, #0
 8019e96:	d08f      	beq.n	8019db8 <uxr_framing_read_transport+0x38>
 8019e98:	e78f      	b.n	8019dba <uxr_framing_read_transport+0x3a>
 8019e9a:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8019e9e:	b2d2      	uxtb	r2, r2
 8019ea0:	e784      	b.n	8019dac <uxr_framing_read_transport+0x2c>
 8019ea2:	bf00      	nop
 8019ea4:	30c30c31 	.word	0x30c30c31

08019ea8 <uxr_read_framed_msg>:
 8019ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eac:	461e      	mov	r6, r3
 8019eae:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019eb2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8019eb6:	b083      	sub	sp, #12
 8019eb8:	4604      	mov	r4, r0
 8019eba:	4688      	mov	r8, r1
 8019ebc:	429d      	cmp	r5, r3
 8019ebe:	4691      	mov	r9, r2
 8019ec0:	f000 818c 	beq.w	801a1dc <uxr_read_framed_msg+0x334>
 8019ec4:	7823      	ldrb	r3, [r4, #0]
 8019ec6:	4dc3      	ldr	r5, [pc, #780]	; (801a1d4 <uxr_read_framed_msg+0x32c>)
 8019ec8:	4fc3      	ldr	r7, [pc, #780]	; (801a1d8 <uxr_read_framed_msg+0x330>)
 8019eca:	2b07      	cmp	r3, #7
 8019ecc:	d8fd      	bhi.n	8019eca <uxr_read_framed_msg+0x22>
 8019ece:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019ed2:	011c      	.short	0x011c
 8019ed4:	00d900fb 	.word	0x00d900fb
 8019ed8:	008f00ba 	.word	0x008f00ba
 8019edc:	00320051 	.word	0x00320051
 8019ee0:	0008      	.short	0x0008
 8019ee2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019ee6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019eea:	4299      	cmp	r1, r3
 8019eec:	f000 814d 	beq.w	801a18a <uxr_read_framed_msg+0x2e2>
 8019ef0:	18e2      	adds	r2, r4, r3
 8019ef2:	7892      	ldrb	r2, [r2, #2]
 8019ef4:	2a7d      	cmp	r2, #125	; 0x7d
 8019ef6:	f000 81b8 	beq.w	801a26a <uxr_read_framed_msg+0x3c2>
 8019efa:	3301      	adds	r3, #1
 8019efc:	212a      	movs	r1, #42	; 0x2a
 8019efe:	2a7e      	cmp	r2, #126	; 0x7e
 8019f00:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019f04:	fba5 c000 	umull	ip, r0, r5, r0
 8019f08:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019f0c:	fb01 3310 	mls	r3, r1, r0, r3
 8019f10:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019f14:	f000 8257 	beq.w	801a3c6 <uxr_read_framed_msg+0x51e>
 8019f18:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019f1a:	2000      	movs	r0, #0
 8019f1c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019f1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019f22:	7020      	strb	r0, [r4, #0]
 8019f24:	b29b      	uxth	r3, r3
 8019f26:	4299      	cmp	r1, r3
 8019f28:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019f2a:	f000 8178 	beq.w	801a21e <uxr_read_framed_msg+0x376>
 8019f2e:	2000      	movs	r0, #0
 8019f30:	b003      	add	sp, #12
 8019f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f36:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019f3a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019f3e:	4298      	cmp	r0, r3
 8019f40:	f000 8132 	beq.w	801a1a8 <uxr_read_framed_msg+0x300>
 8019f44:	18e2      	adds	r2, r4, r3
 8019f46:	7891      	ldrb	r1, [r2, #2]
 8019f48:	297d      	cmp	r1, #125	; 0x7d
 8019f4a:	f000 8170 	beq.w	801a22e <uxr_read_framed_msg+0x386>
 8019f4e:	3301      	adds	r3, #1
 8019f50:	202a      	movs	r0, #42	; 0x2a
 8019f52:	297e      	cmp	r1, #126	; 0x7e
 8019f54:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019f58:	fba5 c202 	umull	ip, r2, r5, r2
 8019f5c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019f60:	fb00 3312 	mls	r3, r0, r2, r3
 8019f64:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019f68:	f000 821d 	beq.w	801a3a6 <uxr_read_framed_msg+0x4fe>
 8019f6c:	2307      	movs	r3, #7
 8019f6e:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019f70:	7023      	strb	r3, [r4, #0]
 8019f72:	e7aa      	b.n	8019eca <uxr_read_framed_msg+0x22>
 8019f74:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019f76:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019f7a:	459e      	cmp	lr, r3
 8019f7c:	d827      	bhi.n	8019fce <uxr_read_framed_msg+0x126>
 8019f7e:	e032      	b.n	8019fe6 <uxr_read_framed_msg+0x13e>
 8019f80:	fba5 b101 	umull	fp, r1, r5, r1
 8019f84:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019f88:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019f8c:	0889      	lsrs	r1, r1, #2
 8019f8e:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019f92:	fb0b 0111 	mls	r1, fp, r1, r0
 8019f96:	f000 80d4 	beq.w	801a142 <uxr_read_framed_msg+0x29a>
 8019f9a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019f9e:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019fa2:	f000 80cb 	beq.w	801a13c <uxr_read_framed_msg+0x294>
 8019fa6:	f806 c003 	strb.w	ip, [r6, r3]
 8019faa:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019fac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019fae:	ea80 010c 	eor.w	r1, r0, ip
 8019fb2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019fb6:	3301      	adds	r3, #1
 8019fb8:	b2c9      	uxtb	r1, r1
 8019fba:	b29b      	uxth	r3, r3
 8019fbc:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019fc0:	4573      	cmp	r3, lr
 8019fc2:	8663      	strh	r3, [r4, #50]	; 0x32
 8019fc4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019fc8:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019fca:	f080 811d 	bcs.w	801a208 <uxr_read_framed_msg+0x360>
 8019fce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019fd2:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019fd6:	1c50      	adds	r0, r2, #1
 8019fd8:	eb04 0c02 	add.w	ip, r4, r2
 8019fdc:	4592      	cmp	sl, r2
 8019fde:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019fe2:	d1cd      	bne.n	8019f80 <uxr_read_framed_msg+0xd8>
 8019fe4:	459e      	cmp	lr, r3
 8019fe6:	f040 8114 	bne.w	801a212 <uxr_read_framed_msg+0x36a>
 8019fea:	2306      	movs	r3, #6
 8019fec:	7023      	strb	r3, [r4, #0]
 8019fee:	e76c      	b.n	8019eca <uxr_read_framed_msg+0x22>
 8019ff0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019ff4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019ff8:	4298      	cmp	r0, r3
 8019ffa:	f000 80c6 	beq.w	801a18a <uxr_read_framed_msg+0x2e2>
 8019ffe:	18e2      	adds	r2, r4, r3
 801a000:	7891      	ldrb	r1, [r2, #2]
 801a002:	297d      	cmp	r1, #125	; 0x7d
 801a004:	f000 8193 	beq.w	801a32e <uxr_read_framed_msg+0x486>
 801a008:	3301      	adds	r3, #1
 801a00a:	202a      	movs	r0, #42	; 0x2a
 801a00c:	297e      	cmp	r1, #126	; 0x7e
 801a00e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a012:	fba5 c202 	umull	ip, r2, r5, r2
 801a016:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a01a:	fb00 3312 	mls	r3, r0, r2, r3
 801a01e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a022:	f000 81d0 	beq.w	801a3c6 <uxr_read_framed_msg+0x51e>
 801a026:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a028:	2000      	movs	r0, #0
 801a02a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a02e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a030:	8660      	strh	r0, [r4, #50]	; 0x32
 801a032:	b29b      	uxth	r3, r3
 801a034:	86e0      	strh	r0, [r4, #54]	; 0x36
 801a036:	428b      	cmp	r3, r1
 801a038:	8623      	strh	r3, [r4, #48]	; 0x30
 801a03a:	f240 80e2 	bls.w	801a202 <uxr_read_framed_msg+0x35a>
 801a03e:	7020      	strb	r0, [r4, #0]
 801a040:	b003      	add	sp, #12
 801a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a046:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801a04a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a04e:	4298      	cmp	r0, r3
 801a050:	f000 80aa 	beq.w	801a1a8 <uxr_read_framed_msg+0x300>
 801a054:	18e2      	adds	r2, r4, r3
 801a056:	7891      	ldrb	r1, [r2, #2]
 801a058:	297d      	cmp	r1, #125	; 0x7d
 801a05a:	f000 8186 	beq.w	801a36a <uxr_read_framed_msg+0x4c2>
 801a05e:	3301      	adds	r3, #1
 801a060:	202a      	movs	r0, #42	; 0x2a
 801a062:	297e      	cmp	r1, #126	; 0x7e
 801a064:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a068:	fba5 c202 	umull	ip, r2, r5, r2
 801a06c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a070:	fb00 3312 	mls	r3, r0, r2, r3
 801a074:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a078:	f000 8195 	beq.w	801a3a6 <uxr_read_framed_msg+0x4fe>
 801a07c:	2304      	movs	r3, #4
 801a07e:	8621      	strh	r1, [r4, #48]	; 0x30
 801a080:	7023      	strb	r3, [r4, #0]
 801a082:	e722      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a084:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801a088:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a08c:	4290      	cmp	r0, r2
 801a08e:	f000 80b4 	beq.w	801a1fa <uxr_read_framed_msg+0x352>
 801a092:	18a3      	adds	r3, r4, r2
 801a094:	7899      	ldrb	r1, [r3, #2]
 801a096:	297d      	cmp	r1, #125	; 0x7d
 801a098:	f000 8107 	beq.w	801a2aa <uxr_read_framed_msg+0x402>
 801a09c:	3201      	adds	r2, #1
 801a09e:	232a      	movs	r3, #42	; 0x2a
 801a0a0:	297e      	cmp	r1, #126	; 0x7e
 801a0a2:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801a0a6:	fba5 c000 	umull	ip, r0, r5, r0
 801a0aa:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a0ae:	fb03 2210 	mls	r2, r3, r0, r2
 801a0b2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a0b6:	f000 818a 	beq.w	801a3ce <uxr_read_framed_msg+0x526>
 801a0ba:	7863      	ldrb	r3, [r4, #1]
 801a0bc:	428b      	cmp	r3, r1
 801a0be:	bf0c      	ite	eq
 801a0c0:	2303      	moveq	r3, #3
 801a0c2:	2300      	movne	r3, #0
 801a0c4:	7023      	strb	r3, [r4, #0]
 801a0c6:	e700      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a0ce:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801a0d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a0d6:	4299      	cmp	r1, r3
 801a0d8:	d06a      	beq.n	801a1b0 <uxr_read_framed_msg+0x308>
 801a0da:	18e2      	adds	r2, r4, r3
 801a0dc:	7890      	ldrb	r0, [r2, #2]
 801a0de:	287d      	cmp	r0, #125	; 0x7d
 801a0e0:	f000 8100 	beq.w	801a2e4 <uxr_read_framed_msg+0x43c>
 801a0e4:	3301      	adds	r3, #1
 801a0e6:	212a      	movs	r1, #42	; 0x2a
 801a0e8:	287e      	cmp	r0, #126	; 0x7e
 801a0ea:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801a0ee:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a0f2:	fba5 c202 	umull	ip, r2, r5, r2
 801a0f6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a0fa:	fb01 3312 	mls	r3, r1, r2, r3
 801a0fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a102:	d055      	beq.n	801a1b0 <uxr_read_framed_msg+0x308>
 801a104:	2302      	movs	r3, #2
 801a106:	7023      	strb	r3, [r4, #0]
 801a108:	e6df      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a10a:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801a10e:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801a112:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a116:	1c5a      	adds	r2, r3, #1
 801a118:	459c      	cmp	ip, r3
 801a11a:	eb04 0103 	add.w	r1, r4, r3
 801a11e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801a122:	f43f af04 	beq.w	8019f2e <uxr_read_framed_msg+0x86>
 801a126:	fba5 0303 	umull	r0, r3, r5, r3
 801a12a:	7889      	ldrb	r1, [r1, #2]
 801a12c:	089b      	lsrs	r3, r3, #2
 801a12e:	297e      	cmp	r1, #126	; 0x7e
 801a130:	fb0e 2313 	mls	r3, lr, r3, r2
 801a134:	b2db      	uxtb	r3, r3
 801a136:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a13a:	d1ec      	bne.n	801a116 <uxr_read_framed_msg+0x26e>
 801a13c:	2301      	movs	r3, #1
 801a13e:	7023      	strb	r3, [r4, #0]
 801a140:	e6c3      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a142:	1c50      	adds	r0, r2, #1
 801a144:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801a148:	3202      	adds	r2, #2
 801a14a:	0841      	lsrs	r1, r0, #1
 801a14c:	fba5 c101 	umull	ip, r1, r5, r1
 801a150:	0889      	lsrs	r1, r1, #2
 801a152:	fb0b 0111 	mls	r1, fp, r1, r0
 801a156:	1860      	adds	r0, r4, r1
 801a158:	b2c9      	uxtb	r1, r1
 801a15a:	458a      	cmp	sl, r1
 801a15c:	f43f af42 	beq.w	8019fe4 <uxr_read_framed_msg+0x13c>
 801a160:	0851      	lsrs	r1, r2, #1
 801a162:	7880      	ldrb	r0, [r0, #2]
 801a164:	fba5 a101 	umull	sl, r1, r5, r1
 801a168:	287e      	cmp	r0, #126	; 0x7e
 801a16a:	f080 0c20 	eor.w	ip, r0, #32
 801a16e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a172:	fb0b 2211 	mls	r2, fp, r1, r2
 801a176:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a17a:	f47f af14 	bne.w	8019fa6 <uxr_read_framed_msg+0xfe>
 801a17e:	459e      	cmp	lr, r3
 801a180:	f43f af33 	beq.w	8019fea <uxr_read_framed_msg+0x142>
 801a184:	2301      	movs	r3, #1
 801a186:	7023      	strb	r3, [r4, #0]
 801a188:	e69f      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a18c:	9300      	str	r3, [sp, #0]
 801a18e:	2301      	movs	r3, #1
 801a190:	9301      	str	r3, [sp, #4]
 801a192:	464a      	mov	r2, r9
 801a194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a196:	4641      	mov	r1, r8
 801a198:	4620      	mov	r0, r4
 801a19a:	f7ff fdf1 	bl	8019d80 <uxr_framing_read_transport>
 801a19e:	2800      	cmp	r0, #0
 801a1a0:	f43f aec5 	beq.w	8019f2e <uxr_read_framed_msg+0x86>
 801a1a4:	7823      	ldrb	r3, [r4, #0]
 801a1a6:	e690      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a1a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1aa:	9300      	str	r3, [sp, #0]
 801a1ac:	2302      	movs	r3, #2
 801a1ae:	e7ef      	b.n	801a190 <uxr_read_framed_msg+0x2e8>
 801a1b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1b2:	464a      	mov	r2, r9
 801a1b4:	4641      	mov	r1, r8
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	9300      	str	r3, [sp, #0]
 801a1ba:	2304      	movs	r3, #4
 801a1bc:	9301      	str	r3, [sp, #4]
 801a1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1c0:	f7ff fdde 	bl	8019d80 <uxr_framing_read_transport>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d1ed      	bne.n	801a1a4 <uxr_read_framed_msg+0x2fc>
 801a1c8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a1cc:	2b7e      	cmp	r3, #126	; 0x7e
 801a1ce:	d0e9      	beq.n	801a1a4 <uxr_read_framed_msg+0x2fc>
 801a1d0:	e6ad      	b.n	8019f2e <uxr_read_framed_msg+0x86>
 801a1d2:	bf00      	nop
 801a1d4:	30c30c31 	.word	0x30c30c31
 801a1d8:	08022edc 	.word	0x08022edc
 801a1dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1de:	9300      	str	r3, [sp, #0]
 801a1e0:	2305      	movs	r3, #5
 801a1e2:	9301      	str	r3, [sp, #4]
 801a1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1e6:	f7ff fdcb 	bl	8019d80 <uxr_framing_read_transport>
 801a1ea:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a1ee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	f43f ae9b 	beq.w	8019f2e <uxr_read_framed_msg+0x86>
 801a1f8:	e664      	b.n	8019ec4 <uxr_read_framed_msg+0x1c>
 801a1fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1fc:	9300      	str	r3, [sp, #0]
 801a1fe:	2303      	movs	r3, #3
 801a200:	e7c6      	b.n	801a190 <uxr_read_framed_msg+0x2e8>
 801a202:	2305      	movs	r3, #5
 801a204:	7023      	strb	r3, [r4, #0]
 801a206:	e660      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a208:	f43f aeef 	beq.w	8019fea <uxr_read_framed_msg+0x142>
 801a20c:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801a210:	d094      	beq.n	801a13c <uxr_read_framed_msg+0x294>
 801a212:	ebae 0303 	sub.w	r3, lr, r3
 801a216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a218:	3302      	adds	r3, #2
 801a21a:	9200      	str	r2, [sp, #0]
 801a21c:	e7b8      	b.n	801a190 <uxr_read_framed_msg+0x2e8>
 801a21e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a222:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a224:	7013      	strb	r3, [r2, #0]
 801a226:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801a228:	b003      	add	sp, #12
 801a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a22e:	1c59      	adds	r1, r3, #1
 801a230:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a234:	084a      	lsrs	r2, r1, #1
 801a236:	fba5 e202 	umull	lr, r2, r5, r2
 801a23a:	0892      	lsrs	r2, r2, #2
 801a23c:	fb0c 1212 	mls	r2, ip, r2, r1
 801a240:	b2d1      	uxtb	r1, r2
 801a242:	4288      	cmp	r0, r1
 801a244:	d0b0      	beq.n	801a1a8 <uxr_read_framed_msg+0x300>
 801a246:	3302      	adds	r3, #2
 801a248:	4422      	add	r2, r4
 801a24a:	7891      	ldrb	r1, [r2, #2]
 801a24c:	085a      	lsrs	r2, r3, #1
 801a24e:	fba5 0202 	umull	r0, r2, r5, r2
 801a252:	297e      	cmp	r1, #126	; 0x7e
 801a254:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a258:	fb0c 3312 	mls	r3, ip, r2, r3
 801a25c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a260:	f000 80a1 	beq.w	801a3a6 <uxr_read_framed_msg+0x4fe>
 801a264:	f081 0120 	eor.w	r1, r1, #32
 801a268:	e680      	b.n	8019f6c <uxr_read_framed_msg+0xc4>
 801a26a:	f103 0c01 	add.w	ip, r3, #1
 801a26e:	202a      	movs	r0, #42	; 0x2a
 801a270:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a274:	fba5 e202 	umull	lr, r2, r5, r2
 801a278:	0892      	lsrs	r2, r2, #2
 801a27a:	fb00 c212 	mls	r2, r0, r2, ip
 801a27e:	fa5f fc82 	uxtb.w	ip, r2
 801a282:	4561      	cmp	r1, ip
 801a284:	d081      	beq.n	801a18a <uxr_read_framed_msg+0x2e2>
 801a286:	3302      	adds	r3, #2
 801a288:	4422      	add	r2, r4
 801a28a:	0859      	lsrs	r1, r3, #1
 801a28c:	7892      	ldrb	r2, [r2, #2]
 801a28e:	fba5 c101 	umull	ip, r1, r5, r1
 801a292:	2a7e      	cmp	r2, #126	; 0x7e
 801a294:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a298:	fb00 3311 	mls	r3, r0, r1, r3
 801a29c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a2a0:	f000 8091 	beq.w	801a3c6 <uxr_read_framed_msg+0x51e>
 801a2a4:	f082 0220 	eor.w	r2, r2, #32
 801a2a8:	e636      	b.n	8019f18 <uxr_read_framed_msg+0x70>
 801a2aa:	1c51      	adds	r1, r2, #1
 801a2ac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a2b0:	084b      	lsrs	r3, r1, #1
 801a2b2:	fba5 e303 	umull	lr, r3, r5, r3
 801a2b6:	089b      	lsrs	r3, r3, #2
 801a2b8:	fb0c 1313 	mls	r3, ip, r3, r1
 801a2bc:	b2d9      	uxtb	r1, r3
 801a2be:	4288      	cmp	r0, r1
 801a2c0:	d09b      	beq.n	801a1fa <uxr_read_framed_msg+0x352>
 801a2c2:	3202      	adds	r2, #2
 801a2c4:	4423      	add	r3, r4
 801a2c6:	0850      	lsrs	r0, r2, #1
 801a2c8:	789b      	ldrb	r3, [r3, #2]
 801a2ca:	fba5 1000 	umull	r1, r0, r5, r0
 801a2ce:	2b7e      	cmp	r3, #126	; 0x7e
 801a2d0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a2d4:	fb0c 2210 	mls	r2, ip, r0, r2
 801a2d8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a2dc:	d077      	beq.n	801a3ce <uxr_read_framed_msg+0x526>
 801a2de:	f083 0120 	eor.w	r1, r3, #32
 801a2e2:	e6ea      	b.n	801a0ba <uxr_read_framed_msg+0x212>
 801a2e4:	f103 0c01 	add.w	ip, r3, #1
 801a2e8:	202a      	movs	r0, #42	; 0x2a
 801a2ea:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a2ee:	fba5 e202 	umull	lr, r2, r5, r2
 801a2f2:	0892      	lsrs	r2, r2, #2
 801a2f4:	fb00 c212 	mls	r2, r0, r2, ip
 801a2f8:	fa5f fc82 	uxtb.w	ip, r2
 801a2fc:	4561      	cmp	r1, ip
 801a2fe:	f43f af57 	beq.w	801a1b0 <uxr_read_framed_msg+0x308>
 801a302:	3302      	adds	r3, #2
 801a304:	4422      	add	r2, r4
 801a306:	7891      	ldrb	r1, [r2, #2]
 801a308:	085a      	lsrs	r2, r3, #1
 801a30a:	fba5 c202 	umull	ip, r2, r5, r2
 801a30e:	297e      	cmp	r1, #126	; 0x7e
 801a310:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a314:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a318:	fb00 3312 	mls	r3, r0, r2, r3
 801a31c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a320:	f43f af46 	beq.w	801a1b0 <uxr_read_framed_msg+0x308>
 801a324:	f081 0120 	eor.w	r1, r1, #32
 801a328:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a32c:	e6ea      	b.n	801a104 <uxr_read_framed_msg+0x25c>
 801a32e:	1c59      	adds	r1, r3, #1
 801a330:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a334:	084a      	lsrs	r2, r1, #1
 801a336:	fba5 e202 	umull	lr, r2, r5, r2
 801a33a:	0892      	lsrs	r2, r2, #2
 801a33c:	fb0c 1212 	mls	r2, ip, r2, r1
 801a340:	b2d1      	uxtb	r1, r2
 801a342:	4288      	cmp	r0, r1
 801a344:	f43f af21 	beq.w	801a18a <uxr_read_framed_msg+0x2e2>
 801a348:	3302      	adds	r3, #2
 801a34a:	4422      	add	r2, r4
 801a34c:	7891      	ldrb	r1, [r2, #2]
 801a34e:	085a      	lsrs	r2, r3, #1
 801a350:	fba5 0202 	umull	r0, r2, r5, r2
 801a354:	297e      	cmp	r1, #126	; 0x7e
 801a356:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a35a:	fb0c 3312 	mls	r3, ip, r2, r3
 801a35e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a362:	d030      	beq.n	801a3c6 <uxr_read_framed_msg+0x51e>
 801a364:	f081 0120 	eor.w	r1, r1, #32
 801a368:	e65d      	b.n	801a026 <uxr_read_framed_msg+0x17e>
 801a36a:	1c59      	adds	r1, r3, #1
 801a36c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a370:	084a      	lsrs	r2, r1, #1
 801a372:	fba5 e202 	umull	lr, r2, r5, r2
 801a376:	0892      	lsrs	r2, r2, #2
 801a378:	fb0c 1212 	mls	r2, ip, r2, r1
 801a37c:	b2d1      	uxtb	r1, r2
 801a37e:	4288      	cmp	r0, r1
 801a380:	f43f af12 	beq.w	801a1a8 <uxr_read_framed_msg+0x300>
 801a384:	3302      	adds	r3, #2
 801a386:	4422      	add	r2, r4
 801a388:	7891      	ldrb	r1, [r2, #2]
 801a38a:	085a      	lsrs	r2, r3, #1
 801a38c:	fba5 0202 	umull	r0, r2, r5, r2
 801a390:	297e      	cmp	r1, #126	; 0x7e
 801a392:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a396:	fb0c 3312 	mls	r3, ip, r2, r3
 801a39a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a39e:	d002      	beq.n	801a3a6 <uxr_read_framed_msg+0x4fe>
 801a3a0:	f081 0120 	eor.w	r1, r1, #32
 801a3a4:	e66a      	b.n	801a07c <uxr_read_framed_msg+0x1d4>
 801a3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a3a8:	9300      	str	r3, [sp, #0]
 801a3aa:	2302      	movs	r3, #2
 801a3ac:	9301      	str	r3, [sp, #4]
 801a3ae:	464a      	mov	r2, r9
 801a3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3b2:	4641      	mov	r1, r8
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	f7ff fce3 	bl	8019d80 <uxr_framing_read_transport>
 801a3ba:	2800      	cmp	r0, #0
 801a3bc:	f47f aef2 	bne.w	801a1a4 <uxr_read_framed_msg+0x2fc>
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	7023      	strb	r3, [r4, #0]
 801a3c4:	e581      	b.n	8019eca <uxr_read_framed_msg+0x22>
 801a3c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a3c8:	9300      	str	r3, [sp, #0]
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	e7ee      	b.n	801a3ac <uxr_read_framed_msg+0x504>
 801a3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a3d0:	9300      	str	r3, [sp, #0]
 801a3d2:	2303      	movs	r3, #3
 801a3d4:	e7ea      	b.n	801a3ac <uxr_read_framed_msg+0x504>
 801a3d6:	bf00      	nop

0801a3d8 <uxr_stream_id>:
 801a3d8:	2901      	cmp	r1, #1
 801a3da:	4684      	mov	ip, r0
 801a3dc:	b500      	push	{lr}
 801a3de:	b083      	sub	sp, #12
 801a3e0:	d01f      	beq.n	801a422 <uxr_stream_id+0x4a>
 801a3e2:	2902      	cmp	r1, #2
 801a3e4:	f04f 0e00 	mov.w	lr, #0
 801a3e8:	d020      	beq.n	801a42c <uxr_stream_id+0x54>
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	f36e 0307 	bfi	r3, lr, #0, #8
 801a3f2:	f36c 230f 	bfi	r3, ip, #8, #8
 801a3f6:	f361 4317 	bfi	r3, r1, #16, #8
 801a3fa:	f362 631f 	bfi	r3, r2, #24, #8
 801a3fe:	fa5f fc83 	uxtb.w	ip, r3
 801a402:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a406:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a40a:	0e1b      	lsrs	r3, r3, #24
 801a40c:	f36c 0007 	bfi	r0, ip, #0, #8
 801a410:	f361 200f 	bfi	r0, r1, #8, #8
 801a414:	f362 4017 	bfi	r0, r2, #16, #8
 801a418:	f363 601f 	bfi	r0, r3, #24, #8
 801a41c:	b003      	add	sp, #12
 801a41e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a422:	f100 0e01 	add.w	lr, r0, #1
 801a426:	fa5f fe8e 	uxtb.w	lr, lr
 801a42a:	e7de      	b.n	801a3ea <uxr_stream_id+0x12>
 801a42c:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 801a430:	e7db      	b.n	801a3ea <uxr_stream_id+0x12>
 801a432:	bf00      	nop

0801a434 <uxr_stream_id_from_raw>:
 801a434:	b082      	sub	sp, #8
 801a436:	b130      	cbz	r0, 801a446 <uxr_stream_id_from_raw+0x12>
 801a438:	0603      	lsls	r3, r0, #24
 801a43a:	d421      	bmi.n	801a480 <uxr_stream_id_from_raw+0x4c>
 801a43c:	1e42      	subs	r2, r0, #1
 801a43e:	f04f 0c01 	mov.w	ip, #1
 801a442:	b2d2      	uxtb	r2, r2
 801a444:	e001      	b.n	801a44a <uxr_stream_id_from_raw+0x16>
 801a446:	4684      	mov	ip, r0
 801a448:	4602      	mov	r2, r0
 801a44a:	2300      	movs	r3, #0
 801a44c:	f360 0307 	bfi	r3, r0, #0, #8
 801a450:	2000      	movs	r0, #0
 801a452:	f362 230f 	bfi	r3, r2, #8, #8
 801a456:	f36c 4317 	bfi	r3, ip, #16, #8
 801a45a:	f361 631f 	bfi	r3, r1, #24, #8
 801a45e:	fa5f fc83 	uxtb.w	ip, r3
 801a462:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a466:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a46a:	0e1b      	lsrs	r3, r3, #24
 801a46c:	f36c 0007 	bfi	r0, ip, #0, #8
 801a470:	f361 200f 	bfi	r0, r1, #8, #8
 801a474:	f362 4017 	bfi	r0, r2, #16, #8
 801a478:	f363 601f 	bfi	r0, r3, #24, #8
 801a47c:	b002      	add	sp, #8
 801a47e:	4770      	bx	lr
 801a480:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801a484:	f04f 0c02 	mov.w	ip, #2
 801a488:	e7df      	b.n	801a44a <uxr_stream_id_from_raw+0x16>
 801a48a:	bf00      	nop

0801a48c <uxr_init_stream_storage>:
 801a48c:	2300      	movs	r3, #0
 801a48e:	7403      	strb	r3, [r0, #16]
 801a490:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801a494:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801a498:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801a49c:	4770      	bx	lr
 801a49e:	bf00      	nop

0801a4a0 <uxr_reset_stream_storage>:
 801a4a0:	b570      	push	{r4, r5, r6, lr}
 801a4a2:	7c03      	ldrb	r3, [r0, #16]
 801a4a4:	4604      	mov	r4, r0
 801a4a6:	b14b      	cbz	r3, 801a4bc <uxr_reset_stream_storage+0x1c>
 801a4a8:	4606      	mov	r6, r0
 801a4aa:	2500      	movs	r5, #0
 801a4ac:	4630      	mov	r0, r6
 801a4ae:	3501      	adds	r5, #1
 801a4b0:	f005 f94e 	bl	801f750 <uxr_reset_output_best_effort_stream>
 801a4b4:	7c23      	ldrb	r3, [r4, #16]
 801a4b6:	3610      	adds	r6, #16
 801a4b8:	42ab      	cmp	r3, r5
 801a4ba:	d8f7      	bhi.n	801a4ac <uxr_reset_stream_storage+0xc>
 801a4bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a4c0:	b15b      	cbz	r3, 801a4da <uxr_reset_stream_storage+0x3a>
 801a4c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a4c6:	2500      	movs	r5, #0
 801a4c8:	4630      	mov	r0, r6
 801a4ca:	3501      	adds	r5, #1
 801a4cc:	f004 ff46 	bl	801f35c <uxr_reset_input_best_effort_stream>
 801a4d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a4d4:	3602      	adds	r6, #2
 801a4d6:	42ab      	cmp	r3, r5
 801a4d8:	d8f6      	bhi.n	801a4c8 <uxr_reset_stream_storage+0x28>
 801a4da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801a4de:	b15b      	cbz	r3, 801a4f8 <uxr_reset_stream_storage+0x58>
 801a4e0:	f104 0618 	add.w	r6, r4, #24
 801a4e4:	2500      	movs	r5, #0
 801a4e6:	4630      	mov	r0, r6
 801a4e8:	3501      	adds	r5, #1
 801a4ea:	f005 f9dd 	bl	801f8a8 <uxr_reset_output_reliable_stream>
 801a4ee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801a4f2:	3628      	adds	r6, #40	; 0x28
 801a4f4:	42ab      	cmp	r3, r5
 801a4f6:	d8f6      	bhi.n	801a4e6 <uxr_reset_stream_storage+0x46>
 801a4f8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801a4fc:	b15b      	cbz	r3, 801a516 <uxr_reset_stream_storage+0x76>
 801a4fe:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801a502:	2500      	movs	r5, #0
 801a504:	4630      	mov	r0, r6
 801a506:	3501      	adds	r5, #1
 801a508:	f004 ff94 	bl	801f434 <uxr_reset_input_reliable_stream>
 801a50c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801a510:	3618      	adds	r6, #24
 801a512:	42ab      	cmp	r3, r5
 801a514:	d8f6      	bhi.n	801a504 <uxr_reset_stream_storage+0x64>
 801a516:	bd70      	pop	{r4, r5, r6, pc}

0801a518 <uxr_add_output_best_effort_buffer>:
 801a518:	b510      	push	{r4, lr}
 801a51a:	7c04      	ldrb	r4, [r0, #16]
 801a51c:	b082      	sub	sp, #8
 801a51e:	f104 0c01 	add.w	ip, r4, #1
 801a522:	f880 c010 	strb.w	ip, [r0, #16]
 801a526:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801a52a:	f005 f907 	bl	801f73c <uxr_init_output_best_effort_stream>
 801a52e:	2201      	movs	r2, #1
 801a530:	4620      	mov	r0, r4
 801a532:	4611      	mov	r1, r2
 801a534:	b002      	add	sp, #8
 801a536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a53a:	f7ff bf4d 	b.w	801a3d8 <uxr_stream_id>
 801a53e:	bf00      	nop

0801a540 <uxr_add_output_reliable_buffer>:
 801a540:	b510      	push	{r4, lr}
 801a542:	b084      	sub	sp, #16
 801a544:	4684      	mov	ip, r0
 801a546:	2028      	movs	r0, #40	; 0x28
 801a548:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801a54c:	9400      	str	r4, [sp, #0]
 801a54e:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801a552:	fb00 c004 	mla	r0, r0, r4, ip
 801a556:	f104 0e01 	add.w	lr, r4, #1
 801a55a:	3018      	adds	r0, #24
 801a55c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 801a560:	f005 f96c 	bl	801f83c <uxr_init_output_reliable_stream>
 801a564:	2201      	movs	r2, #1
 801a566:	2102      	movs	r1, #2
 801a568:	4620      	mov	r0, r4
 801a56a:	b004      	add	sp, #16
 801a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a570:	f7ff bf32 	b.w	801a3d8 <uxr_stream_id>

0801a574 <uxr_add_input_best_effort_buffer>:
 801a574:	b510      	push	{r4, lr}
 801a576:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801a57a:	b082      	sub	sp, #8
 801a57c:	1c62      	adds	r2, r4, #1
 801a57e:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801a582:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801a586:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a58a:	f004 fee3 	bl	801f354 <uxr_init_input_best_effort_stream>
 801a58e:	2200      	movs	r2, #0
 801a590:	2101      	movs	r1, #1
 801a592:	4620      	mov	r0, r4
 801a594:	b002      	add	sp, #8
 801a596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a59a:	f7ff bf1d 	b.w	801a3d8 <uxr_stream_id>
 801a59e:	bf00      	nop

0801a5a0 <uxr_add_input_reliable_buffer>:
 801a5a0:	b510      	push	{r4, lr}
 801a5a2:	b084      	sub	sp, #16
 801a5a4:	4684      	mov	ip, r0
 801a5a6:	2018      	movs	r0, #24
 801a5a8:	9c06      	ldr	r4, [sp, #24]
 801a5aa:	9400      	str	r4, [sp, #0]
 801a5ac:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801a5b0:	fb00 c004 	mla	r0, r0, r4, ip
 801a5b4:	f104 0e01 	add.w	lr, r4, #1
 801a5b8:	3048      	adds	r0, #72	; 0x48
 801a5ba:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801a5be:	f004 ff13 	bl	801f3e8 <uxr_init_input_reliable_stream>
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	2102      	movs	r1, #2
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	b004      	add	sp, #16
 801a5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5ce:	f7ff bf03 	b.w	801a3d8 <uxr_stream_id>
 801a5d2:	bf00      	nop

0801a5d4 <uxr_get_output_best_effort_stream>:
 801a5d4:	7c03      	ldrb	r3, [r0, #16]
 801a5d6:	428b      	cmp	r3, r1
 801a5d8:	bf8c      	ite	hi
 801a5da:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801a5de:	2000      	movls	r0, #0
 801a5e0:	4770      	bx	lr
 801a5e2:	bf00      	nop

0801a5e4 <uxr_get_output_reliable_stream>:
 801a5e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801a5e8:	428b      	cmp	r3, r1
 801a5ea:	d904      	bls.n	801a5f6 <uxr_get_output_reliable_stream+0x12>
 801a5ec:	2328      	movs	r3, #40	; 0x28
 801a5ee:	fb03 0001 	mla	r0, r3, r1, r0
 801a5f2:	3018      	adds	r0, #24
 801a5f4:	4770      	bx	lr
 801a5f6:	2000      	movs	r0, #0
 801a5f8:	4770      	bx	lr
 801a5fa:	bf00      	nop

0801a5fc <uxr_get_input_best_effort_stream>:
 801a5fc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801a600:	428b      	cmp	r3, r1
 801a602:	d903      	bls.n	801a60c <uxr_get_input_best_effort_stream+0x10>
 801a604:	3121      	adds	r1, #33	; 0x21
 801a606:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a60a:	4770      	bx	lr
 801a60c:	2000      	movs	r0, #0
 801a60e:	4770      	bx	lr

0801a610 <uxr_get_input_reliable_stream>:
 801a610:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801a614:	428b      	cmp	r3, r1
 801a616:	d904      	bls.n	801a622 <uxr_get_input_reliable_stream+0x12>
 801a618:	2318      	movs	r3, #24
 801a61a:	fb03 0001 	mla	r0, r3, r1, r0
 801a61e:	3048      	adds	r0, #72	; 0x48
 801a620:	4770      	bx	lr
 801a622:	2000      	movs	r0, #0
 801a624:	4770      	bx	lr
 801a626:	bf00      	nop

0801a628 <uxr_output_streams_confirmed>:
 801a628:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801a62c:	b183      	cbz	r3, 801a650 <uxr_output_streams_confirmed+0x28>
 801a62e:	b570      	push	{r4, r5, r6, lr}
 801a630:	4606      	mov	r6, r0
 801a632:	f100 0518 	add.w	r5, r0, #24
 801a636:	2400      	movs	r4, #0
 801a638:	e000      	b.n	801a63c <uxr_output_streams_confirmed+0x14>
 801a63a:	b140      	cbz	r0, 801a64e <uxr_output_streams_confirmed+0x26>
 801a63c:	4628      	mov	r0, r5
 801a63e:	3401      	adds	r4, #1
 801a640:	f005 fba6 	bl	801fd90 <uxr_is_output_up_to_date>
 801a644:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801a648:	3528      	adds	r5, #40	; 0x28
 801a64a:	42a3      	cmp	r3, r4
 801a64c:	d8f5      	bhi.n	801a63a <uxr_output_streams_confirmed+0x12>
 801a64e:	bd70      	pop	{r4, r5, r6, pc}
 801a650:	2001      	movs	r0, #1
 801a652:	4770      	bx	lr

0801a654 <uxr_buffer_submessage_header>:
 801a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a656:	460e      	mov	r6, r1
 801a658:	2104      	movs	r1, #4
 801a65a:	4604      	mov	r4, r0
 801a65c:	4615      	mov	r5, r2
 801a65e:	461f      	mov	r7, r3
 801a660:	f7fa f8ba 	bl	80147d8 <ucdr_align_to>
 801a664:	2301      	movs	r3, #1
 801a666:	4631      	mov	r1, r6
 801a668:	4620      	mov	r0, r4
 801a66a:	ea47 0203 	orr.w	r2, r7, r3
 801a66e:	7523      	strb	r3, [r4, #20]
 801a670:	462b      	mov	r3, r5
 801a672:	f000 f8a5 	bl	801a7c0 <uxr_serialize_submessage_header>
 801a676:	4620      	mov	r0, r4
 801a678:	f7fa f8c4 	bl	8014804 <ucdr_buffer_remaining>
 801a67c:	42a8      	cmp	r0, r5
 801a67e:	bf34      	ite	cc
 801a680:	2000      	movcc	r0, #0
 801a682:	2001      	movcs	r0, #1
 801a684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a686:	bf00      	nop

0801a688 <uxr_read_submessage_header>:
 801a688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a68c:	4604      	mov	r4, r0
 801a68e:	460d      	mov	r5, r1
 801a690:	2104      	movs	r1, #4
 801a692:	4616      	mov	r6, r2
 801a694:	4698      	mov	r8, r3
 801a696:	f7fa f89f 	bl	80147d8 <ucdr_align_to>
 801a69a:	4620      	mov	r0, r4
 801a69c:	f7fa f8b2 	bl	8014804 <ucdr_buffer_remaining>
 801a6a0:	2803      	cmp	r0, #3
 801a6a2:	bf8c      	ite	hi
 801a6a4:	2701      	movhi	r7, #1
 801a6a6:	2700      	movls	r7, #0
 801a6a8:	d802      	bhi.n	801a6b0 <uxr_read_submessage_header+0x28>
 801a6aa:	4638      	mov	r0, r7
 801a6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6b0:	4633      	mov	r3, r6
 801a6b2:	4642      	mov	r2, r8
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	4629      	mov	r1, r5
 801a6b8:	f000 f896 	bl	801a7e8 <uxr_deserialize_submessage_header>
 801a6bc:	f898 3000 	ldrb.w	r3, [r8]
 801a6c0:	4638      	mov	r0, r7
 801a6c2:	f003 0201 	and.w	r2, r3, #1
 801a6c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a6ca:	f888 3000 	strb.w	r3, [r8]
 801a6ce:	7522      	strb	r2, [r4, #20]
 801a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a6d4 <uxr_submessage_padding>:
 801a6d4:	f010 0003 	ands.w	r0, r0, #3
 801a6d8:	bf18      	it	ne
 801a6da:	f1c0 0004 	rsbne	r0, r0, #4
 801a6de:	4770      	bx	lr

0801a6e0 <uxr_millis>:
 801a6e0:	b510      	push	{r4, lr}
 801a6e2:	b084      	sub	sp, #16
 801a6e4:	2001      	movs	r0, #1
 801a6e6:	4669      	mov	r1, sp
 801a6e8:	f7ea f836 	bl	8004758 <clock_gettime>
 801a6ec:	4908      	ldr	r1, [pc, #32]	; (801a710 <uxr_millis+0x30>)
 801a6ee:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801a6f2:	fba0 0301 	umull	r0, r3, r0, r1
 801a6f6:	1900      	adds	r0, r0, r4
 801a6f8:	fb01 3102 	mla	r1, r1, r2, r3
 801a6fc:	4a05      	ldr	r2, [pc, #20]	; (801a714 <uxr_millis+0x34>)
 801a6fe:	f04f 0300 	mov.w	r3, #0
 801a702:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801a706:	f7e5 ff11 	bl	800052c <__aeabi_ldivmod>
 801a70a:	b004      	add	sp, #16
 801a70c:	bd10      	pop	{r4, pc}
 801a70e:	bf00      	nop
 801a710:	3b9aca00 	.word	0x3b9aca00
 801a714:	000f4240 	.word	0x000f4240

0801a718 <uxr_nanos>:
 801a718:	b510      	push	{r4, lr}
 801a71a:	b084      	sub	sp, #16
 801a71c:	2001      	movs	r0, #1
 801a71e:	4669      	mov	r1, sp
 801a720:	f7ea f81a 	bl	8004758 <clock_gettime>
 801a724:	4a06      	ldr	r2, [pc, #24]	; (801a740 <uxr_nanos+0x28>)
 801a726:	9800      	ldr	r0, [sp, #0]
 801a728:	9902      	ldr	r1, [sp, #8]
 801a72a:	fba0 0302 	umull	r0, r3, r0, r2
 801a72e:	9c01      	ldr	r4, [sp, #4]
 801a730:	1840      	adds	r0, r0, r1
 801a732:	fb02 3304 	mla	r3, r2, r4, r3
 801a736:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801a73a:	b004      	add	sp, #16
 801a73c:	bd10      	pop	{r4, pc}
 801a73e:	bf00      	nop
 801a740:	3b9aca00 	.word	0x3b9aca00

0801a744 <uxr_serialize_message_header>:
 801a744:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a746:	4616      	mov	r6, r2
 801a748:	b083      	sub	sp, #12
 801a74a:	4604      	mov	r4, r0
 801a74c:	460d      	mov	r5, r1
 801a74e:	9301      	str	r3, [sp, #4]
 801a750:	9f08      	ldr	r7, [sp, #32]
 801a752:	f7f8 fc8d 	bl	8013070 <ucdr_serialize_uint8_t>
 801a756:	4631      	mov	r1, r6
 801a758:	4620      	mov	r0, r4
 801a75a:	f7f8 fc89 	bl	8013070 <ucdr_serialize_uint8_t>
 801a75e:	9a01      	ldr	r2, [sp, #4]
 801a760:	2101      	movs	r1, #1
 801a762:	4620      	mov	r0, r4
 801a764:	f7f8 fd30 	bl	80131c8 <ucdr_serialize_endian_uint16_t>
 801a768:	062b      	lsls	r3, r5, #24
 801a76a:	d501      	bpl.n	801a770 <uxr_serialize_message_header+0x2c>
 801a76c:	b003      	add	sp, #12
 801a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a770:	2204      	movs	r2, #4
 801a772:	4639      	mov	r1, r7
 801a774:	4620      	mov	r0, r4
 801a776:	b003      	add	sp, #12
 801a778:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a77c:	f004 bc5a 	b.w	801f034 <ucdr_serialize_array_uint8_t>

0801a780 <uxr_deserialize_message_header>:
 801a780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a782:	4616      	mov	r6, r2
 801a784:	b083      	sub	sp, #12
 801a786:	4604      	mov	r4, r0
 801a788:	460d      	mov	r5, r1
 801a78a:	9301      	str	r3, [sp, #4]
 801a78c:	9f08      	ldr	r7, [sp, #32]
 801a78e:	f7f8 fc85 	bl	801309c <ucdr_deserialize_uint8_t>
 801a792:	4631      	mov	r1, r6
 801a794:	4620      	mov	r0, r4
 801a796:	f7f8 fc81 	bl	801309c <ucdr_deserialize_uint8_t>
 801a79a:	9a01      	ldr	r2, [sp, #4]
 801a79c:	2101      	movs	r1, #1
 801a79e:	4620      	mov	r0, r4
 801a7a0:	f7f8 fe06 	bl	80133b0 <ucdr_deserialize_endian_uint16_t>
 801a7a4:	f995 3000 	ldrsb.w	r3, [r5]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	da01      	bge.n	801a7b0 <uxr_deserialize_message_header+0x30>
 801a7ac:	b003      	add	sp, #12
 801a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7b0:	2204      	movs	r2, #4
 801a7b2:	4639      	mov	r1, r7
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	b003      	add	sp, #12
 801a7b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a7bc:	f004 bc9e 	b.w	801f0fc <ucdr_deserialize_array_uint8_t>

0801a7c0 <uxr_serialize_submessage_header>:
 801a7c0:	b530      	push	{r4, r5, lr}
 801a7c2:	4615      	mov	r5, r2
 801a7c4:	b083      	sub	sp, #12
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	9301      	str	r3, [sp, #4]
 801a7ca:	f7f8 fc51 	bl	8013070 <ucdr_serialize_uint8_t>
 801a7ce:	4629      	mov	r1, r5
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	f7f8 fc4d 	bl	8013070 <ucdr_serialize_uint8_t>
 801a7d6:	9a01      	ldr	r2, [sp, #4]
 801a7d8:	2101      	movs	r1, #1
 801a7da:	4620      	mov	r0, r4
 801a7dc:	b003      	add	sp, #12
 801a7de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7e2:	f7f8 bcf1 	b.w	80131c8 <ucdr_serialize_endian_uint16_t>
 801a7e6:	bf00      	nop

0801a7e8 <uxr_deserialize_submessage_header>:
 801a7e8:	b530      	push	{r4, r5, lr}
 801a7ea:	4615      	mov	r5, r2
 801a7ec:	b083      	sub	sp, #12
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	9301      	str	r3, [sp, #4]
 801a7f2:	f7f8 fc53 	bl	801309c <ucdr_deserialize_uint8_t>
 801a7f6:	4629      	mov	r1, r5
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	f7f8 fc4f 	bl	801309c <ucdr_deserialize_uint8_t>
 801a7fe:	9a01      	ldr	r2, [sp, #4]
 801a800:	2101      	movs	r1, #1
 801a802:	4620      	mov	r0, r4
 801a804:	b003      	add	sp, #12
 801a806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a80a:	f7f8 bdd1 	b.w	80133b0 <ucdr_deserialize_endian_uint16_t>
 801a80e:	bf00      	nop

0801a810 <uxr_serialize_CLIENT_Representation>:
 801a810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a814:	2204      	movs	r2, #4
 801a816:	460e      	mov	r6, r1
 801a818:	4605      	mov	r5, r0
 801a81a:	f004 fc0b 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a81e:	4607      	mov	r7, r0
 801a820:	2202      	movs	r2, #2
 801a822:	1d31      	adds	r1, r6, #4
 801a824:	4628      	mov	r0, r5
 801a826:	f004 fc05 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a82a:	4038      	ands	r0, r7
 801a82c:	2202      	movs	r2, #2
 801a82e:	1db1      	adds	r1, r6, #6
 801a830:	b2c7      	uxtb	r7, r0
 801a832:	4628      	mov	r0, r5
 801a834:	f004 fbfe 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a838:	2204      	movs	r2, #4
 801a83a:	4007      	ands	r7, r0
 801a83c:	f106 0108 	add.w	r1, r6, #8
 801a840:	4628      	mov	r0, r5
 801a842:	f004 fbf7 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a846:	4007      	ands	r7, r0
 801a848:	7b31      	ldrb	r1, [r6, #12]
 801a84a:	4628      	mov	r0, r5
 801a84c:	f7f8 fc10 	bl	8013070 <ucdr_serialize_uint8_t>
 801a850:	7b71      	ldrb	r1, [r6, #13]
 801a852:	4007      	ands	r7, r0
 801a854:	4628      	mov	r0, r5
 801a856:	f7f8 fbdd 	bl	8013014 <ucdr_serialize_bool>
 801a85a:	7b73      	ldrb	r3, [r6, #13]
 801a85c:	ea07 0800 	and.w	r8, r7, r0
 801a860:	b93b      	cbnz	r3, 801a872 <uxr_serialize_CLIENT_Representation+0x62>
 801a862:	8bb1      	ldrh	r1, [r6, #28]
 801a864:	4628      	mov	r0, r5
 801a866:	f7f8 fc2f 	bl	80130c8 <ucdr_serialize_uint16_t>
 801a86a:	ea08 0000 	and.w	r0, r8, r0
 801a86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a872:	6931      	ldr	r1, [r6, #16]
 801a874:	4628      	mov	r0, r5
 801a876:	f7f8 fe11 	bl	801349c <ucdr_serialize_uint32_t>
 801a87a:	6933      	ldr	r3, [r6, #16]
 801a87c:	b1e3      	cbz	r3, 801a8b8 <uxr_serialize_CLIENT_Representation+0xa8>
 801a87e:	b1c0      	cbz	r0, 801a8b2 <uxr_serialize_CLIENT_Representation+0xa2>
 801a880:	4637      	mov	r7, r6
 801a882:	f04f 0900 	mov.w	r9, #0
 801a886:	e000      	b.n	801a88a <uxr_serialize_CLIENT_Representation+0x7a>
 801a888:	b19c      	cbz	r4, 801a8b2 <uxr_serialize_CLIENT_Representation+0xa2>
 801a88a:	6979      	ldr	r1, [r7, #20]
 801a88c:	4628      	mov	r0, r5
 801a88e:	f004 fd49 	bl	801f324 <ucdr_serialize_string>
 801a892:	69b9      	ldr	r1, [r7, #24]
 801a894:	4604      	mov	r4, r0
 801a896:	4628      	mov	r0, r5
 801a898:	f004 fd44 	bl	801f324 <ucdr_serialize_string>
 801a89c:	f109 0901 	add.w	r9, r9, #1
 801a8a0:	6933      	ldr	r3, [r6, #16]
 801a8a2:	4004      	ands	r4, r0
 801a8a4:	3708      	adds	r7, #8
 801a8a6:	4599      	cmp	r9, r3
 801a8a8:	b2e4      	uxtb	r4, r4
 801a8aa:	d3ed      	bcc.n	801a888 <uxr_serialize_CLIENT_Representation+0x78>
 801a8ac:	ea08 0804 	and.w	r8, r8, r4
 801a8b0:	e7d7      	b.n	801a862 <uxr_serialize_CLIENT_Representation+0x52>
 801a8b2:	f04f 0800 	mov.w	r8, #0
 801a8b6:	e7d4      	b.n	801a862 <uxr_serialize_CLIENT_Representation+0x52>
 801a8b8:	ea08 0800 	and.w	r8, r8, r0
 801a8bc:	e7d1      	b.n	801a862 <uxr_serialize_CLIENT_Representation+0x52>
 801a8be:	bf00      	nop

0801a8c0 <uxr_deserialize_CLIENT_Representation>:
 801a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8c4:	2204      	movs	r2, #4
 801a8c6:	460c      	mov	r4, r1
 801a8c8:	4605      	mov	r5, r0
 801a8ca:	f004 fc17 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801a8ce:	4607      	mov	r7, r0
 801a8d0:	2202      	movs	r2, #2
 801a8d2:	1d21      	adds	r1, r4, #4
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	f004 fc11 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801a8da:	4038      	ands	r0, r7
 801a8dc:	2202      	movs	r2, #2
 801a8de:	1da1      	adds	r1, r4, #6
 801a8e0:	b2c6      	uxtb	r6, r0
 801a8e2:	4628      	mov	r0, r5
 801a8e4:	f004 fc0a 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801a8e8:	2204      	movs	r2, #4
 801a8ea:	4006      	ands	r6, r0
 801a8ec:	f104 0108 	add.w	r1, r4, #8
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	f004 fc03 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801a8f6:	4006      	ands	r6, r0
 801a8f8:	f104 010c 	add.w	r1, r4, #12
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	f7f8 fbcd 	bl	801309c <ucdr_deserialize_uint8_t>
 801a902:	f104 010d 	add.w	r1, r4, #13
 801a906:	ea06 0700 	and.w	r7, r6, r0
 801a90a:	4628      	mov	r0, r5
 801a90c:	f7f8 fb98 	bl	8013040 <ucdr_deserialize_bool>
 801a910:	7b63      	ldrb	r3, [r4, #13]
 801a912:	4007      	ands	r7, r0
 801a914:	b93b      	cbnz	r3, 801a926 <uxr_deserialize_CLIENT_Representation+0x66>
 801a916:	f104 011c 	add.w	r1, r4, #28
 801a91a:	4628      	mov	r0, r5
 801a91c:	f7f8 fcd4 	bl	80132c8 <ucdr_deserialize_uint16_t>
 801a920:	4038      	ands	r0, r7
 801a922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a926:	f104 0110 	add.w	r1, r4, #16
 801a92a:	4628      	mov	r0, r5
 801a92c:	f7f8 fee6 	bl	80136fc <ucdr_deserialize_uint32_t>
 801a930:	6923      	ldr	r3, [r4, #16]
 801a932:	2b01      	cmp	r3, #1
 801a934:	d903      	bls.n	801a93e <uxr_deserialize_CLIENT_Representation+0x7e>
 801a936:	2301      	movs	r3, #1
 801a938:	2700      	movs	r7, #0
 801a93a:	75ab      	strb	r3, [r5, #22]
 801a93c:	e7eb      	b.n	801a916 <uxr_deserialize_CLIENT_Representation+0x56>
 801a93e:	b30b      	cbz	r3, 801a984 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a940:	b1f0      	cbz	r0, 801a980 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a942:	46a0      	mov	r8, r4
 801a944:	f04f 0900 	mov.w	r9, #0
 801a948:	e000      	b.n	801a94c <uxr_deserialize_CLIENT_Representation+0x8c>
 801a94a:	b1ce      	cbz	r6, 801a980 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a94c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a950:	f108 0808 	add.w	r8, r8, #8
 801a954:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a958:	4628      	mov	r0, r5
 801a95a:	f004 fcf3 	bl	801f344 <ucdr_deserialize_string>
 801a95e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a962:	4606      	mov	r6, r0
 801a964:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a968:	4628      	mov	r0, r5
 801a96a:	f109 0901 	add.w	r9, r9, #1
 801a96e:	f004 fce9 	bl	801f344 <ucdr_deserialize_string>
 801a972:	6923      	ldr	r3, [r4, #16]
 801a974:	4006      	ands	r6, r0
 801a976:	4599      	cmp	r9, r3
 801a978:	b2f6      	uxtb	r6, r6
 801a97a:	d3e6      	bcc.n	801a94a <uxr_deserialize_CLIENT_Representation+0x8a>
 801a97c:	4037      	ands	r7, r6
 801a97e:	e7ca      	b.n	801a916 <uxr_deserialize_CLIENT_Representation+0x56>
 801a980:	2700      	movs	r7, #0
 801a982:	e7c8      	b.n	801a916 <uxr_deserialize_CLIENT_Representation+0x56>
 801a984:	4007      	ands	r7, r0
 801a986:	e7c6      	b.n	801a916 <uxr_deserialize_CLIENT_Representation+0x56>

0801a988 <uxr_serialize_AGENT_Representation>:
 801a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a98c:	2204      	movs	r2, #4
 801a98e:	460f      	mov	r7, r1
 801a990:	4605      	mov	r5, r0
 801a992:	f004 fb4f 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a996:	4604      	mov	r4, r0
 801a998:	2202      	movs	r2, #2
 801a99a:	1d39      	adds	r1, r7, #4
 801a99c:	4628      	mov	r0, r5
 801a99e:	f004 fb49 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a9a2:	4020      	ands	r0, r4
 801a9a4:	2202      	movs	r2, #2
 801a9a6:	1db9      	adds	r1, r7, #6
 801a9a8:	b2c4      	uxtb	r4, r0
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	f004 fb42 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801a9b0:	7a39      	ldrb	r1, [r7, #8]
 801a9b2:	4004      	ands	r4, r0
 801a9b4:	4628      	mov	r0, r5
 801a9b6:	f7f8 fb2d 	bl	8013014 <ucdr_serialize_bool>
 801a9ba:	7a3b      	ldrb	r3, [r7, #8]
 801a9bc:	ea00 0804 	and.w	r8, r0, r4
 801a9c0:	b913      	cbnz	r3, 801a9c8 <uxr_serialize_AGENT_Representation+0x40>
 801a9c2:	4640      	mov	r0, r8
 801a9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9c8:	68f9      	ldr	r1, [r7, #12]
 801a9ca:	4628      	mov	r0, r5
 801a9cc:	f7f8 fd66 	bl	801349c <ucdr_serialize_uint32_t>
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	b303      	cbz	r3, 801aa16 <uxr_serialize_AGENT_Representation+0x8e>
 801a9d4:	b1d0      	cbz	r0, 801aa0c <uxr_serialize_AGENT_Representation+0x84>
 801a9d6:	463e      	mov	r6, r7
 801a9d8:	f04f 0900 	mov.w	r9, #0
 801a9dc:	e000      	b.n	801a9e0 <uxr_serialize_AGENT_Representation+0x58>
 801a9de:	b1ac      	cbz	r4, 801aa0c <uxr_serialize_AGENT_Representation+0x84>
 801a9e0:	6931      	ldr	r1, [r6, #16]
 801a9e2:	4628      	mov	r0, r5
 801a9e4:	f004 fc9e 	bl	801f324 <ucdr_serialize_string>
 801a9e8:	6971      	ldr	r1, [r6, #20]
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	f004 fc99 	bl	801f324 <ucdr_serialize_string>
 801a9f2:	f109 0901 	add.w	r9, r9, #1
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	4004      	ands	r4, r0
 801a9fa:	3608      	adds	r6, #8
 801a9fc:	4599      	cmp	r9, r3
 801a9fe:	b2e4      	uxtb	r4, r4
 801aa00:	d3ed      	bcc.n	801a9de <uxr_serialize_AGENT_Representation+0x56>
 801aa02:	ea08 0804 	and.w	r8, r8, r4
 801aa06:	4640      	mov	r0, r8
 801aa08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa0c:	f04f 0800 	mov.w	r8, #0
 801aa10:	4640      	mov	r0, r8
 801aa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa16:	ea08 0800 	and.w	r8, r8, r0
 801aa1a:	e7d2      	b.n	801a9c2 <uxr_serialize_AGENT_Representation+0x3a>

0801aa1c <uxr_serialize_DATAWRITER_Representation>:
 801aa1c:	b570      	push	{r4, r5, r6, lr}
 801aa1e:	460d      	mov	r5, r1
 801aa20:	7809      	ldrb	r1, [r1, #0]
 801aa22:	4606      	mov	r6, r0
 801aa24:	f7f8 fb24 	bl	8013070 <ucdr_serialize_uint8_t>
 801aa28:	4604      	mov	r4, r0
 801aa2a:	b130      	cbz	r0, 801aa3a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801aa2c:	782b      	ldrb	r3, [r5, #0]
 801aa2e:	2b02      	cmp	r3, #2
 801aa30:	d00c      	beq.n	801aa4c <uxr_serialize_DATAWRITER_Representation+0x30>
 801aa32:	2b03      	cmp	r3, #3
 801aa34:	d010      	beq.n	801aa58 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d008      	beq.n	801aa4c <uxr_serialize_DATAWRITER_Representation+0x30>
 801aa3a:	2202      	movs	r2, #2
 801aa3c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801aa40:	4630      	mov	r0, r6
 801aa42:	f004 faf7 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801aa46:	4020      	ands	r0, r4
 801aa48:	b2c0      	uxtb	r0, r0
 801aa4a:	bd70      	pop	{r4, r5, r6, pc}
 801aa4c:	6869      	ldr	r1, [r5, #4]
 801aa4e:	4630      	mov	r0, r6
 801aa50:	f004 fc68 	bl	801f324 <ucdr_serialize_string>
 801aa54:	4604      	mov	r4, r0
 801aa56:	e7f0      	b.n	801aa3a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801aa58:	4629      	mov	r1, r5
 801aa5a:	4630      	mov	r0, r6
 801aa5c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801aa60:	3104      	adds	r1, #4
 801aa62:	f7fd faa3 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801aa66:	4604      	mov	r4, r0
 801aa68:	e7e7      	b.n	801aa3a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801aa6a:	bf00      	nop

0801aa6c <uxr_serialize_ObjectVariant.part.0>:
 801aa6c:	b570      	push	{r4, r5, r6, lr}
 801aa6e:	780b      	ldrb	r3, [r1, #0]
 801aa70:	460c      	mov	r4, r1
 801aa72:	4605      	mov	r5, r0
 801aa74:	3b01      	subs	r3, #1
 801aa76:	2b0d      	cmp	r3, #13
 801aa78:	d854      	bhi.n	801ab24 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801aa7a:	e8df f003 	tbb	[pc, r3]
 801aa7e:	0730      	.short	0x0730
 801aa80:	07071b1b 	.word	0x07071b1b
 801aa84:	0c530707 	.word	0x0c530707
 801aa88:	494e0c0c 	.word	0x494e0c0c
 801aa8c:	3104      	adds	r1, #4
 801aa8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa92:	f7ff bfc3 	b.w	801aa1c <uxr_serialize_DATAWRITER_Representation>
 801aa96:	7909      	ldrb	r1, [r1, #4]
 801aa98:	f7f8 faea 	bl	8013070 <ucdr_serialize_uint8_t>
 801aa9c:	b1e8      	cbz	r0, 801aada <uxr_serialize_ObjectVariant.part.0+0x6e>
 801aa9e:	7923      	ldrb	r3, [r4, #4]
 801aaa0:	2b01      	cmp	r3, #1
 801aaa2:	d001      	beq.n	801aaa8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801aaa4:	2b02      	cmp	r3, #2
 801aaa6:	d13d      	bne.n	801ab24 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801aaa8:	68a1      	ldr	r1, [r4, #8]
 801aaaa:	4628      	mov	r0, r5
 801aaac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aab0:	f004 bc38 	b.w	801f324 <ucdr_serialize_string>
 801aab4:	7909      	ldrb	r1, [r1, #4]
 801aab6:	f7f8 fadb 	bl	8013070 <ucdr_serialize_uint8_t>
 801aaba:	4606      	mov	r6, r0
 801aabc:	b120      	cbz	r0, 801aac8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801aabe:	7923      	ldrb	r3, [r4, #4]
 801aac0:	2b02      	cmp	r3, #2
 801aac2:	d039      	beq.n	801ab38 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801aac4:	2b03      	cmp	r3, #3
 801aac6:	d02f      	beq.n	801ab28 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801aac8:	2202      	movs	r2, #2
 801aaca:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801aace:	4628      	mov	r0, r5
 801aad0:	f004 fab0 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801aad4:	4030      	ands	r0, r6
 801aad6:	b2c0      	uxtb	r0, r0
 801aad8:	bd70      	pop	{r4, r5, r6, pc}
 801aada:	2000      	movs	r0, #0
 801aadc:	bd70      	pop	{r4, r5, r6, pc}
 801aade:	7909      	ldrb	r1, [r1, #4]
 801aae0:	f7f8 fac6 	bl	8013070 <ucdr_serialize_uint8_t>
 801aae4:	4606      	mov	r6, r0
 801aae6:	b158      	cbz	r0, 801ab00 <uxr_serialize_ObjectVariant.part.0+0x94>
 801aae8:	7923      	ldrb	r3, [r4, #4]
 801aaea:	2b02      	cmp	r3, #2
 801aaec:	d003      	beq.n	801aaf6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801aaee:	2b03      	cmp	r3, #3
 801aaf0:	d028      	beq.n	801ab44 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801aaf2:	2b01      	cmp	r3, #1
 801aaf4:	d104      	bne.n	801ab00 <uxr_serialize_ObjectVariant.part.0+0x94>
 801aaf6:	68a1      	ldr	r1, [r4, #8]
 801aaf8:	4628      	mov	r0, r5
 801aafa:	f004 fc13 	bl	801f324 <ucdr_serialize_string>
 801aafe:	4606      	mov	r6, r0
 801ab00:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801ab04:	4628      	mov	r0, r5
 801ab06:	f7f8 ffef 	bl	8013ae8 <ucdr_serialize_int16_t>
 801ab0a:	4030      	ands	r0, r6
 801ab0c:	b2c0      	uxtb	r0, r0
 801ab0e:	bd70      	pop	{r4, r5, r6, pc}
 801ab10:	3104      	adds	r1, #4
 801ab12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab16:	f7ff be7b 	b.w	801a810 <uxr_serialize_CLIENT_Representation>
 801ab1a:	3104      	adds	r1, #4
 801ab1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab20:	f7ff bf32 	b.w	801a988 <uxr_serialize_AGENT_Representation>
 801ab24:	2001      	movs	r0, #1
 801ab26:	bd70      	pop	{r4, r5, r6, pc}
 801ab28:	68a2      	ldr	r2, [r4, #8]
 801ab2a:	f104 010c 	add.w	r1, r4, #12
 801ab2e:	4628      	mov	r0, r5
 801ab30:	f7fd fa3c 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801ab34:	4606      	mov	r6, r0
 801ab36:	e7c7      	b.n	801aac8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801ab38:	68a1      	ldr	r1, [r4, #8]
 801ab3a:	4628      	mov	r0, r5
 801ab3c:	f004 fbf2 	bl	801f324 <ucdr_serialize_string>
 801ab40:	4606      	mov	r6, r0
 801ab42:	e7c1      	b.n	801aac8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801ab44:	68a2      	ldr	r2, [r4, #8]
 801ab46:	f104 010c 	add.w	r1, r4, #12
 801ab4a:	4628      	mov	r0, r5
 801ab4c:	f7fd fa2e 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801ab50:	4606      	mov	r6, r0
 801ab52:	e7d5      	b.n	801ab00 <uxr_serialize_ObjectVariant.part.0+0x94>

0801ab54 <uxr_deserialize_DATAWRITER_Representation>:
 801ab54:	b570      	push	{r4, r5, r6, lr}
 801ab56:	4606      	mov	r6, r0
 801ab58:	460d      	mov	r5, r1
 801ab5a:	f7f8 fa9f 	bl	801309c <ucdr_deserialize_uint8_t>
 801ab5e:	4604      	mov	r4, r0
 801ab60:	b130      	cbz	r0, 801ab70 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ab62:	782b      	ldrb	r3, [r5, #0]
 801ab64:	2b02      	cmp	r3, #2
 801ab66:	d00c      	beq.n	801ab82 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801ab68:	2b03      	cmp	r3, #3
 801ab6a:	d012      	beq.n	801ab92 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801ab6c:	2b01      	cmp	r3, #1
 801ab6e:	d008      	beq.n	801ab82 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801ab70:	2202      	movs	r2, #2
 801ab72:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801ab76:	4630      	mov	r0, r6
 801ab78:	f004 fac0 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801ab7c:	4020      	ands	r0, r4
 801ab7e:	b2c0      	uxtb	r0, r0
 801ab80:	bd70      	pop	{r4, r5, r6, pc}
 801ab82:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab86:	6869      	ldr	r1, [r5, #4]
 801ab88:	4630      	mov	r0, r6
 801ab8a:	f004 fbdb 	bl	801f344 <ucdr_deserialize_string>
 801ab8e:	4604      	mov	r4, r0
 801ab90:	e7ee      	b.n	801ab70 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ab92:	1d2b      	adds	r3, r5, #4
 801ab94:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab98:	f105 0108 	add.w	r1, r5, #8
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	f7fd fa17 	bl	8017fd0 <ucdr_deserialize_sequence_uint8_t>
 801aba2:	4604      	mov	r4, r0
 801aba4:	e7e4      	b.n	801ab70 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801aba6:	bf00      	nop

0801aba8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	460d      	mov	r5, r1
 801abac:	7809      	ldrb	r1, [r1, #0]
 801abae:	4606      	mov	r6, r0
 801abb0:	f7f8 fa30 	bl	8013014 <ucdr_serialize_bool>
 801abb4:	782b      	ldrb	r3, [r5, #0]
 801abb6:	4604      	mov	r4, r0
 801abb8:	b94b      	cbnz	r3, 801abce <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801abba:	7a29      	ldrb	r1, [r5, #8]
 801abbc:	4630      	mov	r0, r6
 801abbe:	f7f8 fa29 	bl	8013014 <ucdr_serialize_bool>
 801abc2:	7a2b      	ldrb	r3, [r5, #8]
 801abc4:	4004      	ands	r4, r0
 801abc6:	b2e4      	uxtb	r4, r4
 801abc8:	b943      	cbnz	r3, 801abdc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801abca:	4620      	mov	r0, r4
 801abcc:	bd70      	pop	{r4, r5, r6, pc}
 801abce:	6869      	ldr	r1, [r5, #4]
 801abd0:	4630      	mov	r0, r6
 801abd2:	f004 fba7 	bl	801f324 <ucdr_serialize_string>
 801abd6:	4004      	ands	r4, r0
 801abd8:	b2e4      	uxtb	r4, r4
 801abda:	e7ee      	b.n	801abba <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801abdc:	68e9      	ldr	r1, [r5, #12]
 801abde:	4630      	mov	r0, r6
 801abe0:	f004 fba0 	bl	801f324 <ucdr_serialize_string>
 801abe4:	4004      	ands	r4, r0
 801abe6:	4620      	mov	r0, r4
 801abe8:	bd70      	pop	{r4, r5, r6, pc}
 801abea:	bf00      	nop

0801abec <uxr_serialize_OBJK_Topic_Binary>:
 801abec:	b570      	push	{r4, r5, r6, lr}
 801abee:	460d      	mov	r5, r1
 801abf0:	4606      	mov	r6, r0
 801abf2:	6809      	ldr	r1, [r1, #0]
 801abf4:	f004 fb96 	bl	801f324 <ucdr_serialize_string>
 801abf8:	4604      	mov	r4, r0
 801abfa:	7929      	ldrb	r1, [r5, #4]
 801abfc:	4630      	mov	r0, r6
 801abfe:	f7f8 fa09 	bl	8013014 <ucdr_serialize_bool>
 801ac02:	792b      	ldrb	r3, [r5, #4]
 801ac04:	4004      	ands	r4, r0
 801ac06:	b2e4      	uxtb	r4, r4
 801ac08:	b943      	cbnz	r3, 801ac1c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801ac0a:	7b29      	ldrb	r1, [r5, #12]
 801ac0c:	4630      	mov	r0, r6
 801ac0e:	f7f8 fa01 	bl	8013014 <ucdr_serialize_bool>
 801ac12:	7b2b      	ldrb	r3, [r5, #12]
 801ac14:	4004      	ands	r4, r0
 801ac16:	b93b      	cbnz	r3, 801ac28 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801ac18:	4620      	mov	r0, r4
 801ac1a:	bd70      	pop	{r4, r5, r6, pc}
 801ac1c:	68a9      	ldr	r1, [r5, #8]
 801ac1e:	4630      	mov	r0, r6
 801ac20:	f004 fb80 	bl	801f324 <ucdr_serialize_string>
 801ac24:	4004      	ands	r4, r0
 801ac26:	e7f0      	b.n	801ac0a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801ac28:	6929      	ldr	r1, [r5, #16]
 801ac2a:	4630      	mov	r0, r6
 801ac2c:	f004 fb7a 	bl	801f324 <ucdr_serialize_string>
 801ac30:	4004      	ands	r4, r0
 801ac32:	b2e4      	uxtb	r4, r4
 801ac34:	4620      	mov	r0, r4
 801ac36:	bd70      	pop	{r4, r5, r6, pc}

0801ac38 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac3c:	460c      	mov	r4, r1
 801ac3e:	7809      	ldrb	r1, [r1, #0]
 801ac40:	4606      	mov	r6, r0
 801ac42:	f7f8 f9e7 	bl	8013014 <ucdr_serialize_bool>
 801ac46:	7823      	ldrb	r3, [r4, #0]
 801ac48:	4605      	mov	r5, r0
 801ac4a:	b96b      	cbnz	r3, 801ac68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801ac4c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801ac50:	4630      	mov	r0, r6
 801ac52:	f7f8 f9df 	bl	8013014 <ucdr_serialize_bool>
 801ac56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801ac5a:	4005      	ands	r5, r0
 801ac5c:	b2ed      	uxtb	r5, r5
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d169      	bne.n	801ad36 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801ac62:	4628      	mov	r0, r5
 801ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac68:	6861      	ldr	r1, [r4, #4]
 801ac6a:	4630      	mov	r0, r6
 801ac6c:	f7f8 fc16 	bl	801349c <ucdr_serialize_uint32_t>
 801ac70:	6863      	ldr	r3, [r4, #4]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d06b      	beq.n	801ad4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801ac76:	2800      	cmp	r0, #0
 801ac78:	d067      	beq.n	801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac7a:	68a1      	ldr	r1, [r4, #8]
 801ac7c:	4630      	mov	r0, r6
 801ac7e:	f004 fb51 	bl	801f324 <ucdr_serialize_string>
 801ac82:	6863      	ldr	r3, [r4, #4]
 801ac84:	2b01      	cmp	r3, #1
 801ac86:	d953      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac88:	2800      	cmp	r0, #0
 801ac8a:	d05e      	beq.n	801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac8c:	68e1      	ldr	r1, [r4, #12]
 801ac8e:	4630      	mov	r0, r6
 801ac90:	f004 fb48 	bl	801f324 <ucdr_serialize_string>
 801ac94:	6863      	ldr	r3, [r4, #4]
 801ac96:	2b02      	cmp	r3, #2
 801ac98:	d94a      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac9a:	2800      	cmp	r0, #0
 801ac9c:	d055      	beq.n	801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac9e:	6921      	ldr	r1, [r4, #16]
 801aca0:	4630      	mov	r0, r6
 801aca2:	f004 fb3f 	bl	801f324 <ucdr_serialize_string>
 801aca6:	6863      	ldr	r3, [r4, #4]
 801aca8:	2b03      	cmp	r3, #3
 801acaa:	d941      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801acac:	2800      	cmp	r0, #0
 801acae:	d04c      	beq.n	801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801acb0:	6961      	ldr	r1, [r4, #20]
 801acb2:	4630      	mov	r0, r6
 801acb4:	f004 fb36 	bl	801f324 <ucdr_serialize_string>
 801acb8:	6863      	ldr	r3, [r4, #4]
 801acba:	2b04      	cmp	r3, #4
 801acbc:	d938      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801acbe:	2800      	cmp	r0, #0
 801acc0:	d043      	beq.n	801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801acc2:	69a1      	ldr	r1, [r4, #24]
 801acc4:	4630      	mov	r0, r6
 801acc6:	f004 fb2d 	bl	801f324 <ucdr_serialize_string>
 801acca:	6863      	ldr	r3, [r4, #4]
 801accc:	2b05      	cmp	r3, #5
 801acce:	d92f      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801acd0:	2800      	cmp	r0, #0
 801acd2:	d03a      	beq.n	801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801acd4:	69e1      	ldr	r1, [r4, #28]
 801acd6:	4630      	mov	r0, r6
 801acd8:	f004 fb24 	bl	801f324 <ucdr_serialize_string>
 801acdc:	6863      	ldr	r3, [r4, #4]
 801acde:	2b06      	cmp	r3, #6
 801ace0:	d926      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ace2:	b390      	cbz	r0, 801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ace4:	6a21      	ldr	r1, [r4, #32]
 801ace6:	4630      	mov	r0, r6
 801ace8:	f004 fb1c 	bl	801f324 <ucdr_serialize_string>
 801acec:	6863      	ldr	r3, [r4, #4]
 801acee:	2b07      	cmp	r3, #7
 801acf0:	d91e      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801acf2:	b350      	cbz	r0, 801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801acf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801acf6:	4630      	mov	r0, r6
 801acf8:	f004 fb14 	bl	801f324 <ucdr_serialize_string>
 801acfc:	6863      	ldr	r3, [r4, #4]
 801acfe:	2b08      	cmp	r3, #8
 801ad00:	d916      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ad02:	b310      	cbz	r0, 801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ad04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ad06:	4630      	mov	r0, r6
 801ad08:	f004 fb0c 	bl	801f324 <ucdr_serialize_string>
 801ad0c:	6863      	ldr	r3, [r4, #4]
 801ad0e:	2b09      	cmp	r3, #9
 801ad10:	d90e      	bls.n	801ad30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ad12:	b1d0      	cbz	r0, 801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ad14:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801ad18:	2709      	movs	r7, #9
 801ad1a:	e000      	b.n	801ad1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801ad1c:	b1a8      	cbz	r0, 801ad4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ad1e:	f858 1b04 	ldr.w	r1, [r8], #4
 801ad22:	4630      	mov	r0, r6
 801ad24:	f004 fafe 	bl	801f324 <ucdr_serialize_string>
 801ad28:	3701      	adds	r7, #1
 801ad2a:	6862      	ldr	r2, [r4, #4]
 801ad2c:	4297      	cmp	r7, r2
 801ad2e:	d3f5      	bcc.n	801ad1c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801ad30:	4005      	ands	r5, r0
 801ad32:	b2ed      	uxtb	r5, r5
 801ad34:	e78a      	b.n	801ac4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801ad36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ad38:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ad3c:	4630      	mov	r0, r6
 801ad3e:	f7fd f935 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801ad42:	4005      	ands	r5, r0
 801ad44:	4628      	mov	r0, r5
 801ad46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad4a:	2500      	movs	r5, #0
 801ad4c:	e77e      	b.n	801ac4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801ad4e:	4028      	ands	r0, r5
 801ad50:	b2c5      	uxtb	r5, r0
 801ad52:	e77b      	b.n	801ac4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801ad54 <uxr_serialize_OBJK_Subscriber_Binary>:
 801ad54:	b570      	push	{r4, r5, r6, lr}
 801ad56:	460d      	mov	r5, r1
 801ad58:	7809      	ldrb	r1, [r1, #0]
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	f7f8 f95a 	bl	8013014 <ucdr_serialize_bool>
 801ad60:	782b      	ldrb	r3, [r5, #0]
 801ad62:	4604      	mov	r4, r0
 801ad64:	b94b      	cbnz	r3, 801ad7a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801ad66:	7a29      	ldrb	r1, [r5, #8]
 801ad68:	4630      	mov	r0, r6
 801ad6a:	f7f8 f953 	bl	8013014 <ucdr_serialize_bool>
 801ad6e:	7a2b      	ldrb	r3, [r5, #8]
 801ad70:	4004      	ands	r4, r0
 801ad72:	b2e4      	uxtb	r4, r4
 801ad74:	b943      	cbnz	r3, 801ad88 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801ad76:	4620      	mov	r0, r4
 801ad78:	bd70      	pop	{r4, r5, r6, pc}
 801ad7a:	6869      	ldr	r1, [r5, #4]
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	f004 fad1 	bl	801f324 <ucdr_serialize_string>
 801ad82:	4004      	ands	r4, r0
 801ad84:	b2e4      	uxtb	r4, r4
 801ad86:	e7ee      	b.n	801ad66 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801ad88:	f105 010c 	add.w	r1, r5, #12
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f7ff ff53 	bl	801ac38 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801ad92:	4004      	ands	r4, r0
 801ad94:	4620      	mov	r0, r4
 801ad96:	bd70      	pop	{r4, r5, r6, pc}

0801ad98 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801ad98:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801ad9c:	4688      	mov	r8, r1
 801ad9e:	4681      	mov	r9, r0
 801ada0:	8809      	ldrh	r1, [r1, #0]
 801ada2:	f7f8 f991 	bl	80130c8 <ucdr_serialize_uint16_t>
 801ada6:	4606      	mov	r6, r0
 801ada8:	f898 1002 	ldrb.w	r1, [r8, #2]
 801adac:	4648      	mov	r0, r9
 801adae:	f7f8 f931 	bl	8013014 <ucdr_serialize_bool>
 801adb2:	f898 3002 	ldrb.w	r3, [r8, #2]
 801adb6:	4006      	ands	r6, r0
 801adb8:	b2f5      	uxtb	r5, r6
 801adba:	b9eb      	cbnz	r3, 801adf8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801adbc:	f898 1006 	ldrb.w	r1, [r8, #6]
 801adc0:	4648      	mov	r0, r9
 801adc2:	f7f8 f927 	bl	8013014 <ucdr_serialize_bool>
 801adc6:	f898 3006 	ldrb.w	r3, [r8, #6]
 801adca:	4005      	ands	r5, r0
 801adcc:	bb7b      	cbnz	r3, 801ae2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801adce:	f898 100c 	ldrb.w	r1, [r8, #12]
 801add2:	4648      	mov	r0, r9
 801add4:	f7f8 f91e 	bl	8013014 <ucdr_serialize_bool>
 801add8:	f898 300c 	ldrb.w	r3, [r8, #12]
 801addc:	4005      	ands	r5, r0
 801adde:	b9f3      	cbnz	r3, 801ae1e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801ade0:	f898 1014 	ldrb.w	r1, [r8, #20]
 801ade4:	4648      	mov	r0, r9
 801ade6:	f7f8 f915 	bl	8013014 <ucdr_serialize_bool>
 801adea:	f898 3014 	ldrb.w	r3, [r8, #20]
 801adee:	4005      	ands	r5, r0
 801adf0:	b94b      	cbnz	r3, 801ae06 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801adf2:	4628      	mov	r0, r5
 801adf4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801adf8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801adfc:	4648      	mov	r0, r9
 801adfe:	f7f8 f963 	bl	80130c8 <ucdr_serialize_uint16_t>
 801ae02:	4005      	ands	r5, r0
 801ae04:	e7da      	b.n	801adbc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801ae06:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801ae0a:	f108 011c 	add.w	r1, r8, #28
 801ae0e:	4648      	mov	r0, r9
 801ae10:	f7fd f8cc 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801ae14:	4028      	ands	r0, r5
 801ae16:	b2c5      	uxtb	r5, r0
 801ae18:	4628      	mov	r0, r5
 801ae1a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801ae1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ae22:	4648      	mov	r0, r9
 801ae24:	f7f8 fb3a 	bl	801349c <ucdr_serialize_uint32_t>
 801ae28:	4028      	ands	r0, r5
 801ae2a:	b2c5      	uxtb	r5, r0
 801ae2c:	e7d8      	b.n	801ade0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801ae2e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ae32:	4648      	mov	r0, r9
 801ae34:	f7f8 fb32 	bl	801349c <ucdr_serialize_uint32_t>
 801ae38:	4028      	ands	r0, r5
 801ae3a:	b2c5      	uxtb	r5, r0
 801ae3c:	e7c7      	b.n	801adce <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801ae3e:	bf00      	nop

0801ae40 <uxr_serialize_OBJK_DataReader_Binary>:
 801ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae42:	2202      	movs	r2, #2
 801ae44:	460c      	mov	r4, r1
 801ae46:	4606      	mov	r6, r0
 801ae48:	f004 f8f4 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801ae4c:	4605      	mov	r5, r0
 801ae4e:	78a1      	ldrb	r1, [r4, #2]
 801ae50:	4630      	mov	r0, r6
 801ae52:	f7f8 f8df 	bl	8013014 <ucdr_serialize_bool>
 801ae56:	78a3      	ldrb	r3, [r4, #2]
 801ae58:	4005      	ands	r5, r0
 801ae5a:	b2ed      	uxtb	r5, r5
 801ae5c:	b90b      	cbnz	r3, 801ae62 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801ae5e:	4628      	mov	r0, r5
 801ae60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae62:	f104 0108 	add.w	r1, r4, #8
 801ae66:	4630      	mov	r0, r6
 801ae68:	f7ff ff96 	bl	801ad98 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801ae6c:	4607      	mov	r7, r0
 801ae6e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ae72:	4630      	mov	r0, r6
 801ae74:	f7f8 f8ce 	bl	8013014 <ucdr_serialize_bool>
 801ae78:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ae7c:	4038      	ands	r0, r7
 801ae7e:	b2c7      	uxtb	r7, r0
 801ae80:	b95b      	cbnz	r3, 801ae9a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801ae82:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801ae86:	4630      	mov	r0, r6
 801ae88:	f7f8 f8c4 	bl	8013014 <ucdr_serialize_bool>
 801ae8c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ae90:	4007      	ands	r7, r0
 801ae92:	b94b      	cbnz	r3, 801aea8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801ae94:	403d      	ands	r5, r7
 801ae96:	4628      	mov	r0, r5
 801ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae9a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801ae9e:	4630      	mov	r0, r6
 801aea0:	f7f8 fd52 	bl	8013948 <ucdr_serialize_uint64_t>
 801aea4:	4007      	ands	r7, r0
 801aea6:	e7ec      	b.n	801ae82 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801aea8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801aeaa:	4630      	mov	r0, r6
 801aeac:	f004 fa3a 	bl	801f324 <ucdr_serialize_string>
 801aeb0:	4007      	ands	r7, r0
 801aeb2:	b2ff      	uxtb	r7, r7
 801aeb4:	e7ee      	b.n	801ae94 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801aeb6:	bf00      	nop

0801aeb8 <uxr_deserialize_ObjectVariant>:
 801aeb8:	b570      	push	{r4, r5, r6, lr}
 801aeba:	4605      	mov	r5, r0
 801aebc:	460e      	mov	r6, r1
 801aebe:	f7f8 f8ed 	bl	801309c <ucdr_deserialize_uint8_t>
 801aec2:	b168      	cbz	r0, 801aee0 <uxr_deserialize_ObjectVariant+0x28>
 801aec4:	7833      	ldrb	r3, [r6, #0]
 801aec6:	4604      	mov	r4, r0
 801aec8:	3b01      	subs	r3, #1
 801aeca:	2b0d      	cmp	r3, #13
 801aecc:	d809      	bhi.n	801aee2 <uxr_deserialize_ObjectVariant+0x2a>
 801aece:	e8df f003 	tbb	[pc, r3]
 801aed2:	0a41      	.short	0x0a41
 801aed4:	0a0a2323 	.word	0x0a0a2323
 801aed8:	10080a0a 	.word	0x10080a0a
 801aedc:	565c1010 	.word	0x565c1010
 801aee0:	2400      	movs	r4, #0
 801aee2:	4620      	mov	r0, r4
 801aee4:	bd70      	pop	{r4, r5, r6, pc}
 801aee6:	1d31      	adds	r1, r6, #4
 801aee8:	4628      	mov	r0, r5
 801aeea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aeee:	f7ff be31 	b.w	801ab54 <uxr_deserialize_DATAWRITER_Representation>
 801aef2:	1d31      	adds	r1, r6, #4
 801aef4:	4628      	mov	r0, r5
 801aef6:	f7f8 f8d1 	bl	801309c <ucdr_deserialize_uint8_t>
 801aefa:	2800      	cmp	r0, #0
 801aefc:	d0f0      	beq.n	801aee0 <uxr_deserialize_ObjectVariant+0x28>
 801aefe:	7933      	ldrb	r3, [r6, #4]
 801af00:	2b01      	cmp	r3, #1
 801af02:	d001      	beq.n	801af08 <uxr_deserialize_ObjectVariant+0x50>
 801af04:	2b02      	cmp	r3, #2
 801af06:	d1ec      	bne.n	801aee2 <uxr_deserialize_ObjectVariant+0x2a>
 801af08:	68b1      	ldr	r1, [r6, #8]
 801af0a:	4628      	mov	r0, r5
 801af0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801af10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af14:	f004 ba16 	b.w	801f344 <ucdr_deserialize_string>
 801af18:	1d31      	adds	r1, r6, #4
 801af1a:	4628      	mov	r0, r5
 801af1c:	f7f8 f8be 	bl	801309c <ucdr_deserialize_uint8_t>
 801af20:	4604      	mov	r4, r0
 801af22:	b170      	cbz	r0, 801af42 <uxr_deserialize_ObjectVariant+0x8a>
 801af24:	7933      	ldrb	r3, [r6, #4]
 801af26:	2b02      	cmp	r3, #2
 801af28:	d04c      	beq.n	801afc4 <uxr_deserialize_ObjectVariant+0x10c>
 801af2a:	2b03      	cmp	r3, #3
 801af2c:	d109      	bne.n	801af42 <uxr_deserialize_ObjectVariant+0x8a>
 801af2e:	f106 0308 	add.w	r3, r6, #8
 801af32:	f44f 7200 	mov.w	r2, #512	; 0x200
 801af36:	f106 010c 	add.w	r1, r6, #12
 801af3a:	4628      	mov	r0, r5
 801af3c:	f7fd f848 	bl	8017fd0 <ucdr_deserialize_sequence_uint8_t>
 801af40:	4604      	mov	r4, r0
 801af42:	2202      	movs	r2, #2
 801af44:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801af48:	4628      	mov	r0, r5
 801af4a:	f004 f8d7 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801af4e:	4020      	ands	r0, r4
 801af50:	b2c4      	uxtb	r4, r0
 801af52:	e7c6      	b.n	801aee2 <uxr_deserialize_ObjectVariant+0x2a>
 801af54:	1d31      	adds	r1, r6, #4
 801af56:	4628      	mov	r0, r5
 801af58:	f7f8 f8a0 	bl	801309c <ucdr_deserialize_uint8_t>
 801af5c:	4604      	mov	r4, r0
 801af5e:	b130      	cbz	r0, 801af6e <uxr_deserialize_ObjectVariant+0xb6>
 801af60:	7933      	ldrb	r3, [r6, #4]
 801af62:	2b02      	cmp	r3, #2
 801af64:	d036      	beq.n	801afd4 <uxr_deserialize_ObjectVariant+0x11c>
 801af66:	2b03      	cmp	r3, #3
 801af68:	d03c      	beq.n	801afe4 <uxr_deserialize_ObjectVariant+0x12c>
 801af6a:	2b01      	cmp	r3, #1
 801af6c:	d032      	beq.n	801afd4 <uxr_deserialize_ObjectVariant+0x11c>
 801af6e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801af72:	4628      	mov	r0, r5
 801af74:	f7f8 fe38 	bl	8013be8 <ucdr_deserialize_int16_t>
 801af78:	4020      	ands	r0, r4
 801af7a:	b2c4      	uxtb	r4, r0
 801af7c:	e7b1      	b.n	801aee2 <uxr_deserialize_ObjectVariant+0x2a>
 801af7e:	1d31      	adds	r1, r6, #4
 801af80:	4628      	mov	r0, r5
 801af82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af86:	f7ff bc9b 	b.w	801a8c0 <uxr_deserialize_CLIENT_Representation>
 801af8a:	2204      	movs	r2, #4
 801af8c:	4628      	mov	r0, r5
 801af8e:	18b1      	adds	r1, r6, r2
 801af90:	f004 f8b4 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801af94:	4604      	mov	r4, r0
 801af96:	2202      	movs	r2, #2
 801af98:	f106 0108 	add.w	r1, r6, #8
 801af9c:	4628      	mov	r0, r5
 801af9e:	f004 f8ad 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801afa2:	4004      	ands	r4, r0
 801afa4:	2202      	movs	r2, #2
 801afa6:	f106 010a 	add.w	r1, r6, #10
 801afaa:	4628      	mov	r0, r5
 801afac:	b2e4      	uxtb	r4, r4
 801afae:	f004 f8a5 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801afb2:	4603      	mov	r3, r0
 801afb4:	f106 010c 	add.w	r1, r6, #12
 801afb8:	4628      	mov	r0, r5
 801afba:	401c      	ands	r4, r3
 801afbc:	f7f8 f840 	bl	8013040 <ucdr_deserialize_bool>
 801afc0:	4004      	ands	r4, r0
 801afc2:	e78e      	b.n	801aee2 <uxr_deserialize_ObjectVariant+0x2a>
 801afc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afc8:	68b1      	ldr	r1, [r6, #8]
 801afca:	4628      	mov	r0, r5
 801afcc:	f004 f9ba 	bl	801f344 <ucdr_deserialize_string>
 801afd0:	4604      	mov	r4, r0
 801afd2:	e7b6      	b.n	801af42 <uxr_deserialize_ObjectVariant+0x8a>
 801afd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afd8:	68b1      	ldr	r1, [r6, #8]
 801afda:	4628      	mov	r0, r5
 801afdc:	f004 f9b2 	bl	801f344 <ucdr_deserialize_string>
 801afe0:	4604      	mov	r4, r0
 801afe2:	e7c4      	b.n	801af6e <uxr_deserialize_ObjectVariant+0xb6>
 801afe4:	f106 0308 	add.w	r3, r6, #8
 801afe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afec:	f106 010c 	add.w	r1, r6, #12
 801aff0:	4628      	mov	r0, r5
 801aff2:	f7fc ffed 	bl	8017fd0 <ucdr_deserialize_sequence_uint8_t>
 801aff6:	4604      	mov	r4, r0
 801aff8:	e7b9      	b.n	801af6e <uxr_deserialize_ObjectVariant+0xb6>
 801affa:	bf00      	nop

0801affc <uxr_deserialize_BaseObjectRequest>:
 801affc:	b570      	push	{r4, r5, r6, lr}
 801affe:	2202      	movs	r2, #2
 801b000:	4605      	mov	r5, r0
 801b002:	460e      	mov	r6, r1
 801b004:	f004 f87a 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b008:	2202      	movs	r2, #2
 801b00a:	4604      	mov	r4, r0
 801b00c:	4628      	mov	r0, r5
 801b00e:	18b1      	adds	r1, r6, r2
 801b010:	f004 f874 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b014:	4020      	ands	r0, r4
 801b016:	b2c0      	uxtb	r0, r0
 801b018:	bd70      	pop	{r4, r5, r6, pc}
 801b01a:	bf00      	nop

0801b01c <uxr_serialize_ActivityInfoVariant>:
 801b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b020:	460e      	mov	r6, r1
 801b022:	7809      	ldrb	r1, [r1, #0]
 801b024:	4680      	mov	r8, r0
 801b026:	f7f8 f823 	bl	8013070 <ucdr_serialize_uint8_t>
 801b02a:	4607      	mov	r7, r0
 801b02c:	b138      	cbz	r0, 801b03e <uxr_serialize_ActivityInfoVariant+0x22>
 801b02e:	7833      	ldrb	r3, [r6, #0]
 801b030:	2b06      	cmp	r3, #6
 801b032:	f000 8081 	beq.w	801b138 <uxr_serialize_ActivityInfoVariant+0x11c>
 801b036:	2b0d      	cmp	r3, #13
 801b038:	d014      	beq.n	801b064 <uxr_serialize_ActivityInfoVariant+0x48>
 801b03a:	2b05      	cmp	r3, #5
 801b03c:	d002      	beq.n	801b044 <uxr_serialize_ActivityInfoVariant+0x28>
 801b03e:	4638      	mov	r0, r7
 801b040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b044:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b048:	4640      	mov	r0, r8
 801b04a:	f7f8 fd4d 	bl	8013ae8 <ucdr_serialize_int16_t>
 801b04e:	4607      	mov	r7, r0
 801b050:	4640      	mov	r0, r8
 801b052:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801b056:	f7f8 fc77 	bl	8013948 <ucdr_serialize_uint64_t>
 801b05a:	4038      	ands	r0, r7
 801b05c:	b2c7      	uxtb	r7, r0
 801b05e:	4638      	mov	r0, r7
 801b060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b064:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b068:	4640      	mov	r0, r8
 801b06a:	f7f8 fd3d 	bl	8013ae8 <ucdr_serialize_int16_t>
 801b06e:	68f1      	ldr	r1, [r6, #12]
 801b070:	4607      	mov	r7, r0
 801b072:	4640      	mov	r0, r8
 801b074:	f7f8 fa12 	bl	801349c <ucdr_serialize_uint32_t>
 801b078:	68f3      	ldr	r3, [r6, #12]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d0ed      	beq.n	801b05a <uxr_serialize_ActivityInfoVariant+0x3e>
 801b07e:	b318      	cbz	r0, 801b0c8 <uxr_serialize_ActivityInfoVariant+0xac>
 801b080:	f106 090c 	add.w	r9, r6, #12
 801b084:	2400      	movs	r4, #0
 801b086:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801b08a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801b08e:	7c29      	ldrb	r1, [r5, #16]
 801b090:	4640      	mov	r0, r8
 801b092:	f7f7 ffed 	bl	8013070 <ucdr_serialize_uint8_t>
 801b096:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801b09a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b09e:	2800      	cmp	r0, #0
 801b0a0:	d051      	beq.n	801b146 <uxr_serialize_ActivityInfoVariant+0x12a>
 801b0a2:	7c2b      	ldrb	r3, [r5, #16]
 801b0a4:	00c9      	lsls	r1, r1, #3
 801b0a6:	2b03      	cmp	r3, #3
 801b0a8:	d854      	bhi.n	801b154 <uxr_serialize_ActivityInfoVariant+0x138>
 801b0aa:	e8df f003 	tbb	[pc, r3]
 801b0ae:	2133      	.short	0x2133
 801b0b0:	020f      	.short	0x020f
 801b0b2:	4449      	add	r1, r9
 801b0b4:	4640      	mov	r0, r8
 801b0b6:	6889      	ldr	r1, [r1, #8]
 801b0b8:	f004 f934 	bl	801f324 <ucdr_serialize_string>
 801b0bc:	3401      	adds	r4, #1
 801b0be:	68f2      	ldr	r2, [r6, #12]
 801b0c0:	4294      	cmp	r4, r2
 801b0c2:	d244      	bcs.n	801b14e <uxr_serialize_ActivityInfoVariant+0x132>
 801b0c4:	2800      	cmp	r0, #0
 801b0c6:	d1de      	bne.n	801b086 <uxr_serialize_ActivityInfoVariant+0x6a>
 801b0c8:	2700      	movs	r7, #0
 801b0ca:	e7b8      	b.n	801b03e <uxr_serialize_ActivityInfoVariant+0x22>
 801b0cc:	3108      	adds	r1, #8
 801b0ce:	44a2      	add	sl, r4
 801b0d0:	2210      	movs	r2, #16
 801b0d2:	4640      	mov	r0, r8
 801b0d4:	4449      	add	r1, r9
 801b0d6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b0da:	f003 ffab 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b0de:	4605      	mov	r5, r0
 801b0e0:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801b0e4:	4640      	mov	r0, r8
 801b0e6:	f7f8 f9d9 	bl	801349c <ucdr_serialize_uint32_t>
 801b0ea:	4028      	ands	r0, r5
 801b0ec:	b2c0      	uxtb	r0, r0
 801b0ee:	e7e5      	b.n	801b0bc <uxr_serialize_ActivityInfoVariant+0xa0>
 801b0f0:	3108      	adds	r1, #8
 801b0f2:	44a2      	add	sl, r4
 801b0f4:	2204      	movs	r2, #4
 801b0f6:	4640      	mov	r0, r8
 801b0f8:	4449      	add	r1, r9
 801b0fa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b0fe:	f003 ff99 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b102:	4605      	mov	r5, r0
 801b104:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801b108:	4640      	mov	r0, r8
 801b10a:	f7f7 ffdd 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b10e:	4028      	ands	r0, r5
 801b110:	b2c0      	uxtb	r0, r0
 801b112:	e7d3      	b.n	801b0bc <uxr_serialize_ActivityInfoVariant+0xa0>
 801b114:	3108      	adds	r1, #8
 801b116:	44a2      	add	sl, r4
 801b118:	2202      	movs	r2, #2
 801b11a:	4640      	mov	r0, r8
 801b11c:	4449      	add	r1, r9
 801b11e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b122:	f003 ff87 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b126:	4605      	mov	r5, r0
 801b128:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801b12c:	4640      	mov	r0, r8
 801b12e:	f7f7 ff9f 	bl	8013070 <ucdr_serialize_uint8_t>
 801b132:	4028      	ands	r0, r5
 801b134:	b2c0      	uxtb	r0, r0
 801b136:	e7c1      	b.n	801b0bc <uxr_serialize_ActivityInfoVariant+0xa0>
 801b138:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b13c:	4640      	mov	r0, r8
 801b13e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b142:	f7f8 bcd1 	b.w	8013ae8 <ucdr_serialize_int16_t>
 801b146:	3401      	adds	r4, #1
 801b148:	68f2      	ldr	r2, [r6, #12]
 801b14a:	42a2      	cmp	r2, r4
 801b14c:	d8bc      	bhi.n	801b0c8 <uxr_serialize_ActivityInfoVariant+0xac>
 801b14e:	4007      	ands	r7, r0
 801b150:	b2ff      	uxtb	r7, r7
 801b152:	e774      	b.n	801b03e <uxr_serialize_ActivityInfoVariant+0x22>
 801b154:	3401      	adds	r4, #1
 801b156:	68f3      	ldr	r3, [r6, #12]
 801b158:	3518      	adds	r5, #24
 801b15a:	429c      	cmp	r4, r3
 801b15c:	d397      	bcc.n	801b08e <uxr_serialize_ActivityInfoVariant+0x72>
 801b15e:	e76e      	b.n	801b03e <uxr_serialize_ActivityInfoVariant+0x22>

0801b160 <uxr_deserialize_BaseObjectReply>:
 801b160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b164:	2202      	movs	r2, #2
 801b166:	4606      	mov	r6, r0
 801b168:	460f      	mov	r7, r1
 801b16a:	f003 ffc7 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b16e:	2202      	movs	r2, #2
 801b170:	4605      	mov	r5, r0
 801b172:	4630      	mov	r0, r6
 801b174:	18b9      	adds	r1, r7, r2
 801b176:	f003 ffc1 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b17a:	4680      	mov	r8, r0
 801b17c:	1d39      	adds	r1, r7, #4
 801b17e:	4630      	mov	r0, r6
 801b180:	f7f7 ff8c 	bl	801309c <ucdr_deserialize_uint8_t>
 801b184:	ea05 0508 	and.w	r5, r5, r8
 801b188:	4604      	mov	r4, r0
 801b18a:	1d79      	adds	r1, r7, #5
 801b18c:	4630      	mov	r0, r6
 801b18e:	402c      	ands	r4, r5
 801b190:	f7f7 ff84 	bl	801309c <ucdr_deserialize_uint8_t>
 801b194:	4020      	ands	r0, r4
 801b196:	b2c0      	uxtb	r0, r0
 801b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b19c <uxr_serialize_ReadSpecification>:
 801b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b19e:	460e      	mov	r6, r1
 801b1a0:	4607      	mov	r7, r0
 801b1a2:	7809      	ldrb	r1, [r1, #0]
 801b1a4:	f7f7 ff64 	bl	8013070 <ucdr_serialize_uint8_t>
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	7871      	ldrb	r1, [r6, #1]
 801b1ac:	4638      	mov	r0, r7
 801b1ae:	f7f7 ff5f 	bl	8013070 <ucdr_serialize_uint8_t>
 801b1b2:	4004      	ands	r4, r0
 801b1b4:	78b1      	ldrb	r1, [r6, #2]
 801b1b6:	4638      	mov	r0, r7
 801b1b8:	f7f7 ff2c 	bl	8013014 <ucdr_serialize_bool>
 801b1bc:	78b3      	ldrb	r3, [r6, #2]
 801b1be:	b2e4      	uxtb	r4, r4
 801b1c0:	4004      	ands	r4, r0
 801b1c2:	b943      	cbnz	r3, 801b1d6 <uxr_serialize_ReadSpecification+0x3a>
 801b1c4:	7a31      	ldrb	r1, [r6, #8]
 801b1c6:	4638      	mov	r0, r7
 801b1c8:	f7f7 ff24 	bl	8013014 <ucdr_serialize_bool>
 801b1cc:	7a33      	ldrb	r3, [r6, #8]
 801b1ce:	4004      	ands	r4, r0
 801b1d0:	b93b      	cbnz	r3, 801b1e2 <uxr_serialize_ReadSpecification+0x46>
 801b1d2:	4620      	mov	r0, r4
 801b1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1d6:	6871      	ldr	r1, [r6, #4]
 801b1d8:	4638      	mov	r0, r7
 801b1da:	f004 f8a3 	bl	801f324 <ucdr_serialize_string>
 801b1de:	4004      	ands	r4, r0
 801b1e0:	e7f0      	b.n	801b1c4 <uxr_serialize_ReadSpecification+0x28>
 801b1e2:	8971      	ldrh	r1, [r6, #10]
 801b1e4:	4638      	mov	r0, r7
 801b1e6:	f7f7 ff6f 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b1ea:	4605      	mov	r5, r0
 801b1ec:	89b1      	ldrh	r1, [r6, #12]
 801b1ee:	4638      	mov	r0, r7
 801b1f0:	f7f7 ff6a 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b1f4:	4005      	ands	r5, r0
 801b1f6:	89f1      	ldrh	r1, [r6, #14]
 801b1f8:	4638      	mov	r0, r7
 801b1fa:	b2ed      	uxtb	r5, r5
 801b1fc:	f7f7 ff64 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b200:	8a31      	ldrh	r1, [r6, #16]
 801b202:	4025      	ands	r5, r4
 801b204:	4604      	mov	r4, r0
 801b206:	4638      	mov	r0, r7
 801b208:	4025      	ands	r5, r4
 801b20a:	f7f7 ff5d 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b20e:	ea00 0405 	and.w	r4, r0, r5
 801b212:	4620      	mov	r0, r4
 801b214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b216:	bf00      	nop

0801b218 <uxr_serialize_CREATE_CLIENT_Payload>:
 801b218:	f7ff bafa 	b.w	801a810 <uxr_serialize_CLIENT_Representation>

0801b21c <uxr_serialize_CREATE_Payload>:
 801b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b21e:	2202      	movs	r2, #2
 801b220:	4607      	mov	r7, r0
 801b222:	460e      	mov	r6, r1
 801b224:	f003 ff06 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b228:	2202      	movs	r2, #2
 801b22a:	4605      	mov	r5, r0
 801b22c:	4638      	mov	r0, r7
 801b22e:	18b1      	adds	r1, r6, r2
 801b230:	f003 ff00 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b234:	7931      	ldrb	r1, [r6, #4]
 801b236:	4604      	mov	r4, r0
 801b238:	4638      	mov	r0, r7
 801b23a:	f7f7 ff19 	bl	8013070 <ucdr_serialize_uint8_t>
 801b23e:	b170      	cbz	r0, 801b25e <uxr_serialize_CREATE_Payload+0x42>
 801b240:	7933      	ldrb	r3, [r6, #4]
 801b242:	402c      	ands	r4, r5
 801b244:	3b01      	subs	r3, #1
 801b246:	b2e4      	uxtb	r4, r4
 801b248:	2b0d      	cmp	r3, #13
 801b24a:	d809      	bhi.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b24c:	e8df f003 	tbb	[pc, r3]
 801b250:	23230a4c 	.word	0x23230a4c
 801b254:	0a0a0a0a 	.word	0x0a0a0a0a
 801b258:	12121208 	.word	0x12121208
 801b25c:	3e45      	.short	0x3e45
 801b25e:	2400      	movs	r4, #0
 801b260:	4620      	mov	r0, r4
 801b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b264:	f106 0108 	add.w	r1, r6, #8
 801b268:	4638      	mov	r0, r7
 801b26a:	f7ff fbd7 	bl	801aa1c <uxr_serialize_DATAWRITER_Representation>
 801b26e:	4004      	ands	r4, r0
 801b270:	4620      	mov	r0, r4
 801b272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b274:	7a31      	ldrb	r1, [r6, #8]
 801b276:	4638      	mov	r0, r7
 801b278:	f7f7 fefa 	bl	8013070 <ucdr_serialize_uint8_t>
 801b27c:	2800      	cmp	r0, #0
 801b27e:	d0ee      	beq.n	801b25e <uxr_serialize_CREATE_Payload+0x42>
 801b280:	7a33      	ldrb	r3, [r6, #8]
 801b282:	2b01      	cmp	r3, #1
 801b284:	d001      	beq.n	801b28a <uxr_serialize_CREATE_Payload+0x6e>
 801b286:	2b02      	cmp	r3, #2
 801b288:	d1ea      	bne.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b28a:	68f1      	ldr	r1, [r6, #12]
 801b28c:	4638      	mov	r0, r7
 801b28e:	f004 f849 	bl	801f324 <ucdr_serialize_string>
 801b292:	4004      	ands	r4, r0
 801b294:	e7e4      	b.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b296:	7a31      	ldrb	r1, [r6, #8]
 801b298:	4638      	mov	r0, r7
 801b29a:	f7f7 fee9 	bl	8013070 <ucdr_serialize_uint8_t>
 801b29e:	4605      	mov	r5, r0
 801b2a0:	b158      	cbz	r0, 801b2ba <uxr_serialize_CREATE_Payload+0x9e>
 801b2a2:	7a33      	ldrb	r3, [r6, #8]
 801b2a4:	2b02      	cmp	r3, #2
 801b2a6:	d034      	beq.n	801b312 <uxr_serialize_CREATE_Payload+0xf6>
 801b2a8:	2b03      	cmp	r3, #3
 801b2aa:	d106      	bne.n	801b2ba <uxr_serialize_CREATE_Payload+0x9e>
 801b2ac:	68f2      	ldr	r2, [r6, #12]
 801b2ae:	f106 0110 	add.w	r1, r6, #16
 801b2b2:	4638      	mov	r0, r7
 801b2b4:	f7fc fe7a 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801b2b8:	4605      	mov	r5, r0
 801b2ba:	2202      	movs	r2, #2
 801b2bc:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801b2c0:	4638      	mov	r0, r7
 801b2c2:	f003 feb7 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b2c6:	4028      	ands	r0, r5
 801b2c8:	4004      	ands	r4, r0
 801b2ca:	e7c9      	b.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b2cc:	f106 0108 	add.w	r1, r6, #8
 801b2d0:	4638      	mov	r0, r7
 801b2d2:	f7ff fa9d 	bl	801a810 <uxr_serialize_CLIENT_Representation>
 801b2d6:	4004      	ands	r4, r0
 801b2d8:	e7c2      	b.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b2da:	f106 0108 	add.w	r1, r6, #8
 801b2de:	4638      	mov	r0, r7
 801b2e0:	f7ff fb52 	bl	801a988 <uxr_serialize_AGENT_Representation>
 801b2e4:	4004      	ands	r4, r0
 801b2e6:	e7bb      	b.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b2e8:	7a31      	ldrb	r1, [r6, #8]
 801b2ea:	4638      	mov	r0, r7
 801b2ec:	f7f7 fec0 	bl	8013070 <ucdr_serialize_uint8_t>
 801b2f0:	4605      	mov	r5, r0
 801b2f2:	b130      	cbz	r0, 801b302 <uxr_serialize_CREATE_Payload+0xe6>
 801b2f4:	7a33      	ldrb	r3, [r6, #8]
 801b2f6:	2b02      	cmp	r3, #2
 801b2f8:	d011      	beq.n	801b31e <uxr_serialize_CREATE_Payload+0x102>
 801b2fa:	2b03      	cmp	r3, #3
 801b2fc:	d015      	beq.n	801b32a <uxr_serialize_CREATE_Payload+0x10e>
 801b2fe:	2b01      	cmp	r3, #1
 801b300:	d00d      	beq.n	801b31e <uxr_serialize_CREATE_Payload+0x102>
 801b302:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801b306:	4638      	mov	r0, r7
 801b308:	f7f8 fbee 	bl	8013ae8 <ucdr_serialize_int16_t>
 801b30c:	4028      	ands	r0, r5
 801b30e:	4004      	ands	r4, r0
 801b310:	e7a6      	b.n	801b260 <uxr_serialize_CREATE_Payload+0x44>
 801b312:	68f1      	ldr	r1, [r6, #12]
 801b314:	4638      	mov	r0, r7
 801b316:	f004 f805 	bl	801f324 <ucdr_serialize_string>
 801b31a:	4605      	mov	r5, r0
 801b31c:	e7cd      	b.n	801b2ba <uxr_serialize_CREATE_Payload+0x9e>
 801b31e:	68f1      	ldr	r1, [r6, #12]
 801b320:	4638      	mov	r0, r7
 801b322:	f003 ffff 	bl	801f324 <ucdr_serialize_string>
 801b326:	4605      	mov	r5, r0
 801b328:	e7eb      	b.n	801b302 <uxr_serialize_CREATE_Payload+0xe6>
 801b32a:	68f2      	ldr	r2, [r6, #12]
 801b32c:	f106 0110 	add.w	r1, r6, #16
 801b330:	4638      	mov	r0, r7
 801b332:	f7fc fe3b 	bl	8017fac <ucdr_serialize_sequence_uint8_t>
 801b336:	4605      	mov	r5, r0
 801b338:	e7e3      	b.n	801b302 <uxr_serialize_CREATE_Payload+0xe6>
 801b33a:	bf00      	nop

0801b33c <uxr_serialize_GET_INFO_Payload>:
 801b33c:	b570      	push	{r4, r5, r6, lr}
 801b33e:	2202      	movs	r2, #2
 801b340:	4605      	mov	r5, r0
 801b342:	460e      	mov	r6, r1
 801b344:	f003 fe76 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b348:	2202      	movs	r2, #2
 801b34a:	4604      	mov	r4, r0
 801b34c:	4628      	mov	r0, r5
 801b34e:	18b1      	adds	r1, r6, r2
 801b350:	f003 fe70 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b354:	4603      	mov	r3, r0
 801b356:	6871      	ldr	r1, [r6, #4]
 801b358:	4628      	mov	r0, r5
 801b35a:	401c      	ands	r4, r3
 801b35c:	f7f8 f89e 	bl	801349c <ucdr_serialize_uint32_t>
 801b360:	b2e4      	uxtb	r4, r4
 801b362:	4020      	ands	r0, r4
 801b364:	bd70      	pop	{r4, r5, r6, pc}
 801b366:	bf00      	nop

0801b368 <uxr_deserialize_GET_INFO_Payload>:
 801b368:	b570      	push	{r4, r5, r6, lr}
 801b36a:	2202      	movs	r2, #2
 801b36c:	4605      	mov	r5, r0
 801b36e:	460e      	mov	r6, r1
 801b370:	f003 fec4 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b374:	2202      	movs	r2, #2
 801b376:	4604      	mov	r4, r0
 801b378:	4628      	mov	r0, r5
 801b37a:	18b1      	adds	r1, r6, r2
 801b37c:	f003 febe 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b380:	4603      	mov	r3, r0
 801b382:	1d31      	adds	r1, r6, #4
 801b384:	4628      	mov	r0, r5
 801b386:	401c      	ands	r4, r3
 801b388:	f7f8 f9b8 	bl	80136fc <ucdr_deserialize_uint32_t>
 801b38c:	b2e4      	uxtb	r4, r4
 801b38e:	4020      	ands	r0, r4
 801b390:	bd70      	pop	{r4, r5, r6, pc}
 801b392:	bf00      	nop

0801b394 <uxr_serialize_DELETE_Payload>:
 801b394:	b570      	push	{r4, r5, r6, lr}
 801b396:	2202      	movs	r2, #2
 801b398:	4605      	mov	r5, r0
 801b39a:	460e      	mov	r6, r1
 801b39c:	f003 fe4a 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b3a0:	2202      	movs	r2, #2
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	4628      	mov	r0, r5
 801b3a6:	18b1      	adds	r1, r6, r2
 801b3a8:	f003 fe44 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b3ac:	4020      	ands	r0, r4
 801b3ae:	b2c0      	uxtb	r0, r0
 801b3b0:	bd70      	pop	{r4, r5, r6, pc}
 801b3b2:	bf00      	nop

0801b3b4 <uxr_deserialize_STATUS_AGENT_Payload>:
 801b3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3b8:	460e      	mov	r6, r1
 801b3ba:	4605      	mov	r5, r0
 801b3bc:	f7f7 fe6e 	bl	801309c <ucdr_deserialize_uint8_t>
 801b3c0:	4604      	mov	r4, r0
 801b3c2:	1c71      	adds	r1, r6, #1
 801b3c4:	4628      	mov	r0, r5
 801b3c6:	f7f7 fe69 	bl	801309c <ucdr_deserialize_uint8_t>
 801b3ca:	2204      	movs	r2, #4
 801b3cc:	4681      	mov	r9, r0
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	18b1      	adds	r1, r6, r2
 801b3d2:	f003 fe93 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b3d6:	f106 0108 	add.w	r1, r6, #8
 801b3da:	4680      	mov	r8, r0
 801b3dc:	2202      	movs	r2, #2
 801b3de:	4628      	mov	r0, r5
 801b3e0:	f003 fe8c 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b3e4:	ea04 0309 	and.w	r3, r4, r9
 801b3e8:	4607      	mov	r7, r0
 801b3ea:	2202      	movs	r2, #2
 801b3ec:	b2db      	uxtb	r3, r3
 801b3ee:	f106 010a 	add.w	r1, r6, #10
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	ea03 0408 	and.w	r4, r3, r8
 801b3f8:	f003 fe80 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b3fc:	4603      	mov	r3, r0
 801b3fe:	4628      	mov	r0, r5
 801b400:	403c      	ands	r4, r7
 801b402:	f106 010c 	add.w	r1, r6, #12
 801b406:	461d      	mov	r5, r3
 801b408:	f7f7 fe1a 	bl	8013040 <ucdr_deserialize_bool>
 801b40c:	4025      	ands	r5, r4
 801b40e:	4028      	ands	r0, r5
 801b410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b414 <uxr_deserialize_STATUS_Payload>:
 801b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b418:	2202      	movs	r2, #2
 801b41a:	4606      	mov	r6, r0
 801b41c:	460f      	mov	r7, r1
 801b41e:	f003 fe6d 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b422:	2202      	movs	r2, #2
 801b424:	4605      	mov	r5, r0
 801b426:	4630      	mov	r0, r6
 801b428:	18b9      	adds	r1, r7, r2
 801b42a:	f003 fe67 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b42e:	4680      	mov	r8, r0
 801b430:	1d39      	adds	r1, r7, #4
 801b432:	4630      	mov	r0, r6
 801b434:	f7f7 fe32 	bl	801309c <ucdr_deserialize_uint8_t>
 801b438:	ea05 0508 	and.w	r5, r5, r8
 801b43c:	4604      	mov	r4, r0
 801b43e:	1d79      	adds	r1, r7, #5
 801b440:	4630      	mov	r0, r6
 801b442:	402c      	ands	r4, r5
 801b444:	f7f7 fe2a 	bl	801309c <ucdr_deserialize_uint8_t>
 801b448:	4020      	ands	r0, r4
 801b44a:	b2c0      	uxtb	r0, r0
 801b44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b450 <uxr_serialize_INFO_Payload>:
 801b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b454:	2202      	movs	r2, #2
 801b456:	460c      	mov	r4, r1
 801b458:	4605      	mov	r5, r0
 801b45a:	f003 fdeb 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b45e:	2202      	movs	r2, #2
 801b460:	4680      	mov	r8, r0
 801b462:	4628      	mov	r0, r5
 801b464:	18a1      	adds	r1, r4, r2
 801b466:	f003 fde5 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b46a:	4607      	mov	r7, r0
 801b46c:	7921      	ldrb	r1, [r4, #4]
 801b46e:	4628      	mov	r0, r5
 801b470:	f7f7 fdfe 	bl	8013070 <ucdr_serialize_uint8_t>
 801b474:	ea08 0807 	and.w	r8, r8, r7
 801b478:	4606      	mov	r6, r0
 801b47a:	7961      	ldrb	r1, [r4, #5]
 801b47c:	4628      	mov	r0, r5
 801b47e:	ea06 0608 	and.w	r6, r6, r8
 801b482:	f7f7 fdf5 	bl	8013070 <ucdr_serialize_uint8_t>
 801b486:	7a21      	ldrb	r1, [r4, #8]
 801b488:	4030      	ands	r0, r6
 801b48a:	b2c7      	uxtb	r7, r0
 801b48c:	4628      	mov	r0, r5
 801b48e:	f7f7 fdc1 	bl	8013014 <ucdr_serialize_bool>
 801b492:	7a23      	ldrb	r3, [r4, #8]
 801b494:	4606      	mov	r6, r0
 801b496:	b96b      	cbnz	r3, 801b4b4 <uxr_serialize_INFO_Payload+0x64>
 801b498:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b49c:	4628      	mov	r0, r5
 801b49e:	f7f7 fdb9 	bl	8013014 <ucdr_serialize_bool>
 801b4a2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b4a6:	4030      	ands	r0, r6
 801b4a8:	b2c6      	uxtb	r6, r0
 801b4aa:	b983      	cbnz	r3, 801b4ce <uxr_serialize_INFO_Payload+0x7e>
 801b4ac:	ea06 0007 	and.w	r0, r6, r7
 801b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4b4:	7b21      	ldrb	r1, [r4, #12]
 801b4b6:	4628      	mov	r0, r5
 801b4b8:	f7f7 fdda 	bl	8013070 <ucdr_serialize_uint8_t>
 801b4bc:	b188      	cbz	r0, 801b4e2 <uxr_serialize_INFO_Payload+0x92>
 801b4be:	f104 010c 	add.w	r1, r4, #12
 801b4c2:	4628      	mov	r0, r5
 801b4c4:	f7ff fad2 	bl	801aa6c <uxr_serialize_ObjectVariant.part.0>
 801b4c8:	4030      	ands	r0, r6
 801b4ca:	b2c6      	uxtb	r6, r0
 801b4cc:	e7e4      	b.n	801b498 <uxr_serialize_INFO_Payload+0x48>
 801b4ce:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	f7ff fda2 	bl	801b01c <uxr_serialize_ActivityInfoVariant>
 801b4d8:	4006      	ands	r6, r0
 801b4da:	ea06 0007 	and.w	r0, r6, r7
 801b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4e2:	4606      	mov	r6, r0
 801b4e4:	e7d8      	b.n	801b498 <uxr_serialize_INFO_Payload+0x48>
 801b4e6:	bf00      	nop

0801b4e8 <uxr_serialize_READ_DATA_Payload>:
 801b4e8:	b570      	push	{r4, r5, r6, lr}
 801b4ea:	2202      	movs	r2, #2
 801b4ec:	4605      	mov	r5, r0
 801b4ee:	460e      	mov	r6, r1
 801b4f0:	f003 fda0 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b4f4:	2202      	movs	r2, #2
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	4628      	mov	r0, r5
 801b4fa:	18b1      	adds	r1, r6, r2
 801b4fc:	f003 fd9a 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b500:	4603      	mov	r3, r0
 801b502:	1d31      	adds	r1, r6, #4
 801b504:	4628      	mov	r0, r5
 801b506:	401c      	ands	r4, r3
 801b508:	f7ff fe48 	bl	801b19c <uxr_serialize_ReadSpecification>
 801b50c:	b2e4      	uxtb	r4, r4
 801b50e:	4020      	ands	r0, r4
 801b510:	bd70      	pop	{r4, r5, r6, pc}
 801b512:	bf00      	nop

0801b514 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b514:	b570      	push	{r4, r5, r6, lr}
 801b516:	2202      	movs	r2, #2
 801b518:	4605      	mov	r5, r0
 801b51a:	460e      	mov	r6, r1
 801b51c:	f003 fd8a 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b520:	2202      	movs	r2, #2
 801b522:	4604      	mov	r4, r0
 801b524:	4628      	mov	r0, r5
 801b526:	18b1      	adds	r1, r6, r2
 801b528:	f003 fd84 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b52c:	4020      	ands	r0, r4
 801b52e:	b2c0      	uxtb	r0, r0
 801b530:	bd70      	pop	{r4, r5, r6, pc}
 801b532:	bf00      	nop

0801b534 <uxr_serialize_ACKNACK_Payload>:
 801b534:	b570      	push	{r4, r5, r6, lr}
 801b536:	460c      	mov	r4, r1
 801b538:	4605      	mov	r5, r0
 801b53a:	460e      	mov	r6, r1
 801b53c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b540:	f7f7 fdc2 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b544:	2202      	movs	r2, #2
 801b546:	4621      	mov	r1, r4
 801b548:	4604      	mov	r4, r0
 801b54a:	4628      	mov	r0, r5
 801b54c:	f003 fd72 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b550:	4603      	mov	r3, r0
 801b552:	7931      	ldrb	r1, [r6, #4]
 801b554:	4628      	mov	r0, r5
 801b556:	401c      	ands	r4, r3
 801b558:	f7f7 fd8a 	bl	8013070 <ucdr_serialize_uint8_t>
 801b55c:	b2e4      	uxtb	r4, r4
 801b55e:	4020      	ands	r0, r4
 801b560:	bd70      	pop	{r4, r5, r6, pc}
 801b562:	bf00      	nop

0801b564 <uxr_deserialize_ACKNACK_Payload>:
 801b564:	b570      	push	{r4, r5, r6, lr}
 801b566:	460e      	mov	r6, r1
 801b568:	4605      	mov	r5, r0
 801b56a:	f7f7 fead 	bl	80132c8 <ucdr_deserialize_uint16_t>
 801b56e:	2202      	movs	r2, #2
 801b570:	4604      	mov	r4, r0
 801b572:	4628      	mov	r0, r5
 801b574:	18b1      	adds	r1, r6, r2
 801b576:	f003 fdc1 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b57a:	4603      	mov	r3, r0
 801b57c:	1d31      	adds	r1, r6, #4
 801b57e:	4628      	mov	r0, r5
 801b580:	401c      	ands	r4, r3
 801b582:	f7f7 fd8b 	bl	801309c <ucdr_deserialize_uint8_t>
 801b586:	b2e4      	uxtb	r4, r4
 801b588:	4020      	ands	r0, r4
 801b58a:	bd70      	pop	{r4, r5, r6, pc}

0801b58c <uxr_serialize_HEARTBEAT_Payload>:
 801b58c:	b570      	push	{r4, r5, r6, lr}
 801b58e:	460d      	mov	r5, r1
 801b590:	4606      	mov	r6, r0
 801b592:	8809      	ldrh	r1, [r1, #0]
 801b594:	f7f7 fd98 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b598:	8869      	ldrh	r1, [r5, #2]
 801b59a:	4604      	mov	r4, r0
 801b59c:	4630      	mov	r0, r6
 801b59e:	f7f7 fd93 	bl	80130c8 <ucdr_serialize_uint16_t>
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	7929      	ldrb	r1, [r5, #4]
 801b5a6:	4630      	mov	r0, r6
 801b5a8:	401c      	ands	r4, r3
 801b5aa:	f7f7 fd61 	bl	8013070 <ucdr_serialize_uint8_t>
 801b5ae:	b2e4      	uxtb	r4, r4
 801b5b0:	4020      	ands	r0, r4
 801b5b2:	bd70      	pop	{r4, r5, r6, pc}

0801b5b4 <uxr_deserialize_HEARTBEAT_Payload>:
 801b5b4:	b570      	push	{r4, r5, r6, lr}
 801b5b6:	460e      	mov	r6, r1
 801b5b8:	4605      	mov	r5, r0
 801b5ba:	f7f7 fe85 	bl	80132c8 <ucdr_deserialize_uint16_t>
 801b5be:	4604      	mov	r4, r0
 801b5c0:	1cb1      	adds	r1, r6, #2
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	f7f7 fe80 	bl	80132c8 <ucdr_deserialize_uint16_t>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	1d31      	adds	r1, r6, #4
 801b5cc:	4628      	mov	r0, r5
 801b5ce:	401c      	ands	r4, r3
 801b5d0:	f7f7 fd64 	bl	801309c <ucdr_deserialize_uint8_t>
 801b5d4:	b2e4      	uxtb	r4, r4
 801b5d6:	4020      	ands	r0, r4
 801b5d8:	bd70      	pop	{r4, r5, r6, pc}
 801b5da:	bf00      	nop

0801b5dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5e0:	460e      	mov	r6, r1
 801b5e2:	4605      	mov	r5, r0
 801b5e4:	f7f8 fca4 	bl	8013f30 <ucdr_deserialize_int32_t>
 801b5e8:	4607      	mov	r7, r0
 801b5ea:	1d31      	adds	r1, r6, #4
 801b5ec:	4628      	mov	r0, r5
 801b5ee:	f7f8 f885 	bl	80136fc <ucdr_deserialize_uint32_t>
 801b5f2:	4680      	mov	r8, r0
 801b5f4:	f106 0108 	add.w	r1, r6, #8
 801b5f8:	4628      	mov	r0, r5
 801b5fa:	f7f8 fc99 	bl	8013f30 <ucdr_deserialize_int32_t>
 801b5fe:	ea07 0708 	and.w	r7, r7, r8
 801b602:	4604      	mov	r4, r0
 801b604:	f106 010c 	add.w	r1, r6, #12
 801b608:	4628      	mov	r0, r5
 801b60a:	403c      	ands	r4, r7
 801b60c:	f7f8 f876 	bl	80136fc <ucdr_deserialize_uint32_t>
 801b610:	f106 0110 	add.w	r1, r6, #16
 801b614:	4004      	ands	r4, r0
 801b616:	4628      	mov	r0, r5
 801b618:	f7f8 fc8a 	bl	8013f30 <ucdr_deserialize_int32_t>
 801b61c:	4603      	mov	r3, r0
 801b61e:	b2e4      	uxtb	r4, r4
 801b620:	4628      	mov	r0, r5
 801b622:	461d      	mov	r5, r3
 801b624:	f106 0114 	add.w	r1, r6, #20
 801b628:	f7f8 f868 	bl	80136fc <ucdr_deserialize_uint32_t>
 801b62c:	402c      	ands	r4, r5
 801b62e:	4020      	ands	r0, r4
 801b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b634 <uxr_serialize_SampleIdentity>:
 801b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b638:	4604      	mov	r4, r0
 801b63a:	460d      	mov	r5, r1
 801b63c:	220c      	movs	r2, #12
 801b63e:	f003 fcf9 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b642:	2203      	movs	r2, #3
 801b644:	f105 010c 	add.w	r1, r5, #12
 801b648:	4607      	mov	r7, r0
 801b64a:	4620      	mov	r0, r4
 801b64c:	f003 fcf2 	bl	801f034 <ucdr_serialize_array_uint8_t>
 801b650:	7be9      	ldrb	r1, [r5, #15]
 801b652:	4680      	mov	r8, r0
 801b654:	4620      	mov	r0, r4
 801b656:	f7f7 fd0b 	bl	8013070 <ucdr_serialize_uint8_t>
 801b65a:	6929      	ldr	r1, [r5, #16]
 801b65c:	4606      	mov	r6, r0
 801b65e:	4620      	mov	r0, r4
 801b660:	f7f8 fb36 	bl	8013cd0 <ucdr_serialize_int32_t>
 801b664:	ea07 0708 	and.w	r7, r7, r8
 801b668:	4603      	mov	r3, r0
 801b66a:	4620      	mov	r0, r4
 801b66c:	403e      	ands	r6, r7
 801b66e:	6969      	ldr	r1, [r5, #20]
 801b670:	461c      	mov	r4, r3
 801b672:	f7f7 ff13 	bl	801349c <ucdr_serialize_uint32_t>
 801b676:	4034      	ands	r4, r6
 801b678:	4020      	ands	r0, r4
 801b67a:	b2c0      	uxtb	r0, r0
 801b67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b680 <uxr_deserialize_SampleIdentity>:
 801b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b684:	4604      	mov	r4, r0
 801b686:	460d      	mov	r5, r1
 801b688:	220c      	movs	r2, #12
 801b68a:	f003 fd37 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b68e:	2203      	movs	r2, #3
 801b690:	f105 010c 	add.w	r1, r5, #12
 801b694:	4607      	mov	r7, r0
 801b696:	4620      	mov	r0, r4
 801b698:	f003 fd30 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801b69c:	f105 010f 	add.w	r1, r5, #15
 801b6a0:	4680      	mov	r8, r0
 801b6a2:	4620      	mov	r0, r4
 801b6a4:	f7f7 fcfa 	bl	801309c <ucdr_deserialize_uint8_t>
 801b6a8:	f105 0110 	add.w	r1, r5, #16
 801b6ac:	4606      	mov	r6, r0
 801b6ae:	4620      	mov	r0, r4
 801b6b0:	f7f8 fc3e 	bl	8013f30 <ucdr_deserialize_int32_t>
 801b6b4:	ea07 0708 	and.w	r7, r7, r8
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	4620      	mov	r0, r4
 801b6bc:	403e      	ands	r6, r7
 801b6be:	f105 0114 	add.w	r1, r5, #20
 801b6c2:	461c      	mov	r4, r3
 801b6c4:	f7f8 f81a 	bl	80136fc <ucdr_deserialize_uint32_t>
 801b6c8:	4034      	ands	r4, r6
 801b6ca:	4020      	ands	r0, r4
 801b6cc:	b2c0      	uxtb	r0, r0
 801b6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6d2:	bf00      	nop

0801b6d4 <rcl_client_get_rmw_handle>:
 801b6d4:	b118      	cbz	r0, 801b6de <rcl_client_get_rmw_handle+0xa>
 801b6d6:	6800      	ldr	r0, [r0, #0]
 801b6d8:	b108      	cbz	r0, 801b6de <rcl_client_get_rmw_handle+0xa>
 801b6da:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b6de:	4770      	bx	lr

0801b6e0 <rcl_send_request>:
 801b6e0:	b570      	push	{r4, r5, r6, lr}
 801b6e2:	b082      	sub	sp, #8
 801b6e4:	b1f8      	cbz	r0, 801b726 <rcl_send_request+0x46>
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	6800      	ldr	r0, [r0, #0]
 801b6ea:	b1e0      	cbz	r0, 801b726 <rcl_send_request+0x46>
 801b6ec:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b6f0:	b1cb      	cbz	r3, 801b726 <rcl_send_request+0x46>
 801b6f2:	460e      	mov	r6, r1
 801b6f4:	b1e1      	cbz	r1, 801b730 <rcl_send_request+0x50>
 801b6f6:	4615      	mov	r5, r2
 801b6f8:	b1d2      	cbz	r2, 801b730 <rcl_send_request+0x50>
 801b6fa:	2105      	movs	r1, #5
 801b6fc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b700:	f002 fa96 	bl	801dc30 <__atomic_load_8>
 801b704:	4602      	mov	r2, r0
 801b706:	460b      	mov	r3, r1
 801b708:	4631      	mov	r1, r6
 801b70a:	e9c5 2300 	strd	r2, r3, [r5]
 801b70e:	6823      	ldr	r3, [r4, #0]
 801b710:	462a      	mov	r2, r5
 801b712:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b716:	f002 ffa1 	bl	801e65c <rmw_send_request>
 801b71a:	4606      	mov	r6, r0
 801b71c:	b160      	cbz	r0, 801b738 <rcl_send_request+0x58>
 801b71e:	2601      	movs	r6, #1
 801b720:	4630      	mov	r0, r6
 801b722:	b002      	add	sp, #8
 801b724:	bd70      	pop	{r4, r5, r6, pc}
 801b726:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b72a:	4630      	mov	r0, r6
 801b72c:	b002      	add	sp, #8
 801b72e:	bd70      	pop	{r4, r5, r6, pc}
 801b730:	260b      	movs	r6, #11
 801b732:	4630      	mov	r0, r6
 801b734:	b002      	add	sp, #8
 801b736:	bd70      	pop	{r4, r5, r6, pc}
 801b738:	6820      	ldr	r0, [r4, #0]
 801b73a:	2105      	movs	r1, #5
 801b73c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b740:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b744:	9100      	str	r1, [sp, #0]
 801b746:	f002 fadf 	bl	801dd08 <__atomic_exchange_8>
 801b74a:	4630      	mov	r0, r6
 801b74c:	b002      	add	sp, #8
 801b74e:	bd70      	pop	{r4, r5, r6, pc}

0801b750 <rcl_take_response>:
 801b750:	b570      	push	{r4, r5, r6, lr}
 801b752:	468e      	mov	lr, r1
 801b754:	b08c      	sub	sp, #48	; 0x30
 801b756:	460c      	mov	r4, r1
 801b758:	4616      	mov	r6, r2
 801b75a:	f10d 0c18 	add.w	ip, sp, #24
 801b75e:	4605      	mov	r5, r0
 801b760:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b764:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b768:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b76c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b770:	b35d      	cbz	r5, 801b7ca <rcl_take_response+0x7a>
 801b772:	682b      	ldr	r3, [r5, #0]
 801b774:	b34b      	cbz	r3, 801b7ca <rcl_take_response+0x7a>
 801b776:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b77a:	b330      	cbz	r0, 801b7ca <rcl_take_response+0x7a>
 801b77c:	b346      	cbz	r6, 801b7d0 <rcl_take_response+0x80>
 801b77e:	2300      	movs	r3, #0
 801b780:	4632      	mov	r2, r6
 801b782:	a902      	add	r1, sp, #8
 801b784:	f88d 3007 	strb.w	r3, [sp, #7]
 801b788:	f10d 0307 	add.w	r3, sp, #7
 801b78c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b7d8 <rcl_take_response+0x88>
 801b790:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b794:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b798:	f003 f868 	bl	801e86c <rmw_take_response>
 801b79c:	4605      	mov	r5, r0
 801b79e:	b9c8      	cbnz	r0, 801b7d4 <rcl_take_response+0x84>
 801b7a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b7a4:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b7a8:	2a00      	cmp	r2, #0
 801b7aa:	bf08      	it	eq
 801b7ac:	461d      	moveq	r5, r3
 801b7ae:	f10d 0e18 	add.w	lr, sp, #24
 801b7b2:	46a4      	mov	ip, r4
 801b7b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b7b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b7bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b7c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b7c4:	4628      	mov	r0, r5
 801b7c6:	b00c      	add	sp, #48	; 0x30
 801b7c8:	bd70      	pop	{r4, r5, r6, pc}
 801b7ca:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b7ce:	e7ee      	b.n	801b7ae <rcl_take_response+0x5e>
 801b7d0:	250b      	movs	r5, #11
 801b7d2:	e7ec      	b.n	801b7ae <rcl_take_response+0x5e>
 801b7d4:	2501      	movs	r5, #1
 801b7d6:	e7ea      	b.n	801b7ae <rcl_take_response+0x5e>
	...

0801b7e0 <rcl_client_is_valid>:
 801b7e0:	b130      	cbz	r0, 801b7f0 <rcl_client_is_valid+0x10>
 801b7e2:	6800      	ldr	r0, [r0, #0]
 801b7e4:	b120      	cbz	r0, 801b7f0 <rcl_client_is_valid+0x10>
 801b7e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b7ea:	3800      	subs	r0, #0
 801b7ec:	bf18      	it	ne
 801b7ee:	2001      	movne	r0, #1
 801b7f0:	4770      	bx	lr
 801b7f2:	bf00      	nop

0801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801b7f4:	280b      	cmp	r0, #11
 801b7f6:	dc0d      	bgt.n	801b814 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b7f8:	2800      	cmp	r0, #0
 801b7fa:	db09      	blt.n	801b810 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b7fc:	280b      	cmp	r0, #11
 801b7fe:	d807      	bhi.n	801b810 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b800:	e8df f000 	tbb	[pc, r0]
 801b804:	07060607 	.word	0x07060607
 801b808:	06060606 	.word	0x06060606
 801b80c:	07070606 	.word	0x07070606
 801b810:	2001      	movs	r0, #1
 801b812:	4770      	bx	lr
 801b814:	28cb      	cmp	r0, #203	; 0xcb
 801b816:	bf18      	it	ne
 801b818:	2001      	movne	r0, #1
 801b81a:	4770      	bx	lr

0801b81c <rcl_get_zero_initialized_context>:
 801b81c:	4a03      	ldr	r2, [pc, #12]	; (801b82c <rcl_get_zero_initialized_context+0x10>)
 801b81e:	4603      	mov	r3, r0
 801b820:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b824:	e883 0003 	stmia.w	r3, {r0, r1}
 801b828:	4618      	mov	r0, r3
 801b82a:	4770      	bx	lr
 801b82c:	080230dc 	.word	0x080230dc

0801b830 <rcl_context_is_valid>:
 801b830:	b118      	cbz	r0, 801b83a <rcl_context_is_valid+0xa>
 801b832:	6840      	ldr	r0, [r0, #4]
 801b834:	3800      	subs	r0, #0
 801b836:	bf18      	it	ne
 801b838:	2001      	movne	r0, #1
 801b83a:	4770      	bx	lr

0801b83c <__cleanup_context>:
 801b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b840:	4606      	mov	r6, r0
 801b842:	2300      	movs	r3, #0
 801b844:	6800      	ldr	r0, [r0, #0]
 801b846:	6073      	str	r3, [r6, #4]
 801b848:	2800      	cmp	r0, #0
 801b84a:	d049      	beq.n	801b8e0 <__cleanup_context+0xa4>
 801b84c:	6947      	ldr	r7, [r0, #20]
 801b84e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b852:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b856:	b137      	cbz	r7, 801b866 <__cleanup_context+0x2a>
 801b858:	3014      	adds	r0, #20
 801b85a:	f7f9 f87d 	bl	8014958 <rcl_init_options_fini>
 801b85e:	4607      	mov	r7, r0
 801b860:	2800      	cmp	r0, #0
 801b862:	d144      	bne.n	801b8ee <__cleanup_context+0xb2>
 801b864:	6830      	ldr	r0, [r6, #0]
 801b866:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b868:	b143      	cbz	r3, 801b87c <__cleanup_context+0x40>
 801b86a:	3028      	adds	r0, #40	; 0x28
 801b86c:	f7fb f998 	bl	8016ba0 <rmw_context_fini>
 801b870:	b118      	cbz	r0, 801b87a <__cleanup_context+0x3e>
 801b872:	2f00      	cmp	r7, #0
 801b874:	d03e      	beq.n	801b8f4 <__cleanup_context+0xb8>
 801b876:	f7fa fc17 	bl	80160a8 <rcutils_reset_error>
 801b87a:	6830      	ldr	r0, [r6, #0]
 801b87c:	6a03      	ldr	r3, [r0, #32]
 801b87e:	b1db      	cbz	r3, 801b8b8 <__cleanup_context+0x7c>
 801b880:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b884:	2a01      	cmp	r2, #1
 801b886:	f17c 0100 	sbcs.w	r1, ip, #0
 801b88a:	db11      	blt.n	801b8b0 <__cleanup_context+0x74>
 801b88c:	2400      	movs	r4, #0
 801b88e:	4625      	mov	r5, r4
 801b890:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b894:	4649      	mov	r1, r9
 801b896:	b1b8      	cbz	r0, 801b8c8 <__cleanup_context+0x8c>
 801b898:	47c0      	blx	r8
 801b89a:	6833      	ldr	r3, [r6, #0]
 801b89c:	3401      	adds	r4, #1
 801b89e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b8a2:	f145 0500 	adc.w	r5, r5, #0
 801b8a6:	6a1b      	ldr	r3, [r3, #32]
 801b8a8:	4294      	cmp	r4, r2
 801b8aa:	eb75 010c 	sbcs.w	r1, r5, ip
 801b8ae:	dbef      	blt.n	801b890 <__cleanup_context+0x54>
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	4649      	mov	r1, r9
 801b8b4:	47c0      	blx	r8
 801b8b6:	6830      	ldr	r0, [r6, #0]
 801b8b8:	4649      	mov	r1, r9
 801b8ba:	47c0      	blx	r8
 801b8bc:	2300      	movs	r3, #0
 801b8be:	4638      	mov	r0, r7
 801b8c0:	e9c6 3300 	strd	r3, r3, [r6]
 801b8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8c8:	3401      	adds	r4, #1
 801b8ca:	f145 0500 	adc.w	r5, r5, #0
 801b8ce:	4294      	cmp	r4, r2
 801b8d0:	eb75 010c 	sbcs.w	r1, r5, ip
 801b8d4:	dbdc      	blt.n	801b890 <__cleanup_context+0x54>
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	4649      	mov	r1, r9
 801b8da:	47c0      	blx	r8
 801b8dc:	6830      	ldr	r0, [r6, #0]
 801b8de:	e7eb      	b.n	801b8b8 <__cleanup_context+0x7c>
 801b8e0:	4607      	mov	r7, r0
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	4638      	mov	r0, r7
 801b8e6:	e9c6 3300 	strd	r3, r3, [r6]
 801b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8ee:	f7fa fbdb 	bl	80160a8 <rcutils_reset_error>
 801b8f2:	e7b7      	b.n	801b864 <__cleanup_context+0x28>
 801b8f4:	f7ff ff7e 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b8f8:	4607      	mov	r7, r0
 801b8fa:	e7bc      	b.n	801b876 <__cleanup_context+0x3a>

0801b8fc <rcl_get_zero_initialized_guard_condition>:
 801b8fc:	4a03      	ldr	r2, [pc, #12]	; (801b90c <rcl_get_zero_initialized_guard_condition+0x10>)
 801b8fe:	4603      	mov	r3, r0
 801b900:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b904:	e883 0003 	stmia.w	r3, {r0, r1}
 801b908:	4618      	mov	r0, r3
 801b90a:	4770      	bx	lr
 801b90c:	080230e4 	.word	0x080230e4

0801b910 <rcl_guard_condition_init_from_rmw>:
 801b910:	b082      	sub	sp, #8
 801b912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b916:	b086      	sub	sp, #24
 801b918:	4604      	mov	r4, r0
 801b91a:	460e      	mov	r6, r1
 801b91c:	4615      	mov	r5, r2
 801b91e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b922:	f10d 0e04 	add.w	lr, sp, #4
 801b926:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b92a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b92e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b932:	f8dc 3000 	ldr.w	r3, [ip]
 801b936:	a801      	add	r0, sp, #4
 801b938:	f8ce 3000 	str.w	r3, [lr]
 801b93c:	f7fa fb76 	bl	801602c <rcutils_allocator_is_valid>
 801b940:	f080 0301 	eor.w	r3, r0, #1
 801b944:	b2db      	uxtb	r3, r3
 801b946:	bb3b      	cbnz	r3, 801b998 <rcl_guard_condition_init_from_rmw+0x88>
 801b948:	b334      	cbz	r4, 801b998 <rcl_guard_condition_init_from_rmw+0x88>
 801b94a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b94e:	f1b8 0f00 	cmp.w	r8, #0
 801b952:	d11a      	bne.n	801b98a <rcl_guard_condition_init_from_rmw+0x7a>
 801b954:	b305      	cbz	r5, 801b998 <rcl_guard_condition_init_from_rmw+0x88>
 801b956:	4628      	mov	r0, r5
 801b958:	f7ff ff6a 	bl	801b830 <rcl_context_is_valid>
 801b95c:	b1f0      	cbz	r0, 801b99c <rcl_guard_condition_init_from_rmw+0x8c>
 801b95e:	9b01      	ldr	r3, [sp, #4]
 801b960:	201c      	movs	r0, #28
 801b962:	9905      	ldr	r1, [sp, #20]
 801b964:	4798      	blx	r3
 801b966:	4607      	mov	r7, r0
 801b968:	6060      	str	r0, [r4, #4]
 801b96a:	b320      	cbz	r0, 801b9b6 <rcl_guard_condition_init_from_rmw+0xa6>
 801b96c:	b1c6      	cbz	r6, 801b9a0 <rcl_guard_condition_init_from_rmw+0x90>
 801b96e:	6006      	str	r6, [r0, #0]
 801b970:	f880 8004 	strb.w	r8, [r0, #4]
 801b974:	ac01      	add	r4, sp, #4
 801b976:	f107 0c08 	add.w	ip, r7, #8
 801b97a:	2500      	movs	r5, #0
 801b97c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b97e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b982:	6823      	ldr	r3, [r4, #0]
 801b984:	f8cc 3000 	str.w	r3, [ip]
 801b988:	e000      	b.n	801b98c <rcl_guard_condition_init_from_rmw+0x7c>
 801b98a:	2564      	movs	r5, #100	; 0x64
 801b98c:	4628      	mov	r0, r5
 801b98e:	b006      	add	sp, #24
 801b990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b994:	b002      	add	sp, #8
 801b996:	4770      	bx	lr
 801b998:	250b      	movs	r5, #11
 801b99a:	e7f7      	b.n	801b98c <rcl_guard_condition_init_from_rmw+0x7c>
 801b99c:	2565      	movs	r5, #101	; 0x65
 801b99e:	e7f5      	b.n	801b98c <rcl_guard_condition_init_from_rmw+0x7c>
 801b9a0:	6828      	ldr	r0, [r5, #0]
 801b9a2:	3028      	adds	r0, #40	; 0x28
 801b9a4:	f002 fdbe 	bl	801e524 <rmw_create_guard_condition>
 801b9a8:	6038      	str	r0, [r7, #0]
 801b9aa:	6867      	ldr	r7, [r4, #4]
 801b9ac:	683e      	ldr	r6, [r7, #0]
 801b9ae:	b126      	cbz	r6, 801b9ba <rcl_guard_condition_init_from_rmw+0xaa>
 801b9b0:	2301      	movs	r3, #1
 801b9b2:	713b      	strb	r3, [r7, #4]
 801b9b4:	e7de      	b.n	801b974 <rcl_guard_condition_init_from_rmw+0x64>
 801b9b6:	250a      	movs	r5, #10
 801b9b8:	e7e8      	b.n	801b98c <rcl_guard_condition_init_from_rmw+0x7c>
 801b9ba:	9b02      	ldr	r3, [sp, #8]
 801b9bc:	4638      	mov	r0, r7
 801b9be:	9905      	ldr	r1, [sp, #20]
 801b9c0:	2501      	movs	r5, #1
 801b9c2:	4798      	blx	r3
 801b9c4:	6066      	str	r6, [r4, #4]
 801b9c6:	e7e1      	b.n	801b98c <rcl_guard_condition_init_from_rmw+0x7c>

0801b9c8 <rcl_guard_condition_fini>:
 801b9c8:	b570      	push	{r4, r5, r6, lr}
 801b9ca:	b082      	sub	sp, #8
 801b9cc:	b1f0      	cbz	r0, 801ba0c <rcl_guard_condition_fini+0x44>
 801b9ce:	6843      	ldr	r3, [r0, #4]
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	b163      	cbz	r3, 801b9ee <rcl_guard_condition_fini+0x26>
 801b9d4:	6818      	ldr	r0, [r3, #0]
 801b9d6:	68de      	ldr	r6, [r3, #12]
 801b9d8:	6999      	ldr	r1, [r3, #24]
 801b9da:	b160      	cbz	r0, 801b9f6 <rcl_guard_condition_fini+0x2e>
 801b9dc:	791d      	ldrb	r5, [r3, #4]
 801b9de:	b965      	cbnz	r5, 801b9fa <rcl_guard_condition_fini+0x32>
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	47b0      	blx	r6
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	4628      	mov	r0, r5
 801b9e8:	6063      	str	r3, [r4, #4]
 801b9ea:	b002      	add	sp, #8
 801b9ec:	bd70      	pop	{r4, r5, r6, pc}
 801b9ee:	461d      	mov	r5, r3
 801b9f0:	4628      	mov	r0, r5
 801b9f2:	b002      	add	sp, #8
 801b9f4:	bd70      	pop	{r4, r5, r6, pc}
 801b9f6:	4605      	mov	r5, r0
 801b9f8:	e7f2      	b.n	801b9e0 <rcl_guard_condition_fini+0x18>
 801b9fa:	9101      	str	r1, [sp, #4]
 801b9fc:	f002 fda8 	bl	801e550 <rmw_destroy_guard_condition>
 801ba00:	1e05      	subs	r5, r0, #0
 801ba02:	6863      	ldr	r3, [r4, #4]
 801ba04:	9901      	ldr	r1, [sp, #4]
 801ba06:	bf18      	it	ne
 801ba08:	2501      	movne	r5, #1
 801ba0a:	e7e9      	b.n	801b9e0 <rcl_guard_condition_fini+0x18>
 801ba0c:	250b      	movs	r5, #11
 801ba0e:	4628      	mov	r0, r5
 801ba10:	b002      	add	sp, #8
 801ba12:	bd70      	pop	{r4, r5, r6, pc}

0801ba14 <rcl_guard_condition_get_default_options>:
 801ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba16:	b087      	sub	sp, #28
 801ba18:	4606      	mov	r6, r0
 801ba1a:	4c0b      	ldr	r4, [pc, #44]	; (801ba48 <rcl_guard_condition_get_default_options+0x34>)
 801ba1c:	4668      	mov	r0, sp
 801ba1e:	f7fa faf7 	bl	8016010 <rcutils_get_default_allocator>
 801ba22:	46ee      	mov	lr, sp
 801ba24:	46a4      	mov	ip, r4
 801ba26:	4625      	mov	r5, r4
 801ba28:	4634      	mov	r4, r6
 801ba2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ba2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba34:	f8de 7000 	ldr.w	r7, [lr]
 801ba38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	f8cc 7000 	str.w	r7, [ip]
 801ba40:	6027      	str	r7, [r4, #0]
 801ba42:	b007      	add	sp, #28
 801ba44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba46:	bf00      	nop
 801ba48:	200178b0 	.word	0x200178b0

0801ba4c <rcl_guard_condition_get_rmw_handle>:
 801ba4c:	b110      	cbz	r0, 801ba54 <rcl_guard_condition_get_rmw_handle+0x8>
 801ba4e:	6840      	ldr	r0, [r0, #4]
 801ba50:	b100      	cbz	r0, 801ba54 <rcl_guard_condition_get_rmw_handle+0x8>
 801ba52:	6800      	ldr	r0, [r0, #0]
 801ba54:	4770      	bx	lr
 801ba56:	bf00      	nop

0801ba58 <rcl_init>:
 801ba58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba5c:	1e05      	subs	r5, r0, #0
 801ba5e:	b09e      	sub	sp, #120	; 0x78
 801ba60:	460e      	mov	r6, r1
 801ba62:	4690      	mov	r8, r2
 801ba64:	461f      	mov	r7, r3
 801ba66:	f340 809f 	ble.w	801bba8 <rcl_init+0x150>
 801ba6a:	2900      	cmp	r1, #0
 801ba6c:	f000 809f 	beq.w	801bbae <rcl_init+0x156>
 801ba70:	f1a1 0e04 	sub.w	lr, r1, #4
 801ba74:	f04f 0c00 	mov.w	ip, #0
 801ba78:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ba7c:	f10c 0c01 	add.w	ip, ip, #1
 801ba80:	2c00      	cmp	r4, #0
 801ba82:	f000 8094 	beq.w	801bbae <rcl_init+0x156>
 801ba86:	4565      	cmp	r5, ip
 801ba88:	d1f6      	bne.n	801ba78 <rcl_init+0x20>
 801ba8a:	f1b8 0f00 	cmp.w	r8, #0
 801ba8e:	f000 808e 	beq.w	801bbae <rcl_init+0x156>
 801ba92:	f8d8 4000 	ldr.w	r4, [r8]
 801ba96:	2c00      	cmp	r4, #0
 801ba98:	f000 8089 	beq.w	801bbae <rcl_init+0x156>
 801ba9c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801baa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801baa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801baa6:	6823      	ldr	r3, [r4, #0]
 801baa8:	a819      	add	r0, sp, #100	; 0x64
 801baaa:	f8cc 3000 	str.w	r3, [ip]
 801baae:	f7fa fabd 	bl	801602c <rcutils_allocator_is_valid>
 801bab2:	f080 0001 	eor.w	r0, r0, #1
 801bab6:	b2c0      	uxtb	r0, r0
 801bab8:	2800      	cmp	r0, #0
 801baba:	d178      	bne.n	801bbae <rcl_init+0x156>
 801babc:	2f00      	cmp	r7, #0
 801babe:	d076      	beq.n	801bbae <rcl_init+0x156>
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d178      	bne.n	801bbb8 <rcl_init+0x160>
 801bac6:	2178      	movs	r1, #120	; 0x78
 801bac8:	2001      	movs	r0, #1
 801baca:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801bace:	4798      	blx	r3
 801bad0:	4604      	mov	r4, r0
 801bad2:	6038      	str	r0, [r7, #0]
 801bad4:	2800      	cmp	r0, #0
 801bad6:	f000 80b6 	beq.w	801bc46 <rcl_init+0x1ee>
 801bada:	a802      	add	r0, sp, #8
 801badc:	f002 fab4 	bl	801e048 <rmw_get_zero_initialized_context>
 801bae0:	a902      	add	r1, sp, #8
 801bae2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801bae6:	2250      	movs	r2, #80	; 0x50
 801bae8:	f005 fb57 	bl	802119a <memcpy>
 801baec:	ac19      	add	r4, sp, #100	; 0x64
 801baee:	f8d7 e000 	ldr.w	lr, [r7]
 801baf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801baf4:	46f4      	mov	ip, lr
 801baf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bafa:	6823      	ldr	r3, [r4, #0]
 801bafc:	f10e 0114 	add.w	r1, lr, #20
 801bb00:	4640      	mov	r0, r8
 801bb02:	f8cc 3000 	str.w	r3, [ip]
 801bb06:	f7f8 ff51 	bl	80149ac <rcl_init_options_copy>
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	2800      	cmp	r0, #0
 801bb0e:	d144      	bne.n	801bb9a <rcl_init+0x142>
 801bb10:	f8d7 9000 	ldr.w	r9, [r7]
 801bb14:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801bb18:	f8c9 0020 	str.w	r0, [r9, #32]
 801bb1c:	f8c9 5018 	str.w	r5, [r9, #24]
 801bb20:	f8c9 801c 	str.w	r8, [r9, #28]
 801bb24:	2d00      	cmp	r5, #0
 801bb26:	d04e      	beq.n	801bbc6 <rcl_init+0x16e>
 801bb28:	2e00      	cmp	r6, #0
 801bb2a:	d04c      	beq.n	801bbc6 <rcl_init+0x16e>
 801bb2c:	2104      	movs	r1, #4
 801bb2e:	4628      	mov	r0, r5
 801bb30:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801bb34:	4798      	blx	r3
 801bb36:	f8c9 0020 	str.w	r0, [r9, #32]
 801bb3a:	f8d7 9000 	ldr.w	r9, [r7]
 801bb3e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801bb42:	46ca      	mov	sl, r9
 801bb44:	b343      	cbz	r3, 801bb98 <rcl_init+0x140>
 801bb46:	2d01      	cmp	r5, #1
 801bb48:	f178 0300 	sbcs.w	r3, r8, #0
 801bb4c:	db3b      	blt.n	801bbc6 <rcl_init+0x16e>
 801bb4e:	2400      	movs	r4, #0
 801bb50:	3e04      	subs	r6, #4
 801bb52:	46a1      	mov	r9, r4
 801bb54:	e00b      	b.n	801bb6e <rcl_init+0x116>
 801bb56:	6831      	ldr	r1, [r6, #0]
 801bb58:	f005 fb1f 	bl	802119a <memcpy>
 801bb5c:	3401      	adds	r4, #1
 801bb5e:	f149 0900 	adc.w	r9, r9, #0
 801bb62:	45c8      	cmp	r8, r9
 801bb64:	bf08      	it	eq
 801bb66:	42a5      	cmpeq	r5, r4
 801bb68:	d02b      	beq.n	801bbc2 <rcl_init+0x16a>
 801bb6a:	f8d7 a000 	ldr.w	sl, [r7]
 801bb6e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801bb72:	f7e4 fb6f 	bl	8000254 <strlen>
 801bb76:	1c42      	adds	r2, r0, #1
 801bb78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bb7a:	4610      	mov	r0, r2
 801bb7c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801bb7e:	f8da a020 	ldr.w	sl, [sl, #32]
 801bb82:	9201      	str	r2, [sp, #4]
 801bb84:	4798      	blx	r3
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801bb8c:	6a1b      	ldr	r3, [r3, #32]
 801bb8e:	9a01      	ldr	r2, [sp, #4]
 801bb90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bb94:	2800      	cmp	r0, #0
 801bb96:	d1de      	bne.n	801bb56 <rcl_init+0xfe>
 801bb98:	240a      	movs	r4, #10
 801bb9a:	4638      	mov	r0, r7
 801bb9c:	f7ff fe4e 	bl	801b83c <__cleanup_context>
 801bba0:	4620      	mov	r0, r4
 801bba2:	b01e      	add	sp, #120	; 0x78
 801bba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bba8:	2900      	cmp	r1, #0
 801bbaa:	f43f af6e 	beq.w	801ba8a <rcl_init+0x32>
 801bbae:	240b      	movs	r4, #11
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	b01e      	add	sp, #120	; 0x78
 801bbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbb8:	2464      	movs	r4, #100	; 0x64
 801bbba:	4620      	mov	r0, r4
 801bbbc:	b01e      	add	sp, #120	; 0x78
 801bbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbc2:	f8d7 9000 	ldr.w	r9, [r7]
 801bbc6:	4926      	ldr	r1, [pc, #152]	; (801bc60 <rcl_init+0x208>)
 801bbc8:	680b      	ldr	r3, [r1, #0]
 801bbca:	3301      	adds	r3, #1
 801bbcc:	d036      	beq.n	801bc3c <rcl_init+0x1e4>
 801bbce:	461a      	mov	r2, r3
 801bbd0:	2400      	movs	r4, #0
 801bbd2:	600b      	str	r3, [r1, #0]
 801bbd4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801bbd8:	607b      	str	r3, [r7, #4]
 801bbda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bbdc:	3301      	adds	r3, #1
 801bbde:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801bbe2:	d034      	beq.n	801bc4e <rcl_init+0x1f6>
 801bbe4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801bbe8:	b93b      	cbnz	r3, 801bbfa <rcl_init+0x1a2>
 801bbea:	3030      	adds	r0, #48	; 0x30
 801bbec:	f000 f83a 	bl	801bc64 <rcl_get_localhost_only>
 801bbf0:	4604      	mov	r4, r0
 801bbf2:	2800      	cmp	r0, #0
 801bbf4:	d1d1      	bne.n	801bb9a <rcl_init+0x142>
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	6958      	ldr	r0, [r3, #20]
 801bbfa:	aa18      	add	r2, sp, #96	; 0x60
 801bbfc:	a917      	add	r1, sp, #92	; 0x5c
 801bbfe:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801bc00:	f000 fca0 	bl	801c544 <rcl_validate_enclave_name>
 801bc04:	4604      	mov	r4, r0
 801bc06:	2800      	cmp	r0, #0
 801bc08:	d1c7      	bne.n	801bb9a <rcl_init+0x142>
 801bc0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc0c:	b9eb      	cbnz	r3, 801bc4a <rcl_init+0x1f2>
 801bc0e:	6839      	ldr	r1, [r7, #0]
 801bc10:	694b      	ldr	r3, [r1, #20]
 801bc12:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801bc16:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801bc18:	f000 f9c8 	bl	801bfac <rcl_get_security_options_from_environment>
 801bc1c:	4604      	mov	r4, r0
 801bc1e:	2800      	cmp	r0, #0
 801bc20:	d1bb      	bne.n	801bb9a <rcl_init+0x142>
 801bc22:	6839      	ldr	r1, [r7, #0]
 801bc24:	6948      	ldr	r0, [r1, #20]
 801bc26:	3128      	adds	r1, #40	; 0x28
 801bc28:	3018      	adds	r0, #24
 801bc2a:	f7fa fe83 	bl	8016934 <rmw_init>
 801bc2e:	4604      	mov	r4, r0
 801bc30:	2800      	cmp	r0, #0
 801bc32:	d0bd      	beq.n	801bbb0 <rcl_init+0x158>
 801bc34:	f7ff fdde 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bc38:	4604      	mov	r4, r0
 801bc3a:	e7ae      	b.n	801bb9a <rcl_init+0x142>
 801bc3c:	2201      	movs	r2, #1
 801bc3e:	461c      	mov	r4, r3
 801bc40:	600a      	str	r2, [r1, #0]
 801bc42:	4613      	mov	r3, r2
 801bc44:	e7c6      	b.n	801bbd4 <rcl_init+0x17c>
 801bc46:	240a      	movs	r4, #10
 801bc48:	e7b2      	b.n	801bbb0 <rcl_init+0x158>
 801bc4a:	2401      	movs	r4, #1
 801bc4c:	e7a5      	b.n	801bb9a <rcl_init+0x142>
 801bc4e:	3024      	adds	r0, #36	; 0x24
 801bc50:	f004 f8f8 	bl	801fe44 <rcl_get_default_domain_id>
 801bc54:	4604      	mov	r4, r0
 801bc56:	2800      	cmp	r0, #0
 801bc58:	d19f      	bne.n	801bb9a <rcl_init+0x142>
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	6958      	ldr	r0, [r3, #20]
 801bc5e:	e7c1      	b.n	801bbe4 <rcl_init+0x18c>
 801bc60:	200178c4 	.word	0x200178c4

0801bc64 <rcl_get_localhost_only>:
 801bc64:	b510      	push	{r4, lr}
 801bc66:	2300      	movs	r3, #0
 801bc68:	b082      	sub	sp, #8
 801bc6a:	9301      	str	r3, [sp, #4]
 801bc6c:	b1b8      	cbz	r0, 801bc9e <rcl_get_localhost_only+0x3a>
 801bc6e:	4604      	mov	r4, r0
 801bc70:	a901      	add	r1, sp, #4
 801bc72:	480c      	ldr	r0, [pc, #48]	; (801bca4 <rcl_get_localhost_only+0x40>)
 801bc74:	f7fa f9e8 	bl	8016048 <rcutils_get_env>
 801bc78:	b110      	cbz	r0, 801bc80 <rcl_get_localhost_only+0x1c>
 801bc7a:	2001      	movs	r0, #1
 801bc7c:	b002      	add	sp, #8
 801bc7e:	bd10      	pop	{r4, pc}
 801bc80:	9b01      	ldr	r3, [sp, #4]
 801bc82:	b113      	cbz	r3, 801bc8a <rcl_get_localhost_only+0x26>
 801bc84:	781a      	ldrb	r2, [r3, #0]
 801bc86:	2a31      	cmp	r2, #49	; 0x31
 801bc88:	d004      	beq.n	801bc94 <rcl_get_localhost_only+0x30>
 801bc8a:	2302      	movs	r3, #2
 801bc8c:	2000      	movs	r0, #0
 801bc8e:	7023      	strb	r3, [r4, #0]
 801bc90:	b002      	add	sp, #8
 801bc92:	bd10      	pop	{r4, pc}
 801bc94:	785b      	ldrb	r3, [r3, #1]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d1f7      	bne.n	801bc8a <rcl_get_localhost_only+0x26>
 801bc9a:	2301      	movs	r3, #1
 801bc9c:	e7f6      	b.n	801bc8c <rcl_get_localhost_only+0x28>
 801bc9e:	200b      	movs	r0, #11
 801bca0:	b002      	add	sp, #8
 801bca2:	bd10      	pop	{r4, pc}
 801bca4:	080230ec 	.word	0x080230ec

0801bca8 <rcl_node_resolve_name>:
 801bca8:	b082      	sub	sp, #8
 801bcaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcae:	b091      	sub	sp, #68	; 0x44
 801bcb0:	ac1a      	add	r4, sp, #104	; 0x68
 801bcb2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801bcb6:	e884 000c 	stmia.w	r4, {r2, r3}
 801bcba:	2800      	cmp	r0, #0
 801bcbc:	d03d      	beq.n	801bd3a <rcl_node_resolve_name+0x92>
 801bcbe:	460c      	mov	r4, r1
 801bcc0:	4605      	mov	r5, r0
 801bcc2:	f7f9 f887 	bl	8014dd4 <rcl_node_get_options>
 801bcc6:	2800      	cmp	r0, #0
 801bcc8:	d03a      	beq.n	801bd40 <rcl_node_resolve_name+0x98>
 801bcca:	4628      	mov	r0, r5
 801bccc:	f7f9 f872 	bl	8014db4 <rcl_node_get_name>
 801bcd0:	4606      	mov	r6, r0
 801bcd2:	4628      	mov	r0, r5
 801bcd4:	ad0b      	add	r5, sp, #44	; 0x2c
 801bcd6:	f7f9 f875 	bl	8014dc4 <rcl_node_get_namespace>
 801bcda:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801bcde:	4607      	mov	r7, r0
 801bce0:	46ac      	mov	ip, r5
 801bce2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bce6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bcea:	f8de 3000 	ldr.w	r3, [lr]
 801bcee:	f8cc 3000 	str.w	r3, [ip]
 801bcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bcf4:	b30b      	cbz	r3, 801bd3a <rcl_node_resolve_name+0x92>
 801bcf6:	4689      	mov	r9, r1
 801bcf8:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801bcfc:	f002 f876 	bl	801ddec <rcutils_get_zero_initialized_string_map>
 801bd00:	ab10      	add	r3, sp, #64	; 0x40
 801bd02:	9008      	str	r0, [sp, #32]
 801bd04:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801bd08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bd0c:	2100      	movs	r1, #0
 801bd0e:	a808      	add	r0, sp, #32
 801bd10:	e895 000c 	ldmia.w	r5, {r2, r3}
 801bd14:	f002 f8e0 	bl	801ded8 <rcutils_string_map_init>
 801bd18:	4683      	mov	fp, r0
 801bd1a:	b1a0      	cbz	r0, 801bd46 <rcl_node_resolve_name+0x9e>
 801bd1c:	f7fa f9ac 	bl	8016078 <rcutils_get_error_string>
 801bd20:	f7fa f9c2 	bl	80160a8 <rcutils_reset_error>
 801bd24:	f1bb 0f0a 	cmp.w	fp, #10
 801bd28:	bf18      	it	ne
 801bd2a:	f04f 0b01 	movne.w	fp, #1
 801bd2e:	4658      	mov	r0, fp
 801bd30:	b011      	add	sp, #68	; 0x44
 801bd32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd36:	b002      	add	sp, #8
 801bd38:	4770      	bx	lr
 801bd3a:	f04f 0b0b 	mov.w	fp, #11
 801bd3e:	e7f6      	b.n	801bd2e <rcl_node_resolve_name+0x86>
 801bd40:	f04f 0b01 	mov.w	fp, #1
 801bd44:	e7f3      	b.n	801bd2e <rcl_node_resolve_name+0x86>
 801bd46:	9009      	str	r0, [sp, #36]	; 0x24
 801bd48:	9007      	str	r0, [sp, #28]
 801bd4a:	a808      	add	r0, sp, #32
 801bd4c:	f004 fa0e 	bl	802016c <rcl_get_default_topic_name_substitutions>
 801bd50:	4683      	mov	fp, r0
 801bd52:	b180      	cbz	r0, 801bd76 <rcl_node_resolve_name+0xce>
 801bd54:	280a      	cmp	r0, #10
 801bd56:	a808      	add	r0, sp, #32
 801bd58:	bf18      	it	ne
 801bd5a:	f04f 0b01 	movne.w	fp, #1
 801bd5e:	f002 f8fb 	bl	801df58 <rcutils_string_map_fini>
 801bd62:	4604      	mov	r4, r0
 801bd64:	2800      	cmp	r0, #0
 801bd66:	d15b      	bne.n	801be20 <rcl_node_resolve_name+0x178>
 801bd68:	4651      	mov	r1, sl
 801bd6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd6c:	47c8      	blx	r9
 801bd6e:	4651      	mov	r1, sl
 801bd70:	4620      	mov	r0, r4
 801bd72:	47c8      	blx	r9
 801bd74:	e7db      	b.n	801bd2e <rcl_node_resolve_name+0x86>
 801bd76:	ab09      	add	r3, sp, #36	; 0x24
 801bd78:	46ec      	mov	ip, sp
 801bd7a:	9305      	str	r3, [sp, #20]
 801bd7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd82:	682b      	ldr	r3, [r5, #0]
 801bd84:	463a      	mov	r2, r7
 801bd86:	4631      	mov	r1, r6
 801bd88:	4620      	mov	r0, r4
 801bd8a:	f8cc 3000 	str.w	r3, [ip]
 801bd8e:	ab08      	add	r3, sp, #32
 801bd90:	f004 f88c 	bl	801feac <rcl_expand_topic_name>
 801bd94:	4683      	mov	fp, r0
 801bd96:	b9d8      	cbnz	r0, 801bdd0 <rcl_node_resolve_name+0x128>
 801bd98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bd9a:	4602      	mov	r2, r0
 801bd9c:	9009      	str	r0, [sp, #36]	; 0x24
 801bd9e:	a90a      	add	r1, sp, #40	; 0x28
 801bda0:	4620      	mov	r0, r4
 801bda2:	f002 f9ed 	bl	801e180 <rmw_validate_full_topic_name>
 801bda6:	bb50      	cbnz	r0, 801bdfe <rcl_node_resolve_name+0x156>
 801bda8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bdaa:	2d00      	cmp	r5, #0
 801bdac:	d140      	bne.n	801be30 <rcl_node_resolve_name+0x188>
 801bdae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bdb0:	a808      	add	r0, sp, #32
 801bdb2:	601c      	str	r4, [r3, #0]
 801bdb4:	f002 f8d0 	bl	801df58 <rcutils_string_map_fini>
 801bdb8:	4683      	mov	fp, r0
 801bdba:	2800      	cmp	r0, #0
 801bdbc:	d043      	beq.n	801be46 <rcl_node_resolve_name+0x19e>
 801bdbe:	f7fa f95b 	bl	8016078 <rcutils_get_error_string>
 801bdc2:	46a8      	mov	r8, r5
 801bdc4:	f04f 0b01 	mov.w	fp, #1
 801bdc8:	462c      	mov	r4, r5
 801bdca:	f7fa f96d 	bl	80160a8 <rcutils_reset_error>
 801bdce:	e00a      	b.n	801bde6 <rcl_node_resolve_name+0x13e>
 801bdd0:	2867      	cmp	r0, #103	; 0x67
 801bdd2:	bf14      	ite	ne
 801bdd4:	f04f 0800 	movne.w	r8, #0
 801bdd8:	f008 0801 	andeq.w	r8, r8, #1
 801bddc:	9c07      	ldr	r4, [sp, #28]
 801bdde:	a808      	add	r0, sp, #32
 801bde0:	f002 f8ba 	bl	801df58 <rcutils_string_map_fini>
 801bde4:	bb50      	cbnz	r0, 801be3c <rcl_node_resolve_name+0x194>
 801bde6:	4651      	mov	r1, sl
 801bde8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bdea:	47c8      	blx	r9
 801bdec:	4651      	mov	r1, sl
 801bdee:	4620      	mov	r0, r4
 801bdf0:	47c8      	blx	r9
 801bdf2:	f1b8 0f00 	cmp.w	r8, #0
 801bdf6:	bf18      	it	ne
 801bdf8:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801bdfc:	e797      	b.n	801bd2e <rcl_node_resolve_name+0x86>
 801bdfe:	f7fa f93b 	bl	8016078 <rcutils_get_error_string>
 801be02:	f7fa f951 	bl	80160a8 <rcutils_reset_error>
 801be06:	a808      	add	r0, sp, #32
 801be08:	f002 f8a6 	bl	801df58 <rcutils_string_map_fini>
 801be0c:	b998      	cbnz	r0, 801be36 <rcl_node_resolve_name+0x18e>
 801be0e:	4651      	mov	r1, sl
 801be10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be12:	47c8      	blx	r9
 801be14:	4651      	mov	r1, sl
 801be16:	4620      	mov	r0, r4
 801be18:	f04f 0b01 	mov.w	fp, #1
 801be1c:	47c8      	blx	r9
 801be1e:	e786      	b.n	801bd2e <rcl_node_resolve_name+0x86>
 801be20:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801be24:	f7fa f928 	bl	8016078 <rcutils_get_error_string>
 801be28:	f7fa f93e 	bl	80160a8 <rcutils_reset_error>
 801be2c:	4644      	mov	r4, r8
 801be2e:	e7da      	b.n	801bde6 <rcl_node_resolve_name+0x13e>
 801be30:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801be34:	e7d3      	b.n	801bdde <rcl_node_resolve_name+0x136>
 801be36:	46d8      	mov	r8, fp
 801be38:	f04f 0b01 	mov.w	fp, #1
 801be3c:	f7fa f91c 	bl	8016078 <rcutils_get_error_string>
 801be40:	f7fa f932 	bl	80160a8 <rcutils_reset_error>
 801be44:	e7cf      	b.n	801bde6 <rcl_node_resolve_name+0x13e>
 801be46:	4651      	mov	r1, sl
 801be48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be4a:	47c8      	blx	r9
 801be4c:	4651      	mov	r1, sl
 801be4e:	4658      	mov	r0, fp
 801be50:	47c8      	blx	r9
 801be52:	e76c      	b.n	801bd2e <rcl_node_resolve_name+0x86>

0801be54 <exact_match_lookup>:
 801be54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be56:	f102 0708 	add.w	r7, r2, #8
 801be5a:	460b      	mov	r3, r1
 801be5c:	b085      	sub	sp, #20
 801be5e:	4614      	mov	r4, r2
 801be60:	4606      	mov	r6, r0
 801be62:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801be66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be6a:	4618      	mov	r0, r3
 801be6c:	4919      	ldr	r1, [pc, #100]	; (801bed4 <exact_match_lookup+0x80>)
 801be6e:	e894 000c 	ldmia.w	r4, {r2, r3}
 801be72:	f001 ff83 	bl	801dd7c <rcutils_join_path>
 801be76:	7833      	ldrb	r3, [r6, #0]
 801be78:	4605      	mov	r5, r0
 801be7a:	2b2f      	cmp	r3, #47	; 0x2f
 801be7c:	d023      	beq.n	801bec6 <exact_match_lookup+0x72>
 801be7e:	f104 030c 	add.w	r3, r4, #12
 801be82:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be86:	e88d 0003 	stmia.w	sp, {r0, r1}
 801be8a:	1c70      	adds	r0, r6, #1
 801be8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801be90:	f001 ff7a 	bl	801dd88 <rcutils_to_native_path>
 801be94:	4606      	mov	r6, r0
 801be96:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801be9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be9e:	4631      	mov	r1, r6
 801bea0:	4628      	mov	r0, r5
 801bea2:	e894 000c 	ldmia.w	r4, {r2, r3}
 801bea6:	f001 ff69 	bl	801dd7c <rcutils_join_path>
 801beaa:	4603      	mov	r3, r0
 801beac:	4630      	mov	r0, r6
 801beae:	6862      	ldr	r2, [r4, #4]
 801beb0:	461e      	mov	r6, r3
 801beb2:	6921      	ldr	r1, [r4, #16]
 801beb4:	4790      	blx	r2
 801beb6:	4628      	mov	r0, r5
 801beb8:	4635      	mov	r5, r6
 801beba:	6863      	ldr	r3, [r4, #4]
 801bebc:	6921      	ldr	r1, [r4, #16]
 801bebe:	4798      	blx	r3
 801bec0:	4628      	mov	r0, r5
 801bec2:	b005      	add	sp, #20
 801bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bec6:	7873      	ldrb	r3, [r6, #1]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d1d8      	bne.n	801be7e <exact_match_lookup+0x2a>
 801becc:	4628      	mov	r0, r5
 801bece:	b005      	add	sp, #20
 801bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bed2:	bf00      	nop
 801bed4:	0802313c 	.word	0x0802313c

0801bed8 <rcl_get_secure_root>:
 801bed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bedc:	b085      	sub	sp, #20
 801bede:	b168      	cbz	r0, 801befc <rcl_get_secure_root+0x24>
 801bee0:	4607      	mov	r7, r0
 801bee2:	4608      	mov	r0, r1
 801bee4:	460c      	mov	r4, r1
 801bee6:	f7fa f8a1 	bl	801602c <rcutils_allocator_is_valid>
 801beea:	b138      	cbz	r0, 801befc <rcl_get_secure_root+0x24>
 801beec:	2300      	movs	r3, #0
 801beee:	482d      	ldr	r0, [pc, #180]	; (801bfa4 <rcl_get_secure_root+0xcc>)
 801bef0:	a903      	add	r1, sp, #12
 801bef2:	9303      	str	r3, [sp, #12]
 801bef4:	f7fa f8a8 	bl	8016048 <rcutils_get_env>
 801bef8:	4605      	mov	r5, r0
 801befa:	b120      	cbz	r0, 801bf06 <rcl_get_secure_root+0x2e>
 801befc:	2500      	movs	r5, #0
 801befe:	4628      	mov	r0, r5
 801bf00:	b005      	add	sp, #20
 801bf02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf06:	9b03      	ldr	r3, [sp, #12]
 801bf08:	781a      	ldrb	r2, [r3, #0]
 801bf0a:	2a00      	cmp	r2, #0
 801bf0c:	d0f6      	beq.n	801befc <rcl_get_secure_root+0x24>
 801bf0e:	f104 090c 	add.w	r9, r4, #12
 801bf12:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bf16:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bf20:	f7fa fa18 	bl	8016354 <rcutils_strdup>
 801bf24:	4680      	mov	r8, r0
 801bf26:	2800      	cmp	r0, #0
 801bf28:	d0e8      	beq.n	801befc <rcl_get_secure_root+0x24>
 801bf2a:	a903      	add	r1, sp, #12
 801bf2c:	481e      	ldr	r0, [pc, #120]	; (801bfa8 <rcl_get_secure_root+0xd0>)
 801bf2e:	9503      	str	r5, [sp, #12]
 801bf30:	f7fa f88a 	bl	8016048 <rcutils_get_env>
 801bf34:	b160      	cbz	r0, 801bf50 <rcl_get_secure_root+0x78>
 801bf36:	2600      	movs	r6, #0
 801bf38:	4630      	mov	r0, r6
 801bf3a:	6863      	ldr	r3, [r4, #4]
 801bf3c:	6921      	ldr	r1, [r4, #16]
 801bf3e:	4798      	blx	r3
 801bf40:	4640      	mov	r0, r8
 801bf42:	6863      	ldr	r3, [r4, #4]
 801bf44:	6921      	ldr	r1, [r4, #16]
 801bf46:	4798      	blx	r3
 801bf48:	4628      	mov	r0, r5
 801bf4a:	b005      	add	sp, #20
 801bf4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf50:	9b03      	ldr	r3, [sp, #12]
 801bf52:	781e      	ldrb	r6, [r3, #0]
 801bf54:	b1f6      	cbz	r6, 801bf94 <rcl_get_secure_root+0xbc>
 801bf56:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bf5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bf5e:	4618      	mov	r0, r3
 801bf60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bf64:	f7fa f9f6 	bl	8016354 <rcutils_strdup>
 801bf68:	4606      	mov	r6, r0
 801bf6a:	2800      	cmp	r0, #0
 801bf6c:	d0e3      	beq.n	801bf36 <rcl_get_secure_root+0x5e>
 801bf6e:	4622      	mov	r2, r4
 801bf70:	4641      	mov	r1, r8
 801bf72:	f7ff ff6f 	bl	801be54 <exact_match_lookup>
 801bf76:	4605      	mov	r5, r0
 801bf78:	2d00      	cmp	r5, #0
 801bf7a:	d0dd      	beq.n	801bf38 <rcl_get_secure_root+0x60>
 801bf7c:	4628      	mov	r0, r5
 801bf7e:	f001 fefb 	bl	801dd78 <rcutils_is_directory>
 801bf82:	4603      	mov	r3, r0
 801bf84:	2800      	cmp	r0, #0
 801bf86:	d1d7      	bne.n	801bf38 <rcl_get_secure_root+0x60>
 801bf88:	4628      	mov	r0, r5
 801bf8a:	6921      	ldr	r1, [r4, #16]
 801bf8c:	461d      	mov	r5, r3
 801bf8e:	6863      	ldr	r3, [r4, #4]
 801bf90:	4798      	blx	r3
 801bf92:	e7d1      	b.n	801bf38 <rcl_get_secure_root+0x60>
 801bf94:	4622      	mov	r2, r4
 801bf96:	4638      	mov	r0, r7
 801bf98:	4641      	mov	r1, r8
 801bf9a:	f7ff ff5b 	bl	801be54 <exact_match_lookup>
 801bf9e:	4605      	mov	r5, r0
 801bfa0:	e7ea      	b.n	801bf78 <rcl_get_secure_root+0xa0>
 801bfa2:	bf00      	nop
 801bfa4:	08023148 	.word	0x08023148
 801bfa8:	08023160 	.word	0x08023160

0801bfac <rcl_get_security_options_from_environment>:
 801bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb0:	b082      	sub	sp, #8
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	4606      	mov	r6, r0
 801bfb6:	460f      	mov	r7, r1
 801bfb8:	4821      	ldr	r0, [pc, #132]	; (801c040 <rcl_get_security_options_from_environment+0x94>)
 801bfba:	a901      	add	r1, sp, #4
 801bfbc:	4690      	mov	r8, r2
 801bfbe:	9301      	str	r3, [sp, #4]
 801bfc0:	f7fa f842 	bl	8016048 <rcutils_get_env>
 801bfc4:	b120      	cbz	r0, 801bfd0 <rcl_get_security_options_from_environment+0x24>
 801bfc6:	2501      	movs	r5, #1
 801bfc8:	4628      	mov	r0, r5
 801bfca:	b002      	add	sp, #8
 801bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfd0:	4604      	mov	r4, r0
 801bfd2:	491c      	ldr	r1, [pc, #112]	; (801c044 <rcl_get_security_options_from_environment+0x98>)
 801bfd4:	9801      	ldr	r0, [sp, #4]
 801bfd6:	f7e4 f933 	bl	8000240 <strcmp>
 801bfda:	4605      	mov	r5, r0
 801bfdc:	b9f0      	cbnz	r0, 801c01c <rcl_get_security_options_from_environment+0x70>
 801bfde:	9001      	str	r0, [sp, #4]
 801bfe0:	f1b8 0f00 	cmp.w	r8, #0
 801bfe4:	d021      	beq.n	801c02a <rcl_get_security_options_from_environment+0x7e>
 801bfe6:	a901      	add	r1, sp, #4
 801bfe8:	4817      	ldr	r0, [pc, #92]	; (801c048 <rcl_get_security_options_from_environment+0x9c>)
 801bfea:	f7fa f82d 	bl	8016048 <rcutils_get_env>
 801bfee:	2800      	cmp	r0, #0
 801bff0:	d1e9      	bne.n	801bfc6 <rcl_get_security_options_from_environment+0x1a>
 801bff2:	4916      	ldr	r1, [pc, #88]	; (801c04c <rcl_get_security_options_from_environment+0xa0>)
 801bff4:	9801      	ldr	r0, [sp, #4]
 801bff6:	f7e4 f923 	bl	8000240 <strcmp>
 801bffa:	4603      	mov	r3, r0
 801bffc:	4639      	mov	r1, r7
 801bffe:	4630      	mov	r0, r6
 801c000:	fab3 f383 	clz	r3, r3
 801c004:	095b      	lsrs	r3, r3, #5
 801c006:	f888 3000 	strb.w	r3, [r8]
 801c00a:	f7ff ff65 	bl	801bed8 <rcl_get_secure_root>
 801c00e:	b170      	cbz	r0, 801c02e <rcl_get_security_options_from_environment+0x82>
 801c010:	f8c8 0004 	str.w	r0, [r8, #4]
 801c014:	4628      	mov	r0, r5
 801c016:	b002      	add	sp, #8
 801c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c01c:	4625      	mov	r5, r4
 801c01e:	f888 4000 	strb.w	r4, [r8]
 801c022:	4628      	mov	r0, r5
 801c024:	b002      	add	sp, #8
 801c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c02a:	250b      	movs	r5, #11
 801c02c:	e7cc      	b.n	801bfc8 <rcl_get_security_options_from_environment+0x1c>
 801c02e:	f898 5000 	ldrb.w	r5, [r8]
 801c032:	f1a5 0501 	sub.w	r5, r5, #1
 801c036:	fab5 f585 	clz	r5, r5
 801c03a:	096d      	lsrs	r5, r5, #5
 801c03c:	e7c4      	b.n	801bfc8 <rcl_get_security_options_from_environment+0x1c>
 801c03e:	bf00      	nop
 801c040:	08023100 	.word	0x08023100
 801c044:	08023114 	.word	0x08023114
 801c048:	0802311c 	.word	0x0802311c
 801c04c:	08023134 	.word	0x08023134

0801c050 <rcl_service_get_rmw_handle>:
 801c050:	b118      	cbz	r0, 801c05a <rcl_service_get_rmw_handle+0xa>
 801c052:	6800      	ldr	r0, [r0, #0]
 801c054:	b108      	cbz	r0, 801c05a <rcl_service_get_rmw_handle+0xa>
 801c056:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801c05a:	4770      	bx	lr

0801c05c <rcl_take_request>:
 801c05c:	b570      	push	{r4, r5, r6, lr}
 801c05e:	468e      	mov	lr, r1
 801c060:	b08c      	sub	sp, #48	; 0x30
 801c062:	460c      	mov	r4, r1
 801c064:	4616      	mov	r6, r2
 801c066:	f10d 0c18 	add.w	ip, sp, #24
 801c06a:	4605      	mov	r5, r0
 801c06c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c070:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c074:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801c078:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c07c:	b30d      	cbz	r5, 801c0c2 <rcl_take_request+0x66>
 801c07e:	682b      	ldr	r3, [r5, #0]
 801c080:	b1fb      	cbz	r3, 801c0c2 <rcl_take_request+0x66>
 801c082:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801c086:	b1e0      	cbz	r0, 801c0c2 <rcl_take_request+0x66>
 801c088:	b336      	cbz	r6, 801c0d8 <rcl_take_request+0x7c>
 801c08a:	2300      	movs	r3, #0
 801c08c:	4632      	mov	r2, r6
 801c08e:	a902      	add	r1, sp, #8
 801c090:	f88d 3007 	strb.w	r3, [sp, #7]
 801c094:	f10d 0307 	add.w	r3, sp, #7
 801c098:	f002 fb2e 	bl	801e6f8 <rmw_take_request>
 801c09c:	4605      	mov	r5, r0
 801c09e:	b198      	cbz	r0, 801c0c8 <rcl_take_request+0x6c>
 801c0a0:	280a      	cmp	r0, #10
 801c0a2:	bf18      	it	ne
 801c0a4:	2501      	movne	r5, #1
 801c0a6:	f10d 0e18 	add.w	lr, sp, #24
 801c0aa:	46a4      	mov	ip, r4
 801c0ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c0b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801c0b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c0bc:	4628      	mov	r0, r5
 801c0be:	b00c      	add	sp, #48	; 0x30
 801c0c0:	bd70      	pop	{r4, r5, r6, pc}
 801c0c2:	f44f 7516 	mov.w	r5, #600	; 0x258
 801c0c6:	e7ee      	b.n	801c0a6 <rcl_take_request+0x4a>
 801c0c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801c0cc:	f240 2359 	movw	r3, #601	; 0x259
 801c0d0:	2a00      	cmp	r2, #0
 801c0d2:	bf08      	it	eq
 801c0d4:	461d      	moveq	r5, r3
 801c0d6:	e7e6      	b.n	801c0a6 <rcl_take_request+0x4a>
 801c0d8:	250b      	movs	r5, #11
 801c0da:	e7e4      	b.n	801c0a6 <rcl_take_request+0x4a>

0801c0dc <rcl_send_response>:
 801c0dc:	b170      	cbz	r0, 801c0fc <rcl_send_response+0x20>
 801c0de:	6800      	ldr	r0, [r0, #0]
 801c0e0:	b160      	cbz	r0, 801c0fc <rcl_send_response+0x20>
 801c0e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801c0e6:	b148      	cbz	r0, 801c0fc <rcl_send_response+0x20>
 801c0e8:	b169      	cbz	r1, 801c106 <rcl_send_response+0x2a>
 801c0ea:	b510      	push	{r4, lr}
 801c0ec:	b14a      	cbz	r2, 801c102 <rcl_send_response+0x26>
 801c0ee:	f002 fb61 	bl	801e7b4 <rmw_send_response>
 801c0f2:	b110      	cbz	r0, 801c0fa <rcl_send_response+0x1e>
 801c0f4:	2802      	cmp	r0, #2
 801c0f6:	bf18      	it	ne
 801c0f8:	2001      	movne	r0, #1
 801c0fa:	bd10      	pop	{r4, pc}
 801c0fc:	f44f 7016 	mov.w	r0, #600	; 0x258
 801c100:	4770      	bx	lr
 801c102:	200b      	movs	r0, #11
 801c104:	bd10      	pop	{r4, pc}
 801c106:	200b      	movs	r0, #11
 801c108:	4770      	bx	lr
 801c10a:	bf00      	nop

0801c10c <rcl_service_is_valid>:
 801c10c:	b130      	cbz	r0, 801c11c <rcl_service_is_valid+0x10>
 801c10e:	6800      	ldr	r0, [r0, #0]
 801c110:	b120      	cbz	r0, 801c11c <rcl_service_is_valid+0x10>
 801c112:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801c116:	3800      	subs	r0, #0
 801c118:	bf18      	it	ne
 801c11a:	2001      	movne	r0, #1
 801c11c:	4770      	bx	lr
 801c11e:	bf00      	nop

0801c120 <rcl_get_system_time>:
 801c120:	4608      	mov	r0, r1
 801c122:	f7fa b955 	b.w	80163d0 <rcutils_system_time_now>
 801c126:	bf00      	nop

0801c128 <rcl_get_steady_time>:
 801c128:	4608      	mov	r0, r1
 801c12a:	f7fa b977 	b.w	801641c <rcutils_steady_time_now>
 801c12e:	bf00      	nop

0801c130 <rcl_get_ros_time>:
 801c130:	7a03      	ldrb	r3, [r0, #8]
 801c132:	b510      	push	{r4, lr}
 801c134:	460c      	mov	r4, r1
 801c136:	b143      	cbz	r3, 801c14a <rcl_get_ros_time+0x1a>
 801c138:	2105      	movs	r1, #5
 801c13a:	f001 fd79 	bl	801dc30 <__atomic_load_8>
 801c13e:	4602      	mov	r2, r0
 801c140:	460b      	mov	r3, r1
 801c142:	2000      	movs	r0, #0
 801c144:	e9c4 2300 	strd	r2, r3, [r4]
 801c148:	bd10      	pop	{r4, pc}
 801c14a:	4608      	mov	r0, r1
 801c14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c150:	f7fa b93e 	b.w	80163d0 <rcutils_system_time_now>

0801c154 <rcl_clock_init>:
 801c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c156:	4605      	mov	r5, r0
 801c158:	4610      	mov	r0, r2
 801c15a:	4614      	mov	r4, r2
 801c15c:	460e      	mov	r6, r1
 801c15e:	f7f9 ff65 	bl	801602c <rcutils_allocator_is_valid>
 801c162:	b128      	cbz	r0, 801c170 <rcl_clock_init+0x1c>
 801c164:	2d03      	cmp	r5, #3
 801c166:	d803      	bhi.n	801c170 <rcl_clock_init+0x1c>
 801c168:	e8df f005 	tbb	[pc, r5]
 801c16c:	0659301f 	.word	0x0659301f
 801c170:	f04f 0c0b 	mov.w	ip, #11
 801c174:	4660      	mov	r0, ip
 801c176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c178:	2c00      	cmp	r4, #0
 801c17a:	d0f9      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c17c:	fab6 f386 	clz	r3, r6
 801c180:	095b      	lsrs	r3, r3, #5
 801c182:	2e00      	cmp	r6, #0
 801c184:	d0f4      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c186:	6133      	str	r3, [r6, #16]
 801c188:	469c      	mov	ip, r3
 801c18a:	f106 0514 	add.w	r5, r6, #20
 801c18e:	4f32      	ldr	r7, [pc, #200]	; (801c258 <rcl_clock_init+0x104>)
 801c190:	f04f 0e03 	mov.w	lr, #3
 801c194:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801c198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c19a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c19c:	6823      	ldr	r3, [r4, #0]
 801c19e:	4660      	mov	r0, ip
 801c1a0:	602b      	str	r3, [r5, #0]
 801c1a2:	60f7      	str	r7, [r6, #12]
 801c1a4:	f886 e000 	strb.w	lr, [r6]
 801c1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1aa:	2e00      	cmp	r6, #0
 801c1ac:	d0e0      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	f106 0514 	add.w	r5, r6, #20
 801c1b4:	7033      	strb	r3, [r6, #0]
 801c1b6:	469c      	mov	ip, r3
 801c1b8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801c1bc:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801c1c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c1c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c1c4:	6823      	ldr	r3, [r4, #0]
 801c1c6:	4660      	mov	r0, ip
 801c1c8:	602b      	str	r3, [r5, #0]
 801c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1cc:	2c00      	cmp	r4, #0
 801c1ce:	d0cf      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c1d0:	fab6 f586 	clz	r5, r6
 801c1d4:	096d      	lsrs	r5, r5, #5
 801c1d6:	2e00      	cmp	r6, #0
 801c1d8:	d0ca      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c1da:	46a6      	mov	lr, r4
 801c1dc:	7035      	strb	r5, [r6, #0]
 801c1de:	f106 0c14 	add.w	ip, r6, #20
 801c1e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c1e6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801c1ea:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801c1ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1f2:	f8de 3000 	ldr.w	r3, [lr]
 801c1f6:	2010      	movs	r0, #16
 801c1f8:	f8cc 3000 	str.w	r3, [ip]
 801c1fc:	6823      	ldr	r3, [r4, #0]
 801c1fe:	6921      	ldr	r1, [r4, #16]
 801c200:	4798      	blx	r3
 801c202:	6130      	str	r0, [r6, #16]
 801c204:	b320      	cbz	r0, 801c250 <rcl_clock_init+0xfc>
 801c206:	2200      	movs	r2, #0
 801c208:	2300      	movs	r3, #0
 801c20a:	46ac      	mov	ip, r5
 801c20c:	7205      	strb	r5, [r0, #8]
 801c20e:	e9c0 2300 	strd	r2, r3, [r0]
 801c212:	4a12      	ldr	r2, [pc, #72]	; (801c25c <rcl_clock_init+0x108>)
 801c214:	2301      	movs	r3, #1
 801c216:	4660      	mov	r0, ip
 801c218:	60f2      	str	r2, [r6, #12]
 801c21a:	7033      	strb	r3, [r6, #0]
 801c21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c21e:	2c00      	cmp	r4, #0
 801c220:	d0a6      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c222:	fab6 f386 	clz	r3, r6
 801c226:	095b      	lsrs	r3, r3, #5
 801c228:	2e00      	cmp	r6, #0
 801c22a:	d0a1      	beq.n	801c170 <rcl_clock_init+0x1c>
 801c22c:	6133      	str	r3, [r6, #16]
 801c22e:	469c      	mov	ip, r3
 801c230:	f106 0514 	add.w	r5, r6, #20
 801c234:	f8df e028 	ldr.w	lr, [pc, #40]	; 801c260 <rcl_clock_init+0x10c>
 801c238:	2702      	movs	r7, #2
 801c23a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801c23e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c242:	6823      	ldr	r3, [r4, #0]
 801c244:	4660      	mov	r0, ip
 801c246:	602b      	str	r3, [r5, #0]
 801c248:	f8c6 e00c 	str.w	lr, [r6, #12]
 801c24c:	7037      	strb	r7, [r6, #0]
 801c24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c250:	f04f 0c0a 	mov.w	ip, #10
 801c254:	e78e      	b.n	801c174 <rcl_clock_init+0x20>
 801c256:	bf00      	nop
 801c258:	0801c129 	.word	0x0801c129
 801c25c:	0801c131 	.word	0x0801c131
 801c260:	0801c121 	.word	0x0801c121

0801c264 <rcl_clock_get_now>:
 801c264:	b140      	cbz	r0, 801c278 <rcl_clock_get_now+0x14>
 801c266:	b139      	cbz	r1, 801c278 <rcl_clock_get_now+0x14>
 801c268:	7803      	ldrb	r3, [r0, #0]
 801c26a:	b11b      	cbz	r3, 801c274 <rcl_clock_get_now+0x10>
 801c26c:	68c3      	ldr	r3, [r0, #12]
 801c26e:	b10b      	cbz	r3, 801c274 <rcl_clock_get_now+0x10>
 801c270:	6900      	ldr	r0, [r0, #16]
 801c272:	4718      	bx	r3
 801c274:	2001      	movs	r0, #1
 801c276:	4770      	bx	lr
 801c278:	200b      	movs	r0, #11
 801c27a:	4770      	bx	lr

0801c27c <rcl_timer_call>:
 801c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c280:	b087      	sub	sp, #28
 801c282:	2800      	cmp	r0, #0
 801c284:	d06c      	beq.n	801c360 <rcl_timer_call+0xe4>
 801c286:	6803      	ldr	r3, [r0, #0]
 801c288:	4604      	mov	r4, r0
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d062      	beq.n	801c354 <rcl_timer_call+0xd8>
 801c28e:	f3bf 8f5b 	dmb	ish
 801c292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c296:	f3bf 8f5b 	dmb	ish
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d14f      	bne.n	801c33e <rcl_timer_call+0xc2>
 801c29e:	6803      	ldr	r3, [r0, #0]
 801c2a0:	a904      	add	r1, sp, #16
 801c2a2:	6818      	ldr	r0, [r3, #0]
 801c2a4:	f7ff ffde 	bl	801c264 <rcl_clock_get_now>
 801c2a8:	4605      	mov	r5, r0
 801c2aa:	2800      	cmp	r0, #0
 801c2ac:	d149      	bne.n	801c342 <rcl_timer_call+0xc6>
 801c2ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	db49      	blt.n	801c34a <rcl_timer_call+0xce>
 801c2b6:	2605      	movs	r6, #5
 801c2b8:	6820      	ldr	r0, [r4, #0]
 801c2ba:	9600      	str	r6, [sp, #0]
 801c2bc:	3020      	adds	r0, #32
 801c2be:	f001 fd23 	bl	801dd08 <__atomic_exchange_8>
 801c2c2:	6823      	ldr	r3, [r4, #0]
 801c2c4:	4680      	mov	r8, r0
 801c2c6:	f3bf 8f5b 	dmb	ish
 801c2ca:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c2ce:	f3bf 8f5b 	dmb	ish
 801c2d2:	6820      	ldr	r0, [r4, #0]
 801c2d4:	4689      	mov	r9, r1
 801c2d6:	4631      	mov	r1, r6
 801c2d8:	3028      	adds	r0, #40	; 0x28
 801c2da:	f001 fca9 	bl	801dc30 <__atomic_load_8>
 801c2de:	460f      	mov	r7, r1
 801c2e0:	4631      	mov	r1, r6
 801c2e2:	4606      	mov	r6, r0
 801c2e4:	6820      	ldr	r0, [r4, #0]
 801c2e6:	3018      	adds	r0, #24
 801c2e8:	f001 fca2 	bl	801dc30 <__atomic_load_8>
 801c2ec:	4602      	mov	r2, r0
 801c2ee:	9804      	ldr	r0, [sp, #16]
 801c2f0:	460b      	mov	r3, r1
 801c2f2:	18b6      	adds	r6, r6, r2
 801c2f4:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c2f8:	4692      	mov	sl, r2
 801c2fa:	eb47 0701 	adc.w	r7, r7, r1
 801c2fe:	4286      	cmp	r6, r0
 801c300:	eb77 010c 	sbcs.w	r1, r7, ip
 801c304:	da04      	bge.n	801c310 <rcl_timer_call+0x94>
 801c306:	ea53 0102 	orrs.w	r1, r3, r2
 801c30a:	d12e      	bne.n	801c36a <rcl_timer_call+0xee>
 801c30c:	4606      	mov	r6, r0
 801c30e:	4667      	mov	r7, ip
 801c310:	6820      	ldr	r0, [r4, #0]
 801c312:	2105      	movs	r1, #5
 801c314:	4632      	mov	r2, r6
 801c316:	463b      	mov	r3, r7
 801c318:	3028      	adds	r0, #40	; 0x28
 801c31a:	9100      	str	r1, [sp, #0]
 801c31c:	f001 fcbe 	bl	801dc9c <__atomic_store_8>
 801c320:	f1bb 0f00 	cmp.w	fp, #0
 801c324:	d00d      	beq.n	801c342 <rcl_timer_call+0xc6>
 801c326:	9a04      	ldr	r2, [sp, #16]
 801c328:	4620      	mov	r0, r4
 801c32a:	9b05      	ldr	r3, [sp, #20]
 801c32c:	ebb2 0208 	subs.w	r2, r2, r8
 801c330:	eb63 0309 	sbc.w	r3, r3, r9
 801c334:	47d8      	blx	fp
 801c336:	4628      	mov	r0, r5
 801c338:	b007      	add	sp, #28
 801c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c33e:	f240 3521 	movw	r5, #801	; 0x321
 801c342:	4628      	mov	r0, r5
 801c344:	b007      	add	sp, #28
 801c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c34a:	2501      	movs	r5, #1
 801c34c:	4628      	mov	r0, r5
 801c34e:	b007      	add	sp, #28
 801c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c354:	f44f 7548 	mov.w	r5, #800	; 0x320
 801c358:	4628      	mov	r0, r5
 801c35a:	b007      	add	sp, #28
 801c35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c360:	250b      	movs	r5, #11
 801c362:	4628      	mov	r0, r5
 801c364:	b007      	add	sp, #28
 801c366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c36a:	1b80      	subs	r0, r0, r6
 801c36c:	eb6c 0107 	sbc.w	r1, ip, r7
 801c370:	3801      	subs	r0, #1
 801c372:	f161 0100 	sbc.w	r1, r1, #0
 801c376:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c37a:	f7e4 f8d7 	bl	800052c <__aeabi_ldivmod>
 801c37e:	9b02      	ldr	r3, [sp, #8]
 801c380:	3001      	adds	r0, #1
 801c382:	f141 0100 	adc.w	r1, r1, #0
 801c386:	fb00 f303 	mul.w	r3, r0, r3
 801c38a:	fb01 330a 	mla	r3, r1, sl, r3
 801c38e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c392:	1986      	adds	r6, r0, r6
 801c394:	4453      	add	r3, sl
 801c396:	eb43 0707 	adc.w	r7, r3, r7
 801c39a:	e7b9      	b.n	801c310 <rcl_timer_call+0x94>

0801c39c <rcl_timer_is_ready>:
 801c39c:	b570      	push	{r4, r5, r6, lr}
 801c39e:	b082      	sub	sp, #8
 801c3a0:	b380      	cbz	r0, 801c404 <rcl_timer_is_ready+0x68>
 801c3a2:	6803      	ldr	r3, [r0, #0]
 801c3a4:	4604      	mov	r4, r0
 801c3a6:	b38b      	cbz	r3, 801c40c <rcl_timer_is_ready+0x70>
 801c3a8:	460d      	mov	r5, r1
 801c3aa:	b359      	cbz	r1, 801c404 <rcl_timer_is_ready+0x68>
 801c3ac:	f3bf 8f5b 	dmb	ish
 801c3b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c3b4:	f3bf 8f5b 	dmb	ish
 801c3b8:	b953      	cbnz	r3, 801c3d0 <rcl_timer_is_ready+0x34>
 801c3ba:	6803      	ldr	r3, [r0, #0]
 801c3bc:	4669      	mov	r1, sp
 801c3be:	6818      	ldr	r0, [r3, #0]
 801c3c0:	f7ff ff50 	bl	801c264 <rcl_clock_get_now>
 801c3c4:	4606      	mov	r6, r0
 801c3c6:	b148      	cbz	r0, 801c3dc <rcl_timer_is_ready+0x40>
 801c3c8:	f240 3321 	movw	r3, #801	; 0x321
 801c3cc:	4298      	cmp	r0, r3
 801c3ce:	d102      	bne.n	801c3d6 <rcl_timer_is_ready+0x3a>
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	461e      	mov	r6, r3
 801c3d4:	702b      	strb	r3, [r5, #0]
 801c3d6:	4630      	mov	r0, r6
 801c3d8:	b002      	add	sp, #8
 801c3da:	bd70      	pop	{r4, r5, r6, pc}
 801c3dc:	6820      	ldr	r0, [r4, #0]
 801c3de:	2105      	movs	r1, #5
 801c3e0:	3028      	adds	r0, #40	; 0x28
 801c3e2:	f001 fc25 	bl	801dc30 <__atomic_load_8>
 801c3e6:	9b00      	ldr	r3, [sp, #0]
 801c3e8:	1ac0      	subs	r0, r0, r3
 801c3ea:	9b01      	ldr	r3, [sp, #4]
 801c3ec:	eb61 0103 	sbc.w	r1, r1, r3
 801c3f0:	2801      	cmp	r0, #1
 801c3f2:	4630      	mov	r0, r6
 801c3f4:	f171 0300 	sbcs.w	r3, r1, #0
 801c3f8:	bfb4      	ite	lt
 801c3fa:	2301      	movlt	r3, #1
 801c3fc:	2300      	movge	r3, #0
 801c3fe:	702b      	strb	r3, [r5, #0]
 801c400:	b002      	add	sp, #8
 801c402:	bd70      	pop	{r4, r5, r6, pc}
 801c404:	260b      	movs	r6, #11
 801c406:	4630      	mov	r0, r6
 801c408:	b002      	add	sp, #8
 801c40a:	bd70      	pop	{r4, r5, r6, pc}
 801c40c:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c410:	e7e1      	b.n	801c3d6 <rcl_timer_is_ready+0x3a>
 801c412:	bf00      	nop

0801c414 <rcl_timer_get_time_until_next_call>:
 801c414:	b570      	push	{r4, r5, r6, lr}
 801c416:	b082      	sub	sp, #8
 801c418:	b330      	cbz	r0, 801c468 <rcl_timer_get_time_until_next_call+0x54>
 801c41a:	6803      	ldr	r3, [r0, #0]
 801c41c:	4604      	mov	r4, r0
 801c41e:	b33b      	cbz	r3, 801c470 <rcl_timer_get_time_until_next_call+0x5c>
 801c420:	460d      	mov	r5, r1
 801c422:	b309      	cbz	r1, 801c468 <rcl_timer_get_time_until_next_call+0x54>
 801c424:	f3bf 8f5b 	dmb	ish
 801c428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c42c:	f3bf 8f5b 	dmb	ish
 801c430:	b9ab      	cbnz	r3, 801c45e <rcl_timer_get_time_until_next_call+0x4a>
 801c432:	6803      	ldr	r3, [r0, #0]
 801c434:	4669      	mov	r1, sp
 801c436:	6818      	ldr	r0, [r3, #0]
 801c438:	f7ff ff14 	bl	801c264 <rcl_clock_get_now>
 801c43c:	4606      	mov	r6, r0
 801c43e:	b958      	cbnz	r0, 801c458 <rcl_timer_get_time_until_next_call+0x44>
 801c440:	6820      	ldr	r0, [r4, #0]
 801c442:	2105      	movs	r1, #5
 801c444:	3028      	adds	r0, #40	; 0x28
 801c446:	f001 fbf3 	bl	801dc30 <__atomic_load_8>
 801c44a:	9b00      	ldr	r3, [sp, #0]
 801c44c:	1ac0      	subs	r0, r0, r3
 801c44e:	9b01      	ldr	r3, [sp, #4]
 801c450:	eb61 0103 	sbc.w	r1, r1, r3
 801c454:	6028      	str	r0, [r5, #0]
 801c456:	6069      	str	r1, [r5, #4]
 801c458:	4630      	mov	r0, r6
 801c45a:	b002      	add	sp, #8
 801c45c:	bd70      	pop	{r4, r5, r6, pc}
 801c45e:	f240 3621 	movw	r6, #801	; 0x321
 801c462:	4630      	mov	r0, r6
 801c464:	b002      	add	sp, #8
 801c466:	bd70      	pop	{r4, r5, r6, pc}
 801c468:	260b      	movs	r6, #11
 801c46a:	4630      	mov	r0, r6
 801c46c:	b002      	add	sp, #8
 801c46e:	bd70      	pop	{r4, r5, r6, pc}
 801c470:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c474:	e7f0      	b.n	801c458 <rcl_timer_get_time_until_next_call+0x44>
 801c476:	bf00      	nop

0801c478 <rcl_timer_get_guard_condition>:
 801c478:	b130      	cbz	r0, 801c488 <rcl_timer_get_guard_condition+0x10>
 801c47a:	6800      	ldr	r0, [r0, #0]
 801c47c:	b120      	cbz	r0, 801c488 <rcl_timer_get_guard_condition+0x10>
 801c47e:	68c3      	ldr	r3, [r0, #12]
 801c480:	b10b      	cbz	r3, 801c486 <rcl_timer_get_guard_condition+0xe>
 801c482:	3008      	adds	r0, #8
 801c484:	4770      	bx	lr
 801c486:	4618      	mov	r0, r3
 801c488:	4770      	bx	lr
 801c48a:	bf00      	nop

0801c48c <rcl_validate_enclave_name_with_size>:
 801c48c:	2800      	cmp	r0, #0
 801c48e:	d049      	beq.n	801c524 <rcl_validate_enclave_name_with_size+0x98>
 801c490:	b570      	push	{r4, r5, r6, lr}
 801c492:	4615      	mov	r5, r2
 801c494:	b0c2      	sub	sp, #264	; 0x108
 801c496:	b19a      	cbz	r2, 801c4c0 <rcl_validate_enclave_name_with_size+0x34>
 801c498:	461e      	mov	r6, r3
 801c49a:	466a      	mov	r2, sp
 801c49c:	ab01      	add	r3, sp, #4
 801c49e:	460c      	mov	r4, r1
 801c4a0:	f7fa f81e 	bl	80164e0 <rmw_validate_namespace_with_size>
 801c4a4:	4684      	mov	ip, r0
 801c4a6:	b9b8      	cbnz	r0, 801c4d8 <rcl_validate_enclave_name_with_size+0x4c>
 801c4a8:	9900      	ldr	r1, [sp, #0]
 801c4aa:	b171      	cbz	r1, 801c4ca <rcl_validate_enclave_name_with_size+0x3e>
 801c4ac:	2907      	cmp	r1, #7
 801c4ae:	d019      	beq.n	801c4e4 <rcl_validate_enclave_name_with_size+0x58>
 801c4b0:	1e4b      	subs	r3, r1, #1
 801c4b2:	2b05      	cmp	r3, #5
 801c4b4:	d83a      	bhi.n	801c52c <rcl_validate_enclave_name_with_size+0xa0>
 801c4b6:	e8df f003 	tbb	[pc, r3]
 801c4ba:	2926      	.short	0x2926
 801c4bc:	1d322f2c 	.word	0x1d322f2c
 801c4c0:	f04f 0c0b 	mov.w	ip, #11
 801c4c4:	4660      	mov	r0, ip
 801c4c6:	b042      	add	sp, #264	; 0x108
 801c4c8:	bd70      	pop	{r4, r5, r6, pc}
 801c4ca:	2907      	cmp	r1, #7
 801c4cc:	d00a      	beq.n	801c4e4 <rcl_validate_enclave_name_with_size+0x58>
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	4660      	mov	r0, ip
 801c4d2:	602b      	str	r3, [r5, #0]
 801c4d4:	b042      	add	sp, #264	; 0x108
 801c4d6:	bd70      	pop	{r4, r5, r6, pc}
 801c4d8:	f7ff f98c 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c4dc:	4684      	mov	ip, r0
 801c4de:	4660      	mov	r0, ip
 801c4e0:	b042      	add	sp, #264	; 0x108
 801c4e2:	bd70      	pop	{r4, r5, r6, pc}
 801c4e4:	2cff      	cmp	r4, #255	; 0xff
 801c4e6:	d9f2      	bls.n	801c4ce <rcl_validate_enclave_name_with_size+0x42>
 801c4e8:	6029      	str	r1, [r5, #0]
 801c4ea:	2e00      	cmp	r6, #0
 801c4ec:	d0ea      	beq.n	801c4c4 <rcl_validate_enclave_name_with_size+0x38>
 801c4ee:	23fe      	movs	r3, #254	; 0xfe
 801c4f0:	6033      	str	r3, [r6, #0]
 801c4f2:	e7e7      	b.n	801c4c4 <rcl_validate_enclave_name_with_size+0x38>
 801c4f4:	2306      	movs	r3, #6
 801c4f6:	602b      	str	r3, [r5, #0]
 801c4f8:	2e00      	cmp	r6, #0
 801c4fa:	d0e3      	beq.n	801c4c4 <rcl_validate_enclave_name_with_size+0x38>
 801c4fc:	9b01      	ldr	r3, [sp, #4]
 801c4fe:	4660      	mov	r0, ip
 801c500:	6033      	str	r3, [r6, #0]
 801c502:	b042      	add	sp, #264	; 0x108
 801c504:	bd70      	pop	{r4, r5, r6, pc}
 801c506:	2301      	movs	r3, #1
 801c508:	602b      	str	r3, [r5, #0]
 801c50a:	e7f5      	b.n	801c4f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c50c:	2302      	movs	r3, #2
 801c50e:	602b      	str	r3, [r5, #0]
 801c510:	e7f2      	b.n	801c4f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c512:	2303      	movs	r3, #3
 801c514:	602b      	str	r3, [r5, #0]
 801c516:	e7ef      	b.n	801c4f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c518:	2304      	movs	r3, #4
 801c51a:	602b      	str	r3, [r5, #0]
 801c51c:	e7ec      	b.n	801c4f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c51e:	2305      	movs	r3, #5
 801c520:	602b      	str	r3, [r5, #0]
 801c522:	e7e9      	b.n	801c4f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c524:	f04f 0c0b 	mov.w	ip, #11
 801c528:	4660      	mov	r0, ip
 801c52a:	4770      	bx	lr
 801c52c:	460b      	mov	r3, r1
 801c52e:	4a04      	ldr	r2, [pc, #16]	; (801c540 <rcl_validate_enclave_name_with_size+0xb4>)
 801c530:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c534:	a802      	add	r0, sp, #8
 801c536:	f7f9 febf 	bl	80162b8 <rcutils_snprintf>
 801c53a:	f04f 0c01 	mov.w	ip, #1
 801c53e:	e7c1      	b.n	801c4c4 <rcl_validate_enclave_name_with_size+0x38>
 801c540:	08023180 	.word	0x08023180

0801c544 <rcl_validate_enclave_name>:
 801c544:	b168      	cbz	r0, 801c562 <rcl_validate_enclave_name+0x1e>
 801c546:	b570      	push	{r4, r5, r6, lr}
 801c548:	460d      	mov	r5, r1
 801c54a:	4616      	mov	r6, r2
 801c54c:	4604      	mov	r4, r0
 801c54e:	f7e3 fe81 	bl	8000254 <strlen>
 801c552:	4633      	mov	r3, r6
 801c554:	4601      	mov	r1, r0
 801c556:	462a      	mov	r2, r5
 801c558:	4620      	mov	r0, r4
 801c55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c55e:	f7ff bf95 	b.w	801c48c <rcl_validate_enclave_name_with_size>
 801c562:	200b      	movs	r0, #11
 801c564:	4770      	bx	lr
 801c566:	bf00      	nop

0801c568 <rcl_get_zero_initialized_wait_set>:
 801c568:	b510      	push	{r4, lr}
 801c56a:	4c08      	ldr	r4, [pc, #32]	; (801c58c <rcl_get_zero_initialized_wait_set+0x24>)
 801c56c:	4686      	mov	lr, r0
 801c56e:	4684      	mov	ip, r0
 801c570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c572:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c578:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c57e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c582:	6823      	ldr	r3, [r4, #0]
 801c584:	4670      	mov	r0, lr
 801c586:	f8cc 3000 	str.w	r3, [ip]
 801c58a:	bd10      	pop	{r4, pc}
 801c58c:	080231e0 	.word	0x080231e0

0801c590 <rcl_wait_set_is_valid>:
 801c590:	b118      	cbz	r0, 801c59a <rcl_wait_set_is_valid+0xa>
 801c592:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c594:	3800      	subs	r0, #0
 801c596:	bf18      	it	ne
 801c598:	2001      	movne	r0, #1
 801c59a:	4770      	bx	lr

0801c59c <rcl_wait_set_fini>:
 801c59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5a0:	b082      	sub	sp, #8
 801c5a2:	2800      	cmp	r0, #0
 801c5a4:	f000 8095 	beq.w	801c6d2 <rcl_wait_set_fini+0x136>
 801c5a8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	2e00      	cmp	r6, #0
 801c5ae:	f000 808c 	beq.w	801c6ca <rcl_wait_set_fini+0x12e>
 801c5b2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c5b4:	f002 fb10 	bl	801ebd8 <rmw_destroy_wait_set>
 801c5b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c5ba:	1e06      	subs	r6, r0, #0
 801c5bc:	bf18      	it	ne
 801c5be:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c5c2:	2d00      	cmp	r5, #0
 801c5c4:	f000 8081 	beq.w	801c6ca <rcl_wait_set_fini+0x12e>
 801c5c8:	2700      	movs	r7, #0
 801c5ca:	6820      	ldr	r0, [r4, #0]
 801c5cc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c5d0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c5d2:	6067      	str	r7, [r4, #4]
 801c5d4:	602f      	str	r7, [r5, #0]
 801c5d6:	b120      	cbz	r0, 801c5e2 <rcl_wait_set_fini+0x46>
 801c5d8:	9101      	str	r1, [sp, #4]
 801c5da:	47c0      	blx	r8
 801c5dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c5de:	9901      	ldr	r1, [sp, #4]
 801c5e0:	6027      	str	r7, [r4, #0]
 801c5e2:	68a8      	ldr	r0, [r5, #8]
 801c5e4:	b120      	cbz	r0, 801c5f0 <rcl_wait_set_fini+0x54>
 801c5e6:	47c0      	blx	r8
 801c5e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c5f0:	f04f 0800 	mov.w	r8, #0
 801c5f4:	68a0      	ldr	r0, [r4, #8]
 801c5f6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c5f8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c5fa:	f8c4 800c 	str.w	r8, [r4, #12]
 801c5fe:	f8c5 800c 	str.w	r8, [r5, #12]
 801c602:	b128      	cbz	r0, 801c610 <rcl_wait_set_fini+0x74>
 801c604:	47b8      	blx	r7
 801c606:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c608:	f8c4 8008 	str.w	r8, [r4, #8]
 801c60c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c60e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c610:	f04f 0800 	mov.w	r8, #0
 801c614:	6968      	ldr	r0, [r5, #20]
 801c616:	f8c5 8010 	str.w	r8, [r5, #16]
 801c61a:	b128      	cbz	r0, 801c628 <rcl_wait_set_fini+0x8c>
 801c61c:	47b8      	blx	r7
 801c61e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c622:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c624:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c626:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c628:	f04f 0800 	mov.w	r8, #0
 801c62c:	6920      	ldr	r0, [r4, #16]
 801c62e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c632:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c636:	b128      	cbz	r0, 801c644 <rcl_wait_set_fini+0xa8>
 801c638:	47b8      	blx	r7
 801c63a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c63c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c640:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c642:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c644:	f04f 0800 	mov.w	r8, #0
 801c648:	69a0      	ldr	r0, [r4, #24]
 801c64a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c64e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c652:	b128      	cbz	r0, 801c660 <rcl_wait_set_fini+0xc4>
 801c654:	9101      	str	r1, [sp, #4]
 801c656:	47b8      	blx	r7
 801c658:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c65a:	9901      	ldr	r1, [sp, #4]
 801c65c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c660:	6a28      	ldr	r0, [r5, #32]
 801c662:	b120      	cbz	r0, 801c66e <rcl_wait_set_fini+0xd2>
 801c664:	47b8      	blx	r7
 801c666:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c668:	2300      	movs	r3, #0
 801c66a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c66e:	2700      	movs	r7, #0
 801c670:	6a20      	ldr	r0, [r4, #32]
 801c672:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c676:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c678:	6267      	str	r7, [r4, #36]	; 0x24
 801c67a:	626f      	str	r7, [r5, #36]	; 0x24
 801c67c:	b120      	cbz	r0, 801c688 <rcl_wait_set_fini+0xec>
 801c67e:	9101      	str	r1, [sp, #4]
 801c680:	47c0      	blx	r8
 801c682:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c684:	9901      	ldr	r1, [sp, #4]
 801c686:	6227      	str	r7, [r4, #32]
 801c688:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c68a:	b120      	cbz	r0, 801c696 <rcl_wait_set_fini+0xfa>
 801c68c:	47c0      	blx	r8
 801c68e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c690:	2300      	movs	r3, #0
 801c692:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c696:	2700      	movs	r7, #0
 801c698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c69a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c69e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c6a0:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c6a2:	632f      	str	r7, [r5, #48]	; 0x30
 801c6a4:	b120      	cbz	r0, 801c6b0 <rcl_wait_set_fini+0x114>
 801c6a6:	9101      	str	r1, [sp, #4]
 801c6a8:	47c0      	blx	r8
 801c6aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c6ac:	9901      	ldr	r1, [sp, #4]
 801c6ae:	62a7      	str	r7, [r4, #40]	; 0x28
 801c6b0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c6b2:	b120      	cbz	r0, 801c6be <rcl_wait_set_fini+0x122>
 801c6b4:	47c0      	blx	r8
 801c6b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c6be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c6c0:	4628      	mov	r0, r5
 801c6c2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c6c4:	4798      	blx	r3
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	6323      	str	r3, [r4, #48]	; 0x30
 801c6ca:	4630      	mov	r0, r6
 801c6cc:	b002      	add	sp, #8
 801c6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6d2:	260b      	movs	r6, #11
 801c6d4:	4630      	mov	r0, r6
 801c6d6:	b002      	add	sp, #8
 801c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c6dc <rcl_wait_set_add_subscription>:
 801c6dc:	b318      	cbz	r0, 801c726 <rcl_wait_set_add_subscription+0x4a>
 801c6de:	b538      	push	{r3, r4, r5, lr}
 801c6e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c6e2:	4604      	mov	r4, r0
 801c6e4:	b30b      	cbz	r3, 801c72a <rcl_wait_set_add_subscription+0x4e>
 801c6e6:	b319      	cbz	r1, 801c730 <rcl_wait_set_add_subscription+0x54>
 801c6e8:	681d      	ldr	r5, [r3, #0]
 801c6ea:	6840      	ldr	r0, [r0, #4]
 801c6ec:	4285      	cmp	r5, r0
 801c6ee:	d217      	bcs.n	801c720 <rcl_wait_set_add_subscription+0x44>
 801c6f0:	1c68      	adds	r0, r5, #1
 801c6f2:	6018      	str	r0, [r3, #0]
 801c6f4:	6823      	ldr	r3, [r4, #0]
 801c6f6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c6fa:	b102      	cbz	r2, 801c6fe <rcl_wait_set_add_subscription+0x22>
 801c6fc:	6015      	str	r5, [r2, #0]
 801c6fe:	4608      	mov	r0, r1
 801c700:	f7f8 fd32 	bl	8015168 <rcl_subscription_get_rmw_handle>
 801c704:	b150      	cbz	r0, 801c71c <rcl_wait_set_add_subscription+0x40>
 801c706:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c708:	6842      	ldr	r2, [r0, #4]
 801c70a:	2000      	movs	r0, #0
 801c70c:	689b      	ldr	r3, [r3, #8]
 801c70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c712:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c714:	6853      	ldr	r3, [r2, #4]
 801c716:	3301      	adds	r3, #1
 801c718:	6053      	str	r3, [r2, #4]
 801c71a:	bd38      	pop	{r3, r4, r5, pc}
 801c71c:	2001      	movs	r0, #1
 801c71e:	bd38      	pop	{r3, r4, r5, pc}
 801c720:	f240 3086 	movw	r0, #902	; 0x386
 801c724:	bd38      	pop	{r3, r4, r5, pc}
 801c726:	200b      	movs	r0, #11
 801c728:	4770      	bx	lr
 801c72a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c72e:	bd38      	pop	{r3, r4, r5, pc}
 801c730:	200b      	movs	r0, #11
 801c732:	bd38      	pop	{r3, r4, r5, pc}

0801c734 <rcl_wait_set_clear>:
 801c734:	2800      	cmp	r0, #0
 801c736:	d074      	beq.n	801c822 <rcl_wait_set_clear+0xee>
 801c738:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c73a:	b510      	push	{r4, lr}
 801c73c:	4604      	mov	r4, r0
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d071      	beq.n	801c826 <rcl_wait_set_clear+0xf2>
 801c742:	6800      	ldr	r0, [r0, #0]
 801c744:	b138      	cbz	r0, 801c756 <rcl_wait_set_clear+0x22>
 801c746:	6862      	ldr	r2, [r4, #4]
 801c748:	2100      	movs	r1, #0
 801c74a:	0092      	lsls	r2, r2, #2
 801c74c:	f004 fc5c 	bl	8021008 <memset>
 801c750:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c752:	2200      	movs	r2, #0
 801c754:	601a      	str	r2, [r3, #0]
 801c756:	68a0      	ldr	r0, [r4, #8]
 801c758:	b138      	cbz	r0, 801c76a <rcl_wait_set_clear+0x36>
 801c75a:	68e2      	ldr	r2, [r4, #12]
 801c75c:	2100      	movs	r1, #0
 801c75e:	0092      	lsls	r2, r2, #2
 801c760:	f004 fc52 	bl	8021008 <memset>
 801c764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c766:	2200      	movs	r2, #0
 801c768:	60da      	str	r2, [r3, #12]
 801c76a:	69a0      	ldr	r0, [r4, #24]
 801c76c:	b138      	cbz	r0, 801c77e <rcl_wait_set_clear+0x4a>
 801c76e:	69e2      	ldr	r2, [r4, #28]
 801c770:	2100      	movs	r1, #0
 801c772:	0092      	lsls	r2, r2, #2
 801c774:	f004 fc48 	bl	8021008 <memset>
 801c778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c77a:	2200      	movs	r2, #0
 801c77c:	619a      	str	r2, [r3, #24]
 801c77e:	6a20      	ldr	r0, [r4, #32]
 801c780:	b138      	cbz	r0, 801c792 <rcl_wait_set_clear+0x5e>
 801c782:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c784:	2100      	movs	r1, #0
 801c786:	0092      	lsls	r2, r2, #2
 801c788:	f004 fc3e 	bl	8021008 <memset>
 801c78c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c78e:	2200      	movs	r2, #0
 801c790:	625a      	str	r2, [r3, #36]	; 0x24
 801c792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c794:	b138      	cbz	r0, 801c7a6 <rcl_wait_set_clear+0x72>
 801c796:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c798:	2100      	movs	r1, #0
 801c79a:	0092      	lsls	r2, r2, #2
 801c79c:	f004 fc34 	bl	8021008 <memset>
 801c7a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	631a      	str	r2, [r3, #48]	; 0x30
 801c7a6:	6920      	ldr	r0, [r4, #16]
 801c7a8:	b138      	cbz	r0, 801c7ba <rcl_wait_set_clear+0x86>
 801c7aa:	6962      	ldr	r2, [r4, #20]
 801c7ac:	2100      	movs	r1, #0
 801c7ae:	0092      	lsls	r2, r2, #2
 801c7b0:	f004 fc2a 	bl	8021008 <memset>
 801c7b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	641a      	str	r2, [r3, #64]	; 0x40
 801c7ba:	6898      	ldr	r0, [r3, #8]
 801c7bc:	b138      	cbz	r0, 801c7ce <rcl_wait_set_clear+0x9a>
 801c7be:	685a      	ldr	r2, [r3, #4]
 801c7c0:	2100      	movs	r1, #0
 801c7c2:	0092      	lsls	r2, r2, #2
 801c7c4:	f004 fc20 	bl	8021008 <memset>
 801c7c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	605a      	str	r2, [r3, #4]
 801c7ce:	6958      	ldr	r0, [r3, #20]
 801c7d0:	b138      	cbz	r0, 801c7e2 <rcl_wait_set_clear+0xae>
 801c7d2:	691a      	ldr	r2, [r3, #16]
 801c7d4:	2100      	movs	r1, #0
 801c7d6:	0092      	lsls	r2, r2, #2
 801c7d8:	f004 fc16 	bl	8021008 <memset>
 801c7dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c7de:	2200      	movs	r2, #0
 801c7e0:	611a      	str	r2, [r3, #16]
 801c7e2:	6a18      	ldr	r0, [r3, #32]
 801c7e4:	b138      	cbz	r0, 801c7f6 <rcl_wait_set_clear+0xc2>
 801c7e6:	69da      	ldr	r2, [r3, #28]
 801c7e8:	2100      	movs	r1, #0
 801c7ea:	0092      	lsls	r2, r2, #2
 801c7ec:	f004 fc0c 	bl	8021008 <memset>
 801c7f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	61da      	str	r2, [r3, #28]
 801c7f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c7f8:	b138      	cbz	r0, 801c80a <rcl_wait_set_clear+0xd6>
 801c7fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c7fc:	2100      	movs	r1, #0
 801c7fe:	0092      	lsls	r2, r2, #2
 801c800:	f004 fc02 	bl	8021008 <memset>
 801c804:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c806:	2200      	movs	r2, #0
 801c808:	629a      	str	r2, [r3, #40]	; 0x28
 801c80a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c80c:	b140      	cbz	r0, 801c820 <rcl_wait_set_clear+0xec>
 801c80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c810:	2100      	movs	r1, #0
 801c812:	0092      	lsls	r2, r2, #2
 801c814:	f004 fbf8 	bl	8021008 <memset>
 801c818:	2300      	movs	r3, #0
 801c81a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c81c:	4618      	mov	r0, r3
 801c81e:	6353      	str	r3, [r2, #52]	; 0x34
 801c820:	bd10      	pop	{r4, pc}
 801c822:	200b      	movs	r0, #11
 801c824:	4770      	bx	lr
 801c826:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c82a:	bd10      	pop	{r4, pc}

0801c82c <rcl_wait_set_resize>:
 801c82c:	2800      	cmp	r0, #0
 801c82e:	f000 8180 	beq.w	801cb32 <rcl_wait_set_resize+0x306>
 801c832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c836:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c838:	b083      	sub	sp, #12
 801c83a:	4605      	mov	r5, r0
 801c83c:	2c00      	cmp	r4, #0
 801c83e:	f000 817a 	beq.w	801cb36 <rcl_wait_set_resize+0x30a>
 801c842:	f04f 0900 	mov.w	r9, #0
 801c846:	461f      	mov	r7, r3
 801c848:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c84c:	4688      	mov	r8, r1
 801c84e:	4616      	mov	r6, r2
 801c850:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c854:	f8c0 9004 	str.w	r9, [r0, #4]
 801c858:	f8c4 9000 	str.w	r9, [r4]
 801c85c:	2900      	cmp	r1, #0
 801c85e:	f000 80bf 	beq.w	801c9e0 <rcl_wait_set_resize+0x1b4>
 801c862:	008c      	lsls	r4, r1, #2
 801c864:	4652      	mov	r2, sl
 801c866:	6800      	ldr	r0, [r0, #0]
 801c868:	4621      	mov	r1, r4
 801c86a:	9301      	str	r3, [sp, #4]
 801c86c:	4798      	blx	r3
 801c86e:	9b01      	ldr	r3, [sp, #4]
 801c870:	6028      	str	r0, [r5, #0]
 801c872:	2800      	cmp	r0, #0
 801c874:	f000 80f6 	beq.w	801ca64 <rcl_wait_set_resize+0x238>
 801c878:	4622      	mov	r2, r4
 801c87a:	4649      	mov	r1, r9
 801c87c:	9301      	str	r3, [sp, #4]
 801c87e:	f004 fbc3 	bl	8021008 <memset>
 801c882:	f8c5 8004 	str.w	r8, [r5, #4]
 801c886:	4652      	mov	r2, sl
 801c888:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c88c:	4621      	mov	r1, r4
 801c88e:	9b01      	ldr	r3, [sp, #4]
 801c890:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c894:	f8c8 9004 	str.w	r9, [r8, #4]
 801c898:	4798      	blx	r3
 801c89a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c89c:	f8c8 0008 	str.w	r0, [r8, #8]
 801c8a0:	689b      	ldr	r3, [r3, #8]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	f000 814a 	beq.w	801cb3c <rcl_wait_set_resize+0x310>
 801c8a8:	4622      	mov	r2, r4
 801c8aa:	4649      	mov	r1, r9
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	f004 fbab 	bl	8021008 <memset>
 801c8b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8b4:	f04f 0800 	mov.w	r8, #0
 801c8b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c8bc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c8c0:	f8c5 800c 	str.w	r8, [r5, #12]
 801c8c4:	f8c4 800c 	str.w	r8, [r4, #12]
 801c8c8:	2e00      	cmp	r6, #0
 801c8ca:	f040 809b 	bne.w	801ca04 <rcl_wait_set_resize+0x1d8>
 801c8ce:	68a8      	ldr	r0, [r5, #8]
 801c8d0:	b128      	cbz	r0, 801c8de <rcl_wait_set_resize+0xb2>
 801c8d2:	4649      	mov	r1, r9
 801c8d4:	4790      	blx	r2
 801c8d6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8d8:	60ae      	str	r6, [r5, #8]
 801c8da:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c8de:	f04f 0800 	mov.w	r8, #0
 801c8e2:	19f6      	adds	r6, r6, r7
 801c8e4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c8e8:	f040 80a2 	bne.w	801ca30 <rcl_wait_set_resize+0x204>
 801c8ec:	6960      	ldr	r0, [r4, #20]
 801c8ee:	b130      	cbz	r0, 801c8fe <rcl_wait_set_resize+0xd2>
 801c8f0:	4649      	mov	r1, r9
 801c8f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c8f4:	4798      	blx	r3
 801c8f6:	6166      	str	r6, [r4, #20]
 801c8f8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c8fe:	2600      	movs	r6, #0
 801c900:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c904:	616e      	str	r6, [r5, #20]
 801c906:	6426      	str	r6, [r4, #64]	; 0x40
 801c908:	2f00      	cmp	r7, #0
 801c90a:	f040 80af 	bne.w	801ca6c <rcl_wait_set_resize+0x240>
 801c90e:	6928      	ldr	r0, [r5, #16]
 801c910:	b138      	cbz	r0, 801c922 <rcl_wait_set_resize+0xf6>
 801c912:	4649      	mov	r1, r9
 801c914:	47d0      	blx	sl
 801c916:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c918:	612f      	str	r7, [r5, #16]
 801c91a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c91e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c922:	2600      	movs	r6, #0
 801c924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c926:	61ee      	str	r6, [r5, #28]
 801c928:	61a6      	str	r6, [r4, #24]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	f040 8093 	bne.w	801ca56 <rcl_wait_set_resize+0x22a>
 801c930:	69a8      	ldr	r0, [r5, #24]
 801c932:	b120      	cbz	r0, 801c93e <rcl_wait_set_resize+0x112>
 801c934:	4649      	mov	r1, r9
 801c936:	47d0      	blx	sl
 801c938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c93a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c93c:	61ab      	str	r3, [r5, #24]
 801c93e:	6a20      	ldr	r0, [r4, #32]
 801c940:	b128      	cbz	r0, 801c94e <rcl_wait_set_resize+0x122>
 801c942:	4649      	mov	r1, r9
 801c944:	47d0      	blx	sl
 801c946:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c948:	2300      	movs	r3, #0
 801c94a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c94e:	2600      	movs	r6, #0
 801c950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c952:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c954:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c958:	626e      	str	r6, [r5, #36]	; 0x24
 801c95a:	6266      	str	r6, [r4, #36]	; 0x24
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	f000 8098 	beq.w	801ca92 <rcl_wait_set_resize+0x266>
 801c962:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c966:	463a      	mov	r2, r7
 801c968:	6a28      	ldr	r0, [r5, #32]
 801c96a:	4651      	mov	r1, sl
 801c96c:	47c8      	blx	r9
 801c96e:	6228      	str	r0, [r5, #32]
 801c970:	2800      	cmp	r0, #0
 801c972:	d077      	beq.n	801ca64 <rcl_wait_set_resize+0x238>
 801c974:	4652      	mov	r2, sl
 801c976:	4631      	mov	r1, r6
 801c978:	f004 fb46 	bl	8021008 <memset>
 801c97c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c980:	463a      	mov	r2, r7
 801c982:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c984:	4651      	mov	r1, sl
 801c986:	626b      	str	r3, [r5, #36]	; 0x24
 801c988:	62a6      	str	r6, [r4, #40]	; 0x28
 801c98a:	47c8      	blx	r9
 801c98c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c98e:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c990:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c992:	2c00      	cmp	r4, #0
 801c994:	f000 80f2 	beq.w	801cb7c <rcl_wait_set_resize+0x350>
 801c998:	4620      	mov	r0, r4
 801c99a:	4652      	mov	r2, sl
 801c99c:	4631      	mov	r1, r6
 801c99e:	f004 fb33 	bl	8021008 <memset>
 801c9a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c9a4:	2600      	movs	r6, #0
 801c9a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9a8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c9aa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c9ae:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c9b0:	6326      	str	r6, [r4, #48]	; 0x30
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	f040 8097 	bne.w	801cae6 <rcl_wait_set_resize+0x2ba>
 801c9b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c9ba:	b120      	cbz	r0, 801c9c6 <rcl_wait_set_resize+0x19a>
 801c9bc:	4639      	mov	r1, r7
 801c9be:	47c0      	blx	r8
 801c9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c9c4:	62ab      	str	r3, [r5, #40]	; 0x28
 801c9c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c9c8:	2800      	cmp	r0, #0
 801c9ca:	d04c      	beq.n	801ca66 <rcl_wait_set_resize+0x23a>
 801c9cc:	4639      	mov	r1, r7
 801c9ce:	47c0      	blx	r8
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c9da:	b003      	add	sp, #12
 801c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e0:	6800      	ldr	r0, [r0, #0]
 801c9e2:	b120      	cbz	r0, 801c9ee <rcl_wait_set_resize+0x1c2>
 801c9e4:	4651      	mov	r1, sl
 801c9e6:	47d8      	blx	fp
 801c9e8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c9ea:	f8c5 8000 	str.w	r8, [r5]
 801c9ee:	68a0      	ldr	r0, [r4, #8]
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	f43f af5f 	beq.w	801c8b4 <rcl_wait_set_resize+0x88>
 801c9f6:	4651      	mov	r1, sl
 801c9f8:	47d8      	blx	fp
 801c9fa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801ca02:	e757      	b.n	801c8b4 <rcl_wait_set_resize+0x88>
 801ca04:	00b4      	lsls	r4, r6, #2
 801ca06:	464a      	mov	r2, r9
 801ca08:	68a8      	ldr	r0, [r5, #8]
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	4798      	blx	r3
 801ca0e:	60a8      	str	r0, [r5, #8]
 801ca10:	b340      	cbz	r0, 801ca64 <rcl_wait_set_resize+0x238>
 801ca12:	4622      	mov	r2, r4
 801ca14:	4641      	mov	r1, r8
 801ca16:	f004 faf7 	bl	8021008 <memset>
 801ca1a:	f04f 0800 	mov.w	r8, #0
 801ca1e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801ca20:	60ee      	str	r6, [r5, #12]
 801ca22:	19f6      	adds	r6, r6, r7
 801ca24:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801ca28:	f8c4 8010 	str.w	r8, [r4, #16]
 801ca2c:	f43f af5e 	beq.w	801c8ec <rcl_wait_set_resize+0xc0>
 801ca30:	00b6      	lsls	r6, r6, #2
 801ca32:	464a      	mov	r2, r9
 801ca34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801ca36:	6960      	ldr	r0, [r4, #20]
 801ca38:	4631      	mov	r1, r6
 801ca3a:	4798      	blx	r3
 801ca3c:	4681      	mov	r9, r0
 801ca3e:	6160      	str	r0, [r4, #20]
 801ca40:	2800      	cmp	r0, #0
 801ca42:	f000 8084 	beq.w	801cb4e <rcl_wait_set_resize+0x322>
 801ca46:	4632      	mov	r2, r6
 801ca48:	4641      	mov	r1, r8
 801ca4a:	f004 fadd 	bl	8021008 <memset>
 801ca4e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801ca50:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801ca54:	e753      	b.n	801c8fe <rcl_wait_set_resize+0xd2>
 801ca56:	009c      	lsls	r4, r3, #2
 801ca58:	464a      	mov	r2, r9
 801ca5a:	69a8      	ldr	r0, [r5, #24]
 801ca5c:	4621      	mov	r1, r4
 801ca5e:	47c0      	blx	r8
 801ca60:	61a8      	str	r0, [r5, #24]
 801ca62:	bb40      	cbnz	r0, 801cab6 <rcl_wait_set_resize+0x28a>
 801ca64:	200a      	movs	r0, #10
 801ca66:	b003      	add	sp, #12
 801ca68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca6c:	00bc      	lsls	r4, r7, #2
 801ca6e:	464a      	mov	r2, r9
 801ca70:	6928      	ldr	r0, [r5, #16]
 801ca72:	4621      	mov	r1, r4
 801ca74:	47c0      	blx	r8
 801ca76:	6128      	str	r0, [r5, #16]
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	d0f3      	beq.n	801ca64 <rcl_wait_set_resize+0x238>
 801ca7c:	4622      	mov	r2, r4
 801ca7e:	4631      	mov	r1, r6
 801ca80:	f004 fac2 	bl	8021008 <memset>
 801ca84:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801ca86:	616f      	str	r7, [r5, #20]
 801ca88:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801ca8c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801ca90:	e747      	b.n	801c922 <rcl_wait_set_resize+0xf6>
 801ca92:	6a28      	ldr	r0, [r5, #32]
 801ca94:	b120      	cbz	r0, 801caa0 <rcl_wait_set_resize+0x274>
 801ca96:	4639      	mov	r1, r7
 801ca98:	47c0      	blx	r8
 801ca9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca9c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801ca9e:	622b      	str	r3, [r5, #32]
 801caa0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801caa2:	2800      	cmp	r0, #0
 801caa4:	f43f af7e 	beq.w	801c9a4 <rcl_wait_set_resize+0x178>
 801caa8:	4639      	mov	r1, r7
 801caaa:	47c0      	blx	r8
 801caac:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801caae:	2300      	movs	r3, #0
 801cab0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801cab4:	e776      	b.n	801c9a4 <rcl_wait_set_resize+0x178>
 801cab6:	4622      	mov	r2, r4
 801cab8:	4631      	mov	r1, r6
 801caba:	f004 faa5 	bl	8021008 <memset>
 801cabe:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801cac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cac2:	464a      	mov	r2, r9
 801cac4:	6a38      	ldr	r0, [r7, #32]
 801cac6:	4621      	mov	r1, r4
 801cac8:	61eb      	str	r3, [r5, #28]
 801caca:	61fe      	str	r6, [r7, #28]
 801cacc:	47c0      	blx	r8
 801cace:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cad0:	6238      	str	r0, [r7, #32]
 801cad2:	6a1f      	ldr	r7, [r3, #32]
 801cad4:	2f00      	cmp	r7, #0
 801cad6:	d04a      	beq.n	801cb6e <rcl_wait_set_resize+0x342>
 801cad8:	4622      	mov	r2, r4
 801cada:	4631      	mov	r1, r6
 801cadc:	4638      	mov	r0, r7
 801cade:	f004 fa93 	bl	8021008 <memset>
 801cae2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801cae4:	e733      	b.n	801c94e <rcl_wait_set_resize+0x122>
 801cae6:	009c      	lsls	r4, r3, #2
 801cae8:	463a      	mov	r2, r7
 801caea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801caec:	4621      	mov	r1, r4
 801caee:	47c8      	blx	r9
 801caf0:	62a8      	str	r0, [r5, #40]	; 0x28
 801caf2:	2800      	cmp	r0, #0
 801caf4:	d0b6      	beq.n	801ca64 <rcl_wait_set_resize+0x238>
 801caf6:	4622      	mov	r2, r4
 801caf8:	4631      	mov	r1, r6
 801cafa:	f004 fa85 	bl	8021008 <memset>
 801cafe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801cb02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb04:	463a      	mov	r2, r7
 801cb06:	4621      	mov	r1, r4
 801cb08:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801cb0c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801cb0e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801cb12:	47c8      	blx	r9
 801cb14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb16:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d034      	beq.n	801cb8a <rcl_wait_set_resize+0x35e>
 801cb20:	4622      	mov	r2, r4
 801cb22:	4631      	mov	r1, r6
 801cb24:	4618      	mov	r0, r3
 801cb26:	f004 fa6f 	bl	8021008 <memset>
 801cb2a:	4630      	mov	r0, r6
 801cb2c:	b003      	add	sp, #12
 801cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb32:	200b      	movs	r0, #11
 801cb34:	4770      	bx	lr
 801cb36:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb3a:	e794      	b.n	801ca66 <rcl_wait_set_resize+0x23a>
 801cb3c:	6828      	ldr	r0, [r5, #0]
 801cb3e:	4651      	mov	r1, sl
 801cb40:	9301      	str	r3, [sp, #4]
 801cb42:	47d8      	blx	fp
 801cb44:	9b01      	ldr	r3, [sp, #4]
 801cb46:	200a      	movs	r0, #10
 801cb48:	e9c5 3300 	strd	r3, r3, [r5]
 801cb4c:	e78b      	b.n	801ca66 <rcl_wait_set_resize+0x23a>
 801cb4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb50:	68a8      	ldr	r0, [r5, #8]
 801cb52:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801cb54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb56:	4798      	blx	r3
 801cb58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb5a:	6928      	ldr	r0, [r5, #16]
 801cb5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801cb5e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801cb60:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801cb64:	4790      	blx	r2
 801cb66:	200a      	movs	r0, #10
 801cb68:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801cb6c:	e77b      	b.n	801ca66 <rcl_wait_set_resize+0x23a>
 801cb6e:	69a8      	ldr	r0, [r5, #24]
 801cb70:	4649      	mov	r1, r9
 801cb72:	47d0      	blx	sl
 801cb74:	200a      	movs	r0, #10
 801cb76:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801cb7a:	e774      	b.n	801ca66 <rcl_wait_set_resize+0x23a>
 801cb7c:	6a28      	ldr	r0, [r5, #32]
 801cb7e:	4639      	mov	r1, r7
 801cb80:	47c0      	blx	r8
 801cb82:	200a      	movs	r0, #10
 801cb84:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801cb88:	e76d      	b.n	801ca66 <rcl_wait_set_resize+0x23a>
 801cb8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801cb8c:	4639      	mov	r1, r7
 801cb8e:	9301      	str	r3, [sp, #4]
 801cb90:	47c0      	blx	r8
 801cb92:	9b01      	ldr	r3, [sp, #4]
 801cb94:	200a      	movs	r0, #10
 801cb96:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801cb9a:	e764      	b.n	801ca66 <rcl_wait_set_resize+0x23a>

0801cb9c <rcl_wait_set_init>:
 801cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba0:	b085      	sub	sp, #20
 801cba2:	4605      	mov	r5, r0
 801cba4:	460e      	mov	r6, r1
 801cba6:	4617      	mov	r7, r2
 801cba8:	a812      	add	r0, sp, #72	; 0x48
 801cbaa:	4698      	mov	r8, r3
 801cbac:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801cbb0:	f7f9 fa3c 	bl	801602c <rcutils_allocator_is_valid>
 801cbb4:	2d00      	cmp	r5, #0
 801cbb6:	d072      	beq.n	801cc9e <rcl_wait_set_init+0x102>
 801cbb8:	f080 0001 	eor.w	r0, r0, #1
 801cbbc:	b2c0      	uxtb	r0, r0
 801cbbe:	2800      	cmp	r0, #0
 801cbc0:	d16d      	bne.n	801cc9e <rcl_wait_set_init+0x102>
 801cbc2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801cbc6:	f1ba 0f00 	cmp.w	sl, #0
 801cbca:	d004      	beq.n	801cbd6 <rcl_wait_set_init+0x3a>
 801cbcc:	2464      	movs	r4, #100	; 0x64
 801cbce:	4620      	mov	r0, r4
 801cbd0:	b005      	add	sp, #20
 801cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd6:	f1b9 0f00 	cmp.w	r9, #0
 801cbda:	d060      	beq.n	801cc9e <rcl_wait_set_init+0x102>
 801cbdc:	4648      	mov	r0, r9
 801cbde:	f7fe fe27 	bl	801b830 <rcl_context_is_valid>
 801cbe2:	2800      	cmp	r0, #0
 801cbe4:	d068      	beq.n	801ccb8 <rcl_wait_set_init+0x11c>
 801cbe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cbe8:	205c      	movs	r0, #92	; 0x5c
 801cbea:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cbec:	4798      	blx	r3
 801cbee:	6328      	str	r0, [r5, #48]	; 0x30
 801cbf0:	2800      	cmp	r0, #0
 801cbf2:	d063      	beq.n	801ccbc <rcl_wait_set_init+0x120>
 801cbf4:	225c      	movs	r2, #92	; 0x5c
 801cbf6:	4651      	mov	r1, sl
 801cbf8:	f004 fa06 	bl	8021008 <memset>
 801cbfc:	ac12      	add	r4, sp, #72	; 0x48
 801cbfe:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801cc02:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801cc06:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801cc0a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801cc0e:	eb03 0e02 	add.w	lr, r3, r2
 801cc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc14:	f8d9 9000 	ldr.w	r9, [r9]
 801cc18:	449e      	add	lr, r3
 801cc1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cc1c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cc20:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cc24:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cc28:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801cc2c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801cc30:	44be      	add	lr, r7
 801cc32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc36:	6823      	ldr	r3, [r4, #0]
 801cc38:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cc3c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801cc40:	f8cc 3000 	str.w	r3, [ip]
 801cc44:	f001 ffbe 	bl	801ebc4 <rmw_create_wait_set>
 801cc48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cc4a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801cc4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801cc50:	b350      	cbz	r0, 801cca8 <rcl_wait_set_init+0x10c>
 801cc52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc54:	4643      	mov	r3, r8
 801cc56:	463a      	mov	r2, r7
 801cc58:	4631      	mov	r1, r6
 801cc5a:	9402      	str	r4, [sp, #8]
 801cc5c:	4628      	mov	r0, r5
 801cc5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cc60:	9401      	str	r4, [sp, #4]
 801cc62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cc64:	9400      	str	r4, [sp, #0]
 801cc66:	f7ff fde1 	bl	801c82c <rcl_wait_set_resize>
 801cc6a:	4604      	mov	r4, r0
 801cc6c:	2800      	cmp	r0, #0
 801cc6e:	d0ae      	beq.n	801cbce <rcl_wait_set_init+0x32>
 801cc70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cc72:	bb2b      	cbnz	r3, 801ccc0 <rcl_wait_set_init+0x124>
 801cc74:	2600      	movs	r6, #0
 801cc76:	4628      	mov	r0, r5
 801cc78:	4633      	mov	r3, r6
 801cc7a:	4632      	mov	r2, r6
 801cc7c:	4631      	mov	r1, r6
 801cc7e:	9600      	str	r6, [sp, #0]
 801cc80:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cc84:	f7ff fdd2 	bl	801c82c <rcl_wait_set_resize>
 801cc88:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cc8a:	2800      	cmp	r0, #0
 801cc8c:	d09f      	beq.n	801cbce <rcl_wait_set_init+0x32>
 801cc8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801cc90:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801cc92:	4798      	blx	r3
 801cc94:	4620      	mov	r0, r4
 801cc96:	632e      	str	r6, [r5, #48]	; 0x30
 801cc98:	b005      	add	sp, #20
 801cc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc9e:	240b      	movs	r4, #11
 801cca0:	4620      	mov	r0, r4
 801cca2:	b005      	add	sp, #20
 801cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca8:	2401      	movs	r4, #1
 801ccaa:	f001 ff95 	bl	801ebd8 <rmw_destroy_wait_set>
 801ccae:	2800      	cmp	r0, #0
 801ccb0:	bf18      	it	ne
 801ccb2:	f44f 7461 	movne.w	r4, #900	; 0x384
 801ccb6:	e7dd      	b.n	801cc74 <rcl_wait_set_init+0xd8>
 801ccb8:	2465      	movs	r4, #101	; 0x65
 801ccba:	e788      	b.n	801cbce <rcl_wait_set_init+0x32>
 801ccbc:	240a      	movs	r4, #10
 801ccbe:	e786      	b.n	801cbce <rcl_wait_set_init+0x32>
 801ccc0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801ccc2:	e7f2      	b.n	801ccaa <rcl_wait_set_init+0x10e>

0801ccc4 <rcl_wait_set_add_guard_condition>:
 801ccc4:	b318      	cbz	r0, 801cd0e <rcl_wait_set_add_guard_condition+0x4a>
 801ccc6:	b538      	push	{r3, r4, r5, lr}
 801ccc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ccca:	4604      	mov	r4, r0
 801cccc:	b30b      	cbz	r3, 801cd12 <rcl_wait_set_add_guard_condition+0x4e>
 801ccce:	b319      	cbz	r1, 801cd18 <rcl_wait_set_add_guard_condition+0x54>
 801ccd0:	68dd      	ldr	r5, [r3, #12]
 801ccd2:	68c0      	ldr	r0, [r0, #12]
 801ccd4:	4285      	cmp	r5, r0
 801ccd6:	d217      	bcs.n	801cd08 <rcl_wait_set_add_guard_condition+0x44>
 801ccd8:	1c68      	adds	r0, r5, #1
 801ccda:	60d8      	str	r0, [r3, #12]
 801ccdc:	68a3      	ldr	r3, [r4, #8]
 801ccde:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cce2:	b102      	cbz	r2, 801cce6 <rcl_wait_set_add_guard_condition+0x22>
 801cce4:	6015      	str	r5, [r2, #0]
 801cce6:	4608      	mov	r0, r1
 801cce8:	f7fe feb0 	bl	801ba4c <rcl_guard_condition_get_rmw_handle>
 801ccec:	b150      	cbz	r0, 801cd04 <rcl_wait_set_add_guard_condition+0x40>
 801ccee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ccf0:	6842      	ldr	r2, [r0, #4]
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	695b      	ldr	r3, [r3, #20]
 801ccf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ccfc:	6913      	ldr	r3, [r2, #16]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	6113      	str	r3, [r2, #16]
 801cd02:	bd38      	pop	{r3, r4, r5, pc}
 801cd04:	2001      	movs	r0, #1
 801cd06:	bd38      	pop	{r3, r4, r5, pc}
 801cd08:	f240 3086 	movw	r0, #902	; 0x386
 801cd0c:	bd38      	pop	{r3, r4, r5, pc}
 801cd0e:	200b      	movs	r0, #11
 801cd10:	4770      	bx	lr
 801cd12:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cd16:	bd38      	pop	{r3, r4, r5, pc}
 801cd18:	200b      	movs	r0, #11
 801cd1a:	bd38      	pop	{r3, r4, r5, pc}

0801cd1c <rcl_wait_set_add_timer>:
 801cd1c:	b328      	cbz	r0, 801cd6a <rcl_wait_set_add_timer+0x4e>
 801cd1e:	b538      	push	{r3, r4, r5, lr}
 801cd20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cd22:	4604      	mov	r4, r0
 801cd24:	b31b      	cbz	r3, 801cd6e <rcl_wait_set_add_timer+0x52>
 801cd26:	b329      	cbz	r1, 801cd74 <rcl_wait_set_add_timer+0x58>
 801cd28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801cd2a:	6965      	ldr	r5, [r4, #20]
 801cd2c:	42a8      	cmp	r0, r5
 801cd2e:	d219      	bcs.n	801cd64 <rcl_wait_set_add_timer+0x48>
 801cd30:	1c45      	adds	r5, r0, #1
 801cd32:	641d      	str	r5, [r3, #64]	; 0x40
 801cd34:	6923      	ldr	r3, [r4, #16]
 801cd36:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cd3a:	b102      	cbz	r2, 801cd3e <rcl_wait_set_add_timer+0x22>
 801cd3c:	6010      	str	r0, [r2, #0]
 801cd3e:	4608      	mov	r0, r1
 801cd40:	f7ff fb9a 	bl	801c478 <rcl_timer_get_guard_condition>
 801cd44:	b168      	cbz	r0, 801cd62 <rcl_wait_set_add_timer+0x46>
 801cd46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cd48:	68e3      	ldr	r3, [r4, #12]
 801cd4a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801cd4c:	3b01      	subs	r3, #1
 801cd4e:	441d      	add	r5, r3
 801cd50:	f7fe fe7c 	bl	801ba4c <rcl_guard_condition_get_rmw_handle>
 801cd54:	b180      	cbz	r0, 801cd78 <rcl_wait_set_add_timer+0x5c>
 801cd56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cd58:	6842      	ldr	r2, [r0, #4]
 801cd5a:	2000      	movs	r0, #0
 801cd5c:	695b      	ldr	r3, [r3, #20]
 801cd5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd62:	bd38      	pop	{r3, r4, r5, pc}
 801cd64:	f240 3086 	movw	r0, #902	; 0x386
 801cd68:	bd38      	pop	{r3, r4, r5, pc}
 801cd6a:	200b      	movs	r0, #11
 801cd6c:	4770      	bx	lr
 801cd6e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cd72:	bd38      	pop	{r3, r4, r5, pc}
 801cd74:	200b      	movs	r0, #11
 801cd76:	bd38      	pop	{r3, r4, r5, pc}
 801cd78:	2001      	movs	r0, #1
 801cd7a:	bd38      	pop	{r3, r4, r5, pc}

0801cd7c <rcl_wait_set_add_client>:
 801cd7c:	b318      	cbz	r0, 801cdc6 <rcl_wait_set_add_client+0x4a>
 801cd7e:	b538      	push	{r3, r4, r5, lr}
 801cd80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cd82:	4604      	mov	r4, r0
 801cd84:	b30b      	cbz	r3, 801cdca <rcl_wait_set_add_client+0x4e>
 801cd86:	b319      	cbz	r1, 801cdd0 <rcl_wait_set_add_client+0x54>
 801cd88:	699d      	ldr	r5, [r3, #24]
 801cd8a:	69c0      	ldr	r0, [r0, #28]
 801cd8c:	4285      	cmp	r5, r0
 801cd8e:	d217      	bcs.n	801cdc0 <rcl_wait_set_add_client+0x44>
 801cd90:	1c68      	adds	r0, r5, #1
 801cd92:	6198      	str	r0, [r3, #24]
 801cd94:	69a3      	ldr	r3, [r4, #24]
 801cd96:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd9a:	b102      	cbz	r2, 801cd9e <rcl_wait_set_add_client+0x22>
 801cd9c:	6015      	str	r5, [r2, #0]
 801cd9e:	4608      	mov	r0, r1
 801cda0:	f7fe fc98 	bl	801b6d4 <rcl_client_get_rmw_handle>
 801cda4:	b150      	cbz	r0, 801cdbc <rcl_wait_set_add_client+0x40>
 801cda6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cda8:	6842      	ldr	r2, [r0, #4]
 801cdaa:	2000      	movs	r0, #0
 801cdac:	6a1b      	ldr	r3, [r3, #32]
 801cdae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cdb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cdb4:	69d3      	ldr	r3, [r2, #28]
 801cdb6:	3301      	adds	r3, #1
 801cdb8:	61d3      	str	r3, [r2, #28]
 801cdba:	bd38      	pop	{r3, r4, r5, pc}
 801cdbc:	2001      	movs	r0, #1
 801cdbe:	bd38      	pop	{r3, r4, r5, pc}
 801cdc0:	f240 3086 	movw	r0, #902	; 0x386
 801cdc4:	bd38      	pop	{r3, r4, r5, pc}
 801cdc6:	200b      	movs	r0, #11
 801cdc8:	4770      	bx	lr
 801cdca:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cdce:	bd38      	pop	{r3, r4, r5, pc}
 801cdd0:	200b      	movs	r0, #11
 801cdd2:	bd38      	pop	{r3, r4, r5, pc}

0801cdd4 <rcl_wait_set_add_service>:
 801cdd4:	b318      	cbz	r0, 801ce1e <rcl_wait_set_add_service+0x4a>
 801cdd6:	b538      	push	{r3, r4, r5, lr}
 801cdd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cdda:	4604      	mov	r4, r0
 801cddc:	b30b      	cbz	r3, 801ce22 <rcl_wait_set_add_service+0x4e>
 801cdde:	b319      	cbz	r1, 801ce28 <rcl_wait_set_add_service+0x54>
 801cde0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cde2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cde4:	4285      	cmp	r5, r0
 801cde6:	d217      	bcs.n	801ce18 <rcl_wait_set_add_service+0x44>
 801cde8:	1c68      	adds	r0, r5, #1
 801cdea:	6258      	str	r0, [r3, #36]	; 0x24
 801cdec:	6a23      	ldr	r3, [r4, #32]
 801cdee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cdf2:	b102      	cbz	r2, 801cdf6 <rcl_wait_set_add_service+0x22>
 801cdf4:	6015      	str	r5, [r2, #0]
 801cdf6:	4608      	mov	r0, r1
 801cdf8:	f7ff f92a 	bl	801c050 <rcl_service_get_rmw_handle>
 801cdfc:	b150      	cbz	r0, 801ce14 <rcl_wait_set_add_service+0x40>
 801cdfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ce00:	6842      	ldr	r2, [r0, #4]
 801ce02:	2000      	movs	r0, #0
 801ce04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ce0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ce0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801ce0e:	3301      	adds	r3, #1
 801ce10:	6293      	str	r3, [r2, #40]	; 0x28
 801ce12:	bd38      	pop	{r3, r4, r5, pc}
 801ce14:	2001      	movs	r0, #1
 801ce16:	bd38      	pop	{r3, r4, r5, pc}
 801ce18:	f240 3086 	movw	r0, #902	; 0x386
 801ce1c:	bd38      	pop	{r3, r4, r5, pc}
 801ce1e:	200b      	movs	r0, #11
 801ce20:	4770      	bx	lr
 801ce22:	f44f 7061 	mov.w	r0, #900	; 0x384
 801ce26:	bd38      	pop	{r3, r4, r5, pc}
 801ce28:	200b      	movs	r0, #11
 801ce2a:	bd38      	pop	{r3, r4, r5, pc}
 801ce2c:	0000      	movs	r0, r0
	...

0801ce30 <rcl_wait>:
 801ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce34:	ed2d 8b02 	vpush	{d8}
 801ce38:	b08d      	sub	sp, #52	; 0x34
 801ce3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ce3e:	2800      	cmp	r0, #0
 801ce40:	f000 814f 	beq.w	801d0e2 <rcl_wait+0x2b2>
 801ce44:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801ce46:	4605      	mov	r5, r0
 801ce48:	2e00      	cmp	r6, #0
 801ce4a:	f000 811a 	beq.w	801d082 <rcl_wait+0x252>
 801ce4e:	6843      	ldr	r3, [r0, #4]
 801ce50:	b983      	cbnz	r3, 801ce74 <rcl_wait+0x44>
 801ce52:	68eb      	ldr	r3, [r5, #12]
 801ce54:	b973      	cbnz	r3, 801ce74 <rcl_wait+0x44>
 801ce56:	696b      	ldr	r3, [r5, #20]
 801ce58:	b963      	cbnz	r3, 801ce74 <rcl_wait+0x44>
 801ce5a:	69eb      	ldr	r3, [r5, #28]
 801ce5c:	b953      	cbnz	r3, 801ce74 <rcl_wait+0x44>
 801ce5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ce60:	b943      	cbnz	r3, 801ce74 <rcl_wait+0x44>
 801ce62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801ce64:	b933      	cbnz	r3, 801ce74 <rcl_wait+0x44>
 801ce66:	f240 3085 	movw	r0, #901	; 0x385
 801ce6a:	b00d      	add	sp, #52	; 0x34
 801ce6c:	ecbd 8b02 	vpop	{d8}
 801ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce74:	9b04      	ldr	r3, [sp, #16]
 801ce76:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801ce78:	2b01      	cmp	r3, #1
 801ce7a:	9b05      	ldr	r3, [sp, #20]
 801ce7c:	f173 0300 	sbcs.w	r3, r3, #0
 801ce80:	f2c0 80f8 	blt.w	801d074 <rcl_wait+0x244>
 801ce84:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801ce88:	2a00      	cmp	r2, #0
 801ce8a:	f000 810f 	beq.w	801d0ac <rcl_wait+0x27c>
 801ce8e:	2400      	movs	r4, #0
 801ce90:	4613      	mov	r3, r2
 801ce92:	f240 3921 	movw	r9, #801	; 0x321
 801ce96:	4632      	mov	r2, r6
 801ce98:	46a2      	mov	sl, r4
 801ce9a:	46a3      	mov	fp, r4
 801ce9c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801d100 <rcl_wait+0x2d0>
 801cea0:	e014      	b.n	801cecc <rcl_wait+0x9c>
 801cea2:	2800      	cmp	r0, #0
 801cea4:	d1e1      	bne.n	801ce6a <rcl_wait+0x3a>
 801cea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ceaa:	4542      	cmp	r2, r8
 801ceac:	eb73 0107 	sbcs.w	r1, r3, r7
 801ceb0:	da03      	bge.n	801ceba <rcl_wait+0x8a>
 801ceb2:	4690      	mov	r8, r2
 801ceb4:	461f      	mov	r7, r3
 801ceb6:	f04f 0b01 	mov.w	fp, #1
 801ceba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cebc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801cebe:	3401      	adds	r4, #1
 801cec0:	f14a 0a00 	adc.w	sl, sl, #0
 801cec4:	429c      	cmp	r4, r3
 801cec6:	f17a 0100 	sbcs.w	r1, sl, #0
 801ceca:	d228      	bcs.n	801cf1e <rcl_wait+0xee>
 801cecc:	6928      	ldr	r0, [r5, #16]
 801cece:	a908      	add	r1, sp, #32
 801ced0:	00a6      	lsls	r6, r4, #2
 801ced2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ced6:	2800      	cmp	r0, #0
 801ced8:	d0f1      	beq.n	801cebe <rcl_wait+0x8e>
 801ceda:	68eb      	ldr	r3, [r5, #12]
 801cedc:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cee0:	4423      	add	r3, r4
 801cee2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cee6:	f1be 0f00 	cmp.w	lr, #0
 801ceea:	d006      	beq.n	801cefa <rcl_wait+0xca>
 801ceec:	6913      	ldr	r3, [r2, #16]
 801ceee:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cef2:	3301      	adds	r3, #1
 801cef4:	6113      	str	r3, [r2, #16]
 801cef6:	692b      	ldr	r3, [r5, #16]
 801cef8:	5998      	ldr	r0, [r3, r6]
 801cefa:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cefe:	f7ff fa89 	bl	801c414 <rcl_timer_get_time_until_next_call>
 801cf02:	4548      	cmp	r0, r9
 801cf04:	d1cd      	bne.n	801cea2 <rcl_wait+0x72>
 801cf06:	692b      	ldr	r3, [r5, #16]
 801cf08:	2200      	movs	r2, #0
 801cf0a:	3401      	adds	r4, #1
 801cf0c:	519a      	str	r2, [r3, r6]
 801cf0e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cf10:	f14a 0a00 	adc.w	sl, sl, #0
 801cf14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801cf16:	429c      	cmp	r4, r3
 801cf18:	f17a 0100 	sbcs.w	r1, sl, #0
 801cf1c:	d3d6      	bcc.n	801cecc <rcl_wait+0x9c>
 801cf1e:	4659      	mov	r1, fp
 801cf20:	4616      	mov	r6, r2
 801cf22:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801cf26:	4313      	orrs	r3, r2
 801cf28:	f040 80b4 	bne.w	801d094 <rcl_wait+0x264>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	2200      	movs	r2, #0
 801cf30:	460c      	mov	r4, r1
 801cf32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cf36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cf3a:	ab08      	add	r3, sp, #32
 801cf3c:	9302      	str	r3, [sp, #8]
 801cf3e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801cf42:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801cf44:	f106 0110 	add.w	r1, r6, #16
 801cf48:	9300      	str	r3, [sp, #0]
 801cf4a:	1d30      	adds	r0, r6, #4
 801cf4c:	f106 031c 	add.w	r3, r6, #28
 801cf50:	9201      	str	r2, [sp, #4]
 801cf52:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801cf56:	f001 fcd1 	bl	801e8fc <rmw_wait>
 801cf5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cf5c:	4680      	mov	r8, r0
 801cf5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cf60:	b1e2      	cbz	r2, 801cf9c <rcl_wait+0x16c>
 801cf62:	f04f 0900 	mov.w	r9, #0
 801cf66:	464f      	mov	r7, r9
 801cf68:	692a      	ldr	r2, [r5, #16]
 801cf6a:	f10d 011f 	add.w	r1, sp, #31
 801cf6e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cf72:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cf76:	b160      	cbz	r0, 801cf92 <rcl_wait+0x162>
 801cf78:	f88d 701f 	strb.w	r7, [sp, #31]
 801cf7c:	f7ff fa0e 	bl	801c39c <rcl_timer_is_ready>
 801cf80:	2800      	cmp	r0, #0
 801cf82:	f47f af72 	bne.w	801ce6a <rcl_wait+0x3a>
 801cf86:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cf8a:	b90b      	cbnz	r3, 801cf90 <rcl_wait+0x160>
 801cf8c:	692a      	ldr	r2, [r5, #16]
 801cf8e:	5193      	str	r3, [r2, r6]
 801cf90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cf92:	f109 0901 	add.w	r9, r9, #1
 801cf96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cf98:	454a      	cmp	r2, r9
 801cf9a:	d8e5      	bhi.n	801cf68 <rcl_wait+0x138>
 801cf9c:	f038 0002 	bics.w	r0, r8, #2
 801cfa0:	d176      	bne.n	801d090 <rcl_wait+0x260>
 801cfa2:	686f      	ldr	r7, [r5, #4]
 801cfa4:	b17f      	cbz	r7, 801cfc6 <rcl_wait+0x196>
 801cfa6:	4602      	mov	r2, r0
 801cfa8:	e002      	b.n	801cfb0 <rcl_wait+0x180>
 801cfaa:	3201      	adds	r2, #1
 801cfac:	42ba      	cmp	r2, r7
 801cfae:	d00a      	beq.n	801cfc6 <rcl_wait+0x196>
 801cfb0:	6899      	ldr	r1, [r3, #8]
 801cfb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cfb6:	2900      	cmp	r1, #0
 801cfb8:	d1f7      	bne.n	801cfaa <rcl_wait+0x17a>
 801cfba:	682e      	ldr	r6, [r5, #0]
 801cfbc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cfc0:	3201      	adds	r2, #1
 801cfc2:	42ba      	cmp	r2, r7
 801cfc4:	d1f4      	bne.n	801cfb0 <rcl_wait+0x180>
 801cfc6:	68ef      	ldr	r7, [r5, #12]
 801cfc8:	b17f      	cbz	r7, 801cfea <rcl_wait+0x1ba>
 801cfca:	2200      	movs	r2, #0
 801cfcc:	e002      	b.n	801cfd4 <rcl_wait+0x1a4>
 801cfce:	3201      	adds	r2, #1
 801cfd0:	42ba      	cmp	r2, r7
 801cfd2:	d00a      	beq.n	801cfea <rcl_wait+0x1ba>
 801cfd4:	6959      	ldr	r1, [r3, #20]
 801cfd6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cfda:	2900      	cmp	r1, #0
 801cfdc:	d1f7      	bne.n	801cfce <rcl_wait+0x19e>
 801cfde:	68ae      	ldr	r6, [r5, #8]
 801cfe0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cfe4:	3201      	adds	r2, #1
 801cfe6:	42ba      	cmp	r2, r7
 801cfe8:	d1f4      	bne.n	801cfd4 <rcl_wait+0x1a4>
 801cfea:	69ef      	ldr	r7, [r5, #28]
 801cfec:	b17f      	cbz	r7, 801d00e <rcl_wait+0x1de>
 801cfee:	2200      	movs	r2, #0
 801cff0:	e002      	b.n	801cff8 <rcl_wait+0x1c8>
 801cff2:	3201      	adds	r2, #1
 801cff4:	42ba      	cmp	r2, r7
 801cff6:	d00a      	beq.n	801d00e <rcl_wait+0x1de>
 801cff8:	6a19      	ldr	r1, [r3, #32]
 801cffa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cffe:	2900      	cmp	r1, #0
 801d000:	d1f7      	bne.n	801cff2 <rcl_wait+0x1c2>
 801d002:	69ae      	ldr	r6, [r5, #24]
 801d004:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d008:	3201      	adds	r2, #1
 801d00a:	42ba      	cmp	r2, r7
 801d00c:	d1f4      	bne.n	801cff8 <rcl_wait+0x1c8>
 801d00e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801d010:	b17f      	cbz	r7, 801d032 <rcl_wait+0x202>
 801d012:	2200      	movs	r2, #0
 801d014:	e002      	b.n	801d01c <rcl_wait+0x1ec>
 801d016:	3201      	adds	r2, #1
 801d018:	42ba      	cmp	r2, r7
 801d01a:	d00a      	beq.n	801d032 <rcl_wait+0x202>
 801d01c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801d01e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d022:	2900      	cmp	r1, #0
 801d024:	d1f7      	bne.n	801d016 <rcl_wait+0x1e6>
 801d026:	6a2e      	ldr	r6, [r5, #32]
 801d028:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d02c:	3201      	adds	r2, #1
 801d02e:	42ba      	cmp	r2, r7
 801d030:	d1f4      	bne.n	801d01c <rcl_wait+0x1ec>
 801d032:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801d034:	b17f      	cbz	r7, 801d056 <rcl_wait+0x226>
 801d036:	2200      	movs	r2, #0
 801d038:	e002      	b.n	801d040 <rcl_wait+0x210>
 801d03a:	3201      	adds	r2, #1
 801d03c:	42ba      	cmp	r2, r7
 801d03e:	d00a      	beq.n	801d056 <rcl_wait+0x226>
 801d040:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801d042:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d046:	2900      	cmp	r1, #0
 801d048:	d1f7      	bne.n	801d03a <rcl_wait+0x20a>
 801d04a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801d04c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801d050:	3201      	adds	r2, #1
 801d052:	42ba      	cmp	r2, r7
 801d054:	d1f4      	bne.n	801d040 <rcl_wait+0x210>
 801d056:	f1b8 0f02 	cmp.w	r8, #2
 801d05a:	f47f af06 	bne.w	801ce6a <rcl_wait+0x3a>
 801d05e:	f084 0301 	eor.w	r3, r4, #1
 801d062:	b2db      	uxtb	r3, r3
 801d064:	2b00      	cmp	r3, #0
 801d066:	bf18      	it	ne
 801d068:	2002      	movne	r0, #2
 801d06a:	b00d      	add	sp, #52	; 0x34
 801d06c:	ecbd 8b02 	vpop	{d8}
 801d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d074:	2a00      	cmp	r2, #0
 801d076:	d03a      	beq.n	801d0ee <rcl_wait+0x2be>
 801d078:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d07c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801d080:	e705      	b.n	801ce8e <rcl_wait+0x5e>
 801d082:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d086:	b00d      	add	sp, #52	; 0x34
 801d088:	ecbd 8b02 	vpop	{d8}
 801d08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d090:	2001      	movs	r0, #1
 801d092:	e6ea      	b.n	801ce6a <rcl_wait+0x3a>
 801d094:	9b04      	ldr	r3, [sp, #16]
 801d096:	460c      	mov	r4, r1
 801d098:	2b01      	cmp	r3, #1
 801d09a:	9b05      	ldr	r3, [sp, #20]
 801d09c:	f173 0300 	sbcs.w	r3, r3, #0
 801d0a0:	bfa8      	it	ge
 801d0a2:	f044 0401 	orrge.w	r4, r4, #1
 801d0a6:	b914      	cbnz	r4, 801d0ae <rcl_wait+0x27e>
 801d0a8:	4623      	mov	r3, r4
 801d0aa:	e747      	b.n	801cf3c <rcl_wait+0x10c>
 801d0ac:	4611      	mov	r1, r2
 801d0ae:	2f00      	cmp	r7, #0
 801d0b0:	da02      	bge.n	801d0b8 <rcl_wait+0x288>
 801d0b2:	f04f 0800 	mov.w	r8, #0
 801d0b6:	4647      	mov	r7, r8
 801d0b8:	460c      	mov	r4, r1
 801d0ba:	4640      	mov	r0, r8
 801d0bc:	4639      	mov	r1, r7
 801d0be:	a312      	add	r3, pc, #72	; (adr r3, 801d108 <rcl_wait+0x2d8>)
 801d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c4:	f7e3 fa32 	bl	800052c <__aeabi_ldivmod>
 801d0c8:	a30f      	add	r3, pc, #60	; (adr r3, 801d108 <rcl_wait+0x2d8>)
 801d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d0d2:	4640      	mov	r0, r8
 801d0d4:	4639      	mov	r1, r7
 801d0d6:	f7e3 fa29 	bl	800052c <__aeabi_ldivmod>
 801d0da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801d0de:	ab08      	add	r3, sp, #32
 801d0e0:	e72c      	b.n	801cf3c <rcl_wait+0x10c>
 801d0e2:	200b      	movs	r0, #11
 801d0e4:	b00d      	add	sp, #52	; 0x34
 801d0e6:	ecbd 8b02 	vpop	{d8}
 801d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0ee:	4611      	mov	r1, r2
 801d0f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d0f4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801d0f8:	e713      	b.n	801cf22 <rcl_wait+0xf2>
 801d0fa:	bf00      	nop
 801d0fc:	f3af 8000 	nop.w
 801d100:	ffffffff 	.word	0xffffffff
 801d104:	7fffffff 	.word	0x7fffffff
 801d108:	3b9aca00 	.word	0x3b9aca00
 801d10c:	00000000 	.word	0x00000000

0801d110 <rcl_action_take_goal_response>:
 801d110:	2800      	cmp	r0, #0
 801d112:	d039      	beq.n	801d188 <rcl_action_take_goal_response+0x78>
 801d114:	b570      	push	{r4, r5, r6, lr}
 801d116:	4604      	mov	r4, r0
 801d118:	6800      	ldr	r0, [r0, #0]
 801d11a:	b380      	cbz	r0, 801d17e <rcl_action_take_goal_response+0x6e>
 801d11c:	460e      	mov	r6, r1
 801d11e:	4615      	mov	r5, r2
 801d120:	f7fe fb5e 	bl	801b7e0 <rcl_client_is_valid>
 801d124:	b330      	cbz	r0, 801d174 <rcl_action_take_goal_response+0x64>
 801d126:	6820      	ldr	r0, [r4, #0]
 801d128:	3004      	adds	r0, #4
 801d12a:	f7fe fb59 	bl	801b7e0 <rcl_client_is_valid>
 801d12e:	b308      	cbz	r0, 801d174 <rcl_action_take_goal_response+0x64>
 801d130:	6820      	ldr	r0, [r4, #0]
 801d132:	3008      	adds	r0, #8
 801d134:	f7fe fb54 	bl	801b7e0 <rcl_client_is_valid>
 801d138:	b1e0      	cbz	r0, 801d174 <rcl_action_take_goal_response+0x64>
 801d13a:	6820      	ldr	r0, [r4, #0]
 801d13c:	300c      	adds	r0, #12
 801d13e:	f7f8 f819 	bl	8015174 <rcl_subscription_is_valid>
 801d142:	b1b8      	cbz	r0, 801d174 <rcl_action_take_goal_response+0x64>
 801d144:	6820      	ldr	r0, [r4, #0]
 801d146:	3010      	adds	r0, #16
 801d148:	f7f8 f814 	bl	8015174 <rcl_subscription_is_valid>
 801d14c:	b190      	cbz	r0, 801d174 <rcl_action_take_goal_response+0x64>
 801d14e:	b1cd      	cbz	r5, 801d184 <rcl_action_take_goal_response+0x74>
 801d150:	b1c6      	cbz	r6, 801d184 <rcl_action_take_goal_response+0x74>
 801d152:	462a      	mov	r2, r5
 801d154:	4631      	mov	r1, r6
 801d156:	6820      	ldr	r0, [r4, #0]
 801d158:	f7fe fafa 	bl	801b750 <rcl_take_response>
 801d15c:	b148      	cbz	r0, 801d172 <rcl_action_take_goal_response+0x62>
 801d15e:	280a      	cmp	r0, #10
 801d160:	d007      	beq.n	801d172 <rcl_action_take_goal_response+0x62>
 801d162:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d166:	f640 0337 	movw	r3, #2103	; 0x837
 801d16a:	4290      	cmp	r0, r2
 801d16c:	bf0c      	ite	eq
 801d16e:	4618      	moveq	r0, r3
 801d170:	2001      	movne	r0, #1
 801d172:	bd70      	pop	{r4, r5, r6, pc}
 801d174:	f7f8 ff98 	bl	80160a8 <rcutils_reset_error>
 801d178:	f640 0036 	movw	r0, #2102	; 0x836
 801d17c:	bd70      	pop	{r4, r5, r6, pc}
 801d17e:	f640 0036 	movw	r0, #2102	; 0x836
 801d182:	bd70      	pop	{r4, r5, r6, pc}
 801d184:	200b      	movs	r0, #11
 801d186:	bd70      	pop	{r4, r5, r6, pc}
 801d188:	f640 0036 	movw	r0, #2102	; 0x836
 801d18c:	4770      	bx	lr
 801d18e:	bf00      	nop

0801d190 <rcl_action_send_result_request>:
 801d190:	b390      	cbz	r0, 801d1f8 <rcl_action_send_result_request+0x68>
 801d192:	b570      	push	{r4, r5, r6, lr}
 801d194:	4604      	mov	r4, r0
 801d196:	6800      	ldr	r0, [r0, #0]
 801d198:	b348      	cbz	r0, 801d1ee <rcl_action_send_result_request+0x5e>
 801d19a:	460e      	mov	r6, r1
 801d19c:	4615      	mov	r5, r2
 801d19e:	f7fe fb1f 	bl	801b7e0 <rcl_client_is_valid>
 801d1a2:	b1f8      	cbz	r0, 801d1e4 <rcl_action_send_result_request+0x54>
 801d1a4:	6820      	ldr	r0, [r4, #0]
 801d1a6:	3004      	adds	r0, #4
 801d1a8:	f7fe fb1a 	bl	801b7e0 <rcl_client_is_valid>
 801d1ac:	b1d0      	cbz	r0, 801d1e4 <rcl_action_send_result_request+0x54>
 801d1ae:	6820      	ldr	r0, [r4, #0]
 801d1b0:	3008      	adds	r0, #8
 801d1b2:	f7fe fb15 	bl	801b7e0 <rcl_client_is_valid>
 801d1b6:	b1a8      	cbz	r0, 801d1e4 <rcl_action_send_result_request+0x54>
 801d1b8:	6820      	ldr	r0, [r4, #0]
 801d1ba:	300c      	adds	r0, #12
 801d1bc:	f7f7 ffda 	bl	8015174 <rcl_subscription_is_valid>
 801d1c0:	b180      	cbz	r0, 801d1e4 <rcl_action_send_result_request+0x54>
 801d1c2:	6820      	ldr	r0, [r4, #0]
 801d1c4:	3010      	adds	r0, #16
 801d1c6:	f7f7 ffd5 	bl	8015174 <rcl_subscription_is_valid>
 801d1ca:	b158      	cbz	r0, 801d1e4 <rcl_action_send_result_request+0x54>
 801d1cc:	b195      	cbz	r5, 801d1f4 <rcl_action_send_result_request+0x64>
 801d1ce:	b18e      	cbz	r6, 801d1f4 <rcl_action_send_result_request+0x64>
 801d1d0:	6820      	ldr	r0, [r4, #0]
 801d1d2:	462a      	mov	r2, r5
 801d1d4:	4631      	mov	r1, r6
 801d1d6:	3008      	adds	r0, #8
 801d1d8:	f7fe fa82 	bl	801b6e0 <rcl_send_request>
 801d1dc:	3800      	subs	r0, #0
 801d1de:	bf18      	it	ne
 801d1e0:	2001      	movne	r0, #1
 801d1e2:	bd70      	pop	{r4, r5, r6, pc}
 801d1e4:	f7f8 ff60 	bl	80160a8 <rcutils_reset_error>
 801d1e8:	f640 0036 	movw	r0, #2102	; 0x836
 801d1ec:	bd70      	pop	{r4, r5, r6, pc}
 801d1ee:	f640 0036 	movw	r0, #2102	; 0x836
 801d1f2:	bd70      	pop	{r4, r5, r6, pc}
 801d1f4:	200b      	movs	r0, #11
 801d1f6:	bd70      	pop	{r4, r5, r6, pc}
 801d1f8:	f640 0036 	movw	r0, #2102	; 0x836
 801d1fc:	4770      	bx	lr
 801d1fe:	bf00      	nop

0801d200 <rcl_action_take_result_response>:
 801d200:	2800      	cmp	r0, #0
 801d202:	d03a      	beq.n	801d27a <rcl_action_take_result_response+0x7a>
 801d204:	b570      	push	{r4, r5, r6, lr}
 801d206:	4604      	mov	r4, r0
 801d208:	6800      	ldr	r0, [r0, #0]
 801d20a:	b388      	cbz	r0, 801d270 <rcl_action_take_result_response+0x70>
 801d20c:	460e      	mov	r6, r1
 801d20e:	4615      	mov	r5, r2
 801d210:	f7fe fae6 	bl	801b7e0 <rcl_client_is_valid>
 801d214:	b338      	cbz	r0, 801d266 <rcl_action_take_result_response+0x66>
 801d216:	6820      	ldr	r0, [r4, #0]
 801d218:	3004      	adds	r0, #4
 801d21a:	f7fe fae1 	bl	801b7e0 <rcl_client_is_valid>
 801d21e:	b310      	cbz	r0, 801d266 <rcl_action_take_result_response+0x66>
 801d220:	6820      	ldr	r0, [r4, #0]
 801d222:	3008      	adds	r0, #8
 801d224:	f7fe fadc 	bl	801b7e0 <rcl_client_is_valid>
 801d228:	b1e8      	cbz	r0, 801d266 <rcl_action_take_result_response+0x66>
 801d22a:	6820      	ldr	r0, [r4, #0]
 801d22c:	300c      	adds	r0, #12
 801d22e:	f7f7 ffa1 	bl	8015174 <rcl_subscription_is_valid>
 801d232:	b1c0      	cbz	r0, 801d266 <rcl_action_take_result_response+0x66>
 801d234:	6820      	ldr	r0, [r4, #0]
 801d236:	3010      	adds	r0, #16
 801d238:	f7f7 ff9c 	bl	8015174 <rcl_subscription_is_valid>
 801d23c:	b198      	cbz	r0, 801d266 <rcl_action_take_result_response+0x66>
 801d23e:	b1d5      	cbz	r5, 801d276 <rcl_action_take_result_response+0x76>
 801d240:	b1ce      	cbz	r6, 801d276 <rcl_action_take_result_response+0x76>
 801d242:	6820      	ldr	r0, [r4, #0]
 801d244:	462a      	mov	r2, r5
 801d246:	4631      	mov	r1, r6
 801d248:	3008      	adds	r0, #8
 801d24a:	f7fe fa81 	bl	801b750 <rcl_take_response>
 801d24e:	b148      	cbz	r0, 801d264 <rcl_action_take_result_response+0x64>
 801d250:	280a      	cmp	r0, #10
 801d252:	d007      	beq.n	801d264 <rcl_action_take_result_response+0x64>
 801d254:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d258:	f640 0337 	movw	r3, #2103	; 0x837
 801d25c:	4290      	cmp	r0, r2
 801d25e:	bf0c      	ite	eq
 801d260:	4618      	moveq	r0, r3
 801d262:	2001      	movne	r0, #1
 801d264:	bd70      	pop	{r4, r5, r6, pc}
 801d266:	f7f8 ff1f 	bl	80160a8 <rcutils_reset_error>
 801d26a:	f640 0036 	movw	r0, #2102	; 0x836
 801d26e:	bd70      	pop	{r4, r5, r6, pc}
 801d270:	f640 0036 	movw	r0, #2102	; 0x836
 801d274:	bd70      	pop	{r4, r5, r6, pc}
 801d276:	200b      	movs	r0, #11
 801d278:	bd70      	pop	{r4, r5, r6, pc}
 801d27a:	f640 0036 	movw	r0, #2102	; 0x836
 801d27e:	4770      	bx	lr

0801d280 <rcl_action_take_cancel_response>:
 801d280:	2800      	cmp	r0, #0
 801d282:	d03a      	beq.n	801d2fa <rcl_action_take_cancel_response+0x7a>
 801d284:	b570      	push	{r4, r5, r6, lr}
 801d286:	4604      	mov	r4, r0
 801d288:	6800      	ldr	r0, [r0, #0]
 801d28a:	b388      	cbz	r0, 801d2f0 <rcl_action_take_cancel_response+0x70>
 801d28c:	460e      	mov	r6, r1
 801d28e:	4615      	mov	r5, r2
 801d290:	f7fe faa6 	bl	801b7e0 <rcl_client_is_valid>
 801d294:	b338      	cbz	r0, 801d2e6 <rcl_action_take_cancel_response+0x66>
 801d296:	6820      	ldr	r0, [r4, #0]
 801d298:	3004      	adds	r0, #4
 801d29a:	f7fe faa1 	bl	801b7e0 <rcl_client_is_valid>
 801d29e:	b310      	cbz	r0, 801d2e6 <rcl_action_take_cancel_response+0x66>
 801d2a0:	6820      	ldr	r0, [r4, #0]
 801d2a2:	3008      	adds	r0, #8
 801d2a4:	f7fe fa9c 	bl	801b7e0 <rcl_client_is_valid>
 801d2a8:	b1e8      	cbz	r0, 801d2e6 <rcl_action_take_cancel_response+0x66>
 801d2aa:	6820      	ldr	r0, [r4, #0]
 801d2ac:	300c      	adds	r0, #12
 801d2ae:	f7f7 ff61 	bl	8015174 <rcl_subscription_is_valid>
 801d2b2:	b1c0      	cbz	r0, 801d2e6 <rcl_action_take_cancel_response+0x66>
 801d2b4:	6820      	ldr	r0, [r4, #0]
 801d2b6:	3010      	adds	r0, #16
 801d2b8:	f7f7 ff5c 	bl	8015174 <rcl_subscription_is_valid>
 801d2bc:	b198      	cbz	r0, 801d2e6 <rcl_action_take_cancel_response+0x66>
 801d2be:	b1d5      	cbz	r5, 801d2f6 <rcl_action_take_cancel_response+0x76>
 801d2c0:	b1ce      	cbz	r6, 801d2f6 <rcl_action_take_cancel_response+0x76>
 801d2c2:	6820      	ldr	r0, [r4, #0]
 801d2c4:	462a      	mov	r2, r5
 801d2c6:	4631      	mov	r1, r6
 801d2c8:	3004      	adds	r0, #4
 801d2ca:	f7fe fa41 	bl	801b750 <rcl_take_response>
 801d2ce:	b148      	cbz	r0, 801d2e4 <rcl_action_take_cancel_response+0x64>
 801d2d0:	280a      	cmp	r0, #10
 801d2d2:	d007      	beq.n	801d2e4 <rcl_action_take_cancel_response+0x64>
 801d2d4:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d2d8:	f640 0337 	movw	r3, #2103	; 0x837
 801d2dc:	4290      	cmp	r0, r2
 801d2de:	bf0c      	ite	eq
 801d2e0:	4618      	moveq	r0, r3
 801d2e2:	2001      	movne	r0, #1
 801d2e4:	bd70      	pop	{r4, r5, r6, pc}
 801d2e6:	f7f8 fedf 	bl	80160a8 <rcutils_reset_error>
 801d2ea:	f640 0036 	movw	r0, #2102	; 0x836
 801d2ee:	bd70      	pop	{r4, r5, r6, pc}
 801d2f0:	f640 0036 	movw	r0, #2102	; 0x836
 801d2f4:	bd70      	pop	{r4, r5, r6, pc}
 801d2f6:	200b      	movs	r0, #11
 801d2f8:	bd70      	pop	{r4, r5, r6, pc}
 801d2fa:	f640 0036 	movw	r0, #2102	; 0x836
 801d2fe:	4770      	bx	lr

0801d300 <rcl_action_take_feedback>:
 801d300:	2800      	cmp	r0, #0
 801d302:	d038      	beq.n	801d376 <rcl_action_take_feedback+0x76>
 801d304:	b530      	push	{r4, r5, lr}
 801d306:	4604      	mov	r4, r0
 801d308:	6800      	ldr	r0, [r0, #0]
 801d30a:	b091      	sub	sp, #68	; 0x44
 801d30c:	b378      	cbz	r0, 801d36e <rcl_action_take_feedback+0x6e>
 801d30e:	460d      	mov	r5, r1
 801d310:	f7fe fa66 	bl	801b7e0 <rcl_client_is_valid>
 801d314:	b328      	cbz	r0, 801d362 <rcl_action_take_feedback+0x62>
 801d316:	6820      	ldr	r0, [r4, #0]
 801d318:	3004      	adds	r0, #4
 801d31a:	f7fe fa61 	bl	801b7e0 <rcl_client_is_valid>
 801d31e:	b300      	cbz	r0, 801d362 <rcl_action_take_feedback+0x62>
 801d320:	6820      	ldr	r0, [r4, #0]
 801d322:	3008      	adds	r0, #8
 801d324:	f7fe fa5c 	bl	801b7e0 <rcl_client_is_valid>
 801d328:	b1d8      	cbz	r0, 801d362 <rcl_action_take_feedback+0x62>
 801d32a:	6820      	ldr	r0, [r4, #0]
 801d32c:	300c      	adds	r0, #12
 801d32e:	f7f7 ff21 	bl	8015174 <rcl_subscription_is_valid>
 801d332:	b1b0      	cbz	r0, 801d362 <rcl_action_take_feedback+0x62>
 801d334:	6820      	ldr	r0, [r4, #0]
 801d336:	3010      	adds	r0, #16
 801d338:	f7f7 ff1c 	bl	8015174 <rcl_subscription_is_valid>
 801d33c:	b188      	cbz	r0, 801d362 <rcl_action_take_feedback+0x62>
 801d33e:	b1ed      	cbz	r5, 801d37c <rcl_action_take_feedback+0x7c>
 801d340:	6820      	ldr	r0, [r4, #0]
 801d342:	2300      	movs	r3, #0
 801d344:	466a      	mov	r2, sp
 801d346:	4629      	mov	r1, r5
 801d348:	300c      	adds	r0, #12
 801d34a:	f7f7 feb7 	bl	80150bc <rcl_take>
 801d34e:	b160      	cbz	r0, 801d36a <rcl_action_take_feedback+0x6a>
 801d350:	f240 1391 	movw	r3, #401	; 0x191
 801d354:	4298      	cmp	r0, r3
 801d356:	d014      	beq.n	801d382 <rcl_action_take_feedback+0x82>
 801d358:	280a      	cmp	r0, #10
 801d35a:	bf18      	it	ne
 801d35c:	2001      	movne	r0, #1
 801d35e:	b011      	add	sp, #68	; 0x44
 801d360:	bd30      	pop	{r4, r5, pc}
 801d362:	f7f8 fea1 	bl	80160a8 <rcutils_reset_error>
 801d366:	f640 0036 	movw	r0, #2102	; 0x836
 801d36a:	b011      	add	sp, #68	; 0x44
 801d36c:	bd30      	pop	{r4, r5, pc}
 801d36e:	f640 0036 	movw	r0, #2102	; 0x836
 801d372:	b011      	add	sp, #68	; 0x44
 801d374:	bd30      	pop	{r4, r5, pc}
 801d376:	f640 0036 	movw	r0, #2102	; 0x836
 801d37a:	4770      	bx	lr
 801d37c:	200b      	movs	r0, #11
 801d37e:	b011      	add	sp, #68	; 0x44
 801d380:	bd30      	pop	{r4, r5, pc}
 801d382:	f640 0037 	movw	r0, #2103	; 0x837
 801d386:	e7f0      	b.n	801d36a <rcl_action_take_feedback+0x6a>

0801d388 <rcl_action_wait_set_add_action_client>:
 801d388:	2800      	cmp	r0, #0
 801d38a:	d048      	beq.n	801d41e <rcl_action_wait_set_add_action_client+0x96>
 801d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d38e:	460c      	mov	r4, r1
 801d390:	2900      	cmp	r1, #0
 801d392:	d03c      	beq.n	801d40e <rcl_action_wait_set_add_action_client+0x86>
 801d394:	4605      	mov	r5, r0
 801d396:	6808      	ldr	r0, [r1, #0]
 801d398:	2800      	cmp	r0, #0
 801d39a:	d038      	beq.n	801d40e <rcl_action_wait_set_add_action_client+0x86>
 801d39c:	4617      	mov	r7, r2
 801d39e:	461e      	mov	r6, r3
 801d3a0:	f7fe fa1e 	bl	801b7e0 <rcl_client_is_valid>
 801d3a4:	b3b0      	cbz	r0, 801d414 <rcl_action_wait_set_add_action_client+0x8c>
 801d3a6:	6820      	ldr	r0, [r4, #0]
 801d3a8:	3004      	adds	r0, #4
 801d3aa:	f7fe fa19 	bl	801b7e0 <rcl_client_is_valid>
 801d3ae:	b388      	cbz	r0, 801d414 <rcl_action_wait_set_add_action_client+0x8c>
 801d3b0:	6820      	ldr	r0, [r4, #0]
 801d3b2:	3008      	adds	r0, #8
 801d3b4:	f7fe fa14 	bl	801b7e0 <rcl_client_is_valid>
 801d3b8:	b360      	cbz	r0, 801d414 <rcl_action_wait_set_add_action_client+0x8c>
 801d3ba:	6820      	ldr	r0, [r4, #0]
 801d3bc:	300c      	adds	r0, #12
 801d3be:	f7f7 fed9 	bl	8015174 <rcl_subscription_is_valid>
 801d3c2:	b338      	cbz	r0, 801d414 <rcl_action_wait_set_add_action_client+0x8c>
 801d3c4:	6820      	ldr	r0, [r4, #0]
 801d3c6:	3010      	adds	r0, #16
 801d3c8:	f7f7 fed4 	bl	8015174 <rcl_subscription_is_valid>
 801d3cc:	b310      	cbz	r0, 801d414 <rcl_action_wait_set_add_action_client+0x8c>
 801d3ce:	6821      	ldr	r1, [r4, #0]
 801d3d0:	4628      	mov	r0, r5
 801d3d2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801d3d6:	f7ff fcd1 	bl	801cd7c <rcl_wait_set_add_client>
 801d3da:	b9b8      	cbnz	r0, 801d40c <rcl_action_wait_set_add_action_client+0x84>
 801d3dc:	6821      	ldr	r1, [r4, #0]
 801d3de:	4628      	mov	r0, r5
 801d3e0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801d3e4:	3104      	adds	r1, #4
 801d3e6:	f7ff fcc9 	bl	801cd7c <rcl_wait_set_add_client>
 801d3ea:	b978      	cbnz	r0, 801d40c <rcl_action_wait_set_add_action_client+0x84>
 801d3ec:	6821      	ldr	r1, [r4, #0]
 801d3ee:	4628      	mov	r0, r5
 801d3f0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801d3f4:	3108      	adds	r1, #8
 801d3f6:	f7ff fcc1 	bl	801cd7c <rcl_wait_set_add_client>
 801d3fa:	b938      	cbnz	r0, 801d40c <rcl_action_wait_set_add_action_client+0x84>
 801d3fc:	6821      	ldr	r1, [r4, #0]
 801d3fe:	4628      	mov	r0, r5
 801d400:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801d404:	310c      	adds	r1, #12
 801d406:	f7ff f969 	bl	801c6dc <rcl_wait_set_add_subscription>
 801d40a:	b158      	cbz	r0, 801d424 <rcl_action_wait_set_add_action_client+0x9c>
 801d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d40e:	f640 0036 	movw	r0, #2102	; 0x836
 801d412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d414:	f7f8 fe48 	bl	80160a8 <rcutils_reset_error>
 801d418:	f640 0036 	movw	r0, #2102	; 0x836
 801d41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d41e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d422:	4770      	bx	lr
 801d424:	6821      	ldr	r1, [r4, #0]
 801d426:	4628      	mov	r0, r5
 801d428:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801d42c:	3110      	adds	r1, #16
 801d42e:	f7ff f955 	bl	801c6dc <rcl_wait_set_add_subscription>
 801d432:	2800      	cmp	r0, #0
 801d434:	d1ea      	bne.n	801d40c <rcl_action_wait_set_add_action_client+0x84>
 801d436:	b11f      	cbz	r7, 801d440 <rcl_action_wait_set_add_action_client+0xb8>
 801d438:	6823      	ldr	r3, [r4, #0]
 801d43a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801d43e:	603b      	str	r3, [r7, #0]
 801d440:	2e00      	cmp	r6, #0
 801d442:	d0e3      	beq.n	801d40c <rcl_action_wait_set_add_action_client+0x84>
 801d444:	6823      	ldr	r3, [r4, #0]
 801d446:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801d44a:	6033      	str	r3, [r6, #0]
 801d44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d44e:	bf00      	nop

0801d450 <rcl_action_client_wait_set_get_entities_ready>:
 801d450:	2800      	cmp	r0, #0
 801d452:	d050      	beq.n	801d4f6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d458:	460c      	mov	r4, r1
 801d45a:	2900      	cmp	r1, #0
 801d45c:	d03e      	beq.n	801d4dc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d45e:	4605      	mov	r5, r0
 801d460:	6808      	ldr	r0, [r1, #0]
 801d462:	2800      	cmp	r0, #0
 801d464:	d03a      	beq.n	801d4dc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d466:	4616      	mov	r6, r2
 801d468:	461f      	mov	r7, r3
 801d46a:	f7fe f9b9 	bl	801b7e0 <rcl_client_is_valid>
 801d46e:	2800      	cmp	r0, #0
 801d470:	d038      	beq.n	801d4e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d472:	6820      	ldr	r0, [r4, #0]
 801d474:	3004      	adds	r0, #4
 801d476:	f7fe f9b3 	bl	801b7e0 <rcl_client_is_valid>
 801d47a:	2800      	cmp	r0, #0
 801d47c:	d032      	beq.n	801d4e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d47e:	6820      	ldr	r0, [r4, #0]
 801d480:	3008      	adds	r0, #8
 801d482:	f7fe f9ad 	bl	801b7e0 <rcl_client_is_valid>
 801d486:	b368      	cbz	r0, 801d4e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d488:	6820      	ldr	r0, [r4, #0]
 801d48a:	300c      	adds	r0, #12
 801d48c:	f7f7 fe72 	bl	8015174 <rcl_subscription_is_valid>
 801d490:	b340      	cbz	r0, 801d4e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d492:	6820      	ldr	r0, [r4, #0]
 801d494:	3010      	adds	r0, #16
 801d496:	f7f7 fe6d 	bl	8015174 <rcl_subscription_is_valid>
 801d49a:	b318      	cbz	r0, 801d4e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d49c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d4a0:	2a00      	cmp	r2, #0
 801d4a2:	bf18      	it	ne
 801d4a4:	2b00      	cmpne	r3, #0
 801d4a6:	9b08      	ldr	r3, [sp, #32]
 801d4a8:	bf0c      	ite	eq
 801d4aa:	2101      	moveq	r1, #1
 801d4ac:	2100      	movne	r1, #0
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	bf08      	it	eq
 801d4b2:	f041 0101 	orreq.w	r1, r1, #1
 801d4b6:	2f00      	cmp	r7, #0
 801d4b8:	bf08      	it	eq
 801d4ba:	f041 0101 	orreq.w	r1, r1, #1
 801d4be:	b9b9      	cbnz	r1, 801d4f0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d4c0:	b1b6      	cbz	r6, 801d4f0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d4c2:	6823      	ldr	r3, [r4, #0]
 801d4c4:	686c      	ldr	r4, [r5, #4]
 801d4c6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801d4ca:	428a      	cmp	r2, r1
 801d4cc:	4610      	mov	r0, r2
 801d4ce:	bf38      	it	cc
 801d4d0:	4608      	movcc	r0, r1
 801d4d2:	4284      	cmp	r4, r0
 801d4d4:	d812      	bhi.n	801d4fc <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d4d6:	2001      	movs	r0, #1
 801d4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4dc:	f640 0036 	movw	r0, #2102	; 0x836
 801d4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4e4:	f7f8 fde0 	bl	80160a8 <rcutils_reset_error>
 801d4e8:	f640 0036 	movw	r0, #2102	; 0x836
 801d4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4f0:	200b      	movs	r0, #11
 801d4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4f6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d4fa:	4770      	bx	lr
 801d4fc:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d500:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d504:	45f0      	cmp	r8, lr
 801d506:	4640      	mov	r0, r8
 801d508:	69ec      	ldr	r4, [r5, #28]
 801d50a:	bf38      	it	cc
 801d50c:	4670      	movcc	r0, lr
 801d50e:	4560      	cmp	r0, ip
 801d510:	bf38      	it	cc
 801d512:	4660      	movcc	r0, ip
 801d514:	4284      	cmp	r4, r0
 801d516:	d9de      	bls.n	801d4d6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d518:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d51c:	682d      	ldr	r5, [r5, #0]
 801d51e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d522:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d526:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d52a:	1a18      	subs	r0, r3, r0
 801d52c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d530:	f103 0c0c 	add.w	ip, r3, #12
 801d534:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d538:	fab0 f080 	clz	r0, r0
 801d53c:	eba5 050c 	sub.w	r5, r5, ip
 801d540:	0940      	lsrs	r0, r0, #5
 801d542:	fab5 f585 	clz	r5, r5
 801d546:	096d      	lsrs	r5, r5, #5
 801d548:	7035      	strb	r5, [r6, #0]
 801d54a:	f103 0510 	add.w	r5, r3, #16
 801d54e:	1b64      	subs	r4, r4, r5
 801d550:	9d08      	ldr	r5, [sp, #32]
 801d552:	fab4 f484 	clz	r4, r4
 801d556:	0964      	lsrs	r4, r4, #5
 801d558:	703c      	strb	r4, [r7, #0]
 801d55a:	1d1c      	adds	r4, r3, #4
 801d55c:	3308      	adds	r3, #8
 801d55e:	7028      	strb	r0, [r5, #0]
 801d560:	1b09      	subs	r1, r1, r4
 801d562:	2000      	movs	r0, #0
 801d564:	1ad3      	subs	r3, r2, r3
 801d566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d568:	fab1 f181 	clz	r1, r1
 801d56c:	fab3 f383 	clz	r3, r3
 801d570:	0949      	lsrs	r1, r1, #5
 801d572:	095b      	lsrs	r3, r3, #5
 801d574:	7011      	strb	r1, [r2, #0]
 801d576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d578:	7013      	strb	r3, [r2, #0]
 801d57a:	e7b1      	b.n	801d4e0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d57c <rcl_action_take_goal_request>:
 801d57c:	2800      	cmp	r0, #0
 801d57e:	d039      	beq.n	801d5f4 <rcl_action_take_goal_request+0x78>
 801d580:	b570      	push	{r4, r5, r6, lr}
 801d582:	4604      	mov	r4, r0
 801d584:	6800      	ldr	r0, [r0, #0]
 801d586:	b380      	cbz	r0, 801d5ea <rcl_action_take_goal_request+0x6e>
 801d588:	460e      	mov	r6, r1
 801d58a:	4615      	mov	r5, r2
 801d58c:	f7fe fdbe 	bl	801c10c <rcl_service_is_valid>
 801d590:	b330      	cbz	r0, 801d5e0 <rcl_action_take_goal_request+0x64>
 801d592:	6820      	ldr	r0, [r4, #0]
 801d594:	3004      	adds	r0, #4
 801d596:	f7fe fdb9 	bl	801c10c <rcl_service_is_valid>
 801d59a:	b308      	cbz	r0, 801d5e0 <rcl_action_take_goal_request+0x64>
 801d59c:	6820      	ldr	r0, [r4, #0]
 801d59e:	3008      	adds	r0, #8
 801d5a0:	f7fe fdb4 	bl	801c10c <rcl_service_is_valid>
 801d5a4:	b1e0      	cbz	r0, 801d5e0 <rcl_action_take_goal_request+0x64>
 801d5a6:	6820      	ldr	r0, [r4, #0]
 801d5a8:	300c      	adds	r0, #12
 801d5aa:	f002 fde5 	bl	8020178 <rcl_publisher_is_valid>
 801d5ae:	b1b8      	cbz	r0, 801d5e0 <rcl_action_take_goal_request+0x64>
 801d5b0:	6820      	ldr	r0, [r4, #0]
 801d5b2:	3010      	adds	r0, #16
 801d5b4:	f002 fde0 	bl	8020178 <rcl_publisher_is_valid>
 801d5b8:	b190      	cbz	r0, 801d5e0 <rcl_action_take_goal_request+0x64>
 801d5ba:	b1cd      	cbz	r5, 801d5f0 <rcl_action_take_goal_request+0x74>
 801d5bc:	b1c6      	cbz	r6, 801d5f0 <rcl_action_take_goal_request+0x74>
 801d5be:	462a      	mov	r2, r5
 801d5c0:	4631      	mov	r1, r6
 801d5c2:	6820      	ldr	r0, [r4, #0]
 801d5c4:	f7fe fd4a 	bl	801c05c <rcl_take_request>
 801d5c8:	b148      	cbz	r0, 801d5de <rcl_action_take_goal_request+0x62>
 801d5ca:	280a      	cmp	r0, #10
 801d5cc:	d007      	beq.n	801d5de <rcl_action_take_goal_request+0x62>
 801d5ce:	f240 2259 	movw	r2, #601	; 0x259
 801d5d2:	f640 0399 	movw	r3, #2201	; 0x899
 801d5d6:	4290      	cmp	r0, r2
 801d5d8:	bf0c      	ite	eq
 801d5da:	4618      	moveq	r0, r3
 801d5dc:	2001      	movne	r0, #1
 801d5de:	bd70      	pop	{r4, r5, r6, pc}
 801d5e0:	f7f8 fd62 	bl	80160a8 <rcutils_reset_error>
 801d5e4:	f640 0098 	movw	r0, #2200	; 0x898
 801d5e8:	bd70      	pop	{r4, r5, r6, pc}
 801d5ea:	f640 0098 	movw	r0, #2200	; 0x898
 801d5ee:	bd70      	pop	{r4, r5, r6, pc}
 801d5f0:	200b      	movs	r0, #11
 801d5f2:	bd70      	pop	{r4, r5, r6, pc}
 801d5f4:	f640 0098 	movw	r0, #2200	; 0x898
 801d5f8:	4770      	bx	lr
 801d5fa:	bf00      	nop

0801d5fc <rcl_action_send_goal_response>:
 801d5fc:	b388      	cbz	r0, 801d662 <rcl_action_send_goal_response+0x66>
 801d5fe:	b570      	push	{r4, r5, r6, lr}
 801d600:	4604      	mov	r4, r0
 801d602:	6800      	ldr	r0, [r0, #0]
 801d604:	b340      	cbz	r0, 801d658 <rcl_action_send_goal_response+0x5c>
 801d606:	460e      	mov	r6, r1
 801d608:	4615      	mov	r5, r2
 801d60a:	f7fe fd7f 	bl	801c10c <rcl_service_is_valid>
 801d60e:	b1f0      	cbz	r0, 801d64e <rcl_action_send_goal_response+0x52>
 801d610:	6820      	ldr	r0, [r4, #0]
 801d612:	3004      	adds	r0, #4
 801d614:	f7fe fd7a 	bl	801c10c <rcl_service_is_valid>
 801d618:	b1c8      	cbz	r0, 801d64e <rcl_action_send_goal_response+0x52>
 801d61a:	6820      	ldr	r0, [r4, #0]
 801d61c:	3008      	adds	r0, #8
 801d61e:	f7fe fd75 	bl	801c10c <rcl_service_is_valid>
 801d622:	b1a0      	cbz	r0, 801d64e <rcl_action_send_goal_response+0x52>
 801d624:	6820      	ldr	r0, [r4, #0]
 801d626:	300c      	adds	r0, #12
 801d628:	f002 fda6 	bl	8020178 <rcl_publisher_is_valid>
 801d62c:	b178      	cbz	r0, 801d64e <rcl_action_send_goal_response+0x52>
 801d62e:	6820      	ldr	r0, [r4, #0]
 801d630:	3010      	adds	r0, #16
 801d632:	f002 fda1 	bl	8020178 <rcl_publisher_is_valid>
 801d636:	b150      	cbz	r0, 801d64e <rcl_action_send_goal_response+0x52>
 801d638:	b18d      	cbz	r5, 801d65e <rcl_action_send_goal_response+0x62>
 801d63a:	b186      	cbz	r6, 801d65e <rcl_action_send_goal_response+0x62>
 801d63c:	462a      	mov	r2, r5
 801d63e:	4631      	mov	r1, r6
 801d640:	6820      	ldr	r0, [r4, #0]
 801d642:	f7fe fd4b 	bl	801c0dc <rcl_send_response>
 801d646:	3800      	subs	r0, #0
 801d648:	bf18      	it	ne
 801d64a:	2001      	movne	r0, #1
 801d64c:	bd70      	pop	{r4, r5, r6, pc}
 801d64e:	f7f8 fd2b 	bl	80160a8 <rcutils_reset_error>
 801d652:	f640 0098 	movw	r0, #2200	; 0x898
 801d656:	bd70      	pop	{r4, r5, r6, pc}
 801d658:	f640 0098 	movw	r0, #2200	; 0x898
 801d65c:	bd70      	pop	{r4, r5, r6, pc}
 801d65e:	200b      	movs	r0, #11
 801d660:	bd70      	pop	{r4, r5, r6, pc}
 801d662:	f640 0098 	movw	r0, #2200	; 0x898
 801d666:	4770      	bx	lr

0801d668 <rcl_action_take_result_request>:
 801d668:	2800      	cmp	r0, #0
 801d66a:	d03a      	beq.n	801d6e2 <rcl_action_take_result_request+0x7a>
 801d66c:	b570      	push	{r4, r5, r6, lr}
 801d66e:	4604      	mov	r4, r0
 801d670:	6800      	ldr	r0, [r0, #0]
 801d672:	b388      	cbz	r0, 801d6d8 <rcl_action_take_result_request+0x70>
 801d674:	460e      	mov	r6, r1
 801d676:	4615      	mov	r5, r2
 801d678:	f7fe fd48 	bl	801c10c <rcl_service_is_valid>
 801d67c:	b338      	cbz	r0, 801d6ce <rcl_action_take_result_request+0x66>
 801d67e:	6820      	ldr	r0, [r4, #0]
 801d680:	3004      	adds	r0, #4
 801d682:	f7fe fd43 	bl	801c10c <rcl_service_is_valid>
 801d686:	b310      	cbz	r0, 801d6ce <rcl_action_take_result_request+0x66>
 801d688:	6820      	ldr	r0, [r4, #0]
 801d68a:	3008      	adds	r0, #8
 801d68c:	f7fe fd3e 	bl	801c10c <rcl_service_is_valid>
 801d690:	b1e8      	cbz	r0, 801d6ce <rcl_action_take_result_request+0x66>
 801d692:	6820      	ldr	r0, [r4, #0]
 801d694:	300c      	adds	r0, #12
 801d696:	f002 fd6f 	bl	8020178 <rcl_publisher_is_valid>
 801d69a:	b1c0      	cbz	r0, 801d6ce <rcl_action_take_result_request+0x66>
 801d69c:	6820      	ldr	r0, [r4, #0]
 801d69e:	3010      	adds	r0, #16
 801d6a0:	f002 fd6a 	bl	8020178 <rcl_publisher_is_valid>
 801d6a4:	b198      	cbz	r0, 801d6ce <rcl_action_take_result_request+0x66>
 801d6a6:	b1d5      	cbz	r5, 801d6de <rcl_action_take_result_request+0x76>
 801d6a8:	b1ce      	cbz	r6, 801d6de <rcl_action_take_result_request+0x76>
 801d6aa:	6820      	ldr	r0, [r4, #0]
 801d6ac:	462a      	mov	r2, r5
 801d6ae:	4631      	mov	r1, r6
 801d6b0:	3008      	adds	r0, #8
 801d6b2:	f7fe fcd3 	bl	801c05c <rcl_take_request>
 801d6b6:	b148      	cbz	r0, 801d6cc <rcl_action_take_result_request+0x64>
 801d6b8:	280a      	cmp	r0, #10
 801d6ba:	d007      	beq.n	801d6cc <rcl_action_take_result_request+0x64>
 801d6bc:	f240 2259 	movw	r2, #601	; 0x259
 801d6c0:	f640 0399 	movw	r3, #2201	; 0x899
 801d6c4:	4290      	cmp	r0, r2
 801d6c6:	bf0c      	ite	eq
 801d6c8:	4618      	moveq	r0, r3
 801d6ca:	2001      	movne	r0, #1
 801d6cc:	bd70      	pop	{r4, r5, r6, pc}
 801d6ce:	f7f8 fceb 	bl	80160a8 <rcutils_reset_error>
 801d6d2:	f640 0098 	movw	r0, #2200	; 0x898
 801d6d6:	bd70      	pop	{r4, r5, r6, pc}
 801d6d8:	f640 0098 	movw	r0, #2200	; 0x898
 801d6dc:	bd70      	pop	{r4, r5, r6, pc}
 801d6de:	200b      	movs	r0, #11
 801d6e0:	bd70      	pop	{r4, r5, r6, pc}
 801d6e2:	f640 0098 	movw	r0, #2200	; 0x898
 801d6e6:	4770      	bx	lr

0801d6e8 <rcl_action_take_cancel_request>:
 801d6e8:	2800      	cmp	r0, #0
 801d6ea:	d03a      	beq.n	801d762 <rcl_action_take_cancel_request+0x7a>
 801d6ec:	b570      	push	{r4, r5, r6, lr}
 801d6ee:	4604      	mov	r4, r0
 801d6f0:	6800      	ldr	r0, [r0, #0]
 801d6f2:	b388      	cbz	r0, 801d758 <rcl_action_take_cancel_request+0x70>
 801d6f4:	460e      	mov	r6, r1
 801d6f6:	4615      	mov	r5, r2
 801d6f8:	f7fe fd08 	bl	801c10c <rcl_service_is_valid>
 801d6fc:	b338      	cbz	r0, 801d74e <rcl_action_take_cancel_request+0x66>
 801d6fe:	6820      	ldr	r0, [r4, #0]
 801d700:	3004      	adds	r0, #4
 801d702:	f7fe fd03 	bl	801c10c <rcl_service_is_valid>
 801d706:	b310      	cbz	r0, 801d74e <rcl_action_take_cancel_request+0x66>
 801d708:	6820      	ldr	r0, [r4, #0]
 801d70a:	3008      	adds	r0, #8
 801d70c:	f7fe fcfe 	bl	801c10c <rcl_service_is_valid>
 801d710:	b1e8      	cbz	r0, 801d74e <rcl_action_take_cancel_request+0x66>
 801d712:	6820      	ldr	r0, [r4, #0]
 801d714:	300c      	adds	r0, #12
 801d716:	f002 fd2f 	bl	8020178 <rcl_publisher_is_valid>
 801d71a:	b1c0      	cbz	r0, 801d74e <rcl_action_take_cancel_request+0x66>
 801d71c:	6820      	ldr	r0, [r4, #0]
 801d71e:	3010      	adds	r0, #16
 801d720:	f002 fd2a 	bl	8020178 <rcl_publisher_is_valid>
 801d724:	b198      	cbz	r0, 801d74e <rcl_action_take_cancel_request+0x66>
 801d726:	b1d5      	cbz	r5, 801d75e <rcl_action_take_cancel_request+0x76>
 801d728:	b1ce      	cbz	r6, 801d75e <rcl_action_take_cancel_request+0x76>
 801d72a:	6820      	ldr	r0, [r4, #0]
 801d72c:	462a      	mov	r2, r5
 801d72e:	4631      	mov	r1, r6
 801d730:	3004      	adds	r0, #4
 801d732:	f7fe fc93 	bl	801c05c <rcl_take_request>
 801d736:	b148      	cbz	r0, 801d74c <rcl_action_take_cancel_request+0x64>
 801d738:	280a      	cmp	r0, #10
 801d73a:	d007      	beq.n	801d74c <rcl_action_take_cancel_request+0x64>
 801d73c:	f240 2259 	movw	r2, #601	; 0x259
 801d740:	f640 0399 	movw	r3, #2201	; 0x899
 801d744:	4290      	cmp	r0, r2
 801d746:	bf0c      	ite	eq
 801d748:	4618      	moveq	r0, r3
 801d74a:	2001      	movne	r0, #1
 801d74c:	bd70      	pop	{r4, r5, r6, pc}
 801d74e:	f7f8 fcab 	bl	80160a8 <rcutils_reset_error>
 801d752:	f640 0098 	movw	r0, #2200	; 0x898
 801d756:	bd70      	pop	{r4, r5, r6, pc}
 801d758:	f640 0098 	movw	r0, #2200	; 0x898
 801d75c:	bd70      	pop	{r4, r5, r6, pc}
 801d75e:	200b      	movs	r0, #11
 801d760:	bd70      	pop	{r4, r5, r6, pc}
 801d762:	f640 0098 	movw	r0, #2200	; 0x898
 801d766:	4770      	bx	lr

0801d768 <rcl_action_send_cancel_response>:
 801d768:	b390      	cbz	r0, 801d7d0 <rcl_action_send_cancel_response+0x68>
 801d76a:	b570      	push	{r4, r5, r6, lr}
 801d76c:	4604      	mov	r4, r0
 801d76e:	6800      	ldr	r0, [r0, #0]
 801d770:	b348      	cbz	r0, 801d7c6 <rcl_action_send_cancel_response+0x5e>
 801d772:	460e      	mov	r6, r1
 801d774:	4615      	mov	r5, r2
 801d776:	f7fe fcc9 	bl	801c10c <rcl_service_is_valid>
 801d77a:	b1f8      	cbz	r0, 801d7bc <rcl_action_send_cancel_response+0x54>
 801d77c:	6820      	ldr	r0, [r4, #0]
 801d77e:	3004      	adds	r0, #4
 801d780:	f7fe fcc4 	bl	801c10c <rcl_service_is_valid>
 801d784:	b1d0      	cbz	r0, 801d7bc <rcl_action_send_cancel_response+0x54>
 801d786:	6820      	ldr	r0, [r4, #0]
 801d788:	3008      	adds	r0, #8
 801d78a:	f7fe fcbf 	bl	801c10c <rcl_service_is_valid>
 801d78e:	b1a8      	cbz	r0, 801d7bc <rcl_action_send_cancel_response+0x54>
 801d790:	6820      	ldr	r0, [r4, #0]
 801d792:	300c      	adds	r0, #12
 801d794:	f002 fcf0 	bl	8020178 <rcl_publisher_is_valid>
 801d798:	b180      	cbz	r0, 801d7bc <rcl_action_send_cancel_response+0x54>
 801d79a:	6820      	ldr	r0, [r4, #0]
 801d79c:	3010      	adds	r0, #16
 801d79e:	f002 fceb 	bl	8020178 <rcl_publisher_is_valid>
 801d7a2:	b158      	cbz	r0, 801d7bc <rcl_action_send_cancel_response+0x54>
 801d7a4:	b195      	cbz	r5, 801d7cc <rcl_action_send_cancel_response+0x64>
 801d7a6:	b18e      	cbz	r6, 801d7cc <rcl_action_send_cancel_response+0x64>
 801d7a8:	6820      	ldr	r0, [r4, #0]
 801d7aa:	462a      	mov	r2, r5
 801d7ac:	4631      	mov	r1, r6
 801d7ae:	3004      	adds	r0, #4
 801d7b0:	f7fe fc94 	bl	801c0dc <rcl_send_response>
 801d7b4:	3800      	subs	r0, #0
 801d7b6:	bf18      	it	ne
 801d7b8:	2001      	movne	r0, #1
 801d7ba:	bd70      	pop	{r4, r5, r6, pc}
 801d7bc:	f7f8 fc74 	bl	80160a8 <rcutils_reset_error>
 801d7c0:	f640 0098 	movw	r0, #2200	; 0x898
 801d7c4:	bd70      	pop	{r4, r5, r6, pc}
 801d7c6:	f640 0098 	movw	r0, #2200	; 0x898
 801d7ca:	bd70      	pop	{r4, r5, r6, pc}
 801d7cc:	200b      	movs	r0, #11
 801d7ce:	bd70      	pop	{r4, r5, r6, pc}
 801d7d0:	f640 0098 	movw	r0, #2200	; 0x898
 801d7d4:	4770      	bx	lr
 801d7d6:	bf00      	nop

0801d7d8 <rcl_action_wait_set_add_action_server>:
 801d7d8:	2800      	cmp	r0, #0
 801d7da:	d04d      	beq.n	801d878 <rcl_action_wait_set_add_action_server+0xa0>
 801d7dc:	b570      	push	{r4, r5, r6, lr}
 801d7de:	460c      	mov	r4, r1
 801d7e0:	b159      	cbz	r1, 801d7fa <rcl_action_wait_set_add_action_server+0x22>
 801d7e2:	4605      	mov	r5, r0
 801d7e4:	6808      	ldr	r0, [r1, #0]
 801d7e6:	b140      	cbz	r0, 801d7fa <rcl_action_wait_set_add_action_server+0x22>
 801d7e8:	4616      	mov	r6, r2
 801d7ea:	f7fe fc8f 	bl	801c10c <rcl_service_is_valid>
 801d7ee:	b120      	cbz	r0, 801d7fa <rcl_action_wait_set_add_action_server+0x22>
 801d7f0:	6820      	ldr	r0, [r4, #0]
 801d7f2:	3004      	adds	r0, #4
 801d7f4:	f7fe fc8a 	bl	801c10c <rcl_service_is_valid>
 801d7f8:	b910      	cbnz	r0, 801d800 <rcl_action_wait_set_add_action_server+0x28>
 801d7fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d7fe:	bd70      	pop	{r4, r5, r6, pc}
 801d800:	6820      	ldr	r0, [r4, #0]
 801d802:	3008      	adds	r0, #8
 801d804:	f7fe fc82 	bl	801c10c <rcl_service_is_valid>
 801d808:	2800      	cmp	r0, #0
 801d80a:	d0f6      	beq.n	801d7fa <rcl_action_wait_set_add_action_server+0x22>
 801d80c:	6820      	ldr	r0, [r4, #0]
 801d80e:	300c      	adds	r0, #12
 801d810:	f002 fcca 	bl	80201a8 <rcl_publisher_is_valid_except_context>
 801d814:	2800      	cmp	r0, #0
 801d816:	d0f0      	beq.n	801d7fa <rcl_action_wait_set_add_action_server+0x22>
 801d818:	6820      	ldr	r0, [r4, #0]
 801d81a:	3010      	adds	r0, #16
 801d81c:	f002 fcc4 	bl	80201a8 <rcl_publisher_is_valid_except_context>
 801d820:	2800      	cmp	r0, #0
 801d822:	d0ea      	beq.n	801d7fa <rcl_action_wait_set_add_action_server+0x22>
 801d824:	6821      	ldr	r1, [r4, #0]
 801d826:	4628      	mov	r0, r5
 801d828:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d82c:	f7ff fad2 	bl	801cdd4 <rcl_wait_set_add_service>
 801d830:	2800      	cmp	r0, #0
 801d832:	d1e4      	bne.n	801d7fe <rcl_action_wait_set_add_action_server+0x26>
 801d834:	6821      	ldr	r1, [r4, #0]
 801d836:	4628      	mov	r0, r5
 801d838:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d83c:	3104      	adds	r1, #4
 801d83e:	f7ff fac9 	bl	801cdd4 <rcl_wait_set_add_service>
 801d842:	2800      	cmp	r0, #0
 801d844:	d1db      	bne.n	801d7fe <rcl_action_wait_set_add_action_server+0x26>
 801d846:	6821      	ldr	r1, [r4, #0]
 801d848:	4628      	mov	r0, r5
 801d84a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d84e:	3108      	adds	r1, #8
 801d850:	f7ff fac0 	bl	801cdd4 <rcl_wait_set_add_service>
 801d854:	2800      	cmp	r0, #0
 801d856:	d1d2      	bne.n	801d7fe <rcl_action_wait_set_add_action_server+0x26>
 801d858:	6821      	ldr	r1, [r4, #0]
 801d85a:	4628      	mov	r0, r5
 801d85c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d860:	3114      	adds	r1, #20
 801d862:	f7ff fa5b 	bl	801cd1c <rcl_wait_set_add_timer>
 801d866:	2800      	cmp	r0, #0
 801d868:	d1c9      	bne.n	801d7fe <rcl_action_wait_set_add_action_server+0x26>
 801d86a:	2e00      	cmp	r6, #0
 801d86c:	d0c7      	beq.n	801d7fe <rcl_action_wait_set_add_action_server+0x26>
 801d86e:	6823      	ldr	r3, [r4, #0]
 801d870:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d874:	6033      	str	r3, [r6, #0]
 801d876:	bd70      	pop	{r4, r5, r6, pc}
 801d878:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d87c:	4770      	bx	lr
 801d87e:	bf00      	nop

0801d880 <rcl_action_server_wait_set_get_entities_ready>:
 801d880:	2800      	cmp	r0, #0
 801d882:	d067      	beq.n	801d954 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d888:	460c      	mov	r4, r1
 801d88a:	b161      	cbz	r1, 801d8a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d88c:	4605      	mov	r5, r0
 801d88e:	6808      	ldr	r0, [r1, #0]
 801d890:	b148      	cbz	r0, 801d8a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d892:	4616      	mov	r6, r2
 801d894:	4698      	mov	r8, r3
 801d896:	f7fe fc39 	bl	801c10c <rcl_service_is_valid>
 801d89a:	b120      	cbz	r0, 801d8a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d89c:	6820      	ldr	r0, [r4, #0]
 801d89e:	3004      	adds	r0, #4
 801d8a0:	f7fe fc34 	bl	801c10c <rcl_service_is_valid>
 801d8a4:	b918      	cbnz	r0, 801d8ae <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d8a6:	f640 0098 	movw	r0, #2200	; 0x898
 801d8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8ae:	6820      	ldr	r0, [r4, #0]
 801d8b0:	3008      	adds	r0, #8
 801d8b2:	f7fe fc2b 	bl	801c10c <rcl_service_is_valid>
 801d8b6:	2800      	cmp	r0, #0
 801d8b8:	d0f5      	beq.n	801d8a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d8ba:	6820      	ldr	r0, [r4, #0]
 801d8bc:	300c      	adds	r0, #12
 801d8be:	f002 fc73 	bl	80201a8 <rcl_publisher_is_valid_except_context>
 801d8c2:	2800      	cmp	r0, #0
 801d8c4:	d0ef      	beq.n	801d8a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d8c6:	6820      	ldr	r0, [r4, #0]
 801d8c8:	3010      	adds	r0, #16
 801d8ca:	f002 fc6d 	bl	80201a8 <rcl_publisher_is_valid_except_context>
 801d8ce:	2800      	cmp	r0, #0
 801d8d0:	d0e9      	beq.n	801d8a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d8d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d8d6:	2a00      	cmp	r2, #0
 801d8d8:	bf18      	it	ne
 801d8da:	2b00      	cmpne	r3, #0
 801d8dc:	bf0c      	ite	eq
 801d8de:	2101      	moveq	r1, #1
 801d8e0:	2100      	movne	r1, #0
 801d8e2:	f1b8 0f00 	cmp.w	r8, #0
 801d8e6:	bf08      	it	eq
 801d8e8:	f041 0101 	orreq.w	r1, r1, #1
 801d8ec:	bba9      	cbnz	r1, 801d95a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d8ee:	b3a6      	cbz	r6, 801d95a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d8f0:	6821      	ldr	r1, [r4, #0]
 801d8f2:	2000      	movs	r0, #0
 801d8f4:	692c      	ldr	r4, [r5, #16]
 801d8f6:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d8fa:	6a2f      	ldr	r7, [r5, #32]
 801d8fc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d900:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d904:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d908:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d90c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d910:	1a64      	subs	r4, r4, r1
 801d912:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d916:	fab4 f484 	clz	r4, r4
 801d91a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d91e:	0964      	lsrs	r4, r4, #5
 801d920:	7034      	strb	r4, [r6, #0]
 801d922:	1d0c      	adds	r4, r1, #4
 801d924:	1b2c      	subs	r4, r5, r4
 801d926:	fab4 f484 	clz	r4, r4
 801d92a:	0964      	lsrs	r4, r4, #5
 801d92c:	f888 4000 	strb.w	r4, [r8]
 801d930:	f101 0408 	add.w	r4, r1, #8
 801d934:	1b1b      	subs	r3, r3, r4
 801d936:	9c06      	ldr	r4, [sp, #24]
 801d938:	fab3 f383 	clz	r3, r3
 801d93c:	095b      	lsrs	r3, r3, #5
 801d93e:	7023      	strb	r3, [r4, #0]
 801d940:	f101 0314 	add.w	r3, r1, #20
 801d944:	1ad3      	subs	r3, r2, r3
 801d946:	9a07      	ldr	r2, [sp, #28]
 801d948:	fab3 f383 	clz	r3, r3
 801d94c:	095b      	lsrs	r3, r3, #5
 801d94e:	7013      	strb	r3, [r2, #0]
 801d950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d954:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d958:	4770      	bx	lr
 801d95a:	200b      	movs	r0, #11
 801d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d960 <_execute_event_handler>:
 801d960:	2002      	movs	r0, #2
 801d962:	4770      	bx	lr

0801d964 <_cancel_goal_event_handler>:
 801d964:	2003      	movs	r0, #3
 801d966:	4770      	bx	lr

0801d968 <_succeed_event_handler>:
 801d968:	2004      	movs	r0, #4
 801d96a:	4770      	bx	lr

0801d96c <_abort_event_handler>:
 801d96c:	2006      	movs	r0, #6
 801d96e:	4770      	bx	lr

0801d970 <_canceled_event_handler>:
 801d970:	2005      	movs	r0, #5
 801d972:	4770      	bx	lr

0801d974 <rcl_action_transition_goal_state>:
 801d974:	b2c2      	uxtb	r2, r0
 801d976:	2a06      	cmp	r2, #6
 801d978:	d810      	bhi.n	801d99c <rcl_action_transition_goal_state+0x28>
 801d97a:	2904      	cmp	r1, #4
 801d97c:	d80e      	bhi.n	801d99c <rcl_action_transition_goal_state+0x28>
 801d97e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d982:	b410      	push	{r4}
 801d984:	1853      	adds	r3, r2, r1
 801d986:	4c06      	ldr	r4, [pc, #24]	; (801d9a0 <rcl_action_transition_goal_state+0x2c>)
 801d988:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d98c:	b113      	cbz	r3, 801d994 <rcl_action_transition_goal_state+0x20>
 801d98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d992:	4718      	bx	r3
 801d994:	2000      	movs	r0, #0
 801d996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d99a:	4770      	bx	lr
 801d99c:	2000      	movs	r0, #0
 801d99e:	4770      	bx	lr
 801d9a0:	08023214 	.word	0x08023214

0801d9a4 <rcl_action_get_zero_initialized_cancel_response>:
 801d9a4:	b510      	push	{r4, lr}
 801d9a6:	4c07      	ldr	r4, [pc, #28]	; (801d9c4 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d9a8:	4686      	mov	lr, r0
 801d9aa:	4684      	mov	ip, r0
 801d9ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d9ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d9b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d9b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d9b8:	6823      	ldr	r3, [r4, #0]
 801d9ba:	4670      	mov	r0, lr
 801d9bc:	f8cc 3000 	str.w	r3, [ip]
 801d9c0:	bd10      	pop	{r4, pc}
 801d9c2:	bf00      	nop
 801d9c4:	080232a0 	.word	0x080232a0

0801d9c8 <rclc_action_send_result_request>:
 801d9c8:	b1d0      	cbz	r0, 801da00 <rclc_action_send_result_request+0x38>
 801d9ca:	4684      	mov	ip, r0
 801d9cc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d9d0:	b500      	push	{lr}
 801d9d2:	b087      	sub	sp, #28
 801d9d4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d9d8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d9dc:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d9e0:	f10d 0e08 	add.w	lr, sp, #8
 801d9e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d9e8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d9ec:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d9f0:	a902      	add	r1, sp, #8
 801d9f2:	3010      	adds	r0, #16
 801d9f4:	f7ff fbcc 	bl	801d190 <rcl_action_send_result_request>
 801d9f8:	b920      	cbnz	r0, 801da04 <rclc_action_send_result_request+0x3c>
 801d9fa:	b007      	add	sp, #28
 801d9fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801da00:	200b      	movs	r0, #11
 801da02:	4770      	bx	lr
 801da04:	9001      	str	r0, [sp, #4]
 801da06:	f7f8 fb4f 	bl	80160a8 <rcutils_reset_error>
 801da0a:	9801      	ldr	r0, [sp, #4]
 801da0c:	b007      	add	sp, #28
 801da0e:	f85d fb04 	ldr.w	pc, [sp], #4
 801da12:	bf00      	nop

0801da14 <rclc_action_take_goal_handle>:
 801da14:	b160      	cbz	r0, 801da30 <rclc_action_take_goal_handle+0x1c>
 801da16:	6883      	ldr	r3, [r0, #8]
 801da18:	b143      	cbz	r3, 801da2c <rclc_action_take_goal_handle+0x18>
 801da1a:	6819      	ldr	r1, [r3, #0]
 801da1c:	2200      	movs	r2, #0
 801da1e:	6081      	str	r1, [r0, #8]
 801da20:	721a      	strb	r2, [r3, #8]
 801da22:	68c1      	ldr	r1, [r0, #12]
 801da24:	621a      	str	r2, [r3, #32]
 801da26:	849a      	strh	r2, [r3, #36]	; 0x24
 801da28:	6019      	str	r1, [r3, #0]
 801da2a:	60c3      	str	r3, [r0, #12]
 801da2c:	4618      	mov	r0, r3
 801da2e:	4770      	bx	lr
 801da30:	4603      	mov	r3, r0
 801da32:	e7fb      	b.n	801da2c <rclc_action_take_goal_handle+0x18>

0801da34 <rclc_action_remove_used_goal_handle>:
 801da34:	b180      	cbz	r0, 801da58 <rclc_action_remove_used_goal_handle+0x24>
 801da36:	b179      	cbz	r1, 801da58 <rclc_action_remove_used_goal_handle+0x24>
 801da38:	68c3      	ldr	r3, [r0, #12]
 801da3a:	4299      	cmp	r1, r3
 801da3c:	d00d      	beq.n	801da5a <rclc_action_remove_used_goal_handle+0x26>
 801da3e:	b12b      	cbz	r3, 801da4c <rclc_action_remove_used_goal_handle+0x18>
 801da40:	681a      	ldr	r2, [r3, #0]
 801da42:	4291      	cmp	r1, r2
 801da44:	d003      	beq.n	801da4e <rclc_action_remove_used_goal_handle+0x1a>
 801da46:	4613      	mov	r3, r2
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d1f9      	bne.n	801da40 <rclc_action_remove_used_goal_handle+0xc>
 801da4c:	4770      	bx	lr
 801da4e:	680a      	ldr	r2, [r1, #0]
 801da50:	601a      	str	r2, [r3, #0]
 801da52:	6883      	ldr	r3, [r0, #8]
 801da54:	600b      	str	r3, [r1, #0]
 801da56:	6081      	str	r1, [r0, #8]
 801da58:	4770      	bx	lr
 801da5a:	680b      	ldr	r3, [r1, #0]
 801da5c:	60c3      	str	r3, [r0, #12]
 801da5e:	e7f8      	b.n	801da52 <rclc_action_remove_used_goal_handle+0x1e>

0801da60 <rclc_action_find_goal_handle_by_uuid>:
 801da60:	b538      	push	{r3, r4, r5, lr}
 801da62:	b181      	cbz	r1, 801da86 <rclc_action_find_goal_handle_by_uuid+0x26>
 801da64:	b178      	cbz	r0, 801da86 <rclc_action_find_goal_handle_by_uuid+0x26>
 801da66:	68c4      	ldr	r4, [r0, #12]
 801da68:	460d      	mov	r5, r1
 801da6a:	b914      	cbnz	r4, 801da72 <rclc_action_find_goal_handle_by_uuid+0x12>
 801da6c:	e009      	b.n	801da82 <rclc_action_find_goal_handle_by_uuid+0x22>
 801da6e:	6824      	ldr	r4, [r4, #0]
 801da70:	b13c      	cbz	r4, 801da82 <rclc_action_find_goal_handle_by_uuid+0x22>
 801da72:	f104 0009 	add.w	r0, r4, #9
 801da76:	2210      	movs	r2, #16
 801da78:	4629      	mov	r1, r5
 801da7a:	f003 fa9b 	bl	8020fb4 <memcmp>
 801da7e:	2800      	cmp	r0, #0
 801da80:	d1f5      	bne.n	801da6e <rclc_action_find_goal_handle_by_uuid+0xe>
 801da82:	4620      	mov	r0, r4
 801da84:	bd38      	pop	{r3, r4, r5, pc}
 801da86:	2400      	movs	r4, #0
 801da88:	4620      	mov	r0, r4
 801da8a:	bd38      	pop	{r3, r4, r5, pc}

0801da8c <rclc_action_find_first_handle_by_status>:
 801da8c:	b140      	cbz	r0, 801daa0 <rclc_action_find_first_handle_by_status+0x14>
 801da8e:	68c0      	ldr	r0, [r0, #12]
 801da90:	b910      	cbnz	r0, 801da98 <rclc_action_find_first_handle_by_status+0xc>
 801da92:	e005      	b.n	801daa0 <rclc_action_find_first_handle_by_status+0x14>
 801da94:	6800      	ldr	r0, [r0, #0]
 801da96:	b118      	cbz	r0, 801daa0 <rclc_action_find_first_handle_by_status+0x14>
 801da98:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801da9c:	428b      	cmp	r3, r1
 801da9e:	d1f9      	bne.n	801da94 <rclc_action_find_first_handle_by_status+0x8>
 801daa0:	4770      	bx	lr
 801daa2:	bf00      	nop

0801daa4 <rclc_action_find_first_terminated_handle>:
 801daa4:	b140      	cbz	r0, 801dab8 <rclc_action_find_first_terminated_handle+0x14>
 801daa6:	68c0      	ldr	r0, [r0, #12]
 801daa8:	b910      	cbnz	r0, 801dab0 <rclc_action_find_first_terminated_handle+0xc>
 801daaa:	e005      	b.n	801dab8 <rclc_action_find_first_terminated_handle+0x14>
 801daac:	6800      	ldr	r0, [r0, #0]
 801daae:	b118      	cbz	r0, 801dab8 <rclc_action_find_first_terminated_handle+0x14>
 801dab0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801dab4:	2b03      	cmp	r3, #3
 801dab6:	ddf9      	ble.n	801daac <rclc_action_find_first_terminated_handle+0x8>
 801dab8:	4770      	bx	lr
 801daba:	bf00      	nop

0801dabc <rclc_action_find_handle_by_goal_request_sequence_number>:
 801dabc:	b170      	cbz	r0, 801dadc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801dabe:	68c0      	ldr	r0, [r0, #12]
 801dac0:	b160      	cbz	r0, 801dadc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801dac2:	b410      	push	{r4}
 801dac4:	e001      	b.n	801daca <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801dac6:	6800      	ldr	r0, [r0, #0]
 801dac8:	b128      	cbz	r0, 801dad6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801daca:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801dace:	4299      	cmp	r1, r3
 801dad0:	bf08      	it	eq
 801dad2:	4294      	cmpeq	r4, r2
 801dad4:	d1f7      	bne.n	801dac6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801dad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dada:	4770      	bx	lr
 801dadc:	4770      	bx	lr
 801dade:	bf00      	nop

0801dae0 <rclc_action_find_handle_by_result_request_sequence_number>:
 801dae0:	b170      	cbz	r0, 801db00 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801dae2:	68c0      	ldr	r0, [r0, #12]
 801dae4:	b160      	cbz	r0, 801db00 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801dae6:	b410      	push	{r4}
 801dae8:	e001      	b.n	801daee <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801daea:	6800      	ldr	r0, [r0, #0]
 801daec:	b128      	cbz	r0, 801dafa <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801daee:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801daf2:	4299      	cmp	r1, r3
 801daf4:	bf08      	it	eq
 801daf6:	4294      	cmpeq	r4, r2
 801daf8:	d1f7      	bne.n	801daea <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801dafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dafe:	4770      	bx	lr
 801db00:	4770      	bx	lr
 801db02:	bf00      	nop

0801db04 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801db04:	b170      	cbz	r0, 801db24 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801db06:	68c0      	ldr	r0, [r0, #12]
 801db08:	b160      	cbz	r0, 801db24 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801db0a:	b410      	push	{r4}
 801db0c:	e001      	b.n	801db12 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801db0e:	6800      	ldr	r0, [r0, #0]
 801db10:	b128      	cbz	r0, 801db1e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801db12:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801db16:	4299      	cmp	r1, r3
 801db18:	bf08      	it	eq
 801db1a:	4294      	cmpeq	r4, r2
 801db1c:	d1f7      	bne.n	801db0e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801db1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db22:	4770      	bx	lr
 801db24:	4770      	bx	lr
 801db26:	bf00      	nop

0801db28 <rclc_action_find_first_handle_with_goal_response>:
 801db28:	b140      	cbz	r0, 801db3c <rclc_action_find_first_handle_with_goal_response+0x14>
 801db2a:	68c0      	ldr	r0, [r0, #12]
 801db2c:	b910      	cbnz	r0, 801db34 <rclc_action_find_first_handle_with_goal_response+0xc>
 801db2e:	e005      	b.n	801db3c <rclc_action_find_first_handle_with_goal_response+0x14>
 801db30:	6800      	ldr	r0, [r0, #0]
 801db32:	b118      	cbz	r0, 801db3c <rclc_action_find_first_handle_with_goal_response+0x14>
 801db34:	f890 3020 	ldrb.w	r3, [r0, #32]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d0f9      	beq.n	801db30 <rclc_action_find_first_handle_with_goal_response+0x8>
 801db3c:	4770      	bx	lr
 801db3e:	bf00      	nop

0801db40 <rclc_action_find_first_handle_with_result_response>:
 801db40:	b140      	cbz	r0, 801db54 <rclc_action_find_first_handle_with_result_response+0x14>
 801db42:	68c0      	ldr	r0, [r0, #12]
 801db44:	b910      	cbnz	r0, 801db4c <rclc_action_find_first_handle_with_result_response+0xc>
 801db46:	e005      	b.n	801db54 <rclc_action_find_first_handle_with_result_response+0x14>
 801db48:	6800      	ldr	r0, [r0, #0]
 801db4a:	b118      	cbz	r0, 801db54 <rclc_action_find_first_handle_with_result_response+0x14>
 801db4c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801db50:	2b00      	cmp	r3, #0
 801db52:	d0f9      	beq.n	801db48 <rclc_action_find_first_handle_with_result_response+0x8>
 801db54:	4770      	bx	lr
 801db56:	bf00      	nop

0801db58 <rclc_action_server_response_goal_request>:
 801db58:	b198      	cbz	r0, 801db82 <rclc_action_server_response_goal_request+0x2a>
 801db5a:	2200      	movs	r2, #0
 801db5c:	460b      	mov	r3, r1
 801db5e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801db62:	b510      	push	{r4, lr}
 801db64:	6844      	ldr	r4, [r0, #4]
 801db66:	b086      	sub	sp, #24
 801db68:	f104 0010 	add.w	r0, r4, #16
 801db6c:	9205      	str	r2, [sp, #20]
 801db6e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801db72:	aa03      	add	r2, sp, #12
 801db74:	f88d 300c 	strb.w	r3, [sp, #12]
 801db78:	f7ff fd40 	bl	801d5fc <rcl_action_send_goal_response>
 801db7c:	b918      	cbnz	r0, 801db86 <rclc_action_server_response_goal_request+0x2e>
 801db7e:	b006      	add	sp, #24
 801db80:	bd10      	pop	{r4, pc}
 801db82:	200b      	movs	r0, #11
 801db84:	4770      	bx	lr
 801db86:	9001      	str	r0, [sp, #4]
 801db88:	f7f8 fa8e 	bl	80160a8 <rcutils_reset_error>
 801db8c:	9801      	ldr	r0, [sp, #4]
 801db8e:	b006      	add	sp, #24
 801db90:	bd10      	pop	{r4, pc}
 801db92:	bf00      	nop
 801db94:	0000      	movs	r0, r0
	...

0801db98 <rclc_action_server_goal_cancel_accept>:
 801db98:	b310      	cbz	r0, 801dbe0 <rclc_action_server_goal_cancel_accept+0x48>
 801db9a:	b510      	push	{r4, lr}
 801db9c:	b090      	sub	sp, #64	; 0x40
 801db9e:	4604      	mov	r4, r0
 801dba0:	a806      	add	r0, sp, #24
 801dba2:	f7ff feff 	bl	801d9a4 <rcl_action_get_zero_initialized_cancel_response>
 801dba6:	2300      	movs	r3, #0
 801dba8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801dbac:	46ec      	mov	ip, sp
 801dbae:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801dbb2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801dbb6:	f88d 3018 	strb.w	r3, [sp, #24]
 801dbba:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801dbbe:	f8cd d01c 	str.w	sp, [sp, #28]
 801dbc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dbc6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801dbe8 <rclc_action_server_goal_cancel_accept+0x50>
 801dbca:	6860      	ldr	r0, [r4, #4]
 801dbcc:	aa06      	add	r2, sp, #24
 801dbce:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801dbd2:	3010      	adds	r0, #16
 801dbd4:	ed8d 7b08 	vstr	d7, [sp, #32]
 801dbd8:	f7ff fdc6 	bl	801d768 <rcl_action_send_cancel_response>
 801dbdc:	b010      	add	sp, #64	; 0x40
 801dbde:	bd10      	pop	{r4, pc}
 801dbe0:	200b      	movs	r0, #11
 801dbe2:	4770      	bx	lr
 801dbe4:	f3af 8000 	nop.w
 801dbe8:	00000001 	.word	0x00000001
 801dbec:	00000001 	.word	0x00000001

0801dbf0 <rclc_action_server_goal_cancel_reject>:
 801dbf0:	b082      	sub	sp, #8
 801dbf2:	b530      	push	{r4, r5, lr}
 801dbf4:	b08b      	sub	sp, #44	; 0x2c
 801dbf6:	ac0e      	add	r4, sp, #56	; 0x38
 801dbf8:	e884 000c 	stmia.w	r4, {r2, r3}
 801dbfc:	b188      	cbz	r0, 801dc22 <rclc_action_server_goal_cancel_reject+0x32>
 801dbfe:	4604      	mov	r4, r0
 801dc00:	a801      	add	r0, sp, #4
 801dc02:	460d      	mov	r5, r1
 801dc04:	f7ff fece 	bl	801d9a4 <rcl_action_get_zero_initialized_cancel_response>
 801dc08:	aa01      	add	r2, sp, #4
 801dc0a:	a90e      	add	r1, sp, #56	; 0x38
 801dc0c:	f104 0010 	add.w	r0, r4, #16
 801dc10:	f88d 5004 	strb.w	r5, [sp, #4]
 801dc14:	f7ff fda8 	bl	801d768 <rcl_action_send_cancel_response>
 801dc18:	b00b      	add	sp, #44	; 0x2c
 801dc1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dc1e:	b002      	add	sp, #8
 801dc20:	4770      	bx	lr
 801dc22:	200b      	movs	r0, #11
 801dc24:	b00b      	add	sp, #44	; 0x2c
 801dc26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dc2a:	b002      	add	sp, #8
 801dc2c:	4770      	bx	lr
 801dc2e:	bf00      	nop

0801dc30 <__atomic_load_8>:
 801dc30:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801dc34:	4a16      	ldr	r2, [pc, #88]	; (801dc90 <__atomic_load_8+0x60>)
 801dc36:	4b17      	ldr	r3, [pc, #92]	; (801dc94 <__atomic_load_8+0x64>)
 801dc38:	f04f 0c01 	mov.w	ip, #1
 801dc3c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801dc40:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801dc44:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801dc48:	fb02 f101 	mul.w	r1, r2, r1
 801dc4c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801dc50:	fba3 2301 	umull	r2, r3, r3, r1
 801dc54:	091b      	lsrs	r3, r3, #4
 801dc56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dc5a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801dc5e:	b4d0      	push	{r4, r6, r7}
 801dc60:	1ac9      	subs	r1, r1, r3
 801dc62:	4c0d      	ldr	r4, [pc, #52]	; (801dc98 <__atomic_load_8+0x68>)
 801dc64:	1862      	adds	r2, r4, r1
 801dc66:	e8d2 3f4f 	ldrexb	r3, [r2]
 801dc6a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801dc6e:	2e00      	cmp	r6, #0
 801dc70:	d1f9      	bne.n	801dc66 <__atomic_load_8+0x36>
 801dc72:	b2db      	uxtb	r3, r3
 801dc74:	f3bf 8f5b 	dmb	ish
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d1f4      	bne.n	801dc66 <__atomic_load_8+0x36>
 801dc7c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801dc80:	f3bf 8f5b 	dmb	ish
 801dc84:	5463      	strb	r3, [r4, r1]
 801dc86:	4630      	mov	r0, r6
 801dc88:	4639      	mov	r1, r7
 801dc8a:	bcd0      	pop	{r4, r6, r7}
 801dc8c:	4770      	bx	lr
 801dc8e:	bf00      	nop
 801dc90:	27d4eb2d 	.word	0x27d4eb2d
 801dc94:	b21642c9 	.word	0xb21642c9
 801dc98:	200178c8 	.word	0x200178c8

0801dc9c <__atomic_store_8>:
 801dc9c:	b570      	push	{r4, r5, r6, lr}
 801dc9e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dca2:	4916      	ldr	r1, [pc, #88]	; (801dcfc <__atomic_store_8+0x60>)
 801dca4:	4c16      	ldr	r4, [pc, #88]	; (801dd00 <__atomic_store_8+0x64>)
 801dca6:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801dcaa:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dcae:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dcb2:	fb01 fe0e 	mul.w	lr, r1, lr
 801dcb6:	4913      	ldr	r1, [pc, #76]	; (801dd04 <__atomic_store_8+0x68>)
 801dcb8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dcbc:	fba1 510e 	umull	r5, r1, r1, lr
 801dcc0:	f04f 0501 	mov.w	r5, #1
 801dcc4:	0909      	lsrs	r1, r1, #4
 801dcc6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dcca:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dcce:	ebae 0e01 	sub.w	lr, lr, r1
 801dcd2:	eb04 0c0e 	add.w	ip, r4, lr
 801dcd6:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dcda:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dcde:	2e00      	cmp	r6, #0
 801dce0:	d1f9      	bne.n	801dcd6 <__atomic_store_8+0x3a>
 801dce2:	b2c9      	uxtb	r1, r1
 801dce4:	f3bf 8f5b 	dmb	ish
 801dce8:	2900      	cmp	r1, #0
 801dcea:	d1f4      	bne.n	801dcd6 <__atomic_store_8+0x3a>
 801dcec:	e9c0 2300 	strd	r2, r3, [r0]
 801dcf0:	f3bf 8f5b 	dmb	ish
 801dcf4:	f804 100e 	strb.w	r1, [r4, lr]
 801dcf8:	bd70      	pop	{r4, r5, r6, pc}
 801dcfa:	bf00      	nop
 801dcfc:	27d4eb2d 	.word	0x27d4eb2d
 801dd00:	200178c8 	.word	0x200178c8
 801dd04:	b21642c9 	.word	0xb21642c9

0801dd08 <__atomic_exchange_8>:
 801dd08:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dd0c:	4917      	ldr	r1, [pc, #92]	; (801dd6c <__atomic_exchange_8+0x64>)
 801dd0e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801dd12:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dd16:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dd1a:	fb01 fc0c 	mul.w	ip, r1, ip
 801dd1e:	4914      	ldr	r1, [pc, #80]	; (801dd70 <__atomic_exchange_8+0x68>)
 801dd20:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dd24:	b570      	push	{r4, r5, r6, lr}
 801dd26:	4686      	mov	lr, r0
 801dd28:	fba1 010c 	umull	r0, r1, r1, ip
 801dd2c:	4d11      	ldr	r5, [pc, #68]	; (801dd74 <__atomic_exchange_8+0x6c>)
 801dd2e:	f04f 0001 	mov.w	r0, #1
 801dd32:	0909      	lsrs	r1, r1, #4
 801dd34:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dd38:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dd3c:	ebac 0c01 	sub.w	ip, ip, r1
 801dd40:	eb05 010c 	add.w	r1, r5, ip
 801dd44:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dd48:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dd4c:	2e00      	cmp	r6, #0
 801dd4e:	d1f9      	bne.n	801dd44 <__atomic_exchange_8+0x3c>
 801dd50:	b2e4      	uxtb	r4, r4
 801dd52:	f3bf 8f5b 	dmb	ish
 801dd56:	2c00      	cmp	r4, #0
 801dd58:	d1f4      	bne.n	801dd44 <__atomic_exchange_8+0x3c>
 801dd5a:	e9de 0100 	ldrd	r0, r1, [lr]
 801dd5e:	e9ce 2300 	strd	r2, r3, [lr]
 801dd62:	f3bf 8f5b 	dmb	ish
 801dd66:	f805 400c 	strb.w	r4, [r5, ip]
 801dd6a:	bd70      	pop	{r4, r5, r6, pc}
 801dd6c:	27d4eb2d 	.word	0x27d4eb2d
 801dd70:	b21642c9 	.word	0xb21642c9
 801dd74:	200178c8 	.word	0x200178c8

0801dd78 <rcutils_is_directory>:
 801dd78:	2000      	movs	r0, #0
 801dd7a:	4770      	bx	lr

0801dd7c <rcutils_join_path>:
 801dd7c:	b082      	sub	sp, #8
 801dd7e:	2000      	movs	r0, #0
 801dd80:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dd84:	b002      	add	sp, #8
 801dd86:	4770      	bx	lr

0801dd88 <rcutils_to_native_path>:
 801dd88:	b084      	sub	sp, #16
 801dd8a:	2000      	movs	r0, #0
 801dd8c:	f10d 0c04 	add.w	ip, sp, #4
 801dd90:	b004      	add	sp, #16
 801dd92:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dd96:	4770      	bx	lr

0801dd98 <rcutils_string_array_fini>:
 801dd98:	b328      	cbz	r0, 801dde6 <rcutils_string_array_fini+0x4e>
 801dd9a:	b570      	push	{r4, r5, r6, lr}
 801dd9c:	4604      	mov	r4, r0
 801dd9e:	6840      	ldr	r0, [r0, #4]
 801dda0:	b1e0      	cbz	r0, 801dddc <rcutils_string_array_fini+0x44>
 801dda2:	f104 0008 	add.w	r0, r4, #8
 801dda6:	f7f8 f941 	bl	801602c <rcutils_allocator_is_valid>
 801ddaa:	b1c0      	cbz	r0, 801ddde <rcutils_string_array_fini+0x46>
 801ddac:	6823      	ldr	r3, [r4, #0]
 801ddae:	b1c3      	cbz	r3, 801dde2 <rcutils_string_array_fini+0x4a>
 801ddb0:	2500      	movs	r5, #0
 801ddb2:	6860      	ldr	r0, [r4, #4]
 801ddb4:	462e      	mov	r6, r5
 801ddb6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ddba:	68e3      	ldr	r3, [r4, #12]
 801ddbc:	69a1      	ldr	r1, [r4, #24]
 801ddbe:	4798      	blx	r3
 801ddc0:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ddc4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801ddc8:	3501      	adds	r5, #1
 801ddca:	429d      	cmp	r5, r3
 801ddcc:	d3f3      	bcc.n	801ddb6 <rcutils_string_array_fini+0x1e>
 801ddce:	68e3      	ldr	r3, [r4, #12]
 801ddd0:	69a1      	ldr	r1, [r4, #24]
 801ddd2:	4798      	blx	r3
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	e9c4 3300 	strd	r3, r3, [r4]
 801dddc:	bd70      	pop	{r4, r5, r6, pc}
 801ddde:	200b      	movs	r0, #11
 801dde0:	bd70      	pop	{r4, r5, r6, pc}
 801dde2:	6860      	ldr	r0, [r4, #4]
 801dde4:	e7f3      	b.n	801ddce <rcutils_string_array_fini+0x36>
 801dde6:	200b      	movs	r0, #11
 801dde8:	4770      	bx	lr
 801ddea:	bf00      	nop

0801ddec <rcutils_get_zero_initialized_string_map>:
 801ddec:	2000      	movs	r0, #0
 801ddee:	4b01      	ldr	r3, [pc, #4]	; (801ddf4 <rcutils_get_zero_initialized_string_map+0x8>)
 801ddf0:	6018      	str	r0, [r3, #0]
 801ddf2:	4770      	bx	lr
 801ddf4:	200178e0 	.word	0x200178e0

0801ddf8 <rcutils_string_map_reserve>:
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	d05e      	beq.n	801deba <rcutils_string_map_reserve+0xc2>
 801ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de00:	460c      	mov	r4, r1
 801de02:	6801      	ldr	r1, [r0, #0]
 801de04:	b082      	sub	sp, #8
 801de06:	4605      	mov	r5, r0
 801de08:	b129      	cbz	r1, 801de16 <rcutils_string_map_reserve+0x1e>
 801de0a:	68cb      	ldr	r3, [r1, #12]
 801de0c:	42a3      	cmp	r3, r4
 801de0e:	d906      	bls.n	801de1e <rcutils_string_map_reserve+0x26>
 801de10:	461c      	mov	r4, r3
 801de12:	2900      	cmp	r1, #0
 801de14:	d1f9      	bne.n	801de0a <rcutils_string_map_reserve+0x12>
 801de16:	201f      	movs	r0, #31
 801de18:	b002      	add	sp, #8
 801de1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de1e:	688b      	ldr	r3, [r1, #8]
 801de20:	42a3      	cmp	r3, r4
 801de22:	d046      	beq.n	801deb2 <rcutils_string_map_reserve+0xba>
 801de24:	6a0e      	ldr	r6, [r1, #32]
 801de26:	2c00      	cmp	r4, #0
 801de28:	d033      	beq.n	801de92 <rcutils_string_map_reserve+0x9a>
 801de2a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801de2e:	d242      	bcs.n	801deb6 <rcutils_string_map_reserve+0xbe>
 801de30:	00a7      	lsls	r7, r4, #2
 801de32:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801de36:	6808      	ldr	r0, [r1, #0]
 801de38:	4632      	mov	r2, r6
 801de3a:	4639      	mov	r1, r7
 801de3c:	47c0      	blx	r8
 801de3e:	2800      	cmp	r0, #0
 801de40:	d039      	beq.n	801deb6 <rcutils_string_map_reserve+0xbe>
 801de42:	682b      	ldr	r3, [r5, #0]
 801de44:	4632      	mov	r2, r6
 801de46:	4639      	mov	r1, r7
 801de48:	6018      	str	r0, [r3, #0]
 801de4a:	6858      	ldr	r0, [r3, #4]
 801de4c:	47c0      	blx	r8
 801de4e:	2800      	cmp	r0, #0
 801de50:	d031      	beq.n	801deb6 <rcutils_string_map_reserve+0xbe>
 801de52:	682d      	ldr	r5, [r5, #0]
 801de54:	68ab      	ldr	r3, [r5, #8]
 801de56:	6068      	str	r0, [r5, #4]
 801de58:	42a3      	cmp	r3, r4
 801de5a:	d225      	bcs.n	801dea8 <rcutils_string_map_reserve+0xb0>
 801de5c:	682a      	ldr	r2, [r5, #0]
 801de5e:	eb00 0c07 	add.w	ip, r0, r7
 801de62:	0099      	lsls	r1, r3, #2
 801de64:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801de68:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801de6c:	45e6      	cmp	lr, ip
 801de6e:	d203      	bcs.n	801de78 <rcutils_string_map_reserve+0x80>
 801de70:	eb02 0c07 	add.w	ip, r2, r7
 801de74:	4566      	cmp	r6, ip
 801de76:	d322      	bcc.n	801debe <rcutils_string_map_reserve+0xc6>
 801de78:	1ae3      	subs	r3, r4, r3
 801de7a:	4670      	mov	r0, lr
 801de7c:	2100      	movs	r1, #0
 801de7e:	009a      	lsls	r2, r3, #2
 801de80:	9201      	str	r2, [sp, #4]
 801de82:	f003 f8c1 	bl	8021008 <memset>
 801de86:	9a01      	ldr	r2, [sp, #4]
 801de88:	2100      	movs	r1, #0
 801de8a:	4630      	mov	r0, r6
 801de8c:	f003 f8bc 	bl	8021008 <memset>
 801de90:	e00a      	b.n	801dea8 <rcutils_string_map_reserve+0xb0>
 801de92:	694f      	ldr	r7, [r1, #20]
 801de94:	6808      	ldr	r0, [r1, #0]
 801de96:	4631      	mov	r1, r6
 801de98:	47b8      	blx	r7
 801de9a:	682b      	ldr	r3, [r5, #0]
 801de9c:	4631      	mov	r1, r6
 801de9e:	6858      	ldr	r0, [r3, #4]
 801dea0:	601c      	str	r4, [r3, #0]
 801dea2:	47b8      	blx	r7
 801dea4:	682d      	ldr	r5, [r5, #0]
 801dea6:	606c      	str	r4, [r5, #4]
 801dea8:	2000      	movs	r0, #0
 801deaa:	60ac      	str	r4, [r5, #8]
 801deac:	b002      	add	sp, #8
 801deae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801deb2:	2000      	movs	r0, #0
 801deb4:	e7b0      	b.n	801de18 <rcutils_string_map_reserve+0x20>
 801deb6:	200a      	movs	r0, #10
 801deb8:	e7ae      	b.n	801de18 <rcutils_string_map_reserve+0x20>
 801deba:	200b      	movs	r0, #11
 801debc:	4770      	bx	lr
 801debe:	1f0b      	subs	r3, r1, #4
 801dec0:	4418      	add	r0, r3
 801dec2:	4413      	add	r3, r2
 801dec4:	3a04      	subs	r2, #4
 801dec6:	4417      	add	r7, r2
 801dec8:	2200      	movs	r2, #0
 801deca:	f843 2f04 	str.w	r2, [r3, #4]!
 801dece:	42bb      	cmp	r3, r7
 801ded0:	f840 2f04 	str.w	r2, [r0, #4]!
 801ded4:	d1f9      	bne.n	801deca <rcutils_string_map_reserve+0xd2>
 801ded6:	e7e7      	b.n	801dea8 <rcutils_string_map_reserve+0xb0>

0801ded8 <rcutils_string_map_init>:
 801ded8:	b082      	sub	sp, #8
 801deda:	b570      	push	{r4, r5, r6, lr}
 801dedc:	ac04      	add	r4, sp, #16
 801dede:	e884 000c 	stmia.w	r4, {r2, r3}
 801dee2:	b380      	cbz	r0, 801df46 <rcutils_string_map_init+0x6e>
 801dee4:	6806      	ldr	r6, [r0, #0]
 801dee6:	4604      	mov	r4, r0
 801dee8:	b12e      	cbz	r6, 801def6 <rcutils_string_map_init+0x1e>
 801deea:	251e      	movs	r5, #30
 801deec:	4628      	mov	r0, r5
 801deee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801def2:	b002      	add	sp, #8
 801def4:	4770      	bx	lr
 801def6:	a804      	add	r0, sp, #16
 801def8:	460d      	mov	r5, r1
 801defa:	f7f8 f897 	bl	801602c <rcutils_allocator_is_valid>
 801defe:	b310      	cbz	r0, 801df46 <rcutils_string_map_init+0x6e>
 801df00:	9b04      	ldr	r3, [sp, #16]
 801df02:	2024      	movs	r0, #36	; 0x24
 801df04:	9908      	ldr	r1, [sp, #32]
 801df06:	4798      	blx	r3
 801df08:	6020      	str	r0, [r4, #0]
 801df0a:	b310      	cbz	r0, 801df52 <rcutils_string_map_init+0x7a>
 801df0c:	f10d 0e10 	add.w	lr, sp, #16
 801df10:	f100 0c10 	add.w	ip, r0, #16
 801df14:	e9c0 6600 	strd	r6, r6, [r0]
 801df18:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801df1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801df20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801df24:	f8de 3000 	ldr.w	r3, [lr]
 801df28:	4629      	mov	r1, r5
 801df2a:	4620      	mov	r0, r4
 801df2c:	f8cc 3000 	str.w	r3, [ip]
 801df30:	f7ff ff62 	bl	801ddf8 <rcutils_string_map_reserve>
 801df34:	4605      	mov	r5, r0
 801df36:	2800      	cmp	r0, #0
 801df38:	d0d8      	beq.n	801deec <rcutils_string_map_init+0x14>
 801df3a:	9b05      	ldr	r3, [sp, #20]
 801df3c:	9908      	ldr	r1, [sp, #32]
 801df3e:	6820      	ldr	r0, [r4, #0]
 801df40:	4798      	blx	r3
 801df42:	6026      	str	r6, [r4, #0]
 801df44:	e7d2      	b.n	801deec <rcutils_string_map_init+0x14>
 801df46:	250b      	movs	r5, #11
 801df48:	4628      	mov	r0, r5
 801df4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df4e:	b002      	add	sp, #8
 801df50:	4770      	bx	lr
 801df52:	250a      	movs	r5, #10
 801df54:	e7ca      	b.n	801deec <rcutils_string_map_init+0x14>
 801df56:	bf00      	nop

0801df58 <rcutils_string_map_fini>:
 801df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df5c:	b082      	sub	sp, #8
 801df5e:	2800      	cmp	r0, #0
 801df60:	d03a      	beq.n	801dfd8 <rcutils_string_map_fini+0x80>
 801df62:	6804      	ldr	r4, [r0, #0]
 801df64:	4606      	mov	r6, r0
 801df66:	2c00      	cmp	r4, #0
 801df68:	d032      	beq.n	801dfd0 <rcutils_string_map_fini+0x78>
 801df6a:	68a3      	ldr	r3, [r4, #8]
 801df6c:	b32b      	cbz	r3, 801dfba <rcutils_string_map_fini+0x62>
 801df6e:	2500      	movs	r5, #0
 801df70:	6822      	ldr	r2, [r4, #0]
 801df72:	462f      	mov	r7, r5
 801df74:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801df78:	b1e0      	cbz	r0, 801dfb4 <rcutils_string_map_fini+0x5c>
 801df7a:	6a21      	ldr	r1, [r4, #32]
 801df7c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801df80:	9101      	str	r1, [sp, #4]
 801df82:	47c0      	blx	r8
 801df84:	9901      	ldr	r1, [sp, #4]
 801df86:	e9d4 3200 	ldrd	r3, r2, [r4]
 801df8a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801df8e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801df92:	47c0      	blx	r8
 801df94:	68e3      	ldr	r3, [r4, #12]
 801df96:	6862      	ldr	r2, [r4, #4]
 801df98:	3b01      	subs	r3, #1
 801df9a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801df9e:	3501      	adds	r5, #1
 801dfa0:	60e3      	str	r3, [r4, #12]
 801dfa2:	6834      	ldr	r4, [r6, #0]
 801dfa4:	68a3      	ldr	r3, [r4, #8]
 801dfa6:	429d      	cmp	r5, r3
 801dfa8:	d207      	bcs.n	801dfba <rcutils_string_map_fini+0x62>
 801dfaa:	6822      	ldr	r2, [r4, #0]
 801dfac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dfb0:	2800      	cmp	r0, #0
 801dfb2:	d1e2      	bne.n	801df7a <rcutils_string_map_fini+0x22>
 801dfb4:	3501      	adds	r5, #1
 801dfb6:	429d      	cmp	r5, r3
 801dfb8:	d3dc      	bcc.n	801df74 <rcutils_string_map_fini+0x1c>
 801dfba:	2100      	movs	r1, #0
 801dfbc:	4630      	mov	r0, r6
 801dfbe:	f7ff ff1b 	bl	801ddf8 <rcutils_string_map_reserve>
 801dfc2:	4604      	mov	r4, r0
 801dfc4:	b920      	cbnz	r0, 801dfd0 <rcutils_string_map_fini+0x78>
 801dfc6:	6830      	ldr	r0, [r6, #0]
 801dfc8:	6943      	ldr	r3, [r0, #20]
 801dfca:	6a01      	ldr	r1, [r0, #32]
 801dfcc:	4798      	blx	r3
 801dfce:	6034      	str	r4, [r6, #0]
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	b002      	add	sp, #8
 801dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfd8:	240b      	movs	r4, #11
 801dfda:	4620      	mov	r0, r4
 801dfdc:	b002      	add	sp, #8
 801dfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfe2:	bf00      	nop

0801dfe4 <rcutils_string_map_getn>:
 801dfe4:	b378      	cbz	r0, 801e046 <rcutils_string_map_getn+0x62>
 801dfe6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfea:	f8d0 b000 	ldr.w	fp, [r0]
 801dfee:	f1bb 0f00 	cmp.w	fp, #0
 801dff2:	d01f      	beq.n	801e034 <rcutils_string_map_getn+0x50>
 801dff4:	fab1 f481 	clz	r4, r1
 801dff8:	4688      	mov	r8, r1
 801dffa:	0964      	lsrs	r4, r4, #5
 801dffc:	b1d1      	cbz	r1, 801e034 <rcutils_string_map_getn+0x50>
 801dffe:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e002:	f8db 6000 	ldr.w	r6, [fp]
 801e006:	b1af      	cbz	r7, 801e034 <rcutils_string_map_getn+0x50>
 801e008:	4691      	mov	r9, r2
 801e00a:	3e04      	subs	r6, #4
 801e00c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e010:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e014:	3401      	adds	r4, #1
 801e016:	4628      	mov	r0, r5
 801e018:	b155      	cbz	r5, 801e030 <rcutils_string_map_getn+0x4c>
 801e01a:	f7e2 f91b 	bl	8000254 <strlen>
 801e01e:	4602      	mov	r2, r0
 801e020:	4629      	mov	r1, r5
 801e022:	4640      	mov	r0, r8
 801e024:	454a      	cmp	r2, r9
 801e026:	bf38      	it	cc
 801e028:	464a      	movcc	r2, r9
 801e02a:	f003 f802 	bl	8021032 <strncmp>
 801e02e:	b120      	cbz	r0, 801e03a <rcutils_string_map_getn+0x56>
 801e030:	42a7      	cmp	r7, r4
 801e032:	d1eb      	bne.n	801e00c <rcutils_string_map_getn+0x28>
 801e034:	2000      	movs	r0, #0
 801e036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e03a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e03e:	f853 000a 	ldr.w	r0, [r3, sl]
 801e042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e046:	4770      	bx	lr

0801e048 <rmw_get_zero_initialized_context>:
 801e048:	b510      	push	{r4, lr}
 801e04a:	4604      	mov	r4, r0
 801e04c:	3010      	adds	r0, #16
 801e04e:	f7f8 fa0b 	bl	8016468 <rmw_get_zero_initialized_init_options>
 801e052:	2300      	movs	r3, #0
 801e054:	4620      	mov	r0, r4
 801e056:	60a3      	str	r3, [r4, #8]
 801e058:	64a3      	str	r3, [r4, #72]	; 0x48
 801e05a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801e05c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801e068 <rmw_get_zero_initialized_context+0x20>
 801e060:	ed84 7b00 	vstr	d7, [r4]
 801e064:	bd10      	pop	{r4, pc}
 801e066:	bf00      	nop
	...

0801e070 <rmw_time_equal>:
 801e070:	b4f0      	push	{r4, r5, r6, r7}
 801e072:	b084      	sub	sp, #16
 801e074:	ac04      	add	r4, sp, #16
 801e076:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e07a:	4603      	mov	r3, r0
 801e07c:	4925      	ldr	r1, [pc, #148]	; (801e114 <rmw_time_equal+0xa4>)
 801e07e:	9d01      	ldr	r5, [sp, #4]
 801e080:	4610      	mov	r0, r2
 801e082:	4299      	cmp	r1, r3
 801e084:	f04f 0202 	mov.w	r2, #2
 801e088:	9e03      	ldr	r6, [sp, #12]
 801e08a:	41aa      	sbcs	r2, r5
 801e08c:	d330      	bcc.n	801e0f0 <rmw_time_equal+0x80>
 801e08e:	4c22      	ldr	r4, [pc, #136]	; (801e118 <rmw_time_equal+0xa8>)
 801e090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e094:	fba3 3204 	umull	r3, r2, r3, r4
 801e098:	fb04 2205 	mla	r2, r4, r5, r2
 801e09c:	43dd      	mvns	r5, r3
 801e09e:	1a8c      	subs	r4, r1, r2
 801e0a0:	4285      	cmp	r5, r0
 801e0a2:	41b4      	sbcs	r4, r6
 801e0a4:	d332      	bcc.n	801e10c <rmw_time_equal+0x9c>
 801e0a6:	eb10 0c03 	adds.w	ip, r0, r3
 801e0aa:	eb42 0106 	adc.w	r1, r2, r6
 801e0ae:	4819      	ldr	r0, [pc, #100]	; (801e114 <rmw_time_equal+0xa4>)
 801e0b0:	2202      	movs	r2, #2
 801e0b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e0b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e0b6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e0ba:	4298      	cmp	r0, r3
 801e0bc:	41b2      	sbcs	r2, r6
 801e0be:	d31c      	bcc.n	801e0fa <rmw_time_equal+0x8a>
 801e0c0:	4c15      	ldr	r4, [pc, #84]	; (801e118 <rmw_time_equal+0xa8>)
 801e0c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801e0c6:	fba3 3204 	umull	r3, r2, r3, r4
 801e0ca:	fb04 2206 	mla	r2, r4, r6, r2
 801e0ce:	43de      	mvns	r6, r3
 801e0d0:	1a84      	subs	r4, r0, r2
 801e0d2:	42ae      	cmp	r6, r5
 801e0d4:	41bc      	sbcs	r4, r7
 801e0d6:	d315      	bcc.n	801e104 <rmw_time_equal+0x94>
 801e0d8:	195b      	adds	r3, r3, r5
 801e0da:	eb42 0207 	adc.w	r2, r2, r7
 801e0de:	428a      	cmp	r2, r1
 801e0e0:	bf08      	it	eq
 801e0e2:	4563      	cmpeq	r3, ip
 801e0e4:	bf0c      	ite	eq
 801e0e6:	2001      	moveq	r0, #1
 801e0e8:	2000      	movne	r0, #0
 801e0ea:	b004      	add	sp, #16
 801e0ec:	bcf0      	pop	{r4, r5, r6, r7}
 801e0ee:	4770      	bx	lr
 801e0f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e0f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e0f8:	e7d9      	b.n	801e0ae <rmw_time_equal+0x3e>
 801e0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e0fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801e102:	e7ec      	b.n	801e0de <rmw_time_equal+0x6e>
 801e104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e108:	4602      	mov	r2, r0
 801e10a:	e7e8      	b.n	801e0de <rmw_time_equal+0x6e>
 801e10c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e110:	e7cd      	b.n	801e0ae <rmw_time_equal+0x3e>
 801e112:	bf00      	nop
 801e114:	25c17d04 	.word	0x25c17d04
 801e118:	3b9aca00 	.word	0x3b9aca00

0801e11c <rmw_time_total_nsec>:
 801e11c:	b470      	push	{r4, r5, r6}
 801e11e:	b085      	sub	sp, #20
 801e120:	ac04      	add	r4, sp, #16
 801e122:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e126:	4603      	mov	r3, r0
 801e128:	4913      	ldr	r1, [pc, #76]	; (801e178 <rmw_time_total_nsec+0x5c>)
 801e12a:	9d01      	ldr	r5, [sp, #4]
 801e12c:	4610      	mov	r0, r2
 801e12e:	4299      	cmp	r1, r3
 801e130:	f04f 0202 	mov.w	r2, #2
 801e134:	9e03      	ldr	r6, [sp, #12]
 801e136:	41aa      	sbcs	r2, r5
 801e138:	d311      	bcc.n	801e15e <rmw_time_total_nsec+0x42>
 801e13a:	4c10      	ldr	r4, [pc, #64]	; (801e17c <rmw_time_total_nsec+0x60>)
 801e13c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e140:	fba3 3204 	umull	r3, r2, r3, r4
 801e144:	fb04 2205 	mla	r2, r4, r5, r2
 801e148:	43dd      	mvns	r5, r3
 801e14a:	1a8c      	subs	r4, r1, r2
 801e14c:	4285      	cmp	r5, r0
 801e14e:	41b4      	sbcs	r4, r6
 801e150:	d30c      	bcc.n	801e16c <rmw_time_total_nsec+0x50>
 801e152:	1818      	adds	r0, r3, r0
 801e154:	eb42 0106 	adc.w	r1, r2, r6
 801e158:	b005      	add	sp, #20
 801e15a:	bc70      	pop	{r4, r5, r6}
 801e15c:	4770      	bx	lr
 801e15e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e162:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e166:	b005      	add	sp, #20
 801e168:	bc70      	pop	{r4, r5, r6}
 801e16a:	4770      	bx	lr
 801e16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e170:	b005      	add	sp, #20
 801e172:	bc70      	pop	{r4, r5, r6}
 801e174:	4770      	bx	lr
 801e176:	bf00      	nop
 801e178:	25c17d04 	.word	0x25c17d04
 801e17c:	3b9aca00 	.word	0x3b9aca00

0801e180 <rmw_validate_full_topic_name>:
 801e180:	2800      	cmp	r0, #0
 801e182:	d05d      	beq.n	801e240 <rmw_validate_full_topic_name+0xc0>
 801e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e188:	460d      	mov	r5, r1
 801e18a:	2900      	cmp	r1, #0
 801e18c:	d05a      	beq.n	801e244 <rmw_validate_full_topic_name+0xc4>
 801e18e:	4604      	mov	r4, r0
 801e190:	4616      	mov	r6, r2
 801e192:	f7e2 f85f 	bl	8000254 <strlen>
 801e196:	b150      	cbz	r0, 801e1ae <rmw_validate_full_topic_name+0x2e>
 801e198:	7823      	ldrb	r3, [r4, #0]
 801e19a:	2b2f      	cmp	r3, #47	; 0x2f
 801e19c:	d00e      	beq.n	801e1bc <rmw_validate_full_topic_name+0x3c>
 801e19e:	2302      	movs	r3, #2
 801e1a0:	602b      	str	r3, [r5, #0]
 801e1a2:	b146      	cbz	r6, 801e1b6 <rmw_validate_full_topic_name+0x36>
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	4618      	mov	r0, r3
 801e1a8:	6033      	str	r3, [r6, #0]
 801e1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1ae:	2301      	movs	r3, #1
 801e1b0:	602b      	str	r3, [r5, #0]
 801e1b2:	2e00      	cmp	r6, #0
 801e1b4:	d1f6      	bne.n	801e1a4 <rmw_validate_full_topic_name+0x24>
 801e1b6:	2000      	movs	r0, #0
 801e1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1bc:	1e43      	subs	r3, r0, #1
 801e1be:	5ce2      	ldrb	r2, [r4, r3]
 801e1c0:	2a2f      	cmp	r2, #47	; 0x2f
 801e1c2:	d041      	beq.n	801e248 <rmw_validate_full_topic_name+0xc8>
 801e1c4:	1e62      	subs	r2, r4, #1
 801e1c6:	f1c4 0e01 	rsb	lr, r4, #1
 801e1ca:	eb02 0800 	add.w	r8, r2, r0
 801e1ce:	eb0e 0702 	add.w	r7, lr, r2
 801e1d2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e1d6:	f023 0120 	bic.w	r1, r3, #32
 801e1da:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801e1de:	3941      	subs	r1, #65	; 0x41
 801e1e0:	2919      	cmp	r1, #25
 801e1e2:	d90f      	bls.n	801e204 <rmw_validate_full_topic_name+0x84>
 801e1e4:	f1bc 0f0a 	cmp.w	ip, #10
 801e1e8:	d90c      	bls.n	801e204 <rmw_validate_full_topic_name+0x84>
 801e1ea:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801e1ee:	fab3 f383 	clz	r3, r3
 801e1f2:	095b      	lsrs	r3, r3, #5
 801e1f4:	b933      	cbnz	r3, 801e204 <rmw_validate_full_topic_name+0x84>
 801e1f6:	2204      	movs	r2, #4
 801e1f8:	602a      	str	r2, [r5, #0]
 801e1fa:	2e00      	cmp	r6, #0
 801e1fc:	d0db      	beq.n	801e1b6 <rmw_validate_full_topic_name+0x36>
 801e1fe:	4618      	mov	r0, r3
 801e200:	6037      	str	r7, [r6, #0]
 801e202:	e7d2      	b.n	801e1aa <rmw_validate_full_topic_name+0x2a>
 801e204:	4542      	cmp	r2, r8
 801e206:	d1e2      	bne.n	801e1ce <rmw_validate_full_topic_name+0x4e>
 801e208:	2301      	movs	r3, #1
 801e20a:	4f1a      	ldr	r7, [pc, #104]	; (801e274 <rmw_validate_full_topic_name+0xf4>)
 801e20c:	e004      	b.n	801e218 <rmw_validate_full_topic_name+0x98>
 801e20e:	4298      	cmp	r0, r3
 801e210:	f104 0401 	add.w	r4, r4, #1
 801e214:	4613      	mov	r3, r2
 801e216:	d91c      	bls.n	801e252 <rmw_validate_full_topic_name+0xd2>
 801e218:	4298      	cmp	r0, r3
 801e21a:	f103 0201 	add.w	r2, r3, #1
 801e21e:	d0f6      	beq.n	801e20e <rmw_validate_full_topic_name+0x8e>
 801e220:	7821      	ldrb	r1, [r4, #0]
 801e222:	292f      	cmp	r1, #47	; 0x2f
 801e224:	d1f3      	bne.n	801e20e <rmw_validate_full_topic_name+0x8e>
 801e226:	7861      	ldrb	r1, [r4, #1]
 801e228:	292f      	cmp	r1, #47	; 0x2f
 801e22a:	d01e      	beq.n	801e26a <rmw_validate_full_topic_name+0xea>
 801e22c:	5dc9      	ldrb	r1, [r1, r7]
 801e22e:	0749      	lsls	r1, r1, #29
 801e230:	d5ed      	bpl.n	801e20e <rmw_validate_full_topic_name+0x8e>
 801e232:	2206      	movs	r2, #6
 801e234:	602a      	str	r2, [r5, #0]
 801e236:	2e00      	cmp	r6, #0
 801e238:	d0bd      	beq.n	801e1b6 <rmw_validate_full_topic_name+0x36>
 801e23a:	2000      	movs	r0, #0
 801e23c:	6033      	str	r3, [r6, #0]
 801e23e:	e7b4      	b.n	801e1aa <rmw_validate_full_topic_name+0x2a>
 801e240:	200b      	movs	r0, #11
 801e242:	4770      	bx	lr
 801e244:	200b      	movs	r0, #11
 801e246:	e7b0      	b.n	801e1aa <rmw_validate_full_topic_name+0x2a>
 801e248:	2203      	movs	r2, #3
 801e24a:	602a      	str	r2, [r5, #0]
 801e24c:	2e00      	cmp	r6, #0
 801e24e:	d1f4      	bne.n	801e23a <rmw_validate_full_topic_name+0xba>
 801e250:	e7b1      	b.n	801e1b6 <rmw_validate_full_topic_name+0x36>
 801e252:	28f7      	cmp	r0, #247	; 0xf7
 801e254:	d803      	bhi.n	801e25e <rmw_validate_full_topic_name+0xde>
 801e256:	2300      	movs	r3, #0
 801e258:	4618      	mov	r0, r3
 801e25a:	602b      	str	r3, [r5, #0]
 801e25c:	e7a5      	b.n	801e1aa <rmw_validate_full_topic_name+0x2a>
 801e25e:	2307      	movs	r3, #7
 801e260:	602b      	str	r3, [r5, #0]
 801e262:	2e00      	cmp	r6, #0
 801e264:	d0a7      	beq.n	801e1b6 <rmw_validate_full_topic_name+0x36>
 801e266:	23f6      	movs	r3, #246	; 0xf6
 801e268:	e7e7      	b.n	801e23a <rmw_validate_full_topic_name+0xba>
 801e26a:	2205      	movs	r2, #5
 801e26c:	602a      	str	r2, [r5, #0]
 801e26e:	2e00      	cmp	r6, #0
 801e270:	d1e3      	bne.n	801e23a <rmw_validate_full_topic_name+0xba>
 801e272:	e7a0      	b.n	801e1b6 <rmw_validate_full_topic_name+0x36>
 801e274:	080234be 	.word	0x080234be

0801e278 <on_status>:
 801e278:	b082      	sub	sp, #8
 801e27a:	b002      	add	sp, #8
 801e27c:	4770      	bx	lr
 801e27e:	bf00      	nop

0801e280 <on_topic>:
 801e280:	4a23      	ldr	r2, [pc, #140]	; (801e310 <on_topic+0x90>)
 801e282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e286:	6812      	ldr	r2, [r2, #0]
 801e288:	b094      	sub	sp, #80	; 0x50
 801e28a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e28c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801e290:	9113      	str	r1, [sp, #76]	; 0x4c
 801e292:	9312      	str	r3, [sp, #72]	; 0x48
 801e294:	b3c2      	cbz	r2, 801e308 <on_topic+0x88>
 801e296:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801e29a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801e29e:	e001      	b.n	801e2a4 <on_topic+0x24>
 801e2a0:	6852      	ldr	r2, [r2, #4]
 801e2a2:	b38a      	cbz	r2, 801e308 <on_topic+0x88>
 801e2a4:	6894      	ldr	r4, [r2, #8]
 801e2a6:	8aa3      	ldrh	r3, [r4, #20]
 801e2a8:	428b      	cmp	r3, r1
 801e2aa:	d1f9      	bne.n	801e2a0 <on_topic+0x20>
 801e2ac:	7da3      	ldrb	r3, [r4, #22]
 801e2ae:	4283      	cmp	r3, r0
 801e2b0:	d1f6      	bne.n	801e2a0 <on_topic+0x20>
 801e2b2:	2248      	movs	r2, #72	; 0x48
 801e2b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801e2b8:	4668      	mov	r0, sp
 801e2ba:	f002 ff6e 	bl	802119a <memcpy>
 801e2be:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801e2c2:	4620      	mov	r0, r4
 801e2c4:	cb0c      	ldmia	r3, {r2, r3}
 801e2c6:	f7f9 fa05 	bl	80176d4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e2ca:	4607      	mov	r7, r0
 801e2cc:	b1e0      	cbz	r0, 801e308 <on_topic+0x88>
 801e2ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e2d2:	462a      	mov	r2, r5
 801e2d4:	4630      	mov	r0, r6
 801e2d6:	f108 0110 	add.w	r1, r8, #16
 801e2da:	f000 ff0f 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801e2de:	b930      	cbnz	r0, 801e2ee <on_topic+0x6e>
 801e2e0:	4639      	mov	r1, r7
 801e2e2:	480c      	ldr	r0, [pc, #48]	; (801e314 <on_topic+0x94>)
 801e2e4:	b014      	add	sp, #80	; 0x50
 801e2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e2ea:	f000 b8bd 	b.w	801e468 <put_memory>
 801e2ee:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801e2f2:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801e2f6:	f000 fc83 	bl	801ec00 <rmw_uros_epoch_nanos>
 801e2fa:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801e2fe:	2305      	movs	r3, #5
 801e300:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e304:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801e308:	b014      	add	sp, #80	; 0x50
 801e30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e30e:	bf00      	nop
 801e310:	2001787c 	.word	0x2001787c
 801e314:	2001786c 	.word	0x2001786c

0801e318 <on_request>:
 801e318:	4824      	ldr	r0, [pc, #144]	; (801e3ac <on_request+0x94>)
 801e31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e31e:	6800      	ldr	r0, [r0, #0]
 801e320:	b094      	sub	sp, #80	; 0x50
 801e322:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e324:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e328:	9113      	str	r1, [sp, #76]	; 0x4c
 801e32a:	2800      	cmp	r0, #0
 801e32c:	d03b      	beq.n	801e3a6 <on_request+0x8e>
 801e32e:	461d      	mov	r5, r3
 801e330:	e001      	b.n	801e336 <on_request+0x1e>
 801e332:	6840      	ldr	r0, [r0, #4]
 801e334:	b3b8      	cbz	r0, 801e3a6 <on_request+0x8e>
 801e336:	6884      	ldr	r4, [r0, #8]
 801e338:	8b21      	ldrh	r1, [r4, #24]
 801e33a:	4291      	cmp	r1, r2
 801e33c:	d1f9      	bne.n	801e332 <on_request+0x1a>
 801e33e:	2248      	movs	r2, #72	; 0x48
 801e340:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e344:	4668      	mov	r0, sp
 801e346:	f002 ff28 	bl	802119a <memcpy>
 801e34a:	f104 0320 	add.w	r3, r4, #32
 801e34e:	4620      	mov	r0, r4
 801e350:	cb0c      	ldmia	r3, {r2, r3}
 801e352:	f7f9 f9bf 	bl	80176d4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e356:	4680      	mov	r8, r0
 801e358:	b328      	cbz	r0, 801e3a6 <on_request+0x8e>
 801e35a:	4630      	mov	r0, r6
 801e35c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e360:	463a      	mov	r2, r7
 801e362:	f106 0110 	add.w	r1, r6, #16
 801e366:	f000 fec9 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801e36a:	b930      	cbnz	r0, 801e37a <on_request+0x62>
 801e36c:	4641      	mov	r1, r8
 801e36e:	4810      	ldr	r0, [pc, #64]	; (801e3b0 <on_request+0x98>)
 801e370:	b014      	add	sp, #80	; 0x50
 801e372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e376:	f000 b877 	b.w	801e468 <put_memory>
 801e37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e37c:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801e380:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e384:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e38c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e390:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e394:	f000 fc34 	bl	801ec00 <rmw_uros_epoch_nanos>
 801e398:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e39c:	2303      	movs	r3, #3
 801e39e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e3a2:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e3a6:	b014      	add	sp, #80	; 0x50
 801e3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3ac:	2001784c 	.word	0x2001784c
 801e3b0:	2001786c 	.word	0x2001786c

0801e3b4 <on_reply>:
 801e3b4:	4822      	ldr	r0, [pc, #136]	; (801e440 <on_reply+0x8c>)
 801e3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3ba:	6800      	ldr	r0, [r0, #0]
 801e3bc:	b094      	sub	sp, #80	; 0x50
 801e3be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e3c0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e3c4:	9113      	str	r1, [sp, #76]	; 0x4c
 801e3c6:	b3b8      	cbz	r0, 801e438 <on_reply+0x84>
 801e3c8:	461d      	mov	r5, r3
 801e3ca:	e001      	b.n	801e3d0 <on_reply+0x1c>
 801e3cc:	6840      	ldr	r0, [r0, #4]
 801e3ce:	b398      	cbz	r0, 801e438 <on_reply+0x84>
 801e3d0:	6884      	ldr	r4, [r0, #8]
 801e3d2:	8b21      	ldrh	r1, [r4, #24]
 801e3d4:	4291      	cmp	r1, r2
 801e3d6:	d1f9      	bne.n	801e3cc <on_reply+0x18>
 801e3d8:	2248      	movs	r2, #72	; 0x48
 801e3da:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e3de:	4668      	mov	r0, sp
 801e3e0:	f002 fedb 	bl	802119a <memcpy>
 801e3e4:	f104 0320 	add.w	r3, r4, #32
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	cb0c      	ldmia	r3, {r2, r3}
 801e3ec:	f7f9 f972 	bl	80176d4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e3f0:	4680      	mov	r8, r0
 801e3f2:	b308      	cbz	r0, 801e438 <on_reply+0x84>
 801e3f4:	4630      	mov	r0, r6
 801e3f6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e3fa:	463a      	mov	r2, r7
 801e3fc:	f106 0110 	add.w	r1, r6, #16
 801e400:	f000 fe7c 	bl	801f0fc <ucdr_deserialize_array_uint8_t>
 801e404:	b930      	cbnz	r0, 801e414 <on_reply+0x60>
 801e406:	4641      	mov	r1, r8
 801e408:	480e      	ldr	r0, [pc, #56]	; (801e444 <on_reply+0x90>)
 801e40a:	b014      	add	sp, #80	; 0x50
 801e40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e410:	f000 b82a 	b.w	801e468 <put_memory>
 801e414:	2200      	movs	r2, #0
 801e416:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e41a:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e41e:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801e422:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801e426:	f000 fbeb 	bl	801ec00 <rmw_uros_epoch_nanos>
 801e42a:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e42e:	2304      	movs	r3, #4
 801e430:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e434:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e438:	b014      	add	sp, #80	; 0x50
 801e43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e43e:	bf00      	nop
 801e440:	20012f5c 	.word	0x20012f5c
 801e444:	2001786c 	.word	0x2001786c

0801e448 <get_memory>:
 801e448:	4603      	mov	r3, r0
 801e44a:	6840      	ldr	r0, [r0, #4]
 801e44c:	b158      	cbz	r0, 801e466 <get_memory+0x1e>
 801e44e:	6842      	ldr	r2, [r0, #4]
 801e450:	605a      	str	r2, [r3, #4]
 801e452:	b10a      	cbz	r2, 801e458 <get_memory+0x10>
 801e454:	2100      	movs	r1, #0
 801e456:	6011      	str	r1, [r2, #0]
 801e458:	681a      	ldr	r2, [r3, #0]
 801e45a:	6042      	str	r2, [r0, #4]
 801e45c:	b102      	cbz	r2, 801e460 <get_memory+0x18>
 801e45e:	6010      	str	r0, [r2, #0]
 801e460:	2200      	movs	r2, #0
 801e462:	6002      	str	r2, [r0, #0]
 801e464:	6018      	str	r0, [r3, #0]
 801e466:	4770      	bx	lr

0801e468 <put_memory>:
 801e468:	680b      	ldr	r3, [r1, #0]
 801e46a:	b10b      	cbz	r3, 801e470 <put_memory+0x8>
 801e46c:	684a      	ldr	r2, [r1, #4]
 801e46e:	605a      	str	r2, [r3, #4]
 801e470:	684a      	ldr	r2, [r1, #4]
 801e472:	b102      	cbz	r2, 801e476 <put_memory+0xe>
 801e474:	6013      	str	r3, [r2, #0]
 801e476:	6803      	ldr	r3, [r0, #0]
 801e478:	428b      	cmp	r3, r1
 801e47a:	6843      	ldr	r3, [r0, #4]
 801e47c:	bf08      	it	eq
 801e47e:	6002      	streq	r2, [r0, #0]
 801e480:	604b      	str	r3, [r1, #4]
 801e482:	b103      	cbz	r3, 801e486 <put_memory+0x1e>
 801e484:	6019      	str	r1, [r3, #0]
 801e486:	2300      	movs	r3, #0
 801e488:	600b      	str	r3, [r1, #0]
 801e48a:	6041      	str	r1, [r0, #4]
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop

0801e490 <rmw_destroy_client>:
 801e490:	b570      	push	{r4, r5, r6, lr}
 801e492:	b128      	cbz	r0, 801e4a0 <rmw_destroy_client+0x10>
 801e494:	4604      	mov	r4, r0
 801e496:	6800      	ldr	r0, [r0, #0]
 801e498:	460d      	mov	r5, r1
 801e49a:	f7f9 fa95 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 801e49e:	b910      	cbnz	r0, 801e4a6 <rmw_destroy_client+0x16>
 801e4a0:	2401      	movs	r4, #1
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	bd70      	pop	{r4, r5, r6, pc}
 801e4a6:	6863      	ldr	r3, [r4, #4]
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d0f9      	beq.n	801e4a0 <rmw_destroy_client+0x10>
 801e4ac:	2d00      	cmp	r5, #0
 801e4ae:	d0f7      	beq.n	801e4a0 <rmw_destroy_client+0x10>
 801e4b0:	6828      	ldr	r0, [r5, #0]
 801e4b2:	f7f9 fa89 	bl	80179c8 <is_uxrce_rmw_identifier_valid>
 801e4b6:	2800      	cmp	r0, #0
 801e4b8:	d0f2      	beq.n	801e4a0 <rmw_destroy_client+0x10>
 801e4ba:	686e      	ldr	r6, [r5, #4]
 801e4bc:	2e00      	cmp	r6, #0
 801e4be:	d0ef      	beq.n	801e4a0 <rmw_destroy_client+0x10>
 801e4c0:	6864      	ldr	r4, [r4, #4]
 801e4c2:	6932      	ldr	r2, [r6, #16]
 801e4c4:	6920      	ldr	r0, [r4, #16]
 801e4c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e4ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e4ce:	6819      	ldr	r1, [r3, #0]
 801e4d0:	f7fa f94c 	bl	801876c <uxr_buffer_cancel_data>
 801e4d4:	4602      	mov	r2, r0
 801e4d6:	6920      	ldr	r0, [r4, #16]
 801e4d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e4dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e4e0:	f7f9 f9f8 	bl	80178d4 <run_xrce_session>
 801e4e4:	6920      	ldr	r0, [r4, #16]
 801e4e6:	6932      	ldr	r2, [r6, #16]
 801e4e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e4ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e4f0:	6819      	ldr	r1, [r3, #0]
 801e4f2:	f7f9 fdb3 	bl	801805c <uxr_buffer_delete_entity>
 801e4f6:	4602      	mov	r2, r0
 801e4f8:	6920      	ldr	r0, [r4, #16]
 801e4fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e4fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e502:	f7f9 f9e7 	bl	80178d4 <run_xrce_session>
 801e506:	4603      	mov	r3, r0
 801e508:	4628      	mov	r0, r5
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	bf14      	ite	ne
 801e50e:	2400      	movne	r4, #0
 801e510:	2402      	moveq	r4, #2
 801e512:	f7f9 f8bd 	bl	8017690 <rmw_uxrce_fini_client_memory>
 801e516:	e7c4      	b.n	801e4a2 <rmw_destroy_client+0x12>

0801e518 <rmw_get_implementation_identifier>:
 801e518:	4b01      	ldr	r3, [pc, #4]	; (801e520 <rmw_get_implementation_identifier+0x8>)
 801e51a:	6818      	ldr	r0, [r3, #0]
 801e51c:	4770      	bx	lr
 801e51e:	bf00      	nop
 801e520:	080232dc 	.word	0x080232dc

0801e524 <rmw_create_guard_condition>:
 801e524:	b538      	push	{r3, r4, r5, lr}
 801e526:	4605      	mov	r5, r0
 801e528:	4808      	ldr	r0, [pc, #32]	; (801e54c <rmw_create_guard_condition+0x28>)
 801e52a:	f7ff ff8d 	bl	801e448 <get_memory>
 801e52e:	4603      	mov	r3, r0
 801e530:	b148      	cbz	r0, 801e546 <rmw_create_guard_condition+0x22>
 801e532:	6884      	ldr	r4, [r0, #8]
 801e534:	2300      	movs	r3, #0
 801e536:	61e5      	str	r5, [r4, #28]
 801e538:	7423      	strb	r3, [r4, #16]
 801e53a:	f7ff ffed 	bl	801e518 <rmw_get_implementation_identifier>
 801e53e:	f104 0314 	add.w	r3, r4, #20
 801e542:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e546:	4618      	mov	r0, r3
 801e548:	bd38      	pop	{r3, r4, r5, pc}
 801e54a:	bf00      	nop
 801e54c:	2001780c 	.word	0x2001780c

0801e550 <rmw_destroy_guard_condition>:
 801e550:	b508      	push	{r3, lr}
 801e552:	4b08      	ldr	r3, [pc, #32]	; (801e574 <rmw_destroy_guard_condition+0x24>)
 801e554:	6819      	ldr	r1, [r3, #0]
 801e556:	b911      	cbnz	r1, 801e55e <rmw_destroy_guard_condition+0xe>
 801e558:	e00a      	b.n	801e570 <rmw_destroy_guard_condition+0x20>
 801e55a:	6849      	ldr	r1, [r1, #4]
 801e55c:	b141      	cbz	r1, 801e570 <rmw_destroy_guard_condition+0x20>
 801e55e:	688b      	ldr	r3, [r1, #8]
 801e560:	3314      	adds	r3, #20
 801e562:	4298      	cmp	r0, r3
 801e564:	d1f9      	bne.n	801e55a <rmw_destroy_guard_condition+0xa>
 801e566:	4803      	ldr	r0, [pc, #12]	; (801e574 <rmw_destroy_guard_condition+0x24>)
 801e568:	f7ff ff7e 	bl	801e468 <put_memory>
 801e56c:	2000      	movs	r0, #0
 801e56e:	bd08      	pop	{r3, pc}
 801e570:	2001      	movs	r0, #1
 801e572:	bd08      	pop	{r3, pc}
 801e574:	2001780c 	.word	0x2001780c

0801e578 <create_topic>:
 801e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e57c:	4605      	mov	r5, r0
 801e57e:	b084      	sub	sp, #16
 801e580:	4822      	ldr	r0, [pc, #136]	; (801e60c <create_topic+0x94>)
 801e582:	460f      	mov	r7, r1
 801e584:	4616      	mov	r6, r2
 801e586:	f7ff ff5f 	bl	801e448 <get_memory>
 801e58a:	4604      	mov	r4, r0
 801e58c:	2800      	cmp	r0, #0
 801e58e:	d039      	beq.n	801e604 <create_topic+0x8c>
 801e590:	692b      	ldr	r3, [r5, #16]
 801e592:	2102      	movs	r1, #2
 801e594:	6884      	ldr	r4, [r0, #8]
 801e596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e59a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e614 <create_topic+0x9c>
 801e59e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e5a2:	1c42      	adds	r2, r0, #1
 801e5a4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e5a8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e5ac:	f7f9 ff70 	bl	8018490 <uxr_object_id>
 801e5b0:	223c      	movs	r2, #60	; 0x3c
 801e5b2:	6120      	str	r0, [r4, #16]
 801e5b4:	4641      	mov	r1, r8
 801e5b6:	4638      	mov	r0, r7
 801e5b8:	f7f9 f9ee 	bl	8017998 <generate_topic_name>
 801e5bc:	b1f0      	cbz	r0, 801e5fc <create_topic+0x84>
 801e5be:	4f14      	ldr	r7, [pc, #80]	; (801e610 <create_topic+0x98>)
 801e5c0:	4630      	mov	r0, r6
 801e5c2:	2264      	movs	r2, #100	; 0x64
 801e5c4:	4639      	mov	r1, r7
 801e5c6:	f7f9 f9b9 	bl	801793c <generate_type_name>
 801e5ca:	b1b8      	cbz	r0, 801e5fc <create_topic+0x84>
 801e5cc:	6928      	ldr	r0, [r5, #16]
 801e5ce:	2106      	movs	r1, #6
 801e5d0:	696b      	ldr	r3, [r5, #20]
 801e5d2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e5d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e5da:	f8cd 8000 	str.w	r8, [sp]
 801e5de:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e5e2:	6811      	ldr	r1, [r2, #0]
 801e5e4:	6922      	ldr	r2, [r4, #16]
 801e5e6:	f7f9 fdb7 	bl	8018158 <uxr_buffer_create_topic_bin>
 801e5ea:	4602      	mov	r2, r0
 801e5ec:	6928      	ldr	r0, [r5, #16]
 801e5ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e5f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e5f6:	f7f9 f96d 	bl	80178d4 <run_xrce_session>
 801e5fa:	b918      	cbnz	r0, 801e604 <create_topic+0x8c>
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	2400      	movs	r4, #0
 801e600:	f7f9 f85c 	bl	80176bc <rmw_uxrce_fini_topic_memory>
 801e604:	4620      	mov	r0, r4
 801e606:	b004      	add	sp, #16
 801e608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e60c:	2001788c 	.word	0x2001788c
 801e610:	20017920 	.word	0x20017920
 801e614:	200178e4 	.word	0x200178e4

0801e618 <destroy_topic>:
 801e618:	b538      	push	{r3, r4, r5, lr}
 801e61a:	6985      	ldr	r5, [r0, #24]
 801e61c:	b1dd      	cbz	r5, 801e656 <destroy_topic+0x3e>
 801e61e:	4604      	mov	r4, r0
 801e620:	6928      	ldr	r0, [r5, #16]
 801e622:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e626:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e62a:	6922      	ldr	r2, [r4, #16]
 801e62c:	6819      	ldr	r1, [r3, #0]
 801e62e:	f7f9 fd15 	bl	801805c <uxr_buffer_delete_entity>
 801e632:	4602      	mov	r2, r0
 801e634:	6928      	ldr	r0, [r5, #16]
 801e636:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e63a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e63e:	f7f9 f949 	bl	80178d4 <run_xrce_session>
 801e642:	4603      	mov	r3, r0
 801e644:	4620      	mov	r0, r4
 801e646:	2b00      	cmp	r3, #0
 801e648:	bf14      	ite	ne
 801e64a:	2400      	movne	r4, #0
 801e64c:	2402      	moveq	r4, #2
 801e64e:	f7f9 f835 	bl	80176bc <rmw_uxrce_fini_topic_memory>
 801e652:	4620      	mov	r0, r4
 801e654:	bd38      	pop	{r3, r4, r5, pc}
 801e656:	2401      	movs	r4, #1
 801e658:	4620      	mov	r0, r4
 801e65a:	bd38      	pop	{r3, r4, r5, pc}

0801e65c <rmw_send_request>:
 801e65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e660:	4604      	mov	r4, r0
 801e662:	6800      	ldr	r0, [r0, #0]
 801e664:	b08b      	sub	sp, #44	; 0x2c
 801e666:	460e      	mov	r6, r1
 801e668:	4615      	mov	r5, r2
 801e66a:	b128      	cbz	r0, 801e678 <rmw_send_request+0x1c>
 801e66c:	4b21      	ldr	r3, [pc, #132]	; (801e6f4 <rmw_send_request+0x98>)
 801e66e:	6819      	ldr	r1, [r3, #0]
 801e670:	f7e1 fde6 	bl	8000240 <strcmp>
 801e674:	2800      	cmp	r0, #0
 801e676:	d139      	bne.n	801e6ec <rmw_send_request+0x90>
 801e678:	6864      	ldr	r4, [r4, #4]
 801e67a:	2700      	movs	r7, #0
 801e67c:	6963      	ldr	r3, [r4, #20]
 801e67e:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801e682:	689b      	ldr	r3, [r3, #8]
 801e684:	4798      	blx	r3
 801e686:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801e68a:	4630      	mov	r0, r6
 801e68c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e690:	4798      	blx	r3
 801e692:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801e696:	9000      	str	r0, [sp, #0]
 801e698:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801e69c:	6922      	ldr	r2, [r4, #16]
 801e69e:	ab02      	add	r3, sp, #8
 801e6a0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801e6a2:	f001 fb9f 	bl	801fde4 <uxr_prepare_output_stream>
 801e6a6:	e9c5 0700 	strd	r0, r7, [r5]
 801e6aa:	b198      	cbz	r0, 801e6d4 <rmw_send_request+0x78>
 801e6ac:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801e6b0:	a902      	add	r1, sp, #8
 801e6b2:	4630      	mov	r0, r6
 801e6b4:	4798      	blx	r3
 801e6b6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801e6ba:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801e6be:	2b01      	cmp	r3, #1
 801e6c0:	d00c      	beq.n	801e6dc <rmw_send_request+0x80>
 801e6c2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801e6c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e6c8:	f7fa fe22 	bl	8019310 <uxr_run_session_until_confirm_delivery>
 801e6cc:	4638      	mov	r0, r7
 801e6ce:	b00b      	add	sp, #44	; 0x2c
 801e6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6d4:	2001      	movs	r0, #1
 801e6d6:	b00b      	add	sp, #44	; 0x2c
 801e6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e6e0:	f7fa fa5c 	bl	8018b9c <uxr_flash_output_streams>
 801e6e4:	4638      	mov	r0, r7
 801e6e6:	b00b      	add	sp, #44	; 0x2c
 801e6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6ec:	200c      	movs	r0, #12
 801e6ee:	b00b      	add	sp, #44	; 0x2c
 801e6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6f4:	080232dc 	.word	0x080232dc

0801e6f8 <rmw_take_request>:
 801e6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6fc:	4605      	mov	r5, r0
 801e6fe:	6800      	ldr	r0, [r0, #0]
 801e700:	b089      	sub	sp, #36	; 0x24
 801e702:	460c      	mov	r4, r1
 801e704:	4690      	mov	r8, r2
 801e706:	461e      	mov	r6, r3
 801e708:	b128      	cbz	r0, 801e716 <rmw_take_request+0x1e>
 801e70a:	4b28      	ldr	r3, [pc, #160]	; (801e7ac <rmw_take_request+0xb4>)
 801e70c:	6819      	ldr	r1, [r3, #0]
 801e70e:	f7e1 fd97 	bl	8000240 <strcmp>
 801e712:	2800      	cmp	r0, #0
 801e714:	d146      	bne.n	801e7a4 <rmw_take_request+0xac>
 801e716:	b10e      	cbz	r6, 801e71c <rmw_take_request+0x24>
 801e718:	2300      	movs	r3, #0
 801e71a:	7033      	strb	r3, [r6, #0]
 801e71c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801e720:	f7f9 f85a 	bl	80177d8 <rmw_uxrce_clean_expired_static_input_buffer>
 801e724:	4648      	mov	r0, r9
 801e726:	f7f9 f82f 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e72a:	4607      	mov	r7, r0
 801e72c:	b3b0      	cbz	r0, 801e79c <rmw_take_request+0xa4>
 801e72e:	6885      	ldr	r5, [r0, #8]
 801e730:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801e734:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801e738:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801e73c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801e740:	7423      	strb	r3, [r4, #16]
 801e742:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801e746:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801e74a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801e74e:	74e3      	strb	r3, [r4, #19]
 801e750:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 801e754:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801e758:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 801e75c:	6161      	str	r1, [r4, #20]
 801e75e:	61a2      	str	r2, [r4, #24]
 801e760:	61e3      	str	r3, [r4, #28]
 801e762:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801e766:	689b      	ldr	r3, [r3, #8]
 801e768:	4798      	blx	r3
 801e76a:	6844      	ldr	r4, [r0, #4]
 801e76c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801e770:	f105 0110 	add.w	r1, r5, #16
 801e774:	4668      	mov	r0, sp
 801e776:	f7f6 f813 	bl	80147a0 <ucdr_init_buffer>
 801e77a:	4641      	mov	r1, r8
 801e77c:	68e3      	ldr	r3, [r4, #12]
 801e77e:	4668      	mov	r0, sp
 801e780:	4798      	blx	r3
 801e782:	4639      	mov	r1, r7
 801e784:	4604      	mov	r4, r0
 801e786:	480a      	ldr	r0, [pc, #40]	; (801e7b0 <rmw_take_request+0xb8>)
 801e788:	f7ff fe6e 	bl	801e468 <put_memory>
 801e78c:	b106      	cbz	r6, 801e790 <rmw_take_request+0x98>
 801e78e:	7034      	strb	r4, [r6, #0]
 801e790:	f084 0001 	eor.w	r0, r4, #1
 801e794:	b2c0      	uxtb	r0, r0
 801e796:	b009      	add	sp, #36	; 0x24
 801e798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e79c:	2001      	movs	r0, #1
 801e79e:	b009      	add	sp, #36	; 0x24
 801e7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7a4:	200c      	movs	r0, #12
 801e7a6:	b009      	add	sp, #36	; 0x24
 801e7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7ac:	080232dc 	.word	0x080232dc
 801e7b0:	2001786c 	.word	0x2001786c

0801e7b4 <rmw_send_response>:
 801e7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7b6:	4605      	mov	r5, r0
 801e7b8:	6800      	ldr	r0, [r0, #0]
 801e7ba:	b091      	sub	sp, #68	; 0x44
 801e7bc:	460c      	mov	r4, r1
 801e7be:	4616      	mov	r6, r2
 801e7c0:	b128      	cbz	r0, 801e7ce <rmw_send_response+0x1a>
 801e7c2:	4b29      	ldr	r3, [pc, #164]	; (801e868 <rmw_send_response+0xb4>)
 801e7c4:	6819      	ldr	r1, [r3, #0]
 801e7c6:	f7e1 fd3b 	bl	8000240 <strcmp>
 801e7ca:	2800      	cmp	r0, #0
 801e7cc:	d141      	bne.n	801e852 <rmw_send_response+0x9e>
 801e7ce:	686d      	ldr	r5, [r5, #4]
 801e7d0:	68a1      	ldr	r1, [r4, #8]
 801e7d2:	6860      	ldr	r0, [r4, #4]
 801e7d4:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801e7d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801e7da:	9307      	str	r3, [sp, #28]
 801e7dc:	4623      	mov	r3, r4
 801e7de:	9206      	str	r2, [sp, #24]
 801e7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7e4:	789b      	ldrb	r3, [r3, #2]
 801e7e6:	f88d 2017 	strb.w	r2, [sp, #23]
 801e7ea:	f88d 3016 	strb.w	r3, [sp, #22]
 801e7ee:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801e7f2:	68e2      	ldr	r2, [r4, #12]
 801e7f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e7f8:	ab02      	add	r3, sp, #8
 801e7fa:	696c      	ldr	r4, [r5, #20]
 801e7fc:	c307      	stmia	r3!, {r0, r1, r2}
 801e7fe:	68e3      	ldr	r3, [r4, #12]
 801e800:	4798      	blx	r3
 801e802:	6844      	ldr	r4, [r0, #4]
 801e804:	4630      	mov	r0, r6
 801e806:	6923      	ldr	r3, [r4, #16]
 801e808:	4798      	blx	r3
 801e80a:	f100 0318 	add.w	r3, r0, #24
 801e80e:	6938      	ldr	r0, [r7, #16]
 801e810:	9300      	str	r3, [sp, #0]
 801e812:	ab08      	add	r3, sp, #32
 801e814:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e818:	692a      	ldr	r2, [r5, #16]
 801e81a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801e81c:	f001 fae2 	bl	801fde4 <uxr_prepare_output_stream>
 801e820:	b910      	cbnz	r0, 801e828 <rmw_send_response+0x74>
 801e822:	2001      	movs	r0, #1
 801e824:	b011      	add	sp, #68	; 0x44
 801e826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e828:	a902      	add	r1, sp, #8
 801e82a:	a808      	add	r0, sp, #32
 801e82c:	f7fc ff02 	bl	801b634 <uxr_serialize_SampleIdentity>
 801e830:	68a3      	ldr	r3, [r4, #8]
 801e832:	a908      	add	r1, sp, #32
 801e834:	4630      	mov	r0, r6
 801e836:	4798      	blx	r3
 801e838:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801e83c:	6938      	ldr	r0, [r7, #16]
 801e83e:	2b01      	cmp	r3, #1
 801e840:	d00a      	beq.n	801e858 <rmw_send_response+0xa4>
 801e842:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801e844:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e848:	f7fa fd62 	bl	8019310 <uxr_run_session_until_confirm_delivery>
 801e84c:	2000      	movs	r0, #0
 801e84e:	b011      	add	sp, #68	; 0x44
 801e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e852:	200c      	movs	r0, #12
 801e854:	b011      	add	sp, #68	; 0x44
 801e856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e858:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e85c:	f7fa f99e 	bl	8018b9c <uxr_flash_output_streams>
 801e860:	2000      	movs	r0, #0
 801e862:	b011      	add	sp, #68	; 0x44
 801e864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e866:	bf00      	nop
 801e868:	080232dc 	.word	0x080232dc

0801e86c <rmw_take_response>:
 801e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e870:	4604      	mov	r4, r0
 801e872:	6800      	ldr	r0, [r0, #0]
 801e874:	b088      	sub	sp, #32
 801e876:	460f      	mov	r7, r1
 801e878:	4690      	mov	r8, r2
 801e87a:	461d      	mov	r5, r3
 801e87c:	b120      	cbz	r0, 801e888 <rmw_take_response+0x1c>
 801e87e:	4b1d      	ldr	r3, [pc, #116]	; (801e8f4 <rmw_take_response+0x88>)
 801e880:	6819      	ldr	r1, [r3, #0]
 801e882:	f7e1 fcdd 	bl	8000240 <strcmp>
 801e886:	bb68      	cbnz	r0, 801e8e4 <rmw_take_response+0x78>
 801e888:	b10d      	cbz	r5, 801e88e <rmw_take_response+0x22>
 801e88a:	2300      	movs	r3, #0
 801e88c:	702b      	strb	r3, [r5, #0]
 801e88e:	6864      	ldr	r4, [r4, #4]
 801e890:	f7f8 ffa2 	bl	80177d8 <rmw_uxrce_clean_expired_static_input_buffer>
 801e894:	4620      	mov	r0, r4
 801e896:	f7f8 ff77 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e89a:	4606      	mov	r6, r0
 801e89c:	b330      	cbz	r0, 801e8ec <rmw_take_response+0x80>
 801e89e:	6963      	ldr	r3, [r4, #20]
 801e8a0:	6884      	ldr	r4, [r0, #8]
 801e8a2:	68db      	ldr	r3, [r3, #12]
 801e8a4:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801e8a8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801e8ac:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801e8b0:	4798      	blx	r3
 801e8b2:	6847      	ldr	r7, [r0, #4]
 801e8b4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801e8b8:	f104 0110 	add.w	r1, r4, #16
 801e8bc:	4668      	mov	r0, sp
 801e8be:	f7f5 ff6f 	bl	80147a0 <ucdr_init_buffer>
 801e8c2:	4641      	mov	r1, r8
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	4668      	mov	r0, sp
 801e8c8:	4798      	blx	r3
 801e8ca:	4631      	mov	r1, r6
 801e8cc:	4604      	mov	r4, r0
 801e8ce:	480a      	ldr	r0, [pc, #40]	; (801e8f8 <rmw_take_response+0x8c>)
 801e8d0:	f7ff fdca 	bl	801e468 <put_memory>
 801e8d4:	b105      	cbz	r5, 801e8d8 <rmw_take_response+0x6c>
 801e8d6:	702c      	strb	r4, [r5, #0]
 801e8d8:	f084 0001 	eor.w	r0, r4, #1
 801e8dc:	b2c0      	uxtb	r0, r0
 801e8de:	b008      	add	sp, #32
 801e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8e4:	200c      	movs	r0, #12
 801e8e6:	b008      	add	sp, #32
 801e8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8ec:	2001      	movs	r0, #1
 801e8ee:	b008      	add	sp, #32
 801e8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8f4:	080232dc 	.word	0x080232dc
 801e8f8:	2001786c 	.word	0x2001786c

0801e8fc <rmw_wait>:
 801e8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e900:	4698      	mov	r8, r3
 801e902:	ea40 0301 	orr.w	r3, r0, r1
 801e906:	b089      	sub	sp, #36	; 0x24
 801e908:	ea48 0303 	orr.w	r3, r8, r3
 801e90c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e90e:	4313      	orrs	r3, r2
 801e910:	f000 8106 	beq.w	801eb20 <rmw_wait+0x224>
 801e914:	4605      	mov	r5, r0
 801e916:	460e      	mov	r6, r1
 801e918:	4691      	mov	r9, r2
 801e91a:	b16c      	cbz	r4, 801e938 <rmw_wait+0x3c>
 801e91c:	4ba6      	ldr	r3, [pc, #664]	; (801ebb8 <rmw_wait+0x2bc>)
 801e91e:	af04      	add	r7, sp, #16
 801e920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e922:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e926:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e92a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e92e:	f7ff fb9f 	bl	801e070 <rmw_time_equal>
 801e932:	2800      	cmp	r0, #0
 801e934:	f000 810b 	beq.w	801eb4e <rmw_wait+0x252>
 801e938:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e93c:	f7f8 ff4c 	bl	80177d8 <rmw_uxrce_clean_expired_static_input_buffer>
 801e940:	4b9e      	ldr	r3, [pc, #632]	; (801ebbc <rmw_wait+0x2c0>)
 801e942:	681c      	ldr	r4, [r3, #0]
 801e944:	b14c      	cbz	r4, 801e95a <rmw_wait+0x5e>
 801e946:	4623      	mov	r3, r4
 801e948:	2100      	movs	r1, #0
 801e94a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e94e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e952:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e956:	2b00      	cmp	r3, #0
 801e958:	d1f7      	bne.n	801e94a <rmw_wait+0x4e>
 801e95a:	f1b9 0f00 	cmp.w	r9, #0
 801e95e:	d011      	beq.n	801e984 <rmw_wait+0x88>
 801e960:	f8d9 1000 	ldr.w	r1, [r9]
 801e964:	b171      	cbz	r1, 801e984 <rmw_wait+0x88>
 801e966:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e96a:	2300      	movs	r3, #0
 801e96c:	2001      	movs	r0, #1
 801e96e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e972:	3301      	adds	r3, #1
 801e974:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e976:	4299      	cmp	r1, r3
 801e978:	6912      	ldr	r2, [r2, #16]
 801e97a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e97e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e982:	d1f4      	bne.n	801e96e <rmw_wait+0x72>
 801e984:	f1b8 0f00 	cmp.w	r8, #0
 801e988:	d011      	beq.n	801e9ae <rmw_wait+0xb2>
 801e98a:	f8d8 1000 	ldr.w	r1, [r8]
 801e98e:	b171      	cbz	r1, 801e9ae <rmw_wait+0xb2>
 801e990:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e994:	2300      	movs	r3, #0
 801e996:	2001      	movs	r0, #1
 801e998:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e99c:	3301      	adds	r3, #1
 801e99e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e9a0:	4299      	cmp	r1, r3
 801e9a2:	6912      	ldr	r2, [r2, #16]
 801e9a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e9a8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e9ac:	d1f4      	bne.n	801e998 <rmw_wait+0x9c>
 801e9ae:	b185      	cbz	r5, 801e9d2 <rmw_wait+0xd6>
 801e9b0:	6829      	ldr	r1, [r5, #0]
 801e9b2:	b171      	cbz	r1, 801e9d2 <rmw_wait+0xd6>
 801e9b4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e9b8:	2300      	movs	r3, #0
 801e9ba:	2001      	movs	r0, #1
 801e9bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e9c0:	3301      	adds	r3, #1
 801e9c2:	6a12      	ldr	r2, [r2, #32]
 801e9c4:	4299      	cmp	r1, r3
 801e9c6:	6912      	ldr	r2, [r2, #16]
 801e9c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e9cc:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e9d0:	d1f4      	bne.n	801e9bc <rmw_wait+0xc0>
 801e9d2:	b344      	cbz	r4, 801ea26 <rmw_wait+0x12a>
 801e9d4:	4622      	mov	r2, r4
 801e9d6:	2300      	movs	r3, #0
 801e9d8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e9dc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e9e0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e9e4:	440b      	add	r3, r1
 801e9e6:	b2db      	uxtb	r3, r3
 801e9e8:	2a00      	cmp	r2, #0
 801e9ea:	d1f5      	bne.n	801e9d8 <rmw_wait+0xdc>
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	d05f      	beq.n	801eab0 <rmw_wait+0x1b4>
 801e9f0:	1c7a      	adds	r2, r7, #1
 801e9f2:	d00d      	beq.n	801ea10 <rmw_wait+0x114>
 801e9f4:	ee07 7a90 	vmov	s15, r7
 801e9f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e9fc:	ee07 3a90 	vmov	s15, r3
 801ea00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea08:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801ea0c:	ee17 7a90 	vmov	r7, s15
 801ea10:	68a0      	ldr	r0, [r4, #8]
 801ea12:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801ea16:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	f040 808d 	bne.w	801eb3a <rmw_wait+0x23e>
 801ea20:	6864      	ldr	r4, [r4, #4]
 801ea22:	2c00      	cmp	r4, #0
 801ea24:	d1f4      	bne.n	801ea10 <rmw_wait+0x114>
 801ea26:	f1b9 0f00 	cmp.w	r9, #0
 801ea2a:	f000 80a1 	beq.w	801eb70 <rmw_wait+0x274>
 801ea2e:	f8d9 7000 	ldr.w	r7, [r9]
 801ea32:	2f00      	cmp	r7, #0
 801ea34:	f000 80a4 	beq.w	801eb80 <rmw_wait+0x284>
 801ea38:	2400      	movs	r4, #0
 801ea3a:	4627      	mov	r7, r4
 801ea3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ea40:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ea44:	f7f8 fea0 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ea48:	2800      	cmp	r0, #0
 801ea4a:	d03b      	beq.n	801eac4 <rmw_wait+0x1c8>
 801ea4c:	3401      	adds	r4, #1
 801ea4e:	f8d9 3000 	ldr.w	r3, [r9]
 801ea52:	2701      	movs	r7, #1
 801ea54:	42a3      	cmp	r3, r4
 801ea56:	d8f1      	bhi.n	801ea3c <rmw_wait+0x140>
 801ea58:	2701      	movs	r7, #1
 801ea5a:	f1b8 0f00 	cmp.w	r8, #0
 801ea5e:	d010      	beq.n	801ea82 <rmw_wait+0x186>
 801ea60:	f8d8 3000 	ldr.w	r3, [r8]
 801ea64:	b16b      	cbz	r3, 801ea82 <rmw_wait+0x186>
 801ea66:	2400      	movs	r4, #0
 801ea68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ea70:	f7f8 fe8a 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ea74:	b370      	cbz	r0, 801ead4 <rmw_wait+0x1d8>
 801ea76:	3401      	adds	r4, #1
 801ea78:	f8d8 3000 	ldr.w	r3, [r8]
 801ea7c:	2701      	movs	r7, #1
 801ea7e:	42a3      	cmp	r3, r4
 801ea80:	d8f2      	bhi.n	801ea68 <rmw_wait+0x16c>
 801ea82:	2d00      	cmp	r5, #0
 801ea84:	d035      	beq.n	801eaf2 <rmw_wait+0x1f6>
 801ea86:	682b      	ldr	r3, [r5, #0]
 801ea88:	b39b      	cbz	r3, 801eaf2 <rmw_wait+0x1f6>
 801ea8a:	2400      	movs	r4, #0
 801ea8c:	686b      	ldr	r3, [r5, #4]
 801ea8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ea92:	f7f8 fe79 	bl	8017788 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ea96:	b328      	cbz	r0, 801eae4 <rmw_wait+0x1e8>
 801ea98:	3401      	adds	r4, #1
 801ea9a:	682b      	ldr	r3, [r5, #0]
 801ea9c:	2701      	movs	r7, #1
 801ea9e:	42a3      	cmp	r3, r4
 801eaa0:	d8f4      	bhi.n	801ea8c <rmw_wait+0x190>
 801eaa2:	2e00      	cmp	r6, #0
 801eaa4:	d03c      	beq.n	801eb20 <rmw_wait+0x224>
 801eaa6:	6834      	ldr	r4, [r6, #0]
 801eaa8:	2c00      	cmp	r4, #0
 801eaaa:	d039      	beq.n	801eb20 <rmw_wait+0x224>
 801eaac:	2701      	movs	r7, #1
 801eaae:	e023      	b.n	801eaf8 <rmw_wait+0x1fc>
 801eab0:	68a0      	ldr	r0, [r4, #8]
 801eab2:	2100      	movs	r1, #0
 801eab4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801eab8:	f7fa fbf0 	bl	801929c <uxr_run_session_timeout>
 801eabc:	6864      	ldr	r4, [r4, #4]
 801eabe:	2c00      	cmp	r4, #0
 801eac0:	d1f6      	bne.n	801eab0 <rmw_wait+0x1b4>
 801eac2:	e7b0      	b.n	801ea26 <rmw_wait+0x12a>
 801eac4:	e9d9 3200 	ldrd	r3, r2, [r9]
 801eac8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801eacc:	3401      	adds	r4, #1
 801eace:	42a3      	cmp	r3, r4
 801ead0:	d8b4      	bhi.n	801ea3c <rmw_wait+0x140>
 801ead2:	e7c2      	b.n	801ea5a <rmw_wait+0x15e>
 801ead4:	e9d8 3200 	ldrd	r3, r2, [r8]
 801ead8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801eadc:	3401      	adds	r4, #1
 801eade:	429c      	cmp	r4, r3
 801eae0:	d3c2      	bcc.n	801ea68 <rmw_wait+0x16c>
 801eae2:	e7ce      	b.n	801ea82 <rmw_wait+0x186>
 801eae4:	e9d5 3200 	ldrd	r3, r2, [r5]
 801eae8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801eaec:	3401      	adds	r4, #1
 801eaee:	42a3      	cmp	r3, r4
 801eaf0:	d8cc      	bhi.n	801ea8c <rmw_wait+0x190>
 801eaf2:	b1a6      	cbz	r6, 801eb1e <rmw_wait+0x222>
 801eaf4:	6834      	ldr	r4, [r6, #0]
 801eaf6:	b194      	cbz	r4, 801eb1e <rmw_wait+0x222>
 801eaf8:	2300      	movs	r3, #0
 801eafa:	461d      	mov	r5, r3
 801eafc:	e004      	b.n	801eb08 <rmw_wait+0x20c>
 801eafe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801eb02:	3301      	adds	r3, #1
 801eb04:	42a3      	cmp	r3, r4
 801eb06:	d00a      	beq.n	801eb1e <rmw_wait+0x222>
 801eb08:	6870      	ldr	r0, [r6, #4]
 801eb0a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801eb0e:	7c0a      	ldrb	r2, [r1, #16]
 801eb10:	2a00      	cmp	r2, #0
 801eb12:	d0f4      	beq.n	801eafe <rmw_wait+0x202>
 801eb14:	3301      	adds	r3, #1
 801eb16:	4617      	mov	r7, r2
 801eb18:	740d      	strb	r5, [r1, #16]
 801eb1a:	42a3      	cmp	r3, r4
 801eb1c:	d1f4      	bne.n	801eb08 <rmw_wait+0x20c>
 801eb1e:	b147      	cbz	r7, 801eb32 <rmw_wait+0x236>
 801eb20:	2000      	movs	r0, #0
 801eb22:	b009      	add	sp, #36	; 0x24
 801eb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb28:	b11e      	cbz	r6, 801eb32 <rmw_wait+0x236>
 801eb2a:	6834      	ldr	r4, [r6, #0]
 801eb2c:	462f      	mov	r7, r5
 801eb2e:	2c00      	cmp	r4, #0
 801eb30:	d1e2      	bne.n	801eaf8 <rmw_wait+0x1fc>
 801eb32:	2002      	movs	r0, #2
 801eb34:	b009      	add	sp, #36	; 0x24
 801eb36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb3a:	4639      	mov	r1, r7
 801eb3c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801eb40:	f7fa fbc6 	bl	80192d0 <uxr_run_session_until_data>
 801eb44:	6864      	ldr	r4, [r4, #4]
 801eb46:	2c00      	cmp	r4, #0
 801eb48:	f47f af62 	bne.w	801ea10 <rmw_wait+0x114>
 801eb4c:	e76b      	b.n	801ea26 <rmw_wait+0x12a>
 801eb4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801eb52:	f7ff fae3 	bl	801e11c <rmw_time_total_nsec>
 801eb56:	2300      	movs	r3, #0
 801eb58:	4a19      	ldr	r2, [pc, #100]	; (801ebc0 <rmw_wait+0x2c4>)
 801eb5a:	f7e1 fd37 	bl	80005cc <__aeabi_uldivmod>
 801eb5e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801eb62:	4607      	mov	r7, r0
 801eb64:	f171 0300 	sbcs.w	r3, r1, #0
 801eb68:	bfa8      	it	ge
 801eb6a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801eb6e:	e6e5      	b.n	801e93c <rmw_wait+0x40>
 801eb70:	f1b8 0f00 	cmp.w	r8, #0
 801eb74:	d00f      	beq.n	801eb96 <rmw_wait+0x29a>
 801eb76:	f8d8 3000 	ldr.w	r3, [r8]
 801eb7a:	b193      	cbz	r3, 801eba2 <rmw_wait+0x2a6>
 801eb7c:	464f      	mov	r7, r9
 801eb7e:	e772      	b.n	801ea66 <rmw_wait+0x16a>
 801eb80:	f1b8 0f00 	cmp.w	r8, #0
 801eb84:	d007      	beq.n	801eb96 <rmw_wait+0x29a>
 801eb86:	f8d8 3000 	ldr.w	r3, [r8]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	f47f af6b 	bne.w	801ea66 <rmw_wait+0x16a>
 801eb90:	b155      	cbz	r5, 801eba8 <rmw_wait+0x2ac>
 801eb92:	461f      	mov	r7, r3
 801eb94:	e777      	b.n	801ea86 <rmw_wait+0x18a>
 801eb96:	2d00      	cmp	r5, #0
 801eb98:	d0c6      	beq.n	801eb28 <rmw_wait+0x22c>
 801eb9a:	682b      	ldr	r3, [r5, #0]
 801eb9c:	b143      	cbz	r3, 801ebb0 <rmw_wait+0x2b4>
 801eb9e:	4647      	mov	r7, r8
 801eba0:	e773      	b.n	801ea8a <rmw_wait+0x18e>
 801eba2:	b10d      	cbz	r5, 801eba8 <rmw_wait+0x2ac>
 801eba4:	464f      	mov	r7, r9
 801eba6:	e76e      	b.n	801ea86 <rmw_wait+0x18a>
 801eba8:	462f      	mov	r7, r5
 801ebaa:	2e00      	cmp	r6, #0
 801ebac:	d1a2      	bne.n	801eaf4 <rmw_wait+0x1f8>
 801ebae:	e7c0      	b.n	801eb32 <rmw_wait+0x236>
 801ebb0:	4647      	mov	r7, r8
 801ebb2:	2e00      	cmp	r6, #0
 801ebb4:	d19e      	bne.n	801eaf4 <rmw_wait+0x1f8>
 801ebb6:	e7bc      	b.n	801eb32 <rmw_wait+0x236>
 801ebb8:	08022268 	.word	0x08022268
 801ebbc:	2001785c 	.word	0x2001785c
 801ebc0:	000f4240 	.word	0x000f4240

0801ebc4 <rmw_create_wait_set>:
 801ebc4:	b508      	push	{r3, lr}
 801ebc6:	4803      	ldr	r0, [pc, #12]	; (801ebd4 <rmw_create_wait_set+0x10>)
 801ebc8:	f7ff fc3e 	bl	801e448 <get_memory>
 801ebcc:	b108      	cbz	r0, 801ebd2 <rmw_create_wait_set+0xe>
 801ebce:	6880      	ldr	r0, [r0, #8]
 801ebd0:	3010      	adds	r0, #16
 801ebd2:	bd08      	pop	{r3, pc}
 801ebd4:	2001789c 	.word	0x2001789c

0801ebd8 <rmw_destroy_wait_set>:
 801ebd8:	b508      	push	{r3, lr}
 801ebda:	4b08      	ldr	r3, [pc, #32]	; (801ebfc <rmw_destroy_wait_set+0x24>)
 801ebdc:	6819      	ldr	r1, [r3, #0]
 801ebde:	b911      	cbnz	r1, 801ebe6 <rmw_destroy_wait_set+0xe>
 801ebe0:	e00a      	b.n	801ebf8 <rmw_destroy_wait_set+0x20>
 801ebe2:	6849      	ldr	r1, [r1, #4]
 801ebe4:	b141      	cbz	r1, 801ebf8 <rmw_destroy_wait_set+0x20>
 801ebe6:	688b      	ldr	r3, [r1, #8]
 801ebe8:	3310      	adds	r3, #16
 801ebea:	4298      	cmp	r0, r3
 801ebec:	d1f9      	bne.n	801ebe2 <rmw_destroy_wait_set+0xa>
 801ebee:	4803      	ldr	r0, [pc, #12]	; (801ebfc <rmw_destroy_wait_set+0x24>)
 801ebf0:	f7ff fc3a 	bl	801e468 <put_memory>
 801ebf4:	2000      	movs	r0, #0
 801ebf6:	bd08      	pop	{r3, pc}
 801ebf8:	2001      	movs	r0, #1
 801ebfa:	bd08      	pop	{r3, pc}
 801ebfc:	2001789c 	.word	0x2001789c

0801ec00 <rmw_uros_epoch_nanos>:
 801ec00:	4b05      	ldr	r3, [pc, #20]	; (801ec18 <rmw_uros_epoch_nanos+0x18>)
 801ec02:	681b      	ldr	r3, [r3, #0]
 801ec04:	b123      	cbz	r3, 801ec10 <rmw_uros_epoch_nanos+0x10>
 801ec06:	6898      	ldr	r0, [r3, #8]
 801ec08:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ec0c:	f7f9 bfbc 	b.w	8018b88 <uxr_epoch_nanos>
 801ec10:	2000      	movs	r0, #0
 801ec12:	2100      	movs	r1, #0
 801ec14:	4770      	bx	lr
 801ec16:	bf00      	nop
 801ec18:	2001785c 	.word	0x2001785c

0801ec1c <rosidl_runtime_c__int32__Sequence__init>:
 801ec1c:	b530      	push	{r4, r5, lr}
 801ec1e:	4604      	mov	r4, r0
 801ec20:	b087      	sub	sp, #28
 801ec22:	b130      	cbz	r0, 801ec32 <rosidl_runtime_c__int32__Sequence__init+0x16>
 801ec24:	460d      	mov	r5, r1
 801ec26:	b931      	cbnz	r1, 801ec36 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 801ec28:	460b      	mov	r3, r1
 801ec2a:	2001      	movs	r0, #1
 801ec2c:	60a5      	str	r5, [r4, #8]
 801ec2e:	e9c4 3500 	strd	r3, r5, [r4]
 801ec32:	b007      	add	sp, #28
 801ec34:	bd30      	pop	{r4, r5, pc}
 801ec36:	a801      	add	r0, sp, #4
 801ec38:	f7f7 f9ea 	bl	8016010 <rcutils_get_default_allocator>
 801ec3c:	9b01      	ldr	r3, [sp, #4]
 801ec3e:	9905      	ldr	r1, [sp, #20]
 801ec40:	00a8      	lsls	r0, r5, #2
 801ec42:	4798      	blx	r3
 801ec44:	4603      	mov	r3, r0
 801ec46:	2800      	cmp	r0, #0
 801ec48:	d1ef      	bne.n	801ec2a <rosidl_runtime_c__int32__Sequence__init+0xe>
 801ec4a:	e7f2      	b.n	801ec32 <rosidl_runtime_c__int32__Sequence__init+0x16>

0801ec4c <rosidl_runtime_c__int32__Sequence__fini>:
 801ec4c:	b188      	cbz	r0, 801ec72 <rosidl_runtime_c__int32__Sequence__fini+0x26>
 801ec4e:	6803      	ldr	r3, [r0, #0]
 801ec50:	b510      	push	{r4, lr}
 801ec52:	4604      	mov	r4, r0
 801ec54:	b086      	sub	sp, #24
 801ec56:	b153      	cbz	r3, 801ec6e <rosidl_runtime_c__int32__Sequence__fini+0x22>
 801ec58:	a801      	add	r0, sp, #4
 801ec5a:	f7f7 f9d9 	bl	8016010 <rcutils_get_default_allocator>
 801ec5e:	9b02      	ldr	r3, [sp, #8]
 801ec60:	9905      	ldr	r1, [sp, #20]
 801ec62:	6820      	ldr	r0, [r4, #0]
 801ec64:	4798      	blx	r3
 801ec66:	2300      	movs	r3, #0
 801ec68:	e9c4 3300 	strd	r3, r3, [r4]
 801ec6c:	60a3      	str	r3, [r4, #8]
 801ec6e:	b006      	add	sp, #24
 801ec70:	bd10      	pop	{r4, pc}
 801ec72:	4770      	bx	lr

0801ec74 <std_msgs__msg__Float32__init>:
 801ec74:	3800      	subs	r0, #0
 801ec76:	bf18      	it	ne
 801ec78:	2001      	movne	r0, #1
 801ec7a:	4770      	bx	lr

0801ec7c <std_msgs__msg__Float32__fini>:
 801ec7c:	4770      	bx	lr
 801ec7e:	bf00      	nop

0801ec80 <std_msgs__msg__Int32MultiArray__init>:
 801ec80:	b570      	push	{r4, r5, r6, lr}
 801ec82:	4605      	mov	r5, r0
 801ec84:	b1b0      	cbz	r0, 801ecb4 <std_msgs__msg__Int32MultiArray__init+0x34>
 801ec86:	f000 f8b3 	bl	801edf0 <std_msgs__msg__MultiArrayLayout__init>
 801ec8a:	4604      	mov	r4, r0
 801ec8c:	b148      	cbz	r0, 801eca2 <std_msgs__msg__Int32MultiArray__init+0x22>
 801ec8e:	f105 0610 	add.w	r6, r5, #16
 801ec92:	2100      	movs	r1, #0
 801ec94:	4630      	mov	r0, r6
 801ec96:	f7ff ffc1 	bl	801ec1c <rosidl_runtime_c__int32__Sequence__init>
 801ec9a:	4604      	mov	r4, r0
 801ec9c:	b168      	cbz	r0, 801ecba <std_msgs__msg__Int32MultiArray__init+0x3a>
 801ec9e:	4620      	mov	r0, r4
 801eca0:	bd70      	pop	{r4, r5, r6, pc}
 801eca2:	4628      	mov	r0, r5
 801eca4:	f000 f8b6 	bl	801ee14 <std_msgs__msg__MultiArrayLayout__fini>
 801eca8:	f105 0010 	add.w	r0, r5, #16
 801ecac:	f7ff ffce 	bl	801ec4c <rosidl_runtime_c__int32__Sequence__fini>
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	bd70      	pop	{r4, r5, r6, pc}
 801ecb4:	4604      	mov	r4, r0
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	bd70      	pop	{r4, r5, r6, pc}
 801ecba:	4628      	mov	r0, r5
 801ecbc:	f000 f8aa 	bl	801ee14 <std_msgs__msg__MultiArrayLayout__fini>
 801ecc0:	4630      	mov	r0, r6
 801ecc2:	f7ff ffc3 	bl	801ec4c <rosidl_runtime_c__int32__Sequence__fini>
 801ecc6:	e7ea      	b.n	801ec9e <std_msgs__msg__Int32MultiArray__init+0x1e>

0801ecc8 <std_msgs__msg__Int32MultiArray__fini>:
 801ecc8:	b148      	cbz	r0, 801ecde <std_msgs__msg__Int32MultiArray__fini+0x16>
 801ecca:	b510      	push	{r4, lr}
 801eccc:	4604      	mov	r4, r0
 801ecce:	f000 f8a1 	bl	801ee14 <std_msgs__msg__MultiArrayLayout__fini>
 801ecd2:	f104 0010 	add.w	r0, r4, #16
 801ecd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecda:	f7ff bfb7 	b.w	801ec4c <rosidl_runtime_c__int32__Sequence__fini>
 801ecde:	4770      	bx	lr

0801ece0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801ece0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ece4:	b086      	sub	sp, #24
 801ece6:	4689      	mov	r9, r1
 801ece8:	4682      	mov	sl, r0
 801ecea:	a801      	add	r0, sp, #4
 801ecec:	f7f7 f990 	bl	8016010 <rcutils_get_default_allocator>
 801ecf0:	f1b9 0f00 	cmp.w	r9, #0
 801ecf4:	d02e      	beq.n	801ed54 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 801ecf6:	2114      	movs	r1, #20
 801ecf8:	4648      	mov	r0, r9
 801ecfa:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 801ecfe:	4642      	mov	r2, r8
 801ed00:	4798      	blx	r3
 801ed02:	4607      	mov	r7, r0
 801ed04:	b380      	cbz	r0, 801ed68 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 801ed06:	4606      	mov	r6, r0
 801ed08:	2400      	movs	r4, #0
 801ed0a:	e003      	b.n	801ed14 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 801ed0c:	3401      	adds	r4, #1
 801ed0e:	3614      	adds	r6, #20
 801ed10:	45a1      	cmp	r9, r4
 801ed12:	d020      	beq.n	801ed56 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 801ed14:	4630      	mov	r0, r6
 801ed16:	f001 fb15 	bl	8020344 <rosidl_runtime_c__String__init>
 801ed1a:	4605      	mov	r5, r0
 801ed1c:	2800      	cmp	r0, #0
 801ed1e:	d1f5      	bne.n	801ed0c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801ed20:	4630      	mov	r0, r6
 801ed22:	f001 fb25 	bl	8020370 <rosidl_runtime_c__String__fini>
 801ed26:	45a1      	cmp	r9, r4
 801ed28:	d915      	bls.n	801ed56 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 801ed2a:	b15c      	cbz	r4, 801ed44 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 801ed2c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801ed30:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801ed34:	3c14      	subs	r4, #20
 801ed36:	4620      	mov	r0, r4
 801ed38:	f001 fb1a 	bl	8020370 <rosidl_runtime_c__String__fini>
 801ed3c:	42a7      	cmp	r7, r4
 801ed3e:	f1a4 0414 	sub.w	r4, r4, #20
 801ed42:	d1f8      	bne.n	801ed36 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 801ed44:	4638      	mov	r0, r7
 801ed46:	9b02      	ldr	r3, [sp, #8]
 801ed48:	4641      	mov	r1, r8
 801ed4a:	4798      	blx	r3
 801ed4c:	4628      	mov	r0, r5
 801ed4e:	b006      	add	sp, #24
 801ed50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed54:	464f      	mov	r7, r9
 801ed56:	2501      	movs	r5, #1
 801ed58:	f8ca 9008 	str.w	r9, [sl, #8]
 801ed5c:	e9ca 7900 	strd	r7, r9, [sl]
 801ed60:	4628      	mov	r0, r5
 801ed62:	b006      	add	sp, #24
 801ed64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed68:	4605      	mov	r5, r0
 801ed6a:	e7f9      	b.n	801ed60 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

0801ed6c <std_msgs__msg__MultiArrayDimension__init>:
 801ed6c:	b538      	push	{r3, r4, r5, lr}
 801ed6e:	4604      	mov	r4, r0
 801ed70:	b128      	cbz	r0, 801ed7e <std_msgs__msg__MultiArrayDimension__init+0x12>
 801ed72:	f001 fae7 	bl	8020344 <rosidl_runtime_c__String__init>
 801ed76:	4605      	mov	r5, r0
 801ed78:	b120      	cbz	r0, 801ed84 <std_msgs__msg__MultiArrayDimension__init+0x18>
 801ed7a:	4628      	mov	r0, r5
 801ed7c:	bd38      	pop	{r3, r4, r5, pc}
 801ed7e:	4605      	mov	r5, r0
 801ed80:	4628      	mov	r0, r5
 801ed82:	bd38      	pop	{r3, r4, r5, pc}
 801ed84:	4620      	mov	r0, r4
 801ed86:	f001 faf3 	bl	8020370 <rosidl_runtime_c__String__fini>
 801ed8a:	4628      	mov	r0, r5
 801ed8c:	bd38      	pop	{r3, r4, r5, pc}
 801ed8e:	bf00      	nop

0801ed90 <std_msgs__msg__MultiArrayDimension__fini>:
 801ed90:	b108      	cbz	r0, 801ed96 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801ed92:	f001 baed 	b.w	8020370 <rosidl_runtime_c__String__fini>
 801ed96:	4770      	bx	lr

0801ed98 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 801ed98:	b108      	cbz	r0, 801ed9e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 801ed9a:	f7ff bfa1 	b.w	801ece0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801ed9e:	4770      	bx	lr

0801eda0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801eda0:	b320      	cbz	r0, 801edec <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801eda2:	b530      	push	{r4, r5, lr}
 801eda4:	b087      	sub	sp, #28
 801eda6:	4605      	mov	r5, r0
 801eda8:	a801      	add	r0, sp, #4
 801edaa:	f7f7 f931 	bl	8016010 <rcutils_get_default_allocator>
 801edae:	682a      	ldr	r2, [r5, #0]
 801edb0:	b1b2      	cbz	r2, 801ede0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 801edb2:	68a9      	ldr	r1, [r5, #8]
 801edb4:	b161      	cbz	r1, 801edd0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801edb6:	2400      	movs	r4, #0
 801edb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801edbc:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 801edc0:	d010      	beq.n	801ede4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 801edc2:	f001 fad5 	bl	8020370 <rosidl_runtime_c__String__fini>
 801edc6:	3401      	adds	r4, #1
 801edc8:	68a9      	ldr	r1, [r5, #8]
 801edca:	682a      	ldr	r2, [r5, #0]
 801edcc:	428c      	cmp	r4, r1
 801edce:	d3f3      	bcc.n	801edb8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801edd0:	9b02      	ldr	r3, [sp, #8]
 801edd2:	4610      	mov	r0, r2
 801edd4:	9905      	ldr	r1, [sp, #20]
 801edd6:	4798      	blx	r3
 801edd8:	2300      	movs	r3, #0
 801edda:	e9c5 3300 	strd	r3, r3, [r5]
 801edde:	60ab      	str	r3, [r5, #8]
 801ede0:	b007      	add	sp, #28
 801ede2:	bd30      	pop	{r4, r5, pc}
 801ede4:	3401      	adds	r4, #1
 801ede6:	428c      	cmp	r4, r1
 801ede8:	d3e6      	bcc.n	801edb8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801edea:	e7f1      	b.n	801edd0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801edec:	4770      	bx	lr
 801edee:	bf00      	nop

0801edf0 <std_msgs__msg__MultiArrayLayout__init>:
 801edf0:	b538      	push	{r3, r4, r5, lr}
 801edf2:	4604      	mov	r4, r0
 801edf4:	b130      	cbz	r0, 801ee04 <std_msgs__msg__MultiArrayLayout__init+0x14>
 801edf6:	2100      	movs	r1, #0
 801edf8:	f7ff ffce 	bl	801ed98 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801edfc:	4605      	mov	r5, r0
 801edfe:	b120      	cbz	r0, 801ee0a <std_msgs__msg__MultiArrayLayout__init+0x1a>
 801ee00:	4628      	mov	r0, r5
 801ee02:	bd38      	pop	{r3, r4, r5, pc}
 801ee04:	4605      	mov	r5, r0
 801ee06:	4628      	mov	r0, r5
 801ee08:	bd38      	pop	{r3, r4, r5, pc}
 801ee0a:	4620      	mov	r0, r4
 801ee0c:	f7ff ffc8 	bl	801eda0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801ee10:	4628      	mov	r0, r5
 801ee12:	bd38      	pop	{r3, r4, r5, pc}

0801ee14 <std_msgs__msg__MultiArrayLayout__fini>:
 801ee14:	b108      	cbz	r0, 801ee1a <std_msgs__msg__MultiArrayLayout__fini+0x6>
 801ee16:	f7ff bfc3 	b.w	801eda0 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801ee1a:	4770      	bx	lr

0801ee1c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 801ee1c:	f7ff bfa6 	b.w	801ed6c <std_msgs__msg__MultiArrayDimension__init>

0801ee20 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801ee20:	f7ff bfb6 	b.w	801ed90 <std_msgs__msg__MultiArrayDimension__fini>

0801ee24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801ee24:	4b04      	ldr	r3, [pc, #16]	; (801ee38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801ee26:	681a      	ldr	r2, [r3, #0]
 801ee28:	b10a      	cbz	r2, 801ee2e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 801ee2a:	4803      	ldr	r0, [pc, #12]	; (801ee38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801ee2c:	4770      	bx	lr
 801ee2e:	4a03      	ldr	r2, [pc, #12]	; (801ee3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 801ee30:	4801      	ldr	r0, [pc, #4]	; (801ee38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801ee32:	6812      	ldr	r2, [r2, #0]
 801ee34:	601a      	str	r2, [r3, #0]
 801ee36:	4770      	bx	lr
 801ee38:	20000864 	.word	0x20000864
 801ee3c:	200005bc 	.word	0x200005bc

0801ee40 <_MultiArrayDimension__cdr_serialize>:
 801ee40:	b1d0      	cbz	r0, 801ee78 <_MultiArrayDimension__cdr_serialize+0x38>
 801ee42:	b570      	push	{r4, r5, r6, lr}
 801ee44:	6806      	ldr	r6, [r0, #0]
 801ee46:	4604      	mov	r4, r0
 801ee48:	460d      	mov	r5, r1
 801ee4a:	b196      	cbz	r6, 801ee72 <_MultiArrayDimension__cdr_serialize+0x32>
 801ee4c:	4630      	mov	r0, r6
 801ee4e:	f7e1 fa01 	bl	8000254 <strlen>
 801ee52:	1c42      	adds	r2, r0, #1
 801ee54:	4631      	mov	r1, r6
 801ee56:	6060      	str	r0, [r4, #4]
 801ee58:	4628      	mov	r0, r5
 801ee5a:	f7f9 f87b 	bl	8017f54 <ucdr_serialize_sequence_char>
 801ee5e:	68e1      	ldr	r1, [r4, #12]
 801ee60:	4628      	mov	r0, r5
 801ee62:	f7f4 fb1b 	bl	801349c <ucdr_serialize_uint32_t>
 801ee66:	6921      	ldr	r1, [r4, #16]
 801ee68:	4628      	mov	r0, r5
 801ee6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ee6e:	f7f4 bb15 	b.w	801349c <ucdr_serialize_uint32_t>
 801ee72:	4632      	mov	r2, r6
 801ee74:	4630      	mov	r0, r6
 801ee76:	e7ed      	b.n	801ee54 <_MultiArrayDimension__cdr_serialize+0x14>
 801ee78:	4770      	bx	lr
 801ee7a:	bf00      	nop

0801ee7c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801ee7c:	b570      	push	{r4, r5, r6, lr}
 801ee7e:	4604      	mov	r4, r0
 801ee80:	b1b0      	cbz	r0, 801eeb0 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801ee82:	460d      	mov	r5, r1
 801ee84:	2104      	movs	r1, #4
 801ee86:	4628      	mov	r0, r5
 801ee88:	f7f5 fc8e 	bl	80147a8 <ucdr_alignment>
 801ee8c:	6866      	ldr	r6, [r4, #4]
 801ee8e:	1d6b      	adds	r3, r5, #5
 801ee90:	2104      	movs	r1, #4
 801ee92:	f1c5 0504 	rsb	r5, r5, #4
 801ee96:	4433      	add	r3, r6
 801ee98:	181e      	adds	r6, r3, r0
 801ee9a:	4630      	mov	r0, r6
 801ee9c:	f7f5 fc84 	bl	80147a8 <ucdr_alignment>
 801eea0:	2104      	movs	r1, #4
 801eea2:	1844      	adds	r4, r0, r1
 801eea4:	4434      	add	r4, r6
 801eea6:	4620      	mov	r0, r4
 801eea8:	f7f5 fc7e 	bl	80147a8 <ucdr_alignment>
 801eeac:	4428      	add	r0, r5
 801eeae:	4420      	add	r0, r4
 801eeb0:	bd70      	pop	{r4, r5, r6, pc}
 801eeb2:	bf00      	nop

0801eeb4 <_MultiArrayDimension__cdr_deserialize>:
 801eeb4:	b570      	push	{r4, r5, r6, lr}
 801eeb6:	460c      	mov	r4, r1
 801eeb8:	b082      	sub	sp, #8
 801eeba:	b1d9      	cbz	r1, 801eef4 <_MultiArrayDimension__cdr_deserialize+0x40>
 801eebc:	688e      	ldr	r6, [r1, #8]
 801eebe:	ab01      	add	r3, sp, #4
 801eec0:	6809      	ldr	r1, [r1, #0]
 801eec2:	4605      	mov	r5, r0
 801eec4:	4632      	mov	r2, r6
 801eec6:	f7f9 f857 	bl	8017f78 <ucdr_deserialize_sequence_char>
 801eeca:	9b01      	ldr	r3, [sp, #4]
 801eecc:	b970      	cbnz	r0, 801eeec <_MultiArrayDimension__cdr_deserialize+0x38>
 801eece:	429e      	cmp	r6, r3
 801eed0:	d313      	bcc.n	801eefa <_MultiArrayDimension__cdr_deserialize+0x46>
 801eed2:	f104 010c 	add.w	r1, r4, #12
 801eed6:	4628      	mov	r0, r5
 801eed8:	f7f4 fc10 	bl	80136fc <ucdr_deserialize_uint32_t>
 801eedc:	f104 0110 	add.w	r1, r4, #16
 801eee0:	4628      	mov	r0, r5
 801eee2:	b002      	add	sp, #8
 801eee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eee8:	f7f4 bc08 	b.w	80136fc <ucdr_deserialize_uint32_t>
 801eeec:	b103      	cbz	r3, 801eef0 <_MultiArrayDimension__cdr_deserialize+0x3c>
 801eeee:	3b01      	subs	r3, #1
 801eef0:	6063      	str	r3, [r4, #4]
 801eef2:	e7ee      	b.n	801eed2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 801eef4:	4608      	mov	r0, r1
 801eef6:	b002      	add	sp, #8
 801eef8:	bd70      	pop	{r4, r5, r6, pc}
 801eefa:	2101      	movs	r1, #1
 801eefc:	75a8      	strb	r0, [r5, #22]
 801eefe:	7569      	strb	r1, [r5, #21]
 801ef00:	6060      	str	r0, [r4, #4]
 801ef02:	4628      	mov	r0, r5
 801ef04:	f7f5 fc68 	bl	80147d8 <ucdr_align_to>
 801ef08:	9901      	ldr	r1, [sp, #4]
 801ef0a:	4628      	mov	r0, r5
 801ef0c:	f7f5 fc9c 	bl	8014848 <ucdr_advance_buffer>
 801ef10:	e7df      	b.n	801eed2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 801ef12:	bf00      	nop

0801ef14 <_MultiArrayDimension__max_serialized_size>:
 801ef14:	b510      	push	{r4, lr}
 801ef16:	2104      	movs	r1, #4
 801ef18:	2000      	movs	r0, #0
 801ef1a:	f7f5 fc45 	bl	80147a8 <ucdr_alignment>
 801ef1e:	2104      	movs	r1, #4
 801ef20:	1844      	adds	r4, r0, r1
 801ef22:	4620      	mov	r0, r4
 801ef24:	f7f5 fc40 	bl	80147a8 <ucdr_alignment>
 801ef28:	3004      	adds	r0, #4
 801ef2a:	4420      	add	r0, r4
 801ef2c:	bd10      	pop	{r4, pc}
 801ef2e:	bf00      	nop

0801ef30 <_MultiArrayDimension__get_serialized_size>:
 801ef30:	b510      	push	{r4, lr}
 801ef32:	4604      	mov	r4, r0
 801ef34:	b190      	cbz	r0, 801ef5c <_MultiArrayDimension__get_serialized_size+0x2c>
 801ef36:	2104      	movs	r1, #4
 801ef38:	2000      	movs	r0, #0
 801ef3a:	f7f5 fc35 	bl	80147a8 <ucdr_alignment>
 801ef3e:	6863      	ldr	r3, [r4, #4]
 801ef40:	2104      	movs	r1, #4
 801ef42:	3305      	adds	r3, #5
 801ef44:	181c      	adds	r4, r3, r0
 801ef46:	4620      	mov	r0, r4
 801ef48:	f7f5 fc2e 	bl	80147a8 <ucdr_alignment>
 801ef4c:	2104      	movs	r1, #4
 801ef4e:	4408      	add	r0, r1
 801ef50:	4404      	add	r4, r0
 801ef52:	4620      	mov	r0, r4
 801ef54:	f7f5 fc28 	bl	80147a8 <ucdr_alignment>
 801ef58:	3004      	adds	r0, #4
 801ef5a:	4420      	add	r0, r4
 801ef5c:	bd10      	pop	{r4, pc}
 801ef5e:	bf00      	nop

0801ef60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801ef60:	4800      	ldr	r0, [pc, #0]	; (801ef64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801ef62:	4770      	bx	lr
 801ef64:	20000870 	.word	0x20000870

0801ef68 <ucdr_serialize_endian_array_char>:
 801ef68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef6c:	4619      	mov	r1, r3
 801ef6e:	461f      	mov	r7, r3
 801ef70:	4605      	mov	r5, r0
 801ef72:	4690      	mov	r8, r2
 801ef74:	f7f5 fbc0 	bl	80146f8 <ucdr_check_buffer_available_for>
 801ef78:	b9e0      	cbnz	r0, 801efb4 <ucdr_serialize_endian_array_char+0x4c>
 801ef7a:	463e      	mov	r6, r7
 801ef7c:	e00b      	b.n	801ef96 <ucdr_serialize_endian_array_char+0x2e>
 801ef7e:	4441      	add	r1, r8
 801ef80:	68a8      	ldr	r0, [r5, #8]
 801ef82:	4622      	mov	r2, r4
 801ef84:	1b36      	subs	r6, r6, r4
 801ef86:	f002 f908 	bl	802119a <memcpy>
 801ef8a:	68ab      	ldr	r3, [r5, #8]
 801ef8c:	6928      	ldr	r0, [r5, #16]
 801ef8e:	4423      	add	r3, r4
 801ef90:	4420      	add	r0, r4
 801ef92:	60ab      	str	r3, [r5, #8]
 801ef94:	6128      	str	r0, [r5, #16]
 801ef96:	4631      	mov	r1, r6
 801ef98:	2201      	movs	r2, #1
 801ef9a:	4628      	mov	r0, r5
 801ef9c:	f7f5 fc36 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801efa0:	1bb9      	subs	r1, r7, r6
 801efa2:	4604      	mov	r4, r0
 801efa4:	2800      	cmp	r0, #0
 801efa6:	d1ea      	bne.n	801ef7e <ucdr_serialize_endian_array_char+0x16>
 801efa8:	2301      	movs	r3, #1
 801efaa:	7da8      	ldrb	r0, [r5, #22]
 801efac:	756b      	strb	r3, [r5, #21]
 801efae:	4058      	eors	r0, r3
 801efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efb4:	463a      	mov	r2, r7
 801efb6:	4641      	mov	r1, r8
 801efb8:	68a8      	ldr	r0, [r5, #8]
 801efba:	f002 f8ee 	bl	802119a <memcpy>
 801efbe:	68aa      	ldr	r2, [r5, #8]
 801efc0:	692b      	ldr	r3, [r5, #16]
 801efc2:	443a      	add	r2, r7
 801efc4:	443b      	add	r3, r7
 801efc6:	60aa      	str	r2, [r5, #8]
 801efc8:	612b      	str	r3, [r5, #16]
 801efca:	e7ed      	b.n	801efa8 <ucdr_serialize_endian_array_char+0x40>

0801efcc <ucdr_deserialize_endian_array_char>:
 801efcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efd0:	4619      	mov	r1, r3
 801efd2:	461f      	mov	r7, r3
 801efd4:	4605      	mov	r5, r0
 801efd6:	4690      	mov	r8, r2
 801efd8:	f7f5 fb8e 	bl	80146f8 <ucdr_check_buffer_available_for>
 801efdc:	b9e8      	cbnz	r0, 801f01a <ucdr_deserialize_endian_array_char+0x4e>
 801efde:	463e      	mov	r6, r7
 801efe0:	e00c      	b.n	801effc <ucdr_deserialize_endian_array_char+0x30>
 801efe2:	eb08 0003 	add.w	r0, r8, r3
 801efe6:	68a9      	ldr	r1, [r5, #8]
 801efe8:	4622      	mov	r2, r4
 801efea:	1b36      	subs	r6, r6, r4
 801efec:	f002 f8d5 	bl	802119a <memcpy>
 801eff0:	68ab      	ldr	r3, [r5, #8]
 801eff2:	6928      	ldr	r0, [r5, #16]
 801eff4:	4423      	add	r3, r4
 801eff6:	4420      	add	r0, r4
 801eff8:	60ab      	str	r3, [r5, #8]
 801effa:	6128      	str	r0, [r5, #16]
 801effc:	4631      	mov	r1, r6
 801effe:	2201      	movs	r2, #1
 801f000:	4628      	mov	r0, r5
 801f002:	f7f5 fc03 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f006:	1bbb      	subs	r3, r7, r6
 801f008:	4604      	mov	r4, r0
 801f00a:	2800      	cmp	r0, #0
 801f00c:	d1e9      	bne.n	801efe2 <ucdr_deserialize_endian_array_char+0x16>
 801f00e:	2301      	movs	r3, #1
 801f010:	7da8      	ldrb	r0, [r5, #22]
 801f012:	756b      	strb	r3, [r5, #21]
 801f014:	4058      	eors	r0, r3
 801f016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f01a:	463a      	mov	r2, r7
 801f01c:	68a9      	ldr	r1, [r5, #8]
 801f01e:	4640      	mov	r0, r8
 801f020:	f002 f8bb 	bl	802119a <memcpy>
 801f024:	68aa      	ldr	r2, [r5, #8]
 801f026:	692b      	ldr	r3, [r5, #16]
 801f028:	443a      	add	r2, r7
 801f02a:	443b      	add	r3, r7
 801f02c:	60aa      	str	r2, [r5, #8]
 801f02e:	612b      	str	r3, [r5, #16]
 801f030:	e7ed      	b.n	801f00e <ucdr_deserialize_endian_array_char+0x42>
 801f032:	bf00      	nop

0801f034 <ucdr_serialize_array_uint8_t>:
 801f034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f038:	4688      	mov	r8, r1
 801f03a:	4611      	mov	r1, r2
 801f03c:	4617      	mov	r7, r2
 801f03e:	4605      	mov	r5, r0
 801f040:	f7f5 fb5a 	bl	80146f8 <ucdr_check_buffer_available_for>
 801f044:	b9e0      	cbnz	r0, 801f080 <ucdr_serialize_array_uint8_t+0x4c>
 801f046:	463e      	mov	r6, r7
 801f048:	e00b      	b.n	801f062 <ucdr_serialize_array_uint8_t+0x2e>
 801f04a:	4441      	add	r1, r8
 801f04c:	68a8      	ldr	r0, [r5, #8]
 801f04e:	4622      	mov	r2, r4
 801f050:	1b36      	subs	r6, r6, r4
 801f052:	f002 f8a2 	bl	802119a <memcpy>
 801f056:	68ab      	ldr	r3, [r5, #8]
 801f058:	6928      	ldr	r0, [r5, #16]
 801f05a:	4423      	add	r3, r4
 801f05c:	4420      	add	r0, r4
 801f05e:	60ab      	str	r3, [r5, #8]
 801f060:	6128      	str	r0, [r5, #16]
 801f062:	4631      	mov	r1, r6
 801f064:	2201      	movs	r2, #1
 801f066:	4628      	mov	r0, r5
 801f068:	f7f5 fbd0 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f06c:	1bb9      	subs	r1, r7, r6
 801f06e:	4604      	mov	r4, r0
 801f070:	2800      	cmp	r0, #0
 801f072:	d1ea      	bne.n	801f04a <ucdr_serialize_array_uint8_t+0x16>
 801f074:	2301      	movs	r3, #1
 801f076:	7da8      	ldrb	r0, [r5, #22]
 801f078:	756b      	strb	r3, [r5, #21]
 801f07a:	4058      	eors	r0, r3
 801f07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f080:	463a      	mov	r2, r7
 801f082:	4641      	mov	r1, r8
 801f084:	68a8      	ldr	r0, [r5, #8]
 801f086:	f002 f888 	bl	802119a <memcpy>
 801f08a:	68aa      	ldr	r2, [r5, #8]
 801f08c:	692b      	ldr	r3, [r5, #16]
 801f08e:	443a      	add	r2, r7
 801f090:	443b      	add	r3, r7
 801f092:	60aa      	str	r2, [r5, #8]
 801f094:	612b      	str	r3, [r5, #16]
 801f096:	e7ed      	b.n	801f074 <ucdr_serialize_array_uint8_t+0x40>

0801f098 <ucdr_serialize_endian_array_uint8_t>:
 801f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f09c:	4619      	mov	r1, r3
 801f09e:	461f      	mov	r7, r3
 801f0a0:	4605      	mov	r5, r0
 801f0a2:	4690      	mov	r8, r2
 801f0a4:	f7f5 fb28 	bl	80146f8 <ucdr_check_buffer_available_for>
 801f0a8:	b9e0      	cbnz	r0, 801f0e4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801f0aa:	463e      	mov	r6, r7
 801f0ac:	e00b      	b.n	801f0c6 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801f0ae:	4441      	add	r1, r8
 801f0b0:	68a8      	ldr	r0, [r5, #8]
 801f0b2:	4622      	mov	r2, r4
 801f0b4:	1b36      	subs	r6, r6, r4
 801f0b6:	f002 f870 	bl	802119a <memcpy>
 801f0ba:	68ab      	ldr	r3, [r5, #8]
 801f0bc:	6928      	ldr	r0, [r5, #16]
 801f0be:	4423      	add	r3, r4
 801f0c0:	4420      	add	r0, r4
 801f0c2:	60ab      	str	r3, [r5, #8]
 801f0c4:	6128      	str	r0, [r5, #16]
 801f0c6:	4631      	mov	r1, r6
 801f0c8:	2201      	movs	r2, #1
 801f0ca:	4628      	mov	r0, r5
 801f0cc:	f7f5 fb9e 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f0d0:	1bb9      	subs	r1, r7, r6
 801f0d2:	4604      	mov	r4, r0
 801f0d4:	2800      	cmp	r0, #0
 801f0d6:	d1ea      	bne.n	801f0ae <ucdr_serialize_endian_array_uint8_t+0x16>
 801f0d8:	2301      	movs	r3, #1
 801f0da:	7da8      	ldrb	r0, [r5, #22]
 801f0dc:	756b      	strb	r3, [r5, #21]
 801f0de:	4058      	eors	r0, r3
 801f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0e4:	463a      	mov	r2, r7
 801f0e6:	4641      	mov	r1, r8
 801f0e8:	68a8      	ldr	r0, [r5, #8]
 801f0ea:	f002 f856 	bl	802119a <memcpy>
 801f0ee:	68aa      	ldr	r2, [r5, #8]
 801f0f0:	692b      	ldr	r3, [r5, #16]
 801f0f2:	443a      	add	r2, r7
 801f0f4:	443b      	add	r3, r7
 801f0f6:	60aa      	str	r2, [r5, #8]
 801f0f8:	612b      	str	r3, [r5, #16]
 801f0fa:	e7ed      	b.n	801f0d8 <ucdr_serialize_endian_array_uint8_t+0x40>

0801f0fc <ucdr_deserialize_array_uint8_t>:
 801f0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f100:	4688      	mov	r8, r1
 801f102:	4611      	mov	r1, r2
 801f104:	4617      	mov	r7, r2
 801f106:	4605      	mov	r5, r0
 801f108:	f7f5 faf6 	bl	80146f8 <ucdr_check_buffer_available_for>
 801f10c:	b9e8      	cbnz	r0, 801f14a <ucdr_deserialize_array_uint8_t+0x4e>
 801f10e:	463e      	mov	r6, r7
 801f110:	e00c      	b.n	801f12c <ucdr_deserialize_array_uint8_t+0x30>
 801f112:	eb08 0003 	add.w	r0, r8, r3
 801f116:	68a9      	ldr	r1, [r5, #8]
 801f118:	4622      	mov	r2, r4
 801f11a:	1b36      	subs	r6, r6, r4
 801f11c:	f002 f83d 	bl	802119a <memcpy>
 801f120:	68ab      	ldr	r3, [r5, #8]
 801f122:	6928      	ldr	r0, [r5, #16]
 801f124:	4423      	add	r3, r4
 801f126:	4420      	add	r0, r4
 801f128:	60ab      	str	r3, [r5, #8]
 801f12a:	6128      	str	r0, [r5, #16]
 801f12c:	4631      	mov	r1, r6
 801f12e:	2201      	movs	r2, #1
 801f130:	4628      	mov	r0, r5
 801f132:	f7f5 fb6b 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f136:	1bbb      	subs	r3, r7, r6
 801f138:	4604      	mov	r4, r0
 801f13a:	2800      	cmp	r0, #0
 801f13c:	d1e9      	bne.n	801f112 <ucdr_deserialize_array_uint8_t+0x16>
 801f13e:	2301      	movs	r3, #1
 801f140:	7da8      	ldrb	r0, [r5, #22]
 801f142:	756b      	strb	r3, [r5, #21]
 801f144:	4058      	eors	r0, r3
 801f146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f14a:	463a      	mov	r2, r7
 801f14c:	68a9      	ldr	r1, [r5, #8]
 801f14e:	4640      	mov	r0, r8
 801f150:	f002 f823 	bl	802119a <memcpy>
 801f154:	68aa      	ldr	r2, [r5, #8]
 801f156:	692b      	ldr	r3, [r5, #16]
 801f158:	443a      	add	r2, r7
 801f15a:	443b      	add	r3, r7
 801f15c:	60aa      	str	r2, [r5, #8]
 801f15e:	612b      	str	r3, [r5, #16]
 801f160:	e7ed      	b.n	801f13e <ucdr_deserialize_array_uint8_t+0x42>
 801f162:	bf00      	nop

0801f164 <ucdr_deserialize_endian_array_uint8_t>:
 801f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f168:	4619      	mov	r1, r3
 801f16a:	461f      	mov	r7, r3
 801f16c:	4605      	mov	r5, r0
 801f16e:	4690      	mov	r8, r2
 801f170:	f7f5 fac2 	bl	80146f8 <ucdr_check_buffer_available_for>
 801f174:	b9e8      	cbnz	r0, 801f1b2 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801f176:	463e      	mov	r6, r7
 801f178:	e00c      	b.n	801f194 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801f17a:	eb08 0003 	add.w	r0, r8, r3
 801f17e:	68a9      	ldr	r1, [r5, #8]
 801f180:	4622      	mov	r2, r4
 801f182:	1b36      	subs	r6, r6, r4
 801f184:	f002 f809 	bl	802119a <memcpy>
 801f188:	68ab      	ldr	r3, [r5, #8]
 801f18a:	6928      	ldr	r0, [r5, #16]
 801f18c:	4423      	add	r3, r4
 801f18e:	4420      	add	r0, r4
 801f190:	60ab      	str	r3, [r5, #8]
 801f192:	6128      	str	r0, [r5, #16]
 801f194:	4631      	mov	r1, r6
 801f196:	2201      	movs	r2, #1
 801f198:	4628      	mov	r0, r5
 801f19a:	f7f5 fb37 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f19e:	1bbb      	subs	r3, r7, r6
 801f1a0:	4604      	mov	r4, r0
 801f1a2:	2800      	cmp	r0, #0
 801f1a4:	d1e9      	bne.n	801f17a <ucdr_deserialize_endian_array_uint8_t+0x16>
 801f1a6:	2301      	movs	r3, #1
 801f1a8:	7da8      	ldrb	r0, [r5, #22]
 801f1aa:	756b      	strb	r3, [r5, #21]
 801f1ac:	4058      	eors	r0, r3
 801f1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1b2:	463a      	mov	r2, r7
 801f1b4:	68a9      	ldr	r1, [r5, #8]
 801f1b6:	4640      	mov	r0, r8
 801f1b8:	f001 ffef 	bl	802119a <memcpy>
 801f1bc:	68aa      	ldr	r2, [r5, #8]
 801f1be:	692b      	ldr	r3, [r5, #16]
 801f1c0:	443a      	add	r2, r7
 801f1c2:	443b      	add	r3, r7
 801f1c4:	60aa      	str	r2, [r5, #8]
 801f1c6:	612b      	str	r3, [r5, #16]
 801f1c8:	e7ed      	b.n	801f1a6 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801f1ca:	bf00      	nop

0801f1cc <ucdr_serialize_endian_array_int32_t>:
 801f1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1d0:	4604      	mov	r4, r0
 801f1d2:	4688      	mov	r8, r1
 801f1d4:	2104      	movs	r1, #4
 801f1d6:	4616      	mov	r6, r2
 801f1d8:	461f      	mov	r7, r3
 801f1da:	f7f5 faed 	bl	80147b8 <ucdr_buffer_alignment>
 801f1de:	4601      	mov	r1, r0
 801f1e0:	4620      	mov	r0, r4
 801f1e2:	7d65      	ldrb	r5, [r4, #21]
 801f1e4:	f7f5 fb30 	bl	8014848 <ucdr_advance_buffer>
 801f1e8:	f1b8 0f01 	cmp.w	r8, #1
 801f1ec:	7565      	strb	r5, [r4, #21]
 801f1ee:	d010      	beq.n	801f212 <ucdr_serialize_endian_array_int32_t+0x46>
 801f1f0:	b157      	cbz	r7, 801f208 <ucdr_serialize_endian_array_int32_t+0x3c>
 801f1f2:	3e04      	subs	r6, #4
 801f1f4:	2500      	movs	r5, #0
 801f1f6:	3501      	adds	r5, #1
 801f1f8:	f856 2f04 	ldr.w	r2, [r6, #4]!
 801f1fc:	4641      	mov	r1, r8
 801f1fe:	4620      	mov	r0, r4
 801f200:	f7f4 fdfe 	bl	8013e00 <ucdr_serialize_endian_int32_t>
 801f204:	42af      	cmp	r7, r5
 801f206:	d1f6      	bne.n	801f1f6 <ucdr_serialize_endian_array_int32_t+0x2a>
 801f208:	7da0      	ldrb	r0, [r4, #22]
 801f20a:	f080 0001 	eor.w	r0, r0, #1
 801f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f212:	00bf      	lsls	r7, r7, #2
 801f214:	4620      	mov	r0, r4
 801f216:	4639      	mov	r1, r7
 801f218:	f7f5 fa6e 	bl	80146f8 <ucdr_check_buffer_available_for>
 801f21c:	b9f8      	cbnz	r0, 801f25e <ucdr_serialize_endian_array_int32_t+0x92>
 801f21e:	46b8      	mov	r8, r7
 801f220:	e00c      	b.n	801f23c <ucdr_serialize_endian_array_int32_t+0x70>
 801f222:	462a      	mov	r2, r5
 801f224:	4431      	add	r1, r6
 801f226:	68a0      	ldr	r0, [r4, #8]
 801f228:	eba8 0805 	sub.w	r8, r8, r5
 801f22c:	f001 ffb5 	bl	802119a <memcpy>
 801f230:	68a2      	ldr	r2, [r4, #8]
 801f232:	6923      	ldr	r3, [r4, #16]
 801f234:	442a      	add	r2, r5
 801f236:	442b      	add	r3, r5
 801f238:	60a2      	str	r2, [r4, #8]
 801f23a:	6123      	str	r3, [r4, #16]
 801f23c:	4641      	mov	r1, r8
 801f23e:	2204      	movs	r2, #4
 801f240:	4620      	mov	r0, r4
 801f242:	f7f5 fae3 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f246:	eba7 0108 	sub.w	r1, r7, r8
 801f24a:	4605      	mov	r5, r0
 801f24c:	2800      	cmp	r0, #0
 801f24e:	d1e8      	bne.n	801f222 <ucdr_serialize_endian_array_int32_t+0x56>
 801f250:	2304      	movs	r3, #4
 801f252:	7da0      	ldrb	r0, [r4, #22]
 801f254:	7563      	strb	r3, [r4, #21]
 801f256:	f080 0001 	eor.w	r0, r0, #1
 801f25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f25e:	463a      	mov	r2, r7
 801f260:	4631      	mov	r1, r6
 801f262:	68a0      	ldr	r0, [r4, #8]
 801f264:	f001 ff99 	bl	802119a <memcpy>
 801f268:	68a2      	ldr	r2, [r4, #8]
 801f26a:	6923      	ldr	r3, [r4, #16]
 801f26c:	443a      	add	r2, r7
 801f26e:	441f      	add	r7, r3
 801f270:	60a2      	str	r2, [r4, #8]
 801f272:	6127      	str	r7, [r4, #16]
 801f274:	e7ec      	b.n	801f250 <ucdr_serialize_endian_array_int32_t+0x84>
 801f276:	bf00      	nop

0801f278 <ucdr_deserialize_endian_array_int32_t>:
 801f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f27c:	4605      	mov	r5, r0
 801f27e:	4688      	mov	r8, r1
 801f280:	2104      	movs	r1, #4
 801f282:	4614      	mov	r4, r2
 801f284:	461f      	mov	r7, r3
 801f286:	f7f5 fa97 	bl	80147b8 <ucdr_buffer_alignment>
 801f28a:	4601      	mov	r1, r0
 801f28c:	4628      	mov	r0, r5
 801f28e:	7d6e      	ldrb	r6, [r5, #21]
 801f290:	f7f5 fada 	bl	8014848 <ucdr_advance_buffer>
 801f294:	f1b8 0f01 	cmp.w	r8, #1
 801f298:	756e      	strb	r6, [r5, #21]
 801f29a:	d010      	beq.n	801f2be <ucdr_deserialize_endian_array_int32_t+0x46>
 801f29c:	b157      	cbz	r7, 801f2b4 <ucdr_deserialize_endian_array_int32_t+0x3c>
 801f29e:	2600      	movs	r6, #0
 801f2a0:	3601      	adds	r6, #1
 801f2a2:	4622      	mov	r2, r4
 801f2a4:	4641      	mov	r1, r8
 801f2a6:	4628      	mov	r0, r5
 801f2a8:	f7f4 fed2 	bl	8014050 <ucdr_deserialize_endian_int32_t>
 801f2ac:	42b7      	cmp	r7, r6
 801f2ae:	f104 0404 	add.w	r4, r4, #4
 801f2b2:	d1f5      	bne.n	801f2a0 <ucdr_deserialize_endian_array_int32_t+0x28>
 801f2b4:	7da8      	ldrb	r0, [r5, #22]
 801f2b6:	f080 0001 	eor.w	r0, r0, #1
 801f2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2be:	00bf      	lsls	r7, r7, #2
 801f2c0:	4628      	mov	r0, r5
 801f2c2:	4639      	mov	r1, r7
 801f2c4:	f7f5 fa18 	bl	80146f8 <ucdr_check_buffer_available_for>
 801f2c8:	b9f8      	cbnz	r0, 801f30a <ucdr_deserialize_endian_array_int32_t+0x92>
 801f2ca:	46b8      	mov	r8, r7
 801f2cc:	e00c      	b.n	801f2e8 <ucdr_deserialize_endian_array_int32_t+0x70>
 801f2ce:	18e0      	adds	r0, r4, r3
 801f2d0:	4632      	mov	r2, r6
 801f2d2:	68a9      	ldr	r1, [r5, #8]
 801f2d4:	eba8 0806 	sub.w	r8, r8, r6
 801f2d8:	f001 ff5f 	bl	802119a <memcpy>
 801f2dc:	68aa      	ldr	r2, [r5, #8]
 801f2de:	692b      	ldr	r3, [r5, #16]
 801f2e0:	4432      	add	r2, r6
 801f2e2:	4433      	add	r3, r6
 801f2e4:	60aa      	str	r2, [r5, #8]
 801f2e6:	612b      	str	r3, [r5, #16]
 801f2e8:	4641      	mov	r1, r8
 801f2ea:	2204      	movs	r2, #4
 801f2ec:	4628      	mov	r0, r5
 801f2ee:	f7f5 fa8d 	bl	801480c <ucdr_check_final_buffer_behavior_array>
 801f2f2:	eba7 0308 	sub.w	r3, r7, r8
 801f2f6:	4606      	mov	r6, r0
 801f2f8:	2800      	cmp	r0, #0
 801f2fa:	d1e8      	bne.n	801f2ce <ucdr_deserialize_endian_array_int32_t+0x56>
 801f2fc:	2304      	movs	r3, #4
 801f2fe:	7da8      	ldrb	r0, [r5, #22]
 801f300:	756b      	strb	r3, [r5, #21]
 801f302:	f080 0001 	eor.w	r0, r0, #1
 801f306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f30a:	463a      	mov	r2, r7
 801f30c:	68a9      	ldr	r1, [r5, #8]
 801f30e:	4620      	mov	r0, r4
 801f310:	f001 ff43 	bl	802119a <memcpy>
 801f314:	68aa      	ldr	r2, [r5, #8]
 801f316:	692b      	ldr	r3, [r5, #16]
 801f318:	443a      	add	r2, r7
 801f31a:	441f      	add	r7, r3
 801f31c:	60aa      	str	r2, [r5, #8]
 801f31e:	612f      	str	r7, [r5, #16]
 801f320:	e7ec      	b.n	801f2fc <ucdr_deserialize_endian_array_int32_t+0x84>
 801f322:	bf00      	nop

0801f324 <ucdr_serialize_string>:
 801f324:	b510      	push	{r4, lr}
 801f326:	b082      	sub	sp, #8
 801f328:	4604      	mov	r4, r0
 801f32a:	4608      	mov	r0, r1
 801f32c:	9101      	str	r1, [sp, #4]
 801f32e:	f7e0 ff91 	bl	8000254 <strlen>
 801f332:	4602      	mov	r2, r0
 801f334:	9901      	ldr	r1, [sp, #4]
 801f336:	4620      	mov	r0, r4
 801f338:	3201      	adds	r2, #1
 801f33a:	b002      	add	sp, #8
 801f33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f340:	f7f8 be08 	b.w	8017f54 <ucdr_serialize_sequence_char>

0801f344 <ucdr_deserialize_string>:
 801f344:	b500      	push	{lr}
 801f346:	b083      	sub	sp, #12
 801f348:	ab01      	add	r3, sp, #4
 801f34a:	f7f8 fe15 	bl	8017f78 <ucdr_deserialize_sequence_char>
 801f34e:	b003      	add	sp, #12
 801f350:	f85d fb04 	ldr.w	pc, [sp], #4

0801f354 <uxr_init_input_best_effort_stream>:
 801f354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f358:	8003      	strh	r3, [r0, #0]
 801f35a:	4770      	bx	lr

0801f35c <uxr_reset_input_best_effort_stream>:
 801f35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f360:	8003      	strh	r3, [r0, #0]
 801f362:	4770      	bx	lr

0801f364 <uxr_receive_best_effort_message>:
 801f364:	b538      	push	{r3, r4, r5, lr}
 801f366:	4604      	mov	r4, r0
 801f368:	8800      	ldrh	r0, [r0, #0]
 801f36a:	460d      	mov	r5, r1
 801f36c:	f000 fd22 	bl	801fdb4 <uxr_seq_num_cmp>
 801f370:	4603      	mov	r3, r0
 801f372:	0fc0      	lsrs	r0, r0, #31
 801f374:	2b00      	cmp	r3, #0
 801f376:	bfb8      	it	lt
 801f378:	8025      	strhlt	r5, [r4, #0]
 801f37a:	bd38      	pop	{r3, r4, r5, pc}

0801f37c <on_full_input_buffer>:
 801f37c:	b570      	push	{r4, r5, r6, lr}
 801f37e:	460c      	mov	r4, r1
 801f380:	4605      	mov	r5, r0
 801f382:	8908      	ldrh	r0, [r1, #8]
 801f384:	682b      	ldr	r3, [r5, #0]
 801f386:	7d26      	ldrb	r6, [r4, #20]
 801f388:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f38c:	fbb2 f2f0 	udiv	r2, r2, r0
 801f390:	eba3 0c01 	sub.w	ip, r3, r1
 801f394:	fbbc fcf2 	udiv	ip, ip, r2
 801f398:	f10c 0c01 	add.w	ip, ip, #1
 801f39c:	fa1f f38c 	uxth.w	r3, ip
 801f3a0:	fbb3 fcf0 	udiv	ip, r3, r0
 801f3a4:	fb00 331c 	mls	r3, r0, ip, r3
 801f3a8:	b29b      	uxth	r3, r3
 801f3aa:	fb02 f303 	mul.w	r3, r2, r3
 801f3ae:	1d18      	adds	r0, r3, #4
 801f3b0:	4408      	add	r0, r1
 801f3b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801f3b6:	b116      	cbz	r6, 801f3be <on_full_input_buffer+0x42>
 801f3b8:	2600      	movs	r6, #0
 801f3ba:	f840 6c04 	str.w	r6, [r0, #-4]
 801f3be:	2a03      	cmp	r2, #3
 801f3c0:	d801      	bhi.n	801f3c6 <on_full_input_buffer+0x4a>
 801f3c2:	2001      	movs	r0, #1
 801f3c4:	bd70      	pop	{r4, r5, r6, pc}
 801f3c6:	3308      	adds	r3, #8
 801f3c8:	4628      	mov	r0, r5
 801f3ca:	3a04      	subs	r2, #4
 801f3cc:	4419      	add	r1, r3
 801f3ce:	692b      	ldr	r3, [r5, #16]
 801f3d0:	f7f5 f9de 	bl	8014790 <ucdr_init_buffer_origin>
 801f3d4:	4628      	mov	r0, r5
 801f3d6:	4622      	mov	r2, r4
 801f3d8:	4902      	ldr	r1, [pc, #8]	; (801f3e4 <on_full_input_buffer+0x68>)
 801f3da:	f7f5 f9b5 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 801f3de:	2000      	movs	r0, #0
 801f3e0:	bd70      	pop	{r4, r5, r6, pc}
 801f3e2:	bf00      	nop
 801f3e4:	0801f37d 	.word	0x0801f37d

0801f3e8 <uxr_init_input_reliable_stream>:
 801f3e8:	b510      	push	{r4, lr}
 801f3ea:	e9c0 1200 	strd	r1, r2, [r0]
 801f3ee:	2400      	movs	r4, #0
 801f3f0:	9a02      	ldr	r2, [sp, #8]
 801f3f2:	8103      	strh	r3, [r0, #8]
 801f3f4:	6102      	str	r2, [r0, #16]
 801f3f6:	7504      	strb	r4, [r0, #20]
 801f3f8:	b1c3      	cbz	r3, 801f42c <uxr_init_input_reliable_stream+0x44>
 801f3fa:	600c      	str	r4, [r1, #0]
 801f3fc:	8901      	ldrh	r1, [r0, #8]
 801f3fe:	2901      	cmp	r1, #1
 801f400:	d914      	bls.n	801f42c <uxr_init_input_reliable_stream+0x44>
 801f402:	f04f 0c01 	mov.w	ip, #1
 801f406:	6843      	ldr	r3, [r0, #4]
 801f408:	f10c 0e01 	add.w	lr, ip, #1
 801f40c:	fbbc f2f1 	udiv	r2, ip, r1
 801f410:	fbb3 f3f1 	udiv	r3, r3, r1
 801f414:	fb01 c212 	mls	r2, r1, r2, ip
 801f418:	fa1f fc8e 	uxth.w	ip, lr
 801f41c:	b292      	uxth	r2, r2
 801f41e:	fb02 f303 	mul.w	r3, r2, r3
 801f422:	6802      	ldr	r2, [r0, #0]
 801f424:	50d4      	str	r4, [r2, r3]
 801f426:	8901      	ldrh	r1, [r0, #8]
 801f428:	4561      	cmp	r1, ip
 801f42a:	d8ec      	bhi.n	801f406 <uxr_init_input_reliable_stream+0x1e>
 801f42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f430:	60c3      	str	r3, [r0, #12]
 801f432:	bd10      	pop	{r4, pc}

0801f434 <uxr_reset_input_reliable_stream>:
 801f434:	8901      	ldrh	r1, [r0, #8]
 801f436:	b1d9      	cbz	r1, 801f470 <uxr_reset_input_reliable_stream+0x3c>
 801f438:	b510      	push	{r4, lr}
 801f43a:	f04f 0e00 	mov.w	lr, #0
 801f43e:	46f4      	mov	ip, lr
 801f440:	4674      	mov	r4, lr
 801f442:	6843      	ldr	r3, [r0, #4]
 801f444:	f10e 0e01 	add.w	lr, lr, #1
 801f448:	fbbc f2f1 	udiv	r2, ip, r1
 801f44c:	fbb3 f3f1 	udiv	r3, r3, r1
 801f450:	fb01 c212 	mls	r2, r1, r2, ip
 801f454:	fa1f fc8e 	uxth.w	ip, lr
 801f458:	b292      	uxth	r2, r2
 801f45a:	fb02 f303 	mul.w	r3, r2, r3
 801f45e:	6802      	ldr	r2, [r0, #0]
 801f460:	50d4      	str	r4, [r2, r3]
 801f462:	8901      	ldrh	r1, [r0, #8]
 801f464:	4561      	cmp	r1, ip
 801f466:	d8ec      	bhi.n	801f442 <uxr_reset_input_reliable_stream+0xe>
 801f468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f46c:	60c3      	str	r3, [r0, #12]
 801f46e:	bd10      	pop	{r4, pc}
 801f470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f474:	60c3      	str	r3, [r0, #12]
 801f476:	4770      	bx	lr

0801f478 <uxr_receive_reliable_message>:
 801f478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f47c:	4604      	mov	r4, r0
 801f47e:	460d      	mov	r5, r1
 801f480:	8901      	ldrh	r1, [r0, #8]
 801f482:	4617      	mov	r7, r2
 801f484:	8980      	ldrh	r0, [r0, #12]
 801f486:	4698      	mov	r8, r3
 801f488:	f000 fc8c 	bl	801fda4 <uxr_seq_num_add>
 801f48c:	4629      	mov	r1, r5
 801f48e:	4606      	mov	r6, r0
 801f490:	89a0      	ldrh	r0, [r4, #12]
 801f492:	f000 fc8f 	bl	801fdb4 <uxr_seq_num_cmp>
 801f496:	2800      	cmp	r0, #0
 801f498:	db0a      	blt.n	801f4b0 <uxr_receive_reliable_message+0x38>
 801f49a:	2600      	movs	r6, #0
 801f49c:	4629      	mov	r1, r5
 801f49e:	89e0      	ldrh	r0, [r4, #14]
 801f4a0:	f000 fc88 	bl	801fdb4 <uxr_seq_num_cmp>
 801f4a4:	2800      	cmp	r0, #0
 801f4a6:	da00      	bge.n	801f4aa <uxr_receive_reliable_message+0x32>
 801f4a8:	81e5      	strh	r5, [r4, #14]
 801f4aa:	4630      	mov	r0, r6
 801f4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4b0:	4630      	mov	r0, r6
 801f4b2:	4629      	mov	r1, r5
 801f4b4:	f000 fc7e 	bl	801fdb4 <uxr_seq_num_cmp>
 801f4b8:	2800      	cmp	r0, #0
 801f4ba:	dbee      	blt.n	801f49a <uxr_receive_reliable_message+0x22>
 801f4bc:	6923      	ldr	r3, [r4, #16]
 801f4be:	4638      	mov	r0, r7
 801f4c0:	4798      	blx	r3
 801f4c2:	4681      	mov	r9, r0
 801f4c4:	2101      	movs	r1, #1
 801f4c6:	89a0      	ldrh	r0, [r4, #12]
 801f4c8:	f000 fc6c 	bl	801fda4 <uxr_seq_num_add>
 801f4cc:	f1b9 0f00 	cmp.w	r9, #0
 801f4d0:	bf08      	it	eq
 801f4d2:	4285      	cmpeq	r5, r0
 801f4d4:	bf0c      	ite	eq
 801f4d6:	2601      	moveq	r6, #1
 801f4d8:	2600      	movne	r6, #0
 801f4da:	d104      	bne.n	801f4e6 <uxr_receive_reliable_message+0x6e>
 801f4dc:	2300      	movs	r3, #0
 801f4de:	9a08      	ldr	r2, [sp, #32]
 801f4e0:	81a0      	strh	r0, [r4, #12]
 801f4e2:	7013      	strb	r3, [r2, #0]
 801f4e4:	e7da      	b.n	801f49c <uxr_receive_reliable_message+0x24>
 801f4e6:	8922      	ldrh	r2, [r4, #8]
 801f4e8:	6863      	ldr	r3, [r4, #4]
 801f4ea:	fbb5 f0f2 	udiv	r0, r5, r2
 801f4ee:	fbb3 f3f2 	udiv	r3, r3, r2
 801f4f2:	fb02 5010 	mls	r0, r2, r0, r5
 801f4f6:	b280      	uxth	r0, r0
 801f4f8:	fb03 f000 	mul.w	r0, r3, r0
 801f4fc:	6823      	ldr	r3, [r4, #0]
 801f4fe:	3004      	adds	r0, #4
 801f500:	4418      	add	r0, r3
 801f502:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d1c7      	bne.n	801f49a <uxr_receive_reliable_message+0x22>
 801f50a:	4639      	mov	r1, r7
 801f50c:	4642      	mov	r2, r8
 801f50e:	f001 fe44 	bl	802119a <memcpy>
 801f512:	8921      	ldrh	r1, [r4, #8]
 801f514:	6863      	ldr	r3, [r4, #4]
 801f516:	fbb5 f2f1 	udiv	r2, r5, r1
 801f51a:	fbb3 f3f1 	udiv	r3, r3, r1
 801f51e:	fb01 5212 	mls	r2, r1, r2, r5
 801f522:	b292      	uxth	r2, r2
 801f524:	fb02 f303 	mul.w	r3, r2, r3
 801f528:	6822      	ldr	r2, [r4, #0]
 801f52a:	f842 8003 	str.w	r8, [r2, r3]
 801f52e:	2301      	movs	r3, #1
 801f530:	9a08      	ldr	r2, [sp, #32]
 801f532:	7013      	strb	r3, [r2, #0]
 801f534:	f1b9 0f00 	cmp.w	r9, #0
 801f538:	d0af      	beq.n	801f49a <uxr_receive_reliable_message+0x22>
 801f53a:	89a6      	ldrh	r6, [r4, #12]
 801f53c:	2101      	movs	r1, #1
 801f53e:	4630      	mov	r0, r6
 801f540:	f000 fc30 	bl	801fda4 <uxr_seq_num_add>
 801f544:	8921      	ldrh	r1, [r4, #8]
 801f546:	6863      	ldr	r3, [r4, #4]
 801f548:	4606      	mov	r6, r0
 801f54a:	fbb0 f2f1 	udiv	r2, r0, r1
 801f54e:	fbb3 f3f1 	udiv	r3, r3, r1
 801f552:	fb01 0212 	mls	r2, r1, r2, r0
 801f556:	6820      	ldr	r0, [r4, #0]
 801f558:	b292      	uxth	r2, r2
 801f55a:	fb02 f303 	mul.w	r3, r2, r3
 801f55e:	3304      	adds	r3, #4
 801f560:	4418      	add	r0, r3
 801f562:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f566:	2b00      	cmp	r3, #0
 801f568:	d097      	beq.n	801f49a <uxr_receive_reliable_message+0x22>
 801f56a:	6923      	ldr	r3, [r4, #16]
 801f56c:	4798      	blx	r3
 801f56e:	2802      	cmp	r0, #2
 801f570:	d002      	beq.n	801f578 <uxr_receive_reliable_message+0x100>
 801f572:	2801      	cmp	r0, #1
 801f574:	d0e2      	beq.n	801f53c <uxr_receive_reliable_message+0xc4>
 801f576:	e790      	b.n	801f49a <uxr_receive_reliable_message+0x22>
 801f578:	2601      	movs	r6, #1
 801f57a:	e78f      	b.n	801f49c <uxr_receive_reliable_message+0x24>

0801f57c <uxr_next_input_reliable_buffer_available>:
 801f57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f580:	4604      	mov	r4, r0
 801f582:	460f      	mov	r7, r1
 801f584:	8980      	ldrh	r0, [r0, #12]
 801f586:	2101      	movs	r1, #1
 801f588:	4690      	mov	r8, r2
 801f58a:	f000 fc0b 	bl	801fda4 <uxr_seq_num_add>
 801f58e:	8922      	ldrh	r2, [r4, #8]
 801f590:	6866      	ldr	r6, [r4, #4]
 801f592:	fbb0 f3f2 	udiv	r3, r0, r2
 801f596:	fbb6 f6f2 	udiv	r6, r6, r2
 801f59a:	fb02 0313 	mls	r3, r2, r3, r0
 801f59e:	b29b      	uxth	r3, r3
 801f5a0:	fb03 f606 	mul.w	r6, r3, r6
 801f5a4:	6823      	ldr	r3, [r4, #0]
 801f5a6:	3604      	adds	r6, #4
 801f5a8:	441e      	add	r6, r3
 801f5aa:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801f5ae:	f1b9 0f00 	cmp.w	r9, #0
 801f5b2:	d023      	beq.n	801f5fc <uxr_next_input_reliable_buffer_available+0x80>
 801f5b4:	4605      	mov	r5, r0
 801f5b6:	6923      	ldr	r3, [r4, #16]
 801f5b8:	4630      	mov	r0, r6
 801f5ba:	4798      	blx	r3
 801f5bc:	4682      	mov	sl, r0
 801f5be:	b300      	cbz	r0, 801f602 <uxr_next_input_reliable_buffer_available+0x86>
 801f5c0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801f5c4:	2101      	movs	r1, #1
 801f5c6:	4650      	mov	r0, sl
 801f5c8:	f000 fbec 	bl	801fda4 <uxr_seq_num_add>
 801f5cc:	8921      	ldrh	r1, [r4, #8]
 801f5ce:	4682      	mov	sl, r0
 801f5d0:	6863      	ldr	r3, [r4, #4]
 801f5d2:	6820      	ldr	r0, [r4, #0]
 801f5d4:	fbba f2f1 	udiv	r2, sl, r1
 801f5d8:	fbb3 f3f1 	udiv	r3, r3, r1
 801f5dc:	fb01 a212 	mls	r2, r1, r2, sl
 801f5e0:	b292      	uxth	r2, r2
 801f5e2:	fb02 f303 	mul.w	r3, r2, r3
 801f5e6:	3304      	adds	r3, #4
 801f5e8:	4418      	add	r0, r3
 801f5ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f5ee:	b12b      	cbz	r3, 801f5fc <uxr_next_input_reliable_buffer_available+0x80>
 801f5f0:	6923      	ldr	r3, [r4, #16]
 801f5f2:	4798      	blx	r3
 801f5f4:	2802      	cmp	r0, #2
 801f5f6:	d01b      	beq.n	801f630 <uxr_next_input_reliable_buffer_available+0xb4>
 801f5f8:	2801      	cmp	r0, #1
 801f5fa:	d0e3      	beq.n	801f5c4 <uxr_next_input_reliable_buffer_available+0x48>
 801f5fc:	2000      	movs	r0, #0
 801f5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f602:	464a      	mov	r2, r9
 801f604:	4631      	mov	r1, r6
 801f606:	4638      	mov	r0, r7
 801f608:	f7f5 f8ca 	bl	80147a0 <ucdr_init_buffer>
 801f60c:	8921      	ldrh	r1, [r4, #8]
 801f60e:	6863      	ldr	r3, [r4, #4]
 801f610:	2001      	movs	r0, #1
 801f612:	fbb5 f2f1 	udiv	r2, r5, r1
 801f616:	fbb3 f3f1 	udiv	r3, r3, r1
 801f61a:	fb01 5212 	mls	r2, r1, r2, r5
 801f61e:	b292      	uxth	r2, r2
 801f620:	fb02 f303 	mul.w	r3, r2, r3
 801f624:	6822      	ldr	r2, [r4, #0]
 801f626:	f842 a003 	str.w	sl, [r2, r3]
 801f62a:	81a5      	strh	r5, [r4, #12]
 801f62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f630:	8920      	ldrh	r0, [r4, #8]
 801f632:	eb06 0108 	add.w	r1, r6, r8
 801f636:	6863      	ldr	r3, [r4, #4]
 801f638:	eba9 0208 	sub.w	r2, r9, r8
 801f63c:	fbb5 f6f0 	udiv	r6, r5, r0
 801f640:	fbb3 f3f0 	udiv	r3, r3, r0
 801f644:	fb00 5516 	mls	r5, r0, r6, r5
 801f648:	2000      	movs	r0, #0
 801f64a:	b2ad      	uxth	r5, r5
 801f64c:	fb03 f505 	mul.w	r5, r3, r5
 801f650:	6823      	ldr	r3, [r4, #0]
 801f652:	5158      	str	r0, [r3, r5]
 801f654:	4638      	mov	r0, r7
 801f656:	f7f5 f8a3 	bl	80147a0 <ucdr_init_buffer>
 801f65a:	4638      	mov	r0, r7
 801f65c:	4622      	mov	r2, r4
 801f65e:	4903      	ldr	r1, [pc, #12]	; (801f66c <uxr_next_input_reliable_buffer_available+0xf0>)
 801f660:	f7f5 f872 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 801f664:	2001      	movs	r0, #1
 801f666:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801f66a:	e7c8      	b.n	801f5fe <uxr_next_input_reliable_buffer_available+0x82>
 801f66c:	0801f37d 	.word	0x0801f37d

0801f670 <uxr_process_heartbeat>:
 801f670:	b538      	push	{r3, r4, r5, lr}
 801f672:	4611      	mov	r1, r2
 801f674:	4604      	mov	r4, r0
 801f676:	89c0      	ldrh	r0, [r0, #14]
 801f678:	4615      	mov	r5, r2
 801f67a:	f000 fb9b 	bl	801fdb4 <uxr_seq_num_cmp>
 801f67e:	2800      	cmp	r0, #0
 801f680:	bfb8      	it	lt
 801f682:	81e5      	strhlt	r5, [r4, #14]
 801f684:	bd38      	pop	{r3, r4, r5, pc}
 801f686:	bf00      	nop

0801f688 <uxr_compute_acknack>:
 801f688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f68c:	8903      	ldrh	r3, [r0, #8]
 801f68e:	4604      	mov	r4, r0
 801f690:	460f      	mov	r7, r1
 801f692:	8985      	ldrh	r5, [r0, #12]
 801f694:	b1db      	cbz	r3, 801f6ce <uxr_compute_acknack+0x46>
 801f696:	4628      	mov	r0, r5
 801f698:	2601      	movs	r6, #1
 801f69a:	e004      	b.n	801f6a6 <uxr_compute_acknack+0x1e>
 801f69c:	4566      	cmp	r6, ip
 801f69e:	f106 0601 	add.w	r6, r6, #1
 801f6a2:	d214      	bcs.n	801f6ce <uxr_compute_acknack+0x46>
 801f6a4:	89a0      	ldrh	r0, [r4, #12]
 801f6a6:	b2b1      	uxth	r1, r6
 801f6a8:	f000 fb7c 	bl	801fda4 <uxr_seq_num_add>
 801f6ac:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801f6b0:	fbb0 f2fc 	udiv	r2, r0, ip
 801f6b4:	e9d4 1300 	ldrd	r1, r3, [r4]
 801f6b8:	fb0c 0212 	mls	r2, ip, r2, r0
 801f6bc:	fbb3 f3fc 	udiv	r3, r3, ip
 801f6c0:	b292      	uxth	r2, r2
 801f6c2:	fb02 f303 	mul.w	r3, r2, r3
 801f6c6:	58cb      	ldr	r3, [r1, r3]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d1e7      	bne.n	801f69c <uxr_compute_acknack+0x14>
 801f6cc:	4605      	mov	r5, r0
 801f6ce:	803d      	strh	r5, [r7, #0]
 801f6d0:	2101      	movs	r1, #1
 801f6d2:	89e6      	ldrh	r6, [r4, #14]
 801f6d4:	4628      	mov	r0, r5
 801f6d6:	f000 fb69 	bl	801fdac <uxr_seq_num_sub>
 801f6da:	4601      	mov	r1, r0
 801f6dc:	4630      	mov	r0, r6
 801f6de:	f000 fb65 	bl	801fdac <uxr_seq_num_sub>
 801f6e2:	4606      	mov	r6, r0
 801f6e4:	b328      	cbz	r0, 801f732 <uxr_compute_acknack+0xaa>
 801f6e6:	f04f 0900 	mov.w	r9, #0
 801f6ea:	f04f 0801 	mov.w	r8, #1
 801f6ee:	464d      	mov	r5, r9
 801f6f0:	fa1f f189 	uxth.w	r1, r9
 801f6f4:	8838      	ldrh	r0, [r7, #0]
 801f6f6:	f000 fb55 	bl	801fda4 <uxr_seq_num_add>
 801f6fa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801f6fe:	6861      	ldr	r1, [r4, #4]
 801f700:	fa08 fe09 	lsl.w	lr, r8, r9
 801f704:	6822      	ldr	r2, [r4, #0]
 801f706:	f109 0901 	add.w	r9, r9, #1
 801f70a:	ea4e 0e05 	orr.w	lr, lr, r5
 801f70e:	fbb0 f3fc 	udiv	r3, r0, ip
 801f712:	fbb1 f1fc 	udiv	r1, r1, ip
 801f716:	fb03 001c 	mls	r0, r3, ip, r0
 801f71a:	b283      	uxth	r3, r0
 801f71c:	fb01 f303 	mul.w	r3, r1, r3
 801f720:	58d3      	ldr	r3, [r2, r3]
 801f722:	b90b      	cbnz	r3, 801f728 <uxr_compute_acknack+0xa0>
 801f724:	fa1f f58e 	uxth.w	r5, lr
 801f728:	454e      	cmp	r6, r9
 801f72a:	d1e1      	bne.n	801f6f0 <uxr_compute_acknack+0x68>
 801f72c:	4628      	mov	r0, r5
 801f72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f732:	4605      	mov	r5, r0
 801f734:	4628      	mov	r0, r5
 801f736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f73a:	bf00      	nop

0801f73c <uxr_init_output_best_effort_stream>:
 801f73c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801f740:	6001      	str	r1, [r0, #0]
 801f742:	7303      	strb	r3, [r0, #12]
 801f744:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801f748:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801f74c:	4770      	bx	lr
 801f74e:	bf00      	nop

0801f750 <uxr_reset_output_best_effort_stream>:
 801f750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f754:	7b03      	ldrb	r3, [r0, #12]
 801f756:	81c2      	strh	r2, [r0, #14]
 801f758:	6043      	str	r3, [r0, #4]
 801f75a:	4770      	bx	lr

0801f75c <uxr_prepare_best_effort_buffer_to_write>:
 801f75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f75e:	4604      	mov	r4, r0
 801f760:	b083      	sub	sp, #12
 801f762:	6840      	ldr	r0, [r0, #4]
 801f764:	460d      	mov	r5, r1
 801f766:	4616      	mov	r6, r2
 801f768:	f7fa ffb4 	bl	801a6d4 <uxr_submessage_padding>
 801f76c:	6863      	ldr	r3, [r4, #4]
 801f76e:	4418      	add	r0, r3
 801f770:	68a3      	ldr	r3, [r4, #8]
 801f772:	1942      	adds	r2, r0, r5
 801f774:	4293      	cmp	r3, r2
 801f776:	bf2c      	ite	cs
 801f778:	2701      	movcs	r7, #1
 801f77a:	2700      	movcc	r7, #0
 801f77c:	d202      	bcs.n	801f784 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801f77e:	4638      	mov	r0, r7
 801f780:	b003      	add	sp, #12
 801f782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f784:	9000      	str	r0, [sp, #0]
 801f786:	2300      	movs	r3, #0
 801f788:	4630      	mov	r0, r6
 801f78a:	6821      	ldr	r1, [r4, #0]
 801f78c:	f7f4 fff6 	bl	801477c <ucdr_init_buffer_origin_offset>
 801f790:	6861      	ldr	r1, [r4, #4]
 801f792:	4638      	mov	r0, r7
 801f794:	4429      	add	r1, r5
 801f796:	6061      	str	r1, [r4, #4]
 801f798:	b003      	add	sp, #12
 801f79a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f79c <uxr_prepare_best_effort_buffer_to_send>:
 801f79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7a0:	4604      	mov	r4, r0
 801f7a2:	461d      	mov	r5, r3
 801f7a4:	6840      	ldr	r0, [r0, #4]
 801f7a6:	7b23      	ldrb	r3, [r4, #12]
 801f7a8:	4298      	cmp	r0, r3
 801f7aa:	bf8c      	ite	hi
 801f7ac:	2601      	movhi	r6, #1
 801f7ae:	2600      	movls	r6, #0
 801f7b0:	d802      	bhi.n	801f7b8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801f7b2:	4630      	mov	r0, r6
 801f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7b8:	4688      	mov	r8, r1
 801f7ba:	89e0      	ldrh	r0, [r4, #14]
 801f7bc:	2101      	movs	r1, #1
 801f7be:	4617      	mov	r7, r2
 801f7c0:	f000 faf0 	bl	801fda4 <uxr_seq_num_add>
 801f7c4:	6823      	ldr	r3, [r4, #0]
 801f7c6:	81e0      	strh	r0, [r4, #14]
 801f7c8:	8028      	strh	r0, [r5, #0]
 801f7ca:	4630      	mov	r0, r6
 801f7cc:	f8c8 3000 	str.w	r3, [r8]
 801f7d0:	6863      	ldr	r3, [r4, #4]
 801f7d2:	603b      	str	r3, [r7, #0]
 801f7d4:	7b23      	ldrb	r3, [r4, #12]
 801f7d6:	6063      	str	r3, [r4, #4]
 801f7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f7dc <on_full_output_buffer>:
 801f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7de:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f7e2:	460c      	mov	r4, r1
 801f7e4:	6803      	ldr	r3, [r0, #0]
 801f7e6:	4605      	mov	r5, r0
 801f7e8:	7b26      	ldrb	r6, [r4, #12]
 801f7ea:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f7ee:	fbb2 f2fc 	udiv	r2, r2, ip
 801f7f2:	eba3 0e01 	sub.w	lr, r3, r1
 801f7f6:	6903      	ldr	r3, [r0, #16]
 801f7f8:	fbbe fef2 	udiv	lr, lr, r2
 801f7fc:	f10e 0e01 	add.w	lr, lr, #1
 801f800:	fa1f fe8e 	uxth.w	lr, lr
 801f804:	fbbe f7fc 	udiv	r7, lr, ip
 801f808:	fb0c ec17 	mls	ip, ip, r7, lr
 801f80c:	fa1f fc8c 	uxth.w	ip, ip
 801f810:	fb02 fc0c 	mul.w	ip, r2, ip
 801f814:	f851 200c 	ldr.w	r2, [r1, ip]
 801f818:	44b4      	add	ip, r6
 801f81a:	1b92      	subs	r2, r2, r6
 801f81c:	f10c 0c08 	add.w	ip, ip, #8
 801f820:	3a04      	subs	r2, #4
 801f822:	4461      	add	r1, ip
 801f824:	f7f4 ffb4 	bl	8014790 <ucdr_init_buffer_origin>
 801f828:	4628      	mov	r0, r5
 801f82a:	4622      	mov	r2, r4
 801f82c:	4902      	ldr	r1, [pc, #8]	; (801f838 <on_full_output_buffer+0x5c>)
 801f82e:	f7f4 ff8b 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 801f832:	2000      	movs	r0, #0
 801f834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f836:	bf00      	nop
 801f838:	0801f7dd 	.word	0x0801f7dd

0801f83c <uxr_init_output_reliable_stream>:
 801f83c:	b530      	push	{r4, r5, lr}
 801f83e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801f842:	8103      	strh	r3, [r0, #8]
 801f844:	7304      	strb	r4, [r0, #12]
 801f846:	e9c0 1200 	strd	r1, r2, [r0]
 801f84a:	b1e3      	cbz	r3, 801f886 <uxr_init_output_reliable_stream+0x4a>
 801f84c:	600c      	str	r4, [r1, #0]
 801f84e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801f852:	f1bc 0f01 	cmp.w	ip, #1
 801f856:	d916      	bls.n	801f886 <uxr_init_output_reliable_stream+0x4a>
 801f858:	f04f 0e01 	mov.w	lr, #1
 801f85c:	6843      	ldr	r3, [r0, #4]
 801f85e:	f10e 0501 	add.w	r5, lr, #1
 801f862:	7b04      	ldrb	r4, [r0, #12]
 801f864:	6801      	ldr	r1, [r0, #0]
 801f866:	fbbe f2fc 	udiv	r2, lr, ip
 801f86a:	fbb3 f3fc 	udiv	r3, r3, ip
 801f86e:	fb0c e212 	mls	r2, ip, r2, lr
 801f872:	fa1f fe85 	uxth.w	lr, r5
 801f876:	b292      	uxth	r2, r2
 801f878:	fb02 f303 	mul.w	r3, r2, r3
 801f87c:	50cc      	str	r4, [r1, r3]
 801f87e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801f882:	45f4      	cmp	ip, lr
 801f884:	d8ea      	bhi.n	801f85c <uxr_init_output_reliable_stream+0x20>
 801f886:	4b07      	ldr	r3, [pc, #28]	; (801f8a4 <uxr_init_output_reliable_stream+0x68>)
 801f888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f88c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f890:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801f894:	f8c0 300e 	str.w	r3, [r0, #14]
 801f898:	2300      	movs	r3, #0
 801f89a:	8242      	strh	r2, [r0, #18]
 801f89c:	8403      	strh	r3, [r0, #32]
 801f89e:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801f8a2:	bd30      	pop	{r4, r5, pc}
 801f8a4:	ffff0000 	.word	0xffff0000

0801f8a8 <uxr_reset_output_reliable_stream>:
 801f8a8:	8901      	ldrh	r1, [r0, #8]
 801f8aa:	b510      	push	{r4, lr}
 801f8ac:	b1b1      	cbz	r1, 801f8dc <uxr_reset_output_reliable_stream+0x34>
 801f8ae:	f04f 0e00 	mov.w	lr, #0
 801f8b2:	46f4      	mov	ip, lr
 801f8b4:	6843      	ldr	r3, [r0, #4]
 801f8b6:	f10e 0e01 	add.w	lr, lr, #1
 801f8ba:	7b04      	ldrb	r4, [r0, #12]
 801f8bc:	fbbc f2f1 	udiv	r2, ip, r1
 801f8c0:	fbb3 f3f1 	udiv	r3, r3, r1
 801f8c4:	fb01 c212 	mls	r2, r1, r2, ip
 801f8c8:	fa1f fc8e 	uxth.w	ip, lr
 801f8cc:	b292      	uxth	r2, r2
 801f8ce:	fb02 f303 	mul.w	r3, r2, r3
 801f8d2:	6802      	ldr	r2, [r0, #0]
 801f8d4:	50d4      	str	r4, [r2, r3]
 801f8d6:	8901      	ldrh	r1, [r0, #8]
 801f8d8:	4561      	cmp	r1, ip
 801f8da:	d8eb      	bhi.n	801f8b4 <uxr_reset_output_reliable_stream+0xc>
 801f8dc:	4b08      	ldr	r3, [pc, #32]	; (801f900 <uxr_reset_output_reliable_stream+0x58>)
 801f8de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f8e2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801f8f8 <uxr_reset_output_reliable_stream+0x50>
 801f8e6:	f8c0 300e 	str.w	r3, [r0, #14]
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	8242      	strh	r2, [r0, #18]
 801f8ee:	8403      	strh	r3, [r0, #32]
 801f8f0:	ed80 7b06 	vstr	d7, [r0, #24]
 801f8f4:	bd10      	pop	{r4, pc}
 801f8f6:	bf00      	nop
 801f8f8:	ffffffff 	.word	0xffffffff
 801f8fc:	7fffffff 	.word	0x7fffffff
 801f900:	ffff0000 	.word	0xffff0000

0801f904 <uxr_prepare_reliable_buffer_to_write>:
 801f904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f908:	4604      	mov	r4, r0
 801f90a:	b091      	sub	sp, #68	; 0x44
 801f90c:	8900      	ldrh	r0, [r0, #8]
 801f90e:	468b      	mov	fp, r1
 801f910:	89e6      	ldrh	r6, [r4, #14]
 801f912:	9204      	str	r2, [sp, #16]
 801f914:	6865      	ldr	r5, [r4, #4]
 801f916:	6823      	ldr	r3, [r4, #0]
 801f918:	f894 900c 	ldrb.w	r9, [r4, #12]
 801f91c:	fbb6 f2f0 	udiv	r2, r6, r0
 801f920:	fbb5 f5f0 	udiv	r5, r5, r0
 801f924:	fb00 6212 	mls	r2, r0, r2, r6
 801f928:	1f2f      	subs	r7, r5, #4
 801f92a:	b292      	uxth	r2, r2
 801f92c:	fb05 3202 	mla	r2, r5, r2, r3
 801f930:	1d11      	adds	r1, r2, #4
 801f932:	f8d2 8000 	ldr.w	r8, [r2]
 801f936:	9103      	str	r1, [sp, #12]
 801f938:	2800      	cmp	r0, #0
 801f93a:	f000 814a 	beq.w	801fbd2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801f93e:	f04f 0c00 	mov.w	ip, #0
 801f942:	46e2      	mov	sl, ip
 801f944:	4661      	mov	r1, ip
 801f946:	f10c 0c01 	add.w	ip, ip, #1
 801f94a:	fbb1 f2f0 	udiv	r2, r1, r0
 801f94e:	fb00 1212 	mls	r2, r0, r2, r1
 801f952:	fa1f f18c 	uxth.w	r1, ip
 801f956:	b292      	uxth	r2, r2
 801f958:	fb05 f202 	mul.w	r2, r5, r2
 801f95c:	589a      	ldr	r2, [r3, r2]
 801f95e:	454a      	cmp	r2, r9
 801f960:	d103      	bne.n	801f96a <uxr_prepare_reliable_buffer_to_write+0x66>
 801f962:	f10a 0a01 	add.w	sl, sl, #1
 801f966:	fa1f fa8a 	uxth.w	sl, sl
 801f96a:	4281      	cmp	r1, r0
 801f96c:	d3eb      	bcc.n	801f946 <uxr_prepare_reliable_buffer_to_write+0x42>
 801f96e:	4640      	mov	r0, r8
 801f970:	2104      	movs	r1, #4
 801f972:	f8cd a014 	str.w	sl, [sp, #20]
 801f976:	f7f4 ff17 	bl	80147a8 <ucdr_alignment>
 801f97a:	4480      	add	r8, r0
 801f97c:	eb08 020b 	add.w	r2, r8, fp
 801f980:	42ba      	cmp	r2, r7
 801f982:	f240 80ca 	bls.w	801fb1a <uxr_prepare_reliable_buffer_to_write+0x216>
 801f986:	7b22      	ldrb	r2, [r4, #12]
 801f988:	445a      	add	r2, fp
 801f98a:	42ba      	cmp	r2, r7
 801f98c:	f240 80b2 	bls.w	801faf4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801f990:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801f994:	b2bb      	uxth	r3, r7
 801f996:	eba2 0209 	sub.w	r2, r2, r9
 801f99a:	441a      	add	r2, r3
 801f99c:	b292      	uxth	r2, r2
 801f99e:	fb0a f902 	mul.w	r9, sl, r2
 801f9a2:	9205      	str	r2, [sp, #20]
 801f9a4:	45d9      	cmp	r9, fp
 801f9a6:	9206      	str	r2, [sp, #24]
 801f9a8:	f0c0 80b3 	bcc.w	801fb12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801f9ac:	f108 0204 	add.w	r2, r8, #4
 801f9b0:	42ba      	cmp	r2, r7
 801f9b2:	f080 80da 	bcs.w	801fb6a <uxr_prepare_reliable_buffer_to_write+0x266>
 801f9b6:	f1a3 0904 	sub.w	r9, r3, #4
 801f9ba:	9b05      	ldr	r3, [sp, #20]
 801f9bc:	eba9 0908 	sub.w	r9, r9, r8
 801f9c0:	fa1f f989 	uxth.w	r9, r9
 801f9c4:	ebab 0b09 	sub.w	fp, fp, r9
 801f9c8:	fbbb f2f3 	udiv	r2, fp, r3
 801f9cc:	fb03 b312 	mls	r3, r3, r2, fp
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	f040 80c4 	bne.w	801fb5e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801f9d6:	b293      	uxth	r3, r2
 801f9d8:	4553      	cmp	r3, sl
 801f9da:	f200 809a 	bhi.w	801fb12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	f000 80f9 	beq.w	801fbd6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801f9e4:	f8cd 801c 	str.w	r8, [sp, #28]
 801f9e8:	f04f 0a00 	mov.w	sl, #0
 801f9ec:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f9f0:	f10d 0b20 	add.w	fp, sp, #32
 801f9f4:	9505      	str	r5, [sp, #20]
 801f9f6:	461d      	mov	r5, r3
 801f9f8:	e000      	b.n	801f9fc <uxr_prepare_reliable_buffer_to_write+0xf8>
 801f9fa:	46c1      	mov	r9, r8
 801f9fc:	8922      	ldrh	r2, [r4, #8]
 801f9fe:	4658      	mov	r0, fp
 801fa00:	6863      	ldr	r3, [r4, #4]
 801fa02:	f10a 0a01 	add.w	sl, sl, #1
 801fa06:	fbb6 f1f2 	udiv	r1, r6, r2
 801fa0a:	fbb3 f3f2 	udiv	r3, r3, r2
 801fa0e:	fb02 6111 	mls	r1, r2, r1, r6
 801fa12:	463a      	mov	r2, r7
 801fa14:	b289      	uxth	r1, r1
 801fa16:	fb03 f101 	mul.w	r1, r3, r1
 801fa1a:	6823      	ldr	r3, [r4, #0]
 801fa1c:	3104      	adds	r1, #4
 801fa1e:	4419      	add	r1, r3
 801fa20:	2300      	movs	r3, #0
 801fa22:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801fa26:	f8cd c000 	str.w	ip, [sp]
 801fa2a:	f7f4 fea7 	bl	801477c <ucdr_init_buffer_origin_offset>
 801fa2e:	464a      	mov	r2, r9
 801fa30:	2300      	movs	r3, #0
 801fa32:	210d      	movs	r1, #13
 801fa34:	4658      	mov	r0, fp
 801fa36:	f7fa fe0d 	bl	801a654 <uxr_buffer_submessage_header>
 801fa3a:	8921      	ldrh	r1, [r4, #8]
 801fa3c:	6863      	ldr	r3, [r4, #4]
 801fa3e:	4630      	mov	r0, r6
 801fa40:	fbb6 f2f1 	udiv	r2, r6, r1
 801fa44:	fbb3 f3f1 	udiv	r3, r3, r1
 801fa48:	fb01 6212 	mls	r2, r1, r2, r6
 801fa4c:	2101      	movs	r1, #1
 801fa4e:	b292      	uxth	r2, r2
 801fa50:	fb02 f303 	mul.w	r3, r2, r3
 801fa54:	6822      	ldr	r2, [r4, #0]
 801fa56:	50d7      	str	r7, [r2, r3]
 801fa58:	f000 f9a4 	bl	801fda4 <uxr_seq_num_add>
 801fa5c:	4606      	mov	r6, r0
 801fa5e:	fa1f f38a 	uxth.w	r3, sl
 801fa62:	429d      	cmp	r5, r3
 801fa64:	d8c9      	bhi.n	801f9fa <uxr_prepare_reliable_buffer_to_write+0xf6>
 801fa66:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801fa6a:	9d05      	ldr	r5, [sp, #20]
 801fa6c:	8920      	ldrh	r0, [r4, #8]
 801fa6e:	463a      	mov	r2, r7
 801fa70:	6863      	ldr	r3, [r4, #4]
 801fa72:	fbb6 f1f0 	udiv	r1, r6, r0
 801fa76:	fbb3 f3f0 	udiv	r3, r3, r0
 801fa7a:	fb00 6111 	mls	r1, r0, r1, r6
 801fa7e:	4658      	mov	r0, fp
 801fa80:	b289      	uxth	r1, r1
 801fa82:	fb01 f303 	mul.w	r3, r1, r3
 801fa86:	6821      	ldr	r1, [r4, #0]
 801fa88:	3304      	adds	r3, #4
 801fa8a:	4419      	add	r1, r3
 801fa8c:	2300      	movs	r3, #0
 801fa8e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801fa92:	9700      	str	r7, [sp, #0]
 801fa94:	f7f4 fe72 	bl	801477c <ucdr_init_buffer_origin_offset>
 801fa98:	9f06      	ldr	r7, [sp, #24]
 801fa9a:	4658      	mov	r0, fp
 801fa9c:	2302      	movs	r3, #2
 801fa9e:	b2ba      	uxth	r2, r7
 801faa0:	210d      	movs	r1, #13
 801faa2:	f7fa fdd7 	bl	801a654 <uxr_buffer_submessage_header>
 801faa6:	f108 0104 	add.w	r1, r8, #4
 801faaa:	9b03      	ldr	r3, [sp, #12]
 801faac:	f1a5 0208 	sub.w	r2, r5, #8
 801fab0:	8925      	ldrh	r5, [r4, #8]
 801fab2:	440b      	add	r3, r1
 801fab4:	eba2 0208 	sub.w	r2, r2, r8
 801fab8:	fbb6 f0f5 	udiv	r0, r6, r5
 801fabc:	4619      	mov	r1, r3
 801fabe:	6863      	ldr	r3, [r4, #4]
 801fac0:	fb05 6010 	mls	r0, r5, r0, r6
 801fac4:	fbb3 f3f5 	udiv	r3, r3, r5
 801fac8:	b280      	uxth	r0, r0
 801faca:	6825      	ldr	r5, [r4, #0]
 801facc:	fb00 f303 	mul.w	r3, r0, r3
 801fad0:	7b20      	ldrb	r0, [r4, #12]
 801fad2:	3004      	adds	r0, #4
 801fad4:	4438      	add	r0, r7
 801fad6:	50e8      	str	r0, [r5, r3]
 801fad8:	9d04      	ldr	r5, [sp, #16]
 801fada:	4628      	mov	r0, r5
 801fadc:	f7f4 fe60 	bl	80147a0 <ucdr_init_buffer>
 801fae0:	4628      	mov	r0, r5
 801fae2:	4622      	mov	r2, r4
 801fae4:	493d      	ldr	r1, [pc, #244]	; (801fbdc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801fae6:	f7f4 fe2f 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 801faea:	2001      	movs	r0, #1
 801faec:	81e6      	strh	r6, [r4, #14]
 801faee:	b011      	add	sp, #68	; 0x44
 801faf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faf4:	2101      	movs	r1, #1
 801faf6:	89e0      	ldrh	r0, [r4, #14]
 801faf8:	f000 f954 	bl	801fda4 <uxr_seq_num_add>
 801fafc:	4605      	mov	r5, r0
 801fafe:	8921      	ldrh	r1, [r4, #8]
 801fb00:	8a60      	ldrh	r0, [r4, #18]
 801fb02:	f000 f94f 	bl	801fda4 <uxr_seq_num_add>
 801fb06:	4601      	mov	r1, r0
 801fb08:	4628      	mov	r0, r5
 801fb0a:	f000 f953 	bl	801fdb4 <uxr_seq_num_cmp>
 801fb0e:	2800      	cmp	r0, #0
 801fb10:	dd44      	ble.n	801fb9c <uxr_prepare_reliable_buffer_to_write+0x298>
 801fb12:	2000      	movs	r0, #0
 801fb14:	b011      	add	sp, #68	; 0x44
 801fb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb1a:	8921      	ldrh	r1, [r4, #8]
 801fb1c:	8a60      	ldrh	r0, [r4, #18]
 801fb1e:	9205      	str	r2, [sp, #20]
 801fb20:	f000 f940 	bl	801fda4 <uxr_seq_num_add>
 801fb24:	4601      	mov	r1, r0
 801fb26:	4630      	mov	r0, r6
 801fb28:	f000 f944 	bl	801fdb4 <uxr_seq_num_cmp>
 801fb2c:	2800      	cmp	r0, #0
 801fb2e:	9a05      	ldr	r2, [sp, #20]
 801fb30:	dcef      	bgt.n	801fb12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fb32:	8925      	ldrh	r5, [r4, #8]
 801fb34:	e9d4 7300 	ldrd	r7, r3, [r4]
 801fb38:	fbb6 f4f5 	udiv	r4, r6, r5
 801fb3c:	fbb3 f3f5 	udiv	r3, r3, r5
 801fb40:	fb05 6414 	mls	r4, r5, r4, r6
 801fb44:	b2a4      	uxth	r4, r4
 801fb46:	fb04 f303 	mul.w	r3, r4, r3
 801fb4a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801fb4e:	50fa      	str	r2, [r7, r3]
 801fb50:	2300      	movs	r3, #0
 801fb52:	f8cd 8000 	str.w	r8, [sp]
 801fb56:	f7f4 fe11 	bl	801477c <ucdr_init_buffer_origin_offset>
 801fb5a:	2001      	movs	r0, #1
 801fb5c:	e7da      	b.n	801fb14 <uxr_prepare_reliable_buffer_to_write+0x210>
 801fb5e:	3201      	adds	r2, #1
 801fb60:	9306      	str	r3, [sp, #24]
 801fb62:	b293      	uxth	r3, r2
 801fb64:	4553      	cmp	r3, sl
 801fb66:	d8d4      	bhi.n	801fb12 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fb68:	e739      	b.n	801f9de <uxr_prepare_reliable_buffer_to_write+0xda>
 801fb6a:	4630      	mov	r0, r6
 801fb6c:	2101      	movs	r1, #1
 801fb6e:	9307      	str	r3, [sp, #28]
 801fb70:	f000 f918 	bl	801fda4 <uxr_seq_num_add>
 801fb74:	4606      	mov	r6, r0
 801fb76:	8920      	ldrh	r0, [r4, #8]
 801fb78:	6862      	ldr	r2, [r4, #4]
 801fb7a:	fbb6 f1f0 	udiv	r1, r6, r0
 801fb7e:	fbb2 f2f0 	udiv	r2, r2, r0
 801fb82:	fb00 6111 	mls	r1, r0, r1, r6
 801fb86:	b289      	uxth	r1, r1
 801fb88:	fb01 f202 	mul.w	r2, r1, r2
 801fb8c:	6821      	ldr	r1, [r4, #0]
 801fb8e:	3204      	adds	r2, #4
 801fb90:	188b      	adds	r3, r1, r2
 801fb92:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801fb96:	9303      	str	r3, [sp, #12]
 801fb98:	9b07      	ldr	r3, [sp, #28]
 801fb9a:	e70c      	b.n	801f9b6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801fb9c:	8921      	ldrh	r1, [r4, #8]
 801fb9e:	6863      	ldr	r3, [r4, #4]
 801fba0:	9804      	ldr	r0, [sp, #16]
 801fba2:	fbb5 f2f1 	udiv	r2, r5, r1
 801fba6:	fbb3 f3f1 	udiv	r3, r3, r1
 801fbaa:	fb01 5212 	mls	r2, r1, r2, r5
 801fbae:	6821      	ldr	r1, [r4, #0]
 801fbb0:	b292      	uxth	r2, r2
 801fbb2:	fb02 f303 	mul.w	r3, r2, r3
 801fbb6:	7b22      	ldrb	r2, [r4, #12]
 801fbb8:	3304      	adds	r3, #4
 801fbba:	445a      	add	r2, fp
 801fbbc:	4419      	add	r1, r3
 801fbbe:	f841 2c04 	str.w	r2, [r1, #-4]
 801fbc2:	7b23      	ldrb	r3, [r4, #12]
 801fbc4:	9300      	str	r3, [sp, #0]
 801fbc6:	2300      	movs	r3, #0
 801fbc8:	f7f4 fdd8 	bl	801477c <ucdr_init_buffer_origin_offset>
 801fbcc:	2001      	movs	r0, #1
 801fbce:	81e5      	strh	r5, [r4, #14]
 801fbd0:	e7a0      	b.n	801fb14 <uxr_prepare_reliable_buffer_to_write+0x210>
 801fbd2:	4682      	mov	sl, r0
 801fbd4:	e6cb      	b.n	801f96e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801fbd6:	f10d 0b20 	add.w	fp, sp, #32
 801fbda:	e747      	b.n	801fa6c <uxr_prepare_reliable_buffer_to_write+0x168>
 801fbdc:	0801f7dd 	.word	0x0801f7dd

0801fbe0 <uxr_prepare_next_reliable_buffer_to_send>:
 801fbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbe2:	4604      	mov	r4, r0
 801fbe4:	461d      	mov	r5, r3
 801fbe6:	460f      	mov	r7, r1
 801fbe8:	8a00      	ldrh	r0, [r0, #16]
 801fbea:	2101      	movs	r1, #1
 801fbec:	4616      	mov	r6, r2
 801fbee:	f000 f8d9 	bl	801fda4 <uxr_seq_num_add>
 801fbf2:	8028      	strh	r0, [r5, #0]
 801fbf4:	8922      	ldrh	r2, [r4, #8]
 801fbf6:	6863      	ldr	r3, [r4, #4]
 801fbf8:	fbb0 f1f2 	udiv	r1, r0, r2
 801fbfc:	fbb3 f3f2 	udiv	r3, r3, r2
 801fc00:	fb02 0c11 	mls	ip, r2, r1, r0
 801fc04:	89e1      	ldrh	r1, [r4, #14]
 801fc06:	fa1f fc8c 	uxth.w	ip, ip
 801fc0a:	fb0c fc03 	mul.w	ip, ip, r3
 801fc0e:	6823      	ldr	r3, [r4, #0]
 801fc10:	f10c 0c04 	add.w	ip, ip, #4
 801fc14:	4463      	add	r3, ip
 801fc16:	603b      	str	r3, [r7, #0]
 801fc18:	6823      	ldr	r3, [r4, #0]
 801fc1a:	449c      	add	ip, r3
 801fc1c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801fc20:	6033      	str	r3, [r6, #0]
 801fc22:	f000 f8c7 	bl	801fdb4 <uxr_seq_num_cmp>
 801fc26:	2800      	cmp	r0, #0
 801fc28:	dd01      	ble.n	801fc2e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801fc2a:	2000      	movs	r0, #0
 801fc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc2e:	7b23      	ldrb	r3, [r4, #12]
 801fc30:	6832      	ldr	r2, [r6, #0]
 801fc32:	429a      	cmp	r2, r3
 801fc34:	d9f9      	bls.n	801fc2a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801fc36:	8a61      	ldrh	r1, [r4, #18]
 801fc38:	8a20      	ldrh	r0, [r4, #16]
 801fc3a:	f000 f8b7 	bl	801fdac <uxr_seq_num_sub>
 801fc3e:	8923      	ldrh	r3, [r4, #8]
 801fc40:	4283      	cmp	r3, r0
 801fc42:	d0f2      	beq.n	801fc2a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801fc44:	8828      	ldrh	r0, [r5, #0]
 801fc46:	89e3      	ldrh	r3, [r4, #14]
 801fc48:	8220      	strh	r0, [r4, #16]
 801fc4a:	4298      	cmp	r0, r3
 801fc4c:	d001      	beq.n	801fc52 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801fc4e:	2001      	movs	r0, #1
 801fc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc52:	2101      	movs	r1, #1
 801fc54:	f000 f8a6 	bl	801fda4 <uxr_seq_num_add>
 801fc58:	4603      	mov	r3, r0
 801fc5a:	2001      	movs	r0, #1
 801fc5c:	81e3      	strh	r3, [r4, #14]
 801fc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fc60 <uxr_update_output_stream_heartbeat_timestamp>:
 801fc60:	b570      	push	{r4, r5, r6, lr}
 801fc62:	8a01      	ldrh	r1, [r0, #16]
 801fc64:	4604      	mov	r4, r0
 801fc66:	8a40      	ldrh	r0, [r0, #18]
 801fc68:	4615      	mov	r5, r2
 801fc6a:	461e      	mov	r6, r3
 801fc6c:	f000 f8a2 	bl	801fdb4 <uxr_seq_num_cmp>
 801fc70:	2800      	cmp	r0, #0
 801fc72:	db07      	blt.n	801fc84 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801fc74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fc78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fc7c:	2000      	movs	r0, #0
 801fc7e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801fc82:	bd70      	pop	{r4, r5, r6, pc}
 801fc84:	f894 0020 	ldrb.w	r0, [r4, #32]
 801fc88:	b940      	cbnz	r0, 801fc9c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801fc8a:	2301      	movs	r3, #1
 801fc8c:	f884 3020 	strb.w	r3, [r4, #32]
 801fc90:	3564      	adds	r5, #100	; 0x64
 801fc92:	f146 0600 	adc.w	r6, r6, #0
 801fc96:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801fc9a:	bd70      	pop	{r4, r5, r6, pc}
 801fc9c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801fca0:	4295      	cmp	r5, r2
 801fca2:	eb76 0303 	sbcs.w	r3, r6, r3
 801fca6:	db04      	blt.n	801fcb2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801fca8:	1c43      	adds	r3, r0, #1
 801fcaa:	2001      	movs	r0, #1
 801fcac:	f884 3020 	strb.w	r3, [r4, #32]
 801fcb0:	e7ee      	b.n	801fc90 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801fcb2:	2000      	movs	r0, #0
 801fcb4:	e7ec      	b.n	801fc90 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801fcb6:	bf00      	nop

0801fcb8 <uxr_begin_output_nack_buffer_it>:
 801fcb8:	8a40      	ldrh	r0, [r0, #18]
 801fcba:	4770      	bx	lr

0801fcbc <uxr_next_reliable_nack_buffer_to_send>:
 801fcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcc0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801fcc4:	b197      	cbz	r7, 801fcec <uxr_next_reliable_nack_buffer_to_send+0x30>
 801fcc6:	4680      	mov	r8, r0
 801fcc8:	460d      	mov	r5, r1
 801fcca:	4616      	mov	r6, r2
 801fccc:	461c      	mov	r4, r3
 801fcce:	8818      	ldrh	r0, [r3, #0]
 801fcd0:	2101      	movs	r1, #1
 801fcd2:	f000 f867 	bl	801fda4 <uxr_seq_num_add>
 801fcd6:	8020      	strh	r0, [r4, #0]
 801fcd8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801fcdc:	f000 f86a 	bl	801fdb4 <uxr_seq_num_cmp>
 801fce0:	2800      	cmp	r0, #0
 801fce2:	dd06      	ble.n	801fcf2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801fce4:	2300      	movs	r3, #0
 801fce6:	461f      	mov	r7, r3
 801fce8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801fcec:	4638      	mov	r0, r7
 801fcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcf2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801fcf6:	8820      	ldrh	r0, [r4, #0]
 801fcf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fcfc:	fbb0 f3f2 	udiv	r3, r0, r2
 801fd00:	fbb1 fcf2 	udiv	ip, r1, r2
 801fd04:	fb02 0313 	mls	r3, r2, r3, r0
 801fd08:	b29b      	uxth	r3, r3
 801fd0a:	fb03 fc0c 	mul.w	ip, r3, ip
 801fd0e:	f8d8 3000 	ldr.w	r3, [r8]
 801fd12:	f10c 0c04 	add.w	ip, ip, #4
 801fd16:	4463      	add	r3, ip
 801fd18:	602b      	str	r3, [r5, #0]
 801fd1a:	f8d8 3000 	ldr.w	r3, [r8]
 801fd1e:	4463      	add	r3, ip
 801fd20:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801fd24:	6033      	str	r3, [r6, #0]
 801fd26:	f898 200c 	ldrb.w	r2, [r8, #12]
 801fd2a:	429a      	cmp	r2, r3
 801fd2c:	d0d0      	beq.n	801fcd0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801fd2e:	e7dd      	b.n	801fcec <uxr_next_reliable_nack_buffer_to_send+0x30>

0801fd30 <uxr_process_acknack>:
 801fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd32:	4604      	mov	r4, r0
 801fd34:	460e      	mov	r6, r1
 801fd36:	4610      	mov	r0, r2
 801fd38:	2101      	movs	r1, #1
 801fd3a:	f000 f837 	bl	801fdac <uxr_seq_num_sub>
 801fd3e:	8a61      	ldrh	r1, [r4, #18]
 801fd40:	f000 f834 	bl	801fdac <uxr_seq_num_sub>
 801fd44:	b1c8      	cbz	r0, 801fd7a <uxr_process_acknack+0x4a>
 801fd46:	4605      	mov	r5, r0
 801fd48:	2700      	movs	r7, #0
 801fd4a:	2101      	movs	r1, #1
 801fd4c:	8a60      	ldrh	r0, [r4, #18]
 801fd4e:	f000 f829 	bl	801fda4 <uxr_seq_num_add>
 801fd52:	8923      	ldrh	r3, [r4, #8]
 801fd54:	6862      	ldr	r2, [r4, #4]
 801fd56:	3701      	adds	r7, #1
 801fd58:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801fd5c:	6821      	ldr	r1, [r4, #0]
 801fd5e:	42bd      	cmp	r5, r7
 801fd60:	8260      	strh	r0, [r4, #18]
 801fd62:	fbb0 fef3 	udiv	lr, r0, r3
 801fd66:	fbb2 f2f3 	udiv	r2, r2, r3
 801fd6a:	fb03 031e 	mls	r3, r3, lr, r0
 801fd6e:	b29b      	uxth	r3, r3
 801fd70:	fb02 f303 	mul.w	r3, r2, r3
 801fd74:	f841 c003 	str.w	ip, [r1, r3]
 801fd78:	d1e7      	bne.n	801fd4a <uxr_process_acknack+0x1a>
 801fd7a:	3e00      	subs	r6, #0
 801fd7c:	f04f 0300 	mov.w	r3, #0
 801fd80:	bf18      	it	ne
 801fd82:	2601      	movne	r6, #1
 801fd84:	f884 3020 	strb.w	r3, [r4, #32]
 801fd88:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801fd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd8e:	bf00      	nop

0801fd90 <uxr_is_output_up_to_date>:
 801fd90:	8a01      	ldrh	r1, [r0, #16]
 801fd92:	8a40      	ldrh	r0, [r0, #18]
 801fd94:	b508      	push	{r3, lr}
 801fd96:	f000 f80d 	bl	801fdb4 <uxr_seq_num_cmp>
 801fd9a:	fab0 f080 	clz	r0, r0
 801fd9e:	0940      	lsrs	r0, r0, #5
 801fda0:	bd08      	pop	{r3, pc}
 801fda2:	bf00      	nop

0801fda4 <uxr_seq_num_add>:
 801fda4:	4408      	add	r0, r1
 801fda6:	b280      	uxth	r0, r0
 801fda8:	4770      	bx	lr
 801fdaa:	bf00      	nop

0801fdac <uxr_seq_num_sub>:
 801fdac:	1a40      	subs	r0, r0, r1
 801fdae:	b280      	uxth	r0, r0
 801fdb0:	4770      	bx	lr
 801fdb2:	bf00      	nop

0801fdb4 <uxr_seq_num_cmp>:
 801fdb4:	4288      	cmp	r0, r1
 801fdb6:	d011      	beq.n	801fddc <uxr_seq_num_cmp+0x28>
 801fdb8:	d309      	bcc.n	801fdce <uxr_seq_num_cmp+0x1a>
 801fdba:	4288      	cmp	r0, r1
 801fdbc:	d910      	bls.n	801fde0 <uxr_seq_num_cmp+0x2c>
 801fdbe:	1a40      	subs	r0, r0, r1
 801fdc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801fdc4:	bfd4      	ite	le
 801fdc6:	2001      	movle	r0, #1
 801fdc8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801fdcc:	4770      	bx	lr
 801fdce:	1a0b      	subs	r3, r1, r0
 801fdd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fdd4:	daf1      	bge.n	801fdba <uxr_seq_num_cmp+0x6>
 801fdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fdda:	4770      	bx	lr
 801fddc:	2000      	movs	r0, #0
 801fdde:	4770      	bx	lr
 801fde0:	2001      	movs	r0, #1
 801fde2:	4770      	bx	lr

0801fde4 <uxr_prepare_output_stream>:
 801fde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fde6:	b087      	sub	sp, #28
 801fde8:	2707      	movs	r7, #7
 801fdea:	2500      	movs	r5, #0
 801fdec:	461c      	mov	r4, r3
 801fdee:	4606      	mov	r6, r0
 801fdf0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801fdf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fdf6:	e9cd 7500 	strd	r7, r5, [sp]
 801fdfa:	3204      	adds	r2, #4
 801fdfc:	f7f9 fd02 	bl	8019804 <uxr_prepare_stream_to_write_submessage>
 801fe00:	f080 0201 	eor.w	r2, r0, #1
 801fe04:	b2d2      	uxtb	r2, r2
 801fe06:	75a2      	strb	r2, [r4, #22]
 801fe08:	b112      	cbz	r2, 801fe10 <uxr_prepare_output_stream+0x2c>
 801fe0a:	4628      	mov	r0, r5
 801fe0c:	b007      	add	sp, #28
 801fe0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe10:	aa05      	add	r2, sp, #20
 801fe12:	9902      	ldr	r1, [sp, #8]
 801fe14:	4630      	mov	r0, r6
 801fe16:	f7f9 fe31 	bl	8019a7c <uxr_init_base_object_request>
 801fe1a:	a905      	add	r1, sp, #20
 801fe1c:	4605      	mov	r5, r0
 801fe1e:	4620      	mov	r0, r4
 801fe20:	f7fb fb78 	bl	801b514 <uxr_serialize_WRITE_DATA_Payload_Data>
 801fe24:	69a6      	ldr	r6, [r4, #24]
 801fe26:	69e7      	ldr	r7, [r4, #28]
 801fe28:	4620      	mov	r0, r4
 801fe2a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801fe2e:	1a52      	subs	r2, r2, r1
 801fe30:	f7f4 fcb6 	bl	80147a0 <ucdr_init_buffer>
 801fe34:	4620      	mov	r0, r4
 801fe36:	463a      	mov	r2, r7
 801fe38:	4631      	mov	r1, r6
 801fe3a:	f7f4 fc85 	bl	8014748 <ucdr_set_on_full_buffer_callback>
 801fe3e:	4628      	mov	r0, r5
 801fe40:	b007      	add	sp, #28
 801fe42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fe44 <rcl_get_default_domain_id>:
 801fe44:	b530      	push	{r4, r5, lr}
 801fe46:	2300      	movs	r3, #0
 801fe48:	b083      	sub	sp, #12
 801fe4a:	9300      	str	r3, [sp, #0]
 801fe4c:	b1d0      	cbz	r0, 801fe84 <rcl_get_default_domain_id+0x40>
 801fe4e:	4604      	mov	r4, r0
 801fe50:	4669      	mov	r1, sp
 801fe52:	4815      	ldr	r0, [pc, #84]	; (801fea8 <rcl_get_default_domain_id+0x64>)
 801fe54:	f7f6 f8f8 	bl	8016048 <rcutils_get_env>
 801fe58:	4602      	mov	r2, r0
 801fe5a:	b110      	cbz	r0, 801fe62 <rcl_get_default_domain_id+0x1e>
 801fe5c:	2001      	movs	r0, #1
 801fe5e:	b003      	add	sp, #12
 801fe60:	bd30      	pop	{r4, r5, pc}
 801fe62:	9b00      	ldr	r3, [sp, #0]
 801fe64:	b18b      	cbz	r3, 801fe8a <rcl_get_default_domain_id+0x46>
 801fe66:	7818      	ldrb	r0, [r3, #0]
 801fe68:	2800      	cmp	r0, #0
 801fe6a:	d0f8      	beq.n	801fe5e <rcl_get_default_domain_id+0x1a>
 801fe6c:	a901      	add	r1, sp, #4
 801fe6e:	4618      	mov	r0, r3
 801fe70:	9201      	str	r2, [sp, #4]
 801fe72:	f000 fd0f 	bl	8020894 <strtoul>
 801fe76:	4605      	mov	r5, r0
 801fe78:	b150      	cbz	r0, 801fe90 <rcl_get_default_domain_id+0x4c>
 801fe7a:	1c43      	adds	r3, r0, #1
 801fe7c:	d00d      	beq.n	801fe9a <rcl_get_default_domain_id+0x56>
 801fe7e:	2000      	movs	r0, #0
 801fe80:	6025      	str	r5, [r4, #0]
 801fe82:	e7ec      	b.n	801fe5e <rcl_get_default_domain_id+0x1a>
 801fe84:	200b      	movs	r0, #11
 801fe86:	b003      	add	sp, #12
 801fe88:	bd30      	pop	{r4, r5, pc}
 801fe8a:	4618      	mov	r0, r3
 801fe8c:	b003      	add	sp, #12
 801fe8e:	bd30      	pop	{r4, r5, pc}
 801fe90:	9b01      	ldr	r3, [sp, #4]
 801fe92:	781b      	ldrb	r3, [r3, #0]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d0f2      	beq.n	801fe7e <rcl_get_default_domain_id+0x3a>
 801fe98:	e7e0      	b.n	801fe5c <rcl_get_default_domain_id+0x18>
 801fe9a:	f001 f949 	bl	8021130 <__errno>
 801fe9e:	6803      	ldr	r3, [r0, #0]
 801fea0:	2b22      	cmp	r3, #34	; 0x22
 801fea2:	d1ec      	bne.n	801fe7e <rcl_get_default_domain_id+0x3a>
 801fea4:	e7da      	b.n	801fe5c <rcl_get_default_domain_id+0x18>
 801fea6:	bf00      	nop
 801fea8:	08023328 	.word	0x08023328

0801feac <rcl_expand_topic_name>:
 801feac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801feb0:	b08d      	sub	sp, #52	; 0x34
 801feb2:	4698      	mov	r8, r3
 801feb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801feb6:	9207      	str	r2, [sp, #28]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	bf18      	it	ne
 801febc:	f1b8 0f00 	cmpne.w	r8, #0
 801fec0:	bf0c      	ite	eq
 801fec2:	2301      	moveq	r3, #1
 801fec4:	2300      	movne	r3, #0
 801fec6:	2a00      	cmp	r2, #0
 801fec8:	bf08      	it	eq
 801feca:	f043 0301 	orreq.w	r3, r3, #1
 801fece:	2900      	cmp	r1, #0
 801fed0:	bf08      	it	eq
 801fed2:	f043 0301 	orreq.w	r3, r3, #1
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d13d      	bne.n	801ff56 <rcl_expand_topic_name+0xaa>
 801feda:	fab0 f280 	clz	r2, r0
 801fede:	4604      	mov	r4, r0
 801fee0:	0952      	lsrs	r2, r2, #5
 801fee2:	2800      	cmp	r0, #0
 801fee4:	d037      	beq.n	801ff56 <rcl_expand_topic_name+0xaa>
 801fee6:	460f      	mov	r7, r1
 801fee8:	a90b      	add	r1, sp, #44	; 0x2c
 801feea:	f000 f967 	bl	80201bc <rcl_validate_topic_name>
 801feee:	4605      	mov	r5, r0
 801fef0:	bb68      	cbnz	r0, 801ff4e <rcl_expand_topic_name+0xa2>
 801fef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d137      	bne.n	801ff68 <rcl_expand_topic_name+0xbc>
 801fef8:	4602      	mov	r2, r0
 801fefa:	a90b      	add	r1, sp, #44	; 0x2c
 801fefc:	4638      	mov	r0, r7
 801fefe:	f7f6 fb61 	bl	80165c4 <rmw_validate_node_name>
 801ff02:	bb68      	cbnz	r0, 801ff60 <rcl_expand_topic_name+0xb4>
 801ff04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d133      	bne.n	801ff72 <rcl_expand_topic_name+0xc6>
 801ff0a:	462a      	mov	r2, r5
 801ff0c:	a90b      	add	r1, sp, #44	; 0x2c
 801ff0e:	9807      	ldr	r0, [sp, #28]
 801ff10:	f7f6 fb3a 	bl	8016588 <rmw_validate_namespace>
 801ff14:	bb20      	cbnz	r0, 801ff60 <rcl_expand_topic_name+0xb4>
 801ff16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ff18:	2d00      	cmp	r5, #0
 801ff1a:	f040 80a2 	bne.w	8020062 <rcl_expand_topic_name+0x1b6>
 801ff1e:	217b      	movs	r1, #123	; 0x7b
 801ff20:	4620      	mov	r0, r4
 801ff22:	f001 f879 	bl	8021018 <strchr>
 801ff26:	7823      	ldrb	r3, [r4, #0]
 801ff28:	4681      	mov	r9, r0
 801ff2a:	bb20      	cbnz	r0, 801ff76 <rcl_expand_topic_name+0xca>
 801ff2c:	2b2f      	cmp	r3, #47	; 0x2f
 801ff2e:	d122      	bne.n	801ff76 <rcl_expand_topic_name+0xca>
 801ff30:	ab19      	add	r3, sp, #100	; 0x64
 801ff32:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ff36:	ab16      	add	r3, sp, #88	; 0x58
 801ff38:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ff40:	f7f6 fa08 	bl	8016354 <rcutils_strdup>
 801ff44:	2800      	cmp	r0, #0
 801ff46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ff48:	bf08      	it	eq
 801ff4a:	250a      	moveq	r5, #10
 801ff4c:	6018      	str	r0, [r3, #0]
 801ff4e:	4628      	mov	r0, r5
 801ff50:	b00d      	add	sp, #52	; 0x34
 801ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff56:	250b      	movs	r5, #11
 801ff58:	4628      	mov	r0, r5
 801ff5a:	b00d      	add	sp, #52	; 0x34
 801ff5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff60:	f7fb fc48 	bl	801b7f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801ff64:	4605      	mov	r5, r0
 801ff66:	e7f2      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 801ff68:	2567      	movs	r5, #103	; 0x67
 801ff6a:	4628      	mov	r0, r5
 801ff6c:	b00d      	add	sp, #52	; 0x34
 801ff6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff72:	25c9      	movs	r5, #201	; 0xc9
 801ff74:	e7eb      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 801ff76:	2b7e      	cmp	r3, #126	; 0x7e
 801ff78:	d075      	beq.n	8020066 <rcl_expand_topic_name+0x1ba>
 801ff7a:	f1b9 0f00 	cmp.w	r9, #0
 801ff7e:	f000 80c2 	beq.w	8020106 <rcl_expand_topic_name+0x25a>
 801ff82:	2300      	movs	r3, #0
 801ff84:	46a2      	mov	sl, r4
 801ff86:	461e      	mov	r6, r3
 801ff88:	9508      	str	r5, [sp, #32]
 801ff8a:	4655      	mov	r5, sl
 801ff8c:	9409      	str	r4, [sp, #36]	; 0x24
 801ff8e:	46b2      	mov	sl, r6
 801ff90:	464c      	mov	r4, r9
 801ff92:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ff96:	2c00      	cmp	r4, #0
 801ff98:	f000 80ae 	beq.w	80200f8 <rcl_expand_topic_name+0x24c>
 801ff9c:	217d      	movs	r1, #125	; 0x7d
 801ff9e:	4628      	mov	r0, r5
 801ffa0:	f001 f83a 	bl	8021018 <strchr>
 801ffa4:	eba0 0904 	sub.w	r9, r0, r4
 801ffa8:	4621      	mov	r1, r4
 801ffaa:	4869      	ldr	r0, [pc, #420]	; (8020150 <rcl_expand_topic_name+0x2a4>)
 801ffac:	f109 0601 	add.w	r6, r9, #1
 801ffb0:	4632      	mov	r2, r6
 801ffb2:	f001 f83e 	bl	8021032 <strncmp>
 801ffb6:	2800      	cmp	r0, #0
 801ffb8:	d051      	beq.n	802005e <rcl_expand_topic_name+0x1b2>
 801ffba:	4632      	mov	r2, r6
 801ffbc:	4621      	mov	r1, r4
 801ffbe:	4865      	ldr	r0, [pc, #404]	; (8020154 <rcl_expand_topic_name+0x2a8>)
 801ffc0:	f001 f837 	bl	8021032 <strncmp>
 801ffc4:	b128      	cbz	r0, 801ffd2 <rcl_expand_topic_name+0x126>
 801ffc6:	4632      	mov	r2, r6
 801ffc8:	4621      	mov	r1, r4
 801ffca:	4863      	ldr	r0, [pc, #396]	; (8020158 <rcl_expand_topic_name+0x2ac>)
 801ffcc:	f001 f831 	bl	8021032 <strncmp>
 801ffd0:	bb38      	cbnz	r0, 8020022 <rcl_expand_topic_name+0x176>
 801ffd2:	46d9      	mov	r9, fp
 801ffd4:	ab18      	add	r3, sp, #96	; 0x60
 801ffd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ffda:	ab16      	add	r3, sp, #88	; 0x58
 801ffdc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ffe0:	4620      	mov	r0, r4
 801ffe2:	4631      	mov	r1, r6
 801ffe4:	cb0c      	ldmia	r3, {r2, r3}
 801ffe6:	f7f6 f9d7 	bl	8016398 <rcutils_strndup>
 801ffea:	4604      	mov	r4, r0
 801ffec:	2800      	cmp	r0, #0
 801ffee:	f000 80a3 	beq.w	8020138 <rcl_expand_topic_name+0x28c>
 801fff2:	464a      	mov	r2, r9
 801fff4:	4628      	mov	r0, r5
 801fff6:	ab16      	add	r3, sp, #88	; 0x58
 801fff8:	4621      	mov	r1, r4
 801fffa:	f7f6 f8ab 	bl	8016154 <rcutils_repl_str>
 801fffe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020000:	4605      	mov	r5, r0
 8020002:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020004:	4620      	mov	r0, r4
 8020006:	4798      	blx	r3
 8020008:	4650      	mov	r0, sl
 802000a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802000c:	991a      	ldr	r1, [sp, #104]	; 0x68
 802000e:	4798      	blx	r3
 8020010:	2d00      	cmp	r5, #0
 8020012:	d06c      	beq.n	80200ee <rcl_expand_topic_name+0x242>
 8020014:	217b      	movs	r1, #123	; 0x7b
 8020016:	4628      	mov	r0, r5
 8020018:	f000 fffe 	bl	8021018 <strchr>
 802001c:	46aa      	mov	sl, r5
 802001e:	4604      	mov	r4, r0
 8020020:	e7b9      	b.n	801ff96 <rcl_expand_topic_name+0xea>
 8020022:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8020026:	1c61      	adds	r1, r4, #1
 8020028:	4640      	mov	r0, r8
 802002a:	f7fd ffdb 	bl	801dfe4 <rcutils_string_map_getn>
 802002e:	4681      	mov	r9, r0
 8020030:	2800      	cmp	r0, #0
 8020032:	d1cf      	bne.n	801ffd4 <rcl_expand_topic_name+0x128>
 8020034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020036:	aa18      	add	r2, sp, #96	; 0x60
 8020038:	2569      	movs	r5, #105	; 0x69
 802003a:	6018      	str	r0, [r3, #0]
 802003c:	ab16      	add	r3, sp, #88	; 0x58
 802003e:	ca07      	ldmia	r2, {r0, r1, r2}
 8020040:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8020044:	4631      	mov	r1, r6
 8020046:	4620      	mov	r0, r4
 8020048:	cb0c      	ldmia	r3, {r2, r3}
 802004a:	f7f6 f9a5 	bl	8016398 <rcutils_strndup>
 802004e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020052:	4798      	blx	r3
 8020054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020056:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020058:	4650      	mov	r0, sl
 802005a:	4798      	blx	r3
 802005c:	e777      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 802005e:	46b9      	mov	r9, r7
 8020060:	e7b8      	b.n	801ffd4 <rcl_expand_topic_name+0x128>
 8020062:	25ca      	movs	r5, #202	; 0xca
 8020064:	e773      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 8020066:	9e07      	ldr	r6, [sp, #28]
 8020068:	4630      	mov	r0, r6
 802006a:	f7e0 f8f3 	bl	8000254 <strlen>
 802006e:	4a3b      	ldr	r2, [pc, #236]	; (802015c <rcl_expand_topic_name+0x2b0>)
 8020070:	4b3b      	ldr	r3, [pc, #236]	; (8020160 <rcl_expand_topic_name+0x2b4>)
 8020072:	9603      	str	r6, [sp, #12]
 8020074:	2801      	cmp	r0, #1
 8020076:	bf18      	it	ne
 8020078:	4613      	movne	r3, r2
 802007a:	9704      	str	r7, [sp, #16]
 802007c:	9302      	str	r3, [sp, #8]
 802007e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020080:	9300      	str	r3, [sp, #0]
 8020082:	1c63      	adds	r3, r4, #1
 8020084:	9305      	str	r3, [sp, #20]
 8020086:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802008a:	9301      	str	r3, [sp, #4]
 802008c:	ab16      	add	r3, sp, #88	; 0x58
 802008e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020090:	f7f6 f826 	bl	80160e0 <rcutils_format_string_limit>
 8020094:	4606      	mov	r6, r0
 8020096:	b350      	cbz	r0, 80200ee <rcl_expand_topic_name+0x242>
 8020098:	f1b9 0f00 	cmp.w	r9, #0
 802009c:	d005      	beq.n	80200aa <rcl_expand_topic_name+0x1fe>
 802009e:	217b      	movs	r1, #123	; 0x7b
 80200a0:	46b2      	mov	sl, r6
 80200a2:	f000 ffb9 	bl	8021018 <strchr>
 80200a6:	4681      	mov	r9, r0
 80200a8:	e76e      	b.n	801ff88 <rcl_expand_topic_name+0xdc>
 80200aa:	7833      	ldrb	r3, [r6, #0]
 80200ac:	2b2f      	cmp	r3, #47	; 0x2f
 80200ae:	d01b      	beq.n	80200e8 <rcl_expand_topic_name+0x23c>
 80200b0:	9c07      	ldr	r4, [sp, #28]
 80200b2:	4620      	mov	r0, r4
 80200b4:	f7e0 f8ce 	bl	8000254 <strlen>
 80200b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80200bc:	4a29      	ldr	r2, [pc, #164]	; (8020164 <rcl_expand_topic_name+0x2b8>)
 80200be:	9301      	str	r3, [sp, #4]
 80200c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80200c2:	9604      	str	r6, [sp, #16]
 80200c4:	9300      	str	r3, [sp, #0]
 80200c6:	4b28      	ldr	r3, [pc, #160]	; (8020168 <rcl_expand_topic_name+0x2bc>)
 80200c8:	9403      	str	r4, [sp, #12]
 80200ca:	2801      	cmp	r0, #1
 80200cc:	bf18      	it	ne
 80200ce:	4613      	movne	r3, r2
 80200d0:	9302      	str	r3, [sp, #8]
 80200d2:	ab16      	add	r3, sp, #88	; 0x58
 80200d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80200d6:	f7f6 f803 	bl	80160e0 <rcutils_format_string_limit>
 80200da:	4603      	mov	r3, r0
 80200dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80200de:	4630      	mov	r0, r6
 80200e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80200e2:	461e      	mov	r6, r3
 80200e4:	4790      	blx	r2
 80200e6:	b116      	cbz	r6, 80200ee <rcl_expand_topic_name+0x242>
 80200e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80200ea:	601e      	str	r6, [r3, #0]
 80200ec:	e72f      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 80200ee:	2300      	movs	r3, #0
 80200f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80200f2:	250a      	movs	r5, #10
 80200f4:	6013      	str	r3, [r2, #0]
 80200f6:	e72a      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 80200f8:	4653      	mov	r3, sl
 80200fa:	4656      	mov	r6, sl
 80200fc:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8020100:	2b00      	cmp	r3, #0
 8020102:	d1d2      	bne.n	80200aa <rcl_expand_topic_name+0x1fe>
 8020104:	7823      	ldrb	r3, [r4, #0]
 8020106:	2b2f      	cmp	r3, #47	; 0x2f
 8020108:	d01e      	beq.n	8020148 <rcl_expand_topic_name+0x29c>
 802010a:	9e07      	ldr	r6, [sp, #28]
 802010c:	4630      	mov	r0, r6
 802010e:	f7e0 f8a1 	bl	8000254 <strlen>
 8020112:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020118:	9603      	str	r6, [sp, #12]
 802011a:	9404      	str	r4, [sp, #16]
 802011c:	e9cd 2300 	strd	r2, r3, [sp]
 8020120:	4a10      	ldr	r2, [pc, #64]	; (8020164 <rcl_expand_topic_name+0x2b8>)
 8020122:	4b11      	ldr	r3, [pc, #68]	; (8020168 <rcl_expand_topic_name+0x2bc>)
 8020124:	2801      	cmp	r0, #1
 8020126:	bf18      	it	ne
 8020128:	4613      	movne	r3, r2
 802012a:	9302      	str	r3, [sp, #8]
 802012c:	ab16      	add	r3, sp, #88	; 0x58
 802012e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020130:	f7f5 ffd6 	bl	80160e0 <rcutils_format_string_limit>
 8020134:	4606      	mov	r6, r0
 8020136:	e7d6      	b.n	80200e6 <rcl_expand_topic_name+0x23a>
 8020138:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 802013c:	4650      	mov	r0, sl
 802013e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020140:	6014      	str	r4, [r2, #0]
 8020142:	250a      	movs	r5, #10
 8020144:	4798      	blx	r3
 8020146:	e702      	b.n	801ff4e <rcl_expand_topic_name+0xa2>
 8020148:	2300      	movs	r3, #0
 802014a:	461e      	mov	r6, r3
 802014c:	e7cc      	b.n	80200e8 <rcl_expand_topic_name+0x23c>
 802014e:	bf00      	nop
 8020150:	08023340 	.word	0x08023340
 8020154:	08023348 	.word	0x08023348
 8020158:	08023350 	.word	0x08023350
 802015c:	08023338 	.word	0x08023338
 8020160:	08022c34 	.word	0x08022c34
 8020164:	08022780 	.word	0x08022780
 8020168:	08022778 	.word	0x08022778

0802016c <rcl_get_default_topic_name_substitutions>:
 802016c:	2800      	cmp	r0, #0
 802016e:	bf0c      	ite	eq
 8020170:	200b      	moveq	r0, #11
 8020172:	2000      	movne	r0, #0
 8020174:	4770      	bx	lr
 8020176:	bf00      	nop

08020178 <rcl_publisher_is_valid>:
 8020178:	b1a0      	cbz	r0, 80201a4 <rcl_publisher_is_valid+0x2c>
 802017a:	6803      	ldr	r3, [r0, #0]
 802017c:	b510      	push	{r4, lr}
 802017e:	4604      	mov	r4, r0
 8020180:	b173      	cbz	r3, 80201a0 <rcl_publisher_is_valid+0x28>
 8020182:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8020186:	b15a      	cbz	r2, 80201a0 <rcl_publisher_is_valid+0x28>
 8020188:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 802018c:	f7fb fb50 	bl	801b830 <rcl_context_is_valid>
 8020190:	b130      	cbz	r0, 80201a0 <rcl_publisher_is_valid+0x28>
 8020192:	6823      	ldr	r3, [r4, #0]
 8020194:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8020198:	3800      	subs	r0, #0
 802019a:	bf18      	it	ne
 802019c:	2001      	movne	r0, #1
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	2000      	movs	r0, #0
 80201a2:	bd10      	pop	{r4, pc}
 80201a4:	2000      	movs	r0, #0
 80201a6:	4770      	bx	lr

080201a8 <rcl_publisher_is_valid_except_context>:
 80201a8:	b130      	cbz	r0, 80201b8 <rcl_publisher_is_valid_except_context+0x10>
 80201aa:	6800      	ldr	r0, [r0, #0]
 80201ac:	b120      	cbz	r0, 80201b8 <rcl_publisher_is_valid_except_context+0x10>
 80201ae:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80201b2:	3800      	subs	r0, #0
 80201b4:	bf18      	it	ne
 80201b6:	2001      	movne	r0, #1
 80201b8:	4770      	bx	lr
 80201ba:	bf00      	nop

080201bc <rcl_validate_topic_name>:
 80201bc:	2800      	cmp	r0, #0
 80201be:	f000 8089 	beq.w	80202d4 <rcl_validate_topic_name+0x118>
 80201c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201c6:	460e      	mov	r6, r1
 80201c8:	2900      	cmp	r1, #0
 80201ca:	f000 8085 	beq.w	80202d8 <rcl_validate_topic_name+0x11c>
 80201ce:	4604      	mov	r4, r0
 80201d0:	4617      	mov	r7, r2
 80201d2:	f7e0 f83f 	bl	8000254 <strlen>
 80201d6:	b1b0      	cbz	r0, 8020206 <rcl_validate_topic_name+0x4a>
 80201d8:	f894 e000 	ldrb.w	lr, [r4]
 80201dc:	f8df c160 	ldr.w	ip, [pc, #352]	; 8020340 <rcl_validate_topic_name+0x184>
 80201e0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80201e4:	f013 0304 	ands.w	r3, r3, #4
 80201e8:	d139      	bne.n	802025e <rcl_validate_topic_name+0xa2>
 80201ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80201ee:	f814 2008 	ldrb.w	r2, [r4, r8]
 80201f2:	2a2f      	cmp	r2, #47	; 0x2f
 80201f4:	d10f      	bne.n	8020216 <rcl_validate_topic_name+0x5a>
 80201f6:	2202      	movs	r2, #2
 80201f8:	6032      	str	r2, [r6, #0]
 80201fa:	b3a7      	cbz	r7, 8020266 <rcl_validate_topic_name+0xaa>
 80201fc:	4618      	mov	r0, r3
 80201fe:	f8c7 8000 	str.w	r8, [r7]
 8020202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020206:	2301      	movs	r3, #1
 8020208:	6033      	str	r3, [r6, #0]
 802020a:	b367      	cbz	r7, 8020266 <rcl_validate_topic_name+0xaa>
 802020c:	2300      	movs	r3, #0
 802020e:	4618      	mov	r0, r3
 8020210:	603b      	str	r3, [r7, #0]
 8020212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020216:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 802021a:	461d      	mov	r5, r3
 802021c:	4619      	mov	r1, r3
 802021e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8020222:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8020226:	f1b9 0f09 	cmp.w	r9, #9
 802022a:	d91f      	bls.n	802026c <rcl_validate_topic_name+0xb0>
 802022c:	f022 0920 	bic.w	r9, r2, #32
 8020230:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8020234:	f1b9 0f19 	cmp.w	r9, #25
 8020238:	d918      	bls.n	802026c <rcl_validate_topic_name+0xb0>
 802023a:	2a5f      	cmp	r2, #95	; 0x5f
 802023c:	d024      	beq.n	8020288 <rcl_validate_topic_name+0xcc>
 802023e:	2a2f      	cmp	r2, #47	; 0x2f
 8020240:	d058      	beq.n	80202f4 <rcl_validate_topic_name+0x138>
 8020242:	2a7e      	cmp	r2, #126	; 0x7e
 8020244:	d04a      	beq.n	80202dc <rcl_validate_topic_name+0x120>
 8020246:	2a7b      	cmp	r2, #123	; 0x7b
 8020248:	d05b      	beq.n	8020302 <rcl_validate_topic_name+0x146>
 802024a:	2a7d      	cmp	r2, #125	; 0x7d
 802024c:	d169      	bne.n	8020322 <rcl_validate_topic_name+0x166>
 802024e:	2d00      	cmp	r5, #0
 8020250:	d15c      	bne.n	802030c <rcl_validate_topic_name+0x150>
 8020252:	2305      	movs	r3, #5
 8020254:	6033      	str	r3, [r6, #0]
 8020256:	b137      	cbz	r7, 8020266 <rcl_validate_topic_name+0xaa>
 8020258:	2000      	movs	r0, #0
 802025a:	6039      	str	r1, [r7, #0]
 802025c:	e7d9      	b.n	8020212 <rcl_validate_topic_name+0x56>
 802025e:	2304      	movs	r3, #4
 8020260:	6033      	str	r3, [r6, #0]
 8020262:	2f00      	cmp	r7, #0
 8020264:	d1d2      	bne.n	802020c <rcl_validate_topic_name+0x50>
 8020266:	2000      	movs	r0, #0
 8020268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802026c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020270:	0752      	lsls	r2, r2, #29
 8020272:	d509      	bpl.n	8020288 <rcl_validate_topic_name+0xcc>
 8020274:	2900      	cmp	r1, #0
 8020276:	bf0c      	ite	eq
 8020278:	2200      	moveq	r2, #0
 802027a:	f005 0201 	andne.w	r2, r5, #1
 802027e:	b11a      	cbz	r2, 8020288 <rcl_validate_topic_name+0xcc>
 8020280:	1e4d      	subs	r5, r1, #1
 8020282:	429d      	cmp	r5, r3
 8020284:	d031      	beq.n	80202ea <rcl_validate_topic_name+0x12e>
 8020286:	4615      	mov	r5, r2
 8020288:	3101      	adds	r1, #1
 802028a:	4288      	cmp	r0, r1
 802028c:	d1c7      	bne.n	802021e <rcl_validate_topic_name+0x62>
 802028e:	2d00      	cmp	r5, #0
 8020290:	d142      	bne.n	8020318 <rcl_validate_topic_name+0x15c>
 8020292:	4628      	mov	r0, r5
 8020294:	2301      	movs	r3, #1
 8020296:	e00c      	b.n	80202b2 <rcl_validate_topic_name+0xf6>
 8020298:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 802029c:	d101      	bne.n	80202a2 <rcl_validate_topic_name+0xe6>
 802029e:	2801      	cmp	r0, #1
 80202a0:	d047      	beq.n	8020332 <rcl_validate_topic_name+0x176>
 80202a2:	1c5a      	adds	r2, r3, #1
 80202a4:	428b      	cmp	r3, r1
 80202a6:	f100 0001 	add.w	r0, r0, #1
 80202aa:	f104 0401 	add.w	r4, r4, #1
 80202ae:	4613      	mov	r3, r2
 80202b0:	d22e      	bcs.n	8020310 <rcl_validate_topic_name+0x154>
 80202b2:	4580      	cmp	r8, r0
 80202b4:	d0f5      	beq.n	80202a2 <rcl_validate_topic_name+0xe6>
 80202b6:	7822      	ldrb	r2, [r4, #0]
 80202b8:	2a2f      	cmp	r2, #47	; 0x2f
 80202ba:	d1ed      	bne.n	8020298 <rcl_validate_topic_name+0xdc>
 80202bc:	7862      	ldrb	r2, [r4, #1]
 80202be:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80202c2:	0752      	lsls	r2, r2, #29
 80202c4:	d5ed      	bpl.n	80202a2 <rcl_validate_topic_name+0xe6>
 80202c6:	2204      	movs	r2, #4
 80202c8:	6032      	str	r2, [r6, #0]
 80202ca:	2f00      	cmp	r7, #0
 80202cc:	d0cb      	beq.n	8020266 <rcl_validate_topic_name+0xaa>
 80202ce:	2000      	movs	r0, #0
 80202d0:	603b      	str	r3, [r7, #0]
 80202d2:	e79e      	b.n	8020212 <rcl_validate_topic_name+0x56>
 80202d4:	200b      	movs	r0, #11
 80202d6:	4770      	bx	lr
 80202d8:	200b      	movs	r0, #11
 80202da:	e79a      	b.n	8020212 <rcl_validate_topic_name+0x56>
 80202dc:	2900      	cmp	r1, #0
 80202de:	d0d3      	beq.n	8020288 <rcl_validate_topic_name+0xcc>
 80202e0:	2306      	movs	r3, #6
 80202e2:	6033      	str	r3, [r6, #0]
 80202e4:	2f00      	cmp	r7, #0
 80202e6:	d1b7      	bne.n	8020258 <rcl_validate_topic_name+0x9c>
 80202e8:	e7bd      	b.n	8020266 <rcl_validate_topic_name+0xaa>
 80202ea:	2309      	movs	r3, #9
 80202ec:	6033      	str	r3, [r6, #0]
 80202ee:	2f00      	cmp	r7, #0
 80202f0:	d1b2      	bne.n	8020258 <rcl_validate_topic_name+0x9c>
 80202f2:	e7b8      	b.n	8020266 <rcl_validate_topic_name+0xaa>
 80202f4:	2d00      	cmp	r5, #0
 80202f6:	d0c7      	beq.n	8020288 <rcl_validate_topic_name+0xcc>
 80202f8:	2308      	movs	r3, #8
 80202fa:	6033      	str	r3, [r6, #0]
 80202fc:	2f00      	cmp	r7, #0
 80202fe:	d1ab      	bne.n	8020258 <rcl_validate_topic_name+0x9c>
 8020300:	e7b1      	b.n	8020266 <rcl_validate_topic_name+0xaa>
 8020302:	2d00      	cmp	r5, #0
 8020304:	d1f8      	bne.n	80202f8 <rcl_validate_topic_name+0x13c>
 8020306:	460b      	mov	r3, r1
 8020308:	2501      	movs	r5, #1
 802030a:	e7bd      	b.n	8020288 <rcl_validate_topic_name+0xcc>
 802030c:	2500      	movs	r5, #0
 802030e:	e7bb      	b.n	8020288 <rcl_validate_topic_name+0xcc>
 8020310:	2300      	movs	r3, #0
 8020312:	4618      	mov	r0, r3
 8020314:	6033      	str	r3, [r6, #0]
 8020316:	e77c      	b.n	8020212 <rcl_validate_topic_name+0x56>
 8020318:	2205      	movs	r2, #5
 802031a:	6032      	str	r2, [r6, #0]
 802031c:	2f00      	cmp	r7, #0
 802031e:	d1d6      	bne.n	80202ce <rcl_validate_topic_name+0x112>
 8020320:	e7a1      	b.n	8020266 <rcl_validate_topic_name+0xaa>
 8020322:	2d00      	cmp	r5, #0
 8020324:	bf14      	ite	ne
 8020326:	2308      	movne	r3, #8
 8020328:	2303      	moveq	r3, #3
 802032a:	6033      	str	r3, [r6, #0]
 802032c:	2f00      	cmp	r7, #0
 802032e:	d193      	bne.n	8020258 <rcl_validate_topic_name+0x9c>
 8020330:	e799      	b.n	8020266 <rcl_validate_topic_name+0xaa>
 8020332:	2307      	movs	r3, #7
 8020334:	6033      	str	r3, [r6, #0]
 8020336:	2f00      	cmp	r7, #0
 8020338:	d095      	beq.n	8020266 <rcl_validate_topic_name+0xaa>
 802033a:	2301      	movs	r3, #1
 802033c:	e7c7      	b.n	80202ce <rcl_validate_topic_name+0x112>
 802033e:	bf00      	nop
 8020340:	080234be 	.word	0x080234be

08020344 <rosidl_runtime_c__String__init>:
 8020344:	b510      	push	{r4, lr}
 8020346:	4604      	mov	r4, r0
 8020348:	b086      	sub	sp, #24
 802034a:	b170      	cbz	r0, 802036a <rosidl_runtime_c__String__init+0x26>
 802034c:	a801      	add	r0, sp, #4
 802034e:	f7f5 fe5f 	bl	8016010 <rcutils_get_default_allocator>
 8020352:	9b01      	ldr	r3, [sp, #4]
 8020354:	9905      	ldr	r1, [sp, #20]
 8020356:	2001      	movs	r0, #1
 8020358:	4798      	blx	r3
 802035a:	6020      	str	r0, [r4, #0]
 802035c:	b128      	cbz	r0, 802036a <rosidl_runtime_c__String__init+0x26>
 802035e:	2100      	movs	r1, #0
 8020360:	2201      	movs	r2, #1
 8020362:	7001      	strb	r1, [r0, #0]
 8020364:	4610      	mov	r0, r2
 8020366:	e9c4 1201 	strd	r1, r2, [r4, #4]
 802036a:	b006      	add	sp, #24
 802036c:	bd10      	pop	{r4, pc}
 802036e:	bf00      	nop

08020370 <rosidl_runtime_c__String__fini>:
 8020370:	b320      	cbz	r0, 80203bc <rosidl_runtime_c__String__fini+0x4c>
 8020372:	6803      	ldr	r3, [r0, #0]
 8020374:	b510      	push	{r4, lr}
 8020376:	4604      	mov	r4, r0
 8020378:	b086      	sub	sp, #24
 802037a:	b173      	cbz	r3, 802039a <rosidl_runtime_c__String__fini+0x2a>
 802037c:	6883      	ldr	r3, [r0, #8]
 802037e:	b1f3      	cbz	r3, 80203be <rosidl_runtime_c__String__fini+0x4e>
 8020380:	a801      	add	r0, sp, #4
 8020382:	f7f5 fe45 	bl	8016010 <rcutils_get_default_allocator>
 8020386:	9b02      	ldr	r3, [sp, #8]
 8020388:	9905      	ldr	r1, [sp, #20]
 802038a:	6820      	ldr	r0, [r4, #0]
 802038c:	4798      	blx	r3
 802038e:	2300      	movs	r3, #0
 8020390:	e9c4 3300 	strd	r3, r3, [r4]
 8020394:	60a3      	str	r3, [r4, #8]
 8020396:	b006      	add	sp, #24
 8020398:	bd10      	pop	{r4, pc}
 802039a:	6843      	ldr	r3, [r0, #4]
 802039c:	b9db      	cbnz	r3, 80203d6 <rosidl_runtime_c__String__fini+0x66>
 802039e:	6883      	ldr	r3, [r0, #8]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d0f8      	beq.n	8020396 <rosidl_runtime_c__String__fini+0x26>
 80203a4:	4b12      	ldr	r3, [pc, #72]	; (80203f0 <rosidl_runtime_c__String__fini+0x80>)
 80203a6:	2251      	movs	r2, #81	; 0x51
 80203a8:	2101      	movs	r1, #1
 80203aa:	4812      	ldr	r0, [pc, #72]	; (80203f4 <rosidl_runtime_c__String__fini+0x84>)
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	68db      	ldr	r3, [r3, #12]
 80203b0:	f000 fb88 	bl	8020ac4 <fwrite>
 80203b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203b8:	f000 f840 	bl	802043c <exit>
 80203bc:	4770      	bx	lr
 80203be:	4b0c      	ldr	r3, [pc, #48]	; (80203f0 <rosidl_runtime_c__String__fini+0x80>)
 80203c0:	224c      	movs	r2, #76	; 0x4c
 80203c2:	2101      	movs	r1, #1
 80203c4:	480c      	ldr	r0, [pc, #48]	; (80203f8 <rosidl_runtime_c__String__fini+0x88>)
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	68db      	ldr	r3, [r3, #12]
 80203ca:	f000 fb7b 	bl	8020ac4 <fwrite>
 80203ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203d2:	f000 f833 	bl	802043c <exit>
 80203d6:	4b06      	ldr	r3, [pc, #24]	; (80203f0 <rosidl_runtime_c__String__fini+0x80>)
 80203d8:	224e      	movs	r2, #78	; 0x4e
 80203da:	2101      	movs	r1, #1
 80203dc:	4807      	ldr	r0, [pc, #28]	; (80203fc <rosidl_runtime_c__String__fini+0x8c>)
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	68db      	ldr	r3, [r3, #12]
 80203e2:	f000 fb6f 	bl	8020ac4 <fwrite>
 80203e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203ea:	f000 f827 	bl	802043c <exit>
 80203ee:	bf00      	nop
 80203f0:	200008f0 	.word	0x200008f0
 80203f4:	080233fc 	.word	0x080233fc
 80203f8:	0802335c 	.word	0x0802335c
 80203fc:	080233ac 	.word	0x080233ac

08020400 <calloc>:
 8020400:	4b02      	ldr	r3, [pc, #8]	; (802040c <calloc+0xc>)
 8020402:	460a      	mov	r2, r1
 8020404:	4601      	mov	r1, r0
 8020406:	6818      	ldr	r0, [r3, #0]
 8020408:	f000 b802 	b.w	8020410 <_calloc_r>
 802040c:	200008f0 	.word	0x200008f0

08020410 <_calloc_r>:
 8020410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020412:	fba1 2402 	umull	r2, r4, r1, r2
 8020416:	b94c      	cbnz	r4, 802042c <_calloc_r+0x1c>
 8020418:	4611      	mov	r1, r2
 802041a:	9201      	str	r2, [sp, #4]
 802041c:	f000 f898 	bl	8020550 <_malloc_r>
 8020420:	9a01      	ldr	r2, [sp, #4]
 8020422:	4605      	mov	r5, r0
 8020424:	b930      	cbnz	r0, 8020434 <_calloc_r+0x24>
 8020426:	4628      	mov	r0, r5
 8020428:	b003      	add	sp, #12
 802042a:	bd30      	pop	{r4, r5, pc}
 802042c:	220c      	movs	r2, #12
 802042e:	6002      	str	r2, [r0, #0]
 8020430:	2500      	movs	r5, #0
 8020432:	e7f8      	b.n	8020426 <_calloc_r+0x16>
 8020434:	4621      	mov	r1, r4
 8020436:	f000 fde7 	bl	8021008 <memset>
 802043a:	e7f4      	b.n	8020426 <_calloc_r+0x16>

0802043c <exit>:
 802043c:	b508      	push	{r3, lr}
 802043e:	4b06      	ldr	r3, [pc, #24]	; (8020458 <exit+0x1c>)
 8020440:	4604      	mov	r4, r0
 8020442:	b113      	cbz	r3, 802044a <exit+0xe>
 8020444:	2100      	movs	r1, #0
 8020446:	f3af 8000 	nop.w
 802044a:	4b04      	ldr	r3, [pc, #16]	; (802045c <exit+0x20>)
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	b103      	cbz	r3, 8020452 <exit+0x16>
 8020450:	4798      	blx	r3
 8020452:	4620      	mov	r0, r4
 8020454:	f7e4 fb40 	bl	8004ad8 <_exit>
 8020458:	00000000 	.word	0x00000000
 802045c:	20017ac4 	.word	0x20017ac4

08020460 <getenv>:
 8020460:	b507      	push	{r0, r1, r2, lr}
 8020462:	4b04      	ldr	r3, [pc, #16]	; (8020474 <getenv+0x14>)
 8020464:	4601      	mov	r1, r0
 8020466:	aa01      	add	r2, sp, #4
 8020468:	6818      	ldr	r0, [r3, #0]
 802046a:	f000 f805 	bl	8020478 <_findenv_r>
 802046e:	b003      	add	sp, #12
 8020470:	f85d fb04 	ldr.w	pc, [sp], #4
 8020474:	200008f0 	.word	0x200008f0

08020478 <_findenv_r>:
 8020478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802047c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80204ec <_findenv_r+0x74>
 8020480:	4607      	mov	r7, r0
 8020482:	4689      	mov	r9, r1
 8020484:	4616      	mov	r6, r2
 8020486:	f000 feb5 	bl	80211f4 <__env_lock>
 802048a:	f8da 4000 	ldr.w	r4, [sl]
 802048e:	b134      	cbz	r4, 802049e <_findenv_r+0x26>
 8020490:	464b      	mov	r3, r9
 8020492:	4698      	mov	r8, r3
 8020494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020498:	b13a      	cbz	r2, 80204aa <_findenv_r+0x32>
 802049a:	2a3d      	cmp	r2, #61	; 0x3d
 802049c:	d1f9      	bne.n	8020492 <_findenv_r+0x1a>
 802049e:	4638      	mov	r0, r7
 80204a0:	f000 feae 	bl	8021200 <__env_unlock>
 80204a4:	2000      	movs	r0, #0
 80204a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204aa:	eba8 0809 	sub.w	r8, r8, r9
 80204ae:	46a3      	mov	fp, r4
 80204b0:	f854 0b04 	ldr.w	r0, [r4], #4
 80204b4:	2800      	cmp	r0, #0
 80204b6:	d0f2      	beq.n	802049e <_findenv_r+0x26>
 80204b8:	4642      	mov	r2, r8
 80204ba:	4649      	mov	r1, r9
 80204bc:	f000 fdb9 	bl	8021032 <strncmp>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	d1f4      	bne.n	80204ae <_findenv_r+0x36>
 80204c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80204c8:	eb03 0508 	add.w	r5, r3, r8
 80204cc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80204d0:	2b3d      	cmp	r3, #61	; 0x3d
 80204d2:	d1ec      	bne.n	80204ae <_findenv_r+0x36>
 80204d4:	f8da 3000 	ldr.w	r3, [sl]
 80204d8:	ebab 0303 	sub.w	r3, fp, r3
 80204dc:	109b      	asrs	r3, r3, #2
 80204de:	4638      	mov	r0, r7
 80204e0:	6033      	str	r3, [r6, #0]
 80204e2:	f000 fe8d 	bl	8021200 <__env_unlock>
 80204e6:	1c68      	adds	r0, r5, #1
 80204e8:	e7dd      	b.n	80204a6 <_findenv_r+0x2e>
 80204ea:	bf00      	nop
 80204ec:	20000000 	.word	0x20000000

080204f0 <malloc>:
 80204f0:	4b02      	ldr	r3, [pc, #8]	; (80204fc <malloc+0xc>)
 80204f2:	4601      	mov	r1, r0
 80204f4:	6818      	ldr	r0, [r3, #0]
 80204f6:	f000 b82b 	b.w	8020550 <_malloc_r>
 80204fa:	bf00      	nop
 80204fc:	200008f0 	.word	0x200008f0

08020500 <free>:
 8020500:	4b02      	ldr	r3, [pc, #8]	; (802050c <free+0xc>)
 8020502:	4601      	mov	r1, r0
 8020504:	6818      	ldr	r0, [r3, #0]
 8020506:	f000 be81 	b.w	802120c <_free_r>
 802050a:	bf00      	nop
 802050c:	200008f0 	.word	0x200008f0

08020510 <sbrk_aligned>:
 8020510:	b570      	push	{r4, r5, r6, lr}
 8020512:	4e0e      	ldr	r6, [pc, #56]	; (802054c <sbrk_aligned+0x3c>)
 8020514:	460c      	mov	r4, r1
 8020516:	6831      	ldr	r1, [r6, #0]
 8020518:	4605      	mov	r5, r0
 802051a:	b911      	cbnz	r1, 8020522 <sbrk_aligned+0x12>
 802051c:	f000 fde6 	bl	80210ec <_sbrk_r>
 8020520:	6030      	str	r0, [r6, #0]
 8020522:	4621      	mov	r1, r4
 8020524:	4628      	mov	r0, r5
 8020526:	f000 fde1 	bl	80210ec <_sbrk_r>
 802052a:	1c43      	adds	r3, r0, #1
 802052c:	d00a      	beq.n	8020544 <sbrk_aligned+0x34>
 802052e:	1cc4      	adds	r4, r0, #3
 8020530:	f024 0403 	bic.w	r4, r4, #3
 8020534:	42a0      	cmp	r0, r4
 8020536:	d007      	beq.n	8020548 <sbrk_aligned+0x38>
 8020538:	1a21      	subs	r1, r4, r0
 802053a:	4628      	mov	r0, r5
 802053c:	f000 fdd6 	bl	80210ec <_sbrk_r>
 8020540:	3001      	adds	r0, #1
 8020542:	d101      	bne.n	8020548 <sbrk_aligned+0x38>
 8020544:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8020548:	4620      	mov	r0, r4
 802054a:	bd70      	pop	{r4, r5, r6, pc}
 802054c:	20017988 	.word	0x20017988

08020550 <_malloc_r>:
 8020550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020554:	1ccd      	adds	r5, r1, #3
 8020556:	f025 0503 	bic.w	r5, r5, #3
 802055a:	3508      	adds	r5, #8
 802055c:	2d0c      	cmp	r5, #12
 802055e:	bf38      	it	cc
 8020560:	250c      	movcc	r5, #12
 8020562:	2d00      	cmp	r5, #0
 8020564:	4607      	mov	r7, r0
 8020566:	db01      	blt.n	802056c <_malloc_r+0x1c>
 8020568:	42a9      	cmp	r1, r5
 802056a:	d905      	bls.n	8020578 <_malloc_r+0x28>
 802056c:	230c      	movs	r3, #12
 802056e:	603b      	str	r3, [r7, #0]
 8020570:	2600      	movs	r6, #0
 8020572:	4630      	mov	r0, r6
 8020574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802064c <_malloc_r+0xfc>
 802057c:	f000 f868 	bl	8020650 <__malloc_lock>
 8020580:	f8d8 3000 	ldr.w	r3, [r8]
 8020584:	461c      	mov	r4, r3
 8020586:	bb5c      	cbnz	r4, 80205e0 <_malloc_r+0x90>
 8020588:	4629      	mov	r1, r5
 802058a:	4638      	mov	r0, r7
 802058c:	f7ff ffc0 	bl	8020510 <sbrk_aligned>
 8020590:	1c43      	adds	r3, r0, #1
 8020592:	4604      	mov	r4, r0
 8020594:	d155      	bne.n	8020642 <_malloc_r+0xf2>
 8020596:	f8d8 4000 	ldr.w	r4, [r8]
 802059a:	4626      	mov	r6, r4
 802059c:	2e00      	cmp	r6, #0
 802059e:	d145      	bne.n	802062c <_malloc_r+0xdc>
 80205a0:	2c00      	cmp	r4, #0
 80205a2:	d048      	beq.n	8020636 <_malloc_r+0xe6>
 80205a4:	6823      	ldr	r3, [r4, #0]
 80205a6:	4631      	mov	r1, r6
 80205a8:	4638      	mov	r0, r7
 80205aa:	eb04 0903 	add.w	r9, r4, r3
 80205ae:	f000 fd9d 	bl	80210ec <_sbrk_r>
 80205b2:	4581      	cmp	r9, r0
 80205b4:	d13f      	bne.n	8020636 <_malloc_r+0xe6>
 80205b6:	6821      	ldr	r1, [r4, #0]
 80205b8:	1a6d      	subs	r5, r5, r1
 80205ba:	4629      	mov	r1, r5
 80205bc:	4638      	mov	r0, r7
 80205be:	f7ff ffa7 	bl	8020510 <sbrk_aligned>
 80205c2:	3001      	adds	r0, #1
 80205c4:	d037      	beq.n	8020636 <_malloc_r+0xe6>
 80205c6:	6823      	ldr	r3, [r4, #0]
 80205c8:	442b      	add	r3, r5
 80205ca:	6023      	str	r3, [r4, #0]
 80205cc:	f8d8 3000 	ldr.w	r3, [r8]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d038      	beq.n	8020646 <_malloc_r+0xf6>
 80205d4:	685a      	ldr	r2, [r3, #4]
 80205d6:	42a2      	cmp	r2, r4
 80205d8:	d12b      	bne.n	8020632 <_malloc_r+0xe2>
 80205da:	2200      	movs	r2, #0
 80205dc:	605a      	str	r2, [r3, #4]
 80205de:	e00f      	b.n	8020600 <_malloc_r+0xb0>
 80205e0:	6822      	ldr	r2, [r4, #0]
 80205e2:	1b52      	subs	r2, r2, r5
 80205e4:	d41f      	bmi.n	8020626 <_malloc_r+0xd6>
 80205e6:	2a0b      	cmp	r2, #11
 80205e8:	d917      	bls.n	802061a <_malloc_r+0xca>
 80205ea:	1961      	adds	r1, r4, r5
 80205ec:	42a3      	cmp	r3, r4
 80205ee:	6025      	str	r5, [r4, #0]
 80205f0:	bf18      	it	ne
 80205f2:	6059      	strne	r1, [r3, #4]
 80205f4:	6863      	ldr	r3, [r4, #4]
 80205f6:	bf08      	it	eq
 80205f8:	f8c8 1000 	streq.w	r1, [r8]
 80205fc:	5162      	str	r2, [r4, r5]
 80205fe:	604b      	str	r3, [r1, #4]
 8020600:	4638      	mov	r0, r7
 8020602:	f104 060b 	add.w	r6, r4, #11
 8020606:	f000 f829 	bl	802065c <__malloc_unlock>
 802060a:	f026 0607 	bic.w	r6, r6, #7
 802060e:	1d23      	adds	r3, r4, #4
 8020610:	1af2      	subs	r2, r6, r3
 8020612:	d0ae      	beq.n	8020572 <_malloc_r+0x22>
 8020614:	1b9b      	subs	r3, r3, r6
 8020616:	50a3      	str	r3, [r4, r2]
 8020618:	e7ab      	b.n	8020572 <_malloc_r+0x22>
 802061a:	42a3      	cmp	r3, r4
 802061c:	6862      	ldr	r2, [r4, #4]
 802061e:	d1dd      	bne.n	80205dc <_malloc_r+0x8c>
 8020620:	f8c8 2000 	str.w	r2, [r8]
 8020624:	e7ec      	b.n	8020600 <_malloc_r+0xb0>
 8020626:	4623      	mov	r3, r4
 8020628:	6864      	ldr	r4, [r4, #4]
 802062a:	e7ac      	b.n	8020586 <_malloc_r+0x36>
 802062c:	4634      	mov	r4, r6
 802062e:	6876      	ldr	r6, [r6, #4]
 8020630:	e7b4      	b.n	802059c <_malloc_r+0x4c>
 8020632:	4613      	mov	r3, r2
 8020634:	e7cc      	b.n	80205d0 <_malloc_r+0x80>
 8020636:	230c      	movs	r3, #12
 8020638:	603b      	str	r3, [r7, #0]
 802063a:	4638      	mov	r0, r7
 802063c:	f000 f80e 	bl	802065c <__malloc_unlock>
 8020640:	e797      	b.n	8020572 <_malloc_r+0x22>
 8020642:	6025      	str	r5, [r4, #0]
 8020644:	e7dc      	b.n	8020600 <_malloc_r+0xb0>
 8020646:	605b      	str	r3, [r3, #4]
 8020648:	deff      	udf	#255	; 0xff
 802064a:	bf00      	nop
 802064c:	20017984 	.word	0x20017984

08020650 <__malloc_lock>:
 8020650:	4801      	ldr	r0, [pc, #4]	; (8020658 <__malloc_lock+0x8>)
 8020652:	f000 bd98 	b.w	8021186 <__retarget_lock_acquire_recursive>
 8020656:	bf00      	nop
 8020658:	20017acd 	.word	0x20017acd

0802065c <__malloc_unlock>:
 802065c:	4801      	ldr	r0, [pc, #4]	; (8020664 <__malloc_unlock+0x8>)
 802065e:	f000 bd93 	b.w	8021188 <__retarget_lock_release_recursive>
 8020662:	bf00      	nop
 8020664:	20017acd 	.word	0x20017acd

08020668 <srand>:
 8020668:	b538      	push	{r3, r4, r5, lr}
 802066a:	4b10      	ldr	r3, [pc, #64]	; (80206ac <srand+0x44>)
 802066c:	681d      	ldr	r5, [r3, #0]
 802066e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8020670:	4604      	mov	r4, r0
 8020672:	b9b3      	cbnz	r3, 80206a2 <srand+0x3a>
 8020674:	2018      	movs	r0, #24
 8020676:	f7ff ff3b 	bl	80204f0 <malloc>
 802067a:	4602      	mov	r2, r0
 802067c:	6328      	str	r0, [r5, #48]	; 0x30
 802067e:	b920      	cbnz	r0, 802068a <srand+0x22>
 8020680:	4b0b      	ldr	r3, [pc, #44]	; (80206b0 <srand+0x48>)
 8020682:	480c      	ldr	r0, [pc, #48]	; (80206b4 <srand+0x4c>)
 8020684:	2146      	movs	r1, #70	; 0x46
 8020686:	f000 fd97 	bl	80211b8 <__assert_func>
 802068a:	490b      	ldr	r1, [pc, #44]	; (80206b8 <srand+0x50>)
 802068c:	4b0b      	ldr	r3, [pc, #44]	; (80206bc <srand+0x54>)
 802068e:	e9c0 1300 	strd	r1, r3, [r0]
 8020692:	4b0b      	ldr	r3, [pc, #44]	; (80206c0 <srand+0x58>)
 8020694:	6083      	str	r3, [r0, #8]
 8020696:	230b      	movs	r3, #11
 8020698:	8183      	strh	r3, [r0, #12]
 802069a:	2100      	movs	r1, #0
 802069c:	2001      	movs	r0, #1
 802069e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80206a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80206a4:	2200      	movs	r2, #0
 80206a6:	611c      	str	r4, [r3, #16]
 80206a8:	615a      	str	r2, [r3, #20]
 80206aa:	bd38      	pop	{r3, r4, r5, pc}
 80206ac:	200008f0 	.word	0x200008f0
 80206b0:	0802344e 	.word	0x0802344e
 80206b4:	08023465 	.word	0x08023465
 80206b8:	abcd330e 	.word	0xabcd330e
 80206bc:	e66d1234 	.word	0xe66d1234
 80206c0:	0005deec 	.word	0x0005deec

080206c4 <rand>:
 80206c4:	4b16      	ldr	r3, [pc, #88]	; (8020720 <rand+0x5c>)
 80206c6:	b510      	push	{r4, lr}
 80206c8:	681c      	ldr	r4, [r3, #0]
 80206ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80206cc:	b9b3      	cbnz	r3, 80206fc <rand+0x38>
 80206ce:	2018      	movs	r0, #24
 80206d0:	f7ff ff0e 	bl	80204f0 <malloc>
 80206d4:	4602      	mov	r2, r0
 80206d6:	6320      	str	r0, [r4, #48]	; 0x30
 80206d8:	b920      	cbnz	r0, 80206e4 <rand+0x20>
 80206da:	4b12      	ldr	r3, [pc, #72]	; (8020724 <rand+0x60>)
 80206dc:	4812      	ldr	r0, [pc, #72]	; (8020728 <rand+0x64>)
 80206de:	2152      	movs	r1, #82	; 0x52
 80206e0:	f000 fd6a 	bl	80211b8 <__assert_func>
 80206e4:	4911      	ldr	r1, [pc, #68]	; (802072c <rand+0x68>)
 80206e6:	4b12      	ldr	r3, [pc, #72]	; (8020730 <rand+0x6c>)
 80206e8:	e9c0 1300 	strd	r1, r3, [r0]
 80206ec:	4b11      	ldr	r3, [pc, #68]	; (8020734 <rand+0x70>)
 80206ee:	6083      	str	r3, [r0, #8]
 80206f0:	230b      	movs	r3, #11
 80206f2:	8183      	strh	r3, [r0, #12]
 80206f4:	2100      	movs	r1, #0
 80206f6:	2001      	movs	r0, #1
 80206f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80206fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80206fe:	480e      	ldr	r0, [pc, #56]	; (8020738 <rand+0x74>)
 8020700:	690b      	ldr	r3, [r1, #16]
 8020702:	694c      	ldr	r4, [r1, #20]
 8020704:	4a0d      	ldr	r2, [pc, #52]	; (802073c <rand+0x78>)
 8020706:	4358      	muls	r0, r3
 8020708:	fb02 0004 	mla	r0, r2, r4, r0
 802070c:	fba3 3202 	umull	r3, r2, r3, r2
 8020710:	3301      	adds	r3, #1
 8020712:	eb40 0002 	adc.w	r0, r0, r2
 8020716:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802071a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802071e:	bd10      	pop	{r4, pc}
 8020720:	200008f0 	.word	0x200008f0
 8020724:	0802344e 	.word	0x0802344e
 8020728:	08023465 	.word	0x08023465
 802072c:	abcd330e 	.word	0xabcd330e
 8020730:	e66d1234 	.word	0xe66d1234
 8020734:	0005deec 	.word	0x0005deec
 8020738:	5851f42d 	.word	0x5851f42d
 802073c:	4c957f2d 	.word	0x4c957f2d

08020740 <realloc>:
 8020740:	4b02      	ldr	r3, [pc, #8]	; (802074c <realloc+0xc>)
 8020742:	460a      	mov	r2, r1
 8020744:	4601      	mov	r1, r0
 8020746:	6818      	ldr	r0, [r3, #0]
 8020748:	f000 b802 	b.w	8020750 <_realloc_r>
 802074c:	200008f0 	.word	0x200008f0

08020750 <_realloc_r>:
 8020750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020754:	4680      	mov	r8, r0
 8020756:	4614      	mov	r4, r2
 8020758:	460e      	mov	r6, r1
 802075a:	b921      	cbnz	r1, 8020766 <_realloc_r+0x16>
 802075c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020760:	4611      	mov	r1, r2
 8020762:	f7ff bef5 	b.w	8020550 <_malloc_r>
 8020766:	b92a      	cbnz	r2, 8020774 <_realloc_r+0x24>
 8020768:	f000 fd50 	bl	802120c <_free_r>
 802076c:	4625      	mov	r5, r4
 802076e:	4628      	mov	r0, r5
 8020770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020774:	f000 fd96 	bl	80212a4 <_malloc_usable_size_r>
 8020778:	4284      	cmp	r4, r0
 802077a:	4607      	mov	r7, r0
 802077c:	d802      	bhi.n	8020784 <_realloc_r+0x34>
 802077e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020782:	d812      	bhi.n	80207aa <_realloc_r+0x5a>
 8020784:	4621      	mov	r1, r4
 8020786:	4640      	mov	r0, r8
 8020788:	f7ff fee2 	bl	8020550 <_malloc_r>
 802078c:	4605      	mov	r5, r0
 802078e:	2800      	cmp	r0, #0
 8020790:	d0ed      	beq.n	802076e <_realloc_r+0x1e>
 8020792:	42bc      	cmp	r4, r7
 8020794:	4622      	mov	r2, r4
 8020796:	4631      	mov	r1, r6
 8020798:	bf28      	it	cs
 802079a:	463a      	movcs	r2, r7
 802079c:	f000 fcfd 	bl	802119a <memcpy>
 80207a0:	4631      	mov	r1, r6
 80207a2:	4640      	mov	r0, r8
 80207a4:	f000 fd32 	bl	802120c <_free_r>
 80207a8:	e7e1      	b.n	802076e <_realloc_r+0x1e>
 80207aa:	4635      	mov	r5, r6
 80207ac:	e7df      	b.n	802076e <_realloc_r+0x1e>
	...

080207b0 <_strtoul_l.constprop.0>:
 80207b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207b4:	4f36      	ldr	r7, [pc, #216]	; (8020890 <_strtoul_l.constprop.0+0xe0>)
 80207b6:	4686      	mov	lr, r0
 80207b8:	460d      	mov	r5, r1
 80207ba:	4628      	mov	r0, r5
 80207bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80207c0:	5d3e      	ldrb	r6, [r7, r4]
 80207c2:	f016 0608 	ands.w	r6, r6, #8
 80207c6:	d1f8      	bne.n	80207ba <_strtoul_l.constprop.0+0xa>
 80207c8:	2c2d      	cmp	r4, #45	; 0x2d
 80207ca:	d130      	bne.n	802082e <_strtoul_l.constprop.0+0x7e>
 80207cc:	782c      	ldrb	r4, [r5, #0]
 80207ce:	2601      	movs	r6, #1
 80207d0:	1c85      	adds	r5, r0, #2
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d057      	beq.n	8020886 <_strtoul_l.constprop.0+0xd6>
 80207d6:	2b10      	cmp	r3, #16
 80207d8:	d109      	bne.n	80207ee <_strtoul_l.constprop.0+0x3e>
 80207da:	2c30      	cmp	r4, #48	; 0x30
 80207dc:	d107      	bne.n	80207ee <_strtoul_l.constprop.0+0x3e>
 80207de:	7828      	ldrb	r0, [r5, #0]
 80207e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80207e4:	2858      	cmp	r0, #88	; 0x58
 80207e6:	d149      	bne.n	802087c <_strtoul_l.constprop.0+0xcc>
 80207e8:	786c      	ldrb	r4, [r5, #1]
 80207ea:	2310      	movs	r3, #16
 80207ec:	3502      	adds	r5, #2
 80207ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80207f2:	2700      	movs	r7, #0
 80207f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80207f8:	fb03 f908 	mul.w	r9, r3, r8
 80207fc:	ea6f 0909 	mvn.w	r9, r9
 8020800:	4638      	mov	r0, r7
 8020802:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8020806:	f1bc 0f09 	cmp.w	ip, #9
 802080a:	d815      	bhi.n	8020838 <_strtoul_l.constprop.0+0x88>
 802080c:	4664      	mov	r4, ip
 802080e:	42a3      	cmp	r3, r4
 8020810:	dd23      	ble.n	802085a <_strtoul_l.constprop.0+0xaa>
 8020812:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8020816:	d007      	beq.n	8020828 <_strtoul_l.constprop.0+0x78>
 8020818:	4580      	cmp	r8, r0
 802081a:	d31b      	bcc.n	8020854 <_strtoul_l.constprop.0+0xa4>
 802081c:	d101      	bne.n	8020822 <_strtoul_l.constprop.0+0x72>
 802081e:	45a1      	cmp	r9, r4
 8020820:	db18      	blt.n	8020854 <_strtoul_l.constprop.0+0xa4>
 8020822:	fb00 4003 	mla	r0, r0, r3, r4
 8020826:	2701      	movs	r7, #1
 8020828:	f815 4b01 	ldrb.w	r4, [r5], #1
 802082c:	e7e9      	b.n	8020802 <_strtoul_l.constprop.0+0x52>
 802082e:	2c2b      	cmp	r4, #43	; 0x2b
 8020830:	bf04      	itt	eq
 8020832:	782c      	ldrbeq	r4, [r5, #0]
 8020834:	1c85      	addeq	r5, r0, #2
 8020836:	e7cc      	b.n	80207d2 <_strtoul_l.constprop.0+0x22>
 8020838:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802083c:	f1bc 0f19 	cmp.w	ip, #25
 8020840:	d801      	bhi.n	8020846 <_strtoul_l.constprop.0+0x96>
 8020842:	3c37      	subs	r4, #55	; 0x37
 8020844:	e7e3      	b.n	802080e <_strtoul_l.constprop.0+0x5e>
 8020846:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802084a:	f1bc 0f19 	cmp.w	ip, #25
 802084e:	d804      	bhi.n	802085a <_strtoul_l.constprop.0+0xaa>
 8020850:	3c57      	subs	r4, #87	; 0x57
 8020852:	e7dc      	b.n	802080e <_strtoul_l.constprop.0+0x5e>
 8020854:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020858:	e7e6      	b.n	8020828 <_strtoul_l.constprop.0+0x78>
 802085a:	1c7b      	adds	r3, r7, #1
 802085c:	d106      	bne.n	802086c <_strtoul_l.constprop.0+0xbc>
 802085e:	2322      	movs	r3, #34	; 0x22
 8020860:	f8ce 3000 	str.w	r3, [lr]
 8020864:	4638      	mov	r0, r7
 8020866:	b932      	cbnz	r2, 8020876 <_strtoul_l.constprop.0+0xc6>
 8020868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802086c:	b106      	cbz	r6, 8020870 <_strtoul_l.constprop.0+0xc0>
 802086e:	4240      	negs	r0, r0
 8020870:	2a00      	cmp	r2, #0
 8020872:	d0f9      	beq.n	8020868 <_strtoul_l.constprop.0+0xb8>
 8020874:	b107      	cbz	r7, 8020878 <_strtoul_l.constprop.0+0xc8>
 8020876:	1e69      	subs	r1, r5, #1
 8020878:	6011      	str	r1, [r2, #0]
 802087a:	e7f5      	b.n	8020868 <_strtoul_l.constprop.0+0xb8>
 802087c:	2430      	movs	r4, #48	; 0x30
 802087e:	2b00      	cmp	r3, #0
 8020880:	d1b5      	bne.n	80207ee <_strtoul_l.constprop.0+0x3e>
 8020882:	2308      	movs	r3, #8
 8020884:	e7b3      	b.n	80207ee <_strtoul_l.constprop.0+0x3e>
 8020886:	2c30      	cmp	r4, #48	; 0x30
 8020888:	d0a9      	beq.n	80207de <_strtoul_l.constprop.0+0x2e>
 802088a:	230a      	movs	r3, #10
 802088c:	e7af      	b.n	80207ee <_strtoul_l.constprop.0+0x3e>
 802088e:	bf00      	nop
 8020890:	080234be 	.word	0x080234be

08020894 <strtoul>:
 8020894:	4613      	mov	r3, r2
 8020896:	460a      	mov	r2, r1
 8020898:	4601      	mov	r1, r0
 802089a:	4802      	ldr	r0, [pc, #8]	; (80208a4 <strtoul+0x10>)
 802089c:	6800      	ldr	r0, [r0, #0]
 802089e:	f7ff bf87 	b.w	80207b0 <_strtoul_l.constprop.0>
 80208a2:	bf00      	nop
 80208a4:	200008f0 	.word	0x200008f0

080208a8 <std>:
 80208a8:	2300      	movs	r3, #0
 80208aa:	b510      	push	{r4, lr}
 80208ac:	4604      	mov	r4, r0
 80208ae:	e9c0 3300 	strd	r3, r3, [r0]
 80208b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80208b6:	6083      	str	r3, [r0, #8]
 80208b8:	8181      	strh	r1, [r0, #12]
 80208ba:	6643      	str	r3, [r0, #100]	; 0x64
 80208bc:	81c2      	strh	r2, [r0, #14]
 80208be:	6183      	str	r3, [r0, #24]
 80208c0:	4619      	mov	r1, r3
 80208c2:	2208      	movs	r2, #8
 80208c4:	305c      	adds	r0, #92	; 0x5c
 80208c6:	f000 fb9f 	bl	8021008 <memset>
 80208ca:	4b0d      	ldr	r3, [pc, #52]	; (8020900 <std+0x58>)
 80208cc:	6263      	str	r3, [r4, #36]	; 0x24
 80208ce:	4b0d      	ldr	r3, [pc, #52]	; (8020904 <std+0x5c>)
 80208d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80208d2:	4b0d      	ldr	r3, [pc, #52]	; (8020908 <std+0x60>)
 80208d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80208d6:	4b0d      	ldr	r3, [pc, #52]	; (802090c <std+0x64>)
 80208d8:	6323      	str	r3, [r4, #48]	; 0x30
 80208da:	4b0d      	ldr	r3, [pc, #52]	; (8020910 <std+0x68>)
 80208dc:	6224      	str	r4, [r4, #32]
 80208de:	429c      	cmp	r4, r3
 80208e0:	d006      	beq.n	80208f0 <std+0x48>
 80208e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80208e6:	4294      	cmp	r4, r2
 80208e8:	d002      	beq.n	80208f0 <std+0x48>
 80208ea:	33d0      	adds	r3, #208	; 0xd0
 80208ec:	429c      	cmp	r4, r3
 80208ee:	d105      	bne.n	80208fc <std+0x54>
 80208f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80208f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208f8:	f000 bc44 	b.w	8021184 <__retarget_lock_init_recursive>
 80208fc:	bd10      	pop	{r4, pc}
 80208fe:	bf00      	nop
 8020900:	08020d91 	.word	0x08020d91
 8020904:	08020db3 	.word	0x08020db3
 8020908:	08020deb 	.word	0x08020deb
 802090c:	08020e0f 	.word	0x08020e0f
 8020910:	2001798c 	.word	0x2001798c

08020914 <stdio_exit_handler>:
 8020914:	4a02      	ldr	r2, [pc, #8]	; (8020920 <stdio_exit_handler+0xc>)
 8020916:	4903      	ldr	r1, [pc, #12]	; (8020924 <stdio_exit_handler+0x10>)
 8020918:	4803      	ldr	r0, [pc, #12]	; (8020928 <stdio_exit_handler+0x14>)
 802091a:	f000 b869 	b.w	80209f0 <_fwalk_sglue>
 802091e:	bf00      	nop
 8020920:	20000898 	.word	0x20000898
 8020924:	08021c19 	.word	0x08021c19
 8020928:	200008a4 	.word	0x200008a4

0802092c <cleanup_stdio>:
 802092c:	6841      	ldr	r1, [r0, #4]
 802092e:	4b0c      	ldr	r3, [pc, #48]	; (8020960 <cleanup_stdio+0x34>)
 8020930:	4299      	cmp	r1, r3
 8020932:	b510      	push	{r4, lr}
 8020934:	4604      	mov	r4, r0
 8020936:	d001      	beq.n	802093c <cleanup_stdio+0x10>
 8020938:	f001 f96e 	bl	8021c18 <_fflush_r>
 802093c:	68a1      	ldr	r1, [r4, #8]
 802093e:	4b09      	ldr	r3, [pc, #36]	; (8020964 <cleanup_stdio+0x38>)
 8020940:	4299      	cmp	r1, r3
 8020942:	d002      	beq.n	802094a <cleanup_stdio+0x1e>
 8020944:	4620      	mov	r0, r4
 8020946:	f001 f967 	bl	8021c18 <_fflush_r>
 802094a:	68e1      	ldr	r1, [r4, #12]
 802094c:	4b06      	ldr	r3, [pc, #24]	; (8020968 <cleanup_stdio+0x3c>)
 802094e:	4299      	cmp	r1, r3
 8020950:	d004      	beq.n	802095c <cleanup_stdio+0x30>
 8020952:	4620      	mov	r0, r4
 8020954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020958:	f001 b95e 	b.w	8021c18 <_fflush_r>
 802095c:	bd10      	pop	{r4, pc}
 802095e:	bf00      	nop
 8020960:	2001798c 	.word	0x2001798c
 8020964:	200179f4 	.word	0x200179f4
 8020968:	20017a5c 	.word	0x20017a5c

0802096c <global_stdio_init.part.0>:
 802096c:	b510      	push	{r4, lr}
 802096e:	4b0b      	ldr	r3, [pc, #44]	; (802099c <global_stdio_init.part.0+0x30>)
 8020970:	4c0b      	ldr	r4, [pc, #44]	; (80209a0 <global_stdio_init.part.0+0x34>)
 8020972:	4a0c      	ldr	r2, [pc, #48]	; (80209a4 <global_stdio_init.part.0+0x38>)
 8020974:	601a      	str	r2, [r3, #0]
 8020976:	4620      	mov	r0, r4
 8020978:	2200      	movs	r2, #0
 802097a:	2104      	movs	r1, #4
 802097c:	f7ff ff94 	bl	80208a8 <std>
 8020980:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020984:	2201      	movs	r2, #1
 8020986:	2109      	movs	r1, #9
 8020988:	f7ff ff8e 	bl	80208a8 <std>
 802098c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020990:	2202      	movs	r2, #2
 8020992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020996:	2112      	movs	r1, #18
 8020998:	f7ff bf86 	b.w	80208a8 <std>
 802099c:	20017ac4 	.word	0x20017ac4
 80209a0:	2001798c 	.word	0x2001798c
 80209a4:	08020915 	.word	0x08020915

080209a8 <__sfp_lock_acquire>:
 80209a8:	4801      	ldr	r0, [pc, #4]	; (80209b0 <__sfp_lock_acquire+0x8>)
 80209aa:	f000 bbec 	b.w	8021186 <__retarget_lock_acquire_recursive>
 80209ae:	bf00      	nop
 80209b0:	20017ace 	.word	0x20017ace

080209b4 <__sfp_lock_release>:
 80209b4:	4801      	ldr	r0, [pc, #4]	; (80209bc <__sfp_lock_release+0x8>)
 80209b6:	f000 bbe7 	b.w	8021188 <__retarget_lock_release_recursive>
 80209ba:	bf00      	nop
 80209bc:	20017ace 	.word	0x20017ace

080209c0 <__sinit>:
 80209c0:	b510      	push	{r4, lr}
 80209c2:	4604      	mov	r4, r0
 80209c4:	f7ff fff0 	bl	80209a8 <__sfp_lock_acquire>
 80209c8:	6a23      	ldr	r3, [r4, #32]
 80209ca:	b11b      	cbz	r3, 80209d4 <__sinit+0x14>
 80209cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209d0:	f7ff bff0 	b.w	80209b4 <__sfp_lock_release>
 80209d4:	4b04      	ldr	r3, [pc, #16]	; (80209e8 <__sinit+0x28>)
 80209d6:	6223      	str	r3, [r4, #32]
 80209d8:	4b04      	ldr	r3, [pc, #16]	; (80209ec <__sinit+0x2c>)
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d1f5      	bne.n	80209cc <__sinit+0xc>
 80209e0:	f7ff ffc4 	bl	802096c <global_stdio_init.part.0>
 80209e4:	e7f2      	b.n	80209cc <__sinit+0xc>
 80209e6:	bf00      	nop
 80209e8:	0802092d 	.word	0x0802092d
 80209ec:	20017ac4 	.word	0x20017ac4

080209f0 <_fwalk_sglue>:
 80209f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209f4:	4607      	mov	r7, r0
 80209f6:	4688      	mov	r8, r1
 80209f8:	4614      	mov	r4, r2
 80209fa:	2600      	movs	r6, #0
 80209fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020a00:	f1b9 0901 	subs.w	r9, r9, #1
 8020a04:	d505      	bpl.n	8020a12 <_fwalk_sglue+0x22>
 8020a06:	6824      	ldr	r4, [r4, #0]
 8020a08:	2c00      	cmp	r4, #0
 8020a0a:	d1f7      	bne.n	80209fc <_fwalk_sglue+0xc>
 8020a0c:	4630      	mov	r0, r6
 8020a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a12:	89ab      	ldrh	r3, [r5, #12]
 8020a14:	2b01      	cmp	r3, #1
 8020a16:	d907      	bls.n	8020a28 <_fwalk_sglue+0x38>
 8020a18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020a1c:	3301      	adds	r3, #1
 8020a1e:	d003      	beq.n	8020a28 <_fwalk_sglue+0x38>
 8020a20:	4629      	mov	r1, r5
 8020a22:	4638      	mov	r0, r7
 8020a24:	47c0      	blx	r8
 8020a26:	4306      	orrs	r6, r0
 8020a28:	3568      	adds	r5, #104	; 0x68
 8020a2a:	e7e9      	b.n	8020a00 <_fwalk_sglue+0x10>

08020a2c <_fwrite_r>:
 8020a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a30:	9c08      	ldr	r4, [sp, #32]
 8020a32:	468a      	mov	sl, r1
 8020a34:	4690      	mov	r8, r2
 8020a36:	fb02 f903 	mul.w	r9, r2, r3
 8020a3a:	4606      	mov	r6, r0
 8020a3c:	b118      	cbz	r0, 8020a46 <_fwrite_r+0x1a>
 8020a3e:	6a03      	ldr	r3, [r0, #32]
 8020a40:	b90b      	cbnz	r3, 8020a46 <_fwrite_r+0x1a>
 8020a42:	f7ff ffbd 	bl	80209c0 <__sinit>
 8020a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a48:	07dd      	lsls	r5, r3, #31
 8020a4a:	d405      	bmi.n	8020a58 <_fwrite_r+0x2c>
 8020a4c:	89a3      	ldrh	r3, [r4, #12]
 8020a4e:	0598      	lsls	r0, r3, #22
 8020a50:	d402      	bmi.n	8020a58 <_fwrite_r+0x2c>
 8020a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a54:	f000 fb97 	bl	8021186 <__retarget_lock_acquire_recursive>
 8020a58:	89a3      	ldrh	r3, [r4, #12]
 8020a5a:	0719      	lsls	r1, r3, #28
 8020a5c:	d516      	bpl.n	8020a8c <_fwrite_r+0x60>
 8020a5e:	6923      	ldr	r3, [r4, #16]
 8020a60:	b1a3      	cbz	r3, 8020a8c <_fwrite_r+0x60>
 8020a62:	2500      	movs	r5, #0
 8020a64:	454d      	cmp	r5, r9
 8020a66:	d01f      	beq.n	8020aa8 <_fwrite_r+0x7c>
 8020a68:	68a7      	ldr	r7, [r4, #8]
 8020a6a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8020a6e:	3f01      	subs	r7, #1
 8020a70:	2f00      	cmp	r7, #0
 8020a72:	60a7      	str	r7, [r4, #8]
 8020a74:	da04      	bge.n	8020a80 <_fwrite_r+0x54>
 8020a76:	69a3      	ldr	r3, [r4, #24]
 8020a78:	429f      	cmp	r7, r3
 8020a7a:	db0f      	blt.n	8020a9c <_fwrite_r+0x70>
 8020a7c:	290a      	cmp	r1, #10
 8020a7e:	d00d      	beq.n	8020a9c <_fwrite_r+0x70>
 8020a80:	6823      	ldr	r3, [r4, #0]
 8020a82:	1c5a      	adds	r2, r3, #1
 8020a84:	6022      	str	r2, [r4, #0]
 8020a86:	7019      	strb	r1, [r3, #0]
 8020a88:	3501      	adds	r5, #1
 8020a8a:	e7eb      	b.n	8020a64 <_fwrite_r+0x38>
 8020a8c:	4621      	mov	r1, r4
 8020a8e:	4630      	mov	r0, r6
 8020a90:	f000 fa38 	bl	8020f04 <__swsetup_r>
 8020a94:	2800      	cmp	r0, #0
 8020a96:	d0e4      	beq.n	8020a62 <_fwrite_r+0x36>
 8020a98:	2500      	movs	r5, #0
 8020a9a:	e005      	b.n	8020aa8 <_fwrite_r+0x7c>
 8020a9c:	4622      	mov	r2, r4
 8020a9e:	4630      	mov	r0, r6
 8020aa0:	f000 f9f2 	bl	8020e88 <__swbuf_r>
 8020aa4:	3001      	adds	r0, #1
 8020aa6:	d1ef      	bne.n	8020a88 <_fwrite_r+0x5c>
 8020aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020aaa:	07da      	lsls	r2, r3, #31
 8020aac:	d405      	bmi.n	8020aba <_fwrite_r+0x8e>
 8020aae:	89a3      	ldrh	r3, [r4, #12]
 8020ab0:	059b      	lsls	r3, r3, #22
 8020ab2:	d402      	bmi.n	8020aba <_fwrite_r+0x8e>
 8020ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ab6:	f000 fb67 	bl	8021188 <__retarget_lock_release_recursive>
 8020aba:	fbb5 f0f8 	udiv	r0, r5, r8
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020ac4 <fwrite>:
 8020ac4:	b507      	push	{r0, r1, r2, lr}
 8020ac6:	9300      	str	r3, [sp, #0]
 8020ac8:	4613      	mov	r3, r2
 8020aca:	460a      	mov	r2, r1
 8020acc:	4601      	mov	r1, r0
 8020ace:	4803      	ldr	r0, [pc, #12]	; (8020adc <fwrite+0x18>)
 8020ad0:	6800      	ldr	r0, [r0, #0]
 8020ad2:	f7ff ffab 	bl	8020a2c <_fwrite_r>
 8020ad6:	b003      	add	sp, #12
 8020ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8020adc:	200008f0 	.word	0x200008f0

08020ae0 <iprintf>:
 8020ae0:	b40f      	push	{r0, r1, r2, r3}
 8020ae2:	b507      	push	{r0, r1, r2, lr}
 8020ae4:	4906      	ldr	r1, [pc, #24]	; (8020b00 <iprintf+0x20>)
 8020ae6:	ab04      	add	r3, sp, #16
 8020ae8:	6808      	ldr	r0, [r1, #0]
 8020aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8020aee:	6881      	ldr	r1, [r0, #8]
 8020af0:	9301      	str	r3, [sp, #4]
 8020af2:	f000 fd61 	bl	80215b8 <_vfiprintf_r>
 8020af6:	b003      	add	sp, #12
 8020af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020afc:	b004      	add	sp, #16
 8020afe:	4770      	bx	lr
 8020b00:	200008f0 	.word	0x200008f0

08020b04 <_puts_r>:
 8020b04:	6a03      	ldr	r3, [r0, #32]
 8020b06:	b570      	push	{r4, r5, r6, lr}
 8020b08:	6884      	ldr	r4, [r0, #8]
 8020b0a:	4605      	mov	r5, r0
 8020b0c:	460e      	mov	r6, r1
 8020b0e:	b90b      	cbnz	r3, 8020b14 <_puts_r+0x10>
 8020b10:	f7ff ff56 	bl	80209c0 <__sinit>
 8020b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b16:	07db      	lsls	r3, r3, #31
 8020b18:	d405      	bmi.n	8020b26 <_puts_r+0x22>
 8020b1a:	89a3      	ldrh	r3, [r4, #12]
 8020b1c:	0598      	lsls	r0, r3, #22
 8020b1e:	d402      	bmi.n	8020b26 <_puts_r+0x22>
 8020b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b22:	f000 fb30 	bl	8021186 <__retarget_lock_acquire_recursive>
 8020b26:	89a3      	ldrh	r3, [r4, #12]
 8020b28:	0719      	lsls	r1, r3, #28
 8020b2a:	d513      	bpl.n	8020b54 <_puts_r+0x50>
 8020b2c:	6923      	ldr	r3, [r4, #16]
 8020b2e:	b18b      	cbz	r3, 8020b54 <_puts_r+0x50>
 8020b30:	3e01      	subs	r6, #1
 8020b32:	68a3      	ldr	r3, [r4, #8]
 8020b34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020b38:	3b01      	subs	r3, #1
 8020b3a:	60a3      	str	r3, [r4, #8]
 8020b3c:	b9e9      	cbnz	r1, 8020b7a <_puts_r+0x76>
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	da2e      	bge.n	8020ba0 <_puts_r+0x9c>
 8020b42:	4622      	mov	r2, r4
 8020b44:	210a      	movs	r1, #10
 8020b46:	4628      	mov	r0, r5
 8020b48:	f000 f99e 	bl	8020e88 <__swbuf_r>
 8020b4c:	3001      	adds	r0, #1
 8020b4e:	d007      	beq.n	8020b60 <_puts_r+0x5c>
 8020b50:	250a      	movs	r5, #10
 8020b52:	e007      	b.n	8020b64 <_puts_r+0x60>
 8020b54:	4621      	mov	r1, r4
 8020b56:	4628      	mov	r0, r5
 8020b58:	f000 f9d4 	bl	8020f04 <__swsetup_r>
 8020b5c:	2800      	cmp	r0, #0
 8020b5e:	d0e7      	beq.n	8020b30 <_puts_r+0x2c>
 8020b60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b66:	07da      	lsls	r2, r3, #31
 8020b68:	d405      	bmi.n	8020b76 <_puts_r+0x72>
 8020b6a:	89a3      	ldrh	r3, [r4, #12]
 8020b6c:	059b      	lsls	r3, r3, #22
 8020b6e:	d402      	bmi.n	8020b76 <_puts_r+0x72>
 8020b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b72:	f000 fb09 	bl	8021188 <__retarget_lock_release_recursive>
 8020b76:	4628      	mov	r0, r5
 8020b78:	bd70      	pop	{r4, r5, r6, pc}
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	da04      	bge.n	8020b88 <_puts_r+0x84>
 8020b7e:	69a2      	ldr	r2, [r4, #24]
 8020b80:	429a      	cmp	r2, r3
 8020b82:	dc06      	bgt.n	8020b92 <_puts_r+0x8e>
 8020b84:	290a      	cmp	r1, #10
 8020b86:	d004      	beq.n	8020b92 <_puts_r+0x8e>
 8020b88:	6823      	ldr	r3, [r4, #0]
 8020b8a:	1c5a      	adds	r2, r3, #1
 8020b8c:	6022      	str	r2, [r4, #0]
 8020b8e:	7019      	strb	r1, [r3, #0]
 8020b90:	e7cf      	b.n	8020b32 <_puts_r+0x2e>
 8020b92:	4622      	mov	r2, r4
 8020b94:	4628      	mov	r0, r5
 8020b96:	f000 f977 	bl	8020e88 <__swbuf_r>
 8020b9a:	3001      	adds	r0, #1
 8020b9c:	d1c9      	bne.n	8020b32 <_puts_r+0x2e>
 8020b9e:	e7df      	b.n	8020b60 <_puts_r+0x5c>
 8020ba0:	6823      	ldr	r3, [r4, #0]
 8020ba2:	250a      	movs	r5, #10
 8020ba4:	1c5a      	adds	r2, r3, #1
 8020ba6:	6022      	str	r2, [r4, #0]
 8020ba8:	701d      	strb	r5, [r3, #0]
 8020baa:	e7db      	b.n	8020b64 <_puts_r+0x60>

08020bac <puts>:
 8020bac:	4b02      	ldr	r3, [pc, #8]	; (8020bb8 <puts+0xc>)
 8020bae:	4601      	mov	r1, r0
 8020bb0:	6818      	ldr	r0, [r3, #0]
 8020bb2:	f7ff bfa7 	b.w	8020b04 <_puts_r>
 8020bb6:	bf00      	nop
 8020bb8:	200008f0 	.word	0x200008f0

08020bbc <setbuf>:
 8020bbc:	fab1 f281 	clz	r2, r1
 8020bc0:	0952      	lsrs	r2, r2, #5
 8020bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020bc6:	0052      	lsls	r2, r2, #1
 8020bc8:	f000 b800 	b.w	8020bcc <setvbuf>

08020bcc <setvbuf>:
 8020bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020bd0:	461d      	mov	r5, r3
 8020bd2:	4b54      	ldr	r3, [pc, #336]	; (8020d24 <setvbuf+0x158>)
 8020bd4:	681f      	ldr	r7, [r3, #0]
 8020bd6:	4604      	mov	r4, r0
 8020bd8:	460e      	mov	r6, r1
 8020bda:	4690      	mov	r8, r2
 8020bdc:	b127      	cbz	r7, 8020be8 <setvbuf+0x1c>
 8020bde:	6a3b      	ldr	r3, [r7, #32]
 8020be0:	b913      	cbnz	r3, 8020be8 <setvbuf+0x1c>
 8020be2:	4638      	mov	r0, r7
 8020be4:	f7ff feec 	bl	80209c0 <__sinit>
 8020be8:	f1b8 0f02 	cmp.w	r8, #2
 8020bec:	d006      	beq.n	8020bfc <setvbuf+0x30>
 8020bee:	f1b8 0f01 	cmp.w	r8, #1
 8020bf2:	f200 8094 	bhi.w	8020d1e <setvbuf+0x152>
 8020bf6:	2d00      	cmp	r5, #0
 8020bf8:	f2c0 8091 	blt.w	8020d1e <setvbuf+0x152>
 8020bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bfe:	07da      	lsls	r2, r3, #31
 8020c00:	d405      	bmi.n	8020c0e <setvbuf+0x42>
 8020c02:	89a3      	ldrh	r3, [r4, #12]
 8020c04:	059b      	lsls	r3, r3, #22
 8020c06:	d402      	bmi.n	8020c0e <setvbuf+0x42>
 8020c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c0a:	f000 fabc 	bl	8021186 <__retarget_lock_acquire_recursive>
 8020c0e:	4621      	mov	r1, r4
 8020c10:	4638      	mov	r0, r7
 8020c12:	f001 f801 	bl	8021c18 <_fflush_r>
 8020c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020c18:	b141      	cbz	r1, 8020c2c <setvbuf+0x60>
 8020c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020c1e:	4299      	cmp	r1, r3
 8020c20:	d002      	beq.n	8020c28 <setvbuf+0x5c>
 8020c22:	4638      	mov	r0, r7
 8020c24:	f000 faf2 	bl	802120c <_free_r>
 8020c28:	2300      	movs	r3, #0
 8020c2a:	6363      	str	r3, [r4, #52]	; 0x34
 8020c2c:	2300      	movs	r3, #0
 8020c2e:	61a3      	str	r3, [r4, #24]
 8020c30:	6063      	str	r3, [r4, #4]
 8020c32:	89a3      	ldrh	r3, [r4, #12]
 8020c34:	0618      	lsls	r0, r3, #24
 8020c36:	d503      	bpl.n	8020c40 <setvbuf+0x74>
 8020c38:	6921      	ldr	r1, [r4, #16]
 8020c3a:	4638      	mov	r0, r7
 8020c3c:	f000 fae6 	bl	802120c <_free_r>
 8020c40:	89a3      	ldrh	r3, [r4, #12]
 8020c42:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8020c46:	f023 0303 	bic.w	r3, r3, #3
 8020c4a:	f1b8 0f02 	cmp.w	r8, #2
 8020c4e:	81a3      	strh	r3, [r4, #12]
 8020c50:	d05f      	beq.n	8020d12 <setvbuf+0x146>
 8020c52:	ab01      	add	r3, sp, #4
 8020c54:	466a      	mov	r2, sp
 8020c56:	4621      	mov	r1, r4
 8020c58:	4638      	mov	r0, r7
 8020c5a:	f001 f817 	bl	8021c8c <__swhatbuf_r>
 8020c5e:	89a3      	ldrh	r3, [r4, #12]
 8020c60:	4318      	orrs	r0, r3
 8020c62:	81a0      	strh	r0, [r4, #12]
 8020c64:	bb2d      	cbnz	r5, 8020cb2 <setvbuf+0xe6>
 8020c66:	9d00      	ldr	r5, [sp, #0]
 8020c68:	4628      	mov	r0, r5
 8020c6a:	f7ff fc41 	bl	80204f0 <malloc>
 8020c6e:	4606      	mov	r6, r0
 8020c70:	2800      	cmp	r0, #0
 8020c72:	d150      	bne.n	8020d16 <setvbuf+0x14a>
 8020c74:	f8dd 9000 	ldr.w	r9, [sp]
 8020c78:	45a9      	cmp	r9, r5
 8020c7a:	d13e      	bne.n	8020cfa <setvbuf+0x12e>
 8020c7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020c80:	2200      	movs	r2, #0
 8020c82:	60a2      	str	r2, [r4, #8]
 8020c84:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020c88:	6022      	str	r2, [r4, #0]
 8020c8a:	6122      	str	r2, [r4, #16]
 8020c8c:	2201      	movs	r2, #1
 8020c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c92:	6162      	str	r2, [r4, #20]
 8020c94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020c96:	f043 0302 	orr.w	r3, r3, #2
 8020c9a:	07d1      	lsls	r1, r2, #31
 8020c9c:	81a3      	strh	r3, [r4, #12]
 8020c9e:	d404      	bmi.n	8020caa <setvbuf+0xde>
 8020ca0:	059b      	lsls	r3, r3, #22
 8020ca2:	d402      	bmi.n	8020caa <setvbuf+0xde>
 8020ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ca6:	f000 fa6f 	bl	8021188 <__retarget_lock_release_recursive>
 8020caa:	4628      	mov	r0, r5
 8020cac:	b003      	add	sp, #12
 8020cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020cb2:	2e00      	cmp	r6, #0
 8020cb4:	d0d8      	beq.n	8020c68 <setvbuf+0x9c>
 8020cb6:	6a3b      	ldr	r3, [r7, #32]
 8020cb8:	b913      	cbnz	r3, 8020cc0 <setvbuf+0xf4>
 8020cba:	4638      	mov	r0, r7
 8020cbc:	f7ff fe80 	bl	80209c0 <__sinit>
 8020cc0:	f1b8 0f01 	cmp.w	r8, #1
 8020cc4:	bf08      	it	eq
 8020cc6:	89a3      	ldrheq	r3, [r4, #12]
 8020cc8:	6026      	str	r6, [r4, #0]
 8020cca:	bf04      	itt	eq
 8020ccc:	f043 0301 	orreq.w	r3, r3, #1
 8020cd0:	81a3      	strheq	r3, [r4, #12]
 8020cd2:	89a3      	ldrh	r3, [r4, #12]
 8020cd4:	f013 0208 	ands.w	r2, r3, #8
 8020cd8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020cdc:	d01d      	beq.n	8020d1a <setvbuf+0x14e>
 8020cde:	07da      	lsls	r2, r3, #31
 8020ce0:	bf41      	itttt	mi
 8020ce2:	2200      	movmi	r2, #0
 8020ce4:	426d      	negmi	r5, r5
 8020ce6:	60a2      	strmi	r2, [r4, #8]
 8020ce8:	61a5      	strmi	r5, [r4, #24]
 8020cea:	bf58      	it	pl
 8020cec:	60a5      	strpl	r5, [r4, #8]
 8020cee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020cf0:	f015 0501 	ands.w	r5, r5, #1
 8020cf4:	d0d4      	beq.n	8020ca0 <setvbuf+0xd4>
 8020cf6:	2500      	movs	r5, #0
 8020cf8:	e7d7      	b.n	8020caa <setvbuf+0xde>
 8020cfa:	4648      	mov	r0, r9
 8020cfc:	f7ff fbf8 	bl	80204f0 <malloc>
 8020d00:	4606      	mov	r6, r0
 8020d02:	2800      	cmp	r0, #0
 8020d04:	d0ba      	beq.n	8020c7c <setvbuf+0xb0>
 8020d06:	89a3      	ldrh	r3, [r4, #12]
 8020d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d0c:	81a3      	strh	r3, [r4, #12]
 8020d0e:	464d      	mov	r5, r9
 8020d10:	e7d1      	b.n	8020cb6 <setvbuf+0xea>
 8020d12:	2500      	movs	r5, #0
 8020d14:	e7b4      	b.n	8020c80 <setvbuf+0xb4>
 8020d16:	46a9      	mov	r9, r5
 8020d18:	e7f5      	b.n	8020d06 <setvbuf+0x13a>
 8020d1a:	60a2      	str	r2, [r4, #8]
 8020d1c:	e7e7      	b.n	8020cee <setvbuf+0x122>
 8020d1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020d22:	e7c2      	b.n	8020caa <setvbuf+0xde>
 8020d24:	200008f0 	.word	0x200008f0

08020d28 <sniprintf>:
 8020d28:	b40c      	push	{r2, r3}
 8020d2a:	b530      	push	{r4, r5, lr}
 8020d2c:	4b17      	ldr	r3, [pc, #92]	; (8020d8c <sniprintf+0x64>)
 8020d2e:	1e0c      	subs	r4, r1, #0
 8020d30:	681d      	ldr	r5, [r3, #0]
 8020d32:	b09d      	sub	sp, #116	; 0x74
 8020d34:	da08      	bge.n	8020d48 <sniprintf+0x20>
 8020d36:	238b      	movs	r3, #139	; 0x8b
 8020d38:	602b      	str	r3, [r5, #0]
 8020d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d3e:	b01d      	add	sp, #116	; 0x74
 8020d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020d44:	b002      	add	sp, #8
 8020d46:	4770      	bx	lr
 8020d48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020d4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020d50:	bf14      	ite	ne
 8020d52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020d56:	4623      	moveq	r3, r4
 8020d58:	9304      	str	r3, [sp, #16]
 8020d5a:	9307      	str	r3, [sp, #28]
 8020d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020d60:	9002      	str	r0, [sp, #8]
 8020d62:	9006      	str	r0, [sp, #24]
 8020d64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020d68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020d6a:	ab21      	add	r3, sp, #132	; 0x84
 8020d6c:	a902      	add	r1, sp, #8
 8020d6e:	4628      	mov	r0, r5
 8020d70:	9301      	str	r3, [sp, #4]
 8020d72:	f000 faf9 	bl	8021368 <_svfiprintf_r>
 8020d76:	1c43      	adds	r3, r0, #1
 8020d78:	bfbc      	itt	lt
 8020d7a:	238b      	movlt	r3, #139	; 0x8b
 8020d7c:	602b      	strlt	r3, [r5, #0]
 8020d7e:	2c00      	cmp	r4, #0
 8020d80:	d0dd      	beq.n	8020d3e <sniprintf+0x16>
 8020d82:	9b02      	ldr	r3, [sp, #8]
 8020d84:	2200      	movs	r2, #0
 8020d86:	701a      	strb	r2, [r3, #0]
 8020d88:	e7d9      	b.n	8020d3e <sniprintf+0x16>
 8020d8a:	bf00      	nop
 8020d8c:	200008f0 	.word	0x200008f0

08020d90 <__sread>:
 8020d90:	b510      	push	{r4, lr}
 8020d92:	460c      	mov	r4, r1
 8020d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d98:	f000 f996 	bl	80210c8 <_read_r>
 8020d9c:	2800      	cmp	r0, #0
 8020d9e:	bfab      	itete	ge
 8020da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020da2:	89a3      	ldrhlt	r3, [r4, #12]
 8020da4:	181b      	addge	r3, r3, r0
 8020da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020daa:	bfac      	ite	ge
 8020dac:	6563      	strge	r3, [r4, #84]	; 0x54
 8020dae:	81a3      	strhlt	r3, [r4, #12]
 8020db0:	bd10      	pop	{r4, pc}

08020db2 <__swrite>:
 8020db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020db6:	461f      	mov	r7, r3
 8020db8:	898b      	ldrh	r3, [r1, #12]
 8020dba:	05db      	lsls	r3, r3, #23
 8020dbc:	4605      	mov	r5, r0
 8020dbe:	460c      	mov	r4, r1
 8020dc0:	4616      	mov	r6, r2
 8020dc2:	d505      	bpl.n	8020dd0 <__swrite+0x1e>
 8020dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020dc8:	2302      	movs	r3, #2
 8020dca:	2200      	movs	r2, #0
 8020dcc:	f000 f96a 	bl	80210a4 <_lseek_r>
 8020dd0:	89a3      	ldrh	r3, [r4, #12]
 8020dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020dda:	81a3      	strh	r3, [r4, #12]
 8020ddc:	4632      	mov	r2, r6
 8020dde:	463b      	mov	r3, r7
 8020de0:	4628      	mov	r0, r5
 8020de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020de6:	f000 b991 	b.w	802110c <_write_r>

08020dea <__sseek>:
 8020dea:	b510      	push	{r4, lr}
 8020dec:	460c      	mov	r4, r1
 8020dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020df2:	f000 f957 	bl	80210a4 <_lseek_r>
 8020df6:	1c43      	adds	r3, r0, #1
 8020df8:	89a3      	ldrh	r3, [r4, #12]
 8020dfa:	bf15      	itete	ne
 8020dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8020dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020e06:	81a3      	strheq	r3, [r4, #12]
 8020e08:	bf18      	it	ne
 8020e0a:	81a3      	strhne	r3, [r4, #12]
 8020e0c:	bd10      	pop	{r4, pc}

08020e0e <__sclose>:
 8020e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e12:	f000 b937 	b.w	8021084 <_close_r>

08020e16 <_vsniprintf_r>:
 8020e16:	b530      	push	{r4, r5, lr}
 8020e18:	4614      	mov	r4, r2
 8020e1a:	2c00      	cmp	r4, #0
 8020e1c:	b09b      	sub	sp, #108	; 0x6c
 8020e1e:	4605      	mov	r5, r0
 8020e20:	461a      	mov	r2, r3
 8020e22:	da05      	bge.n	8020e30 <_vsniprintf_r+0x1a>
 8020e24:	238b      	movs	r3, #139	; 0x8b
 8020e26:	6003      	str	r3, [r0, #0]
 8020e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020e2c:	b01b      	add	sp, #108	; 0x6c
 8020e2e:	bd30      	pop	{r4, r5, pc}
 8020e30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020e34:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020e38:	bf14      	ite	ne
 8020e3a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020e3e:	4623      	moveq	r3, r4
 8020e40:	9302      	str	r3, [sp, #8]
 8020e42:	9305      	str	r3, [sp, #20]
 8020e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e48:	9100      	str	r1, [sp, #0]
 8020e4a:	9104      	str	r1, [sp, #16]
 8020e4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e50:	4669      	mov	r1, sp
 8020e52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020e54:	f000 fa88 	bl	8021368 <_svfiprintf_r>
 8020e58:	1c43      	adds	r3, r0, #1
 8020e5a:	bfbc      	itt	lt
 8020e5c:	238b      	movlt	r3, #139	; 0x8b
 8020e5e:	602b      	strlt	r3, [r5, #0]
 8020e60:	2c00      	cmp	r4, #0
 8020e62:	d0e3      	beq.n	8020e2c <_vsniprintf_r+0x16>
 8020e64:	9b00      	ldr	r3, [sp, #0]
 8020e66:	2200      	movs	r2, #0
 8020e68:	701a      	strb	r2, [r3, #0]
 8020e6a:	e7df      	b.n	8020e2c <_vsniprintf_r+0x16>

08020e6c <vsniprintf>:
 8020e6c:	b507      	push	{r0, r1, r2, lr}
 8020e6e:	9300      	str	r3, [sp, #0]
 8020e70:	4613      	mov	r3, r2
 8020e72:	460a      	mov	r2, r1
 8020e74:	4601      	mov	r1, r0
 8020e76:	4803      	ldr	r0, [pc, #12]	; (8020e84 <vsniprintf+0x18>)
 8020e78:	6800      	ldr	r0, [r0, #0]
 8020e7a:	f7ff ffcc 	bl	8020e16 <_vsniprintf_r>
 8020e7e:	b003      	add	sp, #12
 8020e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8020e84:	200008f0 	.word	0x200008f0

08020e88 <__swbuf_r>:
 8020e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e8a:	460e      	mov	r6, r1
 8020e8c:	4614      	mov	r4, r2
 8020e8e:	4605      	mov	r5, r0
 8020e90:	b118      	cbz	r0, 8020e9a <__swbuf_r+0x12>
 8020e92:	6a03      	ldr	r3, [r0, #32]
 8020e94:	b90b      	cbnz	r3, 8020e9a <__swbuf_r+0x12>
 8020e96:	f7ff fd93 	bl	80209c0 <__sinit>
 8020e9a:	69a3      	ldr	r3, [r4, #24]
 8020e9c:	60a3      	str	r3, [r4, #8]
 8020e9e:	89a3      	ldrh	r3, [r4, #12]
 8020ea0:	071a      	lsls	r2, r3, #28
 8020ea2:	d525      	bpl.n	8020ef0 <__swbuf_r+0x68>
 8020ea4:	6923      	ldr	r3, [r4, #16]
 8020ea6:	b31b      	cbz	r3, 8020ef0 <__swbuf_r+0x68>
 8020ea8:	6823      	ldr	r3, [r4, #0]
 8020eaa:	6922      	ldr	r2, [r4, #16]
 8020eac:	1a98      	subs	r0, r3, r2
 8020eae:	6963      	ldr	r3, [r4, #20]
 8020eb0:	b2f6      	uxtb	r6, r6
 8020eb2:	4283      	cmp	r3, r0
 8020eb4:	4637      	mov	r7, r6
 8020eb6:	dc04      	bgt.n	8020ec2 <__swbuf_r+0x3a>
 8020eb8:	4621      	mov	r1, r4
 8020eba:	4628      	mov	r0, r5
 8020ebc:	f000 feac 	bl	8021c18 <_fflush_r>
 8020ec0:	b9e0      	cbnz	r0, 8020efc <__swbuf_r+0x74>
 8020ec2:	68a3      	ldr	r3, [r4, #8]
 8020ec4:	3b01      	subs	r3, #1
 8020ec6:	60a3      	str	r3, [r4, #8]
 8020ec8:	6823      	ldr	r3, [r4, #0]
 8020eca:	1c5a      	adds	r2, r3, #1
 8020ecc:	6022      	str	r2, [r4, #0]
 8020ece:	701e      	strb	r6, [r3, #0]
 8020ed0:	6962      	ldr	r2, [r4, #20]
 8020ed2:	1c43      	adds	r3, r0, #1
 8020ed4:	429a      	cmp	r2, r3
 8020ed6:	d004      	beq.n	8020ee2 <__swbuf_r+0x5a>
 8020ed8:	89a3      	ldrh	r3, [r4, #12]
 8020eda:	07db      	lsls	r3, r3, #31
 8020edc:	d506      	bpl.n	8020eec <__swbuf_r+0x64>
 8020ede:	2e0a      	cmp	r6, #10
 8020ee0:	d104      	bne.n	8020eec <__swbuf_r+0x64>
 8020ee2:	4621      	mov	r1, r4
 8020ee4:	4628      	mov	r0, r5
 8020ee6:	f000 fe97 	bl	8021c18 <_fflush_r>
 8020eea:	b938      	cbnz	r0, 8020efc <__swbuf_r+0x74>
 8020eec:	4638      	mov	r0, r7
 8020eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ef0:	4621      	mov	r1, r4
 8020ef2:	4628      	mov	r0, r5
 8020ef4:	f000 f806 	bl	8020f04 <__swsetup_r>
 8020ef8:	2800      	cmp	r0, #0
 8020efa:	d0d5      	beq.n	8020ea8 <__swbuf_r+0x20>
 8020efc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020f00:	e7f4      	b.n	8020eec <__swbuf_r+0x64>
	...

08020f04 <__swsetup_r>:
 8020f04:	b538      	push	{r3, r4, r5, lr}
 8020f06:	4b2a      	ldr	r3, [pc, #168]	; (8020fb0 <__swsetup_r+0xac>)
 8020f08:	4605      	mov	r5, r0
 8020f0a:	6818      	ldr	r0, [r3, #0]
 8020f0c:	460c      	mov	r4, r1
 8020f0e:	b118      	cbz	r0, 8020f18 <__swsetup_r+0x14>
 8020f10:	6a03      	ldr	r3, [r0, #32]
 8020f12:	b90b      	cbnz	r3, 8020f18 <__swsetup_r+0x14>
 8020f14:	f7ff fd54 	bl	80209c0 <__sinit>
 8020f18:	89a3      	ldrh	r3, [r4, #12]
 8020f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f1e:	0718      	lsls	r0, r3, #28
 8020f20:	d422      	bmi.n	8020f68 <__swsetup_r+0x64>
 8020f22:	06d9      	lsls	r1, r3, #27
 8020f24:	d407      	bmi.n	8020f36 <__swsetup_r+0x32>
 8020f26:	2309      	movs	r3, #9
 8020f28:	602b      	str	r3, [r5, #0]
 8020f2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020f2e:	81a3      	strh	r3, [r4, #12]
 8020f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020f34:	e034      	b.n	8020fa0 <__swsetup_r+0x9c>
 8020f36:	0758      	lsls	r0, r3, #29
 8020f38:	d512      	bpl.n	8020f60 <__swsetup_r+0x5c>
 8020f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020f3c:	b141      	cbz	r1, 8020f50 <__swsetup_r+0x4c>
 8020f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020f42:	4299      	cmp	r1, r3
 8020f44:	d002      	beq.n	8020f4c <__swsetup_r+0x48>
 8020f46:	4628      	mov	r0, r5
 8020f48:	f000 f960 	bl	802120c <_free_r>
 8020f4c:	2300      	movs	r3, #0
 8020f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8020f50:	89a3      	ldrh	r3, [r4, #12]
 8020f52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020f56:	81a3      	strh	r3, [r4, #12]
 8020f58:	2300      	movs	r3, #0
 8020f5a:	6063      	str	r3, [r4, #4]
 8020f5c:	6923      	ldr	r3, [r4, #16]
 8020f5e:	6023      	str	r3, [r4, #0]
 8020f60:	89a3      	ldrh	r3, [r4, #12]
 8020f62:	f043 0308 	orr.w	r3, r3, #8
 8020f66:	81a3      	strh	r3, [r4, #12]
 8020f68:	6923      	ldr	r3, [r4, #16]
 8020f6a:	b94b      	cbnz	r3, 8020f80 <__swsetup_r+0x7c>
 8020f6c:	89a3      	ldrh	r3, [r4, #12]
 8020f6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f76:	d003      	beq.n	8020f80 <__swsetup_r+0x7c>
 8020f78:	4621      	mov	r1, r4
 8020f7a:	4628      	mov	r0, r5
 8020f7c:	f000 feac 	bl	8021cd8 <__smakebuf_r>
 8020f80:	89a0      	ldrh	r0, [r4, #12]
 8020f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f86:	f010 0301 	ands.w	r3, r0, #1
 8020f8a:	d00a      	beq.n	8020fa2 <__swsetup_r+0x9e>
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	60a3      	str	r3, [r4, #8]
 8020f90:	6963      	ldr	r3, [r4, #20]
 8020f92:	425b      	negs	r3, r3
 8020f94:	61a3      	str	r3, [r4, #24]
 8020f96:	6923      	ldr	r3, [r4, #16]
 8020f98:	b943      	cbnz	r3, 8020fac <__swsetup_r+0xa8>
 8020f9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020f9e:	d1c4      	bne.n	8020f2a <__swsetup_r+0x26>
 8020fa0:	bd38      	pop	{r3, r4, r5, pc}
 8020fa2:	0781      	lsls	r1, r0, #30
 8020fa4:	bf58      	it	pl
 8020fa6:	6963      	ldrpl	r3, [r4, #20]
 8020fa8:	60a3      	str	r3, [r4, #8]
 8020faa:	e7f4      	b.n	8020f96 <__swsetup_r+0x92>
 8020fac:	2000      	movs	r0, #0
 8020fae:	e7f7      	b.n	8020fa0 <__swsetup_r+0x9c>
 8020fb0:	200008f0 	.word	0x200008f0

08020fb4 <memcmp>:
 8020fb4:	b510      	push	{r4, lr}
 8020fb6:	3901      	subs	r1, #1
 8020fb8:	4402      	add	r2, r0
 8020fba:	4290      	cmp	r0, r2
 8020fbc:	d101      	bne.n	8020fc2 <memcmp+0xe>
 8020fbe:	2000      	movs	r0, #0
 8020fc0:	e005      	b.n	8020fce <memcmp+0x1a>
 8020fc2:	7803      	ldrb	r3, [r0, #0]
 8020fc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020fc8:	42a3      	cmp	r3, r4
 8020fca:	d001      	beq.n	8020fd0 <memcmp+0x1c>
 8020fcc:	1b18      	subs	r0, r3, r4
 8020fce:	bd10      	pop	{r4, pc}
 8020fd0:	3001      	adds	r0, #1
 8020fd2:	e7f2      	b.n	8020fba <memcmp+0x6>

08020fd4 <memmove>:
 8020fd4:	4288      	cmp	r0, r1
 8020fd6:	b510      	push	{r4, lr}
 8020fd8:	eb01 0402 	add.w	r4, r1, r2
 8020fdc:	d902      	bls.n	8020fe4 <memmove+0x10>
 8020fde:	4284      	cmp	r4, r0
 8020fe0:	4623      	mov	r3, r4
 8020fe2:	d807      	bhi.n	8020ff4 <memmove+0x20>
 8020fe4:	1e43      	subs	r3, r0, #1
 8020fe6:	42a1      	cmp	r1, r4
 8020fe8:	d008      	beq.n	8020ffc <memmove+0x28>
 8020fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020ff2:	e7f8      	b.n	8020fe6 <memmove+0x12>
 8020ff4:	4402      	add	r2, r0
 8020ff6:	4601      	mov	r1, r0
 8020ff8:	428a      	cmp	r2, r1
 8020ffa:	d100      	bne.n	8020ffe <memmove+0x2a>
 8020ffc:	bd10      	pop	{r4, pc}
 8020ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021006:	e7f7      	b.n	8020ff8 <memmove+0x24>

08021008 <memset>:
 8021008:	4402      	add	r2, r0
 802100a:	4603      	mov	r3, r0
 802100c:	4293      	cmp	r3, r2
 802100e:	d100      	bne.n	8021012 <memset+0xa>
 8021010:	4770      	bx	lr
 8021012:	f803 1b01 	strb.w	r1, [r3], #1
 8021016:	e7f9      	b.n	802100c <memset+0x4>

08021018 <strchr>:
 8021018:	b2c9      	uxtb	r1, r1
 802101a:	4603      	mov	r3, r0
 802101c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021020:	b11a      	cbz	r2, 802102a <strchr+0x12>
 8021022:	428a      	cmp	r2, r1
 8021024:	d1f9      	bne.n	802101a <strchr+0x2>
 8021026:	4618      	mov	r0, r3
 8021028:	4770      	bx	lr
 802102a:	2900      	cmp	r1, #0
 802102c:	bf18      	it	ne
 802102e:	2300      	movne	r3, #0
 8021030:	e7f9      	b.n	8021026 <strchr+0xe>

08021032 <strncmp>:
 8021032:	b510      	push	{r4, lr}
 8021034:	b16a      	cbz	r2, 8021052 <strncmp+0x20>
 8021036:	3901      	subs	r1, #1
 8021038:	1884      	adds	r4, r0, r2
 802103a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802103e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021042:	429a      	cmp	r2, r3
 8021044:	d103      	bne.n	802104e <strncmp+0x1c>
 8021046:	42a0      	cmp	r0, r4
 8021048:	d001      	beq.n	802104e <strncmp+0x1c>
 802104a:	2a00      	cmp	r2, #0
 802104c:	d1f5      	bne.n	802103a <strncmp+0x8>
 802104e:	1ad0      	subs	r0, r2, r3
 8021050:	bd10      	pop	{r4, pc}
 8021052:	4610      	mov	r0, r2
 8021054:	e7fc      	b.n	8021050 <strncmp+0x1e>

08021056 <strstr>:
 8021056:	780a      	ldrb	r2, [r1, #0]
 8021058:	b570      	push	{r4, r5, r6, lr}
 802105a:	b96a      	cbnz	r2, 8021078 <strstr+0x22>
 802105c:	bd70      	pop	{r4, r5, r6, pc}
 802105e:	429a      	cmp	r2, r3
 8021060:	d109      	bne.n	8021076 <strstr+0x20>
 8021062:	460c      	mov	r4, r1
 8021064:	4605      	mov	r5, r0
 8021066:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802106a:	2b00      	cmp	r3, #0
 802106c:	d0f6      	beq.n	802105c <strstr+0x6>
 802106e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021072:	429e      	cmp	r6, r3
 8021074:	d0f7      	beq.n	8021066 <strstr+0x10>
 8021076:	3001      	adds	r0, #1
 8021078:	7803      	ldrb	r3, [r0, #0]
 802107a:	2b00      	cmp	r3, #0
 802107c:	d1ef      	bne.n	802105e <strstr+0x8>
 802107e:	4618      	mov	r0, r3
 8021080:	e7ec      	b.n	802105c <strstr+0x6>
	...

08021084 <_close_r>:
 8021084:	b538      	push	{r3, r4, r5, lr}
 8021086:	4d06      	ldr	r5, [pc, #24]	; (80210a0 <_close_r+0x1c>)
 8021088:	2300      	movs	r3, #0
 802108a:	4604      	mov	r4, r0
 802108c:	4608      	mov	r0, r1
 802108e:	602b      	str	r3, [r5, #0]
 8021090:	f7e3 fd65 	bl	8004b5e <_close>
 8021094:	1c43      	adds	r3, r0, #1
 8021096:	d102      	bne.n	802109e <_close_r+0x1a>
 8021098:	682b      	ldr	r3, [r5, #0]
 802109a:	b103      	cbz	r3, 802109e <_close_r+0x1a>
 802109c:	6023      	str	r3, [r4, #0]
 802109e:	bd38      	pop	{r3, r4, r5, pc}
 80210a0:	20017ac8 	.word	0x20017ac8

080210a4 <_lseek_r>:
 80210a4:	b538      	push	{r3, r4, r5, lr}
 80210a6:	4d07      	ldr	r5, [pc, #28]	; (80210c4 <_lseek_r+0x20>)
 80210a8:	4604      	mov	r4, r0
 80210aa:	4608      	mov	r0, r1
 80210ac:	4611      	mov	r1, r2
 80210ae:	2200      	movs	r2, #0
 80210b0:	602a      	str	r2, [r5, #0]
 80210b2:	461a      	mov	r2, r3
 80210b4:	f7e3 fd7a 	bl	8004bac <_lseek>
 80210b8:	1c43      	adds	r3, r0, #1
 80210ba:	d102      	bne.n	80210c2 <_lseek_r+0x1e>
 80210bc:	682b      	ldr	r3, [r5, #0]
 80210be:	b103      	cbz	r3, 80210c2 <_lseek_r+0x1e>
 80210c0:	6023      	str	r3, [r4, #0]
 80210c2:	bd38      	pop	{r3, r4, r5, pc}
 80210c4:	20017ac8 	.word	0x20017ac8

080210c8 <_read_r>:
 80210c8:	b538      	push	{r3, r4, r5, lr}
 80210ca:	4d07      	ldr	r5, [pc, #28]	; (80210e8 <_read_r+0x20>)
 80210cc:	4604      	mov	r4, r0
 80210ce:	4608      	mov	r0, r1
 80210d0:	4611      	mov	r1, r2
 80210d2:	2200      	movs	r2, #0
 80210d4:	602a      	str	r2, [r5, #0]
 80210d6:	461a      	mov	r2, r3
 80210d8:	f7e3 fd08 	bl	8004aec <_read>
 80210dc:	1c43      	adds	r3, r0, #1
 80210de:	d102      	bne.n	80210e6 <_read_r+0x1e>
 80210e0:	682b      	ldr	r3, [r5, #0]
 80210e2:	b103      	cbz	r3, 80210e6 <_read_r+0x1e>
 80210e4:	6023      	str	r3, [r4, #0]
 80210e6:	bd38      	pop	{r3, r4, r5, pc}
 80210e8:	20017ac8 	.word	0x20017ac8

080210ec <_sbrk_r>:
 80210ec:	b538      	push	{r3, r4, r5, lr}
 80210ee:	4d06      	ldr	r5, [pc, #24]	; (8021108 <_sbrk_r+0x1c>)
 80210f0:	2300      	movs	r3, #0
 80210f2:	4604      	mov	r4, r0
 80210f4:	4608      	mov	r0, r1
 80210f6:	602b      	str	r3, [r5, #0]
 80210f8:	f7e3 fd66 	bl	8004bc8 <_sbrk>
 80210fc:	1c43      	adds	r3, r0, #1
 80210fe:	d102      	bne.n	8021106 <_sbrk_r+0x1a>
 8021100:	682b      	ldr	r3, [r5, #0]
 8021102:	b103      	cbz	r3, 8021106 <_sbrk_r+0x1a>
 8021104:	6023      	str	r3, [r4, #0]
 8021106:	bd38      	pop	{r3, r4, r5, pc}
 8021108:	20017ac8 	.word	0x20017ac8

0802110c <_write_r>:
 802110c:	b538      	push	{r3, r4, r5, lr}
 802110e:	4d07      	ldr	r5, [pc, #28]	; (802112c <_write_r+0x20>)
 8021110:	4604      	mov	r4, r0
 8021112:	4608      	mov	r0, r1
 8021114:	4611      	mov	r1, r2
 8021116:	2200      	movs	r2, #0
 8021118:	602a      	str	r2, [r5, #0]
 802111a:	461a      	mov	r2, r3
 802111c:	f7e3 fd03 	bl	8004b26 <_write>
 8021120:	1c43      	adds	r3, r0, #1
 8021122:	d102      	bne.n	802112a <_write_r+0x1e>
 8021124:	682b      	ldr	r3, [r5, #0]
 8021126:	b103      	cbz	r3, 802112a <_write_r+0x1e>
 8021128:	6023      	str	r3, [r4, #0]
 802112a:	bd38      	pop	{r3, r4, r5, pc}
 802112c:	20017ac8 	.word	0x20017ac8

08021130 <__errno>:
 8021130:	4b01      	ldr	r3, [pc, #4]	; (8021138 <__errno+0x8>)
 8021132:	6818      	ldr	r0, [r3, #0]
 8021134:	4770      	bx	lr
 8021136:	bf00      	nop
 8021138:	200008f0 	.word	0x200008f0

0802113c <__libc_init_array>:
 802113c:	b570      	push	{r4, r5, r6, lr}
 802113e:	4d0d      	ldr	r5, [pc, #52]	; (8021174 <__libc_init_array+0x38>)
 8021140:	4c0d      	ldr	r4, [pc, #52]	; (8021178 <__libc_init_array+0x3c>)
 8021142:	1b64      	subs	r4, r4, r5
 8021144:	10a4      	asrs	r4, r4, #2
 8021146:	2600      	movs	r6, #0
 8021148:	42a6      	cmp	r6, r4
 802114a:	d109      	bne.n	8021160 <__libc_init_array+0x24>
 802114c:	4d0b      	ldr	r5, [pc, #44]	; (802117c <__libc_init_array+0x40>)
 802114e:	4c0c      	ldr	r4, [pc, #48]	; (8021180 <__libc_init_array+0x44>)
 8021150:	f000 febe 	bl	8021ed0 <_init>
 8021154:	1b64      	subs	r4, r4, r5
 8021156:	10a4      	asrs	r4, r4, #2
 8021158:	2600      	movs	r6, #0
 802115a:	42a6      	cmp	r6, r4
 802115c:	d105      	bne.n	802116a <__libc_init_array+0x2e>
 802115e:	bd70      	pop	{r4, r5, r6, pc}
 8021160:	f855 3b04 	ldr.w	r3, [r5], #4
 8021164:	4798      	blx	r3
 8021166:	3601      	adds	r6, #1
 8021168:	e7ee      	b.n	8021148 <__libc_init_array+0xc>
 802116a:	f855 3b04 	ldr.w	r3, [r5], #4
 802116e:	4798      	blx	r3
 8021170:	3601      	adds	r6, #1
 8021172:	e7f2      	b.n	802115a <__libc_init_array+0x1e>
 8021174:	08023638 	.word	0x08023638
 8021178:	08023638 	.word	0x08023638
 802117c:	08023638 	.word	0x08023638
 8021180:	08023650 	.word	0x08023650

08021184 <__retarget_lock_init_recursive>:
 8021184:	4770      	bx	lr

08021186 <__retarget_lock_acquire_recursive>:
 8021186:	4770      	bx	lr

08021188 <__retarget_lock_release_recursive>:
 8021188:	4770      	bx	lr

0802118a <strcpy>:
 802118a:	4603      	mov	r3, r0
 802118c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021190:	f803 2b01 	strb.w	r2, [r3], #1
 8021194:	2a00      	cmp	r2, #0
 8021196:	d1f9      	bne.n	802118c <strcpy+0x2>
 8021198:	4770      	bx	lr

0802119a <memcpy>:
 802119a:	440a      	add	r2, r1
 802119c:	4291      	cmp	r1, r2
 802119e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80211a2:	d100      	bne.n	80211a6 <memcpy+0xc>
 80211a4:	4770      	bx	lr
 80211a6:	b510      	push	{r4, lr}
 80211a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80211ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80211b0:	4291      	cmp	r1, r2
 80211b2:	d1f9      	bne.n	80211a8 <memcpy+0xe>
 80211b4:	bd10      	pop	{r4, pc}
	...

080211b8 <__assert_func>:
 80211b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80211ba:	4614      	mov	r4, r2
 80211bc:	461a      	mov	r2, r3
 80211be:	4b09      	ldr	r3, [pc, #36]	; (80211e4 <__assert_func+0x2c>)
 80211c0:	681b      	ldr	r3, [r3, #0]
 80211c2:	4605      	mov	r5, r0
 80211c4:	68d8      	ldr	r0, [r3, #12]
 80211c6:	b14c      	cbz	r4, 80211dc <__assert_func+0x24>
 80211c8:	4b07      	ldr	r3, [pc, #28]	; (80211e8 <__assert_func+0x30>)
 80211ca:	9100      	str	r1, [sp, #0]
 80211cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80211d0:	4906      	ldr	r1, [pc, #24]	; (80211ec <__assert_func+0x34>)
 80211d2:	462b      	mov	r3, r5
 80211d4:	f000 fd48 	bl	8021c68 <fiprintf>
 80211d8:	f000 fddc 	bl	8021d94 <abort>
 80211dc:	4b04      	ldr	r3, [pc, #16]	; (80211f0 <__assert_func+0x38>)
 80211de:	461c      	mov	r4, r3
 80211e0:	e7f3      	b.n	80211ca <__assert_func+0x12>
 80211e2:	bf00      	nop
 80211e4:	200008f0 	.word	0x200008f0
 80211e8:	080235be 	.word	0x080235be
 80211ec:	080235cb 	.word	0x080235cb
 80211f0:	080235f9 	.word	0x080235f9

080211f4 <__env_lock>:
 80211f4:	4801      	ldr	r0, [pc, #4]	; (80211fc <__env_lock+0x8>)
 80211f6:	f7ff bfc6 	b.w	8021186 <__retarget_lock_acquire_recursive>
 80211fa:	bf00      	nop
 80211fc:	20017acc 	.word	0x20017acc

08021200 <__env_unlock>:
 8021200:	4801      	ldr	r0, [pc, #4]	; (8021208 <__env_unlock+0x8>)
 8021202:	f7ff bfc1 	b.w	8021188 <__retarget_lock_release_recursive>
 8021206:	bf00      	nop
 8021208:	20017acc 	.word	0x20017acc

0802120c <_free_r>:
 802120c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802120e:	2900      	cmp	r1, #0
 8021210:	d044      	beq.n	802129c <_free_r+0x90>
 8021212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021216:	9001      	str	r0, [sp, #4]
 8021218:	2b00      	cmp	r3, #0
 802121a:	f1a1 0404 	sub.w	r4, r1, #4
 802121e:	bfb8      	it	lt
 8021220:	18e4      	addlt	r4, r4, r3
 8021222:	f7ff fa15 	bl	8020650 <__malloc_lock>
 8021226:	4a1e      	ldr	r2, [pc, #120]	; (80212a0 <_free_r+0x94>)
 8021228:	9801      	ldr	r0, [sp, #4]
 802122a:	6813      	ldr	r3, [r2, #0]
 802122c:	b933      	cbnz	r3, 802123c <_free_r+0x30>
 802122e:	6063      	str	r3, [r4, #4]
 8021230:	6014      	str	r4, [r2, #0]
 8021232:	b003      	add	sp, #12
 8021234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021238:	f7ff ba10 	b.w	802065c <__malloc_unlock>
 802123c:	42a3      	cmp	r3, r4
 802123e:	d908      	bls.n	8021252 <_free_r+0x46>
 8021240:	6825      	ldr	r5, [r4, #0]
 8021242:	1961      	adds	r1, r4, r5
 8021244:	428b      	cmp	r3, r1
 8021246:	bf01      	itttt	eq
 8021248:	6819      	ldreq	r1, [r3, #0]
 802124a:	685b      	ldreq	r3, [r3, #4]
 802124c:	1949      	addeq	r1, r1, r5
 802124e:	6021      	streq	r1, [r4, #0]
 8021250:	e7ed      	b.n	802122e <_free_r+0x22>
 8021252:	461a      	mov	r2, r3
 8021254:	685b      	ldr	r3, [r3, #4]
 8021256:	b10b      	cbz	r3, 802125c <_free_r+0x50>
 8021258:	42a3      	cmp	r3, r4
 802125a:	d9fa      	bls.n	8021252 <_free_r+0x46>
 802125c:	6811      	ldr	r1, [r2, #0]
 802125e:	1855      	adds	r5, r2, r1
 8021260:	42a5      	cmp	r5, r4
 8021262:	d10b      	bne.n	802127c <_free_r+0x70>
 8021264:	6824      	ldr	r4, [r4, #0]
 8021266:	4421      	add	r1, r4
 8021268:	1854      	adds	r4, r2, r1
 802126a:	42a3      	cmp	r3, r4
 802126c:	6011      	str	r1, [r2, #0]
 802126e:	d1e0      	bne.n	8021232 <_free_r+0x26>
 8021270:	681c      	ldr	r4, [r3, #0]
 8021272:	685b      	ldr	r3, [r3, #4]
 8021274:	6053      	str	r3, [r2, #4]
 8021276:	440c      	add	r4, r1
 8021278:	6014      	str	r4, [r2, #0]
 802127a:	e7da      	b.n	8021232 <_free_r+0x26>
 802127c:	d902      	bls.n	8021284 <_free_r+0x78>
 802127e:	230c      	movs	r3, #12
 8021280:	6003      	str	r3, [r0, #0]
 8021282:	e7d6      	b.n	8021232 <_free_r+0x26>
 8021284:	6825      	ldr	r5, [r4, #0]
 8021286:	1961      	adds	r1, r4, r5
 8021288:	428b      	cmp	r3, r1
 802128a:	bf04      	itt	eq
 802128c:	6819      	ldreq	r1, [r3, #0]
 802128e:	685b      	ldreq	r3, [r3, #4]
 8021290:	6063      	str	r3, [r4, #4]
 8021292:	bf04      	itt	eq
 8021294:	1949      	addeq	r1, r1, r5
 8021296:	6021      	streq	r1, [r4, #0]
 8021298:	6054      	str	r4, [r2, #4]
 802129a:	e7ca      	b.n	8021232 <_free_r+0x26>
 802129c:	b003      	add	sp, #12
 802129e:	bd30      	pop	{r4, r5, pc}
 80212a0:	20017984 	.word	0x20017984

080212a4 <_malloc_usable_size_r>:
 80212a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80212a8:	1f18      	subs	r0, r3, #4
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	bfbc      	itt	lt
 80212ae:	580b      	ldrlt	r3, [r1, r0]
 80212b0:	18c0      	addlt	r0, r0, r3
 80212b2:	4770      	bx	lr

080212b4 <__ssputs_r>:
 80212b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212b8:	688e      	ldr	r6, [r1, #8]
 80212ba:	461f      	mov	r7, r3
 80212bc:	42be      	cmp	r6, r7
 80212be:	680b      	ldr	r3, [r1, #0]
 80212c0:	4682      	mov	sl, r0
 80212c2:	460c      	mov	r4, r1
 80212c4:	4690      	mov	r8, r2
 80212c6:	d82c      	bhi.n	8021322 <__ssputs_r+0x6e>
 80212c8:	898a      	ldrh	r2, [r1, #12]
 80212ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80212ce:	d026      	beq.n	802131e <__ssputs_r+0x6a>
 80212d0:	6965      	ldr	r5, [r4, #20]
 80212d2:	6909      	ldr	r1, [r1, #16]
 80212d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80212d8:	eba3 0901 	sub.w	r9, r3, r1
 80212dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80212e0:	1c7b      	adds	r3, r7, #1
 80212e2:	444b      	add	r3, r9
 80212e4:	106d      	asrs	r5, r5, #1
 80212e6:	429d      	cmp	r5, r3
 80212e8:	bf38      	it	cc
 80212ea:	461d      	movcc	r5, r3
 80212ec:	0553      	lsls	r3, r2, #21
 80212ee:	d527      	bpl.n	8021340 <__ssputs_r+0x8c>
 80212f0:	4629      	mov	r1, r5
 80212f2:	f7ff f92d 	bl	8020550 <_malloc_r>
 80212f6:	4606      	mov	r6, r0
 80212f8:	b360      	cbz	r0, 8021354 <__ssputs_r+0xa0>
 80212fa:	6921      	ldr	r1, [r4, #16]
 80212fc:	464a      	mov	r2, r9
 80212fe:	f7ff ff4c 	bl	802119a <memcpy>
 8021302:	89a3      	ldrh	r3, [r4, #12]
 8021304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802130c:	81a3      	strh	r3, [r4, #12]
 802130e:	6126      	str	r6, [r4, #16]
 8021310:	6165      	str	r5, [r4, #20]
 8021312:	444e      	add	r6, r9
 8021314:	eba5 0509 	sub.w	r5, r5, r9
 8021318:	6026      	str	r6, [r4, #0]
 802131a:	60a5      	str	r5, [r4, #8]
 802131c:	463e      	mov	r6, r7
 802131e:	42be      	cmp	r6, r7
 8021320:	d900      	bls.n	8021324 <__ssputs_r+0x70>
 8021322:	463e      	mov	r6, r7
 8021324:	6820      	ldr	r0, [r4, #0]
 8021326:	4632      	mov	r2, r6
 8021328:	4641      	mov	r1, r8
 802132a:	f7ff fe53 	bl	8020fd4 <memmove>
 802132e:	68a3      	ldr	r3, [r4, #8]
 8021330:	1b9b      	subs	r3, r3, r6
 8021332:	60a3      	str	r3, [r4, #8]
 8021334:	6823      	ldr	r3, [r4, #0]
 8021336:	4433      	add	r3, r6
 8021338:	6023      	str	r3, [r4, #0]
 802133a:	2000      	movs	r0, #0
 802133c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021340:	462a      	mov	r2, r5
 8021342:	f7ff fa05 	bl	8020750 <_realloc_r>
 8021346:	4606      	mov	r6, r0
 8021348:	2800      	cmp	r0, #0
 802134a:	d1e0      	bne.n	802130e <__ssputs_r+0x5a>
 802134c:	6921      	ldr	r1, [r4, #16]
 802134e:	4650      	mov	r0, sl
 8021350:	f7ff ff5c 	bl	802120c <_free_r>
 8021354:	230c      	movs	r3, #12
 8021356:	f8ca 3000 	str.w	r3, [sl]
 802135a:	89a3      	ldrh	r3, [r4, #12]
 802135c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021360:	81a3      	strh	r3, [r4, #12]
 8021362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021366:	e7e9      	b.n	802133c <__ssputs_r+0x88>

08021368 <_svfiprintf_r>:
 8021368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802136c:	4698      	mov	r8, r3
 802136e:	898b      	ldrh	r3, [r1, #12]
 8021370:	061b      	lsls	r3, r3, #24
 8021372:	b09d      	sub	sp, #116	; 0x74
 8021374:	4607      	mov	r7, r0
 8021376:	460d      	mov	r5, r1
 8021378:	4614      	mov	r4, r2
 802137a:	d50e      	bpl.n	802139a <_svfiprintf_r+0x32>
 802137c:	690b      	ldr	r3, [r1, #16]
 802137e:	b963      	cbnz	r3, 802139a <_svfiprintf_r+0x32>
 8021380:	2140      	movs	r1, #64	; 0x40
 8021382:	f7ff f8e5 	bl	8020550 <_malloc_r>
 8021386:	6028      	str	r0, [r5, #0]
 8021388:	6128      	str	r0, [r5, #16]
 802138a:	b920      	cbnz	r0, 8021396 <_svfiprintf_r+0x2e>
 802138c:	230c      	movs	r3, #12
 802138e:	603b      	str	r3, [r7, #0]
 8021390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021394:	e0d0      	b.n	8021538 <_svfiprintf_r+0x1d0>
 8021396:	2340      	movs	r3, #64	; 0x40
 8021398:	616b      	str	r3, [r5, #20]
 802139a:	2300      	movs	r3, #0
 802139c:	9309      	str	r3, [sp, #36]	; 0x24
 802139e:	2320      	movs	r3, #32
 80213a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80213a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80213a8:	2330      	movs	r3, #48	; 0x30
 80213aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8021550 <_svfiprintf_r+0x1e8>
 80213ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80213b2:	f04f 0901 	mov.w	r9, #1
 80213b6:	4623      	mov	r3, r4
 80213b8:	469a      	mov	sl, r3
 80213ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80213be:	b10a      	cbz	r2, 80213c4 <_svfiprintf_r+0x5c>
 80213c0:	2a25      	cmp	r2, #37	; 0x25
 80213c2:	d1f9      	bne.n	80213b8 <_svfiprintf_r+0x50>
 80213c4:	ebba 0b04 	subs.w	fp, sl, r4
 80213c8:	d00b      	beq.n	80213e2 <_svfiprintf_r+0x7a>
 80213ca:	465b      	mov	r3, fp
 80213cc:	4622      	mov	r2, r4
 80213ce:	4629      	mov	r1, r5
 80213d0:	4638      	mov	r0, r7
 80213d2:	f7ff ff6f 	bl	80212b4 <__ssputs_r>
 80213d6:	3001      	adds	r0, #1
 80213d8:	f000 80a9 	beq.w	802152e <_svfiprintf_r+0x1c6>
 80213dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80213de:	445a      	add	r2, fp
 80213e0:	9209      	str	r2, [sp, #36]	; 0x24
 80213e2:	f89a 3000 	ldrb.w	r3, [sl]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	f000 80a1 	beq.w	802152e <_svfiprintf_r+0x1c6>
 80213ec:	2300      	movs	r3, #0
 80213ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80213f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80213f6:	f10a 0a01 	add.w	sl, sl, #1
 80213fa:	9304      	str	r3, [sp, #16]
 80213fc:	9307      	str	r3, [sp, #28]
 80213fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021402:	931a      	str	r3, [sp, #104]	; 0x68
 8021404:	4654      	mov	r4, sl
 8021406:	2205      	movs	r2, #5
 8021408:	f814 1b01 	ldrb.w	r1, [r4], #1
 802140c:	4850      	ldr	r0, [pc, #320]	; (8021550 <_svfiprintf_r+0x1e8>)
 802140e:	f7de ff2f 	bl	8000270 <memchr>
 8021412:	9a04      	ldr	r2, [sp, #16]
 8021414:	b9d8      	cbnz	r0, 802144e <_svfiprintf_r+0xe6>
 8021416:	06d0      	lsls	r0, r2, #27
 8021418:	bf44      	itt	mi
 802141a:	2320      	movmi	r3, #32
 802141c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021420:	0711      	lsls	r1, r2, #28
 8021422:	bf44      	itt	mi
 8021424:	232b      	movmi	r3, #43	; 0x2b
 8021426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802142a:	f89a 3000 	ldrb.w	r3, [sl]
 802142e:	2b2a      	cmp	r3, #42	; 0x2a
 8021430:	d015      	beq.n	802145e <_svfiprintf_r+0xf6>
 8021432:	9a07      	ldr	r2, [sp, #28]
 8021434:	4654      	mov	r4, sl
 8021436:	2000      	movs	r0, #0
 8021438:	f04f 0c0a 	mov.w	ip, #10
 802143c:	4621      	mov	r1, r4
 802143e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021442:	3b30      	subs	r3, #48	; 0x30
 8021444:	2b09      	cmp	r3, #9
 8021446:	d94d      	bls.n	80214e4 <_svfiprintf_r+0x17c>
 8021448:	b1b0      	cbz	r0, 8021478 <_svfiprintf_r+0x110>
 802144a:	9207      	str	r2, [sp, #28]
 802144c:	e014      	b.n	8021478 <_svfiprintf_r+0x110>
 802144e:	eba0 0308 	sub.w	r3, r0, r8
 8021452:	fa09 f303 	lsl.w	r3, r9, r3
 8021456:	4313      	orrs	r3, r2
 8021458:	9304      	str	r3, [sp, #16]
 802145a:	46a2      	mov	sl, r4
 802145c:	e7d2      	b.n	8021404 <_svfiprintf_r+0x9c>
 802145e:	9b03      	ldr	r3, [sp, #12]
 8021460:	1d19      	adds	r1, r3, #4
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	9103      	str	r1, [sp, #12]
 8021466:	2b00      	cmp	r3, #0
 8021468:	bfbb      	ittet	lt
 802146a:	425b      	neglt	r3, r3
 802146c:	f042 0202 	orrlt.w	r2, r2, #2
 8021470:	9307      	strge	r3, [sp, #28]
 8021472:	9307      	strlt	r3, [sp, #28]
 8021474:	bfb8      	it	lt
 8021476:	9204      	strlt	r2, [sp, #16]
 8021478:	7823      	ldrb	r3, [r4, #0]
 802147a:	2b2e      	cmp	r3, #46	; 0x2e
 802147c:	d10c      	bne.n	8021498 <_svfiprintf_r+0x130>
 802147e:	7863      	ldrb	r3, [r4, #1]
 8021480:	2b2a      	cmp	r3, #42	; 0x2a
 8021482:	d134      	bne.n	80214ee <_svfiprintf_r+0x186>
 8021484:	9b03      	ldr	r3, [sp, #12]
 8021486:	1d1a      	adds	r2, r3, #4
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	9203      	str	r2, [sp, #12]
 802148c:	2b00      	cmp	r3, #0
 802148e:	bfb8      	it	lt
 8021490:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021494:	3402      	adds	r4, #2
 8021496:	9305      	str	r3, [sp, #20]
 8021498:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8021560 <_svfiprintf_r+0x1f8>
 802149c:	7821      	ldrb	r1, [r4, #0]
 802149e:	2203      	movs	r2, #3
 80214a0:	4650      	mov	r0, sl
 80214a2:	f7de fee5 	bl	8000270 <memchr>
 80214a6:	b138      	cbz	r0, 80214b8 <_svfiprintf_r+0x150>
 80214a8:	9b04      	ldr	r3, [sp, #16]
 80214aa:	eba0 000a 	sub.w	r0, r0, sl
 80214ae:	2240      	movs	r2, #64	; 0x40
 80214b0:	4082      	lsls	r2, r0
 80214b2:	4313      	orrs	r3, r2
 80214b4:	3401      	adds	r4, #1
 80214b6:	9304      	str	r3, [sp, #16]
 80214b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80214bc:	4825      	ldr	r0, [pc, #148]	; (8021554 <_svfiprintf_r+0x1ec>)
 80214be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80214c2:	2206      	movs	r2, #6
 80214c4:	f7de fed4 	bl	8000270 <memchr>
 80214c8:	2800      	cmp	r0, #0
 80214ca:	d038      	beq.n	802153e <_svfiprintf_r+0x1d6>
 80214cc:	4b22      	ldr	r3, [pc, #136]	; (8021558 <_svfiprintf_r+0x1f0>)
 80214ce:	bb1b      	cbnz	r3, 8021518 <_svfiprintf_r+0x1b0>
 80214d0:	9b03      	ldr	r3, [sp, #12]
 80214d2:	3307      	adds	r3, #7
 80214d4:	f023 0307 	bic.w	r3, r3, #7
 80214d8:	3308      	adds	r3, #8
 80214da:	9303      	str	r3, [sp, #12]
 80214dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214de:	4433      	add	r3, r6
 80214e0:	9309      	str	r3, [sp, #36]	; 0x24
 80214e2:	e768      	b.n	80213b6 <_svfiprintf_r+0x4e>
 80214e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80214e8:	460c      	mov	r4, r1
 80214ea:	2001      	movs	r0, #1
 80214ec:	e7a6      	b.n	802143c <_svfiprintf_r+0xd4>
 80214ee:	2300      	movs	r3, #0
 80214f0:	3401      	adds	r4, #1
 80214f2:	9305      	str	r3, [sp, #20]
 80214f4:	4619      	mov	r1, r3
 80214f6:	f04f 0c0a 	mov.w	ip, #10
 80214fa:	4620      	mov	r0, r4
 80214fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021500:	3a30      	subs	r2, #48	; 0x30
 8021502:	2a09      	cmp	r2, #9
 8021504:	d903      	bls.n	802150e <_svfiprintf_r+0x1a6>
 8021506:	2b00      	cmp	r3, #0
 8021508:	d0c6      	beq.n	8021498 <_svfiprintf_r+0x130>
 802150a:	9105      	str	r1, [sp, #20]
 802150c:	e7c4      	b.n	8021498 <_svfiprintf_r+0x130>
 802150e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021512:	4604      	mov	r4, r0
 8021514:	2301      	movs	r3, #1
 8021516:	e7f0      	b.n	80214fa <_svfiprintf_r+0x192>
 8021518:	ab03      	add	r3, sp, #12
 802151a:	9300      	str	r3, [sp, #0]
 802151c:	462a      	mov	r2, r5
 802151e:	4b0f      	ldr	r3, [pc, #60]	; (802155c <_svfiprintf_r+0x1f4>)
 8021520:	a904      	add	r1, sp, #16
 8021522:	4638      	mov	r0, r7
 8021524:	f3af 8000 	nop.w
 8021528:	1c42      	adds	r2, r0, #1
 802152a:	4606      	mov	r6, r0
 802152c:	d1d6      	bne.n	80214dc <_svfiprintf_r+0x174>
 802152e:	89ab      	ldrh	r3, [r5, #12]
 8021530:	065b      	lsls	r3, r3, #25
 8021532:	f53f af2d 	bmi.w	8021390 <_svfiprintf_r+0x28>
 8021536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021538:	b01d      	add	sp, #116	; 0x74
 802153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802153e:	ab03      	add	r3, sp, #12
 8021540:	9300      	str	r3, [sp, #0]
 8021542:	462a      	mov	r2, r5
 8021544:	4b05      	ldr	r3, [pc, #20]	; (802155c <_svfiprintf_r+0x1f4>)
 8021546:	a904      	add	r1, sp, #16
 8021548:	4638      	mov	r0, r7
 802154a:	f000 f9bd 	bl	80218c8 <_printf_i>
 802154e:	e7eb      	b.n	8021528 <_svfiprintf_r+0x1c0>
 8021550:	080235fa 	.word	0x080235fa
 8021554:	08023604 	.word	0x08023604
 8021558:	00000000 	.word	0x00000000
 802155c:	080212b5 	.word	0x080212b5
 8021560:	08023600 	.word	0x08023600

08021564 <__sfputc_r>:
 8021564:	6893      	ldr	r3, [r2, #8]
 8021566:	3b01      	subs	r3, #1
 8021568:	2b00      	cmp	r3, #0
 802156a:	b410      	push	{r4}
 802156c:	6093      	str	r3, [r2, #8]
 802156e:	da08      	bge.n	8021582 <__sfputc_r+0x1e>
 8021570:	6994      	ldr	r4, [r2, #24]
 8021572:	42a3      	cmp	r3, r4
 8021574:	db01      	blt.n	802157a <__sfputc_r+0x16>
 8021576:	290a      	cmp	r1, #10
 8021578:	d103      	bne.n	8021582 <__sfputc_r+0x1e>
 802157a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802157e:	f7ff bc83 	b.w	8020e88 <__swbuf_r>
 8021582:	6813      	ldr	r3, [r2, #0]
 8021584:	1c58      	adds	r0, r3, #1
 8021586:	6010      	str	r0, [r2, #0]
 8021588:	7019      	strb	r1, [r3, #0]
 802158a:	4608      	mov	r0, r1
 802158c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021590:	4770      	bx	lr

08021592 <__sfputs_r>:
 8021592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021594:	4606      	mov	r6, r0
 8021596:	460f      	mov	r7, r1
 8021598:	4614      	mov	r4, r2
 802159a:	18d5      	adds	r5, r2, r3
 802159c:	42ac      	cmp	r4, r5
 802159e:	d101      	bne.n	80215a4 <__sfputs_r+0x12>
 80215a0:	2000      	movs	r0, #0
 80215a2:	e007      	b.n	80215b4 <__sfputs_r+0x22>
 80215a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215a8:	463a      	mov	r2, r7
 80215aa:	4630      	mov	r0, r6
 80215ac:	f7ff ffda 	bl	8021564 <__sfputc_r>
 80215b0:	1c43      	adds	r3, r0, #1
 80215b2:	d1f3      	bne.n	802159c <__sfputs_r+0xa>
 80215b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080215b8 <_vfiprintf_r>:
 80215b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215bc:	460d      	mov	r5, r1
 80215be:	b09d      	sub	sp, #116	; 0x74
 80215c0:	4614      	mov	r4, r2
 80215c2:	4698      	mov	r8, r3
 80215c4:	4606      	mov	r6, r0
 80215c6:	b118      	cbz	r0, 80215d0 <_vfiprintf_r+0x18>
 80215c8:	6a03      	ldr	r3, [r0, #32]
 80215ca:	b90b      	cbnz	r3, 80215d0 <_vfiprintf_r+0x18>
 80215cc:	f7ff f9f8 	bl	80209c0 <__sinit>
 80215d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215d2:	07d9      	lsls	r1, r3, #31
 80215d4:	d405      	bmi.n	80215e2 <_vfiprintf_r+0x2a>
 80215d6:	89ab      	ldrh	r3, [r5, #12]
 80215d8:	059a      	lsls	r2, r3, #22
 80215da:	d402      	bmi.n	80215e2 <_vfiprintf_r+0x2a>
 80215dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215de:	f7ff fdd2 	bl	8021186 <__retarget_lock_acquire_recursive>
 80215e2:	89ab      	ldrh	r3, [r5, #12]
 80215e4:	071b      	lsls	r3, r3, #28
 80215e6:	d501      	bpl.n	80215ec <_vfiprintf_r+0x34>
 80215e8:	692b      	ldr	r3, [r5, #16]
 80215ea:	b99b      	cbnz	r3, 8021614 <_vfiprintf_r+0x5c>
 80215ec:	4629      	mov	r1, r5
 80215ee:	4630      	mov	r0, r6
 80215f0:	f7ff fc88 	bl	8020f04 <__swsetup_r>
 80215f4:	b170      	cbz	r0, 8021614 <_vfiprintf_r+0x5c>
 80215f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215f8:	07dc      	lsls	r4, r3, #31
 80215fa:	d504      	bpl.n	8021606 <_vfiprintf_r+0x4e>
 80215fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021600:	b01d      	add	sp, #116	; 0x74
 8021602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021606:	89ab      	ldrh	r3, [r5, #12]
 8021608:	0598      	lsls	r0, r3, #22
 802160a:	d4f7      	bmi.n	80215fc <_vfiprintf_r+0x44>
 802160c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802160e:	f7ff fdbb 	bl	8021188 <__retarget_lock_release_recursive>
 8021612:	e7f3      	b.n	80215fc <_vfiprintf_r+0x44>
 8021614:	2300      	movs	r3, #0
 8021616:	9309      	str	r3, [sp, #36]	; 0x24
 8021618:	2320      	movs	r3, #32
 802161a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802161e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021622:	2330      	movs	r3, #48	; 0x30
 8021624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80217d8 <_vfiprintf_r+0x220>
 8021628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802162c:	f04f 0901 	mov.w	r9, #1
 8021630:	4623      	mov	r3, r4
 8021632:	469a      	mov	sl, r3
 8021634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021638:	b10a      	cbz	r2, 802163e <_vfiprintf_r+0x86>
 802163a:	2a25      	cmp	r2, #37	; 0x25
 802163c:	d1f9      	bne.n	8021632 <_vfiprintf_r+0x7a>
 802163e:	ebba 0b04 	subs.w	fp, sl, r4
 8021642:	d00b      	beq.n	802165c <_vfiprintf_r+0xa4>
 8021644:	465b      	mov	r3, fp
 8021646:	4622      	mov	r2, r4
 8021648:	4629      	mov	r1, r5
 802164a:	4630      	mov	r0, r6
 802164c:	f7ff ffa1 	bl	8021592 <__sfputs_r>
 8021650:	3001      	adds	r0, #1
 8021652:	f000 80a9 	beq.w	80217a8 <_vfiprintf_r+0x1f0>
 8021656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021658:	445a      	add	r2, fp
 802165a:	9209      	str	r2, [sp, #36]	; 0x24
 802165c:	f89a 3000 	ldrb.w	r3, [sl]
 8021660:	2b00      	cmp	r3, #0
 8021662:	f000 80a1 	beq.w	80217a8 <_vfiprintf_r+0x1f0>
 8021666:	2300      	movs	r3, #0
 8021668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802166c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021670:	f10a 0a01 	add.w	sl, sl, #1
 8021674:	9304      	str	r3, [sp, #16]
 8021676:	9307      	str	r3, [sp, #28]
 8021678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802167c:	931a      	str	r3, [sp, #104]	; 0x68
 802167e:	4654      	mov	r4, sl
 8021680:	2205      	movs	r2, #5
 8021682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021686:	4854      	ldr	r0, [pc, #336]	; (80217d8 <_vfiprintf_r+0x220>)
 8021688:	f7de fdf2 	bl	8000270 <memchr>
 802168c:	9a04      	ldr	r2, [sp, #16]
 802168e:	b9d8      	cbnz	r0, 80216c8 <_vfiprintf_r+0x110>
 8021690:	06d1      	lsls	r1, r2, #27
 8021692:	bf44      	itt	mi
 8021694:	2320      	movmi	r3, #32
 8021696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802169a:	0713      	lsls	r3, r2, #28
 802169c:	bf44      	itt	mi
 802169e:	232b      	movmi	r3, #43	; 0x2b
 80216a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80216a4:	f89a 3000 	ldrb.w	r3, [sl]
 80216a8:	2b2a      	cmp	r3, #42	; 0x2a
 80216aa:	d015      	beq.n	80216d8 <_vfiprintf_r+0x120>
 80216ac:	9a07      	ldr	r2, [sp, #28]
 80216ae:	4654      	mov	r4, sl
 80216b0:	2000      	movs	r0, #0
 80216b2:	f04f 0c0a 	mov.w	ip, #10
 80216b6:	4621      	mov	r1, r4
 80216b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216bc:	3b30      	subs	r3, #48	; 0x30
 80216be:	2b09      	cmp	r3, #9
 80216c0:	d94d      	bls.n	802175e <_vfiprintf_r+0x1a6>
 80216c2:	b1b0      	cbz	r0, 80216f2 <_vfiprintf_r+0x13a>
 80216c4:	9207      	str	r2, [sp, #28]
 80216c6:	e014      	b.n	80216f2 <_vfiprintf_r+0x13a>
 80216c8:	eba0 0308 	sub.w	r3, r0, r8
 80216cc:	fa09 f303 	lsl.w	r3, r9, r3
 80216d0:	4313      	orrs	r3, r2
 80216d2:	9304      	str	r3, [sp, #16]
 80216d4:	46a2      	mov	sl, r4
 80216d6:	e7d2      	b.n	802167e <_vfiprintf_r+0xc6>
 80216d8:	9b03      	ldr	r3, [sp, #12]
 80216da:	1d19      	adds	r1, r3, #4
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	9103      	str	r1, [sp, #12]
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	bfbb      	ittet	lt
 80216e4:	425b      	neglt	r3, r3
 80216e6:	f042 0202 	orrlt.w	r2, r2, #2
 80216ea:	9307      	strge	r3, [sp, #28]
 80216ec:	9307      	strlt	r3, [sp, #28]
 80216ee:	bfb8      	it	lt
 80216f0:	9204      	strlt	r2, [sp, #16]
 80216f2:	7823      	ldrb	r3, [r4, #0]
 80216f4:	2b2e      	cmp	r3, #46	; 0x2e
 80216f6:	d10c      	bne.n	8021712 <_vfiprintf_r+0x15a>
 80216f8:	7863      	ldrb	r3, [r4, #1]
 80216fa:	2b2a      	cmp	r3, #42	; 0x2a
 80216fc:	d134      	bne.n	8021768 <_vfiprintf_r+0x1b0>
 80216fe:	9b03      	ldr	r3, [sp, #12]
 8021700:	1d1a      	adds	r2, r3, #4
 8021702:	681b      	ldr	r3, [r3, #0]
 8021704:	9203      	str	r2, [sp, #12]
 8021706:	2b00      	cmp	r3, #0
 8021708:	bfb8      	it	lt
 802170a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802170e:	3402      	adds	r4, #2
 8021710:	9305      	str	r3, [sp, #20]
 8021712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80217e8 <_vfiprintf_r+0x230>
 8021716:	7821      	ldrb	r1, [r4, #0]
 8021718:	2203      	movs	r2, #3
 802171a:	4650      	mov	r0, sl
 802171c:	f7de fda8 	bl	8000270 <memchr>
 8021720:	b138      	cbz	r0, 8021732 <_vfiprintf_r+0x17a>
 8021722:	9b04      	ldr	r3, [sp, #16]
 8021724:	eba0 000a 	sub.w	r0, r0, sl
 8021728:	2240      	movs	r2, #64	; 0x40
 802172a:	4082      	lsls	r2, r0
 802172c:	4313      	orrs	r3, r2
 802172e:	3401      	adds	r4, #1
 8021730:	9304      	str	r3, [sp, #16]
 8021732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021736:	4829      	ldr	r0, [pc, #164]	; (80217dc <_vfiprintf_r+0x224>)
 8021738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802173c:	2206      	movs	r2, #6
 802173e:	f7de fd97 	bl	8000270 <memchr>
 8021742:	2800      	cmp	r0, #0
 8021744:	d03f      	beq.n	80217c6 <_vfiprintf_r+0x20e>
 8021746:	4b26      	ldr	r3, [pc, #152]	; (80217e0 <_vfiprintf_r+0x228>)
 8021748:	bb1b      	cbnz	r3, 8021792 <_vfiprintf_r+0x1da>
 802174a:	9b03      	ldr	r3, [sp, #12]
 802174c:	3307      	adds	r3, #7
 802174e:	f023 0307 	bic.w	r3, r3, #7
 8021752:	3308      	adds	r3, #8
 8021754:	9303      	str	r3, [sp, #12]
 8021756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021758:	443b      	add	r3, r7
 802175a:	9309      	str	r3, [sp, #36]	; 0x24
 802175c:	e768      	b.n	8021630 <_vfiprintf_r+0x78>
 802175e:	fb0c 3202 	mla	r2, ip, r2, r3
 8021762:	460c      	mov	r4, r1
 8021764:	2001      	movs	r0, #1
 8021766:	e7a6      	b.n	80216b6 <_vfiprintf_r+0xfe>
 8021768:	2300      	movs	r3, #0
 802176a:	3401      	adds	r4, #1
 802176c:	9305      	str	r3, [sp, #20]
 802176e:	4619      	mov	r1, r3
 8021770:	f04f 0c0a 	mov.w	ip, #10
 8021774:	4620      	mov	r0, r4
 8021776:	f810 2b01 	ldrb.w	r2, [r0], #1
 802177a:	3a30      	subs	r2, #48	; 0x30
 802177c:	2a09      	cmp	r2, #9
 802177e:	d903      	bls.n	8021788 <_vfiprintf_r+0x1d0>
 8021780:	2b00      	cmp	r3, #0
 8021782:	d0c6      	beq.n	8021712 <_vfiprintf_r+0x15a>
 8021784:	9105      	str	r1, [sp, #20]
 8021786:	e7c4      	b.n	8021712 <_vfiprintf_r+0x15a>
 8021788:	fb0c 2101 	mla	r1, ip, r1, r2
 802178c:	4604      	mov	r4, r0
 802178e:	2301      	movs	r3, #1
 8021790:	e7f0      	b.n	8021774 <_vfiprintf_r+0x1bc>
 8021792:	ab03      	add	r3, sp, #12
 8021794:	9300      	str	r3, [sp, #0]
 8021796:	462a      	mov	r2, r5
 8021798:	4b12      	ldr	r3, [pc, #72]	; (80217e4 <_vfiprintf_r+0x22c>)
 802179a:	a904      	add	r1, sp, #16
 802179c:	4630      	mov	r0, r6
 802179e:	f3af 8000 	nop.w
 80217a2:	4607      	mov	r7, r0
 80217a4:	1c78      	adds	r0, r7, #1
 80217a6:	d1d6      	bne.n	8021756 <_vfiprintf_r+0x19e>
 80217a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80217aa:	07d9      	lsls	r1, r3, #31
 80217ac:	d405      	bmi.n	80217ba <_vfiprintf_r+0x202>
 80217ae:	89ab      	ldrh	r3, [r5, #12]
 80217b0:	059a      	lsls	r2, r3, #22
 80217b2:	d402      	bmi.n	80217ba <_vfiprintf_r+0x202>
 80217b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80217b6:	f7ff fce7 	bl	8021188 <__retarget_lock_release_recursive>
 80217ba:	89ab      	ldrh	r3, [r5, #12]
 80217bc:	065b      	lsls	r3, r3, #25
 80217be:	f53f af1d 	bmi.w	80215fc <_vfiprintf_r+0x44>
 80217c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217c4:	e71c      	b.n	8021600 <_vfiprintf_r+0x48>
 80217c6:	ab03      	add	r3, sp, #12
 80217c8:	9300      	str	r3, [sp, #0]
 80217ca:	462a      	mov	r2, r5
 80217cc:	4b05      	ldr	r3, [pc, #20]	; (80217e4 <_vfiprintf_r+0x22c>)
 80217ce:	a904      	add	r1, sp, #16
 80217d0:	4630      	mov	r0, r6
 80217d2:	f000 f879 	bl	80218c8 <_printf_i>
 80217d6:	e7e4      	b.n	80217a2 <_vfiprintf_r+0x1ea>
 80217d8:	080235fa 	.word	0x080235fa
 80217dc:	08023604 	.word	0x08023604
 80217e0:	00000000 	.word	0x00000000
 80217e4:	08021593 	.word	0x08021593
 80217e8:	08023600 	.word	0x08023600

080217ec <_printf_common>:
 80217ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217f0:	4616      	mov	r6, r2
 80217f2:	4699      	mov	r9, r3
 80217f4:	688a      	ldr	r2, [r1, #8]
 80217f6:	690b      	ldr	r3, [r1, #16]
 80217f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80217fc:	4293      	cmp	r3, r2
 80217fe:	bfb8      	it	lt
 8021800:	4613      	movlt	r3, r2
 8021802:	6033      	str	r3, [r6, #0]
 8021804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021808:	4607      	mov	r7, r0
 802180a:	460c      	mov	r4, r1
 802180c:	b10a      	cbz	r2, 8021812 <_printf_common+0x26>
 802180e:	3301      	adds	r3, #1
 8021810:	6033      	str	r3, [r6, #0]
 8021812:	6823      	ldr	r3, [r4, #0]
 8021814:	0699      	lsls	r1, r3, #26
 8021816:	bf42      	ittt	mi
 8021818:	6833      	ldrmi	r3, [r6, #0]
 802181a:	3302      	addmi	r3, #2
 802181c:	6033      	strmi	r3, [r6, #0]
 802181e:	6825      	ldr	r5, [r4, #0]
 8021820:	f015 0506 	ands.w	r5, r5, #6
 8021824:	d106      	bne.n	8021834 <_printf_common+0x48>
 8021826:	f104 0a19 	add.w	sl, r4, #25
 802182a:	68e3      	ldr	r3, [r4, #12]
 802182c:	6832      	ldr	r2, [r6, #0]
 802182e:	1a9b      	subs	r3, r3, r2
 8021830:	42ab      	cmp	r3, r5
 8021832:	dc26      	bgt.n	8021882 <_printf_common+0x96>
 8021834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021838:	1e13      	subs	r3, r2, #0
 802183a:	6822      	ldr	r2, [r4, #0]
 802183c:	bf18      	it	ne
 802183e:	2301      	movne	r3, #1
 8021840:	0692      	lsls	r2, r2, #26
 8021842:	d42b      	bmi.n	802189c <_printf_common+0xb0>
 8021844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021848:	4649      	mov	r1, r9
 802184a:	4638      	mov	r0, r7
 802184c:	47c0      	blx	r8
 802184e:	3001      	adds	r0, #1
 8021850:	d01e      	beq.n	8021890 <_printf_common+0xa4>
 8021852:	6823      	ldr	r3, [r4, #0]
 8021854:	6922      	ldr	r2, [r4, #16]
 8021856:	f003 0306 	and.w	r3, r3, #6
 802185a:	2b04      	cmp	r3, #4
 802185c:	bf02      	ittt	eq
 802185e:	68e5      	ldreq	r5, [r4, #12]
 8021860:	6833      	ldreq	r3, [r6, #0]
 8021862:	1aed      	subeq	r5, r5, r3
 8021864:	68a3      	ldr	r3, [r4, #8]
 8021866:	bf0c      	ite	eq
 8021868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802186c:	2500      	movne	r5, #0
 802186e:	4293      	cmp	r3, r2
 8021870:	bfc4      	itt	gt
 8021872:	1a9b      	subgt	r3, r3, r2
 8021874:	18ed      	addgt	r5, r5, r3
 8021876:	2600      	movs	r6, #0
 8021878:	341a      	adds	r4, #26
 802187a:	42b5      	cmp	r5, r6
 802187c:	d11a      	bne.n	80218b4 <_printf_common+0xc8>
 802187e:	2000      	movs	r0, #0
 8021880:	e008      	b.n	8021894 <_printf_common+0xa8>
 8021882:	2301      	movs	r3, #1
 8021884:	4652      	mov	r2, sl
 8021886:	4649      	mov	r1, r9
 8021888:	4638      	mov	r0, r7
 802188a:	47c0      	blx	r8
 802188c:	3001      	adds	r0, #1
 802188e:	d103      	bne.n	8021898 <_printf_common+0xac>
 8021890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021898:	3501      	adds	r5, #1
 802189a:	e7c6      	b.n	802182a <_printf_common+0x3e>
 802189c:	18e1      	adds	r1, r4, r3
 802189e:	1c5a      	adds	r2, r3, #1
 80218a0:	2030      	movs	r0, #48	; 0x30
 80218a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80218a6:	4422      	add	r2, r4
 80218a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80218ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80218b0:	3302      	adds	r3, #2
 80218b2:	e7c7      	b.n	8021844 <_printf_common+0x58>
 80218b4:	2301      	movs	r3, #1
 80218b6:	4622      	mov	r2, r4
 80218b8:	4649      	mov	r1, r9
 80218ba:	4638      	mov	r0, r7
 80218bc:	47c0      	blx	r8
 80218be:	3001      	adds	r0, #1
 80218c0:	d0e6      	beq.n	8021890 <_printf_common+0xa4>
 80218c2:	3601      	adds	r6, #1
 80218c4:	e7d9      	b.n	802187a <_printf_common+0x8e>
	...

080218c8 <_printf_i>:
 80218c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80218cc:	7e0f      	ldrb	r7, [r1, #24]
 80218ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80218d0:	2f78      	cmp	r7, #120	; 0x78
 80218d2:	4691      	mov	r9, r2
 80218d4:	4680      	mov	r8, r0
 80218d6:	460c      	mov	r4, r1
 80218d8:	469a      	mov	sl, r3
 80218da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80218de:	d807      	bhi.n	80218f0 <_printf_i+0x28>
 80218e0:	2f62      	cmp	r7, #98	; 0x62
 80218e2:	d80a      	bhi.n	80218fa <_printf_i+0x32>
 80218e4:	2f00      	cmp	r7, #0
 80218e6:	f000 80d4 	beq.w	8021a92 <_printf_i+0x1ca>
 80218ea:	2f58      	cmp	r7, #88	; 0x58
 80218ec:	f000 80c0 	beq.w	8021a70 <_printf_i+0x1a8>
 80218f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80218f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80218f8:	e03a      	b.n	8021970 <_printf_i+0xa8>
 80218fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80218fe:	2b15      	cmp	r3, #21
 8021900:	d8f6      	bhi.n	80218f0 <_printf_i+0x28>
 8021902:	a101      	add	r1, pc, #4	; (adr r1, 8021908 <_printf_i+0x40>)
 8021904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021908:	08021961 	.word	0x08021961
 802190c:	08021975 	.word	0x08021975
 8021910:	080218f1 	.word	0x080218f1
 8021914:	080218f1 	.word	0x080218f1
 8021918:	080218f1 	.word	0x080218f1
 802191c:	080218f1 	.word	0x080218f1
 8021920:	08021975 	.word	0x08021975
 8021924:	080218f1 	.word	0x080218f1
 8021928:	080218f1 	.word	0x080218f1
 802192c:	080218f1 	.word	0x080218f1
 8021930:	080218f1 	.word	0x080218f1
 8021934:	08021a79 	.word	0x08021a79
 8021938:	080219a1 	.word	0x080219a1
 802193c:	08021a33 	.word	0x08021a33
 8021940:	080218f1 	.word	0x080218f1
 8021944:	080218f1 	.word	0x080218f1
 8021948:	08021a9b 	.word	0x08021a9b
 802194c:	080218f1 	.word	0x080218f1
 8021950:	080219a1 	.word	0x080219a1
 8021954:	080218f1 	.word	0x080218f1
 8021958:	080218f1 	.word	0x080218f1
 802195c:	08021a3b 	.word	0x08021a3b
 8021960:	682b      	ldr	r3, [r5, #0]
 8021962:	1d1a      	adds	r2, r3, #4
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	602a      	str	r2, [r5, #0]
 8021968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802196c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021970:	2301      	movs	r3, #1
 8021972:	e09f      	b.n	8021ab4 <_printf_i+0x1ec>
 8021974:	6820      	ldr	r0, [r4, #0]
 8021976:	682b      	ldr	r3, [r5, #0]
 8021978:	0607      	lsls	r7, r0, #24
 802197a:	f103 0104 	add.w	r1, r3, #4
 802197e:	6029      	str	r1, [r5, #0]
 8021980:	d501      	bpl.n	8021986 <_printf_i+0xbe>
 8021982:	681e      	ldr	r6, [r3, #0]
 8021984:	e003      	b.n	802198e <_printf_i+0xc6>
 8021986:	0646      	lsls	r6, r0, #25
 8021988:	d5fb      	bpl.n	8021982 <_printf_i+0xba>
 802198a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802198e:	2e00      	cmp	r6, #0
 8021990:	da03      	bge.n	802199a <_printf_i+0xd2>
 8021992:	232d      	movs	r3, #45	; 0x2d
 8021994:	4276      	negs	r6, r6
 8021996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802199a:	485a      	ldr	r0, [pc, #360]	; (8021b04 <_printf_i+0x23c>)
 802199c:	230a      	movs	r3, #10
 802199e:	e012      	b.n	80219c6 <_printf_i+0xfe>
 80219a0:	682b      	ldr	r3, [r5, #0]
 80219a2:	6820      	ldr	r0, [r4, #0]
 80219a4:	1d19      	adds	r1, r3, #4
 80219a6:	6029      	str	r1, [r5, #0]
 80219a8:	0605      	lsls	r5, r0, #24
 80219aa:	d501      	bpl.n	80219b0 <_printf_i+0xe8>
 80219ac:	681e      	ldr	r6, [r3, #0]
 80219ae:	e002      	b.n	80219b6 <_printf_i+0xee>
 80219b0:	0641      	lsls	r1, r0, #25
 80219b2:	d5fb      	bpl.n	80219ac <_printf_i+0xe4>
 80219b4:	881e      	ldrh	r6, [r3, #0]
 80219b6:	4853      	ldr	r0, [pc, #332]	; (8021b04 <_printf_i+0x23c>)
 80219b8:	2f6f      	cmp	r7, #111	; 0x6f
 80219ba:	bf0c      	ite	eq
 80219bc:	2308      	moveq	r3, #8
 80219be:	230a      	movne	r3, #10
 80219c0:	2100      	movs	r1, #0
 80219c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80219c6:	6865      	ldr	r5, [r4, #4]
 80219c8:	60a5      	str	r5, [r4, #8]
 80219ca:	2d00      	cmp	r5, #0
 80219cc:	bfa2      	ittt	ge
 80219ce:	6821      	ldrge	r1, [r4, #0]
 80219d0:	f021 0104 	bicge.w	r1, r1, #4
 80219d4:	6021      	strge	r1, [r4, #0]
 80219d6:	b90e      	cbnz	r6, 80219dc <_printf_i+0x114>
 80219d8:	2d00      	cmp	r5, #0
 80219da:	d04b      	beq.n	8021a74 <_printf_i+0x1ac>
 80219dc:	4615      	mov	r5, r2
 80219de:	fbb6 f1f3 	udiv	r1, r6, r3
 80219e2:	fb03 6711 	mls	r7, r3, r1, r6
 80219e6:	5dc7      	ldrb	r7, [r0, r7]
 80219e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80219ec:	4637      	mov	r7, r6
 80219ee:	42bb      	cmp	r3, r7
 80219f0:	460e      	mov	r6, r1
 80219f2:	d9f4      	bls.n	80219de <_printf_i+0x116>
 80219f4:	2b08      	cmp	r3, #8
 80219f6:	d10b      	bne.n	8021a10 <_printf_i+0x148>
 80219f8:	6823      	ldr	r3, [r4, #0]
 80219fa:	07de      	lsls	r6, r3, #31
 80219fc:	d508      	bpl.n	8021a10 <_printf_i+0x148>
 80219fe:	6923      	ldr	r3, [r4, #16]
 8021a00:	6861      	ldr	r1, [r4, #4]
 8021a02:	4299      	cmp	r1, r3
 8021a04:	bfde      	ittt	le
 8021a06:	2330      	movle	r3, #48	; 0x30
 8021a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021a0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8021a10:	1b52      	subs	r2, r2, r5
 8021a12:	6122      	str	r2, [r4, #16]
 8021a14:	f8cd a000 	str.w	sl, [sp]
 8021a18:	464b      	mov	r3, r9
 8021a1a:	aa03      	add	r2, sp, #12
 8021a1c:	4621      	mov	r1, r4
 8021a1e:	4640      	mov	r0, r8
 8021a20:	f7ff fee4 	bl	80217ec <_printf_common>
 8021a24:	3001      	adds	r0, #1
 8021a26:	d14a      	bne.n	8021abe <_printf_i+0x1f6>
 8021a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021a2c:	b004      	add	sp, #16
 8021a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a32:	6823      	ldr	r3, [r4, #0]
 8021a34:	f043 0320 	orr.w	r3, r3, #32
 8021a38:	6023      	str	r3, [r4, #0]
 8021a3a:	4833      	ldr	r0, [pc, #204]	; (8021b08 <_printf_i+0x240>)
 8021a3c:	2778      	movs	r7, #120	; 0x78
 8021a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021a42:	6823      	ldr	r3, [r4, #0]
 8021a44:	6829      	ldr	r1, [r5, #0]
 8021a46:	061f      	lsls	r7, r3, #24
 8021a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8021a4c:	d402      	bmi.n	8021a54 <_printf_i+0x18c>
 8021a4e:	065f      	lsls	r7, r3, #25
 8021a50:	bf48      	it	mi
 8021a52:	b2b6      	uxthmi	r6, r6
 8021a54:	07df      	lsls	r7, r3, #31
 8021a56:	bf48      	it	mi
 8021a58:	f043 0320 	orrmi.w	r3, r3, #32
 8021a5c:	6029      	str	r1, [r5, #0]
 8021a5e:	bf48      	it	mi
 8021a60:	6023      	strmi	r3, [r4, #0]
 8021a62:	b91e      	cbnz	r6, 8021a6c <_printf_i+0x1a4>
 8021a64:	6823      	ldr	r3, [r4, #0]
 8021a66:	f023 0320 	bic.w	r3, r3, #32
 8021a6a:	6023      	str	r3, [r4, #0]
 8021a6c:	2310      	movs	r3, #16
 8021a6e:	e7a7      	b.n	80219c0 <_printf_i+0xf8>
 8021a70:	4824      	ldr	r0, [pc, #144]	; (8021b04 <_printf_i+0x23c>)
 8021a72:	e7e4      	b.n	8021a3e <_printf_i+0x176>
 8021a74:	4615      	mov	r5, r2
 8021a76:	e7bd      	b.n	80219f4 <_printf_i+0x12c>
 8021a78:	682b      	ldr	r3, [r5, #0]
 8021a7a:	6826      	ldr	r6, [r4, #0]
 8021a7c:	6961      	ldr	r1, [r4, #20]
 8021a7e:	1d18      	adds	r0, r3, #4
 8021a80:	6028      	str	r0, [r5, #0]
 8021a82:	0635      	lsls	r5, r6, #24
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	d501      	bpl.n	8021a8c <_printf_i+0x1c4>
 8021a88:	6019      	str	r1, [r3, #0]
 8021a8a:	e002      	b.n	8021a92 <_printf_i+0x1ca>
 8021a8c:	0670      	lsls	r0, r6, #25
 8021a8e:	d5fb      	bpl.n	8021a88 <_printf_i+0x1c0>
 8021a90:	8019      	strh	r1, [r3, #0]
 8021a92:	2300      	movs	r3, #0
 8021a94:	6123      	str	r3, [r4, #16]
 8021a96:	4615      	mov	r5, r2
 8021a98:	e7bc      	b.n	8021a14 <_printf_i+0x14c>
 8021a9a:	682b      	ldr	r3, [r5, #0]
 8021a9c:	1d1a      	adds	r2, r3, #4
 8021a9e:	602a      	str	r2, [r5, #0]
 8021aa0:	681d      	ldr	r5, [r3, #0]
 8021aa2:	6862      	ldr	r2, [r4, #4]
 8021aa4:	2100      	movs	r1, #0
 8021aa6:	4628      	mov	r0, r5
 8021aa8:	f7de fbe2 	bl	8000270 <memchr>
 8021aac:	b108      	cbz	r0, 8021ab2 <_printf_i+0x1ea>
 8021aae:	1b40      	subs	r0, r0, r5
 8021ab0:	6060      	str	r0, [r4, #4]
 8021ab2:	6863      	ldr	r3, [r4, #4]
 8021ab4:	6123      	str	r3, [r4, #16]
 8021ab6:	2300      	movs	r3, #0
 8021ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021abc:	e7aa      	b.n	8021a14 <_printf_i+0x14c>
 8021abe:	6923      	ldr	r3, [r4, #16]
 8021ac0:	462a      	mov	r2, r5
 8021ac2:	4649      	mov	r1, r9
 8021ac4:	4640      	mov	r0, r8
 8021ac6:	47d0      	blx	sl
 8021ac8:	3001      	adds	r0, #1
 8021aca:	d0ad      	beq.n	8021a28 <_printf_i+0x160>
 8021acc:	6823      	ldr	r3, [r4, #0]
 8021ace:	079b      	lsls	r3, r3, #30
 8021ad0:	d413      	bmi.n	8021afa <_printf_i+0x232>
 8021ad2:	68e0      	ldr	r0, [r4, #12]
 8021ad4:	9b03      	ldr	r3, [sp, #12]
 8021ad6:	4298      	cmp	r0, r3
 8021ad8:	bfb8      	it	lt
 8021ada:	4618      	movlt	r0, r3
 8021adc:	e7a6      	b.n	8021a2c <_printf_i+0x164>
 8021ade:	2301      	movs	r3, #1
 8021ae0:	4632      	mov	r2, r6
 8021ae2:	4649      	mov	r1, r9
 8021ae4:	4640      	mov	r0, r8
 8021ae6:	47d0      	blx	sl
 8021ae8:	3001      	adds	r0, #1
 8021aea:	d09d      	beq.n	8021a28 <_printf_i+0x160>
 8021aec:	3501      	adds	r5, #1
 8021aee:	68e3      	ldr	r3, [r4, #12]
 8021af0:	9903      	ldr	r1, [sp, #12]
 8021af2:	1a5b      	subs	r3, r3, r1
 8021af4:	42ab      	cmp	r3, r5
 8021af6:	dcf2      	bgt.n	8021ade <_printf_i+0x216>
 8021af8:	e7eb      	b.n	8021ad2 <_printf_i+0x20a>
 8021afa:	2500      	movs	r5, #0
 8021afc:	f104 0619 	add.w	r6, r4, #25
 8021b00:	e7f5      	b.n	8021aee <_printf_i+0x226>
 8021b02:	bf00      	nop
 8021b04:	0802360b 	.word	0x0802360b
 8021b08:	0802361c 	.word	0x0802361c

08021b0c <__sflush_r>:
 8021b0c:	898a      	ldrh	r2, [r1, #12]
 8021b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b12:	4605      	mov	r5, r0
 8021b14:	0710      	lsls	r0, r2, #28
 8021b16:	460c      	mov	r4, r1
 8021b18:	d458      	bmi.n	8021bcc <__sflush_r+0xc0>
 8021b1a:	684b      	ldr	r3, [r1, #4]
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	dc05      	bgt.n	8021b2c <__sflush_r+0x20>
 8021b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	dc02      	bgt.n	8021b2c <__sflush_r+0x20>
 8021b26:	2000      	movs	r0, #0
 8021b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021b2e:	2e00      	cmp	r6, #0
 8021b30:	d0f9      	beq.n	8021b26 <__sflush_r+0x1a>
 8021b32:	2300      	movs	r3, #0
 8021b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021b38:	682f      	ldr	r7, [r5, #0]
 8021b3a:	6a21      	ldr	r1, [r4, #32]
 8021b3c:	602b      	str	r3, [r5, #0]
 8021b3e:	d032      	beq.n	8021ba6 <__sflush_r+0x9a>
 8021b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021b42:	89a3      	ldrh	r3, [r4, #12]
 8021b44:	075a      	lsls	r2, r3, #29
 8021b46:	d505      	bpl.n	8021b54 <__sflush_r+0x48>
 8021b48:	6863      	ldr	r3, [r4, #4]
 8021b4a:	1ac0      	subs	r0, r0, r3
 8021b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021b4e:	b10b      	cbz	r3, 8021b54 <__sflush_r+0x48>
 8021b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021b52:	1ac0      	subs	r0, r0, r3
 8021b54:	2300      	movs	r3, #0
 8021b56:	4602      	mov	r2, r0
 8021b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021b5a:	6a21      	ldr	r1, [r4, #32]
 8021b5c:	4628      	mov	r0, r5
 8021b5e:	47b0      	blx	r6
 8021b60:	1c43      	adds	r3, r0, #1
 8021b62:	89a3      	ldrh	r3, [r4, #12]
 8021b64:	d106      	bne.n	8021b74 <__sflush_r+0x68>
 8021b66:	6829      	ldr	r1, [r5, #0]
 8021b68:	291d      	cmp	r1, #29
 8021b6a:	d82b      	bhi.n	8021bc4 <__sflush_r+0xb8>
 8021b6c:	4a29      	ldr	r2, [pc, #164]	; (8021c14 <__sflush_r+0x108>)
 8021b6e:	410a      	asrs	r2, r1
 8021b70:	07d6      	lsls	r6, r2, #31
 8021b72:	d427      	bmi.n	8021bc4 <__sflush_r+0xb8>
 8021b74:	2200      	movs	r2, #0
 8021b76:	6062      	str	r2, [r4, #4]
 8021b78:	04d9      	lsls	r1, r3, #19
 8021b7a:	6922      	ldr	r2, [r4, #16]
 8021b7c:	6022      	str	r2, [r4, #0]
 8021b7e:	d504      	bpl.n	8021b8a <__sflush_r+0x7e>
 8021b80:	1c42      	adds	r2, r0, #1
 8021b82:	d101      	bne.n	8021b88 <__sflush_r+0x7c>
 8021b84:	682b      	ldr	r3, [r5, #0]
 8021b86:	b903      	cbnz	r3, 8021b8a <__sflush_r+0x7e>
 8021b88:	6560      	str	r0, [r4, #84]	; 0x54
 8021b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b8c:	602f      	str	r7, [r5, #0]
 8021b8e:	2900      	cmp	r1, #0
 8021b90:	d0c9      	beq.n	8021b26 <__sflush_r+0x1a>
 8021b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021b96:	4299      	cmp	r1, r3
 8021b98:	d002      	beq.n	8021ba0 <__sflush_r+0x94>
 8021b9a:	4628      	mov	r0, r5
 8021b9c:	f7ff fb36 	bl	802120c <_free_r>
 8021ba0:	2000      	movs	r0, #0
 8021ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8021ba4:	e7c0      	b.n	8021b28 <__sflush_r+0x1c>
 8021ba6:	2301      	movs	r3, #1
 8021ba8:	4628      	mov	r0, r5
 8021baa:	47b0      	blx	r6
 8021bac:	1c41      	adds	r1, r0, #1
 8021bae:	d1c8      	bne.n	8021b42 <__sflush_r+0x36>
 8021bb0:	682b      	ldr	r3, [r5, #0]
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	d0c5      	beq.n	8021b42 <__sflush_r+0x36>
 8021bb6:	2b1d      	cmp	r3, #29
 8021bb8:	d001      	beq.n	8021bbe <__sflush_r+0xb2>
 8021bba:	2b16      	cmp	r3, #22
 8021bbc:	d101      	bne.n	8021bc2 <__sflush_r+0xb6>
 8021bbe:	602f      	str	r7, [r5, #0]
 8021bc0:	e7b1      	b.n	8021b26 <__sflush_r+0x1a>
 8021bc2:	89a3      	ldrh	r3, [r4, #12]
 8021bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bc8:	81a3      	strh	r3, [r4, #12]
 8021bca:	e7ad      	b.n	8021b28 <__sflush_r+0x1c>
 8021bcc:	690f      	ldr	r7, [r1, #16]
 8021bce:	2f00      	cmp	r7, #0
 8021bd0:	d0a9      	beq.n	8021b26 <__sflush_r+0x1a>
 8021bd2:	0793      	lsls	r3, r2, #30
 8021bd4:	680e      	ldr	r6, [r1, #0]
 8021bd6:	bf08      	it	eq
 8021bd8:	694b      	ldreq	r3, [r1, #20]
 8021bda:	600f      	str	r7, [r1, #0]
 8021bdc:	bf18      	it	ne
 8021bde:	2300      	movne	r3, #0
 8021be0:	eba6 0807 	sub.w	r8, r6, r7
 8021be4:	608b      	str	r3, [r1, #8]
 8021be6:	f1b8 0f00 	cmp.w	r8, #0
 8021bea:	dd9c      	ble.n	8021b26 <__sflush_r+0x1a>
 8021bec:	6a21      	ldr	r1, [r4, #32]
 8021bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021bf0:	4643      	mov	r3, r8
 8021bf2:	463a      	mov	r2, r7
 8021bf4:	4628      	mov	r0, r5
 8021bf6:	47b0      	blx	r6
 8021bf8:	2800      	cmp	r0, #0
 8021bfa:	dc06      	bgt.n	8021c0a <__sflush_r+0xfe>
 8021bfc:	89a3      	ldrh	r3, [r4, #12]
 8021bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c02:	81a3      	strh	r3, [r4, #12]
 8021c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021c08:	e78e      	b.n	8021b28 <__sflush_r+0x1c>
 8021c0a:	4407      	add	r7, r0
 8021c0c:	eba8 0800 	sub.w	r8, r8, r0
 8021c10:	e7e9      	b.n	8021be6 <__sflush_r+0xda>
 8021c12:	bf00      	nop
 8021c14:	dfbffffe 	.word	0xdfbffffe

08021c18 <_fflush_r>:
 8021c18:	b538      	push	{r3, r4, r5, lr}
 8021c1a:	690b      	ldr	r3, [r1, #16]
 8021c1c:	4605      	mov	r5, r0
 8021c1e:	460c      	mov	r4, r1
 8021c20:	b913      	cbnz	r3, 8021c28 <_fflush_r+0x10>
 8021c22:	2500      	movs	r5, #0
 8021c24:	4628      	mov	r0, r5
 8021c26:	bd38      	pop	{r3, r4, r5, pc}
 8021c28:	b118      	cbz	r0, 8021c32 <_fflush_r+0x1a>
 8021c2a:	6a03      	ldr	r3, [r0, #32]
 8021c2c:	b90b      	cbnz	r3, 8021c32 <_fflush_r+0x1a>
 8021c2e:	f7fe fec7 	bl	80209c0 <__sinit>
 8021c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	d0f3      	beq.n	8021c22 <_fflush_r+0xa>
 8021c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021c3c:	07d0      	lsls	r0, r2, #31
 8021c3e:	d404      	bmi.n	8021c4a <_fflush_r+0x32>
 8021c40:	0599      	lsls	r1, r3, #22
 8021c42:	d402      	bmi.n	8021c4a <_fflush_r+0x32>
 8021c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c46:	f7ff fa9e 	bl	8021186 <__retarget_lock_acquire_recursive>
 8021c4a:	4628      	mov	r0, r5
 8021c4c:	4621      	mov	r1, r4
 8021c4e:	f7ff ff5d 	bl	8021b0c <__sflush_r>
 8021c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021c54:	07da      	lsls	r2, r3, #31
 8021c56:	4605      	mov	r5, r0
 8021c58:	d4e4      	bmi.n	8021c24 <_fflush_r+0xc>
 8021c5a:	89a3      	ldrh	r3, [r4, #12]
 8021c5c:	059b      	lsls	r3, r3, #22
 8021c5e:	d4e1      	bmi.n	8021c24 <_fflush_r+0xc>
 8021c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c62:	f7ff fa91 	bl	8021188 <__retarget_lock_release_recursive>
 8021c66:	e7dd      	b.n	8021c24 <_fflush_r+0xc>

08021c68 <fiprintf>:
 8021c68:	b40e      	push	{r1, r2, r3}
 8021c6a:	b503      	push	{r0, r1, lr}
 8021c6c:	4601      	mov	r1, r0
 8021c6e:	ab03      	add	r3, sp, #12
 8021c70:	4805      	ldr	r0, [pc, #20]	; (8021c88 <fiprintf+0x20>)
 8021c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c76:	6800      	ldr	r0, [r0, #0]
 8021c78:	9301      	str	r3, [sp, #4]
 8021c7a:	f7ff fc9d 	bl	80215b8 <_vfiprintf_r>
 8021c7e:	b002      	add	sp, #8
 8021c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8021c84:	b003      	add	sp, #12
 8021c86:	4770      	bx	lr
 8021c88:	200008f0 	.word	0x200008f0

08021c8c <__swhatbuf_r>:
 8021c8c:	b570      	push	{r4, r5, r6, lr}
 8021c8e:	460c      	mov	r4, r1
 8021c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c94:	2900      	cmp	r1, #0
 8021c96:	b096      	sub	sp, #88	; 0x58
 8021c98:	4615      	mov	r5, r2
 8021c9a:	461e      	mov	r6, r3
 8021c9c:	da0d      	bge.n	8021cba <__swhatbuf_r+0x2e>
 8021c9e:	89a3      	ldrh	r3, [r4, #12]
 8021ca0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8021ca4:	f04f 0100 	mov.w	r1, #0
 8021ca8:	bf0c      	ite	eq
 8021caa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021cae:	2340      	movne	r3, #64	; 0x40
 8021cb0:	2000      	movs	r0, #0
 8021cb2:	6031      	str	r1, [r6, #0]
 8021cb4:	602b      	str	r3, [r5, #0]
 8021cb6:	b016      	add	sp, #88	; 0x58
 8021cb8:	bd70      	pop	{r4, r5, r6, pc}
 8021cba:	466a      	mov	r2, sp
 8021cbc:	f000 f848 	bl	8021d50 <_fstat_r>
 8021cc0:	2800      	cmp	r0, #0
 8021cc2:	dbec      	blt.n	8021c9e <__swhatbuf_r+0x12>
 8021cc4:	9901      	ldr	r1, [sp, #4]
 8021cc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8021cca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8021cce:	4259      	negs	r1, r3
 8021cd0:	4159      	adcs	r1, r3
 8021cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021cd6:	e7eb      	b.n	8021cb0 <__swhatbuf_r+0x24>

08021cd8 <__smakebuf_r>:
 8021cd8:	898b      	ldrh	r3, [r1, #12]
 8021cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021cdc:	079d      	lsls	r5, r3, #30
 8021cde:	4606      	mov	r6, r0
 8021ce0:	460c      	mov	r4, r1
 8021ce2:	d507      	bpl.n	8021cf4 <__smakebuf_r+0x1c>
 8021ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021ce8:	6023      	str	r3, [r4, #0]
 8021cea:	6123      	str	r3, [r4, #16]
 8021cec:	2301      	movs	r3, #1
 8021cee:	6163      	str	r3, [r4, #20]
 8021cf0:	b002      	add	sp, #8
 8021cf2:	bd70      	pop	{r4, r5, r6, pc}
 8021cf4:	ab01      	add	r3, sp, #4
 8021cf6:	466a      	mov	r2, sp
 8021cf8:	f7ff ffc8 	bl	8021c8c <__swhatbuf_r>
 8021cfc:	9900      	ldr	r1, [sp, #0]
 8021cfe:	4605      	mov	r5, r0
 8021d00:	4630      	mov	r0, r6
 8021d02:	f7fe fc25 	bl	8020550 <_malloc_r>
 8021d06:	b948      	cbnz	r0, 8021d1c <__smakebuf_r+0x44>
 8021d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d0c:	059a      	lsls	r2, r3, #22
 8021d0e:	d4ef      	bmi.n	8021cf0 <__smakebuf_r+0x18>
 8021d10:	f023 0303 	bic.w	r3, r3, #3
 8021d14:	f043 0302 	orr.w	r3, r3, #2
 8021d18:	81a3      	strh	r3, [r4, #12]
 8021d1a:	e7e3      	b.n	8021ce4 <__smakebuf_r+0xc>
 8021d1c:	89a3      	ldrh	r3, [r4, #12]
 8021d1e:	6020      	str	r0, [r4, #0]
 8021d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021d24:	81a3      	strh	r3, [r4, #12]
 8021d26:	9b00      	ldr	r3, [sp, #0]
 8021d28:	6163      	str	r3, [r4, #20]
 8021d2a:	9b01      	ldr	r3, [sp, #4]
 8021d2c:	6120      	str	r0, [r4, #16]
 8021d2e:	b15b      	cbz	r3, 8021d48 <__smakebuf_r+0x70>
 8021d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021d34:	4630      	mov	r0, r6
 8021d36:	f000 f81d 	bl	8021d74 <_isatty_r>
 8021d3a:	b128      	cbz	r0, 8021d48 <__smakebuf_r+0x70>
 8021d3c:	89a3      	ldrh	r3, [r4, #12]
 8021d3e:	f023 0303 	bic.w	r3, r3, #3
 8021d42:	f043 0301 	orr.w	r3, r3, #1
 8021d46:	81a3      	strh	r3, [r4, #12]
 8021d48:	89a3      	ldrh	r3, [r4, #12]
 8021d4a:	431d      	orrs	r5, r3
 8021d4c:	81a5      	strh	r5, [r4, #12]
 8021d4e:	e7cf      	b.n	8021cf0 <__smakebuf_r+0x18>

08021d50 <_fstat_r>:
 8021d50:	b538      	push	{r3, r4, r5, lr}
 8021d52:	4d07      	ldr	r5, [pc, #28]	; (8021d70 <_fstat_r+0x20>)
 8021d54:	2300      	movs	r3, #0
 8021d56:	4604      	mov	r4, r0
 8021d58:	4608      	mov	r0, r1
 8021d5a:	4611      	mov	r1, r2
 8021d5c:	602b      	str	r3, [r5, #0]
 8021d5e:	f7e2 ff0a 	bl	8004b76 <_fstat>
 8021d62:	1c43      	adds	r3, r0, #1
 8021d64:	d102      	bne.n	8021d6c <_fstat_r+0x1c>
 8021d66:	682b      	ldr	r3, [r5, #0]
 8021d68:	b103      	cbz	r3, 8021d6c <_fstat_r+0x1c>
 8021d6a:	6023      	str	r3, [r4, #0]
 8021d6c:	bd38      	pop	{r3, r4, r5, pc}
 8021d6e:	bf00      	nop
 8021d70:	20017ac8 	.word	0x20017ac8

08021d74 <_isatty_r>:
 8021d74:	b538      	push	{r3, r4, r5, lr}
 8021d76:	4d06      	ldr	r5, [pc, #24]	; (8021d90 <_isatty_r+0x1c>)
 8021d78:	2300      	movs	r3, #0
 8021d7a:	4604      	mov	r4, r0
 8021d7c:	4608      	mov	r0, r1
 8021d7e:	602b      	str	r3, [r5, #0]
 8021d80:	f7e2 ff09 	bl	8004b96 <_isatty>
 8021d84:	1c43      	adds	r3, r0, #1
 8021d86:	d102      	bne.n	8021d8e <_isatty_r+0x1a>
 8021d88:	682b      	ldr	r3, [r5, #0]
 8021d8a:	b103      	cbz	r3, 8021d8e <_isatty_r+0x1a>
 8021d8c:	6023      	str	r3, [r4, #0]
 8021d8e:	bd38      	pop	{r3, r4, r5, pc}
 8021d90:	20017ac8 	.word	0x20017ac8

08021d94 <abort>:
 8021d94:	b508      	push	{r3, lr}
 8021d96:	2006      	movs	r0, #6
 8021d98:	f000 f82c 	bl	8021df4 <raise>
 8021d9c:	2001      	movs	r0, #1
 8021d9e:	f7e2 fe9b 	bl	8004ad8 <_exit>

08021da2 <_raise_r>:
 8021da2:	291f      	cmp	r1, #31
 8021da4:	b538      	push	{r3, r4, r5, lr}
 8021da6:	4604      	mov	r4, r0
 8021da8:	460d      	mov	r5, r1
 8021daa:	d904      	bls.n	8021db6 <_raise_r+0x14>
 8021dac:	2316      	movs	r3, #22
 8021dae:	6003      	str	r3, [r0, #0]
 8021db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021db4:	bd38      	pop	{r3, r4, r5, pc}
 8021db6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8021db8:	b112      	cbz	r2, 8021dc0 <_raise_r+0x1e>
 8021dba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021dbe:	b94b      	cbnz	r3, 8021dd4 <_raise_r+0x32>
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	f000 f831 	bl	8021e28 <_getpid_r>
 8021dc6:	462a      	mov	r2, r5
 8021dc8:	4601      	mov	r1, r0
 8021dca:	4620      	mov	r0, r4
 8021dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021dd0:	f000 b818 	b.w	8021e04 <_kill_r>
 8021dd4:	2b01      	cmp	r3, #1
 8021dd6:	d00a      	beq.n	8021dee <_raise_r+0x4c>
 8021dd8:	1c59      	adds	r1, r3, #1
 8021dda:	d103      	bne.n	8021de4 <_raise_r+0x42>
 8021ddc:	2316      	movs	r3, #22
 8021dde:	6003      	str	r3, [r0, #0]
 8021de0:	2001      	movs	r0, #1
 8021de2:	e7e7      	b.n	8021db4 <_raise_r+0x12>
 8021de4:	2400      	movs	r4, #0
 8021de6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021dea:	4628      	mov	r0, r5
 8021dec:	4798      	blx	r3
 8021dee:	2000      	movs	r0, #0
 8021df0:	e7e0      	b.n	8021db4 <_raise_r+0x12>
	...

08021df4 <raise>:
 8021df4:	4b02      	ldr	r3, [pc, #8]	; (8021e00 <raise+0xc>)
 8021df6:	4601      	mov	r1, r0
 8021df8:	6818      	ldr	r0, [r3, #0]
 8021dfa:	f7ff bfd2 	b.w	8021da2 <_raise_r>
 8021dfe:	bf00      	nop
 8021e00:	200008f0 	.word	0x200008f0

08021e04 <_kill_r>:
 8021e04:	b538      	push	{r3, r4, r5, lr}
 8021e06:	4d07      	ldr	r5, [pc, #28]	; (8021e24 <_kill_r+0x20>)
 8021e08:	2300      	movs	r3, #0
 8021e0a:	4604      	mov	r4, r0
 8021e0c:	4608      	mov	r0, r1
 8021e0e:	4611      	mov	r1, r2
 8021e10:	602b      	str	r3, [r5, #0]
 8021e12:	f7e2 fe51 	bl	8004ab8 <_kill>
 8021e16:	1c43      	adds	r3, r0, #1
 8021e18:	d102      	bne.n	8021e20 <_kill_r+0x1c>
 8021e1a:	682b      	ldr	r3, [r5, #0]
 8021e1c:	b103      	cbz	r3, 8021e20 <_kill_r+0x1c>
 8021e1e:	6023      	str	r3, [r4, #0]
 8021e20:	bd38      	pop	{r3, r4, r5, pc}
 8021e22:	bf00      	nop
 8021e24:	20017ac8 	.word	0x20017ac8

08021e28 <_getpid_r>:
 8021e28:	f7e2 be3e 	b.w	8004aa8 <_getpid>

08021e2c <fmaxf>:
 8021e2c:	b508      	push	{r3, lr}
 8021e2e:	ed2d 8b02 	vpush	{d8}
 8021e32:	eeb0 8a40 	vmov.f32	s16, s0
 8021e36:	eef0 8a60 	vmov.f32	s17, s1
 8021e3a:	f000 f82d 	bl	8021e98 <__fpclassifyf>
 8021e3e:	b148      	cbz	r0, 8021e54 <fmaxf+0x28>
 8021e40:	eeb0 0a68 	vmov.f32	s0, s17
 8021e44:	f000 f828 	bl	8021e98 <__fpclassifyf>
 8021e48:	b130      	cbz	r0, 8021e58 <fmaxf+0x2c>
 8021e4a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e52:	dc01      	bgt.n	8021e58 <fmaxf+0x2c>
 8021e54:	eeb0 8a68 	vmov.f32	s16, s17
 8021e58:	eeb0 0a48 	vmov.f32	s0, s16
 8021e5c:	ecbd 8b02 	vpop	{d8}
 8021e60:	bd08      	pop	{r3, pc}

08021e62 <fminf>:
 8021e62:	b508      	push	{r3, lr}
 8021e64:	ed2d 8b02 	vpush	{d8}
 8021e68:	eeb0 8a40 	vmov.f32	s16, s0
 8021e6c:	eef0 8a60 	vmov.f32	s17, s1
 8021e70:	f000 f812 	bl	8021e98 <__fpclassifyf>
 8021e74:	b148      	cbz	r0, 8021e8a <fminf+0x28>
 8021e76:	eeb0 0a68 	vmov.f32	s0, s17
 8021e7a:	f000 f80d 	bl	8021e98 <__fpclassifyf>
 8021e7e:	b130      	cbz	r0, 8021e8e <fminf+0x2c>
 8021e80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e88:	d401      	bmi.n	8021e8e <fminf+0x2c>
 8021e8a:	eeb0 8a68 	vmov.f32	s16, s17
 8021e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8021e92:	ecbd 8b02 	vpop	{d8}
 8021e96:	bd08      	pop	{r3, pc}

08021e98 <__fpclassifyf>:
 8021e98:	ee10 3a10 	vmov	r3, s0
 8021e9c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8021ea0:	d00d      	beq.n	8021ebe <__fpclassifyf+0x26>
 8021ea2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8021ea6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8021eaa:	d30a      	bcc.n	8021ec2 <__fpclassifyf+0x2a>
 8021eac:	4b07      	ldr	r3, [pc, #28]	; (8021ecc <__fpclassifyf+0x34>)
 8021eae:	1e42      	subs	r2, r0, #1
 8021eb0:	429a      	cmp	r2, r3
 8021eb2:	d908      	bls.n	8021ec6 <__fpclassifyf+0x2e>
 8021eb4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8021eb8:	4258      	negs	r0, r3
 8021eba:	4158      	adcs	r0, r3
 8021ebc:	4770      	bx	lr
 8021ebe:	2002      	movs	r0, #2
 8021ec0:	4770      	bx	lr
 8021ec2:	2004      	movs	r0, #4
 8021ec4:	4770      	bx	lr
 8021ec6:	2003      	movs	r0, #3
 8021ec8:	4770      	bx	lr
 8021eca:	bf00      	nop
 8021ecc:	007ffffe 	.word	0x007ffffe

08021ed0 <_init>:
 8021ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ed2:	bf00      	nop
 8021ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ed6:	bc08      	pop	{r3}
 8021ed8:	469e      	mov	lr, r3
 8021eda:	4770      	bx	lr

08021edc <_fini>:
 8021edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ede:	bf00      	nop
 8021ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ee2:	bc08      	pop	{r3}
 8021ee4:	469e      	mov	lr, r3
 8021ee6:	4770      	bx	lr
