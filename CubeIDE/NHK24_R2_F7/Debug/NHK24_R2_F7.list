
NHK24_R2_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021cac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  08021eb0  08021eb0  00031eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023368  08023368  00040678  2**0
                  CONTENTS
  4 .ARM          00000008  08023368  08023368  00033368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023370  08023370  00040678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08023370  08023370  00033370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023384  08023384  00033384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000538  20000000  08023388  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000538  080238c0  00040538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200005d8  08023960  000405d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001718c  20000678  08023a00  00040678  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20017804  08023a00  00047804  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040678  2**0
                  CONTENTS, READONLY
 14 .comment      00000076  00000000  00000000  000406a6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00036938  00000000  00000000  0004071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007d07  00000000  00000000  00077054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025d8  00000000  00000000  0007ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001d00  00000000  00000000  00081338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00034fb2  00000000  00000000  00083038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034543  00000000  00000000  000b7fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00121507  00000000  00000000  000ec52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000aa74  00000000  00000000  0020da34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  002184a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000678 	.word	0x20000678
 800021c:	00000000 	.word	0x00000000
 8000220:	08021e94 	.word	0x08021e94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000067c 	.word	0x2000067c
 800023c:	08021e94 	.word	0x08021e94

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_frsub>:
 8000310:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__addsf3>
 8000316:	bf00      	nop

08000318 <__aeabi_fsub>:
 8000318:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800031c <__addsf3>:
 800031c:	0042      	lsls	r2, r0, #1
 800031e:	bf1f      	itttt	ne
 8000320:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000324:	ea92 0f03 	teqne	r2, r3
 8000328:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800032c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000330:	d06a      	beq.n	8000408 <__addsf3+0xec>
 8000332:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000336:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800033a:	bfc1      	itttt	gt
 800033c:	18d2      	addgt	r2, r2, r3
 800033e:	4041      	eorgt	r1, r0
 8000340:	4048      	eorgt	r0, r1
 8000342:	4041      	eorgt	r1, r0
 8000344:	bfb8      	it	lt
 8000346:	425b      	neglt	r3, r3
 8000348:	2b19      	cmp	r3, #25
 800034a:	bf88      	it	hi
 800034c:	4770      	bxhi	lr
 800034e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000352:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800035a:	bf18      	it	ne
 800035c:	4240      	negne	r0, r0
 800035e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000362:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000366:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800036a:	bf18      	it	ne
 800036c:	4249      	negne	r1, r1
 800036e:	ea92 0f03 	teq	r2, r3
 8000372:	d03f      	beq.n	80003f4 <__addsf3+0xd8>
 8000374:	f1a2 0201 	sub.w	r2, r2, #1
 8000378:	fa41 fc03 	asr.w	ip, r1, r3
 800037c:	eb10 000c 	adds.w	r0, r0, ip
 8000380:	f1c3 0320 	rsb	r3, r3, #32
 8000384:	fa01 f103 	lsl.w	r1, r1, r3
 8000388:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800038c:	d502      	bpl.n	8000394 <__addsf3+0x78>
 800038e:	4249      	negs	r1, r1
 8000390:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000394:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000398:	d313      	bcc.n	80003c2 <__addsf3+0xa6>
 800039a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800039e:	d306      	bcc.n	80003ae <__addsf3+0x92>
 80003a0:	0840      	lsrs	r0, r0, #1
 80003a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80003a6:	f102 0201 	add.w	r2, r2, #1
 80003aa:	2afe      	cmp	r2, #254	; 0xfe
 80003ac:	d251      	bcs.n	8000452 <__addsf3+0x136>
 80003ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80003b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003b6:	bf08      	it	eq
 80003b8:	f020 0001 	biceq.w	r0, r0, #1
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	4770      	bx	lr
 80003c2:	0049      	lsls	r1, r1, #1
 80003c4:	eb40 0000 	adc.w	r0, r0, r0
 80003c8:	3a01      	subs	r2, #1
 80003ca:	bf28      	it	cs
 80003cc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003d0:	d2ed      	bcs.n	80003ae <__addsf3+0x92>
 80003d2:	fab0 fc80 	clz	ip, r0
 80003d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003da:	ebb2 020c 	subs.w	r2, r2, ip
 80003de:	fa00 f00c 	lsl.w	r0, r0, ip
 80003e2:	bfaa      	itet	ge
 80003e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003e8:	4252      	neglt	r2, r2
 80003ea:	4318      	orrge	r0, r3
 80003ec:	bfbc      	itt	lt
 80003ee:	40d0      	lsrlt	r0, r2
 80003f0:	4318      	orrlt	r0, r3
 80003f2:	4770      	bx	lr
 80003f4:	f092 0f00 	teq	r2, #0
 80003f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003fc:	bf06      	itte	eq
 80003fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000402:	3201      	addeq	r2, #1
 8000404:	3b01      	subne	r3, #1
 8000406:	e7b5      	b.n	8000374 <__addsf3+0x58>
 8000408:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800040c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000410:	bf18      	it	ne
 8000412:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000416:	d021      	beq.n	800045c <__addsf3+0x140>
 8000418:	ea92 0f03 	teq	r2, r3
 800041c:	d004      	beq.n	8000428 <__addsf3+0x10c>
 800041e:	f092 0f00 	teq	r2, #0
 8000422:	bf08      	it	eq
 8000424:	4608      	moveq	r0, r1
 8000426:	4770      	bx	lr
 8000428:	ea90 0f01 	teq	r0, r1
 800042c:	bf1c      	itt	ne
 800042e:	2000      	movne	r0, #0
 8000430:	4770      	bxne	lr
 8000432:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000436:	d104      	bne.n	8000442 <__addsf3+0x126>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	bf28      	it	cs
 800043c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000440:	4770      	bx	lr
 8000442:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000446:	bf3c      	itt	cc
 8000448:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800044c:	4770      	bxcc	lr
 800044e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000452:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000456:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800045a:	4770      	bx	lr
 800045c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000460:	bf16      	itet	ne
 8000462:	4608      	movne	r0, r1
 8000464:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000468:	4601      	movne	r1, r0
 800046a:	0242      	lsls	r2, r0, #9
 800046c:	bf06      	itte	eq
 800046e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000472:	ea90 0f01 	teqeq	r0, r1
 8000476:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800047a:	4770      	bx	lr

0800047c <__aeabi_ui2f>:
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e004      	b.n	800048c <__aeabi_i2f+0x8>
 8000482:	bf00      	nop

08000484 <__aeabi_i2f>:
 8000484:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	ea5f 0c00 	movs.w	ip, r0
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000498:	4601      	mov	r1, r0
 800049a:	f04f 0000 	mov.w	r0, #0
 800049e:	e01c      	b.n	80004da <__aeabi_l2f+0x2a>

080004a0 <__aeabi_ul2f>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	e00a      	b.n	80004c4 <__aeabi_l2f+0x14>
 80004ae:	bf00      	nop

080004b0 <__aeabi_l2f>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80004bc:	d502      	bpl.n	80004c4 <__aeabi_l2f+0x14>
 80004be:	4240      	negs	r0, r0
 80004c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c4:	ea5f 0c01 	movs.w	ip, r1
 80004c8:	bf02      	ittt	eq
 80004ca:	4684      	moveq	ip, r0
 80004cc:	4601      	moveq	r1, r0
 80004ce:	2000      	moveq	r0, #0
 80004d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004d4:	bf08      	it	eq
 80004d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004de:	fabc f28c 	clz	r2, ip
 80004e2:	3a08      	subs	r2, #8
 80004e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004e8:	db10      	blt.n	800050c <__aeabi_l2f+0x5c>
 80004ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ee:	4463      	add	r3, ip
 80004f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	f020 0001 	biceq.w	r0, r0, #1
 800050a:	4770      	bx	lr
 800050c:	f102 0220 	add.w	r2, r2, #32
 8000510:	fa01 fc02 	lsl.w	ip, r1, r2
 8000514:	f1c2 0220 	rsb	r2, r2, #32
 8000518:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800051c:	fa21 f202 	lsr.w	r2, r1, r2
 8000520:	eb43 0002 	adc.w	r0, r3, r2
 8000524:	bf08      	it	eq
 8000526:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800052a:	4770      	bx	lr

0800052c <__aeabi_ldivmod>:
 800052c:	b97b      	cbnz	r3, 800054e <__aeabi_ldivmod+0x22>
 800052e:	b972      	cbnz	r2, 800054e <__aeabi_ldivmod+0x22>
 8000530:	2900      	cmp	r1, #0
 8000532:	bfbe      	ittt	lt
 8000534:	2000      	movlt	r0, #0
 8000536:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800053a:	e006      	blt.n	800054a <__aeabi_ldivmod+0x1e>
 800053c:	bf08      	it	eq
 800053e:	2800      	cmpeq	r0, #0
 8000540:	bf1c      	itt	ne
 8000542:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000546:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800054a:	f000 b9bb 	b.w	80008c4 <__aeabi_idiv0>
 800054e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000552:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000556:	2900      	cmp	r1, #0
 8000558:	db09      	blt.n	800056e <__aeabi_ldivmod+0x42>
 800055a:	2b00      	cmp	r3, #0
 800055c:	db1a      	blt.n	8000594 <__aeabi_ldivmod+0x68>
 800055e:	f000 f84d 	bl	80005fc <__udivmoddi4>
 8000562:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056a:	b004      	add	sp, #16
 800056c:	4770      	bx	lr
 800056e:	4240      	negs	r0, r0
 8000570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	db1b      	blt.n	80005b0 <__aeabi_ldivmod+0x84>
 8000578:	f000 f840 	bl	80005fc <__udivmoddi4>
 800057c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000584:	b004      	add	sp, #16
 8000586:	4240      	negs	r0, r0
 8000588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058c:	4252      	negs	r2, r2
 800058e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000592:	4770      	bx	lr
 8000594:	4252      	negs	r2, r2
 8000596:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059a:	f000 f82f 	bl	80005fc <__udivmoddi4>
 800059e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005a6:	b004      	add	sp, #16
 80005a8:	4240      	negs	r0, r0
 80005aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ae:	4770      	bx	lr
 80005b0:	4252      	negs	r2, r2
 80005b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b6:	f000 f821 	bl	80005fc <__udivmoddi4>
 80005ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005c2:	b004      	add	sp, #16
 80005c4:	4252      	negs	r2, r2
 80005c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ca:	4770      	bx	lr

080005cc <__aeabi_uldivmod>:
 80005cc:	b953      	cbnz	r3, 80005e4 <__aeabi_uldivmod+0x18>
 80005ce:	b94a      	cbnz	r2, 80005e4 <__aeabi_uldivmod+0x18>
 80005d0:	2900      	cmp	r1, #0
 80005d2:	bf08      	it	eq
 80005d4:	2800      	cmpeq	r0, #0
 80005d6:	bf1c      	itt	ne
 80005d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005e0:	f000 b970 	b.w	80008c4 <__aeabi_idiv0>
 80005e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005ec:	f000 f806 	bl	80005fc <__udivmoddi4>
 80005f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005f8:	b004      	add	sp, #16
 80005fa:	4770      	bx	lr

080005fc <__udivmoddi4>:
 80005fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000600:	9e08      	ldr	r6, [sp, #32]
 8000602:	460d      	mov	r5, r1
 8000604:	4604      	mov	r4, r0
 8000606:	460f      	mov	r7, r1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d14a      	bne.n	80006a2 <__udivmoddi4+0xa6>
 800060c:	428a      	cmp	r2, r1
 800060e:	4694      	mov	ip, r2
 8000610:	d965      	bls.n	80006de <__udivmoddi4+0xe2>
 8000612:	fab2 f382 	clz	r3, r2
 8000616:	b143      	cbz	r3, 800062a <__udivmoddi4+0x2e>
 8000618:	fa02 fc03 	lsl.w	ip, r2, r3
 800061c:	f1c3 0220 	rsb	r2, r3, #32
 8000620:	409f      	lsls	r7, r3
 8000622:	fa20 f202 	lsr.w	r2, r0, r2
 8000626:	4317      	orrs	r7, r2
 8000628:	409c      	lsls	r4, r3
 800062a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800062e:	fa1f f58c 	uxth.w	r5, ip
 8000632:	fbb7 f1fe 	udiv	r1, r7, lr
 8000636:	0c22      	lsrs	r2, r4, #16
 8000638:	fb0e 7711 	mls	r7, lr, r1, r7
 800063c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000640:	fb01 f005 	mul.w	r0, r1, r5
 8000644:	4290      	cmp	r0, r2
 8000646:	d90a      	bls.n	800065e <__udivmoddi4+0x62>
 8000648:	eb1c 0202 	adds.w	r2, ip, r2
 800064c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000650:	f080 811c 	bcs.w	800088c <__udivmoddi4+0x290>
 8000654:	4290      	cmp	r0, r2
 8000656:	f240 8119 	bls.w	800088c <__udivmoddi4+0x290>
 800065a:	3902      	subs	r1, #2
 800065c:	4462      	add	r2, ip
 800065e:	1a12      	subs	r2, r2, r0
 8000660:	b2a4      	uxth	r4, r4
 8000662:	fbb2 f0fe 	udiv	r0, r2, lr
 8000666:	fb0e 2210 	mls	r2, lr, r0, r2
 800066a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800066e:	fb00 f505 	mul.w	r5, r0, r5
 8000672:	42a5      	cmp	r5, r4
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x90>
 8000676:	eb1c 0404 	adds.w	r4, ip, r4
 800067a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800067e:	f080 8107 	bcs.w	8000890 <__udivmoddi4+0x294>
 8000682:	42a5      	cmp	r5, r4
 8000684:	f240 8104 	bls.w	8000890 <__udivmoddi4+0x294>
 8000688:	4464      	add	r4, ip
 800068a:	3802      	subs	r0, #2
 800068c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	2100      	movs	r1, #0
 8000694:	b11e      	cbz	r6, 800069e <__udivmoddi4+0xa2>
 8000696:	40dc      	lsrs	r4, r3
 8000698:	2300      	movs	r3, #0
 800069a:	e9c6 4300 	strd	r4, r3, [r6]
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d908      	bls.n	80006b8 <__udivmoddi4+0xbc>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	f000 80ed 	beq.w	8000886 <__udivmoddi4+0x28a>
 80006ac:	2100      	movs	r1, #0
 80006ae:	e9c6 0500 	strd	r0, r5, [r6]
 80006b2:	4608      	mov	r0, r1
 80006b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b8:	fab3 f183 	clz	r1, r3
 80006bc:	2900      	cmp	r1, #0
 80006be:	d149      	bne.n	8000754 <__udivmoddi4+0x158>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d302      	bcc.n	80006ca <__udivmoddi4+0xce>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	f200 80f8 	bhi.w	80008ba <__udivmoddi4+0x2be>
 80006ca:	1a84      	subs	r4, r0, r2
 80006cc:	eb65 0203 	sbc.w	r2, r5, r3
 80006d0:	2001      	movs	r0, #1
 80006d2:	4617      	mov	r7, r2
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d0e2      	beq.n	800069e <__udivmoddi4+0xa2>
 80006d8:	e9c6 4700 	strd	r4, r7, [r6]
 80006dc:	e7df      	b.n	800069e <__udivmoddi4+0xa2>
 80006de:	b902      	cbnz	r2, 80006e2 <__udivmoddi4+0xe6>
 80006e0:	deff      	udf	#255	; 0xff
 80006e2:	fab2 f382 	clz	r3, r2
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f040 8090 	bne.w	800080c <__udivmoddi4+0x210>
 80006ec:	1a8a      	subs	r2, r1, r2
 80006ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f2:	fa1f fe8c 	uxth.w	lr, ip
 80006f6:	2101      	movs	r1, #1
 80006f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80006fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000700:	0c22      	lsrs	r2, r4, #16
 8000702:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000706:	fb0e f005 	mul.w	r0, lr, r5
 800070a:	4290      	cmp	r0, r2
 800070c:	d908      	bls.n	8000720 <__udivmoddi4+0x124>
 800070e:	eb1c 0202 	adds.w	r2, ip, r2
 8000712:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000716:	d202      	bcs.n	800071e <__udivmoddi4+0x122>
 8000718:	4290      	cmp	r0, r2
 800071a:	f200 80cb 	bhi.w	80008b4 <__udivmoddi4+0x2b8>
 800071e:	4645      	mov	r5, r8
 8000720:	1a12      	subs	r2, r2, r0
 8000722:	b2a4      	uxth	r4, r4
 8000724:	fbb2 f0f7 	udiv	r0, r2, r7
 8000728:	fb07 2210 	mls	r2, r7, r0, r2
 800072c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000730:	fb0e fe00 	mul.w	lr, lr, r0
 8000734:	45a6      	cmp	lr, r4
 8000736:	d908      	bls.n	800074a <__udivmoddi4+0x14e>
 8000738:	eb1c 0404 	adds.w	r4, ip, r4
 800073c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000740:	d202      	bcs.n	8000748 <__udivmoddi4+0x14c>
 8000742:	45a6      	cmp	lr, r4
 8000744:	f200 80bb 	bhi.w	80008be <__udivmoddi4+0x2c2>
 8000748:	4610      	mov	r0, r2
 800074a:	eba4 040e 	sub.w	r4, r4, lr
 800074e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000752:	e79f      	b.n	8000694 <__udivmoddi4+0x98>
 8000754:	f1c1 0720 	rsb	r7, r1, #32
 8000758:	408b      	lsls	r3, r1
 800075a:	fa22 fc07 	lsr.w	ip, r2, r7
 800075e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000762:	fa05 f401 	lsl.w	r4, r5, r1
 8000766:	fa20 f307 	lsr.w	r3, r0, r7
 800076a:	40fd      	lsrs	r5, r7
 800076c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000770:	4323      	orrs	r3, r4
 8000772:	fbb5 f8f9 	udiv	r8, r5, r9
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	fb09 5518 	mls	r5, r9, r8, r5
 800077e:	0c1c      	lsrs	r4, r3, #16
 8000780:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000784:	fb08 f50e 	mul.w	r5, r8, lr
 8000788:	42a5      	cmp	r5, r4
 800078a:	fa02 f201 	lsl.w	r2, r2, r1
 800078e:	fa00 f001 	lsl.w	r0, r0, r1
 8000792:	d90b      	bls.n	80007ac <__udivmoddi4+0x1b0>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800079c:	f080 8088 	bcs.w	80008b0 <__udivmoddi4+0x2b4>
 80007a0:	42a5      	cmp	r5, r4
 80007a2:	f240 8085 	bls.w	80008b0 <__udivmoddi4+0x2b4>
 80007a6:	f1a8 0802 	sub.w	r8, r8, #2
 80007aa:	4464      	add	r4, ip
 80007ac:	1b64      	subs	r4, r4, r5
 80007ae:	b29d      	uxth	r5, r3
 80007b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007b4:	fb09 4413 	mls	r4, r9, r3, r4
 80007b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80007c0:	45a6      	cmp	lr, r4
 80007c2:	d908      	bls.n	80007d6 <__udivmoddi4+0x1da>
 80007c4:	eb1c 0404 	adds.w	r4, ip, r4
 80007c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80007cc:	d26c      	bcs.n	80008a8 <__udivmoddi4+0x2ac>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	d96a      	bls.n	80008a8 <__udivmoddi4+0x2ac>
 80007d2:	3b02      	subs	r3, #2
 80007d4:	4464      	add	r4, ip
 80007d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007da:	fba3 9502 	umull	r9, r5, r3, r2
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	42ac      	cmp	r4, r5
 80007e4:	46c8      	mov	r8, r9
 80007e6:	46ae      	mov	lr, r5
 80007e8:	d356      	bcc.n	8000898 <__udivmoddi4+0x29c>
 80007ea:	d053      	beq.n	8000894 <__udivmoddi4+0x298>
 80007ec:	b156      	cbz	r6, 8000804 <__udivmoddi4+0x208>
 80007ee:	ebb0 0208 	subs.w	r2, r0, r8
 80007f2:	eb64 040e 	sbc.w	r4, r4, lr
 80007f6:	fa04 f707 	lsl.w	r7, r4, r7
 80007fa:	40ca      	lsrs	r2, r1
 80007fc:	40cc      	lsrs	r4, r1
 80007fe:	4317      	orrs	r7, r2
 8000800:	e9c6 7400 	strd	r7, r4, [r6]
 8000804:	4618      	mov	r0, r3
 8000806:	2100      	movs	r1, #0
 8000808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080c:	f1c3 0120 	rsb	r1, r3, #32
 8000810:	fa02 fc03 	lsl.w	ip, r2, r3
 8000814:	fa20 f201 	lsr.w	r2, r0, r1
 8000818:	fa25 f101 	lsr.w	r1, r5, r1
 800081c:	409d      	lsls	r5, r3
 800081e:	432a      	orrs	r2, r5
 8000820:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000824:	fa1f fe8c 	uxth.w	lr, ip
 8000828:	fbb1 f0f7 	udiv	r0, r1, r7
 800082c:	fb07 1510 	mls	r5, r7, r0, r1
 8000830:	0c11      	lsrs	r1, r2, #16
 8000832:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000836:	fb00 f50e 	mul.w	r5, r0, lr
 800083a:	428d      	cmp	r5, r1
 800083c:	fa04 f403 	lsl.w	r4, r4, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x258>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800084a:	d22f      	bcs.n	80008ac <__udivmoddi4+0x2b0>
 800084c:	428d      	cmp	r5, r1
 800084e:	d92d      	bls.n	80008ac <__udivmoddi4+0x2b0>
 8000850:	3802      	subs	r0, #2
 8000852:	4461      	add	r1, ip
 8000854:	1b49      	subs	r1, r1, r5
 8000856:	b292      	uxth	r2, r2
 8000858:	fbb1 f5f7 	udiv	r5, r1, r7
 800085c:	fb07 1115 	mls	r1, r7, r5, r1
 8000860:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000864:	fb05 f10e 	mul.w	r1, r5, lr
 8000868:	4291      	cmp	r1, r2
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x282>
 800086c:	eb1c 0202 	adds.w	r2, ip, r2
 8000870:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000874:	d216      	bcs.n	80008a4 <__udivmoddi4+0x2a8>
 8000876:	4291      	cmp	r1, r2
 8000878:	d914      	bls.n	80008a4 <__udivmoddi4+0x2a8>
 800087a:	3d02      	subs	r5, #2
 800087c:	4462      	add	r2, ip
 800087e:	1a52      	subs	r2, r2, r1
 8000880:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000884:	e738      	b.n	80006f8 <__udivmoddi4+0xfc>
 8000886:	4631      	mov	r1, r6
 8000888:	4630      	mov	r0, r6
 800088a:	e708      	b.n	800069e <__udivmoddi4+0xa2>
 800088c:	4639      	mov	r1, r7
 800088e:	e6e6      	b.n	800065e <__udivmoddi4+0x62>
 8000890:	4610      	mov	r0, r2
 8000892:	e6fb      	b.n	800068c <__udivmoddi4+0x90>
 8000894:	4548      	cmp	r0, r9
 8000896:	d2a9      	bcs.n	80007ec <__udivmoddi4+0x1f0>
 8000898:	ebb9 0802 	subs.w	r8, r9, r2
 800089c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008a0:	3b01      	subs	r3, #1
 80008a2:	e7a3      	b.n	80007ec <__udivmoddi4+0x1f0>
 80008a4:	4645      	mov	r5, r8
 80008a6:	e7ea      	b.n	800087e <__udivmoddi4+0x282>
 80008a8:	462b      	mov	r3, r5
 80008aa:	e794      	b.n	80007d6 <__udivmoddi4+0x1da>
 80008ac:	4640      	mov	r0, r8
 80008ae:	e7d1      	b.n	8000854 <__udivmoddi4+0x258>
 80008b0:	46d0      	mov	r8, sl
 80008b2:	e77b      	b.n	80007ac <__udivmoddi4+0x1b0>
 80008b4:	3d02      	subs	r5, #2
 80008b6:	4462      	add	r2, ip
 80008b8:	e732      	b.n	8000720 <__udivmoddi4+0x124>
 80008ba:	4608      	mov	r0, r1
 80008bc:	e70a      	b.n	80006d4 <__udivmoddi4+0xd8>
 80008be:	4464      	add	r4, ip
 80008c0:	3802      	subs	r0, #2
 80008c2:	e742      	b.n	800074a <__udivmoddi4+0x14e>

080008c4 <__aeabi_idiv0>:
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <PushTx8Bytes+0xa0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a24      	ldr	r2, [pc, #144]	; (800096c <PushTx8Bytes+0xa4>)
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	4413      	add	r3, r2
 80008de:	3304      	adds	r3, #4
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <PushTx8Bytes+0xa0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a20      	ldr	r2, [pc, #128]	; (800096c <PushTx8Bytes+0xa4>)
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4413      	add	r3, r2
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 80008f2:	2300      	movs	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
 80008f6:	e010      	b.n	800091a <PushTx8Bytes+0x52>
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	18d1      	adds	r1, r2, r3
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <PushTx8Bytes+0xa0>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	7808      	ldrb	r0, [r1, #0]
 8000906:	4919      	ldr	r1, [pc, #100]	; (800096c <PushTx8Bytes+0xa4>)
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	440a      	add	r2, r1
 800090c:	4413      	add	r3, r2
 800090e:	3308      	adds	r3, #8
 8000910:	4602      	mov	r2, r0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	3301      	adds	r3, #1
 8000918:	75fb      	strb	r3, [r7, #23]
 800091a:	7dfb      	ldrb	r3, [r7, #23]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	429a      	cmp	r2, r3
 8000920:	d8ea      	bhi.n	80008f8 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <PushTx8Bytes+0xa8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d106      	bne.n	8000938 <PushTx8Bytes+0x70>
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <PushTx8Bytes+0xac>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000934:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <PushTx8Bytes+0xac>)
 8000936:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <PushTx8Bytes+0xa0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <PushTx8Bytes+0xa0>)
 8000944:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <PushTx8Bytes+0xa0>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <PushTx8Bytes+0xac>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d102      	bne.n	8000958 <PushTx8Bytes+0x90>
		isfull = 1;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <PushTx8Bytes+0xa8>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	371c      	adds	r7, #28
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000296c 	.word	0x2000296c
 800096c:	20000968 	.word	0x20000968
 8000970:	20002970 	.word	0x20002970
 8000974:	20002968 	.word	0x20002968

08000978 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(CAN_HandleTypeDef* phcan){
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000984:	2304      	movs	r3, #4
 8000986:	617b      	str	r3, [r7, #20]
	txHeader.TransmitGlobalTime = DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3020 	strb.w	r3, [r7, #32]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 800098e:	e039      	b.n	8000a04 <PopSendTx8Bytes+0x8c>
		if (isfull == 0 && readpoint == writepoint)break;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <PopSendTx8Bytes+0xa8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d105      	bne.n	80009a4 <PopSendTx8Bytes+0x2c>
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <PopSendTx8Bytes+0xac>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <PopSendTx8Bytes+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d036      	beq.n	8000a12 <PopSendTx8Bytes+0x9a>

		txHeader.DLC = buffer[readpoint].DLC;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <PopSendTx8Bytes+0xb4>)
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	4413      	add	r3, r2
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	61fb      	str	r3, [r7, #28]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <PopSendTx8Bytes+0xb4>)
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	613b      	str	r3, [r7, #16]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	3308      	adds	r3, #8
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <PopSendTx8Bytes+0xb4>)
 80009cc:	441a      	add	r2, r3
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f004 fcc4 	bl	8005364 <HAL_CAN_AddTxMessage>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret != HAL_OK)return ret;
 80009e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <PopSendTx8Bytes+0x78>
 80009ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ee:	e012      	b.n	8000a16 <PopSendTx8Bytes+0x9e>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <PopSendTx8Bytes+0xac>)
 80009fc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <PopSendTx8Bytes+0xa8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f004 fd7d 	bl	8005504 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1bf      	bne.n	8000990 <PopSendTx8Bytes+0x18>
 8000a10:	e000      	b.n	8000a14 <PopSendTx8Bytes+0x9c>
		if (isfull == 0 && readpoint == writepoint)break;
 8000a12:	bf00      	nop
	}

	return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20002970 	.word	0x20002970
 8000a24:	20002968 	.word	0x20002968
 8000a28:	2000296c 	.word	0x2000296c
 8000a2c:	20000968 	.word	0x20000968

08000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(CAN_HandleTypeDef *phcan){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(phcan != _canlib_phcan)return;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d105      	bne.n	8000a4e <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x1e>
    PopSendTx8Bytes(_canlib_phcan);
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff96 	bl	8000978 <PopSendTx8Bytes>
 8000a4c:	e000      	b.n	8000a50 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x20>
	if(phcan != _canlib_phcan)return;
 8000a4e:	bf00      	nop
}
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000694 	.word	0x20000694

08000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(CAN_HandleTypeDef *phcan){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    if(phcan != _canlib_phcan)return;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d105      	bne.n	8000a7a <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x1e>
	PopSendTx8Bytes(_canlib_phcan);
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff80 	bl	8000978 <PopSendTx8Bytes>
 8000a78:	e000      	b.n	8000a7c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x20>
    if(phcan != _canlib_phcan)return;
 8000a7a:	bf00      	nop
}
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000694 	.word	0x20000694

08000a88 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a8c:	b08e      	sub	sp, #56	; 0x38
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
//	if(phcan != _canlib_phcan)return;
    CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(_canlib_phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000a94:	4b74      	ldr	r3, [pc, #464]	; (8000c68 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	f107 0218 	add.w	r2, r7, #24
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f004 fd64 	bl	800556e <HAL_CAN_GetRxMessage>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <WhenCANRxFifo0MsgPending+0x2e>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000aac:	486f      	ldr	r0, [pc, #444]	; (8000c6c <WhenCANRxFifo0MsgPending+0x1e4>)
 8000aae:	f01f fff9 	bl	8020aa4 <iprintf>
		Error_Handler();
 8000ab2:	f003 fb2d 	bl	8004110 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4698      	mov	r8, r3
 8000abc:	4691      	mov	r9, r2
 8000abe:	4640      	mov	r0, r8
 8000ac0:	4649      	mov	r1, r9
 8000ac2:	f000 fe3c 	bl	800173e <Extract_CAN_Device>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	733a      	strb	r2, [r7, #12]
 8000acc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ad0:	737a      	strb	r2, [r7, #13]
 8000ad2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000ad6:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2200      	movs	r2, #0
 8000adc:	461c      	mov	r4, r3
 8000ade:	4615      	mov	r5, r2
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	f000 fe77 	bl	80017d6 <Extract_CAN_CMD>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000aee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d139      	bne.n	8000b6a <WhenCANRxFifo0MsgPending+0xe2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000afc:	e013      	b.n	8000b26 <WhenCANRxFifo0MsgPending+0x9e>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b06:	495a      	ldr	r1, [pc, #360]	; (8000c70 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000b08:	4603      	mov	r3, r0
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	440b      	add	r3, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	7c3b      	ldrb	r3, [r7, #16]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	f000 80a0 	beq.w	8000c5c <WhenCANRxFifo0MsgPending+0x1d4>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b20:	3301      	adds	r3, #1
 8000b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000b26:	7b3b      	ldrb	r3, [r7, #12]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b52      	ldr	r3, [pc, #328]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b2c:	5c9b      	ldrb	r3, [r3, r2]
 8000b2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d3e3      	bcc.n	8000afe <WhenCANRxFifo0MsgPending+0x76>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	7b3b      	ldrb	r3, [r7, #12]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b40:	5c9b      	ldrb	r3, [r3, r2]
 8000b42:	461c      	mov	r4, r3
 8000b44:	7c38      	ldrb	r0, [r7, #16]
 8000b46:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000b48:	460b      	mov	r3, r1
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	4413      	add	r3, r2
 8000b50:	4423      	add	r3, r4
 8000b52:	4602      	mov	r2, r0
 8000b54:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000b56:	7b3b      	ldrb	r3, [r7, #12]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b5c:	5c9b      	ldrb	r3, [r3, r2]
 8000b5e:	7b3a      	ldrb	r2, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2d9      	uxtb	r1, r3
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b66:	5499      	strb	r1, [r3, r2]
 8000b68:	e04a      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
	}else if(extracted_cmd == FB_CMD){
 8000b6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d146      	bne.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
		if (can_device.node_type == NODE_MCMD1){
 8000b72:	7b3b      	ldrb	r3, [r7, #12]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d10d      	bne.n	8000b94 <WhenCANRxFifo0MsgPending+0x10c>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000b84:	4413      	add	r3, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	cb03      	ldmia	r3!, {r0, r1}
 8000b8e:	6010      	str	r0, [r2, #0]
 8000b90:	6051      	str	r1, [r2, #4]
 8000b92:	e035      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000b94:	7b3b      	ldrb	r3, [r7, #12]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d10d      	bne.n	8000bb6 <WhenCANRxFifo0MsgPending+0x12e>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	7bba      	ldrb	r2, [r7, #14]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4a35      	ldr	r2, [pc, #212]	; (8000c7c <WhenCANRxFifo0MsgPending+0x1f4>)
 8000ba6:	4413      	add	r3, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	cb03      	ldmia	r3!, {r0, r1}
 8000bb0:	6010      	str	r0, [r2, #0]
 8000bb2:	6051      	str	r1, [r2, #4]
 8000bb4:	e024      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000bb6:	7b3b      	ldrb	r3, [r7, #12]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d10d      	bne.n	8000bd8 <WhenCANRxFifo0MsgPending+0x150>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	7bba      	ldrb	r2, [r7, #14]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4a2e      	ldr	r2, [pc, #184]	; (8000c80 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000bc8:	4413      	add	r3, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	cb03      	ldmia	r3!, {r0, r1}
 8000bd2:	6010      	str	r0, [r2, #0]
 8000bd4:	6051      	str	r1, [r2, #4]
 8000bd6:	e013      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d10d      	bne.n	8000bfa <WhenCANRxFifo0MsgPending+0x172>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	7bba      	ldrb	r2, [r7, #14]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <WhenCANRxFifo0MsgPending+0x1fc>)
 8000bea:	4413      	add	r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	cb03      	ldmia	r3!, {r0, r1}
 8000bf4:	6010      	str	r0, [r2, #0]
 8000bf6:	6051      	str	r1, [r2, #4]
 8000bf8:	e002      	b.n	8000c00 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000bfa:	4823      	ldr	r0, [pc, #140]	; (8000c88 <WhenCANRxFifo0MsgPending+0x200>)
 8000bfc:	f01f ff52 	bl	8020aa4 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c02:	785a      	ldrb	r2, [r3, #1]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d128      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c0e:	789a      	ldrb	r2, [r3, #2]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d122      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c1a:	78da      	ldrb	r2, [r3, #3]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d11c      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c26:	791a      	ldrb	r2, [r3, #4]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d116      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c32:	795a      	ldrb	r2, [r3, #5]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d110      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c3e:	799a      	ldrb	r2, [r3, #6]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	795b      	ldrb	r3, [r3, #5]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d10a      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000c4a:	7a1a      	ldrb	r2, [r3, #8]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	799b      	ldrb	r3, [r3, #6]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d104      	bne.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
		all_node_detected = 1;
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <WhenCANRxFifo0MsgPending+0x204>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e000      	b.n	8000c5e <WhenCANRxFifo0MsgPending+0x1d6>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c5c:	bf00      	nop
	}
}
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c66:	bf00      	nop
 8000c68:	20000694 	.word	0x20000694
 8000c6c:	08021eb0 	.word	0x08021eb0
 8000c70:	200006a8 	.word	0x200006a8
 8000c74:	2000069c 	.word	0x2000069c
 8000c78:	200006e8 	.word	0x200006e8
 8000c7c:	20000788 	.word	0x20000788
 8000c80:	20000828 	.word	0x20000828
 8000c84:	200008c8 	.word	0x200008c8
 8000c88:	08021ec8 	.word	0x08021ec8
 8000c8c:	20000698 	.word	0x20000698

08000c90 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000cac:	2300      	movs	r3, #0
 8000cae:	77fb      	strb	r3, [r7, #31]
 8000cb0:	e015      	b.n	8000cde <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f7ff fe01 	bl	80008c8 <PushTx8Bytes>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <SendBytes+0x48>
			Error_Handler();
 8000cd0:	f003 fa1e 	bl	8004110 <Error_Handler>
			return ret;
 8000cd4:	7cfb      	ldrb	r3, [r7, #19]
 8000cd6:	e02a      	b.n	8000d2e <SendBytes+0x9e>
	for (uint8_t i = 0; i < quotient; i++){
 8000cd8:	7ffb      	ldrb	r3, [r7, #31]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	77fb      	strb	r3, [r7, #31]
 8000cde:	7ffb      	ldrb	r3, [r7, #31]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d8e5      	bhi.n	8000cb2 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d011      	beq.n	8000d10 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff fde5 	bl	80008c8 <PushTx8Bytes>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000d02:	7cfb      	ldrb	r3, [r7, #19]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <SendBytes+0x80>
			Error_Handler();
 8000d08:	f003 fa02 	bl	8004110 <Error_Handler>
			return ret;
 8000d0c:	7cfb      	ldrb	r3, [r7, #19]
 8000d0e:	e00e      	b.n	8000d2e <SendBytes+0x9e>
		}
	}

	ret = PopSendTx8Bytes(_canlib_phcan);
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <SendBytes+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe2f 	bl	8000978 <PopSendTx8Bytes>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000d1e:	7cfb      	ldrb	r3, [r7, #19]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <SendBytes+0x9c>
		Error_Handler();
 8000d24:	f003 f9f4 	bl	8004110 <Error_Handler>
		return ret;
 8000d28:	7cfb      	ldrb	r3, [r7, #19]
 8000d2a:	e000      	b.n	8000d2e <SendBytes+0x9e>
	}

	return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000694 	.word	0x20000694

08000d3c <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
    _canlib_phcan = _hcan;
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <CAN_SystemInit+0x30>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <CAN_SystemInit+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d56:	e029      	b.n	8000dac <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000d58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <CAN_SystemInit+0x38>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d68:	e017      	b.n	8000d9a <CAN_SystemInit+0x5e>
 8000d6a:	bf00      	nop
 8000d6c:	20000694 	.word	0x20000694
 8000d70:	20000698 	.word	0x20000698
 8000d74:	2000069c 	.word	0x2000069c
			node_id_list[type][i] = 0xff;
 8000d78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000d7c:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000d80:	48d7      	ldr	r0, [pc, #860]	; (80010e0 <CAN_SystemInit+0x3a4>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	4403      	add	r3, r0
 8000d8a:	440b      	add	r3, r1
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000d90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d94:	3301      	adds	r3, #1
 8000d96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d9ea      	bls.n	8000d78 <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	3301      	adds	r3, #1
 8000da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d9d1      	bls.n	8000d58 <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
	sFilterConfig.FilterBank = 15;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000dcc:	2300      	movs	r3, #0
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fc86 	bl	80016e4 <Make_CAN_ID>
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	0b42      	lsrs	r2, r0, #13
 8000de2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000de6:	0b4b      	lsrs	r3, r1, #13
 8000de8:	4613      	mov	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000dec:	231f      	movs	r3, #31
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 fc76 	bl	80016e4 <Make_CAN_ID>
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	0b42      	lsrs	r2, r0, #13
 8000e02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e06:	0b4b      	lsrs	r3, r1, #13
 8000e08:	4613      	mov	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 fc66 	bl	80016e4 <Make_CAN_ID>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e24:	4013      	ands	r3, r2
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e2c:	231f      	movs	r3, #31
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 fc56 	bl	80016e4 <Make_CAN_ID>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00da      	lsls	r2, r3, #3
 8000e40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e44:	4013      	ands	r3, r2
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000e4c:	4ba5      	ldr	r3, [pc, #660]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f107 020c 	add.w	r2, r7, #12
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 f954 	bl	8005104 <HAL_CAN_ConfigFilter>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000e62:	f003 f955 	bl	8004110 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 16;
 8000e66:	2310      	movs	r3, #16
 8000e68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fc37 	bl	80016e4 <Make_CAN_ID>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	0b42      	lsrs	r2, r0, #13
 8000e80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e84:	0b4b      	lsrs	r3, r1, #13
 8000e86:	4613      	mov	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000e8a:	231f      	movs	r3, #31
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2002      	movs	r0, #2
 8000e92:	f000 fc27 	bl	80016e4 <Make_CAN_ID>
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	0b42      	lsrs	r2, r0, #13
 8000ea0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ea4:	0b4b      	lsrs	r3, r1, #13
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f000 fc17 	bl	80016e4 <Make_CAN_ID>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00da      	lsls	r2, r3, #3
 8000ebe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f000 fc07 	bl	80016e4 <Make_CAN_ID>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4613      	mov	r3, r2
 8000edc:	00da      	lsls	r2, r3, #3
 8000ede:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000eea:	4b7e      	ldr	r3, [pc, #504]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 f905 	bl	8005104 <HAL_CAN_ConfigFilter>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000f00:	f003 f906 	bl	8004110 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 17;
 8000f04:	2311      	movs	r3, #17
 8000f06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 fbe8 	bl	80016e4 <Make_CAN_ID>
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	0b42      	lsrs	r2, r0, #13
 8000f1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f22:	0b4b      	lsrs	r3, r1, #13
 8000f24:	4613      	mov	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000f28:	231f      	movs	r3, #31
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 fbd8 	bl	80016e4 <Make_CAN_ID>
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	0b42      	lsrs	r2, r0, #13
 8000f3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f42:	0b4b      	lsrs	r3, r1, #13
 8000f44:	4613      	mov	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 fbc8 	bl	80016e4 <Make_CAN_ID>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00da      	lsls	r2, r3, #3
 8000f5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f60:	4013      	ands	r3, r2
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000f68:	231f      	movs	r3, #31
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 fbb8 	bl	80016e4 <Make_CAN_ID>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00da      	lsls	r2, r3, #3
 8000f7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f80:	4013      	ands	r3, r2
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000f88:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f8b6 	bl	8005104 <HAL_CAN_ConfigFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000f9e:	f003 f8b7 	bl	8004110 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 18;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 fb99 	bl	80016e4 <Make_CAN_ID>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	0b42      	lsrs	r2, r0, #13
 8000fbc:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000fc0:	0b4b      	lsrs	r3, r1, #13
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fb89 	bl	80016e4 <Make_CAN_ID>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	0b42      	lsrs	r2, r0, #13
 8000fdc:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000fe0:	0b4b      	lsrs	r3, r1, #13
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fb79 	bl	80016e4 <Make_CAN_ID>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00da      	lsls	r2, r3, #3
 8000ffa:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ffe:	4013      	ands	r3, r2
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001006:	231f      	movs	r3, #31
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2000      	movs	r0, #0
 800100e:	f000 fb69 	bl	80016e4 <Make_CAN_ID>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4613      	mov	r3, r2
 8001018:	00da      	lsls	r2, r3, #3
 800101a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800101e:	4013      	ands	r3, r2
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <CAN_SystemInit+0x3a8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f004 f867 	bl	8005104 <HAL_CAN_ConfigFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 800103c:	f003 f868 	bl	8004110 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 19;
 8001040:	2313      	movs	r3, #19
 8001042:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8001044:	2300      	movs	r3, #0
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2004      	movs	r0, #4
 800104c:	f000 fb4a 	bl	80016e4 <Make_CAN_ID>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	0b42      	lsrs	r2, r0, #13
 800105a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800105e:	0b4b      	lsrs	r3, r1, #13
 8001060:	4613      	mov	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8001064:	231f      	movs	r3, #31
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2004      	movs	r0, #4
 800106c:	f000 fb3a 	bl	80016e4 <Make_CAN_ID>
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	0b42      	lsrs	r2, r0, #13
 800107a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800107e:	0b4b      	lsrs	r3, r1, #13
 8001080:	4613      	mov	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8001084:	2300      	movs	r3, #0
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2004      	movs	r0, #4
 800108c:	f000 fb2a 	bl	80016e4 <Make_CAN_ID>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4613      	mov	r3, r2
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800109c:	4013      	ands	r3, r2
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010a4:	231f      	movs	r3, #31
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2004      	movs	r0, #4
 80010ac:	f000 fb1a 	bl	80016e4 <Make_CAN_ID>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4613      	mov	r3, r2
 80010b6:	00da      	lsls	r2, r3, #3
 80010b8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010bc:	4013      	ands	r3, r2
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <CAN_SystemInit+0x3a8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f107 020c 	add.w	r2, r7, #12
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f818 	bl	8005104 <HAL_CAN_ConfigFilter>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 80010da:	f003 f819 	bl	8004110 <Error_Handler>
 80010de:	e003      	b.n	80010e8 <CAN_SystemInit+0x3ac>
 80010e0:	200006a8 	.word	0x200006a8
 80010e4:	20000694 	.word	0x20000694
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 20;
 80010e8:	2314      	movs	r3, #20
 80010ea:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80010ec:	2300      	movs	r3, #0
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2005      	movs	r0, #5
 80010f4:	f000 faf6 	bl	80016e4 <Make_CAN_ID>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	0b42      	lsrs	r2, r0, #13
 8001102:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001106:	0b4b      	lsrs	r3, r1, #13
 8001108:	4613      	mov	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 800110c:	231f      	movs	r3, #31
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2005      	movs	r0, #5
 8001114:	f000 fae6 	bl	80016e4 <Make_CAN_ID>
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	0b42      	lsrs	r2, r0, #13
 8001122:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001126:	0b4b      	lsrs	r3, r1, #13
 8001128:	4613      	mov	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800112c:	2300      	movs	r3, #0
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2005      	movs	r0, #5
 8001134:	f000 fad6 	bl	80016e4 <Make_CAN_ID>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4613      	mov	r3, r2
 800113e:	00da      	lsls	r2, r3, #3
 8001140:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001144:	4013      	ands	r3, r2
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800114c:	231f      	movs	r3, #31
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2005      	movs	r0, #5
 8001154:	f000 fac6 	bl	80016e4 <Make_CAN_ID>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4613      	mov	r3, r2
 800115e:	00da      	lsls	r2, r3, #3
 8001160:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001164:	4013      	ands	r3, r2
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <CAN_SystemInit+0x544>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f003 ffc4 	bl	8005104 <HAL_CAN_ConfigFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8001182:	f002 ffc5 	bl	8004110 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 21;
 8001186:	2315      	movs	r3, #21
 8001188:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 800118a:	2300      	movs	r3, #0
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2006      	movs	r0, #6
 8001192:	f000 faa7 	bl	80016e4 <Make_CAN_ID>
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	0b42      	lsrs	r2, r0, #13
 80011a0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011a4:	0b4b      	lsrs	r3, r1, #13
 80011a6:	4613      	mov	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 80011aa:	231f      	movs	r3, #31
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2006      	movs	r0, #6
 80011b2:	f000 fa97 	bl	80016e4 <Make_CAN_ID>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	0b42      	lsrs	r2, r0, #13
 80011c0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011c4:	0b4b      	lsrs	r3, r1, #13
 80011c6:	4613      	mov	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011ca:	2300      	movs	r3, #0
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2006      	movs	r0, #6
 80011d2:	f000 fa87 	bl	80016e4 <Make_CAN_ID>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4613      	mov	r3, r2
 80011dc:	00da      	lsls	r2, r3, #3
 80011de:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80011e2:	4013      	ands	r3, r2
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80011ea:	231f      	movs	r3, #31
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2006      	movs	r0, #6
 80011f2:	f000 fa77 	bl	80016e4 <Make_CAN_ID>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4613      	mov	r3, r2
 80011fc:	00da      	lsls	r2, r3, #3
 80011fe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001202:	4013      	ands	r3, r2
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <CAN_SystemInit+0x544>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f003 ff75 	bl	8005104 <HAL_CAN_ConfigFilter>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001220:	f002 ff76 	bl	8004110 <Error_Handler>
	}

	if (HAL_CAN_Start(_canlib_phcan) != HAL_OK){
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <CAN_SystemInit+0x544>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f857 	bl	80052dc <HAL_CAN_Start>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <CAN_SystemInit+0x548>)
 8001236:	f01f fc9b 	bl	8020b70 <puts>
		Error_Handler();
 800123a:	f002 ff69 	bl	8004110 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <CAN_SystemInit+0x544>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2102      	movs	r1, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f004 faa4 	bl	8005792 <HAL_CAN_ActivateNotification>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <CAN_SystemInit+0x54c>)
 8001252:	f01f fc27 	bl	8020aa4 <iprintf>
		Error_Handler();
 8001256:	f002 ff5b 	bl	8004110 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <CAN_SystemInit+0x544>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fa96 	bl	8005792 <HAL_CAN_ActivateNotification>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <CAN_SystemInit+0x54c>)
 800126e:	f01f fc19 	bl	8020aa4 <iprintf>
		Error_Handler();
 8001272:	f002 ff4d 	bl	8004110 <Error_Handler>
	}
}
 8001276:	bf00      	nop
 8001278:	3738      	adds	r7, #56	; 0x38
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000694 	.word	0x20000694
 8001284:	08021ed0 	.word	0x08021ed0
 8001288:	08021ee0 	.word	0x08021ee0

0800128c <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(num_of->mcmd1 == 0 && num_of->mcmd2 == 0 && num_of->mcmd3 == 0 && num_of->mcmd4 == 0 && num_of->air == 0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d122      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11e      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	789b      	ldrb	r3, [r3, #2]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11a      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	795b      	ldrb	r3, [r3, #5]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d116      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d112      	bne.n	80012e2 <CAN_WaitConnect+0x56>
		&& num_of->servo == 0 && num_of->other == 0){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10e      	bne.n	80012e2 <CAN_WaitConnect+0x56>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	799b      	ldrb	r3, [r3, #6]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10a      	bne.n	80012e2 <CAN_WaitConnect+0x56>
		all_node_detected = 1;
 80012cc:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <CAN_WaitConnect+0x17c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
	}
	while (all_node_detected == 0){
 80012d2:	e006      	b.n	80012e2 <CAN_WaitConnect+0x56>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 80012d4:	484d      	ldr	r0, [pc, #308]	; (800140c <CAN_WaitConnect+0x180>)
 80012d6:	f01f fbe5 	bl	8020aa4 <iprintf>
		HAL_Delay(500);
 80012da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012de:	f003 fdf1 	bl	8004ec4 <HAL_Delay>
	while (all_node_detected == 0){
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <CAN_WaitConnect+0x17c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f3      	beq.n	80012d4 <CAN_WaitConnect+0x48>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e00a      	b.n	8001308 <CAN_WaitConnect+0x7c>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4a46      	ldr	r2, [pc, #280]	; (8001410 <CAN_WaitConnect+0x184>)
 80012f6:	4413      	add	r3, r2
 80012f8:	79db      	ldrb	r3, [r3, #7]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4845      	ldr	r0, [pc, #276]	; (8001414 <CAN_WaitConnect+0x188>)
 80012fe:	f01f fbd1 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	3301      	adds	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3ef      	bcc.n	80012f2 <CAN_WaitConnect+0x66>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	73bb      	strb	r3, [r7, #14]
 8001316:	e00a      	b.n	800132e <CAN_WaitConnect+0xa2>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <CAN_WaitConnect+0x184>)
 800131c:	4413      	add	r3, r2
 800131e:	7b9b      	ldrb	r3, [r3, #14]
 8001320:	4619      	mov	r1, r3
 8001322:	483d      	ldr	r0, [pc, #244]	; (8001418 <CAN_WaitConnect+0x18c>)
 8001324:	f01f fbbe 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	3301      	adds	r3, #1
 800132c:	73bb      	strb	r3, [r7, #14]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	7bba      	ldrb	r2, [r7, #14]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3ef      	bcc.n	8001318 <CAN_WaitConnect+0x8c>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	737b      	strb	r3, [r7, #13]
 800133c:	e00a      	b.n	8001354 <CAN_WaitConnect+0xc8>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 800133e:	7b7b      	ldrb	r3, [r7, #13]
 8001340:	4a33      	ldr	r2, [pc, #204]	; (8001410 <CAN_WaitConnect+0x184>)
 8001342:	4413      	add	r3, r2
 8001344:	7d5b      	ldrb	r3, [r3, #21]
 8001346:	4619      	mov	r1, r3
 8001348:	4834      	ldr	r0, [pc, #208]	; (800141c <CAN_WaitConnect+0x190>)
 800134a:	f01f fbab 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	3301      	adds	r3, #1
 8001352:	737b      	strb	r3, [r7, #13]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	7b7a      	ldrb	r2, [r7, #13]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3ef      	bcc.n	800133e <CAN_WaitConnect+0xb2>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	733b      	strb	r3, [r7, #12]
 8001362:	e00b      	b.n	800137c <CAN_WaitConnect+0xf0>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8001364:	7b3b      	ldrb	r3, [r7, #12]
 8001366:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <CAN_WaitConnect+0x184>)
 8001368:	4413      	add	r3, r2
 800136a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800136e:	4619      	mov	r1, r3
 8001370:	482b      	ldr	r0, [pc, #172]	; (8001420 <CAN_WaitConnect+0x194>)
 8001372:	f01f fb97 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	733b      	strb	r3, [r7, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	795b      	ldrb	r3, [r3, #5]
 8001380:	7b3a      	ldrb	r2, [r7, #12]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3ee      	bcc.n	8001364 <CAN_WaitConnect+0xd8>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	72fb      	strb	r3, [r7, #11]
 800138a:	e00a      	b.n	80013a2 <CAN_WaitConnect+0x116>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <CAN_WaitConnect+0x184>)
 8001390:	4413      	add	r3, r2
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	4619      	mov	r1, r3
 8001396:	4823      	ldr	r0, [pc, #140]	; (8001424 <CAN_WaitConnect+0x198>)
 8001398:	f01f fb84 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	3301      	adds	r3, #1
 80013a0:	72fb      	strb	r3, [r7, #11]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	7afa      	ldrb	r2, [r7, #11]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3ef      	bcc.n	800138c <CAN_WaitConnect+0x100>
	for (uint8_t i = 0; i < num_of->air; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	72bb      	strb	r3, [r7, #10]
 80013b0:	e00b      	b.n	80013ca <CAN_WaitConnect+0x13e>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80013b2:	7abb      	ldrb	r3, [r7, #10]
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <CAN_WaitConnect+0x184>)
 80013b6:	4413      	add	r3, r2
 80013b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <CAN_WaitConnect+0x19c>)
 80013c0:	f01f fb70 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	3301      	adds	r3, #1
 80013c8:	72bb      	strb	r3, [r7, #10]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	7aba      	ldrb	r2, [r7, #10]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3ee      	bcc.n	80013b2 <CAN_WaitConnect+0x126>
	for (uint8_t i = 0; i < num_of->other; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	727b      	strb	r3, [r7, #9]
 80013d8:	e00b      	b.n	80013f2 <CAN_WaitConnect+0x166>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 80013da:	7a7b      	ldrb	r3, [r7, #9]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <CAN_WaitConnect+0x184>)
 80013de:	4413      	add	r3, r2
 80013e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013e4:	4619      	mov	r1, r3
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <CAN_WaitConnect+0x1a0>)
 80013e8:	f01f fb5c 	bl	8020aa4 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 80013ec:	7a7b      	ldrb	r3, [r7, #9]
 80013ee:	3301      	adds	r3, #1
 80013f0:	727b      	strb	r3, [r7, #9]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	7a7a      	ldrb	r2, [r7, #9]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3ee      	bcc.n	80013da <CAN_WaitConnect+0x14e>
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000698 	.word	0x20000698
 800140c:	08021f04 	.word	0x08021f04
 8001410:	200006a8 	.word	0x200006a8
 8001414:	08021f24 	.word	0x08021f24
 8001418:	08021f34 	.word	0x08021f34
 800141c:	08021f44 	.word	0x08021f44
 8001420:	08021f54 	.word	0x08021f54
 8001424:	08021f64 	.word	0x08021f64
 8001428:	08021f74 	.word	0x08021f74
 800142c:	08021f80 	.word	0x08021f80

08001430 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2105      	movs	r1, #5
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f922 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2208      	movs	r2, #8
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fc18 	bl	8000c90 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2106      	movs	r1, #6
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f90e 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2208      	movs	r2, #8
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fc04 	bl	8000c90 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001492:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2107      	movs	r1, #7
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f8fa 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2208      	movs	r2, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fbf0 	bl	8000c90 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7d1b      	ldrb	r3, [r3, #20]
 80014b4:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014bc:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014c4:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014cc:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	78db      	ldrb	r3, [r3, #3]
 80014d2:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014da:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2108      	movs	r1, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f8d6 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2206      	movs	r2, #6
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fbcc 	bl	8000c90 <SendBytes>
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	79db      	ldrb	r3, [r3, #7]
 8001518:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f8b4 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fbaa 	bl	8000c90 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2103      	movs	r1, #3
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f8a0 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2208      	movs	r2, #8
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb96 	bl	8000c90 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2104      	movs	r1, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f88c 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb82 	bl	8000c90 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f003 fc99 	bl	8004ec4 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff4c 	bl	8001430 <MCMD_ChangeControl>
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2109      	movs	r1, #9
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f870 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb66 	bl	8000c90 <SendBytes>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	210a      	movs	r1, #10
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f85a 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2204      	movs	r2, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fb50 	bl	8000c90 <SendBytes>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	210c      	movs	r1, #12
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f842 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	463b      	mov	r3, r7
 8001616:	2204      	movs	r2, #4
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fb39 	bl	8000c90 <SendBytes>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001632:	2101      	movs	r1, #1
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f82c 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	1cfb      	adds	r3, r7, #3
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fb23 	bl	8000c90 <SendBytes>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <AirCylinder_Init+0x2e>
		Error_Handler();
 8001650:	f002 fd5e 	bl	8004110 <Error_Handler>
	}
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001668:	2102      	movs	r1, #2
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f811 	bl	8001692 <Make_CAN_ID_from_CAN_Device>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	1cfb      	adds	r3, r7, #3
 8001678:	2201      	movs	r2, #1
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fb08 	bl	8000c90 <SendBytes>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001686:	f002 fd43 	bl	8004110 <Error_Handler>
	}
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001692:	b4b0      	push	{r4, r5, r7}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	02db      	lsls	r3, r3, #11
 80016ac:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	4313      	orrs	r3, r2
 80016ce:	17da      	asrs	r2, r3, #31
 80016d0:	461c      	mov	r4, r3
 80016d2:	4615      	mov	r5, r2
 80016d4:	4622      	mov	r2, r4
 80016d6:	462b      	mov	r3, r5
}
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bcb0      	pop	{r4, r5, r7}
 80016e2:	4770      	bx	lr

080016e4 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80016e4:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4604      	mov	r4, r0
 80016ee:	4608      	mov	r0, r1
 80016f0:	4611      	mov	r1, r2
 80016f2:	461a      	mov	r2, r3
 80016f4:	4623      	mov	r3, r4
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71bb      	strb	r3, [r7, #6]
 80016fc:	460b      	mov	r3, r1
 80016fe:	717b      	strb	r3, [r7, #5]
 8001700:	4613      	mov	r3, r2
 8001702:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	02db      	lsls	r3, r3, #11
 8001708:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001714:	431a      	orrs	r2, r3
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	b2db      	uxtb	r3, r3
 800171c:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800171e:	793b      	ldrb	r3, [r7, #4]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	4313      	orrs	r3, r2
 8001726:	17da      	asrs	r2, r3, #31
 8001728:	4698      	mov	r8, r3
 800172a:	4691      	mov	r9, r2
 800172c:	4642      	mov	r2, r8
 800172e:	464b      	mov	r3, r9
}
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800173c:	4770      	bx	lr

0800173e <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	0942      	lsrs	r2, r0, #5
 8001756:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800175a:	094b      	lsrs	r3, r1, #5
 800175c:	b2d3      	uxtb	r3, r2
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	b2db      	uxtb	r3, r3
 8001764:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001766:	e9d7 0100 	ldrd	r0, r1, [r7]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	0a02      	lsrs	r2, r0, #8
 8001774:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001778:	0a0b      	lsrs	r3, r1, #8
 800177a:	b2d3      	uxtb	r3, r2
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	b2db      	uxtb	r3, r3
 8001782:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001784:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	0ac2      	lsrs	r2, r0, #11
 8001792:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001796:	0acb      	lsrs	r3, r1, #11
 8001798:	b2d3      	uxtb	r3, r2
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	723b      	strb	r3, [r7, #8]
    return ans;
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4611      	mov	r1, r2
 80017ae:	8019      	strh	r1, [r3, #0]
 80017b0:	3302      	adds	r3, #2
 80017b2:	0c12      	lsrs	r2, r2, #16
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	7b3a      	ldrb	r2, [r7, #12]
 80017ba:	f362 0307 	bfi	r3, r2, #0, #8
 80017be:	7b7a      	ldrb	r2, [r7, #13]
 80017c0:	f362 230f 	bfi	r3, r2, #8, #8
 80017c4:	7bba      	ldrb	r2, [r7, #14]
 80017c6:	f362 4317 	bfi	r3, r2, #16, #8
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	e9c7 0100 	strd	r0, r1, [r7]
 80017e0:	783b      	ldrb	r3, [r7, #0]
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <clip_f>:


#include "C620_Control.h"
#include "math.h"

float clip_f(float value, float min, float max){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80017fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001802:	ed87 1a01 	vstr	s2, [r7, #4]
    return fminf(max, fmaxf(value, min));
 8001806:	edd7 0a02 	vldr	s1, [r7, #8]
 800180a:	ed97 0a03 	vldr	s0, [r7, #12]
 800180e:	f020 faef 	bl	8021df0 <fmaxf>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	eef0 0a67 	vmov.f32	s1, s15
 800181a:	ed97 0a01 	vldr	s0, [r7, #4]
 800181e:	f020 fb02 	bl	8021e26 <fminf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <C620_PID_Ctrl_init>:

void C620_PID_Ctrl_init(C620_PID_StructTypedef *params) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    params->_integral = 0.0f;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
    params->_prev_value = 0.0f;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <C620_PID_Ctrl_AW>:
    float diff = (value_diff - params->_prev_value);  // 差分
    params->_prev_value = value_diff;
    return (value_diff * params->kp + params->_integral * params->ki + diff * params->kd + target_value * params->kff);
}

float C620_PID_Ctrl_AW(C620_PID_StructTypedef* params, float value_diff, uint8_t accel_limit_enable, float max_value, float update_freq){
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6178      	str	r0, [r7, #20]
 800185c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001860:	460b      	mov	r3, r1
 8001862:	edc7 0a02 	vstr	s1, [r7, #8]
 8001866:	ed87 1a01 	vstr	s2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
    float integral = params->_integral + (value_diff + (params->_prev_value)) / 2.0f / update_freq; // 積分(台形近似)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	edd3 6a05 	vldr	s13, [r3, #20]
 8001878:	edd7 7a04 	vldr	s15, [r7, #16]
 800187c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001884:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001888:	edd7 6a01 	vldr	s13, [r7, #4]
 800188c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	edc7 7a08 	vstr	s15, [r7, #32]
    float diff = (value_diff - params->_prev_value);  // 差分
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	edd3 7a05 	vldr	s15, [r3, #20]
 800189e:	ed97 7a04 	vldr	s14, [r7, #16]
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	edc7 7a07 	vstr	s15, [r7, #28]
    float ans = (value_diff * params->kp + integral * params->ki + diff * params->kd);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	ed93 7a00 	vldr	s14, [r3]
 80018b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80018be:	edd7 7a08 	vldr	s15, [r7, #32]
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80018d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if(accel_limit_enable && fabsf(ans) > max_value){
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04a      	beq.n	800197c <C620_PID_Ctrl_AW+0x128>
 80018e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ea:	eef0 7ae7 	vabs.f32	s15, s15
 80018ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80018f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d53f      	bpl.n	800197c <C620_PID_Ctrl_AW+0x128>
        params->_integral += (0.0f + (params->_prev_value)) / 2.0f / update_freq;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	edd3 7a05 	vldr	s15, [r3, #20]
 8001908:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001998 <C620_PID_Ctrl_AW+0x144>
 800190c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001910:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001914:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001918:	edd7 6a01 	vldr	s13, [r7, #4]
 800191c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	edc3 7a04 	vstr	s15, [r3, #16]
        ans = clip_f(value_diff * params->kp + params->_integral * params->ki + diff * params->kd, -max_value, max_value);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	edd7 7a04 	vldr	s15, [r7, #16]
 8001934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	edd3 6a04 	vldr	s13, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	edd3 7a01 	vldr	s15, [r3, #4]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001952:	edd7 7a07 	vldr	s15, [r7, #28]
 8001956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001962:	eef1 7a67 	vneg.f32	s15, s15
 8001966:	ed97 1a02 	vldr	s2, [r7, #8]
 800196a:	eef0 0a67 	vmov.f32	s1, s15
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	f7ff ff3f 	bl	80017f4 <clip_f>
 8001976:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800197a:	e002      	b.n	8001982 <C620_PID_Ctrl_AW+0x12e>
    }else{
        params->_integral = integral;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	611a      	str	r2, [r3, #16]
    };
    params->_prev_value = value_diff;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	615a      	str	r2, [r3, #20]
    return ans;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	ee07 3a90 	vmov	s15, r3
}
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	00000000 	.word	0x00000000

0800199c <_clip_f>:
#include "CAN_C620_System.h"
#include "math.h"
#include "stdio.h"


float _clip_f(float var, float ref) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80019a6:	edc7 0a00 	vstr	s1, [r7]
    float abs_ref = fabsf(ref);
 80019aa:	edd7 7a00 	vldr	s15, [r7]
 80019ae:	eef0 7ae7 	vabs.f32	s15, s15
 80019b2:	edc7 7a03 	vstr	s15, [r7, #12]
    return fmaxf(fminf(var, abs_ref), -abs_ref);
 80019b6:	edd7 0a03 	vldr	s1, [r7, #12]
 80019ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80019be:	f020 fa32 	bl	8021e26 <fminf>
 80019c2:	eeb0 7a40 	vmov.f32	s14, s0
 80019c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ca:	eef1 7a67 	vneg.f32	s15, s15
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	eeb0 0a47 	vmov.f32	s0, s14
 80019d6:	f020 fa0b 	bl	8021df0 <fmaxf>
 80019da:	eef0 7a40 	vmov.f32	s15, s0
}
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <c620_current_f2int>:

int16_t c620_current_f2int(float current) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int16_t) (current * 16384.0f / 20.0f);
 80019f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001a1c <c620_current_f2int+0x34>
 80019fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019fe:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	b21b      	sxth	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	46800000 	.word	0x46800000

08001a20 <C620_Ctrl_Struct_init>:


void C620_Ctrl_Struct_init(C620_Ctrl_StructTypedef *ctrl_struct) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    ctrl_struct->_target_value = 0.0f;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl_struct->_enable_flag = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    C620_PID_Ctrl_init(&(ctrl_struct->pid));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fef8 	bl	8001830 <C620_PID_Ctrl_init>
    C620_PID_Ctrl_init(&(ctrl_struct->pid_vel));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3318      	adds	r3, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fef3 	bl	8001830 <C620_PID_Ctrl_init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <C620_Init>:

void C620_Init(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size; i++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e00c      	b.n	8001a7e <C620_Init+0x2c>
        C620_Ctrl_Struct_init(&(dev_info_array[i].ctrl_param));
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	224c      	movs	r2, #76	; 0x4c
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ffd4 	bl	8001a20 <C620_Ctrl_Struct_init>
    for (uint8_t i = 0; i < size; i++) {
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3ee      	bcc.n	8001a64 <C620_Init+0x12>
    }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <C620_SendRequest>:

void C620_SendRequest(C620_DeviceInfo dev_info_array[], uint8_t size, float update_freq_hz, CAN_HandleTypeDef *phcan) {
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b093      	sub	sp, #76	; 0x4c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a9e:	603a      	str	r2, [r7, #0]
 8001aa0:	72fb      	strb	r3, [r7, #11]
    uint8_t data1[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001aa2:	4ac7      	ldr	r2, [pc, #796]	; (8001dc0 <C620_SendRequest+0x330>)
 8001aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aac:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t data2[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001ab0:	4ac3      	ldr	r2, [pc, #780]	; (8001dc0 <C620_SendRequest+0x330>)
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aba:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flag_1 = 0, flag_2 = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    int16_t request_value = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    float diff = 0.0f, t_current = 0.0f, fb_value = 0.0f;
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    C620_FeedbackData fb_data;

    for (uint8_t i = 0; i < size; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001ae8:	e195      	b.n	8001e16 <C620_SendRequest+0x386>
        if (!(dev_info_array[i].ctrl_param._enable_flag))continue;
 8001aea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001aee:	224c      	movs	r2, #76	; 0x4c
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8184 	beq.w	8001e0a <C620_SendRequest+0x37a>
        fb_data = Get_C620_FeedbackData(&dev_info_array[i]);
 8001b02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b06:	224c      	movs	r2, #76	; 0x4c
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	441a      	add	r2, r3
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fd3c 	bl	8002594 <Get_C620_FeedbackData>
        if (dev_info_array[i].device_id == 0) {
 8001b1c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b20:	224c      	movs	r2, #76	; 0x4c
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <C620_SendRequest+0xa8>
            printf("[C620] device_id is not 0\n\r");
 8001b30:	48a4      	ldr	r0, [pc, #656]	; (8001dc4 <C620_SendRequest+0x334>)
 8001b32:	f01e ffb7 	bl	8020aa4 <iprintf>
            continue;
 8001b36:	e169      	b.n	8001e0c <C620_SendRequest+0x37c>
        }

        if (dev_info_array[i].ctrl_param.ctrl_type == C620_CTRL_CURRENT) {
 8001b38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b3c:	224c      	movs	r2, #76	; 0x4c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d109      	bne.n	8001b62 <C620_SendRequest+0xd2>
            t_current = dev_info_array[i].ctrl_param._target_value;
 8001b4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b52:	224c      	movs	r2, #76	; 0x4c
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b60:	e0ab      	b.n	8001cba <C620_SendRequest+0x22a>
        } else {
            switch (dev_info_array[i].ctrl_param.ctrl_type) {
 8001b62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b66:	224c      	movs	r2, #76	; 0x4c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <C620_SendRequest+0xee>
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d003      	beq.n	8001b84 <C620_SendRequest+0xf4>
 8001b7c:	e005      	b.n	8001b8a <C620_SendRequest+0xfa>
                case C620_CTRL_POS:
                    fb_value = fb_data.position;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001b82:	e006      	b.n	8001b92 <C620_SendRequest+0x102>
                case C620_CTRL_VEL:
                    fb_value = fb_data.velocity;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001b88:	e003      	b.n	8001b92 <C620_SendRequest+0x102>
                default:
                    fb_value = 0.0f;
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001b90:	bf00      	nop
            }
            diff = dev_info_array[i].ctrl_param._target_value - fb_value;
 8001b92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b96:	224c      	movs	r2, #76	; 0x4c
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001ba4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            if(dev_info_array[i].ctrl_param.ctrl_type == C620_CTRL_POS) {
 8001bb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bb4:	224c      	movs	r2, #76	; 0x4c
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d144      	bne.n	8001c50 <C620_SendRequest+0x1c0>
                float t_vel = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001bc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bca:	224c      	movs	r2, #76	; 0x4c
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	1d18      	adds	r0, r3, #4
                                               dev_info_array[i].ctrl_param.accel_limit == C620_ACCEL_LIMIT_ENABLE,
 8001bd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bda:	224c      	movs	r2, #76	; 0x4c
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
                float t_vel = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
                                               dev_info_array[i].ctrl_param.accel_limit_size, update_freq_hz);
 8001bf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bf8:	224c      	movs	r2, #76	; 0x4c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4413      	add	r3, r2
                float t_vel = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001c02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001c12:	f7ff fe1f 	bl	8001854 <C620_PID_Ctrl_AW>
 8001c16:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid_vel), t_vel - fb_data.velocity,
 8001c1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c1e:	224c      	movs	r2, #76	; 0x4c
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	331c      	adds	r3, #28
 8001c2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	ed97 1a01 	vldr	s2, [r7, #4]
 8001c3a:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001dc8 <C620_SendRequest+0x338>
 8001c3e:	2100      	movs	r1, #0
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fe05 	bl	8001854 <C620_PID_Ctrl_AW>
 8001c4a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 8001c4e:	e034      	b.n	8001cba <C620_SendRequest+0x22a>
                                             0,0.0f, update_freq_hz);
                // 位置制御の場合は速度と位置の2重でPID
            }else if(dev_info_array[i].ctrl_param.ctrl_type == C620_CTRL_VEL){
 8001c50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c54:	224c      	movs	r2, #76	; 0x4c
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d129      	bne.n	8001cba <C620_SendRequest+0x22a>
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001c66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c6a:	224c      	movs	r2, #76	; 0x4c
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	1d18      	adds	r0, r3, #4
                                             dev_info_array[i].ctrl_param.accel_limit == C620_ACCEL_LIMIT_ENABLE,
 8001c76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c7a:	224c      	movs	r2, #76	; 0x4c
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
                                             dev_info_array[i].ctrl_param.accel_limit_size, update_freq_hz);
 8001c94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c98:	224c      	movs	r2, #76	; 0x4c
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
                t_current = C620_PID_Ctrl_AW(&(dev_info_array[i].ctrl_param.pid), diff,
 8001ca2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ca6:	ed97 1a01 	vldr	s2, [r7, #4]
 8001caa:	eef0 0a67 	vmov.f32	s1, s15
 8001cae:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001cb2:	f7ff fdcf 	bl	8001854 <C620_PID_Ctrl_AW>
 8001cb6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
            }
        }
        // 目標値の計算
        dev_info_array[i].ctrl_param._req_value = _clip_f(t_current, 20.0f);
 8001cba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cbe:	224c      	movs	r2, #76	; 0x4c
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	18d4      	adds	r4, r2, r3
 8001cc8:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001ccc:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8001cd0:	f7ff fe64 	bl	800199c <_clip_f>
 8001cd4:	eef0 7a40 	vmov.f32	s15, s0
 8001cd8:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
        request_value = c620_current_f2int( dev_info_array[i].ctrl_param._req_value);
 8001cdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ce0:	224c      	movs	r2, #76	; 0x4c
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	f7ff fe79 	bl	80019e8 <c620_current_f2int>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        if(dev_info_array[i].ctrl_param.rotation == C620_ROT_CW){
 8001cfc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d00:	224c      	movs	r2, #76	; 0x4c
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d105      	bne.n	8001d1e <C620_SendRequest+0x28e>
            request_value *= -1;
 8001d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001d16:	425b      	negs	r3, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        // 各モーターの目標値の設定
        if (dev_info_array[i].device_id < 5) {
 8001d1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d22:	224c      	movs	r2, #76	; 0x4c
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d82d      	bhi.n	8001d8e <C620_SendRequest+0x2fe>
            flag_1 = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for (uint8_t j = 0; j < 2; j++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d3e:	e021      	b.n	8001d84 <C620_SendRequest+0x2f4>
                data1[(dev_info_array[i].device_id - 1) * 2 + j] = (request_value >> ((!j) * 8)) & 0b11111111;
 8001d40:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001d44:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <C620_SendRequest+0x2c0>
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	e000      	b.n	8001d52 <C620_SendRequest+0x2c2>
 8001d50:	2300      	movs	r3, #0
 8001d52:	fa42 f103 	asr.w	r1, r2, r3
 8001d56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d5a:	224c      	movs	r2, #76	; 0x4c
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	005a      	lsls	r2, r3, #1
 8001d6a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	3348      	adds	r3, #72	; 0x48
 8001d74:	443b      	add	r3, r7
 8001d76:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t j = 0; j < 2; j++) {
 8001d7a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d84:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d9d9      	bls.n	8001d40 <C620_SendRequest+0x2b0>
 8001d8c:	e03e      	b.n	8001e0c <C620_SendRequest+0x37c>
            }
        } else if (dev_info_array[i].device_id >= 5) {
 8001d8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d934      	bls.n	8001e0c <C620_SendRequest+0x37c>
            flag_2 = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (uint8_t j = 0; j < 2; j++) {
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001dae:	e027      	b.n	8001e00 <C620_SendRequest+0x370>
                data2[(dev_info_array[i].device_id - 5) * 2 + j] = (request_value >> ((!j) * 8)) & 0b11111111;
 8001db0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8001db4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <C620_SendRequest+0x33c>
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	e006      	b.n	8001dce <C620_SendRequest+0x33e>
 8001dc0:	08021fc4 	.word	0x08021fc4
 8001dc4:	08021fa8 	.word	0x08021fa8
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	2300      	movs	r3, #0
 8001dce:	fa42 f103 	asr.w	r1, r2, r3
 8001dd2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001dd6:	224c      	movs	r2, #76	; 0x4c
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b05      	subs	r3, #5
 8001de4:	005a      	lsls	r2, r3, #1
 8001de6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dea:	4413      	add	r3, r2
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	3348      	adds	r3, #72	; 0x48
 8001df0:	443b      	add	r3, r7
 8001df2:	f803 2c28 	strb.w	r2, [r3, #-40]
            for (uint8_t j = 0; j < 2; j++) {
 8001df6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001e00:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d9d3      	bls.n	8001db0 <C620_SendRequest+0x320>
 8001e08:	e000      	b.n	8001e0c <C620_SendRequest+0x37c>
        if (!(dev_info_array[i].ctrl_param._enable_flag))continue;
 8001e0a:	bf00      	nop
    for (uint8_t i = 0; i < size; i++) {
 8001e0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e10:	3301      	adds	r3, #1
 8001e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001e16:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f4ff ae64 	bcc.w	8001aea <C620_SendRequest+0x5a>
            }
        }
    }
    if (flag_1)C620_SendBytes(phcan, 0x200, (uint8_t *) data1, sizeof(data1));
 8001e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <C620_SendRequest+0x3aa>
 8001e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2e:	2308      	movs	r3, #8
 8001e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e34:	6838      	ldr	r0, [r7, #0]
 8001e36:	f000 f8fd 	bl	8002034 <C620_SendBytes>
    if (flag_2)C620_SendBytes(phcan, 0x1FF, (uint8_t *) data2, sizeof(data2));
 8001e3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <C620_SendRequest+0x3c2>
 8001e42:	f107 0220 	add.w	r2, r7, #32
 8001e46:	2308      	movs	r3, #8
 8001e48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f000 f8f1 	bl	8002034 <C620_SendBytes>
}
 8001e52:	bf00      	nop
 8001e54:	374c      	adds	r7, #76	; 0x4c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop

08001e5c <C620_SetTarget>:
void C620_ChangeControl(C620_DeviceInfo *dev_info, C620_CTRL_TYPE new_ctrl_type) {
    C620_Ctrl_Struct_init(&(dev_info->ctrl_param));
    dev_info->ctrl_param.ctrl_type = new_ctrl_type;
}

void C620_SetTarget(C620_DeviceInfo *device_info, float target_value) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	ed87 0a00 	vstr	s0, [r7]
    device_info->ctrl_param._target_value = target_value;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <C620_ControlEnable>:

void C620_ControlEnable(C620_DeviceInfo *dev_info) {
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
    dev_info->ctrl_param._enable_flag = 1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_C620_PushTx8Bytes>:
CAN_HandleTypeDef *_c620_phcan_global;  // 変更しない事
CAN_RingBuf _can_buf_ring1 = {{}, 0, 0, 0};
c620_feedback_data_raw _c620_feedback_data_raw_global[9];


HAL_StatusTypeDef _C620_PushTx8Bytes(CAN_RingBuf *p_can_ring, uint32_t StdId, uint8_t *bytes, uint32_t size) {
 8001e96:	b480      	push	{r7}
 8001e98:	b087      	sub	sp, #28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
    p_can_ring->buffer[p_can_ring->write_point].DLC = size;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	601a      	str	r2, [r3, #0]
    p_can_ring->buffer[p_can_ring->write_point].StdId = StdId;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	4413      	add	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++)p_can_ring->buffer[p_can_ring->write_point].bytes[i] = bytes[i];
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
 8001ece:	e012      	b.n	8001ef6 <_C620_PushTx8Bytes+0x60>
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	18d1      	adds	r1, r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	7808      	ldrb	r0, [r1, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	440a      	add	r2, r1
 8001ee8:	4413      	add	r3, r2
 8001eea:	3308      	adds	r3, #8
 8001eec:	4602      	mov	r2, r0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d8e8      	bhi.n	8001ed0 <_C620_PushTx8Bytes+0x3a>

    if (p_can_ring->is_full == 1) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f04:	7a1b      	ldrb	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10a      	bne.n	8001f20 <_C620_PushTx8Bytes+0x8a>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001f1e:	6013      	str	r3, [r2, #0]
    }
    p_can_ring->write_point = ((p_can_ring->write_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001f34:	6053      	str	r3, [r2, #4]

    if (p_can_ring->write_point == p_can_ring->read_point) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d104      	bne.n	8001f54 <_C620_PushTx8Bytes+0xbe>
        p_can_ring->is_full = 1;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f50:	2201      	movs	r2, #1
 8001f52:	721a      	strb	r2, [r3, #8]
    }
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_C620_PopSendTx8Bytes>:

HAL_StatusTypeDef _C620_PopSendTx8Bytes(CAN_HandleTypeDef *phcan, CAN_RingBuf *p_can_ring) {
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08a      	sub	sp, #40	; 0x28
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.RTR = CAN_RTR_DATA;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    txHeader.TransmitGlobalTime = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3020 	strb.w	r3, [r7, #32]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8001f7a:	e04d      	b.n	8002018 <_C620_PopSendTx8Bytes+0xb6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f82:	7a1b      	ldrb	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <_C620_PopSendTx8Bytes+0x3a>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d044      	beq.n	8002026 <_C620_PopSendTx8Bytes+0xc4>

        txHeader.DLC = p_can_ring->buffer[p_can_ring->read_point].DLC;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61fb      	str	r3, [r7, #28]
        txHeader.StdId = p_can_ring->buffer[p_can_ring->read_point].StdId;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
        txHeader.ExtId = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]

        HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, p_can_ring->buffer[p_can_ring->read_point].bytes,
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	3308      	adds	r3, #8
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	f107 010c 	add.w	r1, r7, #12
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f003 f9c0 	bl	8005364 <HAL_CAN_AddTxMessage>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     &txMailbox);
        if (ret != HAL_OK)return ret;
 8001fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <_C620_PopSendTx8Bytes+0x96>
 8001ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff6:	e018      	b.n	800202a <_C620_PopSendTx8Bytes+0xc8>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800200c:	6013      	str	r3, [r2, #0]
        p_can_ring->is_full = 0;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002014:	2200      	movs	r2, #0
 8002016:	721a      	strb	r2, [r3, #8]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f003 fa73 	bl	8005504 <HAL_CAN_GetTxMailboxesFreeLevel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ab      	bne.n	8001f7c <_C620_PopSendTx8Bytes+0x1a>
 8002024:	e000      	b.n	8002028 <_C620_PopSendTx8Bytes+0xc6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8002026:	bf00      	nop
    }
    return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <C620_SendBytes>:


HAL_StatusTypeDef C620_SendBytes(CAN_HandleTypeDef *phcan, uint32_t StdId, uint8_t *bytes, uint32_t size) { // 命令を送信する関数
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
    uint32_t quotient = size / 8;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	61bb      	str	r3, [r7, #24]
    uint32_t remainder = size - (8 * quotient);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef ret;

    for (uint8_t i = 0; i < quotient; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	77fb      	strb	r3, [r7, #31]
 8002056:	e015      	b.n	8002084 <C620_SendBytes+0x50>
        ret = _C620_PushTx8Bytes(&_can_buf_ring1, StdId, bytes + i * 8, 8);
 8002058:	7ffb      	ldrb	r3, [r7, #31]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	461a      	mov	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	441a      	add	r2, r3
 8002062:	2308      	movs	r3, #8
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	481d      	ldr	r0, [pc, #116]	; (80020dc <C620_SendBytes+0xa8>)
 8002068:	f7ff ff15 	bl	8001e96 <_C620_PushTx8Bytes>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
        if (ret != HAL_OK) {
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <C620_SendBytes+0x4a>
            Error_Handler();
 8002076:	f002 f84b 	bl	8004110 <Error_Handler>
            return ret;
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	e029      	b.n	80020d2 <C620_SendBytes+0x9e>
    for (uint8_t i = 0; i < quotient; i++) {
 800207e:	7ffb      	ldrb	r3, [r7, #31]
 8002080:	3301      	adds	r3, #1
 8002082:	77fb      	strb	r3, [r7, #31]
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8e5      	bhi.n	8002058 <C620_SendBytes+0x24>
        }
    }

    if (remainder != 0) {
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d011      	beq.n	80020b6 <C620_SendBytes+0x82>
        ret = _C620_PushTx8Bytes(&_can_buf_ring1, StdId, bytes + quotient * 8, remainder);
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	441a      	add	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	480f      	ldr	r0, [pc, #60]	; (80020dc <C620_SendBytes+0xa8>)
 80020a0:	f7ff fef9 	bl	8001e96 <_C620_PushTx8Bytes>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]
        if (ret != HAL_OK) {
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <C620_SendBytes+0x82>
            Error_Handler();
 80020ae:	f002 f82f 	bl	8004110 <Error_Handler>
            return ret;
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	e00d      	b.n	80020d2 <C620_SendBytes+0x9e>
        }
    }
    ret = _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 80020b6:	4909      	ldr	r1, [pc, #36]	; (80020dc <C620_SendBytes+0xa8>)
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff ff52 	bl	8001f62 <_C620_PopSendTx8Bytes>
 80020be:	4603      	mov	r3, r0
 80020c0:	74fb      	strb	r3, [r7, #19]
    if (ret != HAL_OK) {
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <C620_SendBytes+0x9c>
        Error_Handler();
 80020c8:	f002 f822 	bl	8004110 <Error_Handler>
        return ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	e000      	b.n	80020d2 <C620_SendBytes+0x9e>
    }
    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20002978 	.word	0x20002978

080020e0 <C620_WhenTxMailboxCompleteCallbackCalled>:


void C620_WhenTxMailboxCompleteCallbackCalled(CAN_HandleTypeDef *phcan) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <C620_WhenTxMailboxCompleteCallbackCalled+0x24>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d104      	bne.n	80020fc <C620_WhenTxMailboxCompleteCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 80020f2:	4905      	ldr	r1, [pc, #20]	; (8002108 <C620_WhenTxMailboxCompleteCallbackCalled+0x28>)
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff34 	bl	8001f62 <_C620_PopSendTx8Bytes>
 80020fa:	e000      	b.n	80020fe <C620_WhenTxMailboxCompleteCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 80020fc:	bf00      	nop
}
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20002974 	.word	0x20002974
 8002108:	20002978 	.word	0x20002978

0800210c <C620_WhenTxMailboxAbortCallbackCalled>:

void C620_WhenTxMailboxAbortCallbackCalled(CAN_HandleTypeDef *phcan) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <C620_WhenTxMailboxAbortCallbackCalled+0x24>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d104      	bne.n	8002128 <C620_WhenTxMailboxAbortCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 800211e:	4905      	ldr	r1, [pc, #20]	; (8002134 <C620_WhenTxMailboxAbortCallbackCalled+0x28>)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff1e 	bl	8001f62 <_C620_PopSendTx8Bytes>
 8002126:	e000      	b.n	800212a <C620_WhenTxMailboxAbortCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8002128:	bf00      	nop
}
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20002974 	.word	0x20002974
 8002134:	20002978 	.word	0x20002978

08002138 <_set_fb_data_raw>:


void _set_fb_data_raw(const uint8_t rxData[], uint8_t device_id) {
 8002138:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
    if (device_id > 9 || device_id <= 0)return;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	2b09      	cmp	r3, #9
 800214a:	f200 80f5 	bhi.w	8002338 <_set_fb_data_raw+0x200>
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80f1 	beq.w	8002338 <_set_fb_data_raw+0x200>

    _c620_feedback_data_raw_global[device_id]._get_counter += 1;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <_set_fb_data_raw+0x20c>)
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	4413      	add	r3, r2
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	3201      	adds	r2, #1
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a77      	ldr	r2, [pc, #476]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	460a      	mov	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
    if (_c620_feedback_data_raw_global[device_id]._get_counter > 128) {
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	4a74      	ldr	r2, [pc, #464]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002174:	015b      	lsls	r3, r3, #5
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d905      	bls.n	800218a <_set_fb_data_raw+0x52>
        _c620_feedback_data_raw_global[device_id]._get_counter = 128;  // overflow対策
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	4a70      	ldr	r2, [pc, #448]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	4413      	add	r3, r2
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	701a      	strb	r2, [r3, #0]
    }

    if (_c620_feedback_data_raw_global[device_id]._get_counter < 50) {  // M3508のEncoderの初期位置を取得
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	4a6d      	ldr	r2, [pc, #436]	; (8002344 <_set_fb_data_raw+0x20c>)
 800218e:	015b      	lsls	r3, r3, #5
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b31      	cmp	r3, #49	; 0x31
 8002196:	d836      	bhi.n	8002206 <_set_fb_data_raw+0xce>
        _c620_feedback_data_raw_global[device_id]._internal_offset_pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	b291      	uxth	r1, r2
 80021b0:	4a64      	ldr	r2, [pc, #400]	; (8002344 <_set_fb_data_raw+0x20c>)
 80021b2:	015b      	lsls	r3, r3, #5
 80021b4:	4413      	add	r3, r2
 80021b6:	3312      	adds	r3, #18
 80021b8:	460a      	mov	r2, r1
 80021ba:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos_pre = (uint16_t) (rxData[0] << 8 | rxData[1]);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3301      	adds	r3, #1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	b291      	uxth	r1, r2
 80021d4:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <_set_fb_data_raw+0x20c>)
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	4413      	add	r3, r2
 80021da:	3314      	adds	r3, #20
 80021dc:	460a      	mov	r2, r1
 80021de:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	b291      	uxth	r1, r2
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <_set_fb_data_raw+0x20c>)
 80021fa:	015b      	lsls	r3, r3, #5
 80021fc:	4413      	add	r3, r2
 80021fe:	3310      	adds	r3, #16
 8002200:	460a      	mov	r2, r1
 8002202:	801a      	strh	r2, [r3, #0]
        return;
 8002204:	e099      	b.n	800233a <_set_fb_data_raw+0x202>
    }

    // dataの設定
    _c620_feedback_data_raw_global[device_id].pos_pre = _c620_feedback_data_raw_global[device_id].pos;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	494e      	ldr	r1, [pc, #312]	; (8002344 <_set_fb_data_raw+0x20c>)
 800220c:	0152      	lsls	r2, r2, #5
 800220e:	440a      	add	r2, r1
 8002210:	3210      	adds	r2, #16
 8002212:	8811      	ldrh	r1, [r2, #0]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002216:	015b      	lsls	r3, r3, #5
 8002218:	4413      	add	r3, r2
 800221a:	3314      	adds	r3, #20
 800221c:	460a      	mov	r2, r1
 800221e:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b21a      	sxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3301      	adds	r3, #1
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21a      	sxth	r2, r3
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	b291      	uxth	r1, r2
 8002238:	4a42      	ldr	r2, [pc, #264]	; (8002344 <_set_fb_data_raw+0x20c>)
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	4413      	add	r3, r2
 800223e:	3310      	adds	r3, #16
 8002240:	460a      	mov	r2, r1
 8002242:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].vel = (int16_t) (rxData[2] << 8 | rxData[3]);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3302      	adds	r3, #2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	b219      	sxth	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3303      	adds	r3, #3
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b21a      	sxth	r2, r3
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	430a      	orrs	r2, r1
 800225a:	b211      	sxth	r1, r2
 800225c:	4a39      	ldr	r2, [pc, #228]	; (8002344 <_set_fb_data_raw+0x20c>)
 800225e:	015b      	lsls	r3, r3, #5
 8002260:	4413      	add	r3, r2
 8002262:	3316      	adds	r3, #22
 8002264:	460a      	mov	r2, r1
 8002266:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].cur = (int16_t) (rxData[4] << 8 | rxData[5]);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	b219      	sxth	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3305      	adds	r3, #5
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b21a      	sxth	r2, r3
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	430a      	orrs	r2, r1
 800227e:	b211      	sxth	r1, r2
 8002280:	4a30      	ldr	r2, [pc, #192]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	4413      	add	r3, r2
 8002286:	3318      	adds	r3, #24
 8002288:	460a      	mov	r2, r1
 800228a:	801a      	strh	r2, [r3, #0]

    // 回転数の計算
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002290:	015b      	lsls	r3, r3, #5
 8002292:	4413      	add	r3, r2
 8002294:	3310      	adds	r3, #16
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
                       (int32_t) (_c620_feedback_data_raw_global[device_id].pos_pre);
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <_set_fb_data_raw+0x20c>)
 800229e:	015b      	lsls	r3, r3, #5
 80022a0:	4413      	add	r3, r2
 80022a2:	3314      	adds	r3, #20
 80022a4:	881b      	ldrh	r3, [r3, #0]
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 80022a6:	1acb      	subs	r3, r1, r3
 80022a8:	60fb      	str	r3, [r7, #12]
    if (diff_pos > 4096) {
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	dd1f      	ble.n	80022f2 <_set_fb_data_raw+0x1ba>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != -(INT64_MAX / 10)) {
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <_set_fb_data_raw+0x20c>)
 80022b6:	015b      	lsls	r3, r3, #5
 80022b8:	4413      	add	r3, r2
 80022ba:	3308      	adds	r3, #8
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	4921      	ldr	r1, [pc, #132]	; (8002348 <_set_fb_data_raw+0x210>)
 80022c2:	428b      	cmp	r3, r1
 80022c4:	bf08      	it	eq
 80022c6:	f112 3fcc 	cmneq.w	r2, #3435973836	; 0xcccccccc
 80022ca:	d036      	beq.n	800233a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num -= 1;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <_set_fb_data_raw+0x20c>)
 80022d0:	015b      	lsls	r3, r3, #5
 80022d2:	4413      	add	r3, r2
 80022d4:	3308      	adds	r3, #8
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	78f9      	ldrb	r1, [r7, #3]
 80022dc:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 80022e0:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <_set_fb_data_raw+0x20c>)
 80022e6:	014b      	lsls	r3, r1, #5
 80022e8:	4413      	add	r3, r2
 80022ea:	3308      	adds	r3, #8
 80022ec:	e9c3 8900 	strd	r8, r9, [r3]
 80022f0:	e023      	b.n	800233a <_set_fb_data_raw+0x202>
        }  // overflow対策
    } else if (diff_pos < -4096) {
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80022f8:	da1f      	bge.n	800233a <_set_fb_data_raw+0x202>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != (INT64_MAX / 10)) {
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <_set_fb_data_raw+0x20c>)
 80022fe:	015b      	lsls	r3, r3, #5
 8002300:	4413      	add	r3, r2
 8002302:	3308      	adds	r3, #8
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	4910      	ldr	r1, [pc, #64]	; (800234c <_set_fb_data_raw+0x214>)
 800230a:	428b      	cmp	r3, r1
 800230c:	bf08      	it	eq
 800230e:	f1b2 3fcc 	cmpeq.w	r2, #3435973836	; 0xcccccccc
 8002312:	d012      	beq.n	800233a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num += 1;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <_set_fb_data_raw+0x20c>)
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	4413      	add	r3, r2
 800231c:	3308      	adds	r3, #8
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	78f9      	ldrb	r1, [r7, #3]
 8002324:	1c54      	adds	r4, r2, #1
 8002326:	f143 0500 	adc.w	r5, r3, #0
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <_set_fb_data_raw+0x20c>)
 800232c:	014b      	lsls	r3, r1, #5
 800232e:	4413      	add	r3, r2
 8002330:	3308      	adds	r3, #8
 8002332:	e9c3 4500 	strd	r4, r5, [r3]
 8002336:	e000      	b.n	800233a <_set_fb_data_raw+0x202>
    if (device_id > 9 || device_id <= 0)return;
 8002338:	bf00      	nop
        }  // overflow対策
    }
}
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002342:	4770      	bx	lr
 8002344:	20004988 	.word	0x20004988
 8002348:	f3333333 	.word	0xf3333333
 800234c:	0ccccccc 	.word	0x0ccccccc

08002350 <C620_WhenCANRxFifo1MsgPending>:

void C620_WhenCANRxFifo1MsgPending(CAN_HandleTypeDef *phcan) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    // Fifo0はCANLibで使うので、Fifo1を使う事。
    if (_c620_phcan_global != phcan)return;
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <C620_WhenCANRxFifo1MsgPending+0x60>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d121      	bne.n	80023a6 <C620_WhenCANRxFifo1MsgPending+0x56>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO1, &rxHeader, rxData) != HAL_OK) {
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	f107 0214 	add.w	r2, r7, #20
 800236a:	2101      	movs	r1, #1
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f003 f8fe 	bl	800556e <HAL_CAN_GetRxMessage>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <C620_WhenCANRxFifo1MsgPending+0x32>
        // Reception Error
        printf("GetRxMessage error\n\r");
 8002378:	480e      	ldr	r0, [pc, #56]	; (80023b4 <C620_WhenCANRxFifo1MsgPending+0x64>)
 800237a:	f01e fb93 	bl	8020aa4 <iprintf>
        Error_Handler();
 800237e:	f001 fec7 	bl	8004110 <Error_Handler>
    }

    if (((rxHeader.StdId - 0x200) < 9) && ((rxHeader.StdId - 0x200) >= 1)) {
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002388:	2b08      	cmp	r3, #8
 800238a:	d80d      	bhi.n	80023a8 <C620_WhenCANRxFifo1MsgPending+0x58>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002392:	d009      	beq.n	80023a8 <C620_WhenCANRxFifo1MsgPending+0x58>
        _set_fb_data_raw(rxData, rxHeader.StdId - 0x200);  // fb_data_rawにデータを入力
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff feca 	bl	8002138 <_set_fb_data_raw>
 80023a4:	e000      	b.n	80023a8 <C620_WhenCANRxFifo1MsgPending+0x58>
    if (_c620_phcan_global != phcan)return;
 80023a6:	bf00      	nop
    }
}
 80023a8:	3730      	adds	r7, #48	; 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20002974 	.word	0x20002974
 80023b4:	08022004 	.word	0x08022004

080023b8 <Init_C620_CAN_System>:


void Init_C620_CAN_System(CAN_HandleTypeDef *phcan) {  //CAN初期化
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08e      	sub	sp, #56	; 0x38
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    _c620_phcan_global = phcan;
 80023c0:	4a6c      	ldr	r2, [pc, #432]	; (8002574 <Init_C620_CAN_System+0x1bc>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
    CAN_FilterTypeDef sFilterConfig;

    //フィルタバンク設定
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80023ca:	2301      	movs	r3, #1
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.SlaveStartFilterBank = 14;
 80023d6:	230e      	movs	r3, #14
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30

    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
    // FIFO1に初期化用のフィルタを設定
    sFilterConfig.FilterBank = 10; // CANLibで6まで使ってる
 80023da:	230a      	movs	r3, #10
 80023dc:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b1000) << 5;
 80023de:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80023e2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 80023e4:	4b64      	ldr	r3, [pc, #400]	; (8002578 <Init_C620_CAN_System+0x1c0>)
 80023e6:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 80023ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f0:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f002 fe83 	bl	8005104 <HAL_CAN_ConfigFilter>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <Init_C620_CAN_System+0x50>
        Error_Handler();
 8002404:	f001 fe84 	bl	8004110 <Error_Handler>
    }

    sFilterConfig.FilterBank = 11; // CANLibで6まで使ってる
 8002408:	230b      	movs	r3, #11
 800240a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0001) << 5;
 800240c:	f244 0320 	movw	r3, #16416	; 0x4020
 8002410:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0110) << 5;
 8002412:	4b5a      	ldr	r3, [pc, #360]	; (800257c <Init_C620_CAN_System+0x1c4>)
 8002414:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241e:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f002 fe6c 	bl	8005104 <HAL_CAN_ConfigFilter>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <Init_C620_CAN_System+0x7e>
        Error_Handler();
 8002432:	f001 fe6d 	bl	8004110 <Error_Handler>
    }

    sFilterConfig.FilterBank = 12; // CANLibで6まで使ってる
 8002436:	230c      	movs	r3, #12
 8002438:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0010) << 5;
 800243a:	f244 0340 	movw	r3, #16448	; 0x4040
 800243e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0100) << 5;
 8002440:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <Init_C620_CAN_System+0x1c8>)
 8002442:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8002448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800244c:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f002 fe55 	bl	8005104 <HAL_CAN_ConfigFilter>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <Init_C620_CAN_System+0xac>
        Error_Handler();
 8002460:	f001 fe56 	bl	8004110 <Error_Handler>
    }

    sFilterConfig.FilterBank = 13; // CANLibで6まで使ってる
 8002464:	230d      	movs	r3, #13
 8002466:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0100) << 5;
 8002468:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800246c:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <Init_C620_CAN_System+0x1c0>)
 8002470:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8002476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247a:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f002 fe3e 	bl	8005104 <HAL_CAN_ConfigFilter>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <Init_C620_CAN_System+0xda>
        Error_Handler();
 800248e:	f001 fe3f 	bl	8004110 <Error_Handler>
    }

    if (HAL_CAN_Start(phcan) != HAL_OK) {
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f002 ff22 	bl	80052dc <HAL_CAN_Start>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <Init_C620_CAN_System+0xf0>
        printf(" -> Start Error CAN_C620\n");
 800249e:	4839      	ldr	r0, [pc, #228]	; (8002584 <Init_C620_CAN_System+0x1cc>)
 80024a0:	f01e fb66 	bl	8020b70 <puts>
        Error_Handler();
 80024a4:	f001 fe34 	bl	8004110 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80024a8:	2110      	movs	r1, #16
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f003 f971 	bl	8005792 <HAL_CAN_ActivateNotification>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <Init_C620_CAN_System+0x108>
        printf(" -> FIFO1 CAN_Activation error1\n\r");
 80024b6:	4834      	ldr	r0, [pc, #208]	; (8002588 <Init_C620_CAN_System+0x1d0>)
 80024b8:	f01e faf4 	bl	8020aa4 <iprintf>
        Error_Handler();
 80024bc:	f001 fe28 	bl	8004110 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80024c0:	2101      	movs	r1, #1
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f003 f965 	bl	8005792 <HAL_CAN_ActivateNotification>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <Init_C620_CAN_System+0x120>
        printf(" -> CAN_Activation error2\n\r");
 80024ce:	482f      	ldr	r0, [pc, #188]	; (800258c <Init_C620_CAN_System+0x1d4>)
 80024d0:	f01e fae8 	bl	8020aa4 <iprintf>
        Error_Handler();
 80024d4:	f001 fe1c 	bl	8004110 <Error_Handler>
    }

    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024de:	e040      	b.n	8002562 <Init_C620_CAN_System+0x1aa>
        _c620_feedback_data_raw_global[i].pos = 0;
 80024e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	4413      	add	r3, r2
 80024ea:	3310      	adds	r3, #16
 80024ec:	2200      	movs	r2, #0
 80024ee:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].pos_pre = 0;
 80024f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	4413      	add	r3, r2
 80024fa:	3314      	adds	r3, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._rot_num = 0;
 8002500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002504:	4a22      	ldr	r2, [pc, #136]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	4413      	add	r3, r2
 800250a:	f103 0108 	add.w	r1, r3, #8
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	e9c1 2300 	strd	r2, r3, [r1]
        _c620_feedback_data_raw_global[i].vel = 0;
 800251a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	4413      	add	r3, r2
 8002524:	3316      	adds	r3, #22
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].cur = 0;
 800252a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 8002530:	015b      	lsls	r3, r3, #5
 8002532:	4413      	add	r3, r2
 8002534:	3318      	adds	r3, #24
 8002536:	2200      	movs	r2, #0
 8002538:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._get_counter = 0;
 800253a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800253e:	4a14      	ldr	r2, [pc, #80]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 8002540:	015b      	lsls	r3, r3, #5
 8002542:	4413      	add	r3, r2
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._internal_offset_pos = 0;
 8002548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800254c:	4a10      	ldr	r2, [pc, #64]	; (8002590 <Init_C620_CAN_System+0x1d8>)
 800254e:	015b      	lsls	r3, r3, #5
 8002550:	4413      	add	r3, r2
 8002552:	3312      	adds	r3, #18
 8002554:	2200      	movs	r2, #0
 8002556:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8002558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800255c:	3301      	adds	r3, #1
 800255e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002566:	2b08      	cmp	r3, #8
 8002568:	d9ba      	bls.n	80024e0 <Init_C620_CAN_System+0x128>
    }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	3738      	adds	r7, #56	; 0x38
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20002974 	.word	0x20002974
 8002578:	0001ffe0 	.word	0x0001ffe0
 800257c:	0001ff20 	.word	0x0001ff20
 8002580:	0001ff60 	.word	0x0001ff60
 8002584:	0802201c 	.word	0x0802201c
 8002588:	08022038 	.word	0x08022038
 800258c:	0802205c 	.word	0x0802205c
 8002590:	20004988 	.word	0x20004988

08002594 <Get_C620_FeedbackData>:


C620_FeedbackData Get_C620_FeedbackData(C620_DeviceInfo *device_info) {
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	ed2d 8b02 	vpush	{d8}
 800259a:	b08b      	sub	sp, #44	; 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
    uint8_t device_id = device_info->device_id;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (device_id >= 9)device_id = 0;
 80025aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d902      	bls.n	80025b8 <Get_C620_FeedbackData+0x24>
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    C620_FeedbackData fb_data;
    fb_data.device_id = device_id;
 80025b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025bc:	733b      	strb	r3, [r7, #12]
    c620_feedback_data_raw *data = &(_c620_feedback_data_raw_global[device_id]);
 80025be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c2:	015b      	lsls	r3, r3, #5
 80025c4:	4a49      	ldr	r2, [pc, #292]	; (80026ec <Get_C620_FeedbackData+0x158>)
 80025c6:	4413      	add	r3, r2
 80025c8:	623b      	str	r3, [r7, #32]

    int32_t offset_pos = (int32_t) (data->pos) - (int32_t) (data->_internal_offset_pos);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	8a1b      	ldrh	r3, [r3, #16]
 80025ce:	461a      	mov	r2, r3
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	8a5b      	ldrh	r3, [r3, #18]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	61fb      	str	r3, [r7, #28]
    if (device_info->ctrl_param.use_internal_offset != C620_USE_OFFSET_POS_DISABLE) {
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <Get_C620_FeedbackData+0x7c>
        fb_data.position = ((float)offset_pos) / 8192.0f + (float) (data->_rot_num);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ec:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80026f0 <Get_C620_FeedbackData+0x15c>
 80025f0:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fd ff57 	bl	80004b0 <__aeabi_l2f>
 8002602:	ee07 0a90 	vmov	s15, r0
 8002606:	ee78 7a27 	vadd.f32	s15, s16, s15
 800260a:	edc7 7a04 	vstr	s15, [r7, #16]
 800260e:	e016      	b.n	800263e <Get_C620_FeedbackData+0xaa>
    } else {
        fb_data.position = ((float)data->pos) / 8192.0f + (float) (data->_rot_num);
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	8a1b      	ldrh	r3, [r3, #16]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80026f0 <Get_C620_FeedbackData+0x15c>
 8002620:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fd ff3f 	bl	80004b0 <__aeabi_l2f>
 8002632:	ee07 0a90 	vmov	s15, r0
 8002636:	ee78 7a27 	vadd.f32	s15, s16, s15
 800263a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    fb_data.velocity = ((float) (data->vel)) / 60.0f;
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800264c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80026f4 <Get_C620_FeedbackData+0x160>
 8002650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002654:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.current = ((float) (data->cur * 20)) / 16384.0f;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800265e:	461a      	mov	r2, r3
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002670:	eddf 6a21 	vldr	s13, [pc, #132]	; 80026f8 <Get_C620_FeedbackData+0x164>
 8002674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002678:	edc7 7a06 	vstr	s15, [r7, #24]
    fb_data.get_flag = (data->_get_counter > 50);
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b32      	cmp	r3, #50	; 0x32
 8002682:	bf8c      	ite	hi
 8002684:	2301      	movhi	r3, #1
 8002686:	2300      	movls	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	737b      	strb	r3, [r7, #13]

    fb_data.velocity *= device_info->ctrl_param.quant_per_rot;
 800268c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269a:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.position *= device_info->ctrl_param.quant_per_rot;
 800269e:	ed97 7a04 	vldr	s14, [r7, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ac:	edc7 7a04 	vstr	s15, [r7, #16]
    if(device_info->ctrl_param.rotation == C620_ROT_CW){  // TODO: 反転処理(確認)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10b      	bne.n	80026d2 <Get_C620_FeedbackData+0x13e>
        fb_data.velocity *= -1.0f;
 80026ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80026be:	eef1 7a67 	vneg.f32	s15, s15
 80026c2:	edc7 7a05 	vstr	s15, [r7, #20]
        fb_data.position *= -1.0f;
 80026c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ca:	eef1 7a67 	vneg.f32	s15, s15
 80026ce:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    return fb_data;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	461c      	mov	r4, r3
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	372c      	adds	r7, #44	; 0x2c
 80026e4:	46bd      	mov	sp, r7
 80026e6:	ecbd 8b02 	vpop	{d8}
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	20004988 	.word	0x20004988
 80026f0:	46000000 	.word	0x46000000
 80026f4:	42700000 	.word	0x42700000
 80026f8:	46800000 	.word	0x46800000
 80026fc:	00000000 	.word	0x00000000

08002700 <Linearmovement>:
//	  C620_SetTarget(&c620_dev_info_global_array[2], sqrt(2.0)*(-v_x+v_y)/4+RADIUS*v_theta);
//	  C620_SetTarget(&c620_dev_info_global_array[3], sqrt(2.0)*(v_x+v_y)/4+RADIUS*v_theta);
//}

//[m/s] ver
void Linearmovement(C620_DeviceInfo c620_dev_info_global_array[num_of_c620], float v_x, float v_y, float v_theta){
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	ed87 0a02 	vstr	s0, [r7, #8]
 800270c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002710:	ed87 1a00 	vstr	s2, [r7]
	  C620_SetTarget(&c620_dev_info_global_array[0], (sqrt(2.0)*(v_x+v_y)/4)*100-RADIUS*v_theta);
 8002714:	ed97 7a02 	vldr	s14, [r7, #8]
 8002718:	edd7 7a01 	vldr	s15, [r7, #4]
 800271c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002720:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002724:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8002850 <Linearmovement+0x150>
 8002728:	ee27 6b06 	vmul.f64	d6, d7, d6
 800272c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002730:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002734:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8002858 <Linearmovement+0x158>
 8002738:	ee27 6b06 	vmul.f64	d6, d7, d6
 800273c:	edd7 7a00 	vldr	s15, [r7]
 8002740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002744:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
 8002748:	ee27 7b05 	vmul.f64	d7, d7, d5
 800274c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002750:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002754:	eeb0 0a67 	vmov.f32	s0, s15
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fb7f 	bl	8001e5c <C620_SetTarget>
	  C620_SetTarget(&c620_dev_info_global_array[1], (sqrt(2.0)*(-v_x+v_y)/4)*100-RADIUS*v_theta);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	334c      	adds	r3, #76	; 0x4c
 8002762:	ed97 7a01 	vldr	s14, [r7, #4]
 8002766:	edd7 7a02 	vldr	s15, [r7, #8]
 800276a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002772:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002850 <Linearmovement+0x150>
 8002776:	ee27 6b06 	vmul.f64	d6, d7, d6
 800277a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800277e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002782:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002858 <Linearmovement+0x158>
 8002786:	ee27 6b06 	vmul.f64	d6, d7, d6
 800278a:	edd7 7a00 	vldr	s15, [r7]
 800278e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002792:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
 8002796:	ee27 7b05 	vmul.f64	d7, d7, d5
 800279a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800279e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fb58 	bl	8001e5c <C620_SetTarget>
	  C620_SetTarget(&c620_dev_info_global_array[2], (sqrt(2.0)*(-v_x+v_y)/4)*100+RADIUS*v_theta);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3398      	adds	r3, #152	; 0x98
 80027b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80027b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027c0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002850 <Linearmovement+0x150>
 80027c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027c8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027d0:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002858 <Linearmovement+0x158>
 80027d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027d8:	edd7 7a00 	vldr	s15, [r7]
 80027dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027e0:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
 80027e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80027e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027f0:	eeb0 0a67 	vmov.f32	s0, s15
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fb31 	bl	8001e5c <C620_SetTarget>
	  C620_SetTarget(&c620_dev_info_global_array[3], (sqrt(2.0)*(v_x+v_y)/4)*100+RADIUS*v_theta);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	33e4      	adds	r3, #228	; 0xe4
 80027fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8002802:	edd7 7a01 	vldr	s15, [r7, #4]
 8002806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800280e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002850 <Linearmovement+0x150>
 8002812:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002816:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800281a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800281e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002858 <Linearmovement+0x158>
 8002822:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002826:	edd7 7a00 	vldr	s15, [r7]
 800282a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800282e:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
 8002832:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800283a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800283e:	eeb0 0a67 	vmov.f32	s0, s15
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fb0a 	bl	8001e5c <C620_SetTarget>
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	667f3bcd 	.word	0x667f3bcd
 8002854:	3ff6a09e 	.word	0x3ff6a09e
 8002858:	00000000 	.word	0x00000000
 800285c:	40590000 	.word	0x40590000

08002860 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_CAN1_Init+0x64>)
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <MX_CAN1_Init+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <MX_CAN1_Init+0x64>)
 800286c:	2206      	movs	r2, #6
 800286e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_CAN1_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <MX_CAN1_Init+0x64>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_CAN1_Init+0x64>)
 800287e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002882:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_CAN1_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_CAN1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_CAN1_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <MX_CAN1_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_CAN1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <MX_CAN1_Init+0x64>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_CAN1_Init+0x64>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_CAN1_Init+0x64>)
 80028b0:	f002 fb2c 	bl	8004f0c <HAL_CAN_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80028ba:	f001 fc29 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20004aa8 	.word	0x20004aa8
 80028c8:	40006400 	.word	0x40006400

080028cc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_CAN2_Init+0x64>)
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <MX_CAN2_Init+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <MX_CAN2_Init+0x64>)
 80028d8:	2206      	movs	r2, #6
 80028da:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <MX_CAN2_Init+0x64>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_CAN2_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_CAN2_Init+0x64>)
 80028ea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80028ee:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_CAN2_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_CAN2_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_CAN2_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_CAN2_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_CAN2_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_CAN2_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_CAN2_Init+0x64>)
 8002916:	2201      	movs	r2, #1
 8002918:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_CAN2_Init+0x64>)
 800291c:	f002 faf6 	bl	8004f0c <HAL_CAN_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8002926:	f001 fbf3 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20004ad0 	.word	0x20004ad0
 8002934:	40006800 	.word	0x40006800

08002938 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_CAN_MspInit+0x174>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d149      	bne.n	80029ee <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800295a:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_CAN_MspInit+0x178>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a53      	ldr	r2, [pc, #332]	; (8002ab0 <HAL_CAN_MspInit+0x178>)
 8002962:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_CAN_MspInit+0x178>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10b      	bne.n	8002984 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800296c:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002976:	6413      	str	r3, [r2, #64]	; 0x40
 8002978:	4b4e      	ldr	r3, [pc, #312]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002984:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a4a      	ldr	r2, [pc, #296]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299c:	2303      	movs	r3, #3
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029ac:	2309      	movs	r3, #9
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	4840      	ldr	r0, [pc, #256]	; (8002ab8 <HAL_CAN_MspInit+0x180>)
 80029b8:	f004 f918 	bl	8006bec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2105      	movs	r1, #5
 80029c0:	2013      	movs	r0, #19
 80029c2:	f003 f9ad 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80029c6:	2013      	movs	r0, #19
 80029c8:	f003 f9c6 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2105      	movs	r1, #5
 80029d0:	2014      	movs	r0, #20
 80029d2:	f003 f9a5 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80029d6:	2014      	movs	r0, #20
 80029d8:	f003 f9be 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80029dc:	2200      	movs	r2, #0
 80029de:	2105      	movs	r1, #5
 80029e0:	2015      	movs	r0, #21
 80029e2:	f003 f99d 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80029e6:	2015      	movs	r0, #21
 80029e8:	f003 f9b6 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80029ec:	e05a      	b.n	8002aa4 <HAL_CAN_MspInit+0x16c>
  else if(canHandle->Instance==CAN2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a32      	ldr	r2, [pc, #200]	; (8002abc <HAL_CAN_MspInit+0x184>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d155      	bne.n	8002aa4 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 80029fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002a10:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_CAN_MspInit+0x178>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <HAL_CAN_MspInit+0x178>)
 8002a18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002a1a:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_CAN_MspInit+0x178>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10b      	bne.n	8002a3a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_CAN_MspInit+0x17c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002a52:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002a64:	2309      	movs	r3, #9
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4814      	ldr	r0, [pc, #80]	; (8002ac0 <HAL_CAN_MspInit+0x188>)
 8002a70:	f004 f8bc 	bl	8006bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2105      	movs	r1, #5
 8002a78:	203f      	movs	r0, #63	; 0x3f
 8002a7a:	f003 f951 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002a7e:	203f      	movs	r0, #63	; 0x3f
 8002a80:	f003 f96a 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2105      	movs	r1, #5
 8002a88:	2040      	movs	r0, #64	; 0x40
 8002a8a:	f003 f949 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002a8e:	2040      	movs	r0, #64	; 0x40
 8002a90:	f003 f962 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2105      	movs	r1, #5
 8002a98:	2041      	movs	r0, #65	; 0x41
 8002a9a:	f003 f941 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002a9e:	2041      	movs	r0, #65	; 0x41
 8002aa0:	f003 f95a 	bl	8005d58 <HAL_NVIC_EnableIRQ>
}
 8002aa4:	bf00      	nop
 8002aa6:	3730      	adds	r7, #48	; 0x30
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40006400 	.word	0x40006400
 8002ab0:	20004af8 	.word	0x20004af8
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40006800 	.word	0x40006800
 8002ac0:	40020400 	.word	0x40020400

08002ac4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ad0:	f00d fd72 	bl	80105b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ad4:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <pvPortMallocMicroROS+0x180>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002adc:	f000 f98a 	bl	8002df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <pvPortMallocMicroROS+0x184>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 8092 	bne.w	8002c12 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01f      	beq.n	8002b34 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8002af4:	2208      	movs	r2, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f023 0307 	bic.w	r3, r3, #7
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	b672      	cpsid	i
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	b662      	cpsie	i
 8002b2e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06b      	beq.n	8002c12 <pvPortMallocMicroROS+0x14e>
 8002b3a:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <pvPortMallocMicroROS+0x188>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d866      	bhi.n	8002c12 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b44:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <pvPortMallocMicroROS+0x18c>)
 8002b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <pvPortMallocMicroROS+0x18c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b4e:	e004      	b.n	8002b5a <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d903      	bls.n	8002b6c <pvPortMallocMicroROS+0xa8>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f1      	bne.n	8002b50 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <pvPortMallocMicroROS+0x180>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d04d      	beq.n	8002c12 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	2308      	movs	r3, #8
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d921      	bls.n	8002bdc <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	b672      	cpsid	i
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	b662      	cpsie	i
 8002bbe:	613b      	str	r3, [r7, #16]
}
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad2      	subs	r2, r2, r3
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bd6:	69b8      	ldr	r0, [r7, #24]
 8002bd8:	f000 f96e 	bl	8002eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <pvPortMallocMicroROS+0x188>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <pvPortMallocMicroROS+0x188>)
 8002be8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <pvPortMallocMicroROS+0x188>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <pvPortMallocMicroROS+0x190>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d203      	bcs.n	8002bfe <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <pvPortMallocMicroROS+0x188>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <pvPortMallocMicroROS+0x190>)
 8002bfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <pvPortMallocMicroROS+0x184>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002c12:	f00d fcdf 	bl	80105d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <pvPortMallocMicroROS+0x176>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	b672      	cpsid	i
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	b662      	cpsie	i
 8002c34:	60fb      	str	r3, [r7, #12]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200089f0 	.word	0x200089f0
 8002c48:	200089fc 	.word	0x200089fc
 8002c4c:	200089f4 	.word	0x200089f4
 8002c50:	200089e8 	.word	0x200089e8
 8002c54:	200089f8 	.word	0x200089f8

08002c58 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04c      	beq.n	8002d04 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	425b      	negs	r3, r3
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <vPortFreeMicroROS+0xb4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <vPortFreeMicroROS+0x48>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	b672      	cpsid	i
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	b662      	cpsie	i
 8002c9a:	60fb      	str	r3, [r7, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	b672      	cpsid	i
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	b662      	cpsie	i
 8002cbc:	60bb      	str	r3, [r7, #8]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <vPortFreeMicroROS+0xb4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d019      	beq.n	8002d04 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d115      	bne.n	8002d04 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <vPortFreeMicroROS+0xb4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ce8:	f00d fc66 	bl	80105b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <vPortFreeMicroROS+0xb8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <vPortFreeMicroROS+0xb8>)
 8002cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cfa:	6938      	ldr	r0, [r7, #16]
 8002cfc:	f000 f8dc 	bl	8002eb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002d00:	f00d fc68 	bl	80105d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200089fc 	.word	0x200089fc
 8002d10:	200089f4 	.word	0x200089f4

08002d14 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002d20:	2308      	movs	r3, #8
 8002d22:	425b      	negs	r3, r3
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4413      	add	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <getBlockSize+0x38>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

	return count;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	200089fc 	.word	0x200089fc

08002d50 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002d5a:	f00d fc2d 	bl	80105b8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002d5e:	6838      	ldr	r0, [r7, #0]
 8002d60:	f7ff feb0 	bl	8002ac4 <pvPortMallocMicroROS>
 8002d64:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <pvPortReallocMicroROS+0x4c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d014      	beq.n	8002d9c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffce 	bl	8002d14 <getBlockSize>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d201      	bcs.n	8002d8c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68b8      	ldr	r0, [r7, #8]
 8002d92:	f01e f9e4 	bl	802115e <memcpy>

		vPortFreeMicroROS(pv);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff5e 	bl	8002c58 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002d9c:	f00d fc1a 	bl	80105d4 <xTaskResumeAll>

	return newmem;
 8002da0:	68bb      	ldr	r3, [r7, #8]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002db4:	f00d fc00 	bl	80105b8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff fe7e 	bl	8002ac4 <pvPortMallocMicroROS>
 8002dc8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002dce:	e004      	b.n	8002dda <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	613a      	str	r2, [r7, #16]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	617a      	str	r2, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f5      	bne.n	8002dd0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002de4:	f00d fbf6 	bl	80105d4 <xTaskResumeAll>
  	return mem;
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <prvHeapInit+0xac>)
 8002e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3307      	adds	r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0307 	bic.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <prvHeapInit+0xac>)
 8002e24:	4413      	add	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <prvHeapInit+0xb0>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <prvHeapInit+0xb0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002e40:	2208      	movs	r2, #8
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0307 	bic.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <prvHeapInit+0xb4>)
 8002e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <prvHeapInit+0xb4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <prvHeapInit+0xb4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	1ad2      	subs	r2, r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <prvHeapInit+0xb4>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <prvHeapInit+0xb8>)
 8002e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <prvHeapInit+0xbc>)
 8002e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <prvHeapInit+0xc0>)
 8002e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	20004de8 	.word	0x20004de8
 8002ea4:	200089e8 	.word	0x200089e8
 8002ea8:	200089f0 	.word	0x200089f0
 8002eac:	200089f8 	.word	0x200089f8
 8002eb0:	200089f4 	.word	0x200089f4
 8002eb4:	200089fc 	.word	0x200089fc

08002eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <prvInsertBlockIntoFreeList+0xac>)
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e002      	b.n	8002ecc <prvInsertBlockIntoFreeList+0x14>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d8f7      	bhi.n	8002ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d108      	bne.n	8002efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	441a      	add	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d118      	bne.n	8002f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <prvInsertBlockIntoFreeList+0xb0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d00d      	beq.n	8002f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e008      	b.n	8002f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <prvInsertBlockIntoFreeList+0xb0>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e003      	b.n	8002f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d002      	beq.n	8002f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	200089e8 	.word	0x200089e8
 8002f68:	200089f0 	.word	0x200089f0

08002f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <MX_DMA_Init+0x58>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <MX_DMA_Init+0x58>)
 8002f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <MX_DMA_Init+0x58>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2105      	movs	r1, #5
 8002f8e:	200c      	movs	r0, #12
 8002f90:	f002 fec6 	bl	8005d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f94:	200c      	movs	r0, #12
 8002f96:	f002 fedf 	bl	8005d58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	200e      	movs	r0, #14
 8002fa0:	f002 febe 	bl	8005d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002fa4:	200e      	movs	r0, #14
 8002fa6:	f002 fed7 	bl	8005d58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2105      	movs	r1, #5
 8002fae:	2011      	movs	r0, #17
 8002fb0:	f002 feb6 	bl	8005d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002fb4:	2011      	movs	r0, #17
 8002fb6:	f002 fecf 	bl	8005d58 <HAL_NVIC_EnableIRQ>

}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002fd6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fdc:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <cubemx_transport_open+0x28>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f007 f98c 	bl	800a2fc <HAL_UART_Receive_DMA>
    return true;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20008a00 	.word	0x20008a00

08002ff4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003002:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f007 f9bd 	bl	800a384 <HAL_UART_DMAStop>
    return true;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003028:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302e:	2b20      	cmp	r3, #32
 8003030:	d11a      	bne.n	8003068 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f007 f8e2 	bl	800a204 <HAL_UART_Transmit_DMA>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003044:	e002      	b.n	800304c <cubemx_transport_write+0x38>
            osDelay(1);
 8003046:	2001      	movs	r0, #1
 8003048:	f00c f93e 	bl	800f2c8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <cubemx_transport_write+0x46>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003056:	2b20      	cmp	r3, #32
 8003058:	d1f5      	bne.n	8003046 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <cubemx_transport_write+0x50>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	e002      	b.n	800306a <cubemx_transport_write+0x56>
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <cubemx_transport_write+0x56>
    }else{
        return 0;
 8003068:	2300      	movs	r3, #0
    }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003088:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800308e:	b672      	cpsid	i
}
 8003090:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <cubemx_transport_read+0x9c>)
 80030a0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030a2:	b662      	cpsie	i
}
 80030a4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80030ac:	2001      	movs	r0, #1
 80030ae:	f00c f90b 	bl	800f2c8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <cubemx_transport_read+0xa0>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <cubemx_transport_read+0x9c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <cubemx_transport_read+0x52>
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	dbe3      	blt.n	800308e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80030ca:	e011      	b.n	80030f0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <cubemx_transport_read+0xa0>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	440b      	add	r3, r1
 80030d6:	4910      	ldr	r1, [pc, #64]	; (8003118 <cubemx_transport_read+0xa4>)
 80030d8:	5c8a      	ldrb	r2, [r1, r2]
 80030da:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <cubemx_transport_read+0xa0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e6:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <cubemx_transport_read+0xa0>)
 80030e8:	6013      	str	r3, [r2, #0]
        wrote++;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <cubemx_transport_read+0xa0>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <cubemx_transport_read+0x9c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d003      	beq.n	8003104 <cubemx_transport_read+0x90>
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3e3      	bcc.n	80030cc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8003104:	69bb      	ldr	r3, [r7, #24]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20009204 	.word	0x20009204
 8003114:	20009200 	.word	0x20009200
 8003118:	20008a00 	.word	0x20008a00

0800311c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <MX_ETH_Init+0x84>)
 8003122:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <MX_ETH_Init+0x88>)
 8003124:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <MX_ETH_Init+0x8c>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <MX_ETH_Init+0x8c>)
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <MX_ETH_Init+0x8c>)
 8003134:	22e1      	movs	r2, #225	; 0xe1
 8003136:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <MX_ETH_Init+0x8c>)
 800313a:	2200      	movs	r2, #0
 800313c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <MX_ETH_Init+0x8c>)
 8003140:	2200      	movs	r2, #0
 8003142:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003144:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <MX_ETH_Init+0x8c>)
 8003146:	2200      	movs	r2, #0
 8003148:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <MX_ETH_Init+0x84>)
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <MX_ETH_Init+0x8c>)
 800314e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <MX_ETH_Init+0x84>)
 8003152:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003156:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <MX_ETH_Init+0x84>)
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <MX_ETH_Init+0x90>)
 800315c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <MX_ETH_Init+0x84>)
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <MX_ETH_Init+0x94>)
 8003162:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <MX_ETH_Init+0x84>)
 8003166:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800316a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <MX_ETH_Init+0x84>)
 800316e:	f003 fa17 	bl	80065a0 <HAL_ETH_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003178:	f000 ffca 	bl	8004110 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800317c:	2238      	movs	r2, #56	; 0x38
 800317e:	2100      	movs	r1, #0
 8003180:	480c      	ldr	r0, [pc, #48]	; (80031b4 <MX_ETH_Init+0x98>)
 8003182:	f01d ff23 	bl	8020fcc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_ETH_Init+0x98>)
 8003188:	2221      	movs	r2, #33	; 0x21
 800318a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_ETH_Init+0x98>)
 800318e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003192:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <MX_ETH_Init+0x98>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20009240 	.word	0x20009240
 80031a4:	40028000 	.word	0x40028000
 80031a8:	200092f0 	.word	0x200092f0
 80031ac:	200005d8 	.word	0x200005d8
 80031b0:	20000538 	.word	0x20000538
 80031b4:	20009208 	.word	0x20009208

080031b8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08e      	sub	sp, #56	; 0x38
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a4e      	ldr	r2, [pc, #312]	; (8003310 <HAL_ETH_MspInit+0x158>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f040 8096 	bne.w	8003308 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031dc:	4b4d      	ldr	r3, [pc, #308]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a4c      	ldr	r2, [pc, #304]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 80031e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031e6:	6313      	str	r3, [r2, #48]	; 0x30
 80031e8:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 80031fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003200:	4b44      	ldr	r3, [pc, #272]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	4a40      	ldr	r2, [pc, #256]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003216:	6313      	str	r3, [r2, #48]	; 0x30
 8003218:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6313      	str	r3, [r2, #48]	; 0x30
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	4a2e      	ldr	r2, [pc, #184]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	6313      	str	r3, [r2, #48]	; 0x30
 8003260:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 8003272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003276:	6313      	str	r3, [r2, #48]	; 0x30
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_ETH_MspInit+0x15c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003284:	2332      	movs	r3, #50	; 0x32
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003290:	2303      	movs	r3, #3
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003294:	230b      	movs	r3, #11
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329c:	4619      	mov	r1, r3
 800329e:	481e      	ldr	r0, [pc, #120]	; (8003318 <HAL_ETH_MspInit+0x160>)
 80032a0:	f003 fca4 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032a4:	2386      	movs	r3, #134	; 0x86
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032b4:	230b      	movs	r3, #11
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032bc:	4619      	mov	r1, r3
 80032be:	4817      	ldr	r0, [pc, #92]	; (800331c <HAL_ETH_MspInit+0x164>)
 80032c0:	f003 fc94 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032d6:	230b      	movs	r3, #11
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	4619      	mov	r1, r3
 80032e0:	480f      	ldr	r0, [pc, #60]	; (8003320 <HAL_ETH_MspInit+0x168>)
 80032e2:	f003 fc83 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80032e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032f8:	230b      	movs	r3, #11
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003300:	4619      	mov	r1, r3
 8003302:	4808      	ldr	r0, [pc, #32]	; (8003324 <HAL_ETH_MspInit+0x16c>)
 8003304:	f003 fc72 	bl	8006bec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003308:	bf00      	nop
 800330a:	3738      	adds	r7, #56	; 0x38
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40028000 	.word	0x40028000
 8003314:	40023800 	.word	0x40023800
 8003318:	40020800 	.word	0x40020800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40021800 	.word	0x40021800

08003328 <pub_timer_callback_enc>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void pub_timer_callback_enc(rcl_timer_t * timer, int64_t last_call_time){
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	e9c7 2300 	strd	r2, r3, [r7]
    RCLC_UNUSED(last_call_time);
    geometry_msgs__msg__Point feedback_msg;

    if (timer != NULL) {
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01b      	beq.n	8003372 <pub_timer_callback_enc+0x4a>

        feedback_msg.x = 0.0f;
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9c7 2304 	strd	r2, r3, [r7, #16]
        feedback_msg.y = 0.0f;
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9c7 2306 	strd	r2, r3, [r7, #24]
//        feedback_msg.z.data = ;     //zはいらない
        RCSOFTCHECK(rcl_publish(&publisher_enc, &feedback_msg, NULL));
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	2200      	movs	r2, #0
 8003358:	4619      	mov	r1, r3
 800335a:	4808      	ldr	r0, [pc, #32]	; (800337c <pub_timer_callback_enc+0x54>)
 800335c:	f011 f99a 	bl	8014694 <rcl_publish>
 8003360:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <pub_timer_callback_enc+0x4a>
 8003368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336a:	2186      	movs	r1, #134	; 0x86
 800336c:	4804      	ldr	r0, [pc, #16]	; (8003380 <pub_timer_callback_enc+0x58>)
 800336e:	f01d fb99 	bl	8020aa4 <iprintf>

    }
}
 8003372:	bf00      	nop
 8003374:	3730      	adds	r7, #48	; 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200092f8 	.word	0x200092f8
 8003380:	08022098 	.word	0x08022098

08003384 <subscription_callback_air>:

void subscription_callback_air(const void * msgin)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const std_msgs__msg__Bool * air = (const std_msgs__msg__Bool *)msgin;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	613b      	str	r3, [r7, #16]
	  static Air_PortStatus_Typedef air_status[2];

	  MCMD_SetTarget(&(mcmd_handlers[1]), 0.4f);
 8003390:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800341c <subscription_callback_air+0x98>
 8003394:	4822      	ldr	r0, [pc, #136]	; (8003420 <subscription_callback_air+0x9c>)
 8003396:	f7fe f92f 	bl	80015f8 <MCMD_SetTarget>

	  air_status[0] = (air->data)? AIR_OFF : AIR_ON;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <subscription_callback_air+0xa0>)
 80033a8:	701a      	strb	r2, [r3, #0]
	  air_status[1] = (air->data)? AIR_OFF : AIR_ON;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f083 0301 	eor.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <subscription_callback_air+0xa0>)
 80033b8:	705a      	strb	r2, [r3, #1]

	  if(air->data) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <subscription_callback_air+0x46>
 80033c2:	2101      	movs	r1, #1
 80033c4:	4818      	ldr	r0, [pc, #96]	; (8003428 <subscription_callback_air+0xa4>)
 80033c6:	f003 fdd6 	bl	8006f76 <HAL_GPIO_TogglePin>

	  int i=0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
	  for(int j=0;j<2;j++){       //TODO: j<6は手動
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e01b      	b.n	800340c <subscription_callback_air+0x88>
		  air_devices[i].device_num = j;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	b2d8      	uxtb	r0, r3
 80033d8:	4914      	ldr	r1, [pc, #80]	; (800342c <subscription_callback_air+0xa8>)
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	3302      	adds	r3, #2
 80033e6:	4602      	mov	r2, r0
 80033e8:	701a      	strb	r2, [r3, #0]
		  AirCylinder_SendOutput(&air_devices[i], air_status[j]);
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <subscription_callback_air+0xa8>)
 80033f4:	441a      	add	r2, r3
 80033f6:	490b      	ldr	r1, [pc, #44]	; (8003424 <subscription_callback_air+0xa0>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	440b      	add	r3, r1
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe f92b 	bl	800165c <AirCylinder_SendOutput>
	  for(int j=0;j<2;j++){       //TODO: j<6は手動
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b01      	cmp	r3, #1
 8003410:	dde0      	ble.n	80033d4 <subscription_callback_air+0x50>
	  }


}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	3ecccccd 	.word	0x3ecccccd
 8003420:	20004b44 	.word	0x20004b44
 8003424:	2000c4cc 	.word	0x2000c4cc
 8003428:	40020400 	.word	0x40020400
 800342c:	20004b84 	.word	0x20004b84

08003430 <subscription_callback_table>:

void subscription_callback_table(const void * msgin)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const std_msgs__msg__Float64 * zrot = (const std_msgs__msg__Float64 *)msgin;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60fb      	str	r3, [r7, #12]
	  static float zrot_rad;
	  zrot_rad = zrot->data;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	ed93 7b00 	vldr	d7, [r3]
 8003442:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <subscription_callback_table+0x34>)
 8003448:	edc3 7a00 	vstr	s15, [r3]

	  MCMD_SetTarget(&(mcmd_handlers[0]), zrot_rad);
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <subscription_callback_table+0x34>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	eeb0 0a67 	vmov.f32	s0, s15
 8003456:	4804      	ldr	r0, [pc, #16]	; (8003468 <subscription_callback_table+0x38>)
 8003458:	f7fe f8ce 	bl	80015f8 <MCMD_SetTarget>

}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000c4d0 	.word	0x2000c4d0
 8003468:	20004b04 	.word	0x20004b04

0800346c <subscription_callback>:

void subscription_callback(const void * msgin)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const geometry_msgs__msg__Twist * twist = (const geometry_msgs__msg__Twist *)msgin;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60fb      	str	r3, [r7, #12]
	  static float v_x,v_y,v_theta;

	  v_x = twist->linear.x;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	ed93 7b00 	vldr	d7, [r3]
 800347e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <subscription_callback+0x88>)
 8003484:	edc3 7a00 	vstr	s15, [r3]
	  v_y = twist->linear.y;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	ed93 7b02 	vldr	d7, [r3, #8]
 800348e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003492:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <subscription_callback+0x8c>)
 8003494:	edc3 7a00 	vstr	s15, [r3]
	  v_theta = twist->angular.z;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800349e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <subscription_callback+0x90>)
 80034a4:	edc3 7a00 	vstr	s15, [r3]

	  Linearmovement(c620_dev_info_global, v_x, v_y, v_theta);
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <subscription_callback+0x88>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <subscription_callback+0x8c>)
 80034b0:	ed93 7a00 	vldr	s14, [r3]
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <subscription_callback+0x90>)
 80034b6:	edd3 6a00 	vldr	s13, [r3]
 80034ba:	eeb0 1a66 	vmov.f32	s2, s13
 80034be:	eef0 0a47 	vmov.f32	s1, s14
 80034c2:	eeb0 0a67 	vmov.f32	s0, s15
 80034c6:	480e      	ldr	r0, [pc, #56]	; (8003500 <subscription_callback+0x94>)
 80034c8:	f7ff f91a 	bl	8002700 <Linearmovement>

	  if(v_x == 100.0) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <subscription_callback+0x88>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003504 <subscription_callback+0x98>
 80034d6:	eef4 7a47 	vcmp.f32	s15, s14
 80034da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034de:	d104      	bne.n	80034ea <subscription_callback+0x7e>
 80034e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034e4:	4808      	ldr	r0, [pc, #32]	; (8003508 <subscription_callback+0x9c>)
 80034e6:	f003 fd46 	bl	8006f76 <HAL_GPIO_TogglePin>

}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000c4d4 	.word	0x2000c4d4
 80034f8:	2000c4d8 	.word	0x2000c4d8
 80034fc:	2000c4dc 	.word	0x2000c4dc
 8003500:	20004b88 	.word	0x20004b88
 8003504:	42c80000 	.word	0x42c80000
 8003508:	40020400 	.word	0x40020400

0800350c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of C620Timer */
  C620TimerHandle = osTimerNew(C620TimerCallback, osTimerPeriodic, NULL, &C620Timer_attributes);
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <MX_FREERTOS_Init+0x3c>)
 8003512:	2200      	movs	r2, #0
 8003514:	2101      	movs	r1, #1
 8003516:	480d      	ldr	r0, [pc, #52]	; (800354c <MX_FREERTOS_Init+0x40>)
 8003518:	f00b ff1a 	bl	800f350 <osTimerNew>
 800351c:	4603      	mov	r3, r0
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <MX_FREERTOS_Init+0x44>)
 8003520:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <MX_FREERTOS_Init+0x48>)
 8003524:	2100      	movs	r1, #0
 8003526:	480c      	ldr	r0, [pc, #48]	; (8003558 <MX_FREERTOS_Init+0x4c>)
 8003528:	f00b fe28 	bl	800f17c <osThreadNew>
 800352c:	4603      	mov	r3, r0
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <MX_FREERTOS_Init+0x50>)
 8003530:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <MX_FREERTOS_Init+0x54>)
 8003534:	2100      	movs	r1, #0
 8003536:	480b      	ldr	r0, [pc, #44]	; (8003564 <MX_FREERTOS_Init+0x58>)
 8003538:	f00b fe20 	bl	800f17c <osThreadNew>
 800353c:	4603      	mov	r3, r0
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <MX_FREERTOS_Init+0x5c>)
 8003540:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	080222a4 	.word	0x080222a4
 800354c:	080039fd 	.word	0x080039fd
 8003550:	2000c49c 	.word	0x2000c49c
 8003554:	0802225c 	.word	0x0802225c
 8003558:	08003571 	.word	0x08003571
 800355c:	200092fc 	.word	0x200092fc
 8003560:	08022280 	.word	0x08022280
 8003564:	080039c5 	.word	0x080039c5
 8003568:	2000c23c 	.word	0x2000c23c
 800356c:	00000000 	.word	0x00000000

08003570 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8003576:	af02      	add	r7, sp, #8
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003580:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003582:	f00e fd53 	bl	801202c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	 rmw_uros_set_custom_transport(
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <StartDefaultTask+0x4c>)
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <StartDefaultTask+0x50>)
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <StartDefaultTask+0x54>)
 8003590:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <StartDefaultTask+0x58>)
 8003592:	490e      	ldr	r1, [pc, #56]	; (80035cc <StartDefaultTask+0x5c>)
 8003594:	2001      	movs	r0, #1
 8003596:	f012 f913 	bl	80157c0 <rmw_uros_set_custom_transport>
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	// micro-ROS connection check
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> ON
 800359a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800359e:	480c      	ldr	r0, [pc, #48]	; (80035d0 <StartDefaultTask+0x60>)
 80035a0:	f003 fce9 	bl	8006f76 <HAL_GPIO_TogglePin>
	while(1) {
		rmw_ret_t ping_result = rmw_uros_ping_agent(1000, 5);  // ping Agent
 80035a4:	2105      	movs	r1, #5
 80035a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035aa:	f012 f91f 	bl	80157ec <rmw_uros_ping_agent>
 80035ae:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		if(ping_result == RMW_RET_OK){
 80035b2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <StartDefaultTask+0x64>
	while(1) {
 80035ba:	e7f3      	b.n	80035a4 <StartDefaultTask+0x34>
 80035bc:	08003075 	.word	0x08003075
 80035c0:	08003015 	.word	0x08003015
 80035c4:	08002ff5 	.word	0x08002ff5
 80035c8:	08002fc9 	.word	0x08002fc9
 80035cc:	2000c65c 	.word	0x2000c65c
 80035d0:	40020400 	.word	0x40020400
			break;
 80035d4:	bf00      	nop
		}
	}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> OFF
 80035d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035da:	48d1      	ldr	r0, [pc, #836]	; (8003920 <StartDefaultTask+0x3b0>)
 80035dc:	f003 fccb 	bl	8006f76 <HAL_GPIO_TogglePin>


	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80035e0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80035e4:	4618      	mov	r0, r3
 80035e6:	f012 f80d 	bl	8015604 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80035ea:	4bce      	ldr	r3, [pc, #824]	; (8003924 <StartDefaultTask+0x3b4>)
 80035ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	freeRTOS_allocator.deallocate = microros_deallocate;
 80035f0:	4bcd      	ldr	r3, [pc, #820]	; (8003928 <StartDefaultTask+0x3b8>)
 80035f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	freeRTOS_allocator.reallocate = microros_reallocate;
 80035f6:	4bcd      	ldr	r3, [pc, #820]	; (800392c <StartDefaultTask+0x3bc>)
 80035f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80035fc:	4bcc      	ldr	r3, [pc, #816]	; (8003930 <StartDefaultTask+0x3c0>)
 80035fe:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8003602:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003606:	4618      	mov	r0, r3
 8003608:	f012 f80a 	bl	8015620 <rcutils_set_default_allocator>
 800360c:	4603      	mov	r3, r0
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <StartDefaultTask+0xb2>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8003618:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800361c:	48c5      	ldr	r0, [pc, #788]	; (8003934 <StartDefaultTask+0x3c4>)
 800361e:	f01d fa41 	bl	8020aa4 <iprintf>
	}
	printf("start Micro-ROS Task\n");
 8003622:	48c5      	ldr	r0, [pc, #788]	; (8003938 <StartDefaultTask+0x3c8>)
 8003624:	f01d faa4 	bl	8020b70 <puts>

	// micro-ROS app
	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8003628:	4bc4      	ldr	r3, [pc, #784]	; (800393c <StartDefaultTask+0x3cc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6898      	ldr	r0, [r3, #8]
 800362e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003632:	2202      	movs	r2, #2
 8003634:	2100      	movs	r1, #0
 8003636:	f01d faab 	bl	8020b90 <setvbuf>
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800363a:	f010 fe25 	bl	8014288 <rcl_get_zero_initialized_init_options>
 800363e:	4603      	mov	r3, r0
 8003640:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	rclc_support_t support;
	rcl_allocator_t allocator = rcl_get_default_allocator();
 8003644:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003648:	4618      	mov	r0, r3
 800364a:	f012 f807 	bl	801565c <rcutils_get_default_allocator>
	rcl_node_t node;
	rcl_node_options_t node_ops = rcl_node_get_default_options();
 800364e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003652:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003656:	4618      	mov	r0, r3
 8003658:	f010 ff1e 	bl	8014498 <rcl_node_get_default_options>
	// // node setting
	// RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));  //create init_options
	// RCCHECK(rclc_node_init_default(&node, "f7_mros_node_r2", "", &support));  // create node

	// node setting
	RCCHECK(rcl_init_options_init(&init_options, allocator));
 800365c:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 8003660:	466a      	mov	r2, sp
 8003662:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800366a:	e882 0003 	stmia.w	r2, {r0, r1}
 800366e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003674:	4620      	mov	r0, r4
 8003676:	f010 fe09 	bl	801428c <rcl_init_options_init>
 800367a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 800367e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <StartDefaultTask+0x12a>
 8003686:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800368a:	f240 113f 	movw	r1, #319	; 0x13f
 800368e:	48ac      	ldr	r0, [pc, #688]	; (8003940 <StartDefaultTask+0x3d0>)
 8003690:	f01d fa08 	bl	8020aa4 <iprintf>
 8003694:	2000      	movs	r0, #0
 8003696:	f00c fe7b 	bl	8010390 <vTaskDelete>
	RCCHECK(rcl_init_options_set_domain_id(&init_options, 30)); // ROS_DOMAIN_IDの設定。今回は123としてる。
 800369a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800369e:	211e      	movs	r1, #30
 80036a0:	4618      	mov	r0, r3
 80036a2:	f010 fef1 	bl	8014488 <rcl_init_options_set_domain_id>
 80036a6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
 80036aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <StartDefaultTask+0x156>
 80036b2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80036b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80036ba:	48a1      	ldr	r0, [pc, #644]	; (8003940 <StartDefaultTask+0x3d0>)
 80036bc:	f01d f9f2 	bl	8020aa4 <iprintf>
 80036c0:	2000      	movs	r0, #0
 80036c2:	f00c fe65 	bl	8010390 <vTaskDelete>
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80036c6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80036ca:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80036ce:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	f011 fe75 	bl	80153c8 <rclc_support_init_with_options>
	RCCHECK(rclc_node_init_with_options(&node, "f7_mros_node_r2", "", &support, &node_ops));
 80036de:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80036e2:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80036e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	4a95      	ldr	r2, [pc, #596]	; (8003944 <StartDefaultTask+0x3d4>)
 80036f0:	4995      	ldr	r1, [pc, #596]	; (8003948 <StartDefaultTask+0x3d8>)
 80036f2:	f011 fe9f 	bl	8015434 <rclc_node_init_with_options>
 80036f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80036fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <StartDefaultTask+0x1a6>
 8003702:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8003706:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800370a:	488d      	ldr	r0, [pc, #564]	; (8003940 <StartDefaultTask+0x3d0>)
 800370c:	f01d f9ca 	bl	8020aa4 <iprintf>
 8003710:	2000      	movs	r0, #0
 8003712:	f00c fe3d 	bl	8010390 <vTaskDelete>

	// create executor
	rclc_executor_t executor;
	unsigned int num_handlers = 4; // TODO : 忘れずに変更
 8003716:	2304      	movs	r3, #4
 8003718:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	RCCHECK(rclc_executor_init(&executor, &support.context, num_handlers, &allocator));
 800371c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003720:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8003724:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003728:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800372c:	f011 fb40 	bl	8014db0 <rclc_executor_init>
 8003730:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8003734:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <StartDefaultTask+0x1e0>
 800373c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8003740:	f240 1147 	movw	r1, #327	; 0x147
 8003744:	487e      	ldr	r0, [pc, #504]	; (8003940 <StartDefaultTask+0x3d0>)
 8003746:	f01d f9ad 	bl	8020aa4 <iprintf>
 800374a:	2000      	movs	r0, #0
 800374c:	f00c fe20 	bl	8010390 <vTaskDelete>

	// create subscriber for air
	rcl_subscription_t subscriber_air;
	const char* sub_name_air= "mros_input_air_r2";
 8003750:	4b7e      	ldr	r3, [pc, #504]	; (800394c <StartDefaultTask+0x3dc>)
 8003752:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	std_msgs__msg__Bool actuator_msg_air;
	RCCHECK(rclc_subscription_init_default(&subscriber_air, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Bool), sub_name_air));
 8003756:	f013 fb27 	bl	8016da8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800375a:	4602      	mov	r2, r0
 800375c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8003760:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003764:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003768:	f011 feda 	bl	8015520 <rclc_subscription_init_default>
 800376c:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8003770:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <StartDefaultTask+0x21c>
 8003778:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800377c:	f240 114d 	movw	r1, #333	; 0x14d
 8003780:	486f      	ldr	r0, [pc, #444]	; (8003940 <StartDefaultTask+0x3d0>)
 8003782:	f01d f98f 	bl	8020aa4 <iprintf>
 8003786:	2000      	movs	r0, #0
 8003788:	f00c fe02 	bl	8010390 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_air, &actuator_msg_air, &subscription_callback_air, ON_NEW_DATA));
 800378c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003790:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003794:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <StartDefaultTask+0x3e0>)
 800379e:	f011 fb83 	bl	8014ea8 <rclc_executor_add_subscription>
 80037a2:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
 80037a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <StartDefaultTask+0x252>
 80037ae:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80037b2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80037b6:	4862      	ldr	r0, [pc, #392]	; (8003940 <StartDefaultTask+0x3d0>)
 80037b8:	f01d f974 	bl	8020aa4 <iprintf>
 80037bc:	2000      	movs	r0, #0
 80037be:	f00c fde7 	bl	8010390 <vTaskDelete>

	// create subscriber for table
	rcl_subscription_t subscriber_table;
	const char* sub_name_table = "mros_input_table_r2";
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <StartDefaultTask+0x3e4>)
 80037c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	std_msgs__msg__Float64 actuator_msg_table;
	RCCHECK(rclc_subscription_init_default(&subscriber_table, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64), sub_name_table));
 80037c8:	f013 fb06 	bl	8016dd8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80037d2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80037d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037da:	f011 fea1 	bl	8015520 <rclc_subscription_init_default>
 80037de:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc
 80037e2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <StartDefaultTask+0x28e>
 80037ea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80037ee:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80037f2:	4853      	ldr	r0, [pc, #332]	; (8003940 <StartDefaultTask+0x3d0>)
 80037f4:	f01d f956 	bl	8020aa4 <iprintf>
 80037f8:	2000      	movs	r0, #0
 80037fa:	f00c fdc9 	bl	8010390 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_table, &actuator_msg_table, &subscription_callback_table, ON_NEW_DATA));
 80037fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003802:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003806:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4b52      	ldr	r3, [pc, #328]	; (8003958 <StartDefaultTask+0x3e8>)
 8003810:	f011 fb4a 	bl	8014ea8 <rclc_executor_add_subscription>
 8003814:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8003818:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <StartDefaultTask+0x2c4>
 8003820:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003824:	f240 1155 	movw	r1, #341	; 0x155
 8003828:	4845      	ldr	r0, [pc, #276]	; (8003940 <StartDefaultTask+0x3d0>)
 800382a:	f01d f93b 	bl	8020aa4 <iprintf>
 800382e:	2000      	movs	r0, #0
 8003830:	f00c fdae 	bl	8010390 <vTaskDelete>

	// create subscriber for foots
	rcl_subscription_t subscriber_vel;
	const char* sub_name_f = "cmd_vel_r2";
 8003834:	4b49      	ldr	r3, [pc, #292]	; (800395c <StartDefaultTask+0x3ec>)
 8003836:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	geometry_msgs__msg__Twist actuator_msg_f;
	RCCHECK(rclc_subscription_init_default(&subscriber_vel, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), sub_name_f));
 800383a:	f00f f97f 	bl	8012b3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800383e:	4602      	mov	r2, r0
 8003840:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8003844:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003848:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800384c:	f011 fe68 	bl	8015520 <rclc_subscription_init_default>
 8003850:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
 8003854:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <StartDefaultTask+0x300>
 800385c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8003860:	f240 115b 	movw	r1, #347	; 0x15b
 8003864:	4836      	ldr	r0, [pc, #216]	; (8003940 <StartDefaultTask+0x3d0>)
 8003866:	f01d f91d 	bl	8020aa4 <iprintf>
 800386a:	2000      	movs	r0, #0
 800386c:	f00c fd90 	bl	8010390 <vTaskDelete>
	RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_vel, &actuator_msg_f, &subscription_callback, ON_NEW_DATA));
 8003870:	f107 0210 	add.w	r2, r7, #16
 8003874:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003878:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800387c:	2300      	movs	r3, #0
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <StartDefaultTask+0x3f0>)
 8003882:	f011 fb11 	bl	8014ea8 <rclc_executor_add_subscription>
 8003886:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 800388a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <StartDefaultTask+0x336>
 8003892:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8003896:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800389a:	4829      	ldr	r0, [pc, #164]	; (8003940 <StartDefaultTask+0x3d0>)
 800389c:	f01d f902 	bl	8020aa4 <iprintf>
 80038a0:	2000      	movs	r0, #0
 80038a2:	f00c fd75 	bl	8010390 <vTaskDelete>

    // publisher for enc
    const char* topic_name_pub_enc = "mros_output_enc_r2";
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <StartDefaultTask+0x3f4>)
 80038a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    RCCHECK(rclc_publisher_init_default(&publisher_enc, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Point), topic_name_pub_enc));
 80038ac:	f00f f92e 	bl	8012b0c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80038b0:	4602      	mov	r2, r0
 80038b2:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80038b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80038ba:	482b      	ldr	r0, [pc, #172]	; (8003968 <StartDefaultTask+0x3f8>)
 80038bc:	f011 fdf6 	bl	80154ac <rclc_publisher_init_default>
 80038c0:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
 80038c4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <StartDefaultTask+0x370>
 80038cc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80038d0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80038d4:	481a      	ldr	r0, [pc, #104]	; (8003940 <StartDefaultTask+0x3d0>)
 80038d6:	f01d f8e5 	bl	8020aa4 <iprintf>
 80038da:	2000      	movs	r0, #0
 80038dc:	f00c fd58 	bl	8010390 <vTaskDelete>
    rcl_timer_t timer_enc;
    RCCHECK(rclc_timer_init_default(&timer_enc, &support, RCL_MS_TO_NS(45), pub_timer_callback_enc));
 80038e0:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80038e4:	f107 000c 	add.w	r0, r7, #12
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <StartDefaultTask+0x3fc>)
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	a30a      	add	r3, pc, #40	; (adr r3, 8003918 <StartDefaultTask+0x3a8>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f011 fe4f 	bl	8015594 <rclc_timer_init_default>
 80038f6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 80038fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d036      	beq.n	8003970 <StartDefaultTask+0x400>
 8003902:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003906:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <StartDefaultTask+0x3d0>)
 800390c:	f01d f8ca 	bl	8020aa4 <iprintf>
 8003910:	2000      	movs	r0, #0
 8003912:	f00c fd3d 	bl	8010390 <vTaskDelete>
 8003916:	e02b      	b.n	8003970 <StartDefaultTask+0x400>
 8003918:	02aea540 	.word	0x02aea540
 800391c:	00000000 	.word	0x00000000
 8003920:	40020400 	.word	0x40020400
 8003924:	0800411d 	.word	0x0800411d
 8003928:	08004161 	.word	0x08004161
 800392c:	08004199 	.word	0x08004199
 8003930:	08004205 	.word	0x08004205
 8003934:	080220c4 	.word	0x080220c4
 8003938:	080220ec 	.word	0x080220ec
 800393c:	20000534 	.word	0x20000534
 8003940:	08022104 	.word	0x08022104
 8003944:	08022130 	.word	0x08022130
 8003948:	08022134 	.word	0x08022134
 800394c:	08022144 	.word	0x08022144
 8003950:	08003385 	.word	0x08003385
 8003954:	08022158 	.word	0x08022158
 8003958:	08003431 	.word	0x08003431
 800395c:	0802216c 	.word	0x0802216c
 8003960:	0800346d 	.word	0x0800346d
 8003964:	08022178 	.word	0x08022178
 8003968:	200092f8 	.word	0x200092f8
 800396c:	08003329 	.word	0x08003329
    RCCHECK(rclc_executor_add_timer(&executor, &timer_enc));
 8003970:	f107 020c 	add.w	r2, r7, #12
 8003974:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f011 fad2 	bl	8014f24 <rclc_executor_add_timer>
 8003980:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8003984:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <StartDefaultTask+0x430>
 800398c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003990:	f240 1163 	movw	r1, #355	; 0x163
 8003994:	480a      	ldr	r0, [pc, #40]	; (80039c0 <StartDefaultTask+0x450>)
 8003996:	f01d f885 	bl	8020aa4 <iprintf>
 800399a:	2000      	movs	r0, #0
 800399c:	f00c fcf8 	bl	8010390 <vTaskDelete>

	//rclc_executor_spin(&executor);
  	while(1){
          // エグゼキューターを実行してリクエストを処理
          rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80039a0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80039a4:	a304      	add	r3, pc, #16	; (adr r3, 80039b8 <StartDefaultTask+0x448>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	4608      	mov	r0, r1
 80039ac:	f011 fcd4 	bl	8015358 <rclc_executor_spin_some>
          osDelay(10);
 80039b0:	200a      	movs	r0, #10
 80039b2:	f00b fc89 	bl	800f2c8 <osDelay>
          rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80039b6:	e7f3      	b.n	80039a0 <StartDefaultTask+0x430>
 80039b8:	05f5e100 	.word	0x05f5e100
 80039bc:	00000000 	.word	0x00000000
 80039c0:	08022104 	.word	0x08022104

080039c4 <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue)
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	4807      	ldr	r0, [pc, #28]	; (80039ec <StartLEDTask+0x28>)
 80039d0:	f003 fad1 	bl	8006f76 <HAL_GPIO_TogglePin>
      osDelay(10);
 80039d4:	200a      	movs	r0, #10
 80039d6:	f00b fc77 	bl	800f2c8 <osDelay>
      C620_SendRequest(c620_dev_info_global, 4, 1000.0f, &hcan1);
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <StartLEDTask+0x2c>)
 80039dc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80039f4 <StartLEDTask+0x30>
 80039e0:	2104      	movs	r1, #4
 80039e2:	4805      	ldr	r0, [pc, #20]	; (80039f8 <StartLEDTask+0x34>)
 80039e4:	f7fe f854 	bl	8001a90 <C620_SendRequest>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue)
 80039e8:	e7f0      	b.n	80039cc <StartLEDTask+0x8>
 80039ea:	bf00      	nop
 80039ec:	40020400 	.word	0x40020400
 80039f0:	20004aa8 	.word	0x20004aa8
 80039f4:	447a0000 	.word	0x447a0000
 80039f8:	20004b88 	.word	0x20004b88

080039fc <C620TimerCallback>:
  /* USER CODE END StartLEDTask */
}

/* C620TimerCallback function */
void C620TimerCallback(void *argument)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN C620TimerCallback */
   // C620_SendRequest(c620_dev_info_global, 4, 1000.0f, &hcan1);
  /* USER CODE END C620TimerCallback */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	; 0x30
 8003a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a16:	f107 031c 	add.w	r3, r7, #28
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a46      	ldr	r2, [pc, #280]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a3e:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a3a      	ldr	r2, [pc, #232]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6e:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b32      	ldr	r3, [pc, #200]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a2e      	ldr	r2, [pc, #184]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <MX_GPIO_Init+0x134>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f244 0181 	movw	r1, #16513	; 0x4081
 8003abc:	4822      	ldr	r0, [pc, #136]	; (8003b48 <MX_GPIO_Init+0x138>)
 8003abe:	f003 fa41 	bl	8006f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	4821      	ldr	r0, [pc, #132]	; (8003b4c <MX_GPIO_Init+0x13c>)
 8003ac8:	f003 fa3c 	bl	8006f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ad2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	481b      	ldr	r0, [pc, #108]	; (8003b50 <MX_GPIO_Init+0x140>)
 8003ae4:	f003 f882 	bl	8006bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003ae8:	f244 0381 	movw	r3, #16513	; 0x4081
 8003aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	4811      	ldr	r0, [pc, #68]	; (8003b48 <MX_GPIO_Init+0x138>)
 8003b02:	f003 f873 	bl	8006bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	480b      	ldr	r0, [pc, #44]	; (8003b4c <MX_GPIO_Init+0x13c>)
 8003b1e:	f003 f865 	bl	8006bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4619      	mov	r1, r3
 8003b34:	4805      	ldr	r0, [pc, #20]	; (8003b4c <MX_GPIO_Init+0x13c>)
 8003b36:	f003 f859 	bl	8006bec <HAL_GPIO_Init>

}
 8003b3a:	bf00      	nop
 8003b3c:	3730      	adds	r7, #48	; 0x30
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40020800 	.word	0x40020800

08003b54 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, &ch, 1, 500);
 8003b5e:	1df9      	adds	r1, r7, #7
 8003b60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b64:	2201      	movs	r2, #1
 8003b66:	4804      	ldr	r0, [pc, #16]	; (8003b78 <__io_putchar+0x24>)
 8003b68:	f006 fac8 	bl	800a0fc <HAL_UART_Transmit>
    return ch;
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2000c5d4 	.word	0x2000c5d4

08003b7c <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fe faab 	bl	80020e0 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fc ff50 	bl	8000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fe fab3 	bl	800210c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc ff58 	bl	8000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fe fa8f 	bl	80020e0 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fc ff34 	bl	8000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fe fa97 	bl	800210c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fc ff3c 	bl	8000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fe fa73 	bl	80020e0 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc ff18 	bl	8000a30 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fe fa7b 	bl	800210c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc ff20 	bl	8000a5c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fc ff2a 	bl	8000a88 <WhenCANRxFifo0MsgPending>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20004afc 	.word	0x20004afc

08003c40 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
    C620_WhenCANRxFifo1MsgPending(hcan);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe fb81 	bl	8002350 <C620_WhenCANRxFifo1MsgPending>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c5e:	f001 f904 	bl	8004e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c62:	f000 f9d1 	bl	8004008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c66:	f7ff fed3 	bl	8003a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c6a:	f7ff f97f 	bl	8002f6c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003c6e:	f000 ff33 	bl	8004ad8 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8003c72:	f7ff fa53 	bl	800311c <MX_ETH_Init>
  MX_CAN1_Init();
 8003c76:	f7fe fdf3 	bl	8002860 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003c7a:	f7fe fe27 	bl	80028cc <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8003c7e:	f000 fefb 	bl	8004a78 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003c82:	f000 fdb9 	bl	80047f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003c86:	f000 fe0d 	bl	80048a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8003c8a:	4bb9      	ldr	r3, [pc, #740]	; (8003f70 <main+0x318>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f01c ff74 	bl	8020b80 <setbuf>
  setbuf(stderr, NULL);
 8003c98:	4bb5      	ldr	r3, [pc, #724]	; (8003f70 <main+0x318>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f01c ff6d 	bl	8020b80 <setbuf>

  /*
    * ===== CANLib Settings =====
    * */
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) ON
 8003ca6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003caa:	48b2      	ldr	r0, [pc, #712]	; (8003f74 <main+0x31c>)
 8003cac:	f003 f963 	bl	8006f76 <HAL_GPIO_TogglePin>

   //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

  printf("Start Initializing CAN System:Begin\n\r");
 8003cb0:	48b1      	ldr	r0, [pc, #708]	; (8003f78 <main+0x320>)
 8003cb2:	f01c fef7 	bl	8020aa4 <iprintf>



   num_of_devices.mcmd3 = NUM_OF_MCMD3; //1
 8003cb6:	4bb1      	ldr	r3, [pc, #708]	; (8003f7c <main+0x324>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	709a      	strb	r2, [r3, #2]
//   num_of_devices.mcmd4 = 0;
   num_of_devices.mcmd4 = NUM_OF_MCMD4;  // TODO: こっちが正しい -> 0
 8003cbc:	4baf      	ldr	r3, [pc, #700]	; (8003f7c <main+0x324>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	715a      	strb	r2, [r3, #5]
   num_of_devices.air = 1;//NUM_OF_AIR;  // TODO: 1にする
 8003cc2:	4bae      	ldr	r3, [pc, #696]	; (8003f7c <main+0x324>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	711a      	strb	r2, [r3, #4]

   CAN_SystemInit(&hcan2); // F7のCAN通信のinit
 8003cc8:	48ad      	ldr	r0, [pc, #692]	; (8003f80 <main+0x328>)
 8003cca:	f7fd f837 	bl	8000d3c <CAN_SystemInit>



   printf("Start Initializing CAN System:End\n\r");
 8003cce:	48ad      	ldr	r0, [pc, #692]	; (8003f84 <main+0x32c>)
 8003cd0:	f01c fee8 	bl	8020aa4 <iprintf>
   if(!DISABLE_CAN_WAIT_CONNECT)CAN_WaitConnect(&num_of_devices);
 8003cd4:	48a9      	ldr	r0, [pc, #676]	; (8003f7c <main+0x324>)
 8003cd6:	f7fd fad9 	bl	800128c <CAN_WaitConnect>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue) ON
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	48a5      	ldr	r0, [pc, #660]	; (8003f74 <main+0x31c>)
 8003cde:	f003 f94a 	bl	8006f76 <HAL_GPIO_TogglePin>
       osDelay(10);
       MCMD_Control_Enable(&mcmd_handlers[0]);  // 制御開始
       osDelay(10);
#endif
    //   suction pad
       mcmd_handlers[1].device.node_type = NODE_MCMD3;
 8003ce2:	4ba9      	ldr	r3, [pc, #676]	; (8003f88 <main+0x330>)
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
       mcmd_handlers[1].device.node_id = 1;
 8003cea:	4ba7      	ldr	r3, [pc, #668]	; (8003f88 <main+0x330>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
       mcmd_handlers[1].device.device_num = 0;
 8003cf2:	4ba5      	ldr	r3, [pc, #660]	; (8003f88 <main+0x330>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
       mcmd_handlers[1].ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 8003cfa:	4ba3      	ldr	r3, [pc, #652]	; (8003f88 <main+0x330>)
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
       mcmd_handlers[1].ctrl_param.feedback = MCMD_FB_ENABLE;
 8003d02:	4ba1      	ldr	r3, [pc, #644]	; (8003f88 <main+0x330>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
       mcmd_handlers[1].fb_type = MCMD_FB_POS;
 8003d0a:	4b9f      	ldr	r3, [pc, #636]	; (8003f88 <main+0x330>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
       mcmd_handlers[1].limit_sw_type = LIMIT_SW_NO;
 8003d12:	4b9d      	ldr	r3, [pc, #628]	; (8003f88 <main+0x330>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
       mcmd_handlers[1].enc_dir = MCMD_DIR_FW;
 8003d1a:	4b9b      	ldr	r3, [pc, #620]	; (8003f88 <main+0x330>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
       mcmd_handlers[1].rot_dir = MCMD_DIR_FW;
 8003d22:	4b99      	ldr	r3, [pc, #612]	; (8003f88 <main+0x330>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
       mcmd_handlers[1].calib = CALIBRATION_DISABLE;
 8003d2a:	4b97      	ldr	r3, [pc, #604]	; (8003f88 <main+0x330>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
       mcmd_handlers[1].ctrl_param.gravity_compensation = GRAVITY_COMPENSATION_DISABLE;
 8003d32:	4b95      	ldr	r3, [pc, #596]	; (8003f88 <main+0x330>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
       mcmd_handlers[1].calib_duty = -0.6f;
 8003d3a:	4b93      	ldr	r3, [pc, #588]	; (8003f88 <main+0x330>)
 8003d3c:	4a93      	ldr	r2, [pc, #588]	; (8003f8c <main+0x334>)
 8003d3e:	649a      	str	r2, [r3, #72]	; 0x48
       mcmd_handlers[1].quant_per_unit = 90.0f / 1024.0f;
 8003d40:	4b91      	ldr	r3, [pc, #580]	; (8003f88 <main+0x330>)
 8003d42:	4a93      	ldr	r2, [pc, #588]	; (8003f90 <main+0x338>)
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50
       mcmd_handlers[1].ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8003d46:	4b90      	ldr	r3, [pc, #576]	; (8003f88 <main+0x330>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
       mcmd_handlers[1].ctrl_param.accel_limit_size = 5.0f;
 8003d4e:	4b8e      	ldr	r3, [pc, #568]	; (8003f88 <main+0x330>)
 8003d50:	4a90      	ldr	r2, [pc, #576]	; (8003f94 <main+0x33c>)
 8003d52:	675a      	str	r2, [r3, #116]	; 0x74
       mcmd_handlers[1].ctrl_param.PID_param.kp = 0.12f;
 8003d54:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <main+0x330>)
 8003d56:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <main+0x340>)
 8003d58:	659a      	str	r2, [r3, #88]	; 0x58


       MCMD_init(&mcmd_handlers[1]);
 8003d5a:	4890      	ldr	r0, [pc, #576]	; (8003f9c <main+0x344>)
 8003d5c:	f7fd fbd0 	bl	8001500 <MCMD_init>
       MCMD_Calib(&mcmd_handlers[1]);  // キャリブレーションを行う
 8003d60:	488e      	ldr	r0, [pc, #568]	; (8003f9c <main+0x344>)
 8003d62:	f7fd fc1d 	bl	80015a0 <MCMD_Calib>
       MCMD_SetTarget(&mcmd_handlers[1], 0.0f);  // 目標値(0.0)を設定
 8003d66:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8003fa0 <main+0x348>
 8003d6a:	488c      	ldr	r0, [pc, #560]	; (8003f9c <main+0x344>)
 8003d6c:	f7fd fc44 	bl	80015f8 <MCMD_SetTarget>
       MCMD_Control_Enable(&mcmd_handlers[1]);  // 制御開始
 8003d70:	488a      	ldr	r0, [pc, #552]	; (8003f9c <main+0x344>)
 8003d72:	f7fd fc2b 	bl	80015cc <MCMD_Control_Enable>

#endif
   }

   if(NUM_OF_AIR != 0) {
       air_devices[0].node_type = NODE_AIR;
 8003d76:	4b8b      	ldr	r3, [pc, #556]	; (8003fa4 <main+0x34c>)
 8003d78:	2205      	movs	r2, #5
 8003d7a:	701a      	strb	r2, [r3, #0]
       air_devices[0].node_id = 1;
 8003d7c:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <main+0x34c>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	705a      	strb	r2, [r3, #1]
       air_devices[0].device_num = PORT_1;
 8003d82:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <main+0x34c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	709a      	strb	r2, [r3, #2]

       for (uint8_t j = 0; j < NUM_OF_AIR; j++) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e01e      	b.n	8003dcc <main+0x174>
           for (uint8_t i = 0; i <= (uint8_t) PORT_8; i++) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73bb      	strb	r3, [r7, #14]
 8003d92:	e015      	b.n	8003dc0 <main+0x168>
               air_devices[j].device_num = i;
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	4983      	ldr	r1, [pc, #524]	; (8003fa4 <main+0x34c>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3302      	adds	r3, #2
 8003da2:	7bba      	ldrb	r2, [r7, #14]
 8003da4:	701a      	strb	r2, [r3, #0]
               AirCylinder_Init(&air_devices[j], AIR_OFF);
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	4a7d      	ldr	r2, [pc, #500]	; (8003fa4 <main+0x34c>)
 8003db0:	4413      	add	r3, r2
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fd fc36 	bl	8001626 <AirCylinder_Init>
           for (uint8_t i = 0; i <= (uint8_t) PORT_8; i++) {
 8003dba:	7bbb      	ldrb	r3, [r7, #14]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	73bb      	strb	r3, [r7, #14]
 8003dc0:	7bbb      	ldrb	r3, [r7, #14]
 8003dc2:	2b07      	cmp	r3, #7
 8003dc4:	d9e6      	bls.n	8003d94 <main+0x13c>
       for (uint8_t j = 0; j < NUM_OF_AIR; j++) {
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0dd      	beq.n	8003d8e <main+0x136>
           }
       }

       air_devices[0].device_num = PORT_1; //port1に戻す
 8003dd2:	4b74      	ldr	r3, [pc, #464]	; (8003fa4 <main+0x34c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	709a      	strb	r2, [r3, #2]

   }


   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) ON
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4866      	ldr	r0, [pc, #408]	; (8003f74 <main+0x31c>)
 8003ddc:	f003 f8cb 	bl	8006f76 <HAL_GPIO_TogglePin>
   Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 8003de0:	4871      	ldr	r0, [pc, #452]	; (8003fa8 <main+0x350>)
 8003de2:	f7fe fae9 	bl	80023b8 <Init_C620_CAN_System>
   C620_Init(c620_dev_info_global, num_of_c620);
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <main+0x354>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4870      	ldr	r0, [pc, #448]	; (8003fb0 <main+0x358>)
 8003dee:	f7fd fe30 	bl	8001a52 <C620_Init>



   //TODO: 足回りの統一
    for(int i=0; i<num_of_c620; i++){
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	e09a      	b.n	8003f2e <main+0x2d6>
    	  c620_dev_info_global[i].device_id = i+1;//1スタートな事に注意
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b2d8      	uxtb	r0, r3
 8003e00:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <main+0x358>)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	214c      	movs	r1, #76	; 0x4c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	701a      	strb	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 8003e10:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <main+0x358>)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	214c      	movs	r1, #76	; 0x4c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3336      	adds	r3, #54	; 0x36
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
    	  //c620_dev_info_global[i].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;//リミットスイッチを使ったCalibrationによって原点を決める場合
    	  c620_dev_info_global[i].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;//最初の位置を原点とする場合
 8003e22:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <main+0x358>)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	214c      	movs	r1, #76	; 0x4c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3335      	adds	r3, #53	; 0x35
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.ctrl_type = C620_CTRL_VEL;//VELやCURRENT(電流)もある
 8003e34:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <main+0x358>)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	214c      	movs	r1, #76	; 0x4c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3334      	adds	r3, #52	; 0x34
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.accel_limit_size = 5.0f;
 8003e46:	4a5a      	ldr	r2, [pc, #360]	; (8003fb0 <main+0x358>)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	214c      	movs	r1, #76	; 0x4c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3338      	adds	r3, #56	; 0x38
 8003e54:	4a4f      	ldr	r2, [pc, #316]	; (8003f94 <main+0x33c>)
 8003e56:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.quant_per_rot = 12.0f * M_PI /19.0f;//M3508は19:1
 8003e58:	4a55      	ldr	r2, [pc, #340]	; (8003fb0 <main+0x358>)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	214c      	movs	r1, #76	; 0x4c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	333c      	adds	r3, #60	; 0x3c
 8003e66:	4a53      	ldr	r2, [pc, #332]	; (8003fb4 <main+0x35c>)
 8003e68:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[0].ctrl_param.rotation = C620_ROT_ACW;//半時計周り
 8003e6a:	4b51      	ldr	r3, [pc, #324]	; (8003fb0 <main+0x358>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    	  c620_dev_info_global[1].ctrl_param.rotation = C620_ROT_ACW;//半時計周り
 8003e72:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <main+0x358>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    	  c620_dev_info_global[2].ctrl_param.rotation = C620_ROT_CW;//時計周り
 8003e7a:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <main+0x358>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
    	  c620_dev_info_global[3].ctrl_param.rotation = C620_ROT_CW;//時計周り
 8003e82:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <main+0x358>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

    	  c620_dev_info_global[i].ctrl_param.pid_vel.kp = 0.5f;//位置制御の場合はpid_velに速度制御用のgainを設定する
 8003e8a:	4a49      	ldr	r2, [pc, #292]	; (8003fb0 <main+0x358>)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	214c      	movs	r1, #76	; 0x4c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	331c      	adds	r3, #28
 8003e98:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003e9c:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.pid_vel.ki = 0.0f;
 8003e9e:	4a44      	ldr	r2, [pc, #272]	; (8003fb0 <main+0x358>)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	214c      	movs	r1, #76	; 0x4c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3320      	adds	r3, #32
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.pid_vel.kd = 0.0f;
 8003eb2:	4a3f      	ldr	r2, [pc, #252]	; (8003fb0 <main+0x358>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	214c      	movs	r1, #76	; 0x4c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3324      	adds	r3, #36	; 0x24
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.pid_vel.kff = 0.0f;
 8003ec6:	4a3a      	ldr	r2, [pc, #232]	; (8003fb0 <main+0x358>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	214c      	movs	r1, #76	; 0x4c
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3328      	adds	r3, #40	; 0x28
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

    	  c620_dev_info_global[i].ctrl_param.pid.kp = 5.0f;//位置制御用
 8003eda:	4a35      	ldr	r2, [pc, #212]	; (8003fb0 <main+0x358>)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	214c      	movs	r1, #76	; 0x4c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <main+0x33c>)
 8003eea:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.pid.ki = 0.0f;
 8003eec:	4a30      	ldr	r2, [pc, #192]	; (8003fb0 <main+0x358>)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	214c      	movs	r1, #76	; 0x4c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3308      	adds	r3, #8
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.pid.kd = 0.0f;
 8003f00:	4a2b      	ldr	r2, [pc, #172]	; (8003fb0 <main+0x358>)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	214c      	movs	r1, #76	; 0x4c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    	  c620_dev_info_global[i].ctrl_param.pid.kff = 0.0f;
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <main+0x358>)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	214c      	movs	r1, #76	; 0x4c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3310      	adds	r3, #16
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    for(int i=0; i<num_of_c620; i++){
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <main+0x354>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f6ff af5e 	blt.w	8003df8 <main+0x1a0>
      }



   for(int i=0; i<num_of_c620; i++)C620_SetTarget(&c620_dev_info_global[i], 0.0f);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e00d      	b.n	8003f5e <main+0x306>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	224c      	movs	r2, #76	; 0x4c
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <main+0x358>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003fa0 <main+0x348>
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd ff82 	bl	8001e5c <C620_SetTarget>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <main+0x354>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4293      	cmp	r3, r2
 8003f68:	dbeb      	blt.n	8003f42 <main+0x2ea>
   if(!DISABLE_C620_WAIT_CONNECT)C620_WaitForConnect(c620_dev_info_global, num_of_c620);
//    for(int i=0; i<num_of_c620; i++){
//        C620_Calibration(&c620_dev_info_global[i], -2.0f, SWITCH_NO, GPIOG, GPIO_PIN_1, &hcan1);
//        C620_ControlEnable(&(c620_dev_info_global[i]));
//    }
   for(int i=0; i<num_of_c620; i++)C620_ControlEnable(&(c620_dev_info_global[i]));
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	e02f      	b.n	8003fd0 <main+0x378>
 8003f70:	20000534 	.word	0x20000534
 8003f74:	40020400 	.word	0x40020400
 8003f78:	0802218c 	.word	0x0802218c
 8003f7c:	20004afc 	.word	0x20004afc
 8003f80:	20004ad0 	.word	0x20004ad0
 8003f84:	080221b4 	.word	0x080221b4
 8003f88:	20004b04 	.word	0x20004b04
 8003f8c:	bf19999a 	.word	0xbf19999a
 8003f90:	3db40000 	.word	0x3db40000
 8003f94:	40a00000 	.word	0x40a00000
 8003f98:	3df5c28f 	.word	0x3df5c28f
 8003f9c:	20004b44 	.word	0x20004b44
 8003fa0:	00000000 	.word	0x00000000
 8003fa4:	20004b84 	.word	0x20004b84
 8003fa8:	20004aa8 	.word	0x20004aa8
 8003fac:	08022258 	.word	0x08022258
 8003fb0:	20004b88 	.word	0x20004b88
 8003fb4:	3ffdf914 	.word	0x3ffdf914
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	224c      	movs	r2, #76	; 0x4c
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <main+0x3a4>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd ff58 	bl	8001e7a <C620_ControlEnable>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <main+0x3a8>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	dbed      	blt.n	8003fb8 <main+0x360>

#endif

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> OFF
 8003fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fe0:	4808      	ldr	r0, [pc, #32]	; (8004004 <main+0x3ac>)
 8003fe2:	f002 ffc8 	bl	8006f76 <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) -> OFF
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4806      	ldr	r0, [pc, #24]	; (8004004 <main+0x3ac>)
 8003fea:	f002 ffc4 	bl	8006f76 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003fee:	f00b f85b 	bl	800f0a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003ff2:	f7ff fa8b 	bl	800350c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003ff6:	f00b f88b 	bl	800f110 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <main+0x3a2>
 8003ffc:	20004b88 	.word	0x20004b88
 8004000:	08022258 	.word	0x08022258
 8004004:	40020400 	.word	0x40020400

08004008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b094      	sub	sp, #80	; 0x50
 800400c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800400e:	f107 031c 	add.w	r3, r7, #28
 8004012:	2234      	movs	r2, #52	; 0x34
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f01c ffd8 	bl	8020fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800402c:	f004 fa76 	bl	800851c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <SystemClock_Config+0xdc>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <SystemClock_Config+0xdc>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6413      	str	r3, [r2, #64]	; 0x40
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <SystemClock_Config+0xdc>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <SystemClock_Config+0xe0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004050:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <SystemClock_Config+0xe0>)
 8004052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <SystemClock_Config+0xe0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004064:	2301      	movs	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800406c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800406e:	2302      	movs	r3, #2
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004078:	2304      	movs	r3, #4
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800407c:	2360      	movs	r3, #96	; 0x60
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004080:	2302      	movs	r3, #2
 8004082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004084:	2304      	movs	r3, #4
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004088:	2302      	movs	r3, #2
 800408a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	4618      	mov	r0, r3
 8004092:	f004 faa3 	bl	80085dc <HAL_RCC_OscConfig>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800409c:	f000 f838 	bl	8004110 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80040a0:	f004 fa4c 	bl	800853c <HAL_PWREx_EnableOverDrive>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80040aa:	f000 f831 	bl	8004110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ae:	230f      	movs	r3, #15
 80040b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040b2:	2302      	movs	r3, #2
 80040b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80040c4:	f107 0308 	add.w	r3, r7, #8
 80040c8:	2103      	movs	r1, #3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f004 fd34 	bl	8008b38 <HAL_RCC_ClockConfig>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80040d6:	f000 f81b 	bl	8004110 <Error_Handler>
  }
}
 80040da:	bf00      	nop
 80040dc:	3750      	adds	r7, #80	; 0x50
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040fe:	f000 fec1 	bl	8004e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000

08004110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004114:	b672      	cpsid	i
}
 8004116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004118:	e7fe      	b.n	8004118 <Error_Handler+0x8>
	...

0800411c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <microros_allocate+0x3c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <microros_allocate+0x3c>)
 8004134:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <microros_allocate+0x40>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <microros_allocate+0x40>)
 8004144:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe fcbc 	bl	8002ac4 <pvPortMallocMicroROS>
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000c4e0 	.word	0x2000c4e0
 800415c:	2000c4e4 	.word	0x2000c4e4

08004160 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00c      	beq.n	800418a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fe fdcf 	bl	8002d14 <getBlockSize>
 8004176:	4603      	mov	r3, r0
 8004178:	4a06      	ldr	r2, [pc, #24]	; (8004194 <microros_deallocate+0x34>)
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	461a      	mov	r2, r3
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <microros_deallocate+0x34>)
 8004182:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fe fd67 	bl	8002c58 <vPortFreeMicroROS>
  }
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	2000c4e4 	.word	0x2000c4e4

08004198 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <microros_reallocate+0x64>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4413      	add	r3, r2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <microros_reallocate+0x64>)
 80041b2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <microros_reallocate+0x68>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4413      	add	r3, r2
 80041be:	461a      	mov	r2, r3
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <microros_reallocate+0x68>)
 80041c2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80041ca:	68b8      	ldr	r0, [r7, #8]
 80041cc:	f7fe fc7a 	bl	8002ac4 <pvPortMallocMicroROS>
 80041d0:	4603      	mov	r3, r0
 80041d2:	e00e      	b.n	80041f2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7fe fd9d 	bl	8002d14 <getBlockSize>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a08      	ldr	r2, [pc, #32]	; (8004200 <microros_reallocate+0x68>)
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <microros_reallocate+0x68>)
 80041e6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7fe fdb0 	bl	8002d50 <pvPortReallocMicroROS>
 80041f0:	4603      	mov	r3, r0
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2000c4e0 	.word	0x2000c4e0
 8004200:	2000c4e4 	.word	0x2000c4e4

08004204 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	4a0c      	ldr	r2, [pc, #48]	; (800424c <microros_zero_allocate+0x48>)
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	4413      	add	r3, r2
 800421e:	461a      	mov	r2, r3
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <microros_zero_allocate+0x48>)
 8004222:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <microros_zero_allocate+0x4c>)
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4413      	add	r3, r2
 8004232:	461a      	mov	r2, r3
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <microros_zero_allocate+0x4c>)
 8004236:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7fe fdb5 	bl	8002daa <pvPortCallocMicroROS>
 8004240:	4603      	mov	r3, r0
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000c4e0 	.word	0x2000c4e0
 8004250:	2000c4e4 	.word	0x2000c4e4
 8004254:	00000000 	.word	0x00000000

08004258 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8004258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800426a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800426e:	a320      	add	r3, pc, #128	; (adr r3, 80042f0 <UTILS_NanosecondsToTimespec+0x98>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f7fc f95a 	bl	800052c <__aeabi_ldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8004282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004286:	a31a      	add	r3, pc, #104	; (adr r3, 80042f0 <UTILS_NanosecondsToTimespec+0x98>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f7fc f94e 	bl	800052c <__aeabi_ldivmod>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	da20      	bge.n	80042de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <UTILS_NanosecondsToTimespec+0x90>)
 80042a2:	fb82 1203 	smull	r1, r2, r2, r3
 80042a6:	1712      	asrs	r2, r2, #28
 80042a8:	17db      	asrs	r3, r3, #31
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	17c8      	asrs	r0, r1, #31
 80042ba:	460c      	mov	r4, r1
 80042bc:	4605      	mov	r5, r0
 80042be:	ebb2 0804 	subs.w	r8, r2, r4
 80042c2:	eb63 0905 	sbc.w	r9, r3, r5
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4906      	ldr	r1, [pc, #24]	; (80042ec <UTILS_NanosecondsToTimespec+0x94>)
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]
    }
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042e8:	44b82fa1 	.word	0x44b82fa1
 80042ec:	3b9aca00 	.word	0x3b9aca00
 80042f0:	3b9aca00 	.word	0x3b9aca00
 80042f4:	00000000 	.word	0x00000000

080042f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80042f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042fc:	b08e      	sub	sp, #56	; 0x38
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6278      	str	r0, [r7, #36]	; 0x24
 8004302:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8004304:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004308:	2300      	movs	r3, #0
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800431a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800431e:	4618      	mov	r0, r3
 8004320:	f00c fbde 	bl	8010ae0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	17da      	asrs	r2, r3, #31
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	61fa      	str	r2, [r7, #28]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	000b      	movs	r3, r1
 8004338:	2200      	movs	r2, #0
 800433a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2200      	movs	r2, #0
 8004342:	461c      	mov	r4, r3
 8004344:	4615      	mov	r5, r2
 8004346:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800434a:	1911      	adds	r1, r2, r4
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	416b      	adcs	r3, r5
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004356:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800435a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	f04f 0500 	mov.w	r5, #0
 800436a:	015d      	lsls	r5, r3, #5
 800436c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004370:	0154      	lsls	r4, r2, #5
 8004372:	4622      	mov	r2, r4
 8004374:	462b      	mov	r3, r5
 8004376:	ebb2 0800 	subs.w	r8, r2, r0
 800437a:	eb63 0901 	sbc.w	r9, r3, r1
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800438a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800438e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8004392:	4690      	mov	r8, r2
 8004394:	4699      	mov	r9, r3
 8004396:	eb18 0a00 	adds.w	sl, r8, r0
 800439a:	eb49 0b01 	adc.w	fp, r9, r1
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043b2:	ebb2 040a 	subs.w	r4, r2, sl
 80043b6:	603c      	str	r4, [r7, #0]
 80043b8:	eb63 030b 	sbc.w	r3, r3, fp
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043c2:	4623      	mov	r3, r4
 80043c4:	181b      	adds	r3, r3, r0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	462b      	mov	r3, r5
 80043ca:	eb41 0303 	adc.w	r3, r1, r3
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	6a3a      	ldr	r2, [r7, #32]
 80043d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043d6:	f7ff ff3f 	bl	8004258 <UTILS_NanosecondsToTimespec>

    return 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	3738      	adds	r7, #56	; 0x38
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080043e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <HAL_MspInit+0x4c>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <HAL_MspInit+0x4c>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_MspInit+0x4c>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_MspInit+0x4c>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_MspInit+0x4c>)
 800440c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004410:	6453      	str	r3, [r2, #68]	; 0x44
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_MspInit+0x4c>)
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	210f      	movs	r1, #15
 8004422:	f06f 0001 	mvn.w	r0, #1
 8004426:	f001 fc7b 	bl	8005d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800

08004438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	; 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004448:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_InitTick+0xcc>)
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <HAL_InitTick+0xcc>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6453      	str	r3, [r2, #68]	; 0x44
 8004454:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_InitTick+0xcc>)
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004460:	f107 020c 	add.w	r2, r7, #12
 8004464:	f107 0310 	add.w	r3, r7, #16
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f004 fd8a 	bl	8008f84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004470:	f004 fd74 	bl	8008f5c <HAL_RCC_GetPCLK2Freq>
 8004474:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_InitTick+0xd0>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	0c9b      	lsrs	r3, r3, #18
 8004480:	3b01      	subs	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_InitTick+0xd4>)
 8004486:	4a22      	ldr	r2, [pc, #136]	; (8004510 <HAL_InitTick+0xd8>)
 8004488:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_InitTick+0xd4>)
 800448c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004490:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_InitTick+0xd4>)
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004498:	4b1c      	ldr	r3, [pc, #112]	; (800450c <HAL_InitTick+0xd4>)
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449e:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_InitTick+0xd4>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_InitTick+0xd4>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80044aa:	4818      	ldr	r0, [pc, #96]	; (800450c <HAL_InitTick+0xd4>)
 80044ac:	f005 f9c4 	bl	8009838 <HAL_TIM_Base_Init>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80044b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11b      	bne.n	80044f6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80044be:	4813      	ldr	r0, [pc, #76]	; (800450c <HAL_InitTick+0xd4>)
 80044c0:	f005 fa1c 	bl	80098fc <HAL_TIM_Base_Start_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80044ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d111      	bne.n	80044f6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80044d2:	2019      	movs	r0, #25
 80044d4:	f001 fc40 	bl	8005d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d808      	bhi.n	80044f0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80044de:	2200      	movs	r2, #0
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	2019      	movs	r0, #25
 80044e4:	f001 fc1c 	bl	8005d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044e8:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <HAL_InitTick+0xdc>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e002      	b.n	80044f6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80044f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3730      	adds	r7, #48	; 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	431bde83 	.word	0x431bde83
 800450c:	2000c4e8 	.word	0x2000c4e8
 8004510:	40010000 	.word	0x40010000
 8004514:	20000008 	.word	0x20000008

08004518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800451c:	e7fe      	b.n	800451c <NMI_Handler+0x4>

0800451e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004522:	e7fe      	b.n	8004522 <HardFault_Handler+0x4>

08004524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004528:	e7fe      	b.n	8004528 <MemManage_Handler+0x4>

0800452a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800452a:	b480      	push	{r7}
 800452c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800452e:	e7fe      	b.n	800452e <BusFault_Handler+0x4>

08004530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004534:	e7fe      	b.n	8004534 <UsageFault_Handler+0x4>

08004536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <DMA1_Stream1_IRQHandler+0x10>)
 800454a:	f001 fdb3 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	2000c744 	.word	0x2000c744

08004558 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <DMA1_Stream3_IRQHandler+0x10>)
 800455e:	f001 fda9 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	2000c7a4 	.word	0x2000c7a4

0800456c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <DMA1_Stream6_IRQHandler+0x10>)
 8004572:	f001 fd9f 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000c6e4 	.word	0x2000c6e4

08004580 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <CAN1_TX_IRQHandler+0x10>)
 8004586:	f001 f92a 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20004aa8 	.word	0x20004aa8

08004594 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <CAN1_RX0_IRQHandler+0x10>)
 800459a:	f001 f920 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20004aa8 	.word	0x20004aa8

080045a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <CAN1_RX1_IRQHandler+0x10>)
 80045ae:	f001 f916 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20004aa8 	.word	0x20004aa8

080045bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80045c2:	f005 fab9 	bl	8009b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000c4e8 	.word	0x2000c4e8

080045d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <USART2_IRQHandler+0x10>)
 80045d6:	f005 ff67 	bl	800a4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	2000c5d4 	.word	0x2000c5d4

080045e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80045e8:	4802      	ldr	r0, [pc, #8]	; (80045f4 <USART3_IRQHandler+0x10>)
 80045ea:	f005 ff5d 	bl	800a4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2000c65c 	.word	0x2000c65c

080045f8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80045fc:	4802      	ldr	r0, [pc, #8]	; (8004608 <CAN2_TX_IRQHandler+0x10>)
 80045fe:	f001 f8ee 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20004ad0 	.word	0x20004ad0

0800460c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <CAN2_RX0_IRQHandler+0x10>)
 8004612:	f001 f8e4 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20004ad0 	.word	0x20004ad0

08004620 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004624:	4802      	ldr	r0, [pc, #8]	; (8004630 <CAN2_RX1_IRQHandler+0x10>)
 8004626:	f001 f8da 	bl	80057de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20004ad0 	.word	0x20004ad0

08004634 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004638:	4802      	ldr	r0, [pc, #8]	; (8004644 <OTG_FS_IRQHandler+0x10>)
 800463a:	f002 fdfc 	bl	8007236 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20012630 	.word	0x20012630

08004648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return 1;
 800464c:	2301      	movs	r3, #1
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <_kill>:

int _kill(int pid, int sig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004662:	f01c fd47 	bl	80210f4 <__errno>
 8004666:	4603      	mov	r3, r0
 8004668:	2216      	movs	r2, #22
 800466a:	601a      	str	r2, [r3, #0]
  return -1;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_exit>:

void _exit (int status)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ffe7 	bl	8004658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800468a:	e7fe      	b.n	800468a <_exit+0x12>

0800468c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e00a      	b.n	80046b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800469e:	f3af 8000 	nop.w
 80046a2:	4601      	mov	r1, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	60ba      	str	r2, [r7, #8]
 80046aa:	b2ca      	uxtb	r2, r1
 80046ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dbf0      	blt.n	800469e <_read+0x12>
  }

  return len;
 80046bc:	687b      	ldr	r3, [r7, #4]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e009      	b.n	80046ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	60ba      	str	r2, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fa37 	bl	8003b54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3301      	adds	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	dbf1      	blt.n	80046d8 <_write+0x12>
  }
  return len;
 80046f4:	687b      	ldr	r3, [r7, #4]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_close>:

int _close(int file)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004726:	605a      	str	r2, [r3, #4]
  return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <_isatty>:

int _isatty(int file)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800473e:	2301      	movs	r3, #1
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <_sbrk+0x5c>)
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <_sbrk+0x60>)
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <_sbrk+0x64>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <_sbrk+0x64>)
 8004786:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <_sbrk+0x68>)
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <_sbrk+0x64>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d207      	bcs.n	80047a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004798:	f01c fcac 	bl	80210f4 <__errno>
 800479c:	4603      	mov	r3, r0
 800479e:	220c      	movs	r2, #12
 80047a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a6:	e009      	b.n	80047bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047a8:	4b08      	ldr	r3, [pc, #32]	; (80047cc <_sbrk+0x64>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <_sbrk+0x64>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	4a05      	ldr	r2, [pc, #20]	; (80047cc <_sbrk+0x64>)
 80047b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20080000 	.word	0x20080000
 80047c8:	00000400 	.word	0x00000400
 80047cc:	2000c538 	.word	0x2000c538
 80047d0:	20017808 	.word	0x20017808

080047d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <SystemInit+0x20>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <SystemInit+0x20>)
 80047e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	2224      	movs	r2, #36	; 0x24
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f01c fbe0 	bl	8020fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800480c:	463b      	mov	r3, r7
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]
 8004814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004816:	4b21      	ldr	r3, [pc, #132]	; (800489c <MX_TIM3_Init+0xa4>)
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <MX_TIM3_Init+0xa8>)
 800481a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800481c:	4b1f      	ldr	r3, [pc, #124]	; (800489c <MX_TIM3_Init+0xa4>)
 800481e:	2200      	movs	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <MX_TIM3_Init+0xa4>)
 8004824:	2200      	movs	r2, #0
 8004826:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004828:	4b1c      	ldr	r3, [pc, #112]	; (800489c <MX_TIM3_Init+0xa4>)
 800482a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800482e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <MX_TIM3_Init+0xa4>)
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004836:	4b19      	ldr	r3, [pc, #100]	; (800489c <MX_TIM3_Init+0xa4>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800483c:	2303      	movs	r3, #3
 800483e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004844:	2301      	movs	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004850:	2300      	movs	r3, #0
 8004852:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004858:	2300      	movs	r3, #0
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	4619      	mov	r1, r3
 8004866:	480d      	ldr	r0, [pc, #52]	; (800489c <MX_TIM3_Init+0xa4>)
 8004868:	f005 f8c0 	bl	80099ec <HAL_TIM_Encoder_Init>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004872:	f7ff fc4d 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800487e:	463b      	mov	r3, r7
 8004880:	4619      	mov	r1, r3
 8004882:	4806      	ldr	r0, [pc, #24]	; (800489c <MX_TIM3_Init+0xa4>)
 8004884:	f005 fb40 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800488e:	f7ff fc3f 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004892:	bf00      	nop
 8004894:	3730      	adds	r7, #48	; 0x30
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000c53c 	.word	0x2000c53c
 80048a0:	40000400 	.word	0x40000400

080048a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	; 0x30
 80048a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048aa:	f107 030c 	add.w	r3, r7, #12
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f01c fb8a 	bl	8020fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b8:	463b      	mov	r3, r7
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80048c2:	4b21      	ldr	r3, [pc, #132]	; (8004948 <MX_TIM4_Init+0xa4>)
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <MX_TIM4_Init+0xa8>)
 80048c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <MX_TIM4_Init+0xa4>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ce:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <MX_TIM4_Init+0xa4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80048d4:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <MX_TIM4_Init+0xa4>)
 80048d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <MX_TIM4_Init+0xa4>)
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e2:	4b19      	ldr	r3, [pc, #100]	; (8004948 <MX_TIM4_Init+0xa4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004900:	2301      	movs	r3, #1
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004904:	2300      	movs	r3, #0
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	4619      	mov	r1, r3
 8004912:	480d      	ldr	r0, [pc, #52]	; (8004948 <MX_TIM4_Init+0xa4>)
 8004914:	f005 f86a 	bl	80099ec <HAL_TIM_Encoder_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800491e:	f7ff fbf7 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800492a:	463b      	mov	r3, r7
 800492c:	4619      	mov	r1, r3
 800492e:	4806      	ldr	r0, [pc, #24]	; (8004948 <MX_TIM4_Init+0xa4>)
 8004930:	f005 faea 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800493a:	f7ff fbe9 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800493e:	bf00      	nop
 8004940:	3730      	adds	r7, #48	; 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	2000c588 	.word	0x2000c588
 800494c:	40000800 	.word	0x40000800

08004950 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08c      	sub	sp, #48	; 0x30
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	f107 031c 	add.w	r3, r7, #28
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3c      	ldr	r2, [pc, #240]	; (8004a60 <HAL_TIM_Encoder_MspInit+0x110>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d144      	bne.n	80049fc <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004972:	4b3c      	ldr	r3, [pc, #240]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	6413      	str	r3, [r2, #64]	; 0x40
 800497e:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6313      	str	r3, [r2, #48]	; 0x30
 8004996:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a2:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	6313      	str	r3, [r2, #48]	; 0x30
 80049ae:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80049ba:	2340      	movs	r3, #64	; 0x40
 80049bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049be:	2302      	movs	r3, #2
 80049c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049ca:	2302      	movs	r3, #2
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ce:	f107 031c 	add.w	r3, r7, #28
 80049d2:	4619      	mov	r1, r3
 80049d4:	4824      	ldr	r0, [pc, #144]	; (8004a68 <HAL_TIM_Encoder_MspInit+0x118>)
 80049d6:	f002 f909 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049de:	2302      	movs	r3, #2
 80049e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049ea:	2302      	movs	r3, #2
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ee:	f107 031c 	add.w	r3, r7, #28
 80049f2:	4619      	mov	r1, r3
 80049f4:	481d      	ldr	r0, [pc, #116]	; (8004a6c <HAL_TIM_Encoder_MspInit+0x11c>)
 80049f6:	f002 f8f9 	bl	8006bec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80049fa:	e02d      	b.n	8004a58 <HAL_TIM_Encoder_MspInit+0x108>
  else if(tim_encoderHandle->Instance==TIM4)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <HAL_TIM_Encoder_MspInit+0x120>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d128      	bne.n	8004a58 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a06:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	6413      	str	r3, [r2, #64]	; 0x40
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <HAL_TIM_Encoder_MspInit+0x114>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004a36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a44:	2300      	movs	r3, #0
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a4c:	f107 031c 	add.w	r3, r7, #28
 8004a50:	4619      	mov	r1, r3
 8004a52:	4808      	ldr	r0, [pc, #32]	; (8004a74 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a54:	f002 f8ca 	bl	8006bec <HAL_GPIO_Init>
}
 8004a58:	bf00      	nop
 8004a5a:	3730      	adds	r7, #48	; 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40020000 	.word	0x40020000
 8004a6c:	40020800 	.word	0x40020800
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40020c00 	.word	0x40020c00

08004a78 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <MX_USART2_UART_Init+0x5c>)
 8004a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a96:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004aba:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <MX_USART2_UART_Init+0x58>)
 8004abc:	f005 fad0 	bl	800a060 <HAL_UART_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004ac6:	f7ff fb23 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000c5d4 	.word	0x2000c5d4
 8004ad4:	40004400 	.word	0x40004400

08004ad8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004adc:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004ade:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <MX_USART3_UART_Init+0x5c>)
 8004ae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ae8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004af6:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004afe:	220c      	movs	r2, #12
 8004b00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b1a:	4805      	ldr	r0, [pc, #20]	; (8004b30 <MX_USART3_UART_Init+0x58>)
 8004b1c:	f005 faa0 	bl	800a060 <HAL_UART_Init>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004b26:	f7ff faf3 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	2000c65c 	.word	0x2000c65c
 8004b34:	40004800 	.word	0x40004800

08004b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b0b0      	sub	sp, #192	; 0xc0
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	2290      	movs	r2, #144	; 0x90
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f01c fa37 	bl	8020fcc <memset>
  if(uartHandle->Instance==USART2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4aa2      	ldr	r2, [pc, #648]	; (8004dec <HAL_UART_MspInit+0x2b4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f040 8093 	bne.w	8004c90 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b72:	f107 031c 	add.w	r3, r7, #28
 8004b76:	4618      	mov	r0, r3
 8004b78:	f004 fa36 	bl	8008fe8 <HAL_RCCEx_PeriphCLKConfig>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b82:	f7ff fac5 	bl	8004110 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b86:	4b9a      	ldr	r3, [pc, #616]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a99      	ldr	r2, [pc, #612]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b97      	ldr	r3, [pc, #604]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9e:	4b94      	ldr	r3, [pc, #592]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4a93      	ldr	r2, [pc, #588]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8004baa:	4b91      	ldr	r3, [pc, #580]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bb6:	4b8e      	ldr	r3, [pc, #568]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	4a8d      	ldr	r2, [pc, #564]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004bbc:	f043 0308 	orr.w	r3, r3, #8
 8004bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc2:	4b8b      	ldr	r3, [pc, #556]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bce:	2308      	movs	r3, #8
 8004bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be0:	2303      	movs	r3, #3
 8004be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004be6:	2307      	movs	r3, #7
 8004be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4880      	ldr	r0, [pc, #512]	; (8004df4 <HAL_UART_MspInit+0x2bc>)
 8004bf4:	f001 fffa 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c10:	2307      	movs	r3, #7
 8004c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4876      	ldr	r0, [pc, #472]	; (8004df8 <HAL_UART_MspInit+0x2c0>)
 8004c1e:	f001 ffe5 	bl	8006bec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004c22:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c24:	4a76      	ldr	r2, [pc, #472]	; (8004e00 <HAL_UART_MspInit+0x2c8>)
 8004c26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004c28:	4b74      	ldr	r3, [pc, #464]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c30:	4b72      	ldr	r3, [pc, #456]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c36:	4b71      	ldr	r3, [pc, #452]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c3c:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c44:	4b6d      	ldr	r3, [pc, #436]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004c50:	4b6a      	ldr	r3, [pc, #424]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c56:	4b69      	ldr	r3, [pc, #420]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c5c:	4b67      	ldr	r3, [pc, #412]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c62:	4866      	ldr	r0, [pc, #408]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c64:	f001 f886 	bl	8005d74 <HAL_DMA_Init>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004c6e:	f7ff fa4f 	bl	8004110 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a61      	ldr	r2, [pc, #388]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c76:	671a      	str	r2, [r3, #112]	; 0x70
 8004c78:	4a60      	ldr	r2, [pc, #384]	; (8004dfc <HAL_UART_MspInit+0x2c4>)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2105      	movs	r1, #5
 8004c82:	2026      	movs	r0, #38	; 0x26
 8004c84:	f001 f84c 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c88:	2026      	movs	r0, #38	; 0x26
 8004c8a:	f001 f865 	bl	8005d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004c8e:	e0a9      	b.n	8004de4 <HAL_UART_MspInit+0x2ac>
  else if(uartHandle->Instance==USART3)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5b      	ldr	r2, [pc, #364]	; (8004e04 <HAL_UART_MspInit+0x2cc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	f040 80a4 	bne.w	8004de4 <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 f99c 	bl	8008fe8 <HAL_RCCEx_PeriphCLKConfig>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_UART_MspInit+0x182>
      Error_Handler();
 8004cb6:	f7ff fa2b 	bl	8004110 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cba:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4a4c      	ldr	r2, [pc, #304]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc6:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cd2:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	4a46      	ldr	r2, [pc, #280]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cde:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <HAL_UART_MspInit+0x2b8>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d04:	2307      	movs	r3, #7
 8004d06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4839      	ldr	r0, [pc, #228]	; (8004df8 <HAL_UART_MspInit+0x2c0>)
 8004d12:	f001 ff6b 	bl	8006bec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004d16:	4b3c      	ldr	r3, [pc, #240]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d18:	4a3c      	ldr	r2, [pc, #240]	; (8004e0c <HAL_UART_MspInit+0x2d4>)
 8004d1a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004d1c:	4b3a      	ldr	r3, [pc, #232]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d22:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d24:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d30:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d36:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d38:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d3e:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004d44:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d4a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004d52:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d54:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d5a:	482b      	ldr	r0, [pc, #172]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d5c:	f001 f80a 	bl	8005d74 <HAL_DMA_Init>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_MspInit+0x232>
      Error_Handler();
 8004d66:	f7ff f9d3 	bl	8004110 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d6e:	675a      	str	r2, [r3, #116]	; 0x74
 8004d70:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <HAL_UART_MspInit+0x2d0>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004d76:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004d78:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <HAL_UART_MspInit+0x2dc>)
 8004d7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004d7c:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d82:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d84:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8a:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d90:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d96:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004dac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004db0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004db8:	4815      	ldr	r0, [pc, #84]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004dba:	f000 ffdb 	bl	8005d74 <HAL_DMA_Init>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_UART_MspInit+0x290>
      Error_Handler();
 8004dc4:	f7ff f9a4 	bl	8004110 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004dcc:	671a      	str	r2, [r3, #112]	; 0x70
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <HAL_UART_MspInit+0x2d8>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2105      	movs	r1, #5
 8004dd8:	2027      	movs	r0, #39	; 0x27
 8004dda:	f000 ffa1 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004dde:	2027      	movs	r0, #39	; 0x27
 8004de0:	f000 ffba 	bl	8005d58 <HAL_NVIC_EnableIRQ>
}
 8004de4:	bf00      	nop
 8004de6:	37c0      	adds	r7, #192	; 0xc0
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40004400 	.word	0x40004400
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40020000 	.word	0x40020000
 8004df8:	40020c00 	.word	0x40020c00
 8004dfc:	2000c6e4 	.word	0x2000c6e4
 8004e00:	400260a0 	.word	0x400260a0
 8004e04:	40004800 	.word	0x40004800
 8004e08:	2000c744 	.word	0x2000c744
 8004e0c:	40026028 	.word	0x40026028
 8004e10:	2000c7a4 	.word	0x2000c7a4
 8004e14:	40026058 	.word	0x40026058

08004e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e1e:	490e      	ldr	r1, [pc, #56]	; (8004e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e20:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e24:	e002      	b.n	8004e2c <LoopCopyDataInit>

08004e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e2a:	3304      	adds	r3, #4

08004e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e30:	d3f9      	bcc.n	8004e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e34:	4c0b      	ldr	r4, [pc, #44]	; (8004e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e38:	e001      	b.n	8004e3e <LoopFillZerobss>

08004e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e3c:	3204      	adds	r2, #4

08004e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e40:	d3fb      	bcc.n	8004e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e42:	f7ff fcc7 	bl	80047d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e46:	f01c f95b 	bl	8021100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e4a:	f7fe ff05 	bl	8003c58 <main>
  bx  lr    
 8004e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e58:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 8004e5c:	08023388 	.word	0x08023388
  ldr r2, =_sbss
 8004e60:	20000678 	.word	0x20000678
  ldr r4, =_ebss
 8004e64:	20017804 	.word	0x20017804

08004e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e68:	e7fe      	b.n	8004e68 <ADC_IRQHandler>

08004e6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e6e:	2003      	movs	r0, #3
 8004e70:	f000 ff4b 	bl	8005d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e74:	200f      	movs	r0, #15
 8004e76:	f7ff fadf 	bl	8004438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e7a:	f7ff fab5 	bl	80043e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_IncTick+0x20>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_IncTick+0x24>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4413      	add	r3, r2
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <HAL_IncTick+0x24>)
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
 8004ea8:	2000c804 	.word	0x2000c804

08004eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return uwTick;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_GetTick+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	2000c804 	.word	0x2000c804

08004ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ecc:	f7ff ffee 	bl	8004eac <HAL_GetTick>
 8004ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004edc:	d005      	beq.n	8004eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <HAL_Delay+0x44>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eea:	bf00      	nop
 8004eec:	f7ff ffde 	bl	8004eac <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d8f7      	bhi.n	8004eec <HAL_Delay+0x28>
  {
  }
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	2000000c 	.word	0x2000000c

08004f0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0ed      	b.n	80050fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fd fd04 	bl	8002938 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f40:	f7ff ffb4 	bl	8004eac <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f46:	e012      	b.n	8004f6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f48:	f7ff ffb0 	bl	8004eac <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b0a      	cmp	r3, #10
 8004f54:	d90b      	bls.n	8004f6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2205      	movs	r2, #5
 8004f66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0c5      	b.n	80050fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0e5      	beq.n	8004f48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0202 	bic.w	r2, r2, #2
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f8c:	f7ff ff8e 	bl	8004eac <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f92:	e012      	b.n	8004fba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f94:	f7ff ff8a 	bl	8004eac <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b0a      	cmp	r3, #10
 8004fa0:	d90b      	bls.n	8004fba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e09f      	b.n	80050fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7e1b      	ldrb	r3, [r3, #24]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e007      	b.n	8004ff2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7e5b      	ldrb	r3, [r3, #25]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d108      	bne.n	800500c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e007      	b.n	800501c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7e9b      	ldrb	r3, [r3, #26]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0220 	orr.w	r2, r2, #32
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e007      	b.n	8005046 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0220 	bic.w	r2, r2, #32
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7edb      	ldrb	r3, [r3, #27]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d108      	bne.n	8005060 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0210 	bic.w	r2, r2, #16
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e007      	b.n	8005070 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0210 	orr.w	r2, r2, #16
 800506e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7f1b      	ldrb	r3, [r3, #28]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d108      	bne.n	800508a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e007      	b.n	800509a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0208 	bic.w	r2, r2, #8
 8005098:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	7f5b      	ldrb	r3, [r3, #29]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d108      	bne.n	80050b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0204 	orr.w	r2, r2, #4
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e007      	b.n	80050c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	ea42 0103 	orr.w	r1, r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	1e5a      	subs	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d003      	beq.n	800512a <HAL_CAN_ConfigFilter+0x26>
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	2b02      	cmp	r3, #2
 8005126:	f040 80c7 	bne.w	80052b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a69      	ldr	r2, [pc, #420]	; (80052d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d001      	beq.n	8005138 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8005136:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800513e:	f043 0201 	orr.w	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4a63      	ldr	r2, [pc, #396]	; (80052d8 <HAL_CAN_ConfigFilter+0x1d4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d111      	bne.n	8005174 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005156:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	431a      	orrs	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2201      	movs	r2, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	43db      	mvns	r3, r3
 800518e:	401a      	ands	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d123      	bne.n	80051e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	401a      	ands	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	3248      	adds	r2, #72	; 0x48
 80051c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	3348      	adds	r3, #72	; 0x48
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	440b      	add	r3, r1
 80051e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d122      	bne.n	8005234 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800520e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3248      	adds	r2, #72	; 0x48
 8005214:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005228:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	3348      	adds	r3, #72	; 0x48
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	440b      	add	r3, r1
 8005232:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	43db      	mvns	r3, r3
 8005246:	401a      	ands	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800524e:	e007      	b.n	8005260 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	431a      	orrs	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800527a:	e007      	b.n	800528c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	431a      	orrs	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d107      	bne.n	80052a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	431a      	orrs	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e006      	b.n	80052c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40003400 	.word	0x40003400
 80052d8:	40006400 	.word	0x40006400

080052dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d12e      	bne.n	800534e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005308:	f7ff fdd0 	bl	8004eac <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800530e:	e012      	b.n	8005336 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005310:	f7ff fdcc 	bl	8004eac <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b0a      	cmp	r3, #10
 800531c:	d90b      	bls.n	8005336 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2205      	movs	r2, #5
 800532e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e012      	b.n	800535c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e006      	b.n	800535c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005364:	b480      	push	{r7}
 8005366:	b089      	sub	sp, #36	; 0x24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005378:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d003      	beq.n	8005390 <HAL_CAN_AddTxMessage+0x2c>
 8005388:	7ffb      	ldrb	r3, [r7, #31]
 800538a:	2b02      	cmp	r3, #2
 800538c:	f040 80ad 	bne.w	80054ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8095 	beq.w	80054da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	0e1b      	lsrs	r3, r3, #24
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80053ba:	2201      	movs	r2, #1
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	409a      	lsls	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10d      	bne.n	80053e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6809      	ldr	r1, [r1, #0]
 80053da:	431a      	orrs	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3318      	adds	r3, #24
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	440b      	add	r3, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e00f      	b.n	8005408 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80053fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3318      	adds	r3, #24
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	440b      	add	r3, r1
 8005406:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3318      	adds	r3, #24
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	440b      	add	r3, r1
 8005418:	3304      	adds	r3, #4
 800541a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	7d1b      	ldrb	r3, [r3, #20]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d111      	bne.n	8005448 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3318      	adds	r3, #24
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	6811      	ldr	r1, [r2, #0]
 8005438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	3318      	adds	r3, #24
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	440b      	add	r3, r1
 8005444:	3304      	adds	r3, #4
 8005446:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3307      	adds	r3, #7
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	061a      	lsls	r2, r3, #24
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3306      	adds	r3, #6
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3305      	adds	r3, #5
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	4313      	orrs	r3, r2
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	3204      	adds	r2, #4
 8005468:	7812      	ldrb	r2, [r2, #0]
 800546a:	4610      	mov	r0, r2
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	6811      	ldr	r1, [r2, #0]
 8005470:	ea43 0200 	orr.w	r2, r3, r0
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	440b      	add	r3, r1
 800547a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800547e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3303      	adds	r3, #3
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	061a      	lsls	r2, r3, #24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3302      	adds	r3, #2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3301      	adds	r3, #1
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	4313      	orrs	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	4610      	mov	r0, r2
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6811      	ldr	r1, [r2, #0]
 80054a6:	ea43 0200 	orr.w	r2, r3, r0
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	440b      	add	r3, r1
 80054b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80054b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3318      	adds	r3, #24
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	6811      	ldr	r1, [r2, #0]
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3318      	adds	r3, #24
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	440b      	add	r3, r1
 80054d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e00e      	b.n	80054f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e006      	b.n	80054f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
  }
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3724      	adds	r7, #36	; 0x24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005516:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005518:	7afb      	ldrb	r3, [r7, #11]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d002      	beq.n	8005524 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d11d      	bne.n	8005560 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3301      	adds	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005560:	68fb      	ldr	r3, [r7, #12]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800556e:	b480      	push	{r7}
 8005570:	b087      	sub	sp, #28
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005582:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d003      	beq.n	8005592 <HAL_CAN_GetRxMessage+0x24>
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	2b02      	cmp	r3, #2
 800558e:	f040 80f3 	bne.w	8005778 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10e      	bne.n	80055b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0e7      	b.n	8005786 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0d8      	b.n	8005786 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	331b      	adds	r3, #27
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	4413      	add	r3, r2
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0204 	and.w	r2, r3, #4
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10c      	bne.n	800560c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	331b      	adds	r3, #27
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4413      	add	r3, r2
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0d5b      	lsrs	r3, r3, #21
 8005602:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e00b      	b.n	8005624 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	331b      	adds	r3, #27
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	4413      	add	r3, r2
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	331b      	adds	r3, #27
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	4413      	add	r3, r2
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0202 	and.w	r2, r3, #2
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	331b      	adds	r3, #27
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	331b      	adds	r3, #27
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	3304      	adds	r3, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	b2da      	uxtb	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	331b      	adds	r3, #27
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	3304      	adds	r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4413      	add	r3, r2
 800568c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0a1a      	lsrs	r2, r3, #8
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	0c1a      	lsrs	r2, r3, #16
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	3302      	adds	r3, #2
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	0e1a      	lsrs	r2, r3, #24
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	3303      	adds	r3, #3
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	3304      	adds	r3, #4
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	4413      	add	r3, r2
 8005708:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	0a1a      	lsrs	r2, r3, #8
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	3305      	adds	r3, #5
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0c1a      	lsrs	r2, r3, #16
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	3306      	adds	r3, #6
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4413      	add	r3, r2
 800573c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	0e1a      	lsrs	r2, r3, #24
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	3307      	adds	r3, #7
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0220 	orr.w	r2, r2, #32
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	e007      	b.n	8005774 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0220 	orr.w	r2, r2, #32
 8005772:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e006      	b.n	8005786 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d002      	beq.n	80057b0 <HAL_CAN_ActivateNotification+0x1e>
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d109      	bne.n	80057c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6959      	ldr	r1, [r3, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e006      	b.n	80057d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b08a      	sub	sp, #40	; 0x28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d07c      	beq.n	800591e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d023      	beq.n	8005876 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fe f99b 	bl	8003b7c <HAL_CAN_TxMailbox0CompleteCallback>
 8005846:	e016      	b.n	8005876 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
 800585a:	e00c      	b.n	8005876 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	e002      	b.n	8005876 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fe f991 	bl	8003b98 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d024      	beq.n	80058ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fe f98d 	bl	8003bb4 <HAL_CAN_TxMailbox1CompleteCallback>
 800589a:	e016      	b.n	80058ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e00c      	b.n	80058ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
 80058c2:	e002      	b.n	80058ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fe f983 	bl	8003bd0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d024      	beq.n	800591e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fe f97f 	bl	8003bec <HAL_CAN_TxMailbox2CompleteCallback>
 80058ee:	e016      	b.n	800591e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	e00c      	b.n	800591e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
 8005916:	e002      	b.n	800591e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fe f975 	bl	8003c08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005938:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2210      	movs	r2, #16
 8005940:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2208      	movs	r2, #8
 800595c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f8f4 	bl	8005b4c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fe f951 	bl	8003c24 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800599c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2210      	movs	r2, #16
 80059a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2208      	movs	r2, #8
 80059c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8cc 	bl	8005b60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fe f92d 	bl	8003c40 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2210      	movs	r2, #16
 8005a00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8b6 	bl	8005b74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2208      	movs	r2, #8
 8005a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8af 	bl	8005b88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d07b      	beq.n	8005b2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d072      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	f043 0302 	orr.w	r3, r3, #2
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	f043 0304 	orr.w	r3, r3, #4
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d043      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d03e      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aac:	2b60      	cmp	r3, #96	; 0x60
 8005aae:	d02b      	beq.n	8005b08 <HAL_CAN_IRQHandler+0x32a>
 8005ab0:	2b60      	cmp	r3, #96	; 0x60
 8005ab2:	d82e      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005ab4:	2b50      	cmp	r3, #80	; 0x50
 8005ab6:	d022      	beq.n	8005afe <HAL_CAN_IRQHandler+0x320>
 8005ab8:	2b50      	cmp	r3, #80	; 0x50
 8005aba:	d82a      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d019      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x316>
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d826      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d010      	beq.n	8005aea <HAL_CAN_IRQHandler+0x30c>
 8005ac8:	2b30      	cmp	r3, #48	; 0x30
 8005aca:	d822      	bhi.n	8005b12 <HAL_CAN_IRQHandler+0x334>
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d002      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x2f8>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d005      	beq.n	8005ae0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ad4:	e01d      	b.n	8005b12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	f043 0308 	orr.w	r3, r3, #8
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ade:	e019      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	f043 0310 	orr.w	r3, r3, #16
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ae8:	e014      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	f043 0320 	orr.w	r3, r3, #32
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005af2:	e00f      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005afc:	e00a      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b06:	e005      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b10:	e000      	b.n	8005b14 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f82c 	bl	8005b9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b44:	bf00      	nop
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	60d3      	str	r3, [r2, #12]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	e000ed00 	.word	0xe000ed00
 8005bf4:	05fa0000 	.word	0x05fa0000

08005bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <__NVIC_GetPriorityGrouping+0x18>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	f003 0307 	and.w	r3, r3, #7
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000ed00 	.word	0xe000ed00

08005c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	db0b      	blt.n	8005c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	f003 021f 	and.w	r2, r3, #31
 8005c2c:	4907      	ldr	r1, [pc, #28]	; (8005c4c <__NVIC_EnableIRQ+0x38>)
 8005c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	2001      	movs	r0, #1
 8005c36:	fa00 f202 	lsl.w	r2, r0, r2
 8005c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	e000e100 	.word	0xe000e100

08005c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	6039      	str	r1, [r7, #0]
 8005c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	db0a      	blt.n	8005c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	490c      	ldr	r1, [pc, #48]	; (8005c9c <__NVIC_SetPriority+0x4c>)
 8005c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6e:	0112      	lsls	r2, r2, #4
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	440b      	add	r3, r1
 8005c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c78:	e00a      	b.n	8005c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	4908      	ldr	r1, [pc, #32]	; (8005ca0 <__NVIC_SetPriority+0x50>)
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	3b04      	subs	r3, #4
 8005c88:	0112      	lsls	r2, r2, #4
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	761a      	strb	r2, [r3, #24]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	e000e100 	.word	0xe000e100
 8005ca0:	e000ed00 	.word	0xe000ed00

08005ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f1c3 0307 	rsb	r3, r3, #7
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	bf28      	it	cs
 8005cc2:	2304      	movcs	r3, #4
 8005cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d902      	bls.n	8005cd4 <NVIC_EncodePriority+0x30>
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3b03      	subs	r3, #3
 8005cd2:	e000      	b.n	8005cd6 <NVIC_EncodePriority+0x32>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	43da      	mvns	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	43d9      	mvns	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cfc:	4313      	orrs	r3, r2
         );
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3724      	adds	r7, #36	; 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff4c 	bl	8005bb0 <__NVIC_SetPriorityGrouping>
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d32:	f7ff ff61 	bl	8005bf8 <__NVIC_GetPriorityGrouping>
 8005d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	6978      	ldr	r0, [r7, #20]
 8005d3e:	f7ff ffb1 	bl	8005ca4 <NVIC_EncodePriority>
 8005d42:	4602      	mov	r2, r0
 8005d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff ff80 	bl	8005c50 <__NVIC_SetPriority>
}
 8005d50:	bf00      	nop
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ff54 	bl	8005c14 <__NVIC_EnableIRQ>
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7ff f894 	bl	8004eac <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e099      	b.n	8005ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005db0:	e00f      	b.n	8005dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005db2:	f7ff f87b 	bl	8004eac <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	d908      	bls.n	8005dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2203      	movs	r2, #3
 8005dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e078      	b.n	8005ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e8      	bne.n	8005db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <HAL_DMA_Init+0x158>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d107      	bne.n	8005e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	4313      	orrs	r3, r2
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d117      	bne.n	8005e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fb15 	bl	80064a8 <DMA_CheckFifoParam>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e92:	2301      	movs	r3, #1
 8005e94:	e016      	b.n	8005ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 facc 	bl	800643c <DMA_CalcBaseAndBitshift>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eac:	223f      	movs	r2, #63	; 0x3f
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	e010803f 	.word	0xe010803f

08005ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DMA_Start_IT+0x26>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e048      	b.n	8005f88 <HAL_DMA_Start_IT+0xb8>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d137      	bne.n	8005f7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fa5e 	bl	80063e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f28:	223f      	movs	r2, #63	; 0x3f
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0216 	orr.w	r2, r2, #22
 8005f3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f4e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0208 	orr.w	r2, r2, #8
 8005f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e005      	b.n	8005f86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
 8005f84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f9e:	f7fe ff85 	bl	8004eac <HAL_GetTick>
 8005fa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d008      	beq.n	8005fc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e052      	b.n	8006068 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0216 	bic.w	r2, r2, #22
 8005fd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fe0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_DMA_Abort+0x62>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0208 	bic.w	r2, r2, #8
 8006000:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006012:	e013      	b.n	800603c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006014:	f7fe ff4a 	bl	8004eac <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b05      	cmp	r3, #5
 8006020:	d90c      	bls.n	800603c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2203      	movs	r2, #3
 800602c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e015      	b.n	8006068 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e4      	bne.n	8006014 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	223f      	movs	r2, #63	; 0x3f
 8006050:	409a      	lsls	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d004      	beq.n	800608e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e00c      	b.n	80060a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2205      	movs	r2, #5
 8006092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0201 	bic.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80060c0:	4b8e      	ldr	r3, [pc, #568]	; (80062fc <HAL_DMA_IRQHandler+0x248>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a8e      	ldr	r2, [pc, #568]	; (8006300 <HAL_DMA_IRQHandler+0x24c>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	0a9b      	lsrs	r3, r3, #10
 80060cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060de:	2208      	movs	r2, #8
 80060e0:	409a      	lsls	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0204 	bic.w	r2, r2, #4
 8006106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	2208      	movs	r2, #8
 800610e:	409a      	lsls	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d012      	beq.n	8006156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	2201      	movs	r2, #1
 8006144:	409a      	lsls	r2, r3
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	f043 0202 	orr.w	r2, r3, #2
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	2204      	movs	r2, #4
 800615c:	409a      	lsls	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	2204      	movs	r2, #4
 800617a:	409a      	lsls	r2, r3
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	f043 0204 	orr.w	r2, r3, #4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006190:	2210      	movs	r2, #16
 8006192:	409a      	lsls	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4013      	ands	r3, r2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d043      	beq.n	8006224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d03c      	beq.n	8006224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	2210      	movs	r2, #16
 80061b0:	409a      	lsls	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d018      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d024      	beq.n	8006224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
 80061e2:	e01f      	b.n	8006224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01b      	beq.n	8006224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
 80061f4:	e016      	b.n	8006224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0208 	bic.w	r2, r2, #8
 8006212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006228:	2220      	movs	r2, #32
 800622a:	409a      	lsls	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 808f 	beq.w	8006354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8087 	beq.w	8006354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624a:	2220      	movs	r2, #32
 800624c:	409a      	lsls	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b05      	cmp	r3, #5
 800625c:	d136      	bne.n	80062cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0216 	bic.w	r2, r2, #22
 800626c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800627c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d103      	bne.n	800628e <HAL_DMA_IRQHandler+0x1da>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0208 	bic.w	r2, r2, #8
 800629c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a2:	223f      	movs	r2, #63	; 0x3f
 80062a4:	409a      	lsls	r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d07e      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
        }
        return;
 80062ca:	e079      	b.n	80063c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01d      	beq.n	8006316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10d      	bne.n	8006304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d031      	beq.n	8006354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
 80062f8:	e02c      	b.n	8006354 <HAL_DMA_IRQHandler+0x2a0>
 80062fa:	bf00      	nop
 80062fc:	20000004 	.word	0x20000004
 8006300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d023      	beq.n	8006354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
 8006314:	e01e      	b.n	8006354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10f      	bne.n	8006344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0210 	bic.w	r2, r2, #16
 8006332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	2b00      	cmp	r3, #0
 800635a:	d032      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d022      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2205      	movs	r2, #5
 800636c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	3301      	adds	r3, #1
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	429a      	cmp	r2, r3
 800638a:	d307      	bcc.n	800639c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f2      	bne.n	8006380 <HAL_DMA_IRQHandler+0x2cc>
 800639a:	e000      	b.n	800639e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800639c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
 80063be:	e000      	b.n	80063c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80063c0:	bf00      	nop
    }
  }
}
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d108      	bne.n	8006420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800641e:	e007      	b.n	8006430 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	3b10      	subs	r3, #16
 800644c:	4a13      	ldr	r2, [pc, #76]	; (800649c <DMA_CalcBaseAndBitshift+0x60>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	091b      	lsrs	r3, r3, #4
 8006454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006456:	4a12      	ldr	r2, [pc, #72]	; (80064a0 <DMA_CalcBaseAndBitshift+0x64>)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d908      	bls.n	800647c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <DMA_CalcBaseAndBitshift+0x68>)
 8006472:	4013      	ands	r3, r2
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	659a      	str	r2, [r3, #88]	; 0x58
 800647a:	e006      	b.n	800648a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <DMA_CalcBaseAndBitshift+0x68>)
 8006484:	4013      	ands	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	aaaaaaab 	.word	0xaaaaaaab
 80064a0:	080222cc 	.word	0x080222cc
 80064a4:	fffffc00 	.word	0xfffffc00

080064a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11f      	bne.n	8006502 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d856      	bhi.n	8006576 <DMA_CheckFifoParam+0xce>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <DMA_CheckFifoParam+0x28>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	080064f3 	.word	0x080064f3
 80064d8:	080064e1 	.word	0x080064e1
 80064dc:	08006577 	.word	0x08006577
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d046      	beq.n	800657a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f0:	e043      	b.n	800657a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064fa:	d140      	bne.n	800657e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006500:	e03d      	b.n	800657e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	d121      	bne.n	8006550 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d837      	bhi.n	8006582 <DMA_CheckFifoParam+0xda>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <DMA_CheckFifoParam+0x70>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006529 	.word	0x08006529
 800651c:	0800652f 	.word	0x0800652f
 8006520:	08006529 	.word	0x08006529
 8006524:	08006541 	.word	0x08006541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
      break;
 800652c:	e030      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d025      	beq.n	8006586 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800653e:	e022      	b.n	8006586 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006548:	d11f      	bne.n	800658a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800654e:	e01c      	b.n	800658a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d903      	bls.n	800655e <DMA_CheckFifoParam+0xb6>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b03      	cmp	r3, #3
 800655a:	d003      	beq.n	8006564 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800655c:	e018      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	73fb      	strb	r3, [r7, #15]
      break;
 8006562:	e015      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00e      	beq.n	800658e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
      break;
 8006574:	e00b      	b.n	800658e <DMA_CheckFifoParam+0xe6>
      break;
 8006576:	bf00      	nop
 8006578:	e00a      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      break;
 800657a:	bf00      	nop
 800657c:	e008      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      break;
 800657e:	bf00      	nop
 8006580:	e006      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      break;
 8006582:	bf00      	nop
 8006584:	e004      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      break;
 8006586:	bf00      	nop
 8006588:	e002      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      break;   
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <DMA_CheckFifoParam+0xe8>
      break;
 800658e:	bf00      	nop
    }
  } 
  
  return status; 
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop

080065a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e06a      	b.n	8006688 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2223      	movs	r2, #35	; 0x23
 80065c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fc fdf7 	bl	80031b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ca:	4b31      	ldr	r3, [pc, #196]	; (8006690 <HAL_ETH_Init+0xf0>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	4a30      	ldr	r2, [pc, #192]	; (8006690 <HAL_ETH_Init+0xf0>)
 80065d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d4:	6453      	str	r3, [r2, #68]	; 0x44
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <HAL_ETH_Init+0xf0>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80065e2:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <HAL_ETH_Init+0xf4>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4a2b      	ldr	r2, [pc, #172]	; (8006694 <HAL_ETH_Init+0xf4>)
 80065e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80065ee:	4b29      	ldr	r3, [pc, #164]	; (8006694 <HAL_ETH_Init+0xf4>)
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4927      	ldr	r1, [pc, #156]	; (8006694 <HAL_ETH_Init+0xf4>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <HAL_ETH_Init+0xf4>)
 80065fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006618:	f7fe fc48 	bl	8004eac <HAL_GetTick>
 800661c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800661e:	e011      	b.n	8006644 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006620:	f7fe fc44 	bl	8004eac <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800662e:	d909      	bls.n	8006644 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	22e0      	movs	r2, #224	; 0xe0
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e021      	b.n	8006688 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e4      	bne.n	8006620 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f958 	bl	800690c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f9ff 	bl	8006a60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa55 	bl	8006b12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	461a      	mov	r2, r3
 800666e:	2100      	movs	r1, #0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9bd 	bl	80069f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2210      	movs	r2, #16
 8006682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	40013800 	.word	0x40013800

08006698 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4b51      	ldr	r3, [pc, #324]	; (80067f4 <ETH_SetMACConfig+0x15c>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	7c1b      	ldrb	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <ETH_SetMACConfig+0x28>
 80066ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80066be:	e000      	b.n	80066c2 <ETH_SetMACConfig+0x2a>
 80066c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	7c5b      	ldrb	r3, [r3, #17]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <ETH_SetMACConfig+0x38>
 80066ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066ce:	e000      	b.n	80066d2 <ETH_SetMACConfig+0x3a>
 80066d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80066d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80066d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	7fdb      	ldrb	r3, [r3, #31]
 80066de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80066e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80066e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	7f92      	ldrb	r2, [r2, #30]
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	d102      	bne.n	80066f6 <ETH_SetMACConfig+0x5e>
 80066f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066f4:	e000      	b.n	80066f8 <ETH_SetMACConfig+0x60>
 80066f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80066f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	7f1b      	ldrb	r3, [r3, #28]
 80066fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006700:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	791b      	ldrb	r3, [r3, #4]
 800670c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800670e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006716:	2a00      	cmp	r2, #0
 8006718:	d102      	bne.n	8006720 <ETH_SetMACConfig+0x88>
 800671a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800671e:	e000      	b.n	8006722 <ETH_SetMACConfig+0x8a>
 8006720:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006722:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	7bdb      	ldrb	r3, [r3, #15]
 8006728:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800672a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006730:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006738:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800673a:	4313      	orrs	r3, r2
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006752:	2001      	movs	r0, #1
 8006754:	f7fe fbb6 	bl	8004ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800676e:	4013      	ands	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800677e:	2a00      	cmp	r2, #0
 8006780:	d101      	bne.n	8006786 <ETH_SetMACConfig+0xee>
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	e000      	b.n	8006788 <ETH_SetMACConfig+0xf0>
 8006786:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006788:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800678e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8006796:	2a01      	cmp	r2, #1
 8006798:	d101      	bne.n	800679e <ETH_SetMACConfig+0x106>
 800679a:	2208      	movs	r2, #8
 800679c:	e000      	b.n	80067a0 <ETH_SetMACConfig+0x108>
 800679e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80067a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80067a8:	2a01      	cmp	r2, #1
 80067aa:	d101      	bne.n	80067b0 <ETH_SetMACConfig+0x118>
 80067ac:	2204      	movs	r2, #4
 80067ae:	e000      	b.n	80067b2 <ETH_SetMACConfig+0x11a>
 80067b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80067b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	d101      	bne.n	80067c2 <ETH_SetMACConfig+0x12a>
 80067be:	2202      	movs	r2, #2
 80067c0:	e000      	b.n	80067c4 <ETH_SetMACConfig+0x12c>
 80067c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80067c4:	4313      	orrs	r3, r2
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067dc:	2001      	movs	r0, #1
 80067de:	f7fe fb71 	bl	8004ec4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	619a      	str	r2, [r3, #24]
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	ff20810f 	.word	0xff20810f

080067f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4b3d      	ldr	r3, [pc, #244]	; (8006908 <ETH_SetDMAConfig+0x110>)
 8006812:	4013      	ands	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	7b1b      	ldrb	r3, [r3, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <ETH_SetDMAConfig+0x2c>
 800681e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006822:	e000      	b.n	8006826 <ETH_SetDMAConfig+0x2e>
 8006824:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	7b5b      	ldrb	r3, [r3, #13]
 800682a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800682c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	7f52      	ldrb	r2, [r2, #29]
 8006832:	2a00      	cmp	r2, #0
 8006834:	d102      	bne.n	800683c <ETH_SetDMAConfig+0x44>
 8006836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800683a:	e000      	b.n	800683e <ETH_SetDMAConfig+0x46>
 800683c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800683e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	7b9b      	ldrb	r3, [r3, #14]
 8006844:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006846:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800684c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	7f1b      	ldrb	r3, [r3, #28]
 8006852:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006854:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	7f9b      	ldrb	r3, [r3, #30]
 800685a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800685c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006862:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800686a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800686c:	4313      	orrs	r3, r2
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687c:	461a      	mov	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800688e:	2001      	movs	r0, #1
 8006890:	f7fe fb18 	bl	8004ec4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689c:	461a      	mov	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80068ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80068b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80068b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80068c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80068ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80068d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80068ec:	2001      	movs	r0, #1
 80068ee:	f7fe fae9 	bl	8004ec4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fa:	461a      	mov	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	f8de3f23 	.word	0xf8de3f23

0800690c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b0a6      	sub	sp, #152	; 0x98
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006920:	2300      	movs	r3, #0
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006942:	2300      	movs	r3, #0
 8006944:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006948:	2300      	movs	r3, #0
 800694a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006952:	2300      	movs	r3, #0
 8006954:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006956:	2300      	movs	r3, #0
 8006958:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800696e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800697a:	2300      	movs	r3, #0
 800697c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006980:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fe86 	bl	8006698 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800698c:	2301      	movs	r3, #1
 800698e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006990:	2301      	movs	r3, #1
 8006992:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800699a:	2301      	movs	r3, #1
 800699c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80069ae:	2300      	movs	r3, #0
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80069b8:	2301      	movs	r3, #1
 80069ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80069bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80069c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80069c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80069d8:	2300      	movs	r3, #0
 80069da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff ff08 	bl	80067f8 <ETH_SetDMAConfig>
}
 80069e8:	bf00      	nop
 80069ea:	3798      	adds	r7, #152	; 0x98
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3305      	adds	r3, #5
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	3204      	adds	r2, #4
 8006a08:	7812      	ldrb	r2, [r2, #0]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <ETH_MACAddressConfig+0x68>)
 8006a12:	4413      	add	r3, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3303      	adds	r3, #3
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	061a      	lsls	r2, r3, #24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3302      	adds	r3, #2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	4313      	orrs	r3, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	7812      	ldrb	r2, [r2, #0]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <ETH_MACAddressConfig+0x6c>)
 8006a42:	4413      	add	r3, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6013      	str	r3, [r2, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40028040 	.word	0x40028040
 8006a5c:	40028044 	.word	0x40028044

08006a60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e03e      	b.n	8006aec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68d9      	ldr	r1, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	440b      	add	r3, r1
 8006a7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	3206      	adds	r2, #6
 8006aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d80c      	bhi.n	8006ad0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68d9      	ldr	r1, [r3, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	440b      	add	r3, r1
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	e004      	b.n	8006ada <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d9bd      	bls.n	8006a6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b04:	611a      	str	r2, [r3, #16]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e046      	b.n	8006bae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6919      	ldr	r1, [r3, #16]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	440b      	add	r3, r1
 8006b30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2200      	movs	r2, #0
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006b64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	3212      	adds	r2, #18
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d80c      	bhi.n	8006b9e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6919      	ldr	r1, [r3, #16]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	440b      	add	r3, r1
 8006b96:	461a      	mov	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	e004      	b.n	8006ba8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d9b5      	bls.n	8006b20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bde:	60da      	str	r2, [r3, #12]
}
 8006be0:	bf00      	nop
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b089      	sub	sp, #36	; 0x24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	e175      	b.n	8006ef8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	f040 8164 	bne.w	8006ef2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d005      	beq.n	8006c42 <HAL_GPIO_Init+0x56>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d130      	bne.n	8006ca4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	43db      	mvns	r3, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4013      	ands	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c78:	2201      	movs	r2, #1
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	43db      	mvns	r3, r3
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4013      	ands	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	091b      	lsrs	r3, r3, #4
 8006c8e:	f003 0201 	and.w	r2, r3, #1
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d017      	beq.n	8006ce0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	2203      	movs	r2, #3
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d123      	bne.n	8006d34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	08da      	lsrs	r2, r3, #3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3208      	adds	r2, #8
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	220f      	movs	r2, #15
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	08da      	lsrs	r2, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3208      	adds	r2, #8
 8006d2e:	69b9      	ldr	r1, [r7, #24]
 8006d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	2203      	movs	r2, #3
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	43db      	mvns	r3, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f003 0203 	and.w	r2, r3, #3
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80be 	beq.w	8006ef2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d76:	4b66      	ldr	r3, [pc, #408]	; (8006f10 <HAL_GPIO_Init+0x324>)
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	4a65      	ldr	r2, [pc, #404]	; (8006f10 <HAL_GPIO_Init+0x324>)
 8006d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d80:	6453      	str	r3, [r2, #68]	; 0x44
 8006d82:	4b63      	ldr	r3, [pc, #396]	; (8006f10 <HAL_GPIO_Init+0x324>)
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006d8e:	4a61      	ldr	r2, [pc, #388]	; (8006f14 <HAL_GPIO_Init+0x328>)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	089b      	lsrs	r3, r3, #2
 8006d94:	3302      	adds	r3, #2
 8006d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	220f      	movs	r2, #15
 8006da6:	fa02 f303 	lsl.w	r3, r2, r3
 8006daa:	43db      	mvns	r3, r3
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	4013      	ands	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a58      	ldr	r2, [pc, #352]	; (8006f18 <HAL_GPIO_Init+0x32c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d037      	beq.n	8006e2a <HAL_GPIO_Init+0x23e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a57      	ldr	r2, [pc, #348]	; (8006f1c <HAL_GPIO_Init+0x330>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d031      	beq.n	8006e26 <HAL_GPIO_Init+0x23a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a56      	ldr	r2, [pc, #344]	; (8006f20 <HAL_GPIO_Init+0x334>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02b      	beq.n	8006e22 <HAL_GPIO_Init+0x236>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a55      	ldr	r2, [pc, #340]	; (8006f24 <HAL_GPIO_Init+0x338>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d025      	beq.n	8006e1e <HAL_GPIO_Init+0x232>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a54      	ldr	r2, [pc, #336]	; (8006f28 <HAL_GPIO_Init+0x33c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01f      	beq.n	8006e1a <HAL_GPIO_Init+0x22e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a53      	ldr	r2, [pc, #332]	; (8006f2c <HAL_GPIO_Init+0x340>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d019      	beq.n	8006e16 <HAL_GPIO_Init+0x22a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a52      	ldr	r2, [pc, #328]	; (8006f30 <HAL_GPIO_Init+0x344>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_GPIO_Init+0x226>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a51      	ldr	r2, [pc, #324]	; (8006f34 <HAL_GPIO_Init+0x348>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00d      	beq.n	8006e0e <HAL_GPIO_Init+0x222>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a50      	ldr	r2, [pc, #320]	; (8006f38 <HAL_GPIO_Init+0x34c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <HAL_GPIO_Init+0x21e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a4f      	ldr	r2, [pc, #316]	; (8006f3c <HAL_GPIO_Init+0x350>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d101      	bne.n	8006e06 <HAL_GPIO_Init+0x21a>
 8006e02:	2309      	movs	r3, #9
 8006e04:	e012      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e06:	230a      	movs	r3, #10
 8006e08:	e010      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	e00e      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e0e:	2307      	movs	r3, #7
 8006e10:	e00c      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e12:	2306      	movs	r3, #6
 8006e14:	e00a      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e16:	2305      	movs	r3, #5
 8006e18:	e008      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	e006      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e004      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e002      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <HAL_GPIO_Init+0x240>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	f002 0203 	and.w	r2, r2, #3
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	4093      	lsls	r3, r2
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006e3c:	4935      	ldr	r1, [pc, #212]	; (8006f14 <HAL_GPIO_Init+0x328>)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	089b      	lsrs	r3, r3, #2
 8006e42:	3302      	adds	r3, #2
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e6e:	4a34      	ldr	r2, [pc, #208]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e74:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4013      	ands	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e98:	4a29      	ldr	r2, [pc, #164]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e9e:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	43db      	mvns	r3, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006eec:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <HAL_GPIO_Init+0x354>)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	f67f ae86 	bls.w	8006c0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	3724      	adds	r7, #36	; 0x24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40013800 	.word	0x40013800
 8006f18:	40020000 	.word	0x40020000
 8006f1c:	40020400 	.word	0x40020400
 8006f20:	40020800 	.word	0x40020800
 8006f24:	40020c00 	.word	0x40020c00
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	40021400 	.word	0x40021400
 8006f30:	40021800 	.word	0x40021800
 8006f34:	40021c00 	.word	0x40021c00
 8006f38:	40022000 	.word	0x40022000
 8006f3c:	40022400 	.word	0x40022400
 8006f40:	40013c00 	.word	0x40013c00

08006f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	807b      	strh	r3, [r7, #2]
 8006f50:	4613      	mov	r3, r2
 8006f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f54:	787b      	ldrb	r3, [r7, #1]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f5a:	887a      	ldrh	r2, [r7, #2]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006f60:	e003      	b.n	8006f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006f62:	887b      	ldrh	r3, [r7, #2]
 8006f64:	041a      	lsls	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	619a      	str	r2, [r3, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f88:	887a      	ldrh	r2, [r7, #2]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	041a      	lsls	r2, r3, #16
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	43d9      	mvns	r1, r3
 8006f94:	887b      	ldrh	r3, [r7, #2]
 8006f96:	400b      	ands	r3, r1
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	619a      	str	r2, [r3, #24]
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fac:	b08f      	sub	sp, #60	; 0x3c
 8006fae:	af0a      	add	r7, sp, #40	; 0x28
 8006fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e116      	b.n	80071ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d106      	bne.n	8006fdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f00b fa1a 	bl	8012410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f004 fd5f 	bl	800babe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	687e      	ldr	r6, [r7, #4]
 8007008:	466d      	mov	r5, sp
 800700a:	f106 0410 	add.w	r4, r6, #16
 800700e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800701a:	e885 0003 	stmia.w	r5, {r0, r1}
 800701e:	1d33      	adds	r3, r6, #4
 8007020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007022:	6838      	ldr	r0, [r7, #0]
 8007024:	f004 fc40 	bl	800b8a8 <USB_CoreInit>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e0d7      	b.n	80071ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f004 fd4d 	bl	800bae0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e04a      	b.n	80070e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	333d      	adds	r3, #61	; 0x3d
 800705c:	2201      	movs	r2, #1
 800705e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007060:	7bfa      	ldrb	r2, [r7, #15]
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	333c      	adds	r3, #60	; 0x3c
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	b298      	uxth	r0, r3
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	3344      	adds	r3, #68	; 0x44
 8007088:	4602      	mov	r2, r0
 800708a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	3340      	adds	r3, #64	; 0x40
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	3348      	adds	r3, #72	; 0x48
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4613      	mov	r3, r2
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	334c      	adds	r3, #76	; 0x4c
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070c8:	7bfa      	ldrb	r2, [r7, #15]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	4613      	mov	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	3354      	adds	r3, #84	; 0x54
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	3301      	adds	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	7bfa      	ldrb	r2, [r7, #15]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3af      	bcc.n	800704c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	e044      	b.n	800717c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070f2:	7bfa      	ldrb	r2, [r7, #15]
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007108:	7bfa      	ldrb	r2, [r7, #15]
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	4613      	mov	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800711a:	7bfa      	ldrb	r2, [r7, #15]
 800711c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800711e:	7bfa      	ldrb	r2, [r7, #15]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007134:	7bfa      	ldrb	r2, [r7, #15]
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800714a:	7bfa      	ldrb	r2, [r7, #15]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007160:	7bfa      	ldrb	r2, [r7, #15]
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	3301      	adds	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]
 800717c:	7bfa      	ldrb	r2, [r7, #15]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d3b5      	bcc.n	80070f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	687e      	ldr	r6, [r7, #4]
 800718e:	466d      	mov	r5, sp
 8007190:	f106 0410 	add.w	r4, r6, #16
 8007194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800719a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800719c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80071a4:	1d33      	adds	r3, r6, #4
 80071a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071a8:	6838      	ldr	r0, [r7, #0]
 80071aa:	f004 fce5 	bl	800bb78 <USB_DevInit>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e014      	b.n	80071ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d102      	bne.n	80071de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f97b 	bl	80084d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f005 fe33 	bl	800ce4e <USB_DevDisconnect>

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_PCD_Start+0x16>
 8007204:	2302      	movs	r3, #2
 8007206:	e012      	b.n	800722e <HAL_PCD_Start+0x3c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f004 fc41 	bl	800ba9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f005 fdf4 	bl	800ce0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007236:	b590      	push	{r4, r7, lr}
 8007238:	b08d      	sub	sp, #52	; 0x34
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f005 feb2 	bl	800cfb6 <USB_GetMode>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 84b7 	bne.w	8007bc8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f005 fe16 	bl	800ce90 <USB_ReadInterrupts>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 84ad 	beq.w	8007bc6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	0a1b      	lsrs	r3, r3, #8
 8007276:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f005 fe03 	bl	800ce90 <USB_ReadInterrupts>
 800728a:	4603      	mov	r3, r0
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d107      	bne.n	80072a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f002 0202 	and.w	r2, r2, #2
 80072a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f005 fdf1 	bl	800ce90 <USB_ReadInterrupts>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b10      	cmp	r3, #16
 80072b6:	d161      	bne.n	800737c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0210 	bic.w	r2, r2, #16
 80072c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	4613      	mov	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	3304      	adds	r3, #4
 80072e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	0c5b      	lsrs	r3, r3, #17
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d124      	bne.n	800733e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d035      	beq.n	800736c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	091b      	lsrs	r3, r3, #4
 8007308:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800730a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800730e:	b29b      	uxth	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	6a38      	ldr	r0, [r7, #32]
 8007314:	f005 fc28 	bl	800cb68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	091b      	lsrs	r3, r3, #4
 8007320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007324:	441a      	add	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007336:	441a      	add	r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	621a      	str	r2, [r3, #32]
 800733c:	e016      	b.n	800736c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	0c5b      	lsrs	r3, r3, #17
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	2b06      	cmp	r3, #6
 8007348:	d110      	bne.n	800736c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007350:	2208      	movs	r2, #8
 8007352:	4619      	mov	r1, r3
 8007354:	6a38      	ldr	r0, [r7, #32]
 8007356:	f005 fc07 	bl	800cb68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a1a      	ldr	r2, [r3, #32]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007366:	441a      	add	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0210 	orr.w	r2, r2, #16
 800737a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f005 fd85 	bl	800ce90 <USB_ReadInterrupts>
 8007386:	4603      	mov	r3, r0
 8007388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800738c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007390:	f040 80a7 	bne.w	80074e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f005 fd8a 	bl	800ceb6 <USB_ReadDevAllOutEpInterrupt>
 80073a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80073a4:	e099      	b.n	80074da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 808e 	beq.w	80074ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f005 fdae 	bl	800cf1e <USB_ReadDevOutEPInterrupt>
 80073c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	461a      	mov	r2, r3
 80073dc:	2301      	movs	r3, #1
 80073de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80073e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fef0 	bl	80081c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00c      	beq.n	800740c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fe:	461a      	mov	r2, r3
 8007400:	2308      	movs	r3, #8
 8007402:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 ffc6 	bl	8008398 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	2b00      	cmp	r3, #0
 8007414:	d008      	beq.n	8007428 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	461a      	mov	r2, r3
 8007424:	2310      	movs	r3, #16
 8007426:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d030      	beq.n	8007494 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743a:	2b80      	cmp	r3, #128	; 0x80
 800743c:	d109      	bne.n	8007452 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800744c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007450:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007454:	4613      	mov	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	3304      	adds	r3, #4
 8007466:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	78db      	ldrb	r3, [r3, #3]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d108      	bne.n	8007482 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2200      	movs	r2, #0
 8007474:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f00b f8fb 	bl	8012678 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	461a      	mov	r2, r3
 8007490:	2302      	movs	r3, #2
 8007492:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	461a      	mov	r2, r3
 80074ac:	2320      	movs	r3, #32
 80074ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	461a      	mov	r2, r3
 80074c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	3301      	adds	r3, #1
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	085b      	lsrs	r3, r3, #1
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f af62 	bne.w	80073a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f005 fcd2 	bl	800ce90 <USB_ReadInterrupts>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074f6:	f040 80db 	bne.w	80076b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f005 fcf3 	bl	800ceea <USB_ReadDevAllInEpInterrupt>
 8007504:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800750a:	e0cd      	b.n	80076a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 80c2 	beq.w	800769c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f005 fd19 	bl	800cf5a <USB_ReadDevInEPInterrupt>
 8007528:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d057      	beq.n	80075e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	2201      	movs	r2, #1
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	43db      	mvns	r3, r3
 800754e:	69f9      	ldr	r1, [r7, #28]
 8007550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007554:	4013      	ands	r3, r2
 8007556:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	461a      	mov	r2, r3
 8007566:	2301      	movs	r3, #1
 8007568:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d132      	bne.n	80075d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007576:	4613      	mov	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	334c      	adds	r3, #76	; 0x4c
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4403      	add	r3, r0
 8007592:	3348      	adds	r3, #72	; 0x48
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4419      	add	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4403      	add	r3, r0
 80075a6:	334c      	adds	r3, #76	; 0x4c
 80075a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d113      	bne.n	80075d8 <HAL_PCD_IRQHandler+0x3a2>
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	3354      	adds	r3, #84	; 0x54
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d108      	bne.n	80075d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075d0:	461a      	mov	r2, r3
 80075d2:	2101      	movs	r1, #1
 80075d4:	f005 fd22 	bl	800d01c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f00a ffc5 	bl	801256e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	461a      	mov	r2, r3
 80075fc:	2308      	movs	r3, #8
 80075fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007616:	461a      	mov	r2, r3
 8007618:	2310      	movs	r3, #16
 800761a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007632:	461a      	mov	r2, r3
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d023      	beq.n	800768a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007644:	6a38      	ldr	r0, [r7, #32]
 8007646:	f004 fbf5 	bl	800be34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800764a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	3338      	adds	r3, #56	; 0x38
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	3304      	adds	r3, #4
 800765c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	78db      	ldrb	r3, [r3, #3]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d108      	bne.n	8007678 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2200      	movs	r2, #0
 800766a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	b2db      	uxtb	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f00b f812 	bl	801269c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	461a      	mov	r2, r3
 8007686:	2302      	movs	r3, #2
 8007688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fd08 	bl	80080ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	3301      	adds	r3, #1
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f47f af2e 	bne.w	800750c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f005 fbeb 	bl	800ce90 <USB_ReadInterrupts>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c4:	d122      	bne.n	800770c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d108      	bne.n	80076f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076ec:	2100      	movs	r1, #0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f00b f98c 	bl	8012a0c <HAL_PCDEx_LPM_Callback>
 80076f4:	e002      	b.n	80076fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f00a ffb0 	bl	801265c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800770a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f005 fbbd 	bl	800ce90 <USB_ReadInterrupts>
 8007716:	4603      	mov	r3, r0
 8007718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007720:	d112      	bne.n	8007748 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d102      	bne.n	8007738 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f00a ff6c 	bl	8012610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007746:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f005 fb9f 	bl	800ce90 <USB_ReadInterrupts>
 8007752:	4603      	mov	r3, r0
 8007754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775c:	d121      	bne.n	80077a2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800776c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d111      	bne.n	800779c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	089b      	lsrs	r3, r3, #2
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007792:	2101      	movs	r1, #1
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f00b f939 	bl	8012a0c <HAL_PCDEx_LPM_Callback>
 800779a:	e002      	b.n	80077a2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f00a ff37 	bl	8012610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f005 fb72 	bl	800ce90 <USB_ReadInterrupts>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	f040 80b7 	bne.w	8007928 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2110      	movs	r1, #16
 80077d4:	4618      	mov	r0, r3
 80077d6:	f004 fb2d 	bl	800be34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077da:	2300      	movs	r3, #0
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077de:	e046      	b.n	800786e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	461a      	mov	r2, r3
 80077ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007812:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007820:	461a      	mov	r2, r3
 8007822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007826:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007866:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	3301      	adds	r3, #1
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007874:	429a      	cmp	r2, r3
 8007876:	d3b3      	bcc.n	80077e0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007886:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800788a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a4:	f043 030b 	orr.w	r3, r3, #11
 80078a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ba:	f043 030b 	orr.w	r3, r3, #11
 80078be:	6453      	str	r3, [r2, #68]	; 0x44
 80078c0:	e015      	b.n	80078ee <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c8:	695a      	ldr	r2, [r3, #20]
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d0:	4619      	mov	r1, r3
 80078d2:	f242 032b 	movw	r3, #8235	; 0x202b
 80078d6:	4313      	orrs	r3, r2
 80078d8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e8:	f043 030b 	orr.w	r3, r3, #11
 80078ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007900:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007912:	461a      	mov	r2, r3
 8007914:	f005 fb82 	bl	800d01c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f005 faaf 	bl	800ce90 <USB_ReadInterrupts>
 8007932:	4603      	mov	r3, r0
 8007934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793c:	d124      	bne.n	8007988 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f005 fb46 	bl	800cfd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f004 faee 	bl	800bf2e <USB_GetDevSpeed>
 8007952:	4603      	mov	r3, r0
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681c      	ldr	r4, [r3, #0]
 800795e:	f001 fadd 	bl	8008f1c <HAL_RCC_GetHCLKFreq>
 8007962:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007968:	b2db      	uxtb	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	4620      	mov	r0, r4
 800796e:	f003 fff3 	bl	800b958 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f00a fe23 	bl	80125be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007986:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4618      	mov	r0, r3
 800798e:	f005 fa7f 	bl	800ce90 <USB_ReadInterrupts>
 8007992:	4603      	mov	r3, r0
 8007994:	f003 0308 	and.w	r3, r3, #8
 8007998:	2b08      	cmp	r3, #8
 800799a:	d10a      	bne.n	80079b2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f00a fe00 	bl	80125a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695a      	ldr	r2, [r3, #20]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f002 0208 	and.w	r2, r2, #8
 80079b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f005 fa6a 	bl	800ce90 <USB_ReadInterrupts>
 80079bc:	4603      	mov	r3, r0
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d122      	bne.n	8007a0c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079d2:	2301      	movs	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
 80079d6:	e014      	b.n	8007a02 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079dc:	4613      	mov	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d105      	bne.n	80079fc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fb27 	bl	800804a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	3301      	adds	r3, #1
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d3e5      	bcc.n	80079d8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f005 fa3d 	bl	800ce90 <USB_ReadInterrupts>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a20:	d13b      	bne.n	8007a9a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a22:	2301      	movs	r3, #1
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
 8007a26:	e02b      	b.n	8007a80 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3340      	adds	r3, #64	; 0x40
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d115      	bne.n	8007a7a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007a4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da12      	bge.n	8007a7a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	333f      	adds	r3, #63	; 0x3f
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fae8 	bl	800804a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d3ce      	bcc.n	8007a28 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695a      	ldr	r2, [r3, #20]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f005 f9f6 	bl	800ce90 <USB_ReadInterrupts>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aae:	d155      	bne.n	8007b5c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab4:	e045      	b.n	8007b42 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aca:	4613      	mov	r3, r2
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d12e      	bne.n	8007b3c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ade:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da2b      	bge.n	8007b3c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007af0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d121      	bne.n	8007b3c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afc:	4613      	mov	r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b38:	6053      	str	r3, [r2, #4]
            break;
 8007b3a:	e007      	b.n	8007b4c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	3301      	adds	r3, #1
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d3b4      	bcc.n	8007ab6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f005 f995 	bl	800ce90 <USB_ReadInterrupts>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b70:	d10a      	bne.n	8007b88 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f00a fda4 	bl	80126c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f005 f97f 	bl	800ce90 <USB_ReadInterrupts>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d115      	bne.n	8007bc8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f00a fd94 	bl	80126dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6859      	ldr	r1, [r3, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	e000      	b.n	8007bc8 <HAL_PCD_IRQHandler+0x992>
      return;
 8007bc6:	bf00      	nop
    }
  }
}
 8007bc8:	3734      	adds	r7, #52	; 0x34
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd90      	pop	{r4, r7, pc}

08007bce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_PCD_SetAddress+0x1a>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e013      	b.n	8007c10 <HAL_PCD_SetAddress+0x42>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f005 f8dd 	bl	800cdc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	70fb      	strb	r3, [r7, #3]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	803b      	strh	r3, [r7, #0]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da0f      	bge.n	8007c5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	f003 020f 	and.w	r2, r3, #15
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	3338      	adds	r3, #56	; 0x38
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	3304      	adds	r3, #4
 8007c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	705a      	strb	r2, [r3, #1]
 8007c5c:	e00f      	b.n	8007c7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	f003 020f 	and.w	r2, r3, #15
 8007c64:	4613      	mov	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	4413      	add	r3, r2
 8007c74:	3304      	adds	r3, #4
 8007c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c8a:	883a      	ldrh	r2, [r7, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	78ba      	ldrb	r2, [r7, #2]
 8007c94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	785b      	ldrb	r3, [r3, #1]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007ca8:	78bb      	ldrb	r3, [r7, #2]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d102      	bne.n	8007cb4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d101      	bne.n	8007cc2 <HAL_PCD_EP_Open+0xaa>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e00e      	b.n	8007ce0 <HAL_PCD_EP_Open+0xc8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f004 f951 	bl	800bf78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007cde:	7afb      	ldrb	r3, [r7, #11]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da0f      	bge.n	8007d1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	f003 020f 	and.w	r2, r3, #15
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	3338      	adds	r3, #56	; 0x38
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	4413      	add	r3, r2
 8007d10:	3304      	adds	r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	705a      	strb	r2, [r3, #1]
 8007d1a:	e00f      	b.n	8007d3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	f003 020f 	and.w	r2, r3, #15
 8007d22:	4613      	mov	r3, r2
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	3304      	adds	r3, #4
 8007d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_PCD_EP_Close+0x6e>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e00e      	b.n	8007d74 <HAL_PCD_EP_Close+0x8c>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f004 f98f 	bl	800c088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	f003 020f 	and.w	r2, r3, #15
 8007d92:	4613      	mov	r3, r2
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	3304      	adds	r3, #4
 8007da4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2200      	movs	r2, #0
 8007db6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d102      	bne.n	8007dd8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	f004 fc76 	bl	800c6e0 <USB_EP0StartXfer>
 8007df4:	e008      	b.n	8007e08 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	6979      	ldr	r1, [r7, #20]
 8007e04:	f004 fa1c 	bl	800c240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	f003 020f 	and.w	r2, r3, #15
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	4613      	mov	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007e34:	681b      	ldr	r3, [r3, #0]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	4613      	mov	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	3338      	adds	r3, #56	; 0x38
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	3304      	adds	r3, #4
 8007e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e82:	7afb      	ldrb	r3, [r7, #11]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d102      	bne.n	8007e9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6979      	ldr	r1, [r7, #20]
 8007eb4:	f004 fc14 	bl	800c6e0 <USB_EP0StartXfer>
 8007eb8:	e008      	b.n	8007ecc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6979      	ldr	r1, [r7, #20]
 8007ec8:	f004 f9ba 	bl	800c240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	f003 020f 	and.w	r2, r3, #15
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d901      	bls.n	8007ef4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e050      	b.n	8007f96 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da0f      	bge.n	8007f1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	f003 020f 	and.w	r2, r3, #15
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	3338      	adds	r3, #56	; 0x38
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	3304      	adds	r3, #4
 8007f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	705a      	strb	r2, [r3, #1]
 8007f1a:	e00d      	b.n	8007f38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3304      	adds	r3, #4
 8007f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	f003 030f 	and.w	r3, r3, #15
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_PCD_EP_SetStall+0x82>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e01e      	b.n	8007f96 <HAL_PCD_EP_SetStall+0xc0>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68f9      	ldr	r1, [r7, #12]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f004 fe56 	bl	800cc18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	b2d9      	uxtb	r1, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f86:	461a      	mov	r2, r3
 8007f88:	f005 f848 	bl	800d01c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d901      	bls.n	8007fbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e042      	b.n	8008042 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da0f      	bge.n	8007fe4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	f003 020f 	and.w	r2, r3, #15
 8007fca:	4613      	mov	r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	3338      	adds	r3, #56	; 0x38
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3304      	adds	r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	705a      	strb	r2, [r3, #1]
 8007fe2:	e00f      	b.n	8008004 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 020f 	and.w	r2, r3, #15
 8007fea:	4613      	mov	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_PCD_EP_ClrStall+0x86>
 8008020:	2302      	movs	r3, #2
 8008022:	e00e      	b.n	8008042 <HAL_PCD_EP_ClrStall+0xa4>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68f9      	ldr	r1, [r7, #12]
 8008032:	4618      	mov	r0, r3
 8008034:	f004 fe5e 	bl	800ccf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800805a:	2b00      	cmp	r3, #0
 800805c:	da0c      	bge.n	8008078 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	4613      	mov	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	3338      	adds	r3, #56	; 0x38
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	4413      	add	r3, r2
 8008072:	3304      	adds	r3, #4
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	e00c      	b.n	8008092 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	f003 020f 	and.w	r2, r3, #15
 800807e:	4613      	mov	r3, r2
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	4618      	mov	r0, r3
 800809a:	f004 fc7d 	bl	800c998 <USB_EPStopXfer>
 800809e:	4603      	mov	r3, r0
 80080a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80080a2:	7afb      	ldrb	r3, [r7, #11]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	3338      	adds	r3, #56	; 0x38
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	3304      	adds	r3, #4
 80080d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d901      	bls.n	80080e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e06c      	b.n	80081be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d902      	bls.n	8008100 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	3303      	adds	r3, #3
 8008104:	089b      	lsrs	r3, r3, #2
 8008106:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008108:	e02b      	b.n	8008162 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	429a      	cmp	r2, r3
 800811e:	d902      	bls.n	8008126 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	3303      	adds	r3, #3
 800812a:	089b      	lsrs	r3, r3, #2
 800812c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6919      	ldr	r1, [r3, #16]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	b2da      	uxtb	r2, r3
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800813e:	b2db      	uxtb	r3, r3
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4603      	mov	r3, r0
 8008144:	6978      	ldr	r0, [r7, #20]
 8008146:	f004 fcd1 	bl	800caec <USB_WritePacket>

    ep->xfer_buff  += len;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	691a      	ldr	r2, [r3, #16]
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1a      	ldr	r2, [r3, #32]
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	441a      	add	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d809      	bhi.n	800818c <PCD_WriteEmptyTxFifo+0xe0>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008180:	429a      	cmp	r2, r3
 8008182:	d203      	bcs.n	800818c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1be      	bne.n	800810a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	699a      	ldr	r2, [r3, #24]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	429a      	cmp	r2, r3
 8008196:	d811      	bhi.n	80081bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f003 030f 	and.w	r3, r3, #15
 800819e:	2201      	movs	r2, #1
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	6939      	ldr	r1, [r7, #16]
 80081b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b8:	4013      	ands	r3, r2
 80081ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	333c      	adds	r3, #60	; 0x3c
 80081e0:	3304      	adds	r3, #4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d17b      	bne.n	80082f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b00      	cmp	r3, #0
 8008206:	d015      	beq.n	8008234 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	4a61      	ldr	r2, [pc, #388]	; (8008390 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	f240 80b9 	bls.w	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80b3 	beq.w	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	461a      	mov	r2, r3
 800822c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008230:	6093      	str	r3, [r2, #8]
 8008232:	e0a7      	b.n	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824a:	461a      	mov	r2, r3
 800824c:	2320      	movs	r3, #32
 800824e:	6093      	str	r3, [r2, #8]
 8008250:	e098      	b.n	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 8093 	bne.w	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	4a4b      	ldr	r2, [pc, #300]	; (8008390 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d90f      	bls.n	8008286 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008282:	6093      	str	r3, [r2, #8]
 8008284:	e07e      	b.n	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	4613      	mov	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	4413      	add	r3, r2
 8008298:	3304      	adds	r3, #4
 800829a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	0159      	lsls	r1, r3, #5
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	440b      	add	r3, r1
 80082a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b2:	1ad2      	subs	r2, r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d114      	bne.n	80082e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082d0:	461a      	mov	r2, r3
 80082d2:	2101      	movs	r1, #1
 80082d4:	f004 fea2 	bl	800d01c <USB_EP0_OutStart>
 80082d8:	e006      	b.n	80082e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	441a      	add	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f00a f922 	bl	8012538 <HAL_PCD_DataOutStageCallback>
 80082f4:	e046      	b.n	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	4a26      	ldr	r2, [pc, #152]	; (8008394 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d124      	bne.n	8008348 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008314:	461a      	mov	r2, r3
 8008316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831a:	6093      	str	r3, [r2, #8]
 800831c:	e032      	b.n	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008334:	461a      	mov	r2, r3
 8008336:	2320      	movs	r3, #32
 8008338:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f00a f8f9 	bl	8012538 <HAL_PCD_DataOutStageCallback>
 8008346:	e01d      	b.n	8008384 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d114      	bne.n	8008378 <PCD_EP_OutXfrComplete_int+0x1b0>
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	4613      	mov	r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d108      	bne.n	8008378 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008370:	461a      	mov	r2, r3
 8008372:	2100      	movs	r1, #0
 8008374:	f004 fe52 	bl	800d01c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f00a f8da 	bl	8012538 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	4f54300a 	.word	0x4f54300a
 8008394:	4f54310a 	.word	0x4f54310a

08008398 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	333c      	adds	r3, #60	; 0x3c
 80083b0:	3304      	adds	r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4a15      	ldr	r2, [pc, #84]	; (8008420 <PCD_EP_OutSetupPacket_int+0x88>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d90e      	bls.n	80083ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	461a      	mov	r2, r3
 80083e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f00a f891 	bl	8012514 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <PCD_EP_OutSetupPacket_int+0x88>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d90c      	bls.n	8008414 <PCD_EP_OutSetupPacket_int+0x7c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d108      	bne.n	8008414 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800840c:	461a      	mov	r2, r3
 800840e:	2101      	movs	r1, #1
 8008410:	f004 fe04 	bl	800d01c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	4f54300a 	.word	0x4f54300a

08008424 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	4613      	mov	r3, r2
 8008432:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d107      	bne.n	8008452 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008442:	883b      	ldrh	r3, [r7, #0]
 8008444:	0419      	lsls	r1, r3, #16
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	430a      	orrs	r2, r1
 800844e:	629a      	str	r2, [r3, #40]	; 0x28
 8008450:	e028      	b.n	80084a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008458:	0c1b      	lsrs	r3, r3, #16
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
 8008464:	e00d      	b.n	8008482 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	3340      	adds	r3, #64	; 0x40
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	0c1b      	lsrs	r3, r3, #16
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	4413      	add	r3, r2
 800847a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	3301      	adds	r3, #1
 8008480:	73fb      	strb	r3, [r7, #15]
 8008482:	7bfa      	ldrb	r2, [r7, #15]
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	3b01      	subs	r3, #1
 8008488:	429a      	cmp	r2, r3
 800848a:	d3ec      	bcc.n	8008466 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800848c:	883b      	ldrh	r3, [r7, #0]
 800848e:	0418      	lsls	r0, r3, #16
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6819      	ldr	r1, [r3, #0]
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	3b01      	subs	r3, #1
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4302      	orrs	r2, r0
 800849c:	3340      	adds	r3, #64	; 0x40
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	887a      	ldrh	r2, [r7, #2]
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_PCDEx_ActivateLPM+0x44>)
 8008504:	4313      	orrs	r3, r2
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	10000003 	.word	0x10000003

0800851c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a04      	ldr	r2, [pc, #16]	; (8008538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852a:	6013      	str	r3, [r2, #0]
}
 800852c:	bf00      	nop
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40007000 	.word	0x40007000

0800853c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008546:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	4a22      	ldr	r2, [pc, #136]	; (80085d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800854c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008550:	6413      	str	r3, [r2, #64]	; 0x40
 8008552:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a1d      	ldr	r2, [pc, #116]	; (80085d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008568:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800856a:	f7fc fc9f 	bl	8004eac <HAL_GetTick>
 800856e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008570:	e009      	b.n	8008586 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008572:	f7fc fc9b 	bl	8004eac <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008580:	d901      	bls.n	8008586 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e022      	b.n	80085cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800858e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008592:	d1ee      	bne.n	8008572 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008594:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a0f      	ldr	r2, [pc, #60]	; (80085d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800859a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800859e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085a0:	f7fc fc84 	bl	8004eac <HAL_GetTick>
 80085a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80085a6:	e009      	b.n	80085bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80085a8:	f7fc fc80 	bl	8004eac <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b6:	d901      	bls.n	80085bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e007      	b.n	80085cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085c8:	d1ee      	bne.n	80085a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40023800 	.word	0x40023800
 80085d8:	40007000 	.word	0x40007000

080085dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80085e4:	2300      	movs	r3, #0
 80085e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e29b      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 8087 	beq.w	800870e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008600:	4b96      	ldr	r3, [pc, #600]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 030c 	and.w	r3, r3, #12
 8008608:	2b04      	cmp	r3, #4
 800860a:	d00c      	beq.n	8008626 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800860c:	4b93      	ldr	r3, [pc, #588]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 030c 	and.w	r3, r3, #12
 8008614:	2b08      	cmp	r3, #8
 8008616:	d112      	bne.n	800863e <HAL_RCC_OscConfig+0x62>
 8008618:	4b90      	ldr	r3, [pc, #576]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008624:	d10b      	bne.n	800863e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008626:	4b8d      	ldr	r3, [pc, #564]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d06c      	beq.n	800870c <HAL_RCC_OscConfig+0x130>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d168      	bne.n	800870c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e275      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008646:	d106      	bne.n	8008656 <HAL_RCC_OscConfig+0x7a>
 8008648:	4b84      	ldr	r3, [pc, #528]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a83      	ldr	r2, [pc, #524]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800864e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	e02e      	b.n	80086b4 <HAL_RCC_OscConfig+0xd8>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10c      	bne.n	8008678 <HAL_RCC_OscConfig+0x9c>
 800865e:	4b7f      	ldr	r3, [pc, #508]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a7e      	ldr	r2, [pc, #504]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	4b7c      	ldr	r3, [pc, #496]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a7b      	ldr	r2, [pc, #492]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e01d      	b.n	80086b4 <HAL_RCC_OscConfig+0xd8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008680:	d10c      	bne.n	800869c <HAL_RCC_OscConfig+0xc0>
 8008682:	4b76      	ldr	r3, [pc, #472]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a75      	ldr	r2, [pc, #468]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	4b73      	ldr	r3, [pc, #460]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a72      	ldr	r2, [pc, #456]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	e00b      	b.n	80086b4 <HAL_RCC_OscConfig+0xd8>
 800869c:	4b6f      	ldr	r3, [pc, #444]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a6e      	ldr	r2, [pc, #440]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	4b6c      	ldr	r3, [pc, #432]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a6b      	ldr	r2, [pc, #428]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d013      	beq.n	80086e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fc fbf6 	bl	8004eac <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086c4:	f7fc fbf2 	bl	8004eac <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b64      	cmp	r3, #100	; 0x64
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e229      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086d6:	4b61      	ldr	r3, [pc, #388]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0xe8>
 80086e2:	e014      	b.n	800870e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fc fbe2 	bl	8004eac <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086ec:	f7fc fbde 	bl	8004eac <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	; 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e215      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086fe:	4b57      	ldr	r3, [pc, #348]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x110>
 800870a:	e000      	b.n	800870e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800870c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d069      	beq.n	80087ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800871a:	4b50      	ldr	r3, [pc, #320]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 030c 	and.w	r3, r3, #12
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008726:	4b4d      	ldr	r3, [pc, #308]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 030c 	and.w	r3, r3, #12
 800872e:	2b08      	cmp	r3, #8
 8008730:	d11c      	bne.n	800876c <HAL_RCC_OscConfig+0x190>
 8008732:	4b4a      	ldr	r3, [pc, #296]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d116      	bne.n	800876c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800873e:	4b47      	ldr	r3, [pc, #284]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <HAL_RCC_OscConfig+0x17a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d001      	beq.n	8008756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e1e9      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008756:	4b41      	ldr	r3, [pc, #260]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	493d      	ldr	r1, [pc, #244]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008766:	4313      	orrs	r3, r2
 8008768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800876a:	e040      	b.n	80087ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d023      	beq.n	80087bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008774:	4b39      	ldr	r3, [pc, #228]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a38      	ldr	r2, [pc, #224]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008780:	f7fc fb94 	bl	8004eac <HAL_GetTick>
 8008784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008788:	f7fc fb90 	bl	8004eac <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e1c7      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800879a:	4b30      	ldr	r3, [pc, #192]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0f0      	beq.n	8008788 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087a6:	4b2d      	ldr	r3, [pc, #180]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4929      	ldr	r1, [pc, #164]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	600b      	str	r3, [r1, #0]
 80087ba:	e018      	b.n	80087ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087bc:	4b27      	ldr	r3, [pc, #156]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a26      	ldr	r2, [pc, #152]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c8:	f7fc fb70 	bl	8004eac <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087d0:	f7fc fb6c 	bl	8004eac <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e1a3      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087e2:	4b1e      	ldr	r3, [pc, #120]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d038      	beq.n	800886c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d019      	beq.n	8008836 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008802:	4b16      	ldr	r3, [pc, #88]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	4a15      	ldr	r2, [pc, #84]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008808:	f043 0301 	orr.w	r3, r3, #1
 800880c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880e:	f7fc fb4d 	bl	8004eac <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008816:	f7fc fb49 	bl	8004eac <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e180      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800882a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <HAL_RCC_OscConfig+0x23a>
 8008834:	e01a      	b.n	800886c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008836:	4b09      	ldr	r3, [pc, #36]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883a:	4a08      	ldr	r2, [pc, #32]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008842:	f7fc fb33 	bl	8004eac <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008848:	e00a      	b.n	8008860 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800884a:	f7fc fb2f 	bl	8004eac <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d903      	bls.n	8008860 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e166      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
 800885c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008860:	4b92      	ldr	r3, [pc, #584]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1ee      	bne.n	800884a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 80a4 	beq.w	80089c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800887a:	4b8c      	ldr	r3, [pc, #560]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10d      	bne.n	80088a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008886:	4b89      	ldr	r3, [pc, #548]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	4a88      	ldr	r2, [pc, #544]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800888c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008890:	6413      	str	r3, [r2, #64]	; 0x40
 8008892:	4b86      	ldr	r3, [pc, #536]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800889a:	60bb      	str	r3, [r7, #8]
 800889c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088a2:	4b83      	ldr	r3, [pc, #524]	; (8008ab0 <HAL_RCC_OscConfig+0x4d4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d118      	bne.n	80088e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80088ae:	4b80      	ldr	r3, [pc, #512]	; (8008ab0 <HAL_RCC_OscConfig+0x4d4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a7f      	ldr	r2, [pc, #508]	; (8008ab0 <HAL_RCC_OscConfig+0x4d4>)
 80088b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ba:	f7fc faf7 	bl	8004eac <HAL_GetTick>
 80088be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088c2:	f7fc faf3 	bl	8004eac <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b64      	cmp	r3, #100	; 0x64
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e12a      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088d4:	4b76      	ldr	r3, [pc, #472]	; (8008ab0 <HAL_RCC_OscConfig+0x4d4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d106      	bne.n	80088f6 <HAL_RCC_OscConfig+0x31a>
 80088e8:	4b70      	ldr	r3, [pc, #448]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80088ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ec:	4a6f      	ldr	r2, [pc, #444]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80088ee:	f043 0301 	orr.w	r3, r3, #1
 80088f2:	6713      	str	r3, [r2, #112]	; 0x70
 80088f4:	e02d      	b.n	8008952 <HAL_RCC_OscConfig+0x376>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <HAL_RCC_OscConfig+0x33c>
 80088fe:	4b6b      	ldr	r3, [pc, #428]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	4a6a      	ldr	r2, [pc, #424]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008904:	f023 0301 	bic.w	r3, r3, #1
 8008908:	6713      	str	r3, [r2, #112]	; 0x70
 800890a:	4b68      	ldr	r3, [pc, #416]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	4a67      	ldr	r2, [pc, #412]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008910:	f023 0304 	bic.w	r3, r3, #4
 8008914:	6713      	str	r3, [r2, #112]	; 0x70
 8008916:	e01c      	b.n	8008952 <HAL_RCC_OscConfig+0x376>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b05      	cmp	r3, #5
 800891e:	d10c      	bne.n	800893a <HAL_RCC_OscConfig+0x35e>
 8008920:	4b62      	ldr	r3, [pc, #392]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	4a61      	ldr	r2, [pc, #388]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008926:	f043 0304 	orr.w	r3, r3, #4
 800892a:	6713      	str	r3, [r2, #112]	; 0x70
 800892c:	4b5f      	ldr	r3, [pc, #380]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a5e      	ldr	r2, [pc, #376]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	e00b      	b.n	8008952 <HAL_RCC_OscConfig+0x376>
 800893a:	4b5c      	ldr	r3, [pc, #368]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	4a5b      	ldr	r2, [pc, #364]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	6713      	str	r3, [r2, #112]	; 0x70
 8008946:	4b59      	ldr	r3, [pc, #356]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	4a58      	ldr	r2, [pc, #352]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800894c:	f023 0304 	bic.w	r3, r3, #4
 8008950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d015      	beq.n	8008986 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800895a:	f7fc faa7 	bl	8004eac <HAL_GetTick>
 800895e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008960:	e00a      	b.n	8008978 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008962:	f7fc faa3 	bl	8004eac <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008970:	4293      	cmp	r3, r2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e0d8      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008978:	4b4c      	ldr	r3, [pc, #304]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 800897a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0ee      	beq.n	8008962 <HAL_RCC_OscConfig+0x386>
 8008984:	e014      	b.n	80089b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008986:	f7fc fa91 	bl	8004eac <HAL_GetTick>
 800898a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800898c:	e00a      	b.n	80089a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800898e:	f7fc fa8d 	bl	8004eac <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f241 3288 	movw	r2, #5000	; 0x1388
 800899c:	4293      	cmp	r3, r2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e0c2      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089a4:	4b41      	ldr	r3, [pc, #260]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ee      	bne.n	800898e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d105      	bne.n	80089c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089b6:	4b3d      	ldr	r3, [pc, #244]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	4a3c      	ldr	r2, [pc, #240]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80089bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80ae 	beq.w	8008b28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089cc:	4b37      	ldr	r3, [pc, #220]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 030c 	and.w	r3, r3, #12
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d06d      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d14b      	bne.n	8008a78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e0:	4b32      	ldr	r3, [pc, #200]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a31      	ldr	r2, [pc, #196]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 80089e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fc fa5e 	bl	8004eac <HAL_GetTick>
 80089f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089f4:	f7fc fa5a 	bl	8004eac <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e091      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a06:	4b29      	ldr	r3, [pc, #164]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1f0      	bne.n	80089f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69da      	ldr	r2, [r3, #28]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	019b      	lsls	r3, r3, #6
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	085b      	lsrs	r3, r3, #1
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	041b      	lsls	r3, r3, #16
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	061b      	lsls	r3, r3, #24
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	071b      	lsls	r3, r3, #28
 8008a3e:	491b      	ldr	r1, [pc, #108]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a44:	4b19      	ldr	r3, [pc, #100]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a18      	ldr	r2, [pc, #96]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a50:	f7fc fa2c 	bl	8004eac <HAL_GetTick>
 8008a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a58:	f7fc fa28 	bl	8004eac <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e05f      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a6a:	4b10      	ldr	r3, [pc, #64]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0f0      	beq.n	8008a58 <HAL_RCC_OscConfig+0x47c>
 8008a76:	e057      	b.n	8008b28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a78:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a0b      	ldr	r2, [pc, #44]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a84:	f7fc fa12 	bl	8004eac <HAL_GetTick>
 8008a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a8c:	f7fc fa0e 	bl	8004eac <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e045      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9e:	4b03      	ldr	r3, [pc, #12]	; (8008aac <HAL_RCC_OscConfig+0x4d0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1f0      	bne.n	8008a8c <HAL_RCC_OscConfig+0x4b0>
 8008aaa:	e03d      	b.n	8008b28 <HAL_RCC_OscConfig+0x54c>
 8008aac:	40023800 	.word	0x40023800
 8008ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008ab4:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <HAL_RCC_OscConfig+0x558>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d030      	beq.n	8008b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d129      	bne.n	8008b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d122      	bne.n	8008b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d119      	bne.n	8008b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	3b01      	subs	r3, #1
 8008afe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d10f      	bne.n	8008b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d107      	bne.n	8008b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d001      	beq.n	8008b28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e000      	b.n	8008b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40023800 	.word	0x40023800

08008b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0d0      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b50:	4b6a      	ldr	r3, [pc, #424]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d910      	bls.n	8008b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b5e:	4b67      	ldr	r3, [pc, #412]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f023 020f 	bic.w	r2, r3, #15
 8008b66:	4965      	ldr	r1, [pc, #404]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6e:	4b63      	ldr	r3, [pc, #396]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d001      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e0b8      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d020      	beq.n	8008bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b98:	4b59      	ldr	r3, [pc, #356]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4a58      	ldr	r2, [pc, #352]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bb0:	4b53      	ldr	r3, [pc, #332]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	4a52      	ldr	r2, [pc, #328]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bbc:	4b50      	ldr	r3, [pc, #320]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	494d      	ldr	r1, [pc, #308]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d040      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d107      	bne.n	8008bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be2:	4b47      	ldr	r3, [pc, #284]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d115      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e07f      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d107      	bne.n	8008c0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfa:	4b41      	ldr	r3, [pc, #260]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e073      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c0a:	4b3d      	ldr	r3, [pc, #244]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e06b      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c1a:	4b39      	ldr	r3, [pc, #228]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 0203 	bic.w	r2, r3, #3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4936      	ldr	r1, [pc, #216]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2c:	f7fc f93e 	bl	8004eac <HAL_GetTick>
 8008c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c32:	e00a      	b.n	8008c4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c34:	f7fc f93a 	bl	8004eac <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e053      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4a:	4b2d      	ldr	r3, [pc, #180]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 020c 	and.w	r2, r3, #12
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d1eb      	bne.n	8008c34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c5c:	4b27      	ldr	r3, [pc, #156]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d210      	bcs.n	8008c8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6a:	4b24      	ldr	r3, [pc, #144]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f023 020f 	bic.w	r2, r3, #15
 8008c72:	4922      	ldr	r1, [pc, #136]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c7a:	4b20      	ldr	r3, [pc, #128]	; (8008cfc <HAL_RCC_ClockConfig+0x1c4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d001      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e032      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c98:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	4916      	ldr	r1, [pc, #88]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008cb6:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	490e      	ldr	r1, [pc, #56]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008cca:	f000 f821 	bl	8008d10 <HAL_RCC_GetSysClockFreq>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <HAL_RCC_ClockConfig+0x1c8>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	091b      	lsrs	r3, r3, #4
 8008cd6:	f003 030f 	and.w	r3, r3, #15
 8008cda:	490a      	ldr	r1, [pc, #40]	; (8008d04 <HAL_RCC_ClockConfig+0x1cc>)
 8008cdc:	5ccb      	ldrb	r3, [r1, r3]
 8008cde:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <HAL_RCC_ClockConfig+0x1d0>)
 8008ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <HAL_RCC_ClockConfig+0x1d4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fb fba4 	bl	8004438 <HAL_InitTick>

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40023c00 	.word	0x40023c00
 8008d00:	40023800 	.word	0x40023800
 8008d04:	080222b4 	.word	0x080222b4
 8008d08:	20000004 	.word	0x20000004
 8008d0c:	20000008 	.word	0x20000008

08008d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d14:	b094      	sub	sp, #80	; 0x50
 8008d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d20:	2300      	movs	r3, #0
 8008d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d28:	4b79      	ldr	r3, [pc, #484]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 030c 	and.w	r3, r3, #12
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d00d      	beq.n	8008d50 <HAL_RCC_GetSysClockFreq+0x40>
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	f200 80e1 	bhi.w	8008efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <HAL_RCC_GetSysClockFreq+0x34>
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d003      	beq.n	8008d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8008d42:	e0db      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d44:	4b73      	ldr	r3, [pc, #460]	; (8008f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d48:	e0db      	b.n	8008f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d4a:	4b73      	ldr	r3, [pc, #460]	; (8008f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8008d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d4e:	e0d8      	b.n	8008f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d50:	4b6f      	ldr	r3, [pc, #444]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d58:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008d5a:	4b6d      	ldr	r3, [pc, #436]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d063      	beq.n	8008e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d66:	4b6a      	ldr	r3, [pc, #424]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	099b      	lsrs	r3, r3, #6
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d78:	633b      	str	r3, [r7, #48]	; 0x30
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008d82:	4622      	mov	r2, r4
 8008d84:	462b      	mov	r3, r5
 8008d86:	f04f 0000 	mov.w	r0, #0
 8008d8a:	f04f 0100 	mov.w	r1, #0
 8008d8e:	0159      	lsls	r1, r3, #5
 8008d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d94:	0150      	lsls	r0, r2, #5
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	1a51      	subs	r1, r2, r1
 8008d9e:	6139      	str	r1, [r7, #16]
 8008da0:	4629      	mov	r1, r5
 8008da2:	eb63 0301 	sbc.w	r3, r3, r1
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008db4:	4659      	mov	r1, fp
 8008db6:	018b      	lsls	r3, r1, #6
 8008db8:	4651      	mov	r1, sl
 8008dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	018a      	lsls	r2, r1, #6
 8008dc2:	4651      	mov	r1, sl
 8008dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8008dc8:	4659      	mov	r1, fp
 8008dca:	eb63 0901 	sbc.w	r9, r3, r1
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008de2:	4690      	mov	r8, r2
 8008de4:	4699      	mov	r9, r3
 8008de6:	4623      	mov	r3, r4
 8008de8:	eb18 0303 	adds.w	r3, r8, r3
 8008dec:	60bb      	str	r3, [r7, #8]
 8008dee:	462b      	mov	r3, r5
 8008df0:	eb49 0303 	adc.w	r3, r9, r3
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e02:	4629      	mov	r1, r5
 8008e04:	024b      	lsls	r3, r1, #9
 8008e06:	4621      	mov	r1, r4
 8008e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	024a      	lsls	r2, r1, #9
 8008e10:	4610      	mov	r0, r2
 8008e12:	4619      	mov	r1, r3
 8008e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e16:	2200      	movs	r2, #0
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e20:	f7f7 fbd4 	bl	80005cc <__aeabi_uldivmod>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4613      	mov	r3, r2
 8008e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e2c:	e058      	b.n	8008ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2e:	4b38      	ldr	r3, [pc, #224]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	2200      	movs	r2, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	4611      	mov	r1, r2
 8008e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e3e:	623b      	str	r3, [r7, #32]
 8008e40:	2300      	movs	r3, #0
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
 8008e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	f04f 0000 	mov.w	r0, #0
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	0159      	lsls	r1, r3, #5
 8008e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e5a:	0150      	lsls	r0, r2, #5
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4641      	mov	r1, r8
 8008e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e66:	4649      	mov	r1, r9
 8008e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e80:	ebb2 040a 	subs.w	r4, r2, sl
 8008e84:	eb63 050b 	sbc.w	r5, r3, fp
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	00eb      	lsls	r3, r5, #3
 8008e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e96:	00e2      	lsls	r2, r4, #3
 8008e98:	4614      	mov	r4, r2
 8008e9a:	461d      	mov	r5, r3
 8008e9c:	4643      	mov	r3, r8
 8008e9e:	18e3      	adds	r3, r4, r3
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	eb45 0303 	adc.w	r3, r5, r3
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	028b      	lsls	r3, r1, #10
 8008eba:	4621      	mov	r1, r4
 8008ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	028a      	lsls	r2, r1, #10
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eca:	2200      	movs	r2, #0
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	61fa      	str	r2, [r7, #28]
 8008ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ed4:	f7f7 fb7a 	bl	80005cc <__aeabi_uldivmod>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4613      	mov	r3, r2
 8008ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	0c1b      	lsrs	r3, r3, #16
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	3301      	adds	r3, #1
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008efa:	e002      	b.n	8008f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8008efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3750      	adds	r7, #80	; 0x50
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0e:	bf00      	nop
 8008f10:	40023800 	.word	0x40023800
 8008f14:	00f42400 	.word	0x00f42400
 8008f18:	007a1200 	.word	0x007a1200

08008f1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f20:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f22:	681b      	ldr	r3, [r3, #0]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000004 	.word	0x20000004

08008f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f38:	f7ff fff0 	bl	8008f1c <HAL_RCC_GetHCLKFreq>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	0a9b      	lsrs	r3, r3, #10
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	4903      	ldr	r1, [pc, #12]	; (8008f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f4a:	5ccb      	ldrb	r3, [r1, r3]
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	40023800 	.word	0x40023800
 8008f58:	080222c4 	.word	0x080222c4

08008f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f60:	f7ff ffdc 	bl	8008f1c <HAL_RCC_GetHCLKFreq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	0b5b      	lsrs	r3, r3, #13
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	4903      	ldr	r1, [pc, #12]	; (8008f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f72:	5ccb      	ldrb	r3, [r1, r3]
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	080222c4 	.word	0x080222c4

08008f84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220f      	movs	r2, #15
 8008f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0203 	and.w	r2, r3, #3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008fb8:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	08db      	lsrs	r3, r3, #3
 8008fbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008fc6:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <HAL_RCC_GetClockConfig+0x60>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 020f 	and.w	r2, r3, #15
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	601a      	str	r2, [r3, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40023c00 	.word	0x40023c00

08008fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d012      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009010:	4b69      	ldr	r3, [pc, #420]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4a68      	ldr	r2, [pc, #416]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009016:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800901a:	6093      	str	r3, [r2, #8]
 800901c:	4b66      	ldr	r3, [pc, #408]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009024:	4964      	ldr	r1, [pc, #400]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009026:	4313      	orrs	r3, r2
 8009028:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009032:	2301      	movs	r3, #1
 8009034:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d017      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009042:	4b5d      	ldr	r3, [pc, #372]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009050:	4959      	ldr	r1, [pc, #356]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009060:	d101      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d017      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800907e:	4b4e      	ldr	r3, [pc, #312]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	494a      	ldr	r1, [pc, #296]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800909c:	d101      	bne.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800909e:	2301      	movs	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80090aa:	2301      	movs	r3, #1
 80090ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 808b 	beq.w	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090cc:	4b3a      	ldr	r3, [pc, #232]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	4a39      	ldr	r2, [pc, #228]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d6:	6413      	str	r3, [r2, #64]	; 0x40
 80090d8:	4b37      	ldr	r3, [pc, #220]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e0:	60bb      	str	r3, [r7, #8]
 80090e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090e4:	4b35      	ldr	r3, [pc, #212]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a34      	ldr	r2, [pc, #208]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090f0:	f7fb fedc 	bl	8004eac <HAL_GetTick>
 80090f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090f8:	f7fb fed8 	bl	8004eac <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b64      	cmp	r3, #100	; 0x64
 8009104:	d901      	bls.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e38f      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800910a:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0f0      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009116:	4b28      	ldr	r3, [pc, #160]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800911e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d035      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	429a      	cmp	r2, r3
 8009132:	d02e      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009134:	4b20      	ldr	r3, [pc, #128]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800913e:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009142:	4a1d      	ldr	r2, [pc, #116]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009148:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914e:	4a1a      	ldr	r2, [pc, #104]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009154:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b01      	cmp	r3, #1
 8009166:	d114      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fb fea0 	bl	8004eac <HAL_GetTick>
 800916c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800916e:	e00a      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009170:	f7fb fe9c 	bl	8004eac <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	f241 3288 	movw	r2, #5000	; 0x1388
 800917e:	4293      	cmp	r3, r2
 8009180:	d901      	bls.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e351      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009186:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0ee      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800919e:	d111      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80091ae:	400b      	ands	r3, r1
 80091b0:	4901      	ldr	r1, [pc, #4]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	608b      	str	r3, [r1, #8]
 80091b6:	e00b      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80091b8:	40023800 	.word	0x40023800
 80091bc:	40007000 	.word	0x40007000
 80091c0:	0ffffcff 	.word	0x0ffffcff
 80091c4:	4bac      	ldr	r3, [pc, #688]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	4aab      	ldr	r2, [pc, #684]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091ce:	6093      	str	r3, [r2, #8]
 80091d0:	4ba9      	ldr	r3, [pc, #676]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091dc:	49a6      	ldr	r1, [pc, #664]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d010      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091ee:	4ba2      	ldr	r3, [pc, #648]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f4:	4aa0      	ldr	r2, [pc, #640]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80091fe:	4b9e      	ldr	r3, [pc, #632]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009200:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	499b      	ldr	r1, [pc, #620]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800921c:	4b96      	ldr	r3, [pc, #600]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800921e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009222:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800922a:	4993      	ldr	r1, [pc, #588]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800922c:	4313      	orrs	r3, r2
 800922e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800923e:	4b8e      	ldr	r3, [pc, #568]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800924c:	498a      	ldr	r1, [pc, #552]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800924e:	4313      	orrs	r3, r2
 8009250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009260:	4b85      	ldr	r3, [pc, #532]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926e:	4982      	ldr	r1, [pc, #520]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009270:	4313      	orrs	r3, r2
 8009272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009282:	4b7d      	ldr	r3, [pc, #500]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009290:	4979      	ldr	r1, [pc, #484]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009292:	4313      	orrs	r3, r2
 8009294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092a4:	4b74      	ldr	r3, [pc, #464]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092aa:	f023 0203 	bic.w	r2, r3, #3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b2:	4971      	ldr	r1, [pc, #452]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80092c6:	4b6c      	ldr	r3, [pc, #432]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092cc:	f023 020c 	bic.w	r2, r3, #12
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d4:	4968      	ldr	r1, [pc, #416]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80092e8:	4b63      	ldr	r3, [pc, #396]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f6:	4960      	ldr	r1, [pc, #384]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800930a:	4b5b      	ldr	r3, [pc, #364]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800930c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009310:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009318:	4957      	ldr	r1, [pc, #348]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800931a:	4313      	orrs	r3, r2
 800931c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800932c:	4b52      	ldr	r3, [pc, #328]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	494f      	ldr	r1, [pc, #316]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800933c:	4313      	orrs	r3, r2
 800933e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800934e:	4b4a      	ldr	r3, [pc, #296]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009354:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935c:	4946      	ldr	r1, [pc, #280]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800935e:	4313      	orrs	r3, r2
 8009360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00a      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009370:	4b41      	ldr	r3, [pc, #260]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937e:	493e      	ldr	r1, [pc, #248]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009380:	4313      	orrs	r3, r2
 8009382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009392:	4b39      	ldr	r3, [pc, #228]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a0:	4935      	ldr	r1, [pc, #212]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093b4:	4b30      	ldr	r3, [pc, #192]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c2:	492d      	ldr	r1, [pc, #180]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d011      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80093d6:	4b28      	ldr	r3, [pc, #160]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e4:	4924      	ldr	r1, [pc, #144]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093f4:	d101      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80093f6:	2301      	movs	r3, #1
 80093f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0308 	and.w	r3, r3, #8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009406:	2301      	movs	r3, #1
 8009408:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009416:	4b18      	ldr	r3, [pc, #96]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800941c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009424:	4914      	ldr	r1, [pc, #80]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00b      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009448:	490b      	ldr	r1, [pc, #44]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800944a:	4313      	orrs	r3, r2
 800944c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00f      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800945c:	4b06      	ldr	r3, [pc, #24]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800945e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009462:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946c:	4902      	ldr	r1, [pc, #8]	; (8009478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009474:	e002      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8009476:	bf00      	nop
 8009478:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009488:	4b8a      	ldr	r3, [pc, #552]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800948a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800948e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009498:	4986      	ldr	r1, [pc, #536]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800949a:	4313      	orrs	r3, r2
 800949c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80094ac:	4b81      	ldr	r3, [pc, #516]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094bc:	497d      	ldr	r1, [pc, #500]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d006      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 80d6 	beq.w	8009684 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094d8:	4b76      	ldr	r3, [pc, #472]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a75      	ldr	r2, [pc, #468]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094e4:	f7fb fce2 	bl	8004eac <HAL_GetTick>
 80094e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094ea:	e008      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094ec:	f7fb fcde 	bl	8004eac <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b64      	cmp	r3, #100	; 0x64
 80094f8:	d901      	bls.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e195      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094fe:	4b6d      	ldr	r3, [pc, #436]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f0      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d021      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951a:	2b00      	cmp	r3, #0
 800951c:	d11d      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800951e:	4b65      	ldr	r3, [pc, #404]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800952c:	4b61      	ldr	r3, [pc, #388]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800952e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009532:	0e1b      	lsrs	r3, r3, #24
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	019a      	lsls	r2, r3, #6
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	041b      	lsls	r3, r3, #16
 8009544:	431a      	orrs	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	061b      	lsls	r3, r3, #24
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	071b      	lsls	r3, r3, #28
 8009552:	4958      	ldr	r1, [pc, #352]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009554:	4313      	orrs	r3, r2
 8009556:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800956e:	d00a      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02e      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009584:	d129      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009586:	4b4b      	ldr	r3, [pc, #300]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009594:	4b47      	ldr	r3, [pc, #284]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959a:	0f1b      	lsrs	r3, r3, #28
 800959c:	f003 0307 	and.w	r3, r3, #7
 80095a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	019a      	lsls	r2, r3, #6
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	041b      	lsls	r3, r3, #16
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	061b      	lsls	r3, r3, #24
 80095b4:	431a      	orrs	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	071b      	lsls	r3, r3, #28
 80095ba:	493e      	ldr	r1, [pc, #248]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80095c2:	4b3c      	ldr	r3, [pc, #240]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c8:	f023 021f 	bic.w	r2, r3, #31
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	3b01      	subs	r3, #1
 80095d2:	4938      	ldr	r1, [pc, #224]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01d      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095e6:	4b33      	ldr	r3, [pc, #204]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ec:	0e1b      	lsrs	r3, r3, #24
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095f4:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	019a      	lsls	r2, r3, #6
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	041b      	lsls	r3, r3, #16
 800960e:	431a      	orrs	r2, r3
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	061b      	lsls	r3, r3, #24
 8009614:	431a      	orrs	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	071b      	lsls	r3, r3, #28
 800961a:	4926      	ldr	r1, [pc, #152]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d011      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	019a      	lsls	r2, r3, #6
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	041b      	lsls	r3, r3, #16
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	061b      	lsls	r3, r3, #24
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	071b      	lsls	r3, r3, #28
 800964a:	491a      	ldr	r1, [pc, #104]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800964c:	4313      	orrs	r3, r2
 800964e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009652:	4b18      	ldr	r3, [pc, #96]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a17      	ldr	r2, [pc, #92]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800965c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800965e:	f7fb fc25 	bl	8004eac <HAL_GetTick>
 8009662:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009664:	e008      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009666:	f7fb fc21 	bl	8004eac <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b64      	cmp	r3, #100	; 0x64
 8009672:	d901      	bls.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e0d8      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009678:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0f0      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2b01      	cmp	r3, #1
 8009688:	f040 80ce 	bne.w	8009828 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009698:	f7fb fc08 	bl	8004eac <HAL_GetTick>
 800969c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800969e:	e00b      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80096a0:	f7fb fc04 	bl	8004eac <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b64      	cmp	r3, #100	; 0x64
 80096ac:	d904      	bls.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e0bb      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80096b2:	bf00      	nop
 80096b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096b8:	4b5e      	ldr	r3, [pc, #376]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c4:	d0ec      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d02e      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d12a      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80096ee:	4b51      	ldr	r3, [pc, #324]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f4:	0c1b      	lsrs	r3, r3, #16
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80096fc:	4b4d      	ldr	r3, [pc, #308]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009702:	0f1b      	lsrs	r3, r3, #28
 8009704:	f003 0307 	and.w	r3, r3, #7
 8009708:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	019a      	lsls	r2, r3, #6
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	041b      	lsls	r3, r3, #16
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	061b      	lsls	r3, r3, #24
 800971c:	431a      	orrs	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	071b      	lsls	r3, r3, #28
 8009722:	4944      	ldr	r1, [pc, #272]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009724:	4313      	orrs	r3, r2
 8009726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800972a:	4b42      	ldr	r3, [pc, #264]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800972c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009730:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009738:	3b01      	subs	r3, #1
 800973a:	021b      	lsls	r3, r3, #8
 800973c:	493d      	ldr	r1, [pc, #244]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d022      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009758:	d11d      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800975a:	4b36      	ldr	r3, [pc, #216]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800975c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009760:	0e1b      	lsrs	r3, r3, #24
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009768:	4b32      	ldr	r3, [pc, #200]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800976a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976e:	0f1b      	lsrs	r3, r3, #28
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	019a      	lsls	r2, r3, #6
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	431a      	orrs	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	061b      	lsls	r3, r3, #24
 8009788:	431a      	orrs	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	071b      	lsls	r3, r3, #28
 800978e:	4929      	ldr	r1, [pc, #164]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009790:	4313      	orrs	r3, r2
 8009792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d028      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80097a2:	4b24      	ldr	r3, [pc, #144]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a8:	0e1b      	lsrs	r3, r3, #24
 80097aa:	f003 030f 	and.w	r3, r3, #15
 80097ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80097b0:	4b20      	ldr	r3, [pc, #128]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b6:	0c1b      	lsrs	r3, r3, #16
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	019a      	lsls	r2, r3, #6
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	041b      	lsls	r3, r3, #16
 80097c8:	431a      	orrs	r2, r3
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	061b      	lsls	r3, r3, #24
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	071b      	lsls	r3, r3, #28
 80097d6:	4917      	ldr	r1, [pc, #92]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80097de:	4b15      	ldr	r3, [pc, #84]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ec:	4911      	ldr	r1, [pc, #68]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80097f4:	4b0f      	ldr	r3, [pc, #60]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a0e      	ldr	r2, [pc, #56]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009800:	f7fb fb54 	bl	8004eac <HAL_GetTick>
 8009804:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009806:	e008      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009808:	f7fb fb50 	bl	8004eac <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b64      	cmp	r3, #100	; 0x64
 8009814:	d901      	bls.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e007      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009826:	d1ef      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3720      	adds	r7, #32
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40023800 	.word	0x40023800

08009838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e049      	b.n	80098de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f841 	bl	80098e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3304      	adds	r3, #4
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f000 faa6 	bl	8009dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80098ee:	bf00      	nop
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
	...

080098fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d001      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e054      	b.n	80099be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a26      	ldr	r2, [pc, #152]	; (80099cc <HAL_TIM_Base_Start_IT+0xd0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d022      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993e:	d01d      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d018      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a21      	ldr	r2, [pc, #132]	; (80099d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d013      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a1f      	ldr	r2, [pc, #124]	; (80099d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00e      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <HAL_TIM_Base_Start_IT+0xe0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d009      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1c      	ldr	r2, [pc, #112]	; (80099e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d004      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a1b      	ldr	r2, [pc, #108]	; (80099e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d115      	bne.n	80099a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	4b19      	ldr	r3, [pc, #100]	; (80099e8 <HAL_TIM_Base_Start_IT+0xec>)
 8009984:	4013      	ands	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b06      	cmp	r3, #6
 800998c:	d015      	beq.n	80099ba <HAL_TIM_Base_Start_IT+0xbe>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009994:	d011      	beq.n	80099ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f042 0201 	orr.w	r2, r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099a6:	e008      	b.n	80099ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f042 0201 	orr.w	r2, r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	e000      	b.n	80099bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40010000 	.word	0x40010000
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40000c00 	.word	0x40000c00
 80099dc:	40010400 	.word	0x40010400
 80099e0:	40014000 	.word	0x40014000
 80099e4:	40001800 	.word	0x40001800
 80099e8:	00010007 	.word	0x00010007

080099ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e08f      	b.n	8009b20 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fa ff9b 	bl	8004950 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6899      	ldr	r1, [r3, #8]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	4b3e      	ldr	r3, [pc, #248]	; (8009b28 <HAL_TIM_Encoder_Init+0x13c>)
 8009a2e:	400b      	ands	r3, r1
 8009a30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f000 f9c3 	bl	8009dc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4b31      	ldr	r3, [pc, #196]	; (8009b2c <HAL_TIM_Encoder_Init+0x140>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	021b      	lsls	r3, r3, #8
 8009a76:	4313      	orrs	r3, r2
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4b2b      	ldr	r3, [pc, #172]	; (8009b30 <HAL_TIM_Encoder_Init+0x144>)
 8009a82:	4013      	ands	r3, r2
 8009a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4b2a      	ldr	r3, [pc, #168]	; (8009b34 <HAL_TIM_Encoder_Init+0x148>)
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	021b      	lsls	r3, r3, #8
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	011a      	lsls	r2, r3, #4
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	031b      	lsls	r3, r3, #12
 8009aac:	4313      	orrs	r3, r2
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009aba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	011b      	lsls	r3, r3, #4
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	fffebff8 	.word	0xfffebff8
 8009b2c:	fffffcfc 	.word	0xfffffcfc
 8009b30:	fffff3f3 	.word	0xfffff3f3
 8009b34:	ffff0f0f 	.word	0xffff0f0f

08009b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d122      	bne.n	8009b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d11b      	bne.n	8009b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0202 	mvn.w	r2, #2
 8009b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f905 	bl	8009d8a <HAL_TIM_IC_CaptureCallback>
 8009b80:	e005      	b.n	8009b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f8f7 	bl	8009d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f908 	bl	8009d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d122      	bne.n	8009be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d11b      	bne.n	8009be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0204 	mvn.w	r2, #4
 8009bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f8db 	bl	8009d8a <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f8cd 	bl	8009d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f8de 	bl	8009d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d122      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f003 0308 	and.w	r3, r3, #8
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d11b      	bne.n	8009c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f06f 0208 	mvn.w	r2, #8
 8009c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8b1 	bl	8009d8a <HAL_TIM_IC_CaptureCallback>
 8009c28:	e005      	b.n	8009c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f8a3 	bl	8009d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f8b4 	bl	8009d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b10      	cmp	r3, #16
 8009c48:	d122      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d11b      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f06f 0210 	mvn.w	r2, #16
 8009c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2208      	movs	r2, #8
 8009c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f887 	bl	8009d8a <HAL_TIM_IC_CaptureCallback>
 8009c7c:	e005      	b.n	8009c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f879 	bl	8009d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f88a 	bl	8009d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d10e      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d107      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0201 	mvn.w	r2, #1
 8009cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fa fa18 	bl	80040ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc6:	2b80      	cmp	r3, #128	; 0x80
 8009cc8:	d10e      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d107      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f9a8 	bl	800a038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf6:	d10e      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b80      	cmp	r3, #128	; 0x80
 8009d04:	d107      	bne.n	8009d16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f99b 	bl	800a04c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b40      	cmp	r3, #64	; 0x40
 8009d22:	d10e      	bne.n	8009d42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b40      	cmp	r3, #64	; 0x40
 8009d30:	d107      	bne.n	8009d42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f838 	bl	8009db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d10e      	bne.n	8009d6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f003 0320 	and.w	r3, r3, #32
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	d107      	bne.n	8009d6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f06f 0220 	mvn.w	r2, #32
 8009d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f95b 	bl	800a024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d7e:	bf00      	nop
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dba:	bf00      	nop
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a40      	ldr	r2, [pc, #256]	; (8009edc <TIM_Base_SetConfig+0x114>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d013      	beq.n	8009e08 <TIM_Base_SetConfig+0x40>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de6:	d00f      	beq.n	8009e08 <TIM_Base_SetConfig+0x40>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a3d      	ldr	r2, [pc, #244]	; (8009ee0 <TIM_Base_SetConfig+0x118>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00b      	beq.n	8009e08 <TIM_Base_SetConfig+0x40>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a3c      	ldr	r2, [pc, #240]	; (8009ee4 <TIM_Base_SetConfig+0x11c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d007      	beq.n	8009e08 <TIM_Base_SetConfig+0x40>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a3b      	ldr	r2, [pc, #236]	; (8009ee8 <TIM_Base_SetConfig+0x120>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_Base_SetConfig+0x40>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a3a      	ldr	r2, [pc, #232]	; (8009eec <TIM_Base_SetConfig+0x124>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d108      	bne.n	8009e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2f      	ldr	r2, [pc, #188]	; (8009edc <TIM_Base_SetConfig+0x114>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d02b      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e28:	d027      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a2c      	ldr	r2, [pc, #176]	; (8009ee0 <TIM_Base_SetConfig+0x118>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d023      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a2b      	ldr	r2, [pc, #172]	; (8009ee4 <TIM_Base_SetConfig+0x11c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d01f      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a2a      	ldr	r2, [pc, #168]	; (8009ee8 <TIM_Base_SetConfig+0x120>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d01b      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a29      	ldr	r2, [pc, #164]	; (8009eec <TIM_Base_SetConfig+0x124>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d017      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a28      	ldr	r2, [pc, #160]	; (8009ef0 <TIM_Base_SetConfig+0x128>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d013      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a27      	ldr	r2, [pc, #156]	; (8009ef4 <TIM_Base_SetConfig+0x12c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00f      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a26      	ldr	r2, [pc, #152]	; (8009ef8 <TIM_Base_SetConfig+0x130>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00b      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a25      	ldr	r2, [pc, #148]	; (8009efc <TIM_Base_SetConfig+0x134>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d007      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a24      	ldr	r2, [pc, #144]	; (8009f00 <TIM_Base_SetConfig+0x138>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d003      	beq.n	8009e7a <TIM_Base_SetConfig+0xb2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a23      	ldr	r2, [pc, #140]	; (8009f04 <TIM_Base_SetConfig+0x13c>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d108      	bne.n	8009e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <TIM_Base_SetConfig+0x114>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_Base_SetConfig+0xf8>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a0c      	ldr	r2, [pc, #48]	; (8009eec <TIM_Base_SetConfig+0x124>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d103      	bne.n	8009ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	615a      	str	r2, [r3, #20]
}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40010400 	.word	0x40010400
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40014400 	.word	0x40014400
 8009ef8:	40014800 	.word	0x40014800
 8009efc:	40001800 	.word	0x40001800
 8009f00:	40001c00 	.word	0x40001c00
 8009f04:	40002000 	.word	0x40002000

08009f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e06d      	b.n	8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a30      	ldr	r2, [pc, #192]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d004      	beq.n	8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a2f      	ldr	r2, [pc, #188]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d108      	bne.n	8009f66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a20      	ldr	r2, [pc, #128]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d022      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f92:	d01d      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1d      	ldr	r2, [pc, #116]	; (800a010 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d018      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1c      	ldr	r2, [pc, #112]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d013      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a1a      	ldr	r2, [pc, #104]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d00e      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a15      	ldr	r2, [pc, #84]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d009      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	; (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d004      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a15      	ldr	r2, [pc, #84]	; (800a020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10c      	bne.n	8009fea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	40010000 	.word	0x40010000
 800a00c:	40010400 	.word	0x40010400
 800a010:	40000400 	.word	0x40000400
 800a014:	40000800 	.word	0x40000800
 800a018:	40000c00 	.word	0x40000c00
 800a01c:	40014000 	.word	0x40014000
 800a020:	40001800 	.word	0x40001800

0800a024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e040      	b.n	800a0f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7fa fd58 	bl	8004b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2224      	movs	r2, #36	; 0x24
 800a08c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 0201 	bic.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fd32 	bl	800ab08 <UART_SetConfig>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e022      	b.n	800a0f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 ff8a 	bl	800afd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0201 	orr.w	r2, r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 f811 	bl	800b114 <UART_CheckIdleState>
 800a0f2:	4603      	mov	r3, r0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	; 0x28
 800a100:	af02      	add	r7, sp, #8
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	4613      	mov	r3, r2
 800a10a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a110:	2b20      	cmp	r3, #32
 800a112:	d171      	bne.n	800a1f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <HAL_UART_Transmit+0x24>
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e06a      	b.n	800a1fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2221      	movs	r2, #33	; 0x21
 800a130:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a132:	f7fa febb 	bl	8004eac <HAL_GetTick>
 800a136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	88fa      	ldrh	r2, [r7, #6]
 800a144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a150:	d108      	bne.n	800a164 <HAL_UART_Transmit+0x68>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e003      	b.n	800a16c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a16c:	e02c      	b.n	800a1c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2200      	movs	r2, #0
 800a176:	2180      	movs	r1, #128	; 0x80
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f001 f818 	bl	800b1ae <UART_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e038      	b.n	800a1fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a19c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	3302      	adds	r3, #2
 800a1a2:	61bb      	str	r3, [r7, #24]
 800a1a4:	e007      	b.n	800a1b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1cc      	bne.n	800a16e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2140      	movs	r1, #64	; 0x40
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 ffe5 	bl	800b1ae <UART_WaitOnFlagUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e005      	b.n	800a1fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a1f8:	2302      	movs	r3, #2
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	; 0x28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a216:	2b20      	cmp	r3, #32
 800a218:	d165      	bne.n	800a2e6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <HAL_UART_Transmit_DMA+0x22>
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e05e      	b.n	800a2e8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	88fa      	ldrh	r2, [r7, #6]
 800a234:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	88fa      	ldrh	r2, [r7, #6]
 800a23c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2221      	movs	r2, #33	; 0x21
 800a24c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a252:	2b00      	cmp	r3, #0
 800a254:	d027      	beq.n	800a2a6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25a:	4a25      	ldr	r2, [pc, #148]	; (800a2f0 <HAL_UART_Transmit_DMA+0xec>)
 800a25c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	4a24      	ldr	r2, [pc, #144]	; (800a2f4 <HAL_UART_Transmit_DMA+0xf0>)
 800a264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26a:	4a23      	ldr	r2, [pc, #140]	; (800a2f8 <HAL_UART_Transmit_DMA+0xf4>)
 800a26c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	2200      	movs	r2, #0
 800a274:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a27e:	4619      	mov	r1, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3328      	adds	r3, #40	; 0x28
 800a286:	461a      	mov	r2, r3
 800a288:	88fb      	ldrh	r3, [r7, #6]
 800a28a:	f7fb fe21 	bl	8005ed0 <HAL_DMA_Start_IT>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d008      	beq.n	800a2a6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2210      	movs	r2, #16
 800a298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2220      	movs	r2, #32
 800a2a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e020      	b.n	800a2e8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2240      	movs	r2, #64	; 0x40
 800a2ac:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3308      	adds	r3, #8
 800a2b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ce:	623a      	str	r2, [r7, #32]
 800a2d0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	69f9      	ldr	r1, [r7, #28]
 800a2d4:	6a3a      	ldr	r2, [r7, #32]
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e5      	bne.n	800a2ae <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e000      	b.n	800a2e8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a2e6:	2302      	movs	r3, #2
  }
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3728      	adds	r7, #40	; 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	0800b591 	.word	0x0800b591
 800a2f4:	0800b627 	.word	0x0800b627
 800a2f8:	0800b7a9 	.word	0x0800b7a9

0800a2fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a310:	2b20      	cmp	r3, #32
 800a312:	d132      	bne.n	800a37a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <HAL_UART_Receive_DMA+0x24>
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e02b      	b.n	800a37c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d018      	beq.n	800a36a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	613b      	str	r3, [r7, #16]
   return(result);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	623b      	str	r3, [r7, #32]
 800a358:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35a:	69f9      	ldr	r1, [r7, #28]
 800a35c:	6a3a      	ldr	r2, [r7, #32]
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	61bb      	str	r3, [r7, #24]
   return(result);
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1e6      	bne.n	800a338 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	461a      	mov	r2, r3
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 ffe3 	bl	800b33c <UART_Start_Receive_DMA>
 800a376:	4603      	mov	r3, r0
 800a378:	e000      	b.n	800a37c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a37a:	2302      	movs	r3, #2
  }
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3728      	adds	r7, #40	; 0x28
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b090      	sub	sp, #64	; 0x40
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a398:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a4:	2b80      	cmp	r3, #128	; 0x80
 800a3a6:	d139      	bne.n	800a41c <HAL_UART_DMAStop+0x98>
 800a3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3aa:	2b21      	cmp	r3, #33	; 0x21
 800a3ac:	d136      	bne.n	800a41c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	e853 3f00 	ldrex	r3, [r3]
 800a3bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e5      	bne.n	800a3ae <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d015      	beq.n	800a416 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fb fdce 	bl	8005f90 <HAL_DMA_Abort>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00d      	beq.n	800a416 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fb ffe2 	bl	80063c8 <HAL_DMA_GetError>
 800a404:	4603      	mov	r3, r0
 800a406:	2b20      	cmp	r3, #32
 800a408:	d105      	bne.n	800a416 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2210      	movs	r2, #16
 800a40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e044      	b.n	800a4a0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f001 f830 	bl	800b47c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a426:	2b40      	cmp	r3, #64	; 0x40
 800a428:	d139      	bne.n	800a49e <HAL_UART_DMAStop+0x11a>
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	2b22      	cmp	r3, #34	; 0x22
 800a42e:	d136      	bne.n	800a49e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a446:	633b      	str	r3, [r7, #48]	; 0x30
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a450:	61ba      	str	r2, [r7, #24]
 800a452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6979      	ldr	r1, [r7, #20]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	613b      	str	r3, [r7, #16]
   return(result);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e5      	bne.n	800a430 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d015      	beq.n	800a498 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a470:	4618      	mov	r0, r3
 800a472:	f7fb fd8d 	bl	8005f90 <HAL_DMA_Abort>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00d      	beq.n	800a498 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a480:	4618      	mov	r0, r3
 800a482:	f7fb ffa1 	bl	80063c8 <HAL_DMA_GetError>
 800a486:	4603      	mov	r3, r0
 800a488:	2b20      	cmp	r3, #32
 800a48a:	d105      	bne.n	800a498 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2210      	movs	r2, #16
 800a490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e003      	b.n	800a4a0 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 f815 	bl	800b4c8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3740      	adds	r7, #64	; 0x40
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b0ba      	sub	sp, #232	; 0xe8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a4ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a4d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d115      	bne.n	800a510 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e8:	f003 0320 	and.w	r3, r3, #32
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00f      	beq.n	800a510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f4:	f003 0320 	and.w	r3, r3, #32
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d009      	beq.n	800a510 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 82ac 	beq.w	800aa5e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	4798      	blx	r3
      }
      return;
 800a50e:	e2a6      	b.n	800aa5e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 8117 	beq.w	800a748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a52a:	4b85      	ldr	r3, [pc, #532]	; (800a740 <HAL_UART_IRQHandler+0x298>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 810a 	beq.w	800a748 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d011      	beq.n	800a564 <HAL_UART_IRQHandler+0xbc>
 800a540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2201      	movs	r2, #1
 800a552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a55a:	f043 0201 	orr.w	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a568:	f003 0302 	and.w	r3, r3, #2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d011      	beq.n	800a594 <HAL_UART_IRQHandler+0xec>
 800a570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00b      	beq.n	800a594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2202      	movs	r2, #2
 800a582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a58a:	f043 0204 	orr.w	r2, r3, #4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d011      	beq.n	800a5c4 <HAL_UART_IRQHandler+0x11c>
 800a5a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2204      	movs	r2, #4
 800a5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ba:	f043 0202 	orr.w	r2, r3, #2
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5c8:	f003 0308 	and.w	r3, r3, #8
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d017      	beq.n	800a600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5d4:	f003 0320 	and.w	r3, r3, #32
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d105      	bne.n	800a5e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5f6:	f043 0208 	orr.w	r2, r3, #8
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d012      	beq.n	800a632 <HAL_UART_IRQHandler+0x18a>
 800a60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00c      	beq.n	800a632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a628:	f043 0220 	orr.w	r2, r3, #32
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 8212 	beq.w	800aa62 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a642:	f003 0320 	and.w	r3, r3, #32
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00d      	beq.n	800a666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a66c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67a:	2b40      	cmp	r3, #64	; 0x40
 800a67c:	d005      	beq.n	800a68a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a67e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a686:	2b00      	cmp	r3, #0
 800a688:	d04f      	beq.n	800a72a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 ff1c 	bl	800b4c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69a:	2b40      	cmp	r3, #64	; 0x40
 800a69c:	d141      	bne.n	800a722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6ac:	e853 3f00 	ldrex	r3, [r3]
 800a6b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a6ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a6e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1d9      	bne.n	800a69e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d013      	beq.n	800a71a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f6:	4a13      	ldr	r2, [pc, #76]	; (800a744 <HAL_UART_IRQHandler+0x29c>)
 800a6f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fb fcb6 	bl	8006070 <HAL_DMA_Abort_IT>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d017      	beq.n	800a73a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a714:	4610      	mov	r0, r2
 800a716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a718:	e00f      	b.n	800a73a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f9d4 	bl	800aac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a720:	e00b      	b.n	800a73a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f9d0 	bl	800aac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a728:	e007      	b.n	800a73a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f9cc 	bl	800aac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a738:	e193      	b.n	800aa62 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a73a:	bf00      	nop
    return;
 800a73c:	e191      	b.n	800aa62 <HAL_UART_IRQHandler+0x5ba>
 800a73e:	bf00      	nop
 800a740:	04000120 	.word	0x04000120
 800a744:	0800b827 	.word	0x0800b827

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	f040 814c 	bne.w	800a9ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8145 	beq.w	800a9ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a764:	f003 0310 	and.w	r3, r3, #16
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 813e 	beq.w	800a9ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2210      	movs	r2, #16
 800a774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a780:	2b40      	cmp	r3, #64	; 0x40
 800a782:	f040 80b6 	bne.w	800a8f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 8165 	beq.w	800aa66 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	f080 815d 	bcs.w	800aa66 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c0:	f000 8086 	beq.w	800a8d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7d0:	e853 3f00 	ldrex	r3, [r3]
 800a7d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a7d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a7f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a7fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1da      	bne.n	800a7c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3308      	adds	r3, #8
 800a814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a81e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a820:	f023 0301 	bic.w	r3, r3, #1
 800a824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3308      	adds	r3, #8
 800a82e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a83a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e1      	bne.n	800a80e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3308      	adds	r3, #8
 800a86a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a86e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a87c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e3      	bne.n	800a84a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2220      	movs	r2, #32
 800a886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a0:	f023 0310 	bic.w	r3, r3, #16
 800a8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8ba:	e841 2300 	strex	r3, r2, [r1]
 800a8be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e4      	bne.n	800a890 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fb fb60 	bl	8005f90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f8f6 	bl	800aadc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8f0:	e0b9      	b.n	800aa66 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 80ab 	beq.w	800aa6a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800a914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 80a6 	beq.w	800aa6a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a940:	647b      	str	r3, [r7, #68]	; 0x44
 800a942:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e4      	bne.n	800a91e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	623b      	str	r3, [r7, #32]
   return(result);
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	f023 0301 	bic.w	r3, r3, #1
 800a96a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a978:	633a      	str	r2, [r7, #48]	; 0x30
 800a97a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a980:	e841 2300 	strex	r3, r2, [r1]
 800a984:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e3      	bne.n	800a954 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f023 0310 	bic.w	r3, r3, #16
 800a9b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	69b9      	ldr	r1, [r7, #24]
 800a9c8:	69fa      	ldr	r2, [r7, #28]
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e4      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f87a 	bl	800aadc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9e8:	e03f      	b.n	800aa6a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00e      	beq.n	800aa14 <HAL_UART_IRQHandler+0x56c>
 800a9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aa0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f871 	bl	800aaf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa12:	e02d      	b.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aa14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aa20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d008      	beq.n	800aa3e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d01c      	beq.n	800aa6e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	4798      	blx	r3
    }
    return;
 800aa3c:	e017      	b.n	800aa6e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d012      	beq.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
 800aa4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00c      	beq.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fefb 	bl	800b852 <UART_EndTransmit_IT>
    return;
 800aa5c:	e008      	b.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
      return;
 800aa5e:	bf00      	nop
 800aa60:	e006      	b.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
    return;
 800aa62:	bf00      	nop
 800aa64:	e004      	b.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
      return;
 800aa66:	bf00      	nop
 800aa68:	e002      	b.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
      return;
 800aa6a:	bf00      	nop
 800aa6c:	e000      	b.n	800aa70 <HAL_UART_IRQHandler+0x5c8>
    return;
 800aa6e:	bf00      	nop
  }

}
 800aa70:	37e8      	adds	r7, #232	; 0xe8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop

0800aa78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	689a      	ldr	r2, [r3, #8]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	4ba6      	ldr	r3, [pc, #664]	; (800adcc <UART_SetConfig+0x2c4>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6812      	ldr	r2, [r2, #0]
 800ab3a:	6979      	ldr	r1, [r7, #20]
 800ab3c:	430b      	orrs	r3, r1
 800ab3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a94      	ldr	r2, [pc, #592]	; (800add0 <UART_SetConfig+0x2c8>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d120      	bne.n	800abc6 <UART_SetConfig+0xbe>
 800ab84:	4b93      	ldr	r3, [pc, #588]	; (800add4 <UART_SetConfig+0x2cc>)
 800ab86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d816      	bhi.n	800abc0 <UART_SetConfig+0xb8>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <UART_SetConfig+0x90>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abb5 	.word	0x0800abb5
 800aba0:	0800abaf 	.word	0x0800abaf
 800aba4:	0800abbb 	.word	0x0800abbb
 800aba8:	2301      	movs	r3, #1
 800abaa:	77fb      	strb	r3, [r7, #31]
 800abac:	e150      	b.n	800ae50 <UART_SetConfig+0x348>
 800abae:	2302      	movs	r3, #2
 800abb0:	77fb      	strb	r3, [r7, #31]
 800abb2:	e14d      	b.n	800ae50 <UART_SetConfig+0x348>
 800abb4:	2304      	movs	r3, #4
 800abb6:	77fb      	strb	r3, [r7, #31]
 800abb8:	e14a      	b.n	800ae50 <UART_SetConfig+0x348>
 800abba:	2308      	movs	r3, #8
 800abbc:	77fb      	strb	r3, [r7, #31]
 800abbe:	e147      	b.n	800ae50 <UART_SetConfig+0x348>
 800abc0:	2310      	movs	r3, #16
 800abc2:	77fb      	strb	r3, [r7, #31]
 800abc4:	e144      	b.n	800ae50 <UART_SetConfig+0x348>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a83      	ldr	r2, [pc, #524]	; (800add8 <UART_SetConfig+0x2d0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d132      	bne.n	800ac36 <UART_SetConfig+0x12e>
 800abd0:	4b80      	ldr	r3, [pc, #512]	; (800add4 <UART_SetConfig+0x2cc>)
 800abd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd6:	f003 030c 	and.w	r3, r3, #12
 800abda:	2b0c      	cmp	r3, #12
 800abdc:	d828      	bhi.n	800ac30 <UART_SetConfig+0x128>
 800abde:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <UART_SetConfig+0xdc>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800ac19 	.word	0x0800ac19
 800abe8:	0800ac31 	.word	0x0800ac31
 800abec:	0800ac31 	.word	0x0800ac31
 800abf0:	0800ac31 	.word	0x0800ac31
 800abf4:	0800ac25 	.word	0x0800ac25
 800abf8:	0800ac31 	.word	0x0800ac31
 800abfc:	0800ac31 	.word	0x0800ac31
 800ac00:	0800ac31 	.word	0x0800ac31
 800ac04:	0800ac1f 	.word	0x0800ac1f
 800ac08:	0800ac31 	.word	0x0800ac31
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac31 	.word	0x0800ac31
 800ac14:	0800ac2b 	.word	0x0800ac2b
 800ac18:	2300      	movs	r3, #0
 800ac1a:	77fb      	strb	r3, [r7, #31]
 800ac1c:	e118      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac1e:	2302      	movs	r3, #2
 800ac20:	77fb      	strb	r3, [r7, #31]
 800ac22:	e115      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac24:	2304      	movs	r3, #4
 800ac26:	77fb      	strb	r3, [r7, #31]
 800ac28:	e112      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac2a:	2308      	movs	r3, #8
 800ac2c:	77fb      	strb	r3, [r7, #31]
 800ac2e:	e10f      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac30:	2310      	movs	r3, #16
 800ac32:	77fb      	strb	r3, [r7, #31]
 800ac34:	e10c      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a68      	ldr	r2, [pc, #416]	; (800addc <UART_SetConfig+0x2d4>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d120      	bne.n	800ac82 <UART_SetConfig+0x17a>
 800ac40:	4b64      	ldr	r3, [pc, #400]	; (800add4 <UART_SetConfig+0x2cc>)
 800ac42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac4a:	2b30      	cmp	r3, #48	; 0x30
 800ac4c:	d013      	beq.n	800ac76 <UART_SetConfig+0x16e>
 800ac4e:	2b30      	cmp	r3, #48	; 0x30
 800ac50:	d814      	bhi.n	800ac7c <UART_SetConfig+0x174>
 800ac52:	2b20      	cmp	r3, #32
 800ac54:	d009      	beq.n	800ac6a <UART_SetConfig+0x162>
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	d810      	bhi.n	800ac7c <UART_SetConfig+0x174>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <UART_SetConfig+0x15c>
 800ac5e:	2b10      	cmp	r3, #16
 800ac60:	d006      	beq.n	800ac70 <UART_SetConfig+0x168>
 800ac62:	e00b      	b.n	800ac7c <UART_SetConfig+0x174>
 800ac64:	2300      	movs	r3, #0
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e0f2      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	77fb      	strb	r3, [r7, #31]
 800ac6e:	e0ef      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac70:	2304      	movs	r3, #4
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	e0ec      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac76:	2308      	movs	r3, #8
 800ac78:	77fb      	strb	r3, [r7, #31]
 800ac7a:	e0e9      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e0e6      	b.n	800ae50 <UART_SetConfig+0x348>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a56      	ldr	r2, [pc, #344]	; (800ade0 <UART_SetConfig+0x2d8>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d120      	bne.n	800acce <UART_SetConfig+0x1c6>
 800ac8c:	4b51      	ldr	r3, [pc, #324]	; (800add4 <UART_SetConfig+0x2cc>)
 800ac8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac96:	2bc0      	cmp	r3, #192	; 0xc0
 800ac98:	d013      	beq.n	800acc2 <UART_SetConfig+0x1ba>
 800ac9a:	2bc0      	cmp	r3, #192	; 0xc0
 800ac9c:	d814      	bhi.n	800acc8 <UART_SetConfig+0x1c0>
 800ac9e:	2b80      	cmp	r3, #128	; 0x80
 800aca0:	d009      	beq.n	800acb6 <UART_SetConfig+0x1ae>
 800aca2:	2b80      	cmp	r3, #128	; 0x80
 800aca4:	d810      	bhi.n	800acc8 <UART_SetConfig+0x1c0>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <UART_SetConfig+0x1a8>
 800acaa:	2b40      	cmp	r3, #64	; 0x40
 800acac:	d006      	beq.n	800acbc <UART_SetConfig+0x1b4>
 800acae:	e00b      	b.n	800acc8 <UART_SetConfig+0x1c0>
 800acb0:	2300      	movs	r3, #0
 800acb2:	77fb      	strb	r3, [r7, #31]
 800acb4:	e0cc      	b.n	800ae50 <UART_SetConfig+0x348>
 800acb6:	2302      	movs	r3, #2
 800acb8:	77fb      	strb	r3, [r7, #31]
 800acba:	e0c9      	b.n	800ae50 <UART_SetConfig+0x348>
 800acbc:	2304      	movs	r3, #4
 800acbe:	77fb      	strb	r3, [r7, #31]
 800acc0:	e0c6      	b.n	800ae50 <UART_SetConfig+0x348>
 800acc2:	2308      	movs	r3, #8
 800acc4:	77fb      	strb	r3, [r7, #31]
 800acc6:	e0c3      	b.n	800ae50 <UART_SetConfig+0x348>
 800acc8:	2310      	movs	r3, #16
 800acca:	77fb      	strb	r3, [r7, #31]
 800accc:	e0c0      	b.n	800ae50 <UART_SetConfig+0x348>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a44      	ldr	r2, [pc, #272]	; (800ade4 <UART_SetConfig+0x2dc>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d125      	bne.n	800ad24 <UART_SetConfig+0x21c>
 800acd8:	4b3e      	ldr	r3, [pc, #248]	; (800add4 <UART_SetConfig+0x2cc>)
 800acda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ace2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ace6:	d017      	beq.n	800ad18 <UART_SetConfig+0x210>
 800ace8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acec:	d817      	bhi.n	800ad1e <UART_SetConfig+0x216>
 800acee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf2:	d00b      	beq.n	800ad0c <UART_SetConfig+0x204>
 800acf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf8:	d811      	bhi.n	800ad1e <UART_SetConfig+0x216>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <UART_SetConfig+0x1fe>
 800acfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad02:	d006      	beq.n	800ad12 <UART_SetConfig+0x20a>
 800ad04:	e00b      	b.n	800ad1e <UART_SetConfig+0x216>
 800ad06:	2300      	movs	r3, #0
 800ad08:	77fb      	strb	r3, [r7, #31]
 800ad0a:	e0a1      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	77fb      	strb	r3, [r7, #31]
 800ad10:	e09e      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad12:	2304      	movs	r3, #4
 800ad14:	77fb      	strb	r3, [r7, #31]
 800ad16:	e09b      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad18:	2308      	movs	r3, #8
 800ad1a:	77fb      	strb	r3, [r7, #31]
 800ad1c:	e098      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad1e:	2310      	movs	r3, #16
 800ad20:	77fb      	strb	r3, [r7, #31]
 800ad22:	e095      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a2f      	ldr	r2, [pc, #188]	; (800ade8 <UART_SetConfig+0x2e0>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d125      	bne.n	800ad7a <UART_SetConfig+0x272>
 800ad2e:	4b29      	ldr	r3, [pc, #164]	; (800add4 <UART_SetConfig+0x2cc>)
 800ad30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad3c:	d017      	beq.n	800ad6e <UART_SetConfig+0x266>
 800ad3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad42:	d817      	bhi.n	800ad74 <UART_SetConfig+0x26c>
 800ad44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad48:	d00b      	beq.n	800ad62 <UART_SetConfig+0x25a>
 800ad4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad4e:	d811      	bhi.n	800ad74 <UART_SetConfig+0x26c>
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <UART_SetConfig+0x254>
 800ad54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad58:	d006      	beq.n	800ad68 <UART_SetConfig+0x260>
 800ad5a:	e00b      	b.n	800ad74 <UART_SetConfig+0x26c>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	77fb      	strb	r3, [r7, #31]
 800ad60:	e076      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad62:	2302      	movs	r3, #2
 800ad64:	77fb      	strb	r3, [r7, #31]
 800ad66:	e073      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad68:	2304      	movs	r3, #4
 800ad6a:	77fb      	strb	r3, [r7, #31]
 800ad6c:	e070      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad6e:	2308      	movs	r3, #8
 800ad70:	77fb      	strb	r3, [r7, #31]
 800ad72:	e06d      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad74:	2310      	movs	r3, #16
 800ad76:	77fb      	strb	r3, [r7, #31]
 800ad78:	e06a      	b.n	800ae50 <UART_SetConfig+0x348>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a1b      	ldr	r2, [pc, #108]	; (800adec <UART_SetConfig+0x2e4>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d138      	bne.n	800adf6 <UART_SetConfig+0x2ee>
 800ad84:	4b13      	ldr	r3, [pc, #76]	; (800add4 <UART_SetConfig+0x2cc>)
 800ad86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ad8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad92:	d017      	beq.n	800adc4 <UART_SetConfig+0x2bc>
 800ad94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad98:	d82a      	bhi.n	800adf0 <UART_SetConfig+0x2e8>
 800ad9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9e:	d00b      	beq.n	800adb8 <UART_SetConfig+0x2b0>
 800ada0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ada4:	d824      	bhi.n	800adf0 <UART_SetConfig+0x2e8>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <UART_SetConfig+0x2aa>
 800adaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adae:	d006      	beq.n	800adbe <UART_SetConfig+0x2b6>
 800adb0:	e01e      	b.n	800adf0 <UART_SetConfig+0x2e8>
 800adb2:	2300      	movs	r3, #0
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e04b      	b.n	800ae50 <UART_SetConfig+0x348>
 800adb8:	2302      	movs	r3, #2
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	e048      	b.n	800ae50 <UART_SetConfig+0x348>
 800adbe:	2304      	movs	r3, #4
 800adc0:	77fb      	strb	r3, [r7, #31]
 800adc2:	e045      	b.n	800ae50 <UART_SetConfig+0x348>
 800adc4:	2308      	movs	r3, #8
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	e042      	b.n	800ae50 <UART_SetConfig+0x348>
 800adca:	bf00      	nop
 800adcc:	efff69f3 	.word	0xefff69f3
 800add0:	40011000 	.word	0x40011000
 800add4:	40023800 	.word	0x40023800
 800add8:	40004400 	.word	0x40004400
 800addc:	40004800 	.word	0x40004800
 800ade0:	40004c00 	.word	0x40004c00
 800ade4:	40005000 	.word	0x40005000
 800ade8:	40011400 	.word	0x40011400
 800adec:	40007800 	.word	0x40007800
 800adf0:	2310      	movs	r3, #16
 800adf2:	77fb      	strb	r3, [r7, #31]
 800adf4:	e02c      	b.n	800ae50 <UART_SetConfig+0x348>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a72      	ldr	r2, [pc, #456]	; (800afc4 <UART_SetConfig+0x4bc>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d125      	bne.n	800ae4c <UART_SetConfig+0x344>
 800ae00:	4b71      	ldr	r3, [pc, #452]	; (800afc8 <UART_SetConfig+0x4c0>)
 800ae02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae0e:	d017      	beq.n	800ae40 <UART_SetConfig+0x338>
 800ae10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae14:	d817      	bhi.n	800ae46 <UART_SetConfig+0x33e>
 800ae16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae1a:	d00b      	beq.n	800ae34 <UART_SetConfig+0x32c>
 800ae1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae20:	d811      	bhi.n	800ae46 <UART_SetConfig+0x33e>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <UART_SetConfig+0x326>
 800ae26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae2a:	d006      	beq.n	800ae3a <UART_SetConfig+0x332>
 800ae2c:	e00b      	b.n	800ae46 <UART_SetConfig+0x33e>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	77fb      	strb	r3, [r7, #31]
 800ae32:	e00d      	b.n	800ae50 <UART_SetConfig+0x348>
 800ae34:	2302      	movs	r3, #2
 800ae36:	77fb      	strb	r3, [r7, #31]
 800ae38:	e00a      	b.n	800ae50 <UART_SetConfig+0x348>
 800ae3a:	2304      	movs	r3, #4
 800ae3c:	77fb      	strb	r3, [r7, #31]
 800ae3e:	e007      	b.n	800ae50 <UART_SetConfig+0x348>
 800ae40:	2308      	movs	r3, #8
 800ae42:	77fb      	strb	r3, [r7, #31]
 800ae44:	e004      	b.n	800ae50 <UART_SetConfig+0x348>
 800ae46:	2310      	movs	r3, #16
 800ae48:	77fb      	strb	r3, [r7, #31]
 800ae4a:	e001      	b.n	800ae50 <UART_SetConfig+0x348>
 800ae4c:	2310      	movs	r3, #16
 800ae4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	69db      	ldr	r3, [r3, #28]
 800ae54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae58:	d15b      	bne.n	800af12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ae5a:	7ffb      	ldrb	r3, [r7, #31]
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d828      	bhi.n	800aeb2 <UART_SetConfig+0x3aa>
 800ae60:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <UART_SetConfig+0x360>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800ae8d 	.word	0x0800ae8d
 800ae6c:	0800ae95 	.word	0x0800ae95
 800ae70:	0800ae9d 	.word	0x0800ae9d
 800ae74:	0800aeb3 	.word	0x0800aeb3
 800ae78:	0800aea3 	.word	0x0800aea3
 800ae7c:	0800aeb3 	.word	0x0800aeb3
 800ae80:	0800aeb3 	.word	0x0800aeb3
 800ae84:	0800aeb3 	.word	0x0800aeb3
 800ae88:	0800aeab 	.word	0x0800aeab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae8c:	f7fe f852 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 800ae90:	61b8      	str	r0, [r7, #24]
        break;
 800ae92:	e013      	b.n	800aebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae94:	f7fe f862 	bl	8008f5c <HAL_RCC_GetPCLK2Freq>
 800ae98:	61b8      	str	r0, [r7, #24]
        break;
 800ae9a:	e00f      	b.n	800aebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae9c:	4b4b      	ldr	r3, [pc, #300]	; (800afcc <UART_SetConfig+0x4c4>)
 800ae9e:	61bb      	str	r3, [r7, #24]
        break;
 800aea0:	e00c      	b.n	800aebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aea2:	f7fd ff35 	bl	8008d10 <HAL_RCC_GetSysClockFreq>
 800aea6:	61b8      	str	r0, [r7, #24]
        break;
 800aea8:	e008      	b.n	800aebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeae:	61bb      	str	r3, [r7, #24]
        break;
 800aeb0:	e004      	b.n	800aebc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	77bb      	strb	r3, [r7, #30]
        break;
 800aeba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d074      	beq.n	800afac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	005a      	lsls	r2, r3, #1
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	085b      	lsrs	r3, r3, #1
 800aecc:	441a      	add	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	2b0f      	cmp	r3, #15
 800aedc:	d916      	bls.n	800af0c <UART_SetConfig+0x404>
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee4:	d212      	bcs.n	800af0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f023 030f 	bic.w	r3, r3, #15
 800aeee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	4313      	orrs	r3, r2
 800af00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	89fa      	ldrh	r2, [r7, #14]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	e04f      	b.n	800afac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	77bb      	strb	r3, [r7, #30]
 800af10:	e04c      	b.n	800afac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af12:	7ffb      	ldrb	r3, [r7, #31]
 800af14:	2b08      	cmp	r3, #8
 800af16:	d828      	bhi.n	800af6a <UART_SetConfig+0x462>
 800af18:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <UART_SetConfig+0x418>)
 800af1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1e:	bf00      	nop
 800af20:	0800af45 	.word	0x0800af45
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	0800af6b 	.word	0x0800af6b
 800af30:	0800af5b 	.word	0x0800af5b
 800af34:	0800af6b 	.word	0x0800af6b
 800af38:	0800af6b 	.word	0x0800af6b
 800af3c:	0800af6b 	.word	0x0800af6b
 800af40:	0800af63 	.word	0x0800af63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af44:	f7fd fff6 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 800af48:	61b8      	str	r0, [r7, #24]
        break;
 800af4a:	e013      	b.n	800af74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af4c:	f7fe f806 	bl	8008f5c <HAL_RCC_GetPCLK2Freq>
 800af50:	61b8      	str	r0, [r7, #24]
        break;
 800af52:	e00f      	b.n	800af74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af54:	4b1d      	ldr	r3, [pc, #116]	; (800afcc <UART_SetConfig+0x4c4>)
 800af56:	61bb      	str	r3, [r7, #24]
        break;
 800af58:	e00c      	b.n	800af74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af5a:	f7fd fed9 	bl	8008d10 <HAL_RCC_GetSysClockFreq>
 800af5e:	61b8      	str	r0, [r7, #24]
        break;
 800af60:	e008      	b.n	800af74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af66:	61bb      	str	r3, [r7, #24]
        break;
 800af68:	e004      	b.n	800af74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	77bb      	strb	r3, [r7, #30]
        break;
 800af72:	bf00      	nop
    }

    if (pclk != 0U)
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d018      	beq.n	800afac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	085a      	lsrs	r2, r3, #1
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	441a      	add	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b0f      	cmp	r3, #15
 800af92:	d909      	bls.n	800afa8 <UART_SetConfig+0x4a0>
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af9a:	d205      	bcs.n	800afa8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	e001      	b.n	800afac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800afb8:	7fbb      	ldrb	r3, [r7, #30]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3720      	adds	r7, #32
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	40007c00 	.word	0x40007c00
 800afc8:	40023800 	.word	0x40023800
 800afcc:	00f42400 	.word	0x00f42400

0800afd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00a      	beq.n	800b03e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	f003 0308 	and.w	r3, r3, #8
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	f003 0310 	and.w	r3, r3, #16
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01a      	beq.n	800b0e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ce:	d10a      	bne.n	800b0e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af02      	add	r7, sp, #8
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b124:	f7f9 fec2 	bl	8004eac <HAL_GetTick>
 800b128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0308 	and.w	r3, r3, #8
 800b134:	2b08      	cmp	r3, #8
 800b136:	d10e      	bne.n	800b156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f831 	bl	800b1ae <UART_WaitOnFlagUntilTimeout>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e027      	b.n	800b1a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b04      	cmp	r3, #4
 800b162:	d10e      	bne.n	800b182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f81b 	bl	800b1ae <UART_WaitOnFlagUntilTimeout>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b17e:	2303      	movs	r3, #3
 800b180:	e011      	b.n	800b1a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2220      	movs	r2, #32
 800b186:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2220      	movs	r2, #32
 800b18c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b09c      	sub	sp, #112	; 0x70
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	603b      	str	r3, [r7, #0]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1be:	e0a7      	b.n	800b310 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1c6:	f000 80a3 	beq.w	800b310 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ca:	f7f9 fe6f 	bl	8004eac <HAL_GetTick>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d302      	bcc.n	800b1e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d13f      	bne.n	800b260 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1f4:	667b      	str	r3, [r7, #100]	; 0x64
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b200:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b20c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e6      	bne.n	800b1e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3308      	adds	r3, #8
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21c:	e853 3f00 	ldrex	r3, [r3]
 800b220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	663b      	str	r3, [r7, #96]	; 0x60
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3308      	adds	r3, #8
 800b230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b232:	64ba      	str	r2, [r7, #72]	; 0x48
 800b234:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b23a:	e841 2300 	strex	r3, r2, [r1]
 800b23e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1e5      	bne.n	800b212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2220      	movs	r2, #32
 800b250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e068      	b.n	800b332 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0304 	and.w	r3, r3, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d050      	beq.n	800b310 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b27c:	d148      	bne.n	800b310 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b286:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b29c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b2a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e6      	bne.n	800b288 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	e853 3f00 	ldrex	r3, [r3]
 800b2c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f023 0301 	bic.w	r3, r3, #1
 800b2d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2da:	623a      	str	r2, [r7, #32]
 800b2dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2de:	69f9      	ldr	r1, [r7, #28]
 800b2e0:	6a3a      	ldr	r2, [r7, #32]
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e5      	bne.n	800b2ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2220      	movs	r2, #32
 800b2f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2220      	movs	r2, #32
 800b2f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e010      	b.n	800b332 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69da      	ldr	r2, [r3, #28]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	4013      	ands	r3, r2
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	bf0c      	ite	eq
 800b320:	2301      	moveq	r3, #1
 800b322:	2300      	movne	r3, #0
 800b324:	b2db      	uxtb	r3, r3
 800b326:	461a      	mov	r2, r3
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	f43f af48 	beq.w	800b1c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3770      	adds	r7, #112	; 0x70
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b096      	sub	sp, #88	; 0x58
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4613      	mov	r3, r2
 800b348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	88fa      	ldrh	r2, [r7, #6]
 800b354:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2222      	movs	r2, #34	; 0x22
 800b364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d028      	beq.n	800b3c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b374:	4a3e      	ldr	r2, [pc, #248]	; (800b470 <UART_Start_Receive_DMA+0x134>)
 800b376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37c:	4a3d      	ldr	r2, [pc, #244]	; (800b474 <UART_Start_Receive_DMA+0x138>)
 800b37e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b384:	4a3c      	ldr	r2, [pc, #240]	; (800b478 <UART_Start_Receive_DMA+0x13c>)
 800b386:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b38c:	2200      	movs	r2, #0
 800b38e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3324      	adds	r3, #36	; 0x24
 800b39a:	4619      	mov	r1, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	88fb      	ldrh	r3, [r7, #6]
 800b3a4:	f7fa fd94 	bl	8005ed0 <HAL_DMA_Start_IT>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d009      	beq.n	800b3c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2210      	movs	r2, #16
 800b3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2220      	movs	r2, #32
 800b3ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e051      	b.n	800b466 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d2:	e853 3f00 	ldrex	r3, [r3]
 800b3d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3de:	657b      	str	r3, [r7, #84]	; 0x54
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3f0:	e841 2300 	strex	r3, r2, [r1]
 800b3f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e6      	bne.n	800b3ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	e853 3f00 	ldrex	r3, [r3]
 800b40a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	653b      	str	r3, [r7, #80]	; 0x50
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3308      	adds	r3, #8
 800b41a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b41c:	637a      	str	r2, [r7, #52]	; 0x34
 800b41e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b424:	e841 2300 	strex	r3, r2, [r1]
 800b428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e5      	bne.n	800b3fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3308      	adds	r3, #8
 800b436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	613b      	str	r3, [r7, #16]
   return(result);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b446:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b450:	623a      	str	r2, [r7, #32]
 800b452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	69f9      	ldr	r1, [r7, #28]
 800b456:	6a3a      	ldr	r2, [r7, #32]
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e5      	bne.n	800b430 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3758      	adds	r7, #88	; 0x58
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	0800b643 	.word	0x0800b643
 800b474:	0800b76b 	.word	0x0800b76b
 800b478:	0800b7a9 	.word	0x0800b7a9

0800b47c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b089      	sub	sp, #36	; 0x24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	e853 3f00 	ldrex	r3, [r3]
 800b490:	60bb      	str	r3, [r7, #8]
   return(result);
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	61bb      	str	r3, [r7, #24]
 800b4a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a6:	6979      	ldr	r1, [r7, #20]
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e6      	bne.n	800b484 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b4bc:	bf00      	nop
 800b4be:	3724      	adds	r7, #36	; 0x24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b095      	sub	sp, #84	; 0x54
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800b4f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4f6:	e841 2300 	strex	r3, r2, [r1]
 800b4fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1e6      	bne.n	800b4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3308      	adds	r3, #8
 800b508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	61fb      	str	r3, [r7, #28]
   return(result);
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	f023 0301 	bic.w	r3, r3, #1
 800b518:	64bb      	str	r3, [r7, #72]	; 0x48
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b522:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e5      	bne.n	800b502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d118      	bne.n	800b570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f023 0310 	bic.w	r3, r3, #16
 800b552:	647b      	str	r3, [r7, #68]	; 0x44
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	461a      	mov	r2, r3
 800b55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b55c:	61bb      	str	r3, [r7, #24]
 800b55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	6979      	ldr	r1, [r7, #20]
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	613b      	str	r3, [r7, #16]
   return(result);
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e6      	bne.n	800b53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b584:	bf00      	nop
 800b586:	3754      	adds	r7, #84	; 0x54
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b090      	sub	sp, #64	; 0x40
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a6:	d037      	beq.n	800b618 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	623b      	str	r3, [r7, #32]
   return(result);
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5d0:	633a      	str	r2, [r7, #48]	; 0x30
 800b5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e5      	bne.n	800b5b0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b602:	61fb      	str	r3, [r7, #28]
 800b604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	69b9      	ldr	r1, [r7, #24]
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	617b      	str	r3, [r7, #20]
   return(result);
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e6      	bne.n	800b5e4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b616:	e002      	b.n	800b61e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b61a:	f7ff fa2d 	bl	800aa78 <HAL_UART_TxCpltCallback>
}
 800b61e:	bf00      	nop
 800b620:	3740      	adds	r7, #64	; 0x40
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b632:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f7ff fa29 	bl	800aa8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b09c      	sub	sp, #112	; 0x70
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b658:	d071      	beq.n	800b73e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b676:	66bb      	str	r3, [r7, #104]	; 0x68
 800b678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b680:	65bb      	str	r3, [r7, #88]	; 0x58
 800b682:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b688:	e841 2300 	strex	r3, r2, [r1]
 800b68c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1e6      	bne.n	800b662 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3308      	adds	r3, #8
 800b69a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a6:	f023 0301 	bic.w	r3, r3, #1
 800b6aa:	667b      	str	r3, [r7, #100]	; 0x64
 800b6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b6b4:	647a      	str	r2, [r7, #68]	; 0x44
 800b6b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	e853 3f00 	ldrex	r3, [r3]
 800b6d6:	623b      	str	r3, [r7, #32]
   return(result);
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6de:	663b      	str	r3, [r7, #96]	; 0x60
 800b6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6e8:	633a      	str	r2, [r7, #48]	; 0x30
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f0:	e841 2300 	strex	r3, r2, [r1]
 800b6f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1e5      	bne.n	800b6c8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6fe:	2220      	movs	r2, #32
 800b700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d118      	bne.n	800b73e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	e853 3f00 	ldrex	r3, [r3]
 800b718:	60fb      	str	r3, [r7, #12]
   return(result);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f023 0310 	bic.w	r3, r3, #16
 800b720:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b72a:	61fb      	str	r3, [r7, #28]
 800b72c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	69b9      	ldr	r1, [r7, #24]
 800b730:	69fa      	ldr	r2, [r7, #28]
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	617b      	str	r3, [r7, #20]
   return(result);
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e6      	bne.n	800b70c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b73e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b740:	2200      	movs	r2, #0
 800b742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d107      	bne.n	800b75c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b752:	4619      	mov	r1, r3
 800b754:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b756:	f7ff f9c1 	bl	800aadc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b75a:	e002      	b.n	800b762 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b75c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b75e:	f7ff f99f 	bl	800aaa0 <HAL_UART_RxCpltCallback>
}
 800b762:	bf00      	nop
 800b764:	3770      	adds	r7, #112	; 0x70
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b776:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2201      	movs	r2, #1
 800b77c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b782:	2b01      	cmp	r3, #1
 800b784:	d109      	bne.n	800b79a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b78c:	085b      	lsrs	r3, r3, #1
 800b78e:	b29b      	uxth	r3, r3
 800b790:	4619      	mov	r1, r3
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f7ff f9a2 	bl	800aadc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b798:	e002      	b.n	800b7a0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff f98a 	bl	800aab4 <HAL_UART_RxHalfCpltCallback>
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ce:	2b80      	cmp	r3, #128	; 0x80
 800b7d0:	d109      	bne.n	800b7e6 <UART_DMAError+0x3e>
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	2b21      	cmp	r3, #33	; 0x21
 800b7d6:	d106      	bne.n	800b7e6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b7e0:	6978      	ldr	r0, [r7, #20]
 800b7e2:	f7ff fe4b 	bl	800b47c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f0:	2b40      	cmp	r3, #64	; 0x40
 800b7f2:	d109      	bne.n	800b808 <UART_DMAError+0x60>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b22      	cmp	r3, #34	; 0x22
 800b7f8:	d106      	bne.n	800b808 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b802:	6978      	ldr	r0, [r7, #20]
 800b804:	f7ff fe60 	bl	800b4c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b80e:	f043 0210 	orr.w	r2, r3, #16
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b818:	6978      	ldr	r0, [r7, #20]
 800b81a:	f7ff f955 	bl	800aac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b81e:	bf00      	nop
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff f93f 	bl	800aac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b088      	sub	sp, #32
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	60bb      	str	r3, [r7, #8]
   return(result);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b86e:	61fb      	str	r3, [r7, #28]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	461a      	mov	r2, r3
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	61bb      	str	r3, [r7, #24]
 800b87a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6979      	ldr	r1, [r7, #20]
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	613b      	str	r3, [r7, #16]
   return(result);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e6      	bne.n	800b85a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2220      	movs	r2, #32
 800b890:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff f8ed 	bl	800aa78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b89e:	bf00      	nop
 800b8a0:	3720      	adds	r7, #32
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
	...

0800b8a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	f107 001c 	add.w	r0, r7, #28
 800b8b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d120      	bne.n	800b902 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68da      	ldr	r2, [r3, #12]
 800b8d0:	4b20      	ldr	r3, [pc, #128]	; (800b954 <USB_CoreInit+0xac>)
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d105      	bne.n	800b8f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 fbee 	bl	800d0d8 <USB_CoreReset>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
 800b900:	e010      	b.n	800b924 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f001 fbe2 	bl	800d0d8 <USB_CoreReset>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	2b01      	cmp	r3, #1
 800b928:	d10b      	bne.n	800b942 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f043 0206 	orr.w	r2, r3, #6
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f043 0220 	orr.w	r2, r3, #32
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b94e:	b004      	add	sp, #16
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	ffbdffbf 	.word	0xffbdffbf

0800b958 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b958:	b480      	push	{r7}
 800b95a:	b087      	sub	sp, #28
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d165      	bne.n	800ba38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	4a41      	ldr	r2, [pc, #260]	; (800ba74 <USB_SetTurnaroundTime+0x11c>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d906      	bls.n	800b982 <USB_SetTurnaroundTime+0x2a>
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	4a40      	ldr	r2, [pc, #256]	; (800ba78 <USB_SetTurnaroundTime+0x120>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d202      	bcs.n	800b982 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b97c:	230f      	movs	r3, #15
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	e062      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	4a3c      	ldr	r2, [pc, #240]	; (800ba78 <USB_SetTurnaroundTime+0x120>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d306      	bcc.n	800b998 <USB_SetTurnaroundTime+0x40>
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	4a3b      	ldr	r2, [pc, #236]	; (800ba7c <USB_SetTurnaroundTime+0x124>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d202      	bcs.n	800b998 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b992:	230e      	movs	r3, #14
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	e057      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	4a38      	ldr	r2, [pc, #224]	; (800ba7c <USB_SetTurnaroundTime+0x124>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d306      	bcc.n	800b9ae <USB_SetTurnaroundTime+0x56>
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4a37      	ldr	r2, [pc, #220]	; (800ba80 <USB_SetTurnaroundTime+0x128>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d202      	bcs.n	800b9ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b9a8:	230d      	movs	r3, #13
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	e04c      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4a33      	ldr	r2, [pc, #204]	; (800ba80 <USB_SetTurnaroundTime+0x128>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d306      	bcc.n	800b9c4 <USB_SetTurnaroundTime+0x6c>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	4a32      	ldr	r2, [pc, #200]	; (800ba84 <USB_SetTurnaroundTime+0x12c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d802      	bhi.n	800b9c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b9be:	230c      	movs	r3, #12
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	e041      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	4a2f      	ldr	r2, [pc, #188]	; (800ba84 <USB_SetTurnaroundTime+0x12c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d906      	bls.n	800b9da <USB_SetTurnaroundTime+0x82>
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4a2e      	ldr	r2, [pc, #184]	; (800ba88 <USB_SetTurnaroundTime+0x130>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d802      	bhi.n	800b9da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b9d4:	230b      	movs	r3, #11
 800b9d6:	617b      	str	r3, [r7, #20]
 800b9d8:	e036      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <USB_SetTurnaroundTime+0x130>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d906      	bls.n	800b9f0 <USB_SetTurnaroundTime+0x98>
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	4a29      	ldr	r2, [pc, #164]	; (800ba8c <USB_SetTurnaroundTime+0x134>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d802      	bhi.n	800b9f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b9ea:	230a      	movs	r3, #10
 800b9ec:	617b      	str	r3, [r7, #20]
 800b9ee:	e02b      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	4a26      	ldr	r2, [pc, #152]	; (800ba8c <USB_SetTurnaroundTime+0x134>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d906      	bls.n	800ba06 <USB_SetTurnaroundTime+0xae>
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	4a25      	ldr	r2, [pc, #148]	; (800ba90 <USB_SetTurnaroundTime+0x138>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d202      	bcs.n	800ba06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ba00:	2309      	movs	r3, #9
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	e020      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4a21      	ldr	r2, [pc, #132]	; (800ba90 <USB_SetTurnaroundTime+0x138>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d306      	bcc.n	800ba1c <USB_SetTurnaroundTime+0xc4>
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4a20      	ldr	r2, [pc, #128]	; (800ba94 <USB_SetTurnaroundTime+0x13c>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d802      	bhi.n	800ba1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ba16:	2308      	movs	r3, #8
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	e015      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4a1d      	ldr	r2, [pc, #116]	; (800ba94 <USB_SetTurnaroundTime+0x13c>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d906      	bls.n	800ba32 <USB_SetTurnaroundTime+0xda>
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	4a1c      	ldr	r2, [pc, #112]	; (800ba98 <USB_SetTurnaroundTime+0x140>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d202      	bcs.n	800ba32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ba2c:	2307      	movs	r3, #7
 800ba2e:	617b      	str	r3, [r7, #20]
 800ba30:	e00a      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ba32:	2306      	movs	r3, #6
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	e007      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d102      	bne.n	800ba44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ba3e:	2309      	movs	r3, #9
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	e001      	b.n	800ba48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ba44:	2309      	movs	r3, #9
 800ba46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	68da      	ldr	r2, [r3, #12]
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	029b      	lsls	r3, r3, #10
 800ba5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ba60:	431a      	orrs	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	00d8acbf 	.word	0x00d8acbf
 800ba78:	00e4e1c0 	.word	0x00e4e1c0
 800ba7c:	00f42400 	.word	0x00f42400
 800ba80:	01067380 	.word	0x01067380
 800ba84:	011a499f 	.word	0x011a499f
 800ba88:	01312cff 	.word	0x01312cff
 800ba8c:	014ca43f 	.word	0x014ca43f
 800ba90:	016e3600 	.word	0x016e3600
 800ba94:	01a6ab1f 	.word	0x01a6ab1f
 800ba98:	01e84800 	.word	0x01e84800

0800ba9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f043 0201 	orr.w	r2, r3, #1
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	f023 0201 	bic.w	r2, r3, #1
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d115      	bne.n	800bb2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb0e:	2001      	movs	r0, #1
 800bb10:	f7f9 f9d8 	bl	8004ec4 <HAL_Delay>
      ms++;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3301      	adds	r3, #1
 800bb18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 fa4b 	bl	800cfb6 <USB_GetMode>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d01e      	beq.n	800bb64 <USB_SetCurrentMode+0x84>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2b31      	cmp	r3, #49	; 0x31
 800bb2a:	d9f0      	bls.n	800bb0e <USB_SetCurrentMode+0x2e>
 800bb2c:	e01a      	b.n	800bb64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb2e:	78fb      	ldrb	r3, [r7, #3]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d115      	bne.n	800bb60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb40:	2001      	movs	r0, #1
 800bb42:	f7f9 f9bf 	bl	8004ec4 <HAL_Delay>
      ms++;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 fa32 	bl	800cfb6 <USB_GetMode>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d005      	beq.n	800bb64 <USB_SetCurrentMode+0x84>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b31      	cmp	r3, #49	; 0x31
 800bb5c:	d9f0      	bls.n	800bb40 <USB_SetCurrentMode+0x60>
 800bb5e:	e001      	b.n	800bb64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e005      	b.n	800bb70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b32      	cmp	r3, #50	; 0x32
 800bb68:	d101      	bne.n	800bb6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e000      	b.n	800bb70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb78:	b084      	sub	sp, #16
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b086      	sub	sp, #24
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb92:	2300      	movs	r3, #0
 800bb94:	613b      	str	r3, [r7, #16]
 800bb96:	e009      	b.n	800bbac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3340      	adds	r3, #64	; 0x40
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	2200      	movs	r2, #0
 800bba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	613b      	str	r3, [r7, #16]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b0e      	cmp	r3, #14
 800bbb0:	d9f2      	bls.n	800bb98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d11c      	bne.n	800bbf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc6:	f043 0302 	orr.w	r3, r3, #2
 800bbca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e005      	b.n	800bbfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc04:	461a      	mov	r2, r3
 800bc06:	2300      	movs	r3, #0
 800bc08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc10:	4619      	mov	r1, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc18:	461a      	mov	r2, r3
 800bc1a:	680b      	ldr	r3, [r1, #0]
 800bc1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10c      	bne.n	800bc3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d104      	bne.n	800bc34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f965 	bl	800befc <USB_SetDevSpeed>
 800bc32:	e008      	b.n	800bc46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc34:	2101      	movs	r1, #1
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f960 	bl	800befc <USB_SetDevSpeed>
 800bc3c:	e003      	b.n	800bc46 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc3e:	2103      	movs	r1, #3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f95b 	bl	800befc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc46:	2110      	movs	r1, #16
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f8f3 	bl	800be34 <USB_FlushTxFifo>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f91f 	bl	800be9c <USB_FlushRxFifo>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc6e:	461a      	mov	r2, r3
 800bc70:	2300      	movs	r3, #0
 800bc72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc86:	461a      	mov	r2, r3
 800bc88:	2300      	movs	r3, #0
 800bc8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	e043      	b.n	800bd1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bca8:	d118      	bne.n	800bcdc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10a      	bne.n	800bcc6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcc2:	6013      	str	r3, [r2, #0]
 800bcc4:	e013      	b.n	800bcee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	e008      	b.n	800bcee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce8:	461a      	mov	r2, r3
 800bcea:	2300      	movs	r3, #0
 800bcec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	3301      	adds	r3, #1
 800bd18:	613b      	str	r3, [r7, #16]
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d3b7      	bcc.n	800bc92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	e043      	b.n	800bdb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	015a      	lsls	r2, r3, #5
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4413      	add	r3, r2
 800bd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd3e:	d118      	bne.n	800bd72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10a      	bne.n	800bd5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd52:	461a      	mov	r2, r3
 800bd54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	e013      	b.n	800bd84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	015a      	lsls	r2, r3, #5
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd68:	461a      	mov	r2, r3
 800bd6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	e008      	b.n	800bd84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd7e:	461a      	mov	r2, r3
 800bd80:	2300      	movs	r3, #0
 800bd82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd90:	461a      	mov	r2, r3
 800bd92:	2300      	movs	r3, #0
 800bd94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	015a      	lsls	r2, r3, #5
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda2:	461a      	mov	r2, r3
 800bda4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bda8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	3301      	adds	r3, #1
 800bdae:	613b      	str	r3, [r7, #16]
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d3b7      	bcc.n	800bd28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bdd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d105      	bne.n	800bdec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	f043 0210 	orr.w	r2, r3, #16
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	699a      	ldr	r2, [r3, #24]
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	; (800be2c <USB_DevInit+0x2b4>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d005      	beq.n	800be0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	f043 0208 	orr.w	r2, r3, #8
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d105      	bne.n	800be1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699a      	ldr	r2, [r3, #24]
 800be14:	4b06      	ldr	r3, [pc, #24]	; (800be30 <USB_DevInit+0x2b8>)
 800be16:	4313      	orrs	r3, r2
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be28:	b004      	add	sp, #16
 800be2a:	4770      	bx	lr
 800be2c:	803c3800 	.word	0x803c3800
 800be30:	40000004 	.word	0x40000004

0800be34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	4a13      	ldr	r2, [pc, #76]	; (800be98 <USB_FlushTxFifo+0x64>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d901      	bls.n	800be54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e01b      	b.n	800be8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	daf2      	bge.n	800be42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	019b      	lsls	r3, r3, #6
 800be64:	f043 0220 	orr.w	r2, r3, #32
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3301      	adds	r3, #1
 800be70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	4a08      	ldr	r2, [pc, #32]	; (800be98 <USB_FlushTxFifo+0x64>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d901      	bls.n	800be7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e006      	b.n	800be8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b20      	cmp	r3, #32
 800be88:	d0f0      	beq.n	800be6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	00030d40 	.word	0x00030d40

0800be9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3301      	adds	r3, #1
 800beac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	4a11      	ldr	r2, [pc, #68]	; (800bef8 <USB_FlushRxFifo+0x5c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d901      	bls.n	800beba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e018      	b.n	800beec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	daf2      	bge.n	800bea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2210      	movs	r2, #16
 800beca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3301      	adds	r3, #1
 800bed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	4a08      	ldr	r2, [pc, #32]	; (800bef8 <USB_FlushRxFifo+0x5c>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d901      	bls.n	800bede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	e006      	b.n	800beec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	f003 0310 	and.w	r3, r3, #16
 800bee6:	2b10      	cmp	r3, #16
 800bee8:	d0f0      	beq.n	800becc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	00030d40 	.word	0x00030d40

0800befc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b087      	sub	sp, #28
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f003 0306 	and.w	r3, r3, #6
 800bf46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d102      	bne.n	800bf54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]
 800bf52:	e00a      	b.n	800bf6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d002      	beq.n	800bf60 <USB_GetDevSpeed+0x32>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b06      	cmp	r3, #6
 800bf5e:	d102      	bne.n	800bf66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bf60:	2302      	movs	r3, #2
 800bf62:	75fb      	strb	r3, [r7, #23]
 800bf64:	e001      	b.n	800bf6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bf66:	230f      	movs	r3, #15
 800bf68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	371c      	adds	r7, #28
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d139      	bne.n	800c008 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf9a:	69da      	ldr	r2, [r3, #28]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 030f 	and.w	r3, r3, #15
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	68f9      	ldr	r1, [r7, #12]
 800bfae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	015a      	lsls	r2, r3, #5
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d153      	bne.n	800c074 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	791b      	ldrb	r3, [r3, #4]
 800bfe6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfe8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	059b      	lsls	r3, r3, #22
 800bfee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bff0:	431a      	orrs	r2, r3
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	0159      	lsls	r1, r3, #5
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	440b      	add	r3, r1
 800bffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffe:	4619      	mov	r1, r3
 800c000:	4b20      	ldr	r3, [pc, #128]	; (800c084 <USB_ActivateEndpoint+0x10c>)
 800c002:	4313      	orrs	r3, r2
 800c004:	600b      	str	r3, [r1, #0]
 800c006:	e035      	b.n	800c074 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c00e:	69da      	ldr	r2, [r3, #28]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 030f 	and.w	r3, r3, #15
 800c018:	2101      	movs	r1, #1
 800c01a:	fa01 f303 	lsl.w	r3, r1, r3
 800c01e:	041b      	lsls	r3, r3, #16
 800c020:	68f9      	ldr	r1, [r7, #12]
 800c022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c026:	4313      	orrs	r3, r2
 800c028:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d119      	bne.n	800c074 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	791b      	ldrb	r3, [r3, #4]
 800c05a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c05c:	430b      	orrs	r3, r1
 800c05e:	431a      	orrs	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	0159      	lsls	r1, r3, #5
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	440b      	add	r3, r1
 800c068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06c:	4619      	mov	r1, r3
 800c06e:	4b05      	ldr	r3, [pc, #20]	; (800c084 <USB_ActivateEndpoint+0x10c>)
 800c070:	4313      	orrs	r3, r2
 800c072:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	10008000 	.word	0x10008000

0800c088 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	785b      	ldrb	r3, [r3, #1]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d161      	bne.n	800c168 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0ba:	d11f      	bne.n	800c0fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	0151      	lsls	r1, r2, #5
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	440a      	add	r2, r1
 800c0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	0151      	lsls	r1, r2, #5
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	440a      	add	r2, r1
 800c0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	f003 030f 	and.w	r3, r3, #15
 800c10c:	2101      	movs	r1, #1
 800c10e:	fa01 f303 	lsl.w	r3, r1, r3
 800c112:	b29b      	uxth	r3, r3
 800c114:	43db      	mvns	r3, r3
 800c116:	68f9      	ldr	r1, [r7, #12]
 800c118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c11c:	4013      	ands	r3, r2
 800c11e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c126:	69da      	ldr	r2, [r3, #28]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	f003 030f 	and.w	r3, r3, #15
 800c130:	2101      	movs	r1, #1
 800c132:	fa01 f303 	lsl.w	r3, r1, r3
 800c136:	b29b      	uxth	r3, r3
 800c138:	43db      	mvns	r3, r3
 800c13a:	68f9      	ldr	r1, [r7, #12]
 800c13c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c140:	4013      	ands	r3, r2
 800c142:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	0159      	lsls	r1, r3, #5
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	440b      	add	r3, r1
 800c15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c15e:	4619      	mov	r1, r3
 800c160:	4b35      	ldr	r3, [pc, #212]	; (800c238 <USB_DeactivateEndpoint+0x1b0>)
 800c162:	4013      	ands	r3, r2
 800c164:	600b      	str	r3, [r1, #0]
 800c166:	e060      	b.n	800c22a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c17a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c17e:	d11f      	bne.n	800c1c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	015a      	lsls	r2, r3, #5
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4413      	add	r3, r2
 800c188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	0151      	lsls	r1, r2, #5
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	440a      	add	r2, r1
 800c196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c19a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c19e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	0151      	lsls	r1, r2, #5
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	440a      	add	r2, r1
 800c1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	f003 030f 	and.w	r3, r3, #15
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d6:	041b      	lsls	r3, r3, #16
 800c1d8:	43db      	mvns	r3, r3
 800c1da:	68f9      	ldr	r1, [r7, #12]
 800c1dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ea:	69da      	ldr	r2, [r3, #28]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 030f 	and.w	r3, r3, #15
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1fa:	041b      	lsls	r3, r3, #16
 800c1fc:	43db      	mvns	r3, r3
 800c1fe:	68f9      	ldr	r1, [r7, #12]
 800c200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c204:	4013      	ands	r3, r2
 800c206:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	0159      	lsls	r1, r3, #5
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	440b      	add	r3, r1
 800c21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c222:	4619      	mov	r1, r3
 800c224:	4b05      	ldr	r3, [pc, #20]	; (800c23c <USB_DeactivateEndpoint+0x1b4>)
 800c226:	4013      	ands	r3, r2
 800c228:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	ec337800 	.word	0xec337800
 800c23c:	eff37800 	.word	0xeff37800

0800c240 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08a      	sub	sp, #40	; 0x28
 800c244:	af02      	add	r7, sp, #8
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	f040 8163 	bne.w	800c528 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d132      	bne.n	800c2d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c276:	691a      	ldr	r2, [r3, #16]
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	0159      	lsls	r1, r3, #5
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	440b      	add	r3, r1
 800c280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c284:	4619      	mov	r1, r3
 800c286:	4ba5      	ldr	r3, [pc, #660]	; (800c51c <USB_EPStartXfer+0x2dc>)
 800c288:	4013      	ands	r3, r2
 800c28a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	4413      	add	r3, r2
 800c294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	69ba      	ldr	r2, [r7, #24]
 800c29c:	0151      	lsls	r1, r2, #5
 800c29e:	69fa      	ldr	r2, [r7, #28]
 800c2a0:	440a      	add	r2, r1
 800c2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b8:	691a      	ldr	r2, [r3, #16]
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	0159      	lsls	r1, r3, #5
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	440b      	add	r3, r1
 800c2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4b95      	ldr	r3, [pc, #596]	; (800c520 <USB_EPStartXfer+0x2e0>)
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	610b      	str	r3, [r1, #16]
 800c2ce:	e074      	b.n	800c3ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	015a      	lsls	r2, r3, #5
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2dc:	691a      	ldr	r2, [r3, #16]
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	0159      	lsls	r1, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	440b      	add	r3, r1
 800c2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4b8c      	ldr	r3, [pc, #560]	; (800c520 <USB_EPStartXfer+0x2e0>)
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2fe:	691a      	ldr	r2, [r3, #16]
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	0159      	lsls	r1, r3, #5
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	440b      	add	r3, r1
 800c308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30c:	4619      	mov	r1, r3
 800c30e:	4b83      	ldr	r3, [pc, #524]	; (800c51c <USB_EPStartXfer+0x2dc>)
 800c310:	4013      	ands	r3, r2
 800c312:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c320:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	6999      	ldr	r1, [r3, #24]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	440b      	add	r3, r1
 800c32c:	1e59      	subs	r1, r3, #1
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	fbb1 f3f3 	udiv	r3, r1, r3
 800c336:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c338:	4b7a      	ldr	r3, [pc, #488]	; (800c524 <USB_EPStartXfer+0x2e4>)
 800c33a:	400b      	ands	r3, r1
 800c33c:	69b9      	ldr	r1, [r7, #24]
 800c33e:	0148      	lsls	r0, r1, #5
 800c340:	69f9      	ldr	r1, [r7, #28]
 800c342:	4401      	add	r1, r0
 800c344:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c348:	4313      	orrs	r3, r2
 800c34a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	4413      	add	r3, r2
 800c354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c358:	691a      	ldr	r2, [r3, #16]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c362:	69b9      	ldr	r1, [r7, #24]
 800c364:	0148      	lsls	r0, r1, #5
 800c366:	69f9      	ldr	r1, [r7, #28]
 800c368:	4401      	add	r1, r0
 800c36a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c36e:	4313      	orrs	r3, r2
 800c370:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	791b      	ldrb	r3, [r3, #4]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d11f      	bne.n	800c3ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	0151      	lsls	r1, r2, #5
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	440a      	add	r2, r1
 800c390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c394:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c398:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	0151      	lsls	r1, r2, #5
 800c3ac:	69fa      	ldr	r2, [r7, #28]
 800c3ae:	440a      	add	r2, r1
 800c3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c3ba:	79fb      	ldrb	r3, [r7, #7]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d14b      	bne.n	800c458 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d009      	beq.n	800c3dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	791b      	ldrb	r3, [r3, #4]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d128      	bne.n	800c436 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d110      	bne.n	800c416 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	0151      	lsls	r1, r2, #5
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	440a      	add	r2, r1
 800c40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c40e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	e00f      	b.n	800c436 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	0151      	lsls	r1, r2, #5
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	440a      	add	r2, r1
 800c42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c434:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	015a      	lsls	r2, r3, #5
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	4413      	add	r3, r2
 800c43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	69ba      	ldr	r2, [r7, #24]
 800c446:	0151      	lsls	r1, r2, #5
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	440a      	add	r2, r1
 800c44c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	e137      	b.n	800c6c8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	0151      	lsls	r1, r2, #5
 800c46a:	69fa      	ldr	r2, [r7, #28]
 800c46c:	440a      	add	r2, r1
 800c46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c476:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	791b      	ldrb	r3, [r3, #4]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d015      	beq.n	800c4ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 811f 	beq.w	800c6c8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	f003 030f 	and.w	r3, r3, #15
 800c49a:	2101      	movs	r1, #1
 800c49c:	fa01 f303 	lsl.w	r3, r1, r3
 800c4a0:	69f9      	ldr	r1, [r7, #28]
 800c4a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	634b      	str	r3, [r1, #52]	; 0x34
 800c4aa:	e10d      	b.n	800c6c8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d110      	bne.n	800c4de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	69ba      	ldr	r2, [r7, #24]
 800c4cc:	0151      	lsls	r1, r2, #5
 800c4ce:	69fa      	ldr	r2, [r7, #28]
 800c4d0:	440a      	add	r2, r1
 800c4d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	e00f      	b.n	800c4fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69ba      	ldr	r2, [r7, #24]
 800c4ee:	0151      	lsls	r1, r2, #5
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	440a      	add	r2, r1
 800c4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6919      	ldr	r1, [r3, #16]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	b298      	uxth	r0, r3
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	4603      	mov	r3, r0
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 faea 	bl	800caec <USB_WritePacket>
 800c518:	e0d6      	b.n	800c6c8 <USB_EPStartXfer+0x488>
 800c51a:	bf00      	nop
 800c51c:	e007ffff 	.word	0xe007ffff
 800c520:	fff80000 	.word	0xfff80000
 800c524:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	0159      	lsls	r1, r3, #5
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	440b      	add	r3, r1
 800c53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c542:	4619      	mov	r1, r3
 800c544:	4b63      	ldr	r3, [pc, #396]	; (800c6d4 <USB_EPStartXfer+0x494>)
 800c546:	4013      	ands	r3, r2
 800c548:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c556:	691a      	ldr	r2, [r3, #16]
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	0159      	lsls	r1, r3, #5
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	440b      	add	r3, r1
 800c560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c564:	4619      	mov	r1, r3
 800c566:	4b5c      	ldr	r3, [pc, #368]	; (800c6d8 <USB_EPStartXfer+0x498>)
 800c568:	4013      	ands	r3, r2
 800c56a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d123      	bne.n	800c5bc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c580:	691a      	ldr	r2, [r3, #16]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c58a:	69b9      	ldr	r1, [r7, #24]
 800c58c:	0148      	lsls	r0, r1, #5
 800c58e:	69f9      	ldr	r1, [r7, #28]
 800c590:	4401      	add	r1, r0
 800c592:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c596:	4313      	orrs	r3, r2
 800c598:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	69fa      	ldr	r2, [r7, #28]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5b8:	6113      	str	r3, [r2, #16]
 800c5ba:	e037      	b.n	800c62c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	699a      	ldr	r2, [r3, #24]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	1e5a      	subs	r2, r3, #1
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	8afa      	ldrh	r2, [r7, #22]
 800c5d8:	fb03 f202 	mul.w	r2, r3, r2
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	015a      	lsls	r2, r3, #5
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ec:	691a      	ldr	r2, [r3, #16]
 800c5ee:	8afb      	ldrh	r3, [r7, #22]
 800c5f0:	04d9      	lsls	r1, r3, #19
 800c5f2:	4b3a      	ldr	r3, [pc, #232]	; (800c6dc <USB_EPStartXfer+0x49c>)
 800c5f4:	400b      	ands	r3, r1
 800c5f6:	69b9      	ldr	r1, [r7, #24]
 800c5f8:	0148      	lsls	r0, r1, #5
 800c5fa:	69f9      	ldr	r1, [r7, #28]
 800c5fc:	4401      	add	r1, r0
 800c5fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c602:	4313      	orrs	r3, r2
 800c604:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c612:	691a      	ldr	r2, [r3, #16]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c61c:	69b9      	ldr	r1, [r7, #24]
 800c61e:	0148      	lsls	r0, r1, #5
 800c620:	69f9      	ldr	r1, [r7, #28]
 800c622:	4401      	add	r1, r0
 800c624:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c628:	4313      	orrs	r3, r2
 800c62a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d10d      	bne.n	800c64e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d009      	beq.n	800c64e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	6919      	ldr	r1, [r3, #16]
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4413      	add	r3, r2
 800c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64a:	460a      	mov	r2, r1
 800c64c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	791b      	ldrb	r3, [r3, #4]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d128      	bne.n	800c6a8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c662:	2b00      	cmp	r3, #0
 800c664:	d110      	bne.n	800c688 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c684:	6013      	str	r3, [r2, #0]
 800c686:	e00f      	b.n	800c6a8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	0151      	lsls	r1, r2, #5
 800c69a:	69fa      	ldr	r2, [r7, #28]
 800c69c:	440a      	add	r2, r1
 800c69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69ba      	ldr	r2, [r7, #24]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	69fa      	ldr	r2, [r7, #28]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	fff80000 	.word	0xfff80000
 800c6d8:	e007ffff 	.word	0xe007ffff
 800c6dc:	1ff80000 	.word	0x1ff80000

0800c6e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	785b      	ldrb	r3, [r3, #1]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	f040 80ce 	bne.w	800c89e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d132      	bne.n	800c770 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c716:	691a      	ldr	r2, [r3, #16]
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	0159      	lsls	r1, r3, #5
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	440b      	add	r3, r1
 800c720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c724:	4619      	mov	r1, r3
 800c726:	4b9a      	ldr	r3, [pc, #616]	; (800c990 <USB_EP0StartXfer+0x2b0>)
 800c728:	4013      	ands	r3, r2
 800c72a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	015a      	lsls	r2, r3, #5
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	4413      	add	r3, r2
 800c734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	0151      	lsls	r1, r2, #5
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	440a      	add	r2, r1
 800c742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c74a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c758:	691a      	ldr	r2, [r3, #16]
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	0159      	lsls	r1, r3, #5
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	440b      	add	r3, r1
 800c762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c766:	4619      	mov	r1, r3
 800c768:	4b8a      	ldr	r3, [pc, #552]	; (800c994 <USB_EP0StartXfer+0x2b4>)
 800c76a:	4013      	ands	r3, r2
 800c76c:	610b      	str	r3, [r1, #16]
 800c76e:	e04e      	b.n	800c80e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	4413      	add	r3, r2
 800c778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c77c:	691a      	ldr	r2, [r3, #16]
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	0159      	lsls	r1, r3, #5
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	440b      	add	r3, r1
 800c786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78a:	4619      	mov	r1, r3
 800c78c:	4b81      	ldr	r3, [pc, #516]	; (800c994 <USB_EP0StartXfer+0x2b4>)
 800c78e:	4013      	ands	r3, r2
 800c790:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	015a      	lsls	r2, r3, #5
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	4413      	add	r3, r2
 800c79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79e:	691a      	ldr	r2, [r3, #16]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	0159      	lsls	r1, r3, #5
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	440b      	add	r3, r1
 800c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4b78      	ldr	r3, [pc, #480]	; (800c990 <USB_EP0StartXfer+0x2b0>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	699a      	ldr	r2, [r3, #24]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d903      	bls.n	800c7c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	68da      	ldr	r2, [r3, #12]
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	0151      	lsls	r1, r2, #5
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	440a      	add	r2, r1
 800c7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f4:	691a      	ldr	r2, [r3, #16]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7fe:	6939      	ldr	r1, [r7, #16]
 800c800:	0148      	lsls	r0, r1, #5
 800c802:	6979      	ldr	r1, [r7, #20]
 800c804:	4401      	add	r1, r0
 800c806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c80a:	4313      	orrs	r3, r2
 800c80c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c80e:	79fb      	ldrb	r3, [r7, #7]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d11e      	bne.n	800c852 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d009      	beq.n	800c830 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	4413      	add	r3, r2
 800c824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c828:	461a      	mov	r2, r3
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	4413      	add	r3, r2
 800c838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	0151      	lsls	r1, r2, #5
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	440a      	add	r2, r1
 800c846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c84a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	e097      	b.n	800c982 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	0151      	lsls	r1, r2, #5
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	440a      	add	r2, r1
 800c868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c86c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c870:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 8083 	beq.w	800c982 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	2101      	movs	r1, #1
 800c88e:	fa01 f303 	lsl.w	r3, r1, r3
 800c892:	6979      	ldr	r1, [r7, #20]
 800c894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c898:	4313      	orrs	r3, r2
 800c89a:	634b      	str	r3, [r1, #52]	; 0x34
 800c89c:	e071      	b.n	800c982 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	0159      	lsls	r1, r3, #5
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	440b      	add	r3, r1
 800c8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4b36      	ldr	r3, [pc, #216]	; (800c994 <USB_EP0StartXfer+0x2b4>)
 800c8bc:	4013      	ands	r3, r2
 800c8be:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	0159      	lsls	r1, r3, #5
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	440b      	add	r3, r1
 800c8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4b2c      	ldr	r3, [pc, #176]	; (800c990 <USB_EP0StartXfer+0x2b0>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	69db      	ldr	r3, [r3, #28]
 800c92c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c930:	6939      	ldr	r1, [r7, #16]
 800c932:	0148      	lsls	r0, r1, #5
 800c934:	6979      	ldr	r1, [r7, #20]
 800c936:	4401      	add	r1, r0
 800c938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c93c:	4313      	orrs	r3, r2
 800c93e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d10d      	bne.n	800c962 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d009      	beq.n	800c962 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	6919      	ldr	r1, [r3, #16]
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	4413      	add	r3, r2
 800c95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95e:	460a      	mov	r2, r1
 800c960:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	015a      	lsls	r2, r3, #5
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	0151      	lsls	r1, r2, #5
 800c974:	697a      	ldr	r2, [r7, #20]
 800c976:	440a      	add	r2, r1
 800c978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c97c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	e007ffff 	.word	0xe007ffff
 800c994:	fff80000 	.word	0xfff80000

0800c998 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c998:	b480      	push	{r7}
 800c99a:	b087      	sub	sp, #28
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d14a      	bne.n	800ca4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ce:	f040 8086 	bne.w	800cade <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	015a      	lsls	r2, r3, #5
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	7812      	ldrb	r2, [r2, #0]
 800c9e6:	0151      	lsls	r1, r2, #5
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	440a      	add	r2, r1
 800c9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	7812      	ldrb	r2, [r2, #0]
 800ca0a:	0151      	lsls	r1, r2, #5
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	440a      	add	r2, r1
 800ca10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d902      	bls.n	800ca30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	75fb      	strb	r3, [r7, #23]
          break;
 800ca2e:	e056      	b.n	800cade <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	015a      	lsls	r2, r3, #5
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	4413      	add	r3, r2
 800ca3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca48:	d0e7      	beq.n	800ca1a <USB_EPStopXfer+0x82>
 800ca4a:	e048      	b.n	800cade <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca64:	d13b      	bne.n	800cade <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	015a      	lsls	r2, r3, #5
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	4413      	add	r3, r2
 800ca70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	0151      	lsls	r1, r2, #5
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	440a      	add	r2, r1
 800ca80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	7812      	ldrb	r2, [r2, #0]
 800ca9e:	0151      	lsls	r1, r2, #5
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	440a      	add	r2, r1
 800caa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800caac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3301      	adds	r3, #1
 800cab2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f242 7210 	movw	r2, #10000	; 0x2710
 800caba:	4293      	cmp	r3, r2
 800cabc:	d902      	bls.n	800cac4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	75fb      	strb	r3, [r7, #23]
          break;
 800cac2:	e00c      	b.n	800cade <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cadc:	d0e7      	beq.n	800caae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cade:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	371c      	adds	r7, #28
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800caec:	b480      	push	{r7}
 800caee:	b089      	sub	sp, #36	; 0x24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	4611      	mov	r1, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	460b      	mov	r3, r1
 800cafc:	71fb      	strb	r3, [r7, #7]
 800cafe:	4613      	mov	r3, r2
 800cb00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cb0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d123      	bne.n	800cb5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb12:	88bb      	ldrh	r3, [r7, #4]
 800cb14:	3303      	adds	r3, #3
 800cb16:	089b      	lsrs	r3, r3, #2
 800cb18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61bb      	str	r3, [r7, #24]
 800cb1e:	e018      	b.n	800cb52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	031a      	lsls	r2, r3, #12
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	4413      	add	r3, r2
 800cb28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	3301      	adds	r3, #1
 800cb38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	3301      	adds	r3, #1
 800cb44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	61bb      	str	r3, [r7, #24]
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d3e2      	bcc.n	800cb20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3724      	adds	r7, #36	; 0x24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b08b      	sub	sp, #44	; 0x2c
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	4613      	mov	r3, r2
 800cb74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb7e:	88fb      	ldrh	r3, [r7, #6]
 800cb80:	089b      	lsrs	r3, r3, #2
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb86:	88fb      	ldrh	r3, [r7, #6]
 800cb88:	f003 0303 	and.w	r3, r3, #3
 800cb8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb8e:	2300      	movs	r3, #0
 800cb90:	623b      	str	r3, [r7, #32]
 800cb92:	e014      	b.n	800cbbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	601a      	str	r2, [r3, #0]
    pDest++;
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	3301      	adds	r3, #1
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	3301      	adds	r3, #1
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	3301      	adds	r3, #1
 800cbb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	623b      	str	r3, [r7, #32]
 800cbbe:	6a3a      	ldr	r2, [r7, #32]
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d3e6      	bcc.n	800cb94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cbc6:	8bfb      	ldrh	r3, [r7, #30]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01e      	beq.n	800cc0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f107 0310 	add.w	r3, r7, #16
 800cbdc:	6812      	ldr	r2, [r2, #0]
 800cbde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbec:	b2da      	uxtb	r2, r3
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	701a      	strb	r2, [r3, #0]
      i++;
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cbfe:	8bfb      	ldrh	r3, [r7, #30]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cc04:	8bfb      	ldrh	r3, [r7, #30]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1ea      	bne.n	800cbe0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	372c      	adds	r7, #44	; 0x2c
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	785b      	ldrb	r3, [r3, #1]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d12c      	bne.n	800cc8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	db12      	blt.n	800cc6c <USB_EPSetStall+0x54>
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00f      	beq.n	800cc6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	0151      	lsls	r1, r2, #5
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	440a      	add	r2, r1
 800cc62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	015a      	lsls	r2, r3, #5
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4413      	add	r3, r2
 800cc74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	0151      	lsls	r1, r2, #5
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	440a      	add	r2, r1
 800cc82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc8a:	6013      	str	r3, [r2, #0]
 800cc8c:	e02b      	b.n	800cce6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	015a      	lsls	r2, r3, #5
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	4413      	add	r3, r2
 800cc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	db12      	blt.n	800ccc6 <USB_EPSetStall+0xae>
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00f      	beq.n	800ccc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	015a      	lsls	r2, r3, #5
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4413      	add	r3, r2
 800ccae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	0151      	lsls	r1, r2, #5
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	440a      	add	r2, r1
 800ccbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ccc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	015a      	lsls	r2, r3, #5
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	0151      	lsls	r1, r2, #5
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	440a      	add	r2, r1
 800ccdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cce4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	785b      	ldrb	r3, [r3, #1]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d128      	bne.n	800cd62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	015a      	lsls	r2, r3, #5
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4413      	add	r3, r2
 800cd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	0151      	lsls	r1, r2, #5
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	440a      	add	r2, r1
 800cd26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	791b      	ldrb	r3, [r3, #4]
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	d003      	beq.n	800cd40 <USB_EPClearStall+0x4c>
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	791b      	ldrb	r3, [r3, #4]
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d138      	bne.n	800cdb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	015a      	lsls	r2, r3, #5
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4413      	add	r3, r2
 800cd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	0151      	lsls	r1, r2, #5
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	440a      	add	r2, r1
 800cd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd5e:	6013      	str	r3, [r2, #0]
 800cd60:	e027      	b.n	800cdb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	0151      	lsls	r1, r2, #5
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	440a      	add	r2, r1
 800cd78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	791b      	ldrb	r3, [r3, #4]
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	d003      	beq.n	800cd92 <USB_EPClearStall+0x9e>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	791b      	ldrb	r3, [r3, #4]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d10f      	bne.n	800cdb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	015a      	lsls	r2, r3, #5
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	4413      	add	r3, r2
 800cd9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	0151      	lsls	r1, r2, #5
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	440a      	add	r2, r1
 800cda8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cde2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	011b      	lsls	r3, r3, #4
 800cdf0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cdf4:	68f9      	ldr	r1, [r7, #12]
 800cdf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce26:	f023 0303 	bic.w	r3, r3, #3
 800ce2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce3a:	f023 0302 	bic.w	r3, r3, #2
 800ce3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b085      	sub	sp, #20
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce7c:	f043 0302 	orr.w	r3, r3, #2
 800ce80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	4013      	ands	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cea8:	68fb      	ldr	r3, [r7, #12]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b085      	sub	sp, #20
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	4013      	ands	r3, r2
 800ced8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	0c1b      	lsrs	r3, r3, #16
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3714      	adds	r7, #20
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b085      	sub	sp, #20
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefc:	699b      	ldr	r3, [r3, #24]
 800cefe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf06:	69db      	ldr	r3, [r3, #28]
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	b29b      	uxth	r3, r3
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf1e:	b480      	push	{r7}
 800cf20:	b085      	sub	sp, #20
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	460b      	mov	r3, r1
 800cf28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	68ba      	ldr	r2, [r7, #8]
 800cf48:	4013      	ands	r3, r2
 800cf4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf4c:	68bb      	ldr	r3, [r7, #8]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b087      	sub	sp, #28
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf7e:	78fb      	ldrb	r3, [r7, #3]
 800cf80:	f003 030f 	and.w	r3, r3, #15
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	fa22 f303 	lsr.w	r3, r2, r3
 800cf8a:	01db      	lsls	r3, r3, #7
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf94:	78fb      	ldrb	r3, [r7, #3]
 800cf96:	015a      	lsls	r2, r3, #5
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	693a      	ldr	r2, [r7, #16]
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	371c      	adds	r7, #28
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	b083      	sub	sp, #12
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	f003 0301 	and.w	r3, r3, #1
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
	...

0800cfd4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfee:	4619      	mov	r1, r3
 800cff0:	4b09      	ldr	r3, [pc, #36]	; (800d018 <USB_ActivateSetup+0x44>)
 800cff2:	4013      	ands	r3, r2
 800cff4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	fffff800 	.word	0xfffff800

0800d01c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	460b      	mov	r3, r1
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	333c      	adds	r3, #60	; 0x3c
 800d032:	3304      	adds	r3, #4
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	4a26      	ldr	r2, [pc, #152]	; (800d0d4 <USB_EP0_OutStart+0xb8>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d90a      	bls.n	800d056 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d04c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d050:	d101      	bne.n	800d056 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	e037      	b.n	800d0c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d05c:	461a      	mov	r2, r3
 800d05e:	2300      	movs	r3, #0
 800d060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	697a      	ldr	r2, [r7, #20]
 800d06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d070:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d084:	f043 0318 	orr.w	r3, r3, #24
 800d088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d098:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d09c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d09e:	7afb      	ldrb	r3, [r7, #11]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d10f      	bne.n	800d0c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	697a      	ldr	r2, [r7, #20]
 800d0ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d0c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	4f54300a 	.word	0x4f54300a

0800d0d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	4a13      	ldr	r2, [pc, #76]	; (800d13c <USB_CoreReset+0x64>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d901      	bls.n	800d0f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0f2:	2303      	movs	r3, #3
 800d0f4:	e01b      	b.n	800d12e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	daf2      	bge.n	800d0e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	f043 0201 	orr.w	r2, r3, #1
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4a09      	ldr	r2, [pc, #36]	; (800d13c <USB_CoreReset+0x64>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d901      	bls.n	800d120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e006      	b.n	800d12e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	f003 0301 	and.w	r3, r3, #1
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d0f0      	beq.n	800d10e <USB_CoreReset+0x36>

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	00030d40 	.word	0x00030d40

0800d140 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d14c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d150:	f013 fa0a 	bl	8020568 <malloc>
 800d154:	4603      	mov	r3, r0
 800d156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d109      	bne.n	800d172 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	32b0      	adds	r2, #176	; 0xb0
 800d168:	2100      	movs	r1, #0
 800d16a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d16e:	2302      	movs	r3, #2
 800d170:	e0d4      	b.n	800d31c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d172:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d176:	2100      	movs	r1, #0
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f013 ff27 	bl	8020fcc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	32b0      	adds	r2, #176	; 0xb0
 800d188:	68f9      	ldr	r1, [r7, #12]
 800d18a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	32b0      	adds	r2, #176	; 0xb0
 800d198:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7c1b      	ldrb	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d138      	bne.n	800d21c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d1aa:	4b5e      	ldr	r3, [pc, #376]	; (800d324 <USBD_CDC_Init+0x1e4>)
 800d1ac:	7819      	ldrb	r1, [r3, #0]
 800d1ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f005 fb06 	bl	80127c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1ba:	4b5a      	ldr	r3, [pc, #360]	; (800d324 <USBD_CDC_Init+0x1e4>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	f003 020f 	and.w	r2, r3, #15
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3324      	adds	r3, #36	; 0x24
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1d4:	4b54      	ldr	r3, [pc, #336]	; (800d328 <USBD_CDC_Init+0x1e8>)
 800d1d6:	7819      	ldrb	r1, [r3, #0]
 800d1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1dc:	2202      	movs	r2, #2
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f005 faf1 	bl	80127c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1e4:	4b50      	ldr	r3, [pc, #320]	; (800d328 <USBD_CDC_Init+0x1e8>)
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	f003 020f 	and.w	r2, r3, #15
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d200:	4b4a      	ldr	r3, [pc, #296]	; (800d32c <USBD_CDC_Init+0x1ec>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f003 020f 	and.w	r2, r3, #15
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	4613      	mov	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	440b      	add	r3, r1
 800d214:	3326      	adds	r3, #38	; 0x26
 800d216:	2210      	movs	r2, #16
 800d218:	801a      	strh	r2, [r3, #0]
 800d21a:	e035      	b.n	800d288 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d21c:	4b41      	ldr	r3, [pc, #260]	; (800d324 <USBD_CDC_Init+0x1e4>)
 800d21e:	7819      	ldrb	r1, [r3, #0]
 800d220:	2340      	movs	r3, #64	; 0x40
 800d222:	2202      	movs	r2, #2
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f005 face 	bl	80127c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d22a:	4b3e      	ldr	r3, [pc, #248]	; (800d324 <USBD_CDC_Init+0x1e4>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	f003 020f 	and.w	r2, r3, #15
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	440b      	add	r3, r1
 800d23e:	3324      	adds	r3, #36	; 0x24
 800d240:	2201      	movs	r2, #1
 800d242:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d244:	4b38      	ldr	r3, [pc, #224]	; (800d328 <USBD_CDC_Init+0x1e8>)
 800d246:	7819      	ldrb	r1, [r3, #0]
 800d248:	2340      	movs	r3, #64	; 0x40
 800d24a:	2202      	movs	r2, #2
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f005 faba 	bl	80127c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d252:	4b35      	ldr	r3, [pc, #212]	; (800d328 <USBD_CDC_Init+0x1e8>)
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	f003 020f 	and.w	r2, r3, #15
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	4613      	mov	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d26a:	2201      	movs	r2, #1
 800d26c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d26e:	4b2f      	ldr	r3, [pc, #188]	; (800d32c <USBD_CDC_Init+0x1ec>)
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	f003 020f 	and.w	r2, r3, #15
 800d276:	6879      	ldr	r1, [r7, #4]
 800d278:	4613      	mov	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	440b      	add	r3, r1
 800d282:	3326      	adds	r3, #38	; 0x26
 800d284:	2210      	movs	r2, #16
 800d286:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d288:	4b28      	ldr	r3, [pc, #160]	; (800d32c <USBD_CDC_Init+0x1ec>)
 800d28a:	7819      	ldrb	r1, [r3, #0]
 800d28c:	2308      	movs	r3, #8
 800d28e:	2203      	movs	r2, #3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f005 fa98 	bl	80127c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d296:	4b25      	ldr	r3, [pc, #148]	; (800d32c <USBD_CDC_Init+0x1ec>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	f003 020f 	and.w	r2, r3, #15
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	440b      	add	r3, r1
 800d2aa:	3324      	adds	r3, #36	; 0x24
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	33b0      	adds	r3, #176	; 0xb0
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d2e6:	2302      	movs	r3, #2
 800d2e8:	e018      	b.n	800d31c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7c1b      	ldrb	r3, [r3, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10a      	bne.n	800d308 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2f2:	4b0d      	ldr	r3, [pc, #52]	; (800d328 <USBD_CDC_Init+0x1e8>)
 800d2f4:	7819      	ldrb	r1, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f005 fb4f 	bl	80129a4 <USBD_LL_PrepareReceive>
 800d306:	e008      	b.n	800d31a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d308:	4b07      	ldr	r3, [pc, #28]	; (800d328 <USBD_CDC_Init+0x1e8>)
 800d30a:	7819      	ldrb	r1, [r3, #0]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d312:	2340      	movs	r3, #64	; 0x40
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f005 fb45 	bl	80129a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	20000097 	.word	0x20000097
 800d328:	20000098 	.word	0x20000098
 800d32c:	20000099 	.word	0x20000099

0800d330 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d33c:	4b3a      	ldr	r3, [pc, #232]	; (800d428 <USBD_CDC_DeInit+0xf8>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f005 fa65 	bl	8012812 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d348:	4b37      	ldr	r3, [pc, #220]	; (800d428 <USBD_CDC_DeInit+0xf8>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	f003 020f 	and.w	r2, r3, #15
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	440b      	add	r3, r1
 800d35c:	3324      	adds	r3, #36	; 0x24
 800d35e:	2200      	movs	r2, #0
 800d360:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d362:	4b32      	ldr	r3, [pc, #200]	; (800d42c <USBD_CDC_DeInit+0xfc>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f005 fa52 	bl	8012812 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d36e:	4b2f      	ldr	r3, [pc, #188]	; (800d42c <USBD_CDC_DeInit+0xfc>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	f003 020f 	and.w	r2, r3, #15
 800d376:	6879      	ldr	r1, [r7, #4]
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	440b      	add	r3, r1
 800d382:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d386:	2200      	movs	r2, #0
 800d388:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d38a:	4b29      	ldr	r3, [pc, #164]	; (800d430 <USBD_CDC_DeInit+0x100>)
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f005 fa3e 	bl	8012812 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d396:	4b26      	ldr	r3, [pc, #152]	; (800d430 <USBD_CDC_DeInit+0x100>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	f003 020f 	and.w	r2, r3, #15
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4413      	add	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	440b      	add	r3, r1
 800d3aa:	3324      	adds	r3, #36	; 0x24
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d3b0:	4b1f      	ldr	r3, [pc, #124]	; (800d430 <USBD_CDC_DeInit+0x100>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	f003 020f 	and.w	r2, r3, #15
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	3326      	adds	r3, #38	; 0x26
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	32b0      	adds	r2, #176	; 0xb0
 800d3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d01f      	beq.n	800d41c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	33b0      	adds	r3, #176	; 0xb0
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	32b0      	adds	r2, #176	; 0xb0
 800d3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f013 f8ba 	bl	8020578 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	32b0      	adds	r2, #176	; 0xb0
 800d40e:	2100      	movs	r1, #0
 800d410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000097 	.word	0x20000097
 800d42c:	20000098 	.word	0x20000098
 800d430:	20000099 	.word	0x20000099

0800d434 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	32b0      	adds	r2, #176	; 0xb0
 800d448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d44e:	2300      	movs	r3, #0
 800d450:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d452:	2300      	movs	r3, #0
 800d454:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d460:	2303      	movs	r3, #3
 800d462:	e0bf      	b.n	800d5e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d050      	beq.n	800d512 <USBD_CDC_Setup+0xde>
 800d470:	2b20      	cmp	r3, #32
 800d472:	f040 80af 	bne.w	800d5d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	88db      	ldrh	r3, [r3, #6]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d03a      	beq.n	800d4f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	b25b      	sxtb	r3, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	da1b      	bge.n	800d4c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	33b0      	adds	r3, #176	; 0xb0
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d49e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	88d2      	ldrh	r2, [r2, #6]
 800d4a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	88db      	ldrh	r3, [r3, #6]
 800d4aa:	2b07      	cmp	r3, #7
 800d4ac:	bf28      	it	cs
 800d4ae:	2307      	movcs	r3, #7
 800d4b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	89fa      	ldrh	r2, [r7, #14]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 fd6d 	bl	800ef98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d4be:	e090      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	785a      	ldrb	r2, [r3, #1]
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	2b3f      	cmp	r3, #63	; 0x3f
 800d4d0:	d803      	bhi.n	800d4da <USBD_CDC_Setup+0xa6>
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	88db      	ldrh	r3, [r3, #6]
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	e000      	b.n	800d4dc <USBD_CDC_Setup+0xa8>
 800d4da:	2240      	movs	r2, #64	; 0x40
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d4e2:	6939      	ldr	r1, [r7, #16]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 fd7f 	bl	800eff0 <USBD_CtlPrepareRx>
      break;
 800d4f2:	e076      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	33b0      	adds	r3, #176	; 0xb0
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	7850      	ldrb	r0, [r2, #1]
 800d50a:	2200      	movs	r2, #0
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	4798      	blx	r3
      break;
 800d510:	e067      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	785b      	ldrb	r3, [r3, #1]
 800d516:	2b0b      	cmp	r3, #11
 800d518:	d851      	bhi.n	800d5be <USBD_CDC_Setup+0x18a>
 800d51a:	a201      	add	r2, pc, #4	; (adr r2, 800d520 <USBD_CDC_Setup+0xec>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d551 	.word	0x0800d551
 800d524:	0800d5cd 	.word	0x0800d5cd
 800d528:	0800d5bf 	.word	0x0800d5bf
 800d52c:	0800d5bf 	.word	0x0800d5bf
 800d530:	0800d5bf 	.word	0x0800d5bf
 800d534:	0800d5bf 	.word	0x0800d5bf
 800d538:	0800d5bf 	.word	0x0800d5bf
 800d53c:	0800d5bf 	.word	0x0800d5bf
 800d540:	0800d5bf 	.word	0x0800d5bf
 800d544:	0800d5bf 	.word	0x0800d5bf
 800d548:	0800d57b 	.word	0x0800d57b
 800d54c:	0800d5a5 	.word	0x0800d5a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d107      	bne.n	800d56c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d55c:	f107 030a 	add.w	r3, r7, #10
 800d560:	2202      	movs	r2, #2
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f001 fd17 	bl	800ef98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d56a:	e032      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 fca1 	bl	800eeb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d574:	2303      	movs	r3, #3
 800d576:	75fb      	strb	r3, [r7, #23]
          break;
 800d578:	e02b      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b03      	cmp	r3, #3
 800d584:	d107      	bne.n	800d596 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d586:	f107 030d 	add.w	r3, r7, #13
 800d58a:	2201      	movs	r2, #1
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 fd02 	bl	800ef98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d594:	e01d      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 fc8c 	bl	800eeb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d5a2:	e016      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d00f      	beq.n	800d5d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 fc7f 	bl	800eeb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d5bc:	e008      	b.n	800d5d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 fc78 	bl	800eeb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d5ca:	e002      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>
          break;
 800d5cc:	bf00      	nop
 800d5ce:	e008      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>
          break;
 800d5d0:	bf00      	nop
      }
      break;
 800d5d2:	e006      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 fc6d 	bl	800eeb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	75fb      	strb	r3, [r7, #23]
      break;
 800d5e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	32b0      	adds	r2, #176	; 0xb0
 800d60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d612:	2303      	movs	r3, #3
 800d614:	e065      	b.n	800d6e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	32b0      	adds	r2, #176	; 0xb0
 800d620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d624:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d626:	78fb      	ldrb	r3, [r7, #3]
 800d628:	f003 020f 	and.w	r2, r3, #15
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	440b      	add	r3, r1
 800d638:	3318      	adds	r3, #24
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d02f      	beq.n	800d6a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	f003 020f 	and.w	r2, r3, #15
 800d646:	6879      	ldr	r1, [r7, #4]
 800d648:	4613      	mov	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4413      	add	r3, r2
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	440b      	add	r3, r1
 800d652:	3318      	adds	r3, #24
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	78fb      	ldrb	r3, [r7, #3]
 800d658:	f003 010f 	and.w	r1, r3, #15
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	460b      	mov	r3, r1
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	440b      	add	r3, r1
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4403      	add	r3, r0
 800d668:	3348      	adds	r3, #72	; 0x48
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d670:	fb01 f303 	mul.w	r3, r1, r3
 800d674:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d676:	2b00      	cmp	r3, #0
 800d678:	d112      	bne.n	800d6a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d67a:	78fb      	ldrb	r3, [r7, #3]
 800d67c:	f003 020f 	and.w	r2, r3, #15
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	440b      	add	r3, r1
 800d68c:	3318      	adds	r3, #24
 800d68e:	2200      	movs	r2, #0
 800d690:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d692:	78f9      	ldrb	r1, [r7, #3]
 800d694:	2300      	movs	r3, #0
 800d696:	2200      	movs	r2, #0
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f005 f962 	bl	8012962 <USBD_LL_Transmit>
 800d69e:	e01f      	b.n	800d6e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	33b0      	adds	r3, #176	; 0xb0
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4413      	add	r3, r2
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d010      	beq.n	800d6e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	33b0      	adds	r3, #176	; 0xb0
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4413      	add	r3, r2
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	68ba      	ldr	r2, [r7, #8]
 800d6d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d6dc:	78fa      	ldrb	r2, [r7, #3]
 800d6de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b084      	sub	sp, #16
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	32b0      	adds	r2, #176	; 0xb0
 800d700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d704:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	32b0      	adds	r2, #176	; 0xb0
 800d710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d718:	2303      	movs	r3, #3
 800d71a:	e01a      	b.n	800d752 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d71c:	78fb      	ldrb	r3, [r7, #3]
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f005 f960 	bl	80129e6 <USBD_LL_GetRxDataSize>
 800d726:	4602      	mov	r2, r0
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	33b0      	adds	r3, #176	; 0xb0
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d74c:	4611      	mov	r1, r2
 800d74e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	32b0      	adds	r2, #176	; 0xb0
 800d76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d770:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	e025      	b.n	800d7c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	33b0      	adds	r3, #176	; 0xb0
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d01a      	beq.n	800d7c6 <USBD_CDC_EP0_RxReady+0x6c>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d796:	2bff      	cmp	r3, #255	; 0xff
 800d798:	d015      	beq.n	800d7c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	33b0      	adds	r3, #176	; 0xb0
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d7b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7ba:	b292      	uxth	r2, r2
 800d7bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	22ff      	movs	r2, #255	; 0xff
 800d7c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7d8:	2182      	movs	r1, #130	; 0x82
 800d7da:	4818      	ldr	r0, [pc, #96]	; (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7dc:	f000 fd09 	bl	800e1f2 <USBD_GetEpDesc>
 800d7e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4815      	ldr	r0, [pc, #84]	; (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7e6:	f000 fd04 	bl	800e1f2 <USBD_GetEpDesc>
 800d7ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7ec:	2181      	movs	r1, #129	; 0x81
 800d7ee:	4813      	ldr	r0, [pc, #76]	; (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7f0:	f000 fcff 	bl	800e1f2 <USBD_GetEpDesc>
 800d7f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	2210      	movs	r2, #16
 800d800:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d006      	beq.n	800d816 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d810:	711a      	strb	r2, [r3, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d006      	beq.n	800d82a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2200      	movs	r2, #0
 800d820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d824:	711a      	strb	r2, [r3, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2243      	movs	r2, #67	; 0x43
 800d82e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d832:	4618      	mov	r0, r3
 800d834:	3718      	adds	r7, #24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	20000054 	.word	0x20000054

0800d840 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d848:	2182      	movs	r1, #130	; 0x82
 800d84a:	4818      	ldr	r0, [pc, #96]	; (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d84c:	f000 fcd1 	bl	800e1f2 <USBD_GetEpDesc>
 800d850:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d852:	2101      	movs	r1, #1
 800d854:	4815      	ldr	r0, [pc, #84]	; (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d856:	f000 fccc 	bl	800e1f2 <USBD_GetEpDesc>
 800d85a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d85c:	2181      	movs	r1, #129	; 0x81
 800d85e:	4813      	ldr	r0, [pc, #76]	; (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d860:	f000 fcc7 	bl	800e1f2 <USBD_GetEpDesc>
 800d864:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2210      	movs	r2, #16
 800d870:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d006      	beq.n	800d886 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2200      	movs	r2, #0
 800d87c:	711a      	strb	r2, [r3, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f042 0202 	orr.w	r2, r2, #2
 800d884:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	711a      	strb	r2, [r3, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f042 0202 	orr.w	r2, r2, #2
 800d898:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2243      	movs	r2, #67	; 0x43
 800d89e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d8a0:	4b02      	ldr	r3, [pc, #8]	; (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20000054 	.word	0x20000054

0800d8b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8b8:	2182      	movs	r1, #130	; 0x82
 800d8ba:	4818      	ldr	r0, [pc, #96]	; (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8bc:	f000 fc99 	bl	800e1f2 <USBD_GetEpDesc>
 800d8c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8c2:	2101      	movs	r1, #1
 800d8c4:	4815      	ldr	r0, [pc, #84]	; (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8c6:	f000 fc94 	bl	800e1f2 <USBD_GetEpDesc>
 800d8ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d8cc:	2181      	movs	r1, #129	; 0x81
 800d8ce:	4813      	ldr	r0, [pc, #76]	; (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8d0:	f000 fc8f 	bl	800e1f2 <USBD_GetEpDesc>
 800d8d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	2210      	movs	r2, #16
 800d8e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d006      	beq.n	800d8f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8f0:	711a      	strb	r2, [r3, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d904:	711a      	strb	r2, [r3, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2243      	movs	r2, #67	; 0x43
 800d90e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d910:	4b02      	ldr	r3, [pc, #8]	; (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	20000054 	.word	0x20000054

0800d920 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	220a      	movs	r2, #10
 800d92c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d92e:	4b03      	ldr	r3, [pc, #12]	; (800d93c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	20000010 	.word	0x20000010

0800d940 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e009      	b.n	800d968 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	33b0      	adds	r3, #176	; 0xb0
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d974:	b480      	push	{r7}
 800d976:	b087      	sub	sp, #28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	32b0      	adds	r2, #176	; 0xb0
 800d98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d98e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	e008      	b.n	800d9ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	371c      	adds	r7, #28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	32b0      	adds	r2, #176	; 0xb0
 800d9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d101      	bne.n	800d9dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	e004      	b.n	800d9e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	32b0      	adds	r2, #176	; 0xb0
 800da06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	32b0      	adds	r2, #176	; 0xb0
 800da16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d101      	bne.n	800da22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800da1e:	2303      	movs	r3, #3
 800da20:	e018      	b.n	800da54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	7c1b      	ldrb	r3, [r3, #16]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10a      	bne.n	800da40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da2a:	4b0c      	ldr	r3, [pc, #48]	; (800da5c <USBD_CDC_ReceivePacket+0x68>)
 800da2c:	7819      	ldrb	r1, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f004 ffb3 	bl	80129a4 <USBD_LL_PrepareReceive>
 800da3e:	e008      	b.n	800da52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da40:	4b06      	ldr	r3, [pc, #24]	; (800da5c <USBD_CDC_ReceivePacket+0x68>)
 800da42:	7819      	ldrb	r1, [r3, #0]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da4a:	2340      	movs	r3, #64	; 0x40
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f004 ffa9 	bl	80129a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20000098 	.word	0x20000098

0800da60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	4613      	mov	r3, r2
 800da6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da74:	2303      	movs	r3, #3
 800da76:	e01f      	b.n	800dab8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	79fa      	ldrb	r2, [r7, #7]
 800daaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f004 fe23 	bl	80126f8 <USBD_LL_Init>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3718      	adds	r7, #24
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800daca:	2300      	movs	r3, #0
 800dacc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e025      	b.n	800db24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	32ae      	adds	r2, #174	; 0xae
 800daea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00f      	beq.n	800db14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	32ae      	adds	r2, #174	; 0xae
 800dafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db04:	f107 020e 	add.w	r2, r7, #14
 800db08:	4610      	mov	r0, r2
 800db0a:	4798      	blx	r3
 800db0c:	4602      	mov	r2, r0
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800db1a:	1c5a      	adds	r2, r3, #1
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f004 fe2b 	bl	8012790 <USBD_LL_Start>
 800db3a:	4603      	mov	r3, r0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	460b      	mov	r3, r1
 800db64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db66:	2300      	movs	r3, #0
 800db68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db70:	2b00      	cmp	r3, #0
 800db72:	d009      	beq.n	800db88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	78fa      	ldrb	r2, [r7, #3]
 800db7e:	4611      	mov	r1, r2
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	4798      	blx	r3
 800db84:	4603      	mov	r3, r0
 800db86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db88:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	78fa      	ldrb	r2, [r7, #3]
 800dbac:	4611      	mov	r1, r2
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dbb8:	2303      	movs	r3, #3
 800dbba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b084      	sub	sp, #16
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f001 f932 	bl	800ee42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dbec:	461a      	mov	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbfa:	f003 031f 	and.w	r3, r3, #31
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d01a      	beq.n	800dc38 <USBD_LL_SetupStage+0x72>
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d822      	bhi.n	800dc4c <USBD_LL_SetupStage+0x86>
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d002      	beq.n	800dc10 <USBD_LL_SetupStage+0x4a>
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d00a      	beq.n	800dc24 <USBD_LL_SetupStage+0x5e>
 800dc0e:	e01d      	b.n	800dc4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fb5f 	bl	800e2dc <USBD_StdDevReq>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73fb      	strb	r3, [r7, #15]
      break;
 800dc22:	e020      	b.n	800dc66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fbc7 	bl	800e3c0 <USBD_StdItfReq>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73fb      	strb	r3, [r7, #15]
      break;
 800dc36:	e016      	b.n	800dc66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fc29 	bl	800e498 <USBD_StdEPReq>
 800dc46:	4603      	mov	r3, r0
 800dc48:	73fb      	strb	r3, [r7, #15]
      break;
 800dc4a:	e00c      	b.n	800dc66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f004 fdf8 	bl	8012850 <USBD_LL_StallEP>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73fb      	strb	r3, [r7, #15]
      break;
 800dc64:	bf00      	nop
  }

  return ret;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dc82:	7afb      	ldrb	r3, [r7, #11]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d16e      	bne.n	800dd66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	f040 8098 	bne.w	800ddcc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	689a      	ldr	r2, [r3, #8]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d913      	bls.n	800dcd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	689a      	ldr	r2, [r3, #8]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	1ad2      	subs	r2, r2, r3
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	68da      	ldr	r2, [r3, #12]
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	bf28      	it	cs
 800dcc2:	4613      	movcs	r3, r2
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f001 f9ae 	bl	800f02a <USBD_CtlContinueRx>
 800dcce:	e07d      	b.n	800ddcc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dcd6:	f003 031f 	and.w	r3, r3, #31
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d014      	beq.n	800dd08 <USBD_LL_DataOutStage+0x98>
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d81d      	bhi.n	800dd1e <USBD_LL_DataOutStage+0xae>
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <USBD_LL_DataOutStage+0x7c>
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d003      	beq.n	800dcf2 <USBD_LL_DataOutStage+0x82>
 800dcea:	e018      	b.n	800dd1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dcec:	2300      	movs	r3, #0
 800dcee:	75bb      	strb	r3, [r7, #22]
            break;
 800dcf0:	e018      	b.n	800dd24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f000 fa5e 	bl	800e1be <USBD_CoreFindIF>
 800dd02:	4603      	mov	r3, r0
 800dd04:	75bb      	strb	r3, [r7, #22]
            break;
 800dd06:	e00d      	b.n	800dd24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	4619      	mov	r1, r3
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f000 fa60 	bl	800e1d8 <USBD_CoreFindEP>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	75bb      	strb	r3, [r7, #22]
            break;
 800dd1c:	e002      	b.n	800dd24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75bb      	strb	r3, [r7, #22]
            break;
 800dd22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dd24:	7dbb      	ldrb	r3, [r7, #22]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d119      	bne.n	800dd5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d113      	bne.n	800dd5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dd36:	7dba      	ldrb	r2, [r7, #22]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	32ae      	adds	r2, #174	; 0xae
 800dd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00b      	beq.n	800dd5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dd46:	7dba      	ldrb	r2, [r7, #22]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dd4e:	7dba      	ldrb	r2, [r7, #22]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	32ae      	adds	r2, #174	; 0xae
 800dd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd58:	691b      	ldr	r3, [r3, #16]
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f001 f974 	bl	800f04c <USBD_CtlSendStatus>
 800dd64:	e032      	b.n	800ddcc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dd66:	7afb      	ldrb	r3, [r7, #11]
 800dd68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	4619      	mov	r1, r3
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f000 fa31 	bl	800e1d8 <USBD_CoreFindEP>
 800dd76:	4603      	mov	r3, r0
 800dd78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd7a:	7dbb      	ldrb	r3, [r7, #22]
 800dd7c:	2bff      	cmp	r3, #255	; 0xff
 800dd7e:	d025      	beq.n	800ddcc <USBD_LL_DataOutStage+0x15c>
 800dd80:	7dbb      	ldrb	r3, [r7, #22]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d122      	bne.n	800ddcc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d117      	bne.n	800ddc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dd92:	7dba      	ldrb	r2, [r7, #22]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	32ae      	adds	r2, #174	; 0xae
 800dd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00f      	beq.n	800ddc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dda2:	7dba      	ldrb	r2, [r7, #22]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ddaa:	7dba      	ldrb	r2, [r7, #22]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	32ae      	adds	r2, #174	; 0xae
 800ddb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb4:	699b      	ldr	r3, [r3, #24]
 800ddb6:	7afa      	ldrb	r2, [r7, #11]
 800ddb8:	4611      	mov	r1, r2
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	4798      	blx	r3
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ddc8:	7dfb      	ldrb	r3, [r7, #23]
 800ddca:	e000      	b.n	800ddce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b086      	sub	sp, #24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	460b      	mov	r3, r1
 800dde0:	607a      	str	r2, [r7, #4]
 800dde2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dde4:	7afb      	ldrb	r3, [r7, #11]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d16f      	bne.n	800deca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	3314      	adds	r3, #20
 800ddee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	d15a      	bne.n	800deb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	689a      	ldr	r2, [r3, #8]
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	429a      	cmp	r2, r3
 800de04:	d914      	bls.n	800de30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	689a      	ldr	r2, [r3, #8]
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	461a      	mov	r2, r3
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f001 f8d6 	bl	800efce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de22:	2300      	movs	r3, #0
 800de24:	2200      	movs	r2, #0
 800de26:	2100      	movs	r1, #0
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f004 fdbb 	bl	80129a4 <USBD_LL_PrepareReceive>
 800de2e:	e03f      	b.n	800deb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	68da      	ldr	r2, [r3, #12]
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d11c      	bne.n	800de76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de44:	429a      	cmp	r2, r3
 800de46:	d316      	bcc.n	800de76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de52:	429a      	cmp	r2, r3
 800de54:	d20f      	bcs.n	800de76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de56:	2200      	movs	r2, #0
 800de58:	2100      	movs	r1, #0
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f001 f8b7 	bl	800efce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de68:	2300      	movs	r3, #0
 800de6a:	2200      	movs	r2, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f004 fd98 	bl	80129a4 <USBD_LL_PrepareReceive>
 800de74:	e01c      	b.n	800deb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b03      	cmp	r3, #3
 800de80:	d10f      	bne.n	800dea2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d009      	beq.n	800dea2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2200      	movs	r2, #0
 800de92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dea2:	2180      	movs	r1, #128	; 0x80
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f004 fcd3 	bl	8012850 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f001 f8e1 	bl	800f072 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d03a      	beq.n	800df30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f7ff fe42 	bl	800db44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dec8:	e032      	b.n	800df30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800deca:	7afb      	ldrb	r3, [r7, #11]
 800decc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	4619      	mov	r1, r3
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 f97f 	bl	800e1d8 <USBD_CoreFindEP>
 800deda:	4603      	mov	r3, r0
 800dedc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dede:	7dfb      	ldrb	r3, [r7, #23]
 800dee0:	2bff      	cmp	r3, #255	; 0xff
 800dee2:	d025      	beq.n	800df30 <USBD_LL_DataInStage+0x15a>
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d122      	bne.n	800df30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b03      	cmp	r3, #3
 800def4:	d11c      	bne.n	800df30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800def6:	7dfa      	ldrb	r2, [r7, #23]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	32ae      	adds	r2, #174	; 0xae
 800defc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d014      	beq.n	800df30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800df06:	7dfa      	ldrb	r2, [r7, #23]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800df0e:	7dfa      	ldrb	r2, [r7, #23]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	32ae      	adds	r2, #174	; 0xae
 800df14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df18:	695b      	ldr	r3, [r3, #20]
 800df1a:	7afa      	ldrb	r2, [r7, #11]
 800df1c:	4611      	mov	r1, r2
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	4798      	blx	r3
 800df22:	4603      	mov	r3, r0
 800df24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800df26:	7dbb      	ldrb	r3, [r7, #22]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800df2c:	7dbb      	ldrb	r3, [r7, #22]
 800df2e:	e000      	b.n	800df32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3718      	adds	r7, #24
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}

0800df3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b084      	sub	sp, #16
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800df42:	2300      	movs	r3, #0
 800df44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df72:	2b00      	cmp	r3, #0
 800df74:	d014      	beq.n	800dfa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00e      	beq.n	800dfa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	6852      	ldr	r2, [r2, #4]
 800df8e:	b2d2      	uxtb	r2, r2
 800df90:	4611      	mov	r1, r2
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	4798      	blx	r3
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d001      	beq.n	800dfa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800df9c:	2303      	movs	r3, #3
 800df9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfa0:	2340      	movs	r3, #64	; 0x40
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f004 fc0d 	bl	80127c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2240      	movs	r2, #64	; 0x40
 800dfb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfbc:	2340      	movs	r3, #64	; 0x40
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	2180      	movs	r1, #128	; 0x80
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f004 fbff 	bl	80127c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2240      	movs	r2, #64	; 0x40
 800dfd2:	621a      	str	r2, [r3, #32]

  return ret;
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	78fa      	ldrb	r2, [r7, #3]
 800dfee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dffe:	b480      	push	{r7}
 800e000:	b083      	sub	sp, #12
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2204      	movs	r2, #4
 800e018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	2b04      	cmp	r3, #4
 800e03c:	d106      	bne.n	800e04c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e044:	b2da      	uxtb	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d110      	bne.n	800e090 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00b      	beq.n	800e090 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e07e:	69db      	ldr	r3, [r3, #28]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d005      	beq.n	800e090 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e08a:	69db      	ldr	r3, [r3, #28]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	32ae      	adds	r2, #174	; 0xae
 800e0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	e01c      	b.n	800e0f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d115      	bne.n	800e0f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	32ae      	adds	r2, #174	; 0xae
 800e0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00b      	beq.n	800e0f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32ae      	adds	r2, #174	; 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	6a1b      	ldr	r3, [r3, #32]
 800e0ec:	78fa      	ldrb	r2, [r7, #3]
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b082      	sub	sp, #8
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	460b      	mov	r3, r1
 800e108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	32ae      	adds	r2, #174	; 0xae
 800e114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e11c:	2303      	movs	r3, #3
 800e11e:	e01c      	b.n	800e15a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d115      	bne.n	800e158 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	32ae      	adds	r2, #174	; 0xae
 800e136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00b      	beq.n	800e158 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	32ae      	adds	r2, #174	; 0xae
 800e14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e150:	78fa      	ldrb	r2, [r7, #3]
 800e152:	4611      	mov	r1, r2
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00e      	beq.n	800e1b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	6852      	ldr	r2, [r2, #4]
 800e1a2:	b2d2      	uxtb	r2, r2
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	4798      	blx	r3
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e1b0:	2303      	movs	r3, #3
 800e1b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e1ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e1e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b086      	sub	sp, #24
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e206:	2300      	movs	r3, #0
 800e208:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	885b      	ldrh	r3, [r3, #2]
 800e20e:	b29a      	uxth	r2, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	b29b      	uxth	r3, r3
 800e216:	429a      	cmp	r2, r3
 800e218:	d920      	bls.n	800e25c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	b29b      	uxth	r3, r3
 800e220:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e222:	e013      	b.n	800e24c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e224:	f107 030a 	add.w	r3, r7, #10
 800e228:	4619      	mov	r1, r3
 800e22a:	6978      	ldr	r0, [r7, #20]
 800e22c:	f000 f81b 	bl	800e266 <USBD_GetNextDesc>
 800e230:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	785b      	ldrb	r3, [r3, #1]
 800e236:	2b05      	cmp	r3, #5
 800e238:	d108      	bne.n	800e24c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	789b      	ldrb	r3, [r3, #2]
 800e242:	78fa      	ldrb	r2, [r7, #3]
 800e244:	429a      	cmp	r2, r3
 800e246:	d008      	beq.n	800e25a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e248:	2300      	movs	r3, #0
 800e24a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	b29a      	uxth	r2, r3
 800e252:	897b      	ldrh	r3, [r7, #10]
 800e254:	429a      	cmp	r2, r3
 800e256:	d8e5      	bhi.n	800e224 <USBD_GetEpDesc+0x32>
 800e258:	e000      	b.n	800e25c <USBD_GetEpDesc+0x6a>
          break;
 800e25a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e25c:	693b      	ldr	r3, [r7, #16]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3718      	adds	r7, #24
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e266:	b480      	push	{r7}
 800e268:	b085      	sub	sp, #20
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	881a      	ldrh	r2, [r3, #0]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	4413      	add	r3, r2
 800e280:	b29a      	uxth	r2, r3
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4413      	add	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e292:	68fb      	ldr	r3, [r7, #12]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e2be:	8a3b      	ldrh	r3, [r7, #16]
 800e2c0:	021b      	lsls	r3, r3, #8
 800e2c2:	b21a      	sxth	r2, r3
 800e2c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	b21b      	sxth	r3, r3
 800e2cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e2ce:	89fb      	ldrh	r3, [r7, #14]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	371c      	adds	r7, #28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2f2:	2b40      	cmp	r3, #64	; 0x40
 800e2f4:	d005      	beq.n	800e302 <USBD_StdDevReq+0x26>
 800e2f6:	2b40      	cmp	r3, #64	; 0x40
 800e2f8:	d857      	bhi.n	800e3aa <USBD_StdDevReq+0xce>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00f      	beq.n	800e31e <USBD_StdDevReq+0x42>
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	d153      	bne.n	800e3aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	32ae      	adds	r2, #174	; 0xae
 800e30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	4798      	blx	r3
 800e318:	4603      	mov	r3, r0
 800e31a:	73fb      	strb	r3, [r7, #15]
      break;
 800e31c:	e04a      	b.n	800e3b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	785b      	ldrb	r3, [r3, #1]
 800e322:	2b09      	cmp	r3, #9
 800e324:	d83b      	bhi.n	800e39e <USBD_StdDevReq+0xc2>
 800e326:	a201      	add	r2, pc, #4	; (adr r2, 800e32c <USBD_StdDevReq+0x50>)
 800e328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32c:	0800e381 	.word	0x0800e381
 800e330:	0800e395 	.word	0x0800e395
 800e334:	0800e39f 	.word	0x0800e39f
 800e338:	0800e38b 	.word	0x0800e38b
 800e33c:	0800e39f 	.word	0x0800e39f
 800e340:	0800e35f 	.word	0x0800e35f
 800e344:	0800e355 	.word	0x0800e355
 800e348:	0800e39f 	.word	0x0800e39f
 800e34c:	0800e377 	.word	0x0800e377
 800e350:	0800e369 	.word	0x0800e369
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fa3c 	bl	800e7d4 <USBD_GetDescriptor>
          break;
 800e35c:	e024      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fbcb 	bl	800eafc <USBD_SetAddress>
          break;
 800e366:	e01f      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fc0a 	bl	800eb84 <USBD_SetConfig>
 800e370:	4603      	mov	r3, r0
 800e372:	73fb      	strb	r3, [r7, #15]
          break;
 800e374:	e018      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e376:	6839      	ldr	r1, [r7, #0]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 fcad 	bl	800ecd8 <USBD_GetConfig>
          break;
 800e37e:	e013      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fcde 	bl	800ed44 <USBD_GetStatus>
          break;
 800e388:	e00e      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e38a:	6839      	ldr	r1, [r7, #0]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fd0d 	bl	800edac <USBD_SetFeature>
          break;
 800e392:	e009      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fd31 	bl	800edfe <USBD_ClrFeature>
          break;
 800e39c:	e004      	b.n	800e3a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e39e:	6839      	ldr	r1, [r7, #0]
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 fd88 	bl	800eeb6 <USBD_CtlError>
          break;
 800e3a6:	bf00      	nop
      }
      break;
 800e3a8:	e004      	b.n	800e3b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e3aa:	6839      	ldr	r1, [r7, #0]
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 fd82 	bl	800eeb6 <USBD_CtlError>
      break;
 800e3b2:	bf00      	nop
  }

  return ret;
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop

0800e3c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3d6:	2b40      	cmp	r3, #64	; 0x40
 800e3d8:	d005      	beq.n	800e3e6 <USBD_StdItfReq+0x26>
 800e3da:	2b40      	cmp	r3, #64	; 0x40
 800e3dc:	d852      	bhi.n	800e484 <USBD_StdItfReq+0xc4>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <USBD_StdItfReq+0x26>
 800e3e2:	2b20      	cmp	r3, #32
 800e3e4:	d14e      	bne.n	800e484 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d840      	bhi.n	800e476 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	889b      	ldrh	r3, [r3, #4]
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d836      	bhi.n	800e46c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	889b      	ldrh	r3, [r3, #4]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	4619      	mov	r1, r3
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7ff fed9 	bl	800e1be <USBD_CoreFindIF>
 800e40c:	4603      	mov	r3, r0
 800e40e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e410:	7bbb      	ldrb	r3, [r7, #14]
 800e412:	2bff      	cmp	r3, #255	; 0xff
 800e414:	d01d      	beq.n	800e452 <USBD_StdItfReq+0x92>
 800e416:	7bbb      	ldrb	r3, [r7, #14]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d11a      	bne.n	800e452 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e41c:	7bba      	ldrb	r2, [r7, #14]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	32ae      	adds	r2, #174	; 0xae
 800e422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00f      	beq.n	800e44c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e42c:	7bba      	ldrb	r2, [r7, #14]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e434:	7bba      	ldrb	r2, [r7, #14]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	32ae      	adds	r2, #174	; 0xae
 800e43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	6839      	ldr	r1, [r7, #0]
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	4798      	blx	r3
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e44a:	e004      	b.n	800e456 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e44c:	2303      	movs	r3, #3
 800e44e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e450:	e001      	b.n	800e456 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e452:	2303      	movs	r3, #3
 800e454:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	88db      	ldrh	r3, [r3, #6]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d110      	bne.n	800e480 <USBD_StdItfReq+0xc0>
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10d      	bne.n	800e480 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fdf1 	bl	800f04c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e46a:	e009      	b.n	800e480 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fd21 	bl	800eeb6 <USBD_CtlError>
          break;
 800e474:	e004      	b.n	800e480 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e476:	6839      	ldr	r1, [r7, #0]
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 fd1c 	bl	800eeb6 <USBD_CtlError>
          break;
 800e47e:	e000      	b.n	800e482 <USBD_StdItfReq+0xc2>
          break;
 800e480:	bf00      	nop
      }
      break;
 800e482:	e004      	b.n	800e48e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e484:	6839      	ldr	r1, [r7, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fd15 	bl	800eeb6 <USBD_CtlError>
      break;
 800e48c:	bf00      	nop
  }

  return ret;
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	889b      	ldrh	r3, [r3, #4]
 800e4aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4b4:	2b40      	cmp	r3, #64	; 0x40
 800e4b6:	d007      	beq.n	800e4c8 <USBD_StdEPReq+0x30>
 800e4b8:	2b40      	cmp	r3, #64	; 0x40
 800e4ba:	f200 817f 	bhi.w	800e7bc <USBD_StdEPReq+0x324>
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d02a      	beq.n	800e518 <USBD_StdEPReq+0x80>
 800e4c2:	2b20      	cmp	r3, #32
 800e4c4:	f040 817a 	bne.w	800e7bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff fe83 	bl	800e1d8 <USBD_CoreFindEP>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4d6:	7b7b      	ldrb	r3, [r7, #13]
 800e4d8:	2bff      	cmp	r3, #255	; 0xff
 800e4da:	f000 8174 	beq.w	800e7c6 <USBD_StdEPReq+0x32e>
 800e4de:	7b7b      	ldrb	r3, [r7, #13]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f040 8170 	bne.w	800e7c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e4e6:	7b7a      	ldrb	r2, [r7, #13]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e4ee:	7b7a      	ldrb	r2, [r7, #13]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	32ae      	adds	r2, #174	; 0xae
 800e4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 8163 	beq.w	800e7c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e500:	7b7a      	ldrb	r2, [r7, #13]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	32ae      	adds	r2, #174	; 0xae
 800e506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3
 800e512:	4603      	mov	r3, r0
 800e514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e516:	e156      	b.n	800e7c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	785b      	ldrb	r3, [r3, #1]
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	d008      	beq.n	800e532 <USBD_StdEPReq+0x9a>
 800e520:	2b03      	cmp	r3, #3
 800e522:	f300 8145 	bgt.w	800e7b0 <USBD_StdEPReq+0x318>
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 809b 	beq.w	800e662 <USBD_StdEPReq+0x1ca>
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d03c      	beq.n	800e5aa <USBD_StdEPReq+0x112>
 800e530:	e13e      	b.n	800e7b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d002      	beq.n	800e544 <USBD_StdEPReq+0xac>
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d016      	beq.n	800e570 <USBD_StdEPReq+0xd8>
 800e542:	e02c      	b.n	800e59e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00d      	beq.n	800e566 <USBD_StdEPReq+0xce>
 800e54a:	7bbb      	ldrb	r3, [r7, #14]
 800e54c:	2b80      	cmp	r3, #128	; 0x80
 800e54e:	d00a      	beq.n	800e566 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e550:	7bbb      	ldrb	r3, [r7, #14]
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f004 f97b 	bl	8012850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e55a:	2180      	movs	r1, #128	; 0x80
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f004 f977 	bl	8012850 <USBD_LL_StallEP>
 800e562:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e564:	e020      	b.n	800e5a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 fca4 	bl	800eeb6 <USBD_CtlError>
              break;
 800e56e:	e01b      	b.n	800e5a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	885b      	ldrh	r3, [r3, #2]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10e      	bne.n	800e596 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e578:	7bbb      	ldrb	r3, [r7, #14]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00b      	beq.n	800e596 <USBD_StdEPReq+0xfe>
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
 800e580:	2b80      	cmp	r3, #128	; 0x80
 800e582:	d008      	beq.n	800e596 <USBD_StdEPReq+0xfe>
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	88db      	ldrh	r3, [r3, #6]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d104      	bne.n	800e596 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
 800e58e:	4619      	mov	r1, r3
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f004 f95d 	bl	8012850 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fd58 	bl	800f04c <USBD_CtlSendStatus>

              break;
 800e59c:	e004      	b.n	800e5a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 fc88 	bl	800eeb6 <USBD_CtlError>
              break;
 800e5a6:	bf00      	nop
          }
          break;
 800e5a8:	e107      	b.n	800e7ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	d002      	beq.n	800e5bc <USBD_StdEPReq+0x124>
 800e5b6:	2b03      	cmp	r3, #3
 800e5b8:	d016      	beq.n	800e5e8 <USBD_StdEPReq+0x150>
 800e5ba:	e04b      	b.n	800e654 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00d      	beq.n	800e5de <USBD_StdEPReq+0x146>
 800e5c2:	7bbb      	ldrb	r3, [r7, #14]
 800e5c4:	2b80      	cmp	r3, #128	; 0x80
 800e5c6:	d00a      	beq.n	800e5de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5c8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f004 f93f 	bl	8012850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5d2:	2180      	movs	r1, #128	; 0x80
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f004 f93b 	bl	8012850 <USBD_LL_StallEP>
 800e5da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5dc:	e040      	b.n	800e660 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fc68 	bl	800eeb6 <USBD_CtlError>
              break;
 800e5e6:	e03b      	b.n	800e660 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	885b      	ldrh	r3, [r3, #2]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d136      	bne.n	800e65e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e5f0:	7bbb      	ldrb	r3, [r7, #14]
 800e5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d004      	beq.n	800e604 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5fa:	7bbb      	ldrb	r3, [r7, #14]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f004 f945 	bl	801288e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fd21 	bl	800f04c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e60a:	7bbb      	ldrb	r3, [r7, #14]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff fde2 	bl	800e1d8 <USBD_CoreFindEP>
 800e614:	4603      	mov	r3, r0
 800e616:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e618:	7b7b      	ldrb	r3, [r7, #13]
 800e61a:	2bff      	cmp	r3, #255	; 0xff
 800e61c:	d01f      	beq.n	800e65e <USBD_StdEPReq+0x1c6>
 800e61e:	7b7b      	ldrb	r3, [r7, #13]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d11c      	bne.n	800e65e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e624:	7b7a      	ldrb	r2, [r7, #13]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e62c:	7b7a      	ldrb	r2, [r7, #13]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	32ae      	adds	r2, #174	; 0xae
 800e632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d010      	beq.n	800e65e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e63c:	7b7a      	ldrb	r2, [r7, #13]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	32ae      	adds	r2, #174	; 0xae
 800e642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	4798      	blx	r3
 800e64e:	4603      	mov	r3, r0
 800e650:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e652:	e004      	b.n	800e65e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 fc2d 	bl	800eeb6 <USBD_CtlError>
              break;
 800e65c:	e000      	b.n	800e660 <USBD_StdEPReq+0x1c8>
              break;
 800e65e:	bf00      	nop
          }
          break;
 800e660:	e0ab      	b.n	800e7ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d002      	beq.n	800e674 <USBD_StdEPReq+0x1dc>
 800e66e:	2b03      	cmp	r3, #3
 800e670:	d032      	beq.n	800e6d8 <USBD_StdEPReq+0x240>
 800e672:	e097      	b.n	800e7a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e674:	7bbb      	ldrb	r3, [r7, #14]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d007      	beq.n	800e68a <USBD_StdEPReq+0x1f2>
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	2b80      	cmp	r3, #128	; 0x80
 800e67e:	d004      	beq.n	800e68a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fc17 	bl	800eeb6 <USBD_CtlError>
                break;
 800e688:	e091      	b.n	800e7ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e68a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	da0b      	bge.n	800e6aa <USBD_StdEPReq+0x212>
 800e692:	7bbb      	ldrb	r3, [r7, #14]
 800e694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e698:	4613      	mov	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	3310      	adds	r3, #16
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	e00b      	b.n	800e6c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6aa:	7bbb      	ldrb	r3, [r7, #14]
 800e6ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4413      	add	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	4413      	add	r3, r2
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	2202      	movs	r2, #2
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 fc61 	bl	800ef98 <USBD_CtlSendData>
              break;
 800e6d6:	e06a      	b.n	800e7ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da11      	bge.n	800e704 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	f003 020f 	and.w	r2, r3, #15
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4413      	add	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	440b      	add	r3, r1
 800e6f2:	3324      	adds	r3, #36	; 0x24
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d117      	bne.n	800e72a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 fbda 	bl	800eeb6 <USBD_CtlError>
                  break;
 800e702:	e054      	b.n	800e7ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e704:	7bbb      	ldrb	r3, [r7, #14]
 800e706:	f003 020f 	and.w	r2, r3, #15
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	4613      	mov	r3, r2
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	4413      	add	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	440b      	add	r3, r1
 800e716:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d104      	bne.n	800e72a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e720:	6839      	ldr	r1, [r7, #0]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fbc7 	bl	800eeb6 <USBD_CtlError>
                  break;
 800e728:	e041      	b.n	800e7ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e72a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	da0b      	bge.n	800e74a <USBD_StdEPReq+0x2b2>
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e738:	4613      	mov	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	4413      	add	r3, r2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	3310      	adds	r3, #16
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	4413      	add	r3, r2
 800e746:	3304      	adds	r3, #4
 800e748:	e00b      	b.n	800e762 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e74a:	7bbb      	ldrb	r3, [r7, #14]
 800e74c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	4413      	add	r3, r2
 800e760:	3304      	adds	r3, #4
 800e762:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e764:	7bbb      	ldrb	r3, [r7, #14]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d002      	beq.n	800e770 <USBD_StdEPReq+0x2d8>
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
 800e76c:	2b80      	cmp	r3, #128	; 0x80
 800e76e:	d103      	bne.n	800e778 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2200      	movs	r2, #0
 800e774:	601a      	str	r2, [r3, #0]
 800e776:	e00e      	b.n	800e796 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f004 f8a5 	bl	80128cc <USBD_LL_IsStallEP>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d003      	beq.n	800e790 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2201      	movs	r2, #1
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	e002      	b.n	800e796 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2202      	movs	r2, #2
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fbfb 	bl	800ef98 <USBD_CtlSendData>
              break;
 800e7a2:	e004      	b.n	800e7ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 fb85 	bl	800eeb6 <USBD_CtlError>
              break;
 800e7ac:	bf00      	nop
          }
          break;
 800e7ae:	e004      	b.n	800e7ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e7b0:	6839      	ldr	r1, [r7, #0]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fb7f 	bl	800eeb6 <USBD_CtlError>
          break;
 800e7b8:	bf00      	nop
      }
      break;
 800e7ba:	e005      	b.n	800e7c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fb79 	bl	800eeb6 <USBD_CtlError>
      break;
 800e7c4:	e000      	b.n	800e7c8 <USBD_StdEPReq+0x330>
      break;
 800e7c6:	bf00      	nop
  }

  return ret;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	885b      	ldrh	r3, [r3, #2]
 800e7ee:	0a1b      	lsrs	r3, r3, #8
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	2b0e      	cmp	r3, #14
 800e7f6:	f200 8152 	bhi.w	800ea9e <USBD_GetDescriptor+0x2ca>
 800e7fa:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <USBD_GetDescriptor+0x2c>)
 800e7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e800:	0800e871 	.word	0x0800e871
 800e804:	0800e889 	.word	0x0800e889
 800e808:	0800e8c9 	.word	0x0800e8c9
 800e80c:	0800ea9f 	.word	0x0800ea9f
 800e810:	0800ea9f 	.word	0x0800ea9f
 800e814:	0800ea3f 	.word	0x0800ea3f
 800e818:	0800ea6b 	.word	0x0800ea6b
 800e81c:	0800ea9f 	.word	0x0800ea9f
 800e820:	0800ea9f 	.word	0x0800ea9f
 800e824:	0800ea9f 	.word	0x0800ea9f
 800e828:	0800ea9f 	.word	0x0800ea9f
 800e82c:	0800ea9f 	.word	0x0800ea9f
 800e830:	0800ea9f 	.word	0x0800ea9f
 800e834:	0800ea9f 	.word	0x0800ea9f
 800e838:	0800e83d 	.word	0x0800e83d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e842:	69db      	ldr	r3, [r3, #28]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00b      	beq.n	800e860 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84e:	69db      	ldr	r3, [r3, #28]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	7c12      	ldrb	r2, [r2, #16]
 800e854:	f107 0108 	add.w	r1, r7, #8
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
 800e85c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e85e:	e126      	b.n	800eaae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e860:	6839      	ldr	r1, [r7, #0]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 fb27 	bl	800eeb6 <USBD_CtlError>
        err++;
 800e868:	7afb      	ldrb	r3, [r7, #11]
 800e86a:	3301      	adds	r3, #1
 800e86c:	72fb      	strb	r3, [r7, #11]
      break;
 800e86e:	e11e      	b.n	800eaae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	7c12      	ldrb	r2, [r2, #16]
 800e87c:	f107 0108 	add.w	r1, r7, #8
 800e880:	4610      	mov	r0, r2
 800e882:	4798      	blx	r3
 800e884:	60f8      	str	r0, [r7, #12]
      break;
 800e886:	e112      	b.n	800eaae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	7c1b      	ldrb	r3, [r3, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10d      	bne.n	800e8ac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e898:	f107 0208 	add.w	r2, r7, #8
 800e89c:	4610      	mov	r0, r2
 800e89e:	4798      	blx	r3
 800e8a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e8aa:	e100      	b.n	800eaae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b4:	f107 0208 	add.w	r2, r7, #8
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	4798      	blx	r3
 800e8bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	2202      	movs	r2, #2
 800e8c4:	701a      	strb	r2, [r3, #0]
      break;
 800e8c6:	e0f2      	b.n	800eaae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	885b      	ldrh	r3, [r3, #2]
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b05      	cmp	r3, #5
 800e8d0:	f200 80ac 	bhi.w	800ea2c <USBD_GetDescriptor+0x258>
 800e8d4:	a201      	add	r2, pc, #4	; (adr r2, 800e8dc <USBD_GetDescriptor+0x108>)
 800e8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8da:	bf00      	nop
 800e8dc:	0800e8f5 	.word	0x0800e8f5
 800e8e0:	0800e929 	.word	0x0800e929
 800e8e4:	0800e95d 	.word	0x0800e95d
 800e8e8:	0800e991 	.word	0x0800e991
 800e8ec:	0800e9c5 	.word	0x0800e9c5
 800e8f0:	0800e9f9 	.word	0x0800e9f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00b      	beq.n	800e918 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	7c12      	ldrb	r2, [r2, #16]
 800e90c:	f107 0108 	add.w	r1, r7, #8
 800e910:	4610      	mov	r0, r2
 800e912:	4798      	blx	r3
 800e914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e916:	e091      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e918:	6839      	ldr	r1, [r7, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 facb 	bl	800eeb6 <USBD_CtlError>
            err++;
 800e920:	7afb      	ldrb	r3, [r7, #11]
 800e922:	3301      	adds	r3, #1
 800e924:	72fb      	strb	r3, [r7, #11]
          break;
 800e926:	e089      	b.n	800ea3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00b      	beq.n	800e94c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	7c12      	ldrb	r2, [r2, #16]
 800e940:	f107 0108 	add.w	r1, r7, #8
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
 800e948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e94a:	e077      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fab1 	bl	800eeb6 <USBD_CtlError>
            err++;
 800e954:	7afb      	ldrb	r3, [r7, #11]
 800e956:	3301      	adds	r3, #1
 800e958:	72fb      	strb	r3, [r7, #11]
          break;
 800e95a:	e06f      	b.n	800ea3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00b      	beq.n	800e980 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	7c12      	ldrb	r2, [r2, #16]
 800e974:	f107 0108 	add.w	r1, r7, #8
 800e978:	4610      	mov	r0, r2
 800e97a:	4798      	blx	r3
 800e97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e97e:	e05d      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e980:	6839      	ldr	r1, [r7, #0]
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fa97 	bl	800eeb6 <USBD_CtlError>
            err++;
 800e988:	7afb      	ldrb	r3, [r7, #11]
 800e98a:	3301      	adds	r3, #1
 800e98c:	72fb      	strb	r3, [r7, #11]
          break;
 800e98e:	e055      	b.n	800ea3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00b      	beq.n	800e9b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9a2:	691b      	ldr	r3, [r3, #16]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	7c12      	ldrb	r2, [r2, #16]
 800e9a8:	f107 0108 	add.w	r1, r7, #8
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	4798      	blx	r3
 800e9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9b2:	e043      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fa7d 	bl	800eeb6 <USBD_CtlError>
            err++;
 800e9bc:	7afb      	ldrb	r3, [r7, #11]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9c2:	e03b      	b.n	800ea3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ca:	695b      	ldr	r3, [r3, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9d6:	695b      	ldr	r3, [r3, #20]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	7c12      	ldrb	r2, [r2, #16]
 800e9dc:	f107 0108 	add.w	r1, r7, #8
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	4798      	blx	r3
 800e9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9e6:	e029      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fa63 	bl	800eeb6 <USBD_CtlError>
            err++;
 800e9f0:	7afb      	ldrb	r3, [r7, #11]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800e9f6:	e021      	b.n	800ea3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00b      	beq.n	800ea1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea0a:	699b      	ldr	r3, [r3, #24]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	7c12      	ldrb	r2, [r2, #16]
 800ea10:	f107 0108 	add.w	r1, r7, #8
 800ea14:	4610      	mov	r0, r2
 800ea16:	4798      	blx	r3
 800ea18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea1a:	e00f      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea1c:	6839      	ldr	r1, [r7, #0]
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 fa49 	bl	800eeb6 <USBD_CtlError>
            err++;
 800ea24:	7afb      	ldrb	r3, [r7, #11]
 800ea26:	3301      	adds	r3, #1
 800ea28:	72fb      	strb	r3, [r7, #11]
          break;
 800ea2a:	e007      	b.n	800ea3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fa41 	bl	800eeb6 <USBD_CtlError>
          err++;
 800ea34:	7afb      	ldrb	r3, [r7, #11]
 800ea36:	3301      	adds	r3, #1
 800ea38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ea3a:	bf00      	nop
      }
      break;
 800ea3c:	e037      	b.n	800eaae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	7c1b      	ldrb	r3, [r3, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d109      	bne.n	800ea5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea4e:	f107 0208 	add.w	r2, r7, #8
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
 800ea56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea58:	e029      	b.n	800eaae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 fa2a 	bl	800eeb6 <USBD_CtlError>
        err++;
 800ea62:	7afb      	ldrb	r3, [r7, #11]
 800ea64:	3301      	adds	r3, #1
 800ea66:	72fb      	strb	r3, [r7, #11]
      break;
 800ea68:	e021      	b.n	800eaae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7c1b      	ldrb	r3, [r3, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d10d      	bne.n	800ea8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea7a:	f107 0208 	add.w	r2, r7, #8
 800ea7e:	4610      	mov	r0, r2
 800ea80:	4798      	blx	r3
 800ea82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3301      	adds	r3, #1
 800ea88:	2207      	movs	r2, #7
 800ea8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea8c:	e00f      	b.n	800eaae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fa10 	bl	800eeb6 <USBD_CtlError>
        err++;
 800ea96:	7afb      	ldrb	r3, [r7, #11]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	72fb      	strb	r3, [r7, #11]
      break;
 800ea9c:	e007      	b.n	800eaae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ea9e:	6839      	ldr	r1, [r7, #0]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 fa08 	bl	800eeb6 <USBD_CtlError>
      err++;
 800eaa6:	7afb      	ldrb	r3, [r7, #11]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	72fb      	strb	r3, [r7, #11]
      break;
 800eaac:	bf00      	nop
  }

  if (err != 0U)
 800eaae:	7afb      	ldrb	r3, [r7, #11]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d11e      	bne.n	800eaf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	88db      	ldrh	r3, [r3, #6]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d016      	beq.n	800eaea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800eabc:	893b      	ldrh	r3, [r7, #8]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00e      	beq.n	800eae0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	88da      	ldrh	r2, [r3, #6]
 800eac6:	893b      	ldrh	r3, [r7, #8]
 800eac8:	4293      	cmp	r3, r2
 800eaca:	bf28      	it	cs
 800eacc:	4613      	movcs	r3, r2
 800eace:	b29b      	uxth	r3, r3
 800ead0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ead2:	893b      	ldrh	r3, [r7, #8]
 800ead4:	461a      	mov	r2, r3
 800ead6:	68f9      	ldr	r1, [r7, #12]
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 fa5d 	bl	800ef98 <USBD_CtlSendData>
 800eade:	e009      	b.n	800eaf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eae0:	6839      	ldr	r1, [r7, #0]
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f9e7 	bl	800eeb6 <USBD_CtlError>
 800eae8:	e004      	b.n	800eaf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 faae 	bl	800f04c <USBD_CtlSendStatus>
 800eaf0:	e000      	b.n	800eaf4 <USBD_GetDescriptor+0x320>
    return;
 800eaf2:	bf00      	nop
  }
}
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop

0800eafc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	889b      	ldrh	r3, [r3, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d131      	bne.n	800eb72 <USBD_SetAddress+0x76>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	88db      	ldrh	r3, [r3, #6]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d12d      	bne.n	800eb72 <USBD_SetAddress+0x76>
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	885b      	ldrh	r3, [r3, #2]
 800eb1a:	2b7f      	cmp	r3, #127	; 0x7f
 800eb1c:	d829      	bhi.n	800eb72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	885b      	ldrh	r3, [r3, #2]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b03      	cmp	r3, #3
 800eb34:	d104      	bne.n	800eb40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f9bc 	bl	800eeb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb3e:	e01d      	b.n	800eb7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7bfa      	ldrb	r2, [r7, #15]
 800eb44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f003 fee9 	bl	8012924 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa7a 	bl	800f04c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb58:	7bfb      	ldrb	r3, [r7, #15]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d004      	beq.n	800eb68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2202      	movs	r2, #2
 800eb62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb66:	e009      	b.n	800eb7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb70:	e004      	b.n	800eb7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f99e 	bl	800eeb6 <USBD_CtlError>
  }
}
 800eb7a:	bf00      	nop
 800eb7c:	bf00      	nop
 800eb7e:	3710      	adds	r7, #16
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	885b      	ldrh	r3, [r3, #2]
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	4b4e      	ldr	r3, [pc, #312]	; (800ecd4 <USBD_SetConfig+0x150>)
 800eb9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb9c:	4b4d      	ldr	r3, [pc, #308]	; (800ecd4 <USBD_SetConfig+0x150>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d905      	bls.n	800ebb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f985 	bl	800eeb6 <USBD_CtlError>
    return USBD_FAIL;
 800ebac:	2303      	movs	r3, #3
 800ebae:	e08c      	b.n	800ecca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d002      	beq.n	800ebc2 <USBD_SetConfig+0x3e>
 800ebbc:	2b03      	cmp	r3, #3
 800ebbe:	d029      	beq.n	800ec14 <USBD_SetConfig+0x90>
 800ebc0:	e075      	b.n	800ecae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ebc2:	4b44      	ldr	r3, [pc, #272]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d020      	beq.n	800ec0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ebca:	4b42      	ldr	r3, [pc, #264]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebd4:	4b3f      	ldr	r3, [pc, #252]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7fe ffbd 	bl	800db5a <USBD_SetClassConfig>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d008      	beq.n	800ebfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ebea:	6839      	ldr	r1, [r7, #0]
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 f962 	bl	800eeb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebfa:	e065      	b.n	800ecc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 fa25 	bl	800f04c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2203      	movs	r2, #3
 800ec06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec0a:	e05d      	b.n	800ecc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fa1d 	bl	800f04c <USBD_CtlSendStatus>
      break;
 800ec12:	e059      	b.n	800ecc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ec14:	4b2f      	ldr	r3, [pc, #188]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d112      	bne.n	800ec42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2202      	movs	r2, #2
 800ec20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ec24:	4b2b      	ldr	r3, [pc, #172]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec2e:	4b29      	ldr	r3, [pc, #164]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	4619      	mov	r1, r3
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7fe ffac 	bl	800db92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 fa06 	bl	800f04c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec40:	e042      	b.n	800ecc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ec42:	4b24      	ldr	r3, [pc, #144]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d02a      	beq.n	800eca6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7fe ff9a 	bl	800db92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec5e:	4b1d      	ldr	r3, [pc, #116]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec68:	4b1a      	ldr	r3, [pc, #104]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f7fe ff73 	bl	800db5a <USBD_SetClassConfig>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00f      	beq.n	800ec9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f918 	bl	800eeb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7fe ff7f 	bl	800db92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2202      	movs	r2, #2
 800ec98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec9c:	e014      	b.n	800ecc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 f9d4 	bl	800f04c <USBD_CtlSendStatus>
      break;
 800eca4:	e010      	b.n	800ecc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 f9d0 	bl	800f04c <USBD_CtlSendStatus>
      break;
 800ecac:	e00c      	b.n	800ecc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ecae:	6839      	ldr	r1, [r7, #0]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f900 	bl	800eeb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ecb6:	4b07      	ldr	r3, [pc, #28]	; (800ecd4 <USBD_SetConfig+0x150>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7fe ff68 	bl	800db92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc6:	bf00      	nop
  }

  return ret;
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	2000c808 	.word	0x2000c808

0800ecd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	88db      	ldrh	r3, [r3, #6]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d004      	beq.n	800ecf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ecea:	6839      	ldr	r1, [r7, #0]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f8e2 	bl	800eeb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ecf2:	e023      	b.n	800ed3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	2b02      	cmp	r3, #2
 800ecfe:	dc02      	bgt.n	800ed06 <USBD_GetConfig+0x2e>
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	dc03      	bgt.n	800ed0c <USBD_GetConfig+0x34>
 800ed04:	e015      	b.n	800ed32 <USBD_GetConfig+0x5a>
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d00b      	beq.n	800ed22 <USBD_GetConfig+0x4a>
 800ed0a:	e012      	b.n	800ed32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	3308      	adds	r3, #8
 800ed16:	2201      	movs	r2, #1
 800ed18:	4619      	mov	r1, r3
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f93c 	bl	800ef98 <USBD_CtlSendData>
        break;
 800ed20:	e00c      	b.n	800ed3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3304      	adds	r3, #4
 800ed26:	2201      	movs	r2, #1
 800ed28:	4619      	mov	r1, r3
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 f934 	bl	800ef98 <USBD_CtlSendData>
        break;
 800ed30:	e004      	b.n	800ed3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f8be 	bl	800eeb6 <USBD_CtlError>
        break;
 800ed3a:	bf00      	nop
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	3b01      	subs	r3, #1
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d81e      	bhi.n	800ed9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	88db      	ldrh	r3, [r3, #6]
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d004      	beq.n	800ed6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed64:	6839      	ldr	r1, [r7, #0]
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f8a5 	bl	800eeb6 <USBD_CtlError>
        break;
 800ed6c:	e01a      	b.n	800eda4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2201      	movs	r2, #1
 800ed72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d005      	beq.n	800ed8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	f043 0202 	orr.w	r2, r3, #2
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	330c      	adds	r3, #12
 800ed8e:	2202      	movs	r2, #2
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 f900 	bl	800ef98 <USBD_CtlSendData>
      break;
 800ed98:	e004      	b.n	800eda4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f88a 	bl	800eeb6 <USBD_CtlError>
      break;
 800eda2:	bf00      	nop
  }
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	885b      	ldrh	r3, [r3, #2]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d107      	bne.n	800edce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 f940 	bl	800f04c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800edcc:	e013      	b.n	800edf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	885b      	ldrh	r3, [r3, #2]
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d10b      	bne.n	800edee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	889b      	ldrh	r3, [r3, #4]
 800edda:	0a1b      	lsrs	r3, r3, #8
 800eddc:	b29b      	uxth	r3, r3
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f930 	bl	800f04c <USBD_CtlSendStatus>
}
 800edec:	e003      	b.n	800edf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 f860 	bl	800eeb6 <USBD_CtlError>
}
 800edf6:	bf00      	nop
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b082      	sub	sp, #8
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	3b01      	subs	r3, #1
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d80b      	bhi.n	800ee2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	885b      	ldrh	r3, [r3, #2]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d10c      	bne.n	800ee38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f910 	bl	800f04c <USBD_CtlSendStatus>
      }
      break;
 800ee2c:	e004      	b.n	800ee38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f840 	bl	800eeb6 <USBD_CtlError>
      break;
 800ee36:	e000      	b.n	800ee3a <USBD_ClrFeature+0x3c>
      break;
 800ee38:	bf00      	nop
  }
}
 800ee3a:	bf00      	nop
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b084      	sub	sp, #16
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	781a      	ldrb	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	781a      	ldrb	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7ff fa17 	bl	800e2a0 <SWAPBYTE>
 800ee72:	4603      	mov	r3, r0
 800ee74:	461a      	mov	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3301      	adds	r3, #1
 800ee84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7ff fa0a 	bl	800e2a0 <SWAPBYTE>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	461a      	mov	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	3301      	adds	r3, #1
 800ee98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f7ff f9fd 	bl	800e2a0 <SWAPBYTE>
 800eea6:	4603      	mov	r3, r0
 800eea8:	461a      	mov	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	80da      	strh	r2, [r3, #6]
}
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b082      	sub	sp, #8
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eec0:	2180      	movs	r1, #128	; 0x80
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f003 fcc4 	bl	8012850 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eec8:	2100      	movs	r1, #0
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f003 fcc0 	bl	8012850 <USBD_LL_StallEP>
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b086      	sub	sp, #24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eee4:	2300      	movs	r3, #0
 800eee6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d036      	beq.n	800ef5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eef2:	6938      	ldr	r0, [r7, #16]
 800eef4:	f000 f836 	bl	800ef64 <USBD_GetLen>
 800eef8:	4603      	mov	r3, r0
 800eefa:	3301      	adds	r3, #1
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ef06:	7dfb      	ldrb	r3, [r7, #23]
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	7812      	ldrb	r2, [r2, #0]
 800ef10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef12:	7dfb      	ldrb	r3, [r7, #23]
 800ef14:	3301      	adds	r3, #1
 800ef16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ef18:	7dfb      	ldrb	r3, [r7, #23]
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	2203      	movs	r2, #3
 800ef20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef22:	7dfb      	ldrb	r3, [r7, #23]
 800ef24:	3301      	adds	r3, #1
 800ef26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ef28:	e013      	b.n	800ef52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ef2a:	7dfb      	ldrb	r3, [r7, #23]
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	4413      	add	r3, r2
 800ef30:	693a      	ldr	r2, [r7, #16]
 800ef32:	7812      	ldrb	r2, [r2, #0]
 800ef34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	613b      	str	r3, [r7, #16]
    idx++;
 800ef3c:	7dfb      	ldrb	r3, [r7, #23]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ef42:	7dfb      	ldrb	r3, [r7, #23]
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	4413      	add	r3, r2
 800ef48:	2200      	movs	r2, #0
 800ef4a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ef4c:	7dfb      	ldrb	r3, [r7, #23]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e7      	bne.n	800ef2a <USBD_GetString+0x52>
 800ef5a:	e000      	b.n	800ef5e <USBD_GetString+0x86>
    return;
 800ef5c:	bf00      	nop
  }
}
 800ef5e:	3718      	adds	r7, #24
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef74:	e005      	b.n	800ef82 <USBD_GetLen+0x1e>
  {
    len++;
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1f5      	bne.n	800ef76 <USBD_GetLen+0x12>
  }

  return len;
 800ef8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2202      	movs	r2, #2
 800efa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	2100      	movs	r1, #0
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f003 fccf 	bl	8012962 <USBD_LL_Transmit>

  return USBD_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b084      	sub	sp, #16
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	60f8      	str	r0, [r7, #12]
 800efd6:	60b9      	str	r1, [r7, #8]
 800efd8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	2100      	movs	r1, #0
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f003 fcbe 	bl	8012962 <USBD_LL_Transmit>

  return USBD_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2203      	movs	r2, #3
 800f000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	68ba      	ldr	r2, [r7, #8]
 800f018:	2100      	movs	r1, #0
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f003 fcc2 	bl	80129a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	60f8      	str	r0, [r7, #12]
 800f032:	60b9      	str	r1, [r7, #8]
 800f034:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68ba      	ldr	r2, [r7, #8]
 800f03a:	2100      	movs	r1, #0
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f003 fcb1 	bl	80129a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f042:	2300      	movs	r3, #0
}
 800f044:	4618      	mov	r0, r3
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2204      	movs	r2, #4
 800f058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f05c:	2300      	movs	r3, #0
 800f05e:	2200      	movs	r2, #0
 800f060:	2100      	movs	r1, #0
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f003 fc7d 	bl	8012962 <USBD_LL_Transmit>

  return USBD_OK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}

0800f072 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b082      	sub	sp, #8
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2205      	movs	r2, #5
 800f07e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f082:	2300      	movs	r3, #0
 800f084:	2200      	movs	r2, #0
 800f086:	2100      	movs	r1, #0
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f003 fc8b 	bl	80129a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f08e:	2300      	movs	r3, #0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f098:	b480      	push	{r7}
 800f09a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f09c:	bf00      	nop
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
	...

0800f0a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f0a8:	b480      	push	{r7}
 800f0aa:	b085      	sub	sp, #20
 800f0ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0ae:	f3ef 8305 	mrs	r3, IPSR
 800f0b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10f      	bne.n	800f0da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0ba:	f3ef 8310 	mrs	r3, PRIMASK
 800f0be:	607b      	str	r3, [r7, #4]
  return(result);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d105      	bne.n	800f0d2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0c6:	f3ef 8311 	mrs	r3, BASEPRI
 800f0ca:	603b      	str	r3, [r7, #0]
  return(result);
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d007      	beq.n	800f0e2 <osKernelInitialize+0x3a>
 800f0d2:	4b0e      	ldr	r3, [pc, #56]	; (800f10c <osKernelInitialize+0x64>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d103      	bne.n	800f0e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f0da:	f06f 0305 	mvn.w	r3, #5
 800f0de:	60fb      	str	r3, [r7, #12]
 800f0e0:	e00c      	b.n	800f0fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f0e2:	4b0a      	ldr	r3, [pc, #40]	; (800f10c <osKernelInitialize+0x64>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d105      	bne.n	800f0f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f0ea:	4b08      	ldr	r3, [pc, #32]	; (800f10c <osKernelInitialize+0x64>)
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	e002      	b.n	800f0fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f0f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3714      	adds	r7, #20
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	2000c80c 	.word	0x2000c80c

0800f110 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f116:	f3ef 8305 	mrs	r3, IPSR
 800f11a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f11c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10f      	bne.n	800f142 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f122:	f3ef 8310 	mrs	r3, PRIMASK
 800f126:	607b      	str	r3, [r7, #4]
  return(result);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d105      	bne.n	800f13a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f12e:	f3ef 8311 	mrs	r3, BASEPRI
 800f132:	603b      	str	r3, [r7, #0]
  return(result);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d007      	beq.n	800f14a <osKernelStart+0x3a>
 800f13a:	4b0f      	ldr	r3, [pc, #60]	; (800f178 <osKernelStart+0x68>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d103      	bne.n	800f14a <osKernelStart+0x3a>
    stat = osErrorISR;
 800f142:	f06f 0305 	mvn.w	r3, #5
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	e010      	b.n	800f16c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f14a:	4b0b      	ldr	r3, [pc, #44]	; (800f178 <osKernelStart+0x68>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d109      	bne.n	800f166 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f152:	f7ff ffa1 	bl	800f098 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f156:	4b08      	ldr	r3, [pc, #32]	; (800f178 <osKernelStart+0x68>)
 800f158:	2202      	movs	r2, #2
 800f15a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f15c:	f001 f9c2 	bl	80104e4 <vTaskStartScheduler>
      stat = osOK;
 800f160:	2300      	movs	r3, #0
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	e002      	b.n	800f16c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f16a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f16c:	68fb      	ldr	r3, [r7, #12]
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	2000c80c 	.word	0x2000c80c

0800f17c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b090      	sub	sp, #64	; 0x40
 800f180:	af04      	add	r7, sp, #16
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f188:	2300      	movs	r3, #0
 800f18a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f18c:	f3ef 8305 	mrs	r3, IPSR
 800f190:	61fb      	str	r3, [r7, #28]
  return(result);
 800f192:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f194:	2b00      	cmp	r3, #0
 800f196:	f040 808f 	bne.w	800f2b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f19a:	f3ef 8310 	mrs	r3, PRIMASK
 800f19e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d105      	bne.n	800f1b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f1a6:	f3ef 8311 	mrs	r3, BASEPRI
 800f1aa:	617b      	str	r3, [r7, #20]
  return(result);
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d003      	beq.n	800f1ba <osThreadNew+0x3e>
 800f1b2:	4b44      	ldr	r3, [pc, #272]	; (800f2c4 <osThreadNew+0x148>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d07e      	beq.n	800f2b8 <osThreadNew+0x13c>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d07b      	beq.n	800f2b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f1c0:	2380      	movs	r3, #128	; 0x80
 800f1c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f1c4:	2318      	movs	r3, #24
 800f1c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d045      	beq.n	800f264 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <osThreadNew+0x6a>
        name = attr->name;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d002      	beq.n	800f1f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d008      	beq.n	800f20c <osThreadNew+0x90>
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	2b38      	cmp	r3, #56	; 0x38
 800f1fe:	d805      	bhi.n	800f20c <osThreadNew+0x90>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <osThreadNew+0x94>
        return (NULL);
 800f20c:	2300      	movs	r3, #0
 800f20e:	e054      	b.n	800f2ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d003      	beq.n	800f220 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	695b      	ldr	r3, [r3, #20]
 800f21c:	089b      	lsrs	r3, r3, #2
 800f21e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00e      	beq.n	800f246 <osThreadNew+0xca>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	2b5b      	cmp	r3, #91	; 0x5b
 800f22e:	d90a      	bls.n	800f246 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f234:	2b00      	cmp	r3, #0
 800f236:	d006      	beq.n	800f246 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	695b      	ldr	r3, [r3, #20]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <osThreadNew+0xca>
        mem = 1;
 800f240:	2301      	movs	r3, #1
 800f242:	623b      	str	r3, [r7, #32]
 800f244:	e010      	b.n	800f268 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10c      	bne.n	800f268 <osThreadNew+0xec>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d108      	bne.n	800f268 <osThreadNew+0xec>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d104      	bne.n	800f268 <osThreadNew+0xec>
          mem = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	623b      	str	r3, [r7, #32]
 800f262:	e001      	b.n	800f268 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f264:	2300      	movs	r3, #0
 800f266:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d110      	bne.n	800f290 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f276:	9202      	str	r2, [sp, #8]
 800f278:	9301      	str	r3, [sp, #4]
 800f27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f000 fed9 	bl	801003c <xTaskCreateStatic>
 800f28a:	4603      	mov	r3, r0
 800f28c:	613b      	str	r3, [r7, #16]
 800f28e:	e013      	b.n	800f2b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f290:	6a3b      	ldr	r3, [r7, #32]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d110      	bne.n	800f2b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f298:	b29a      	uxth	r2, r3
 800f29a:	f107 0310 	add.w	r3, r7, #16
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f000 ff2a 	bl	8010102 <xTaskCreate>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d001      	beq.n	800f2b8 <osThreadNew+0x13c>
          hTask = NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f2b8:	693b      	ldr	r3, [r7, #16]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3730      	adds	r7, #48	; 0x30
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	2000c80c 	.word	0x2000c80c

0800f2c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2d0:	f3ef 8305 	mrs	r3, IPSR
 800f2d4:	613b      	str	r3, [r7, #16]
  return(result);
 800f2d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d10f      	bne.n	800f2fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2dc:	f3ef 8310 	mrs	r3, PRIMASK
 800f2e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d105      	bne.n	800f2f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2e8:	f3ef 8311 	mrs	r3, BASEPRI
 800f2ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d007      	beq.n	800f304 <osDelay+0x3c>
 800f2f4:	4b0a      	ldr	r3, [pc, #40]	; (800f320 <osDelay+0x58>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d103      	bne.n	800f304 <osDelay+0x3c>
    stat = osErrorISR;
 800f2fc:	f06f 0305 	mvn.w	r3, #5
 800f300:	617b      	str	r3, [r7, #20]
 800f302:	e007      	b.n	800f314 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f304:	2300      	movs	r3, #0
 800f306:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d002      	beq.n	800f314 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f001 f8b2 	bl	8010478 <vTaskDelay>
    }
  }

  return (stat);
 800f314:	697b      	ldr	r3, [r7, #20]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	2000c80c 	.word	0x2000c80c

0800f324 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f002 fa3f 	bl	80117b0 <pvTimerGetTimerID>
 800f332:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <TimerCallback+0x22>
    callb->func (callb->arg);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	6852      	ldr	r2, [r2, #4]
 800f342:	4610      	mov	r0, r2
 800f344:	4798      	blx	r3
  }
}
 800f346:	bf00      	nop
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f350:	b580      	push	{r7, lr}
 800f352:	b08e      	sub	sp, #56	; 0x38
 800f354:	af02      	add	r7, sp, #8
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	607a      	str	r2, [r7, #4]
 800f35a:	603b      	str	r3, [r7, #0]
 800f35c:	460b      	mov	r3, r1
 800f35e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f360:	2300      	movs	r3, #0
 800f362:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f364:	f3ef 8305 	mrs	r3, IPSR
 800f368:	61bb      	str	r3, [r7, #24]
  return(result);
 800f36a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d16a      	bne.n	800f446 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f370:	f3ef 8310 	mrs	r3, PRIMASK
 800f374:	617b      	str	r3, [r7, #20]
  return(result);
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d105      	bne.n	800f388 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f37c:	f3ef 8311 	mrs	r3, BASEPRI
 800f380:	613b      	str	r3, [r7, #16]
  return(result);
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d003      	beq.n	800f390 <osTimerNew+0x40>
 800f388:	4b31      	ldr	r3, [pc, #196]	; (800f450 <osTimerNew+0x100>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d05a      	beq.n	800f446 <osTimerNew+0xf6>
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d057      	beq.n	800f446 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f396:	2008      	movs	r0, #8
 800f398:	f002 fc64 	bl	8011c64 <pvPortMalloc>
 800f39c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d050      	beq.n	800f446 <osTimerNew+0xf6>
      callb->func = func;
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f3b0:	7afb      	ldrb	r3, [r7, #11]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d102      	bne.n	800f3bc <osTimerNew+0x6c>
        reload = pdFALSE;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800f3ba:	e001      	b.n	800f3c0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800f3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3c4:	623b      	str	r3, [r7, #32]
      name = NULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d01c      	beq.n	800f40a <osTimerNew+0xba>
        if (attr->name != NULL) {
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d002      	beq.n	800f3de <osTimerNew+0x8e>
          name = attr->name;
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d006      	beq.n	800f3f4 <osTimerNew+0xa4>
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	2b2b      	cmp	r3, #43	; 0x2b
 800f3ec:	d902      	bls.n	800f3f4 <osTimerNew+0xa4>
          mem = 1;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	623b      	str	r3, [r7, #32]
 800f3f2:	e00c      	b.n	800f40e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d108      	bne.n	800f40e <osTimerNew+0xbe>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <osTimerNew+0xbe>
            mem = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	623b      	str	r3, [r7, #32]
 800f408:	e001      	b.n	800f40e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800f40e:	6a3b      	ldr	r3, [r7, #32]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d10c      	bne.n	800f42e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	9301      	str	r3, [sp, #4]
 800f41a:	4b0e      	ldr	r3, [pc, #56]	; (800f454 <osTimerNew+0x104>)
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f422:	2101      	movs	r1, #1
 800f424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f426:	f001 fe32 	bl	801108e <xTimerCreateStatic>
 800f42a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f42c:	e00b      	b.n	800f446 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800f42e:	6a3b      	ldr	r3, [r7, #32]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d108      	bne.n	800f446 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f434:	4b07      	ldr	r3, [pc, #28]	; (800f454 <osTimerNew+0x104>)
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43c:	2101      	movs	r1, #1
 800f43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f440:	f001 fe04 	bl	801104c <xTimerCreate>
 800f444:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f446:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3730      	adds	r7, #48	; 0x30
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	2000c80c 	.word	0x2000c80c
 800f454:	0800f325 	.word	0x0800f325

0800f458 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	4a07      	ldr	r2, [pc, #28]	; (800f484 <vApplicationGetIdleTaskMemory+0x2c>)
 800f468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	4a06      	ldr	r2, [pc, #24]	; (800f488 <vApplicationGetIdleTaskMemory+0x30>)
 800f46e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2280      	movs	r2, #128	; 0x80
 800f474:	601a      	str	r2, [r3, #0]
}
 800f476:	bf00      	nop
 800f478:	3714      	adds	r7, #20
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	2000c810 	.word	0x2000c810
 800f488:	2000c86c 	.word	0x2000c86c

0800f48c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4a07      	ldr	r2, [pc, #28]	; (800f4b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800f49c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	4a06      	ldr	r2, [pc, #24]	; (800f4bc <vApplicationGetTimerTaskMemory+0x30>)
 800f4a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4aa:	601a      	str	r2, [r3, #0]
}
 800f4ac:	bf00      	nop
 800f4ae:	3714      	adds	r7, #20
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	2000ca6c 	.word	0x2000ca6c
 800f4bc:	2000cac8 	.word	0x2000cac8

0800f4c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f103 0208 	add.w	r2, r3, #8
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f103 0208 	add.w	r2, r3, #8
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f103 0208 	add.w	r2, r3, #8
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f50e:	bf00      	nop
 800f510:	370c      	adds	r7, #12
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr

0800f51a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f51a:	b480      	push	{r7}
 800f51c:	b085      	sub	sp, #20
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	689a      	ldr	r2, [r3, #8]
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	683a      	ldr	r2, [r7, #0]
 800f544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	1c5a      	adds	r2, r3, #1
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	601a      	str	r2, [r3, #0]
}
 800f556:	bf00      	nop
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr

0800f562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f562:	b480      	push	{r7}
 800f564:	b085      	sub	sp, #20
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f578:	d103      	bne.n	800f582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	60fb      	str	r3, [r7, #12]
 800f580:	e00c      	b.n	800f59c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	3308      	adds	r3, #8
 800f586:	60fb      	str	r3, [r7, #12]
 800f588:	e002      	b.n	800f590 <vListInsert+0x2e>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	60fb      	str	r3, [r7, #12]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d2f6      	bcs.n	800f58a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	683a      	ldr	r2, [r7, #0]
 800f5aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	1c5a      	adds	r2, r3, #1
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	601a      	str	r2, [r3, #0]
}
 800f5c8:	bf00      	nop
 800f5ca:	3714      	adds	r7, #20
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	691b      	ldr	r3, [r3, #16]
 800f5e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	6892      	ldr	r2, [r2, #8]
 800f5ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	689b      	ldr	r3, [r3, #8]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	6852      	ldr	r2, [r2, #4]
 800f5f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d103      	bne.n	800f608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	689a      	ldr	r2, [r3, #8]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	1e5a      	subs	r2, r3, #1
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10c      	bne.n	800f656 <xQueueGenericReset+0x2e>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	b672      	cpsid	i
 800f642:	f383 8811 	msr	BASEPRI, r3
 800f646:	f3bf 8f6f 	isb	sy
 800f64a:	f3bf 8f4f 	dsb	sy
 800f64e:	b662      	cpsie	i
 800f650:	60bb      	str	r3, [r7, #8]
}
 800f652:	bf00      	nop
 800f654:	e7fe      	b.n	800f654 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f656:	f002 f9d9 	bl	8011a0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f662:	68f9      	ldr	r1, [r7, #12]
 800f664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f666:	fb01 f303 	mul.w	r3, r1, r3
 800f66a:	441a      	add	r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f686:	3b01      	subs	r3, #1
 800f688:	68f9      	ldr	r1, [r7, #12]
 800f68a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f68c:	fb01 f303 	mul.w	r3, r1, r3
 800f690:	441a      	add	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	22ff      	movs	r2, #255	; 0xff
 800f69a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	22ff      	movs	r2, #255	; 0xff
 800f6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d114      	bne.n	800f6d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d01a      	beq.n	800f6ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	3310      	adds	r3, #16
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f001 f9ab 	bl	8010a14 <xTaskRemoveFromEventList>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d012      	beq.n	800f6ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <xQueueGenericReset+0xd0>)
 800f6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	e009      	b.n	800f6ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3310      	adds	r3, #16
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7ff fef0 	bl	800f4c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3324      	adds	r3, #36	; 0x24
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff feeb 	bl	800f4c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6ea:	f002 f9c3 	bl	8011a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6ee:	2301      	movs	r3, #1
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	e000ed04 	.word	0xe000ed04

0800f6fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08e      	sub	sp, #56	; 0x38
 800f700:	af02      	add	r7, sp, #8
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
 800f708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10c      	bne.n	800f72a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	b672      	cpsid	i
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	b662      	cpsie	i
 800f724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f726:	bf00      	nop
 800f728:	e7fe      	b.n	800f728 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10c      	bne.n	800f74a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f734:	b672      	cpsid	i
 800f736:	f383 8811 	msr	BASEPRI, r3
 800f73a:	f3bf 8f6f 	isb	sy
 800f73e:	f3bf 8f4f 	dsb	sy
 800f742:	b662      	cpsie	i
 800f744:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f746:	bf00      	nop
 800f748:	e7fe      	b.n	800f748 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <xQueueGenericCreateStatic+0x5a>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d001      	beq.n	800f75a <xQueueGenericCreateStatic+0x5e>
 800f756:	2301      	movs	r3, #1
 800f758:	e000      	b.n	800f75c <xQueueGenericCreateStatic+0x60>
 800f75a:	2300      	movs	r3, #0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10c      	bne.n	800f77a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f764:	b672      	cpsid	i
 800f766:	f383 8811 	msr	BASEPRI, r3
 800f76a:	f3bf 8f6f 	isb	sy
 800f76e:	f3bf 8f4f 	dsb	sy
 800f772:	b662      	cpsie	i
 800f774:	623b      	str	r3, [r7, #32]
}
 800f776:	bf00      	nop
 800f778:	e7fe      	b.n	800f778 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d102      	bne.n	800f786 <xQueueGenericCreateStatic+0x8a>
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <xQueueGenericCreateStatic+0x8e>
 800f786:	2301      	movs	r3, #1
 800f788:	e000      	b.n	800f78c <xQueueGenericCreateStatic+0x90>
 800f78a:	2300      	movs	r3, #0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d10c      	bne.n	800f7aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	b672      	cpsid	i
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	b662      	cpsie	i
 800f7a4:	61fb      	str	r3, [r7, #28]
}
 800f7a6:	bf00      	nop
 800f7a8:	e7fe      	b.n	800f7a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f7aa:	2350      	movs	r3, #80	; 0x50
 800f7ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	2b50      	cmp	r3, #80	; 0x50
 800f7b2:	d00c      	beq.n	800f7ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	b672      	cpsid	i
 800f7ba:	f383 8811 	msr	BASEPRI, r3
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	b662      	cpsie	i
 800f7c8:	61bb      	str	r3, [r7, #24]
}
 800f7ca:	bf00      	nop
 800f7cc:	e7fe      	b.n	800f7cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f7ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00d      	beq.n	800f7f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	2201      	movs	r2, #1
 800f7de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f7e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	68b9      	ldr	r1, [r7, #8]
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 f805 	bl	800f800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3730      	adds	r7, #48	; 0x30
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
 800f80c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d103      	bne.n	800f81c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	69ba      	ldr	r2, [r7, #24]
 800f818:	601a      	str	r2, [r3, #0]
 800f81a:	e002      	b.n	800f822 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f82e:	2101      	movs	r1, #1
 800f830:	69b8      	ldr	r0, [r7, #24]
 800f832:	f7ff fef9 	bl	800f628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	78fa      	ldrb	r2, [r7, #3]
 800f83a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f83e:	bf00      	nop
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
	...

0800f848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b08e      	sub	sp, #56	; 0x38
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
 800f854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f856:	2300      	movs	r3, #0
 800f858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10c      	bne.n	800f87e <xQueueGenericSend+0x36>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f868:	b672      	cpsid	i
 800f86a:	f383 8811 	msr	BASEPRI, r3
 800f86e:	f3bf 8f6f 	isb	sy
 800f872:	f3bf 8f4f 	dsb	sy
 800f876:	b662      	cpsie	i
 800f878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f87a:	bf00      	nop
 800f87c:	e7fe      	b.n	800f87c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d103      	bne.n	800f88c <xQueueGenericSend+0x44>
 800f884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <xQueueGenericSend+0x48>
 800f88c:	2301      	movs	r3, #1
 800f88e:	e000      	b.n	800f892 <xQueueGenericSend+0x4a>
 800f890:	2300      	movs	r3, #0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10c      	bne.n	800f8b0 <xQueueGenericSend+0x68>
	__asm volatile
 800f896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89a:	b672      	cpsid	i
 800f89c:	f383 8811 	msr	BASEPRI, r3
 800f8a0:	f3bf 8f6f 	isb	sy
 800f8a4:	f3bf 8f4f 	dsb	sy
 800f8a8:	b662      	cpsie	i
 800f8aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f8ac:	bf00      	nop
 800f8ae:	e7fe      	b.n	800f8ae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d103      	bne.n	800f8be <xQueueGenericSend+0x76>
 800f8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d101      	bne.n	800f8c2 <xQueueGenericSend+0x7a>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e000      	b.n	800f8c4 <xQueueGenericSend+0x7c>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10c      	bne.n	800f8e2 <xQueueGenericSend+0x9a>
	__asm volatile
 800f8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8cc:	b672      	cpsid	i
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	b662      	cpsie	i
 800f8dc:	623b      	str	r3, [r7, #32]
}
 800f8de:	bf00      	nop
 800f8e0:	e7fe      	b.n	800f8e0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8e2:	f001 fa85 	bl	8010df0 <xTaskGetSchedulerState>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d102      	bne.n	800f8f2 <xQueueGenericSend+0xaa>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d101      	bne.n	800f8f6 <xQueueGenericSend+0xae>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e000      	b.n	800f8f8 <xQueueGenericSend+0xb0>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d10c      	bne.n	800f916 <xQueueGenericSend+0xce>
	__asm volatile
 800f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f900:	b672      	cpsid	i
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	b662      	cpsie	i
 800f910:	61fb      	str	r3, [r7, #28]
}
 800f912:	bf00      	nop
 800f914:	e7fe      	b.n	800f914 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f916:	f002 f879 	bl	8011a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f922:	429a      	cmp	r2, r3
 800f924:	d302      	bcc.n	800f92c <xQueueGenericSend+0xe4>
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	2b02      	cmp	r3, #2
 800f92a:	d129      	bne.n	800f980 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	68b9      	ldr	r1, [r7, #8]
 800f930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f932:	f000 fa15 	bl	800fd60 <prvCopyDataToQueue>
 800f936:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d010      	beq.n	800f962 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f942:	3324      	adds	r3, #36	; 0x24
 800f944:	4618      	mov	r0, r3
 800f946:	f001 f865 	bl	8010a14 <xTaskRemoveFromEventList>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d013      	beq.n	800f978 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f950:	4b3f      	ldr	r3, [pc, #252]	; (800fa50 <xQueueGenericSend+0x208>)
 800f952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f956:	601a      	str	r2, [r3, #0]
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	e00a      	b.n	800f978 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	2b00      	cmp	r3, #0
 800f966:	d007      	beq.n	800f978 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f968:	4b39      	ldr	r3, [pc, #228]	; (800fa50 <xQueueGenericSend+0x208>)
 800f96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f96e:	601a      	str	r2, [r3, #0]
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f978:	f002 f87c 	bl	8011a74 <vPortExitCritical>
				return pdPASS;
 800f97c:	2301      	movs	r3, #1
 800f97e:	e063      	b.n	800fa48 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d103      	bne.n	800f98e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f986:	f002 f875 	bl	8011a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f98a:	2300      	movs	r3, #0
 800f98c:	e05c      	b.n	800fa48 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f994:	f107 0314 	add.w	r3, r7, #20
 800f998:	4618      	mov	r0, r3
 800f99a:	f001 f8c9 	bl	8010b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9a2:	f002 f867 	bl	8011a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9a6:	f000 fe07 	bl	80105b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9aa:	f002 f82f 	bl	8011a0c <vPortEnterCritical>
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9b4:	b25b      	sxtb	r3, r3
 800f9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9ba:	d103      	bne.n	800f9c4 <xQueueGenericSend+0x17c>
 800f9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9ca:	b25b      	sxtb	r3, r3
 800f9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9d0:	d103      	bne.n	800f9da <xQueueGenericSend+0x192>
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9da:	f002 f84b 	bl	8011a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9de:	1d3a      	adds	r2, r7, #4
 800f9e0:	f107 0314 	add.w	r3, r7, #20
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f001 f8b8 	bl	8010b5c <xTaskCheckForTimeOut>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d124      	bne.n	800fa3c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f9f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9f4:	f000 faac 	bl	800ff50 <prvIsQueueFull>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d018      	beq.n	800fa30 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa00:	3310      	adds	r3, #16
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 ffb0 	bl	801096c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fa0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa0e:	f000 fa37 	bl	800fe80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fa12:	f000 fddf 	bl	80105d4 <xTaskResumeAll>
 800fa16:	4603      	mov	r3, r0
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f47f af7c 	bne.w	800f916 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fa1e:	4b0c      	ldr	r3, [pc, #48]	; (800fa50 <xQueueGenericSend+0x208>)
 800fa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa24:	601a      	str	r2, [r3, #0]
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	e772      	b.n	800f916 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa32:	f000 fa25 	bl	800fe80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa36:	f000 fdcd 	bl	80105d4 <xTaskResumeAll>
 800fa3a:	e76c      	b.n	800f916 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa3e:	f000 fa1f 	bl	800fe80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa42:	f000 fdc7 	bl	80105d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3738      	adds	r7, #56	; 0x38
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	e000ed04 	.word	0xe000ed04

0800fa54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08e      	sub	sp, #56	; 0x38
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
 800fa60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10c      	bne.n	800fa86 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa70:	b672      	cpsid	i
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	b662      	cpsie	i
 800fa80:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa82:	bf00      	nop
 800fa84:	e7fe      	b.n	800fa84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d103      	bne.n	800fa94 <xQueueGenericSendFromISR+0x40>
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d101      	bne.n	800fa98 <xQueueGenericSendFromISR+0x44>
 800fa94:	2301      	movs	r3, #1
 800fa96:	e000      	b.n	800fa9a <xQueueGenericSendFromISR+0x46>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10c      	bne.n	800fab8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa2:	b672      	cpsid	i
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	b662      	cpsie	i
 800fab2:	623b      	str	r3, [r7, #32]
}
 800fab4:	bf00      	nop
 800fab6:	e7fe      	b.n	800fab6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d103      	bne.n	800fac6 <xQueueGenericSendFromISR+0x72>
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d101      	bne.n	800faca <xQueueGenericSendFromISR+0x76>
 800fac6:	2301      	movs	r3, #1
 800fac8:	e000      	b.n	800facc <xQueueGenericSendFromISR+0x78>
 800faca:	2300      	movs	r3, #0
 800facc:	2b00      	cmp	r3, #0
 800face:	d10c      	bne.n	800faea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad4:	b672      	cpsid	i
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	b662      	cpsie	i
 800fae4:	61fb      	str	r3, [r7, #28]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800faea:	f002 f877 	bl	8011bdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800faee:	f3ef 8211 	mrs	r2, BASEPRI
 800faf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf6:	b672      	cpsid	i
 800faf8:	f383 8811 	msr	BASEPRI, r3
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	b662      	cpsie	i
 800fb06:	61ba      	str	r2, [r7, #24]
 800fb08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fb0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d302      	bcc.n	800fb20 <xQueueGenericSendFromISR+0xcc>
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	d12c      	bne.n	800fb7a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	68b9      	ldr	r1, [r7, #8]
 800fb2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb30:	f000 f916 	bl	800fd60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fb38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb3c:	d112      	bne.n	800fb64 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d016      	beq.n	800fb74 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	3324      	adds	r3, #36	; 0x24
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f000 ff62 	bl	8010a14 <xTaskRemoveFromEventList>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00e      	beq.n	800fb74 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00b      	beq.n	800fb74 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	e007      	b.n	800fb74 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb68:	3301      	adds	r3, #1
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	b25a      	sxtb	r2, r3
 800fb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fb74:	2301      	movs	r3, #1
 800fb76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fb78:	e001      	b.n	800fb7e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3738      	adds	r7, #56	; 0x38
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08c      	sub	sp, #48	; 0x30
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fba0:	2300      	movs	r3, #0
 800fba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10c      	bne.n	800fbc8 <xQueueReceive+0x34>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	b672      	cpsid	i
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	b662      	cpsie	i
 800fbc2:	623b      	str	r3, [r7, #32]
}
 800fbc4:	bf00      	nop
 800fbc6:	e7fe      	b.n	800fbc6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d103      	bne.n	800fbd6 <xQueueReceive+0x42>
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <xQueueReceive+0x46>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e000      	b.n	800fbdc <xQueueReceive+0x48>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10c      	bne.n	800fbfa <xQueueReceive+0x66>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	b672      	cpsid	i
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	b662      	cpsie	i
 800fbf4:	61fb      	str	r3, [r7, #28]
}
 800fbf6:	bf00      	nop
 800fbf8:	e7fe      	b.n	800fbf8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbfa:	f001 f8f9 	bl	8010df0 <xTaskGetSchedulerState>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d102      	bne.n	800fc0a <xQueueReceive+0x76>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <xQueueReceive+0x7a>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e000      	b.n	800fc10 <xQueueReceive+0x7c>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d10c      	bne.n	800fc2e <xQueueReceive+0x9a>
	__asm volatile
 800fc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc18:	b672      	cpsid	i
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	b662      	cpsie	i
 800fc28:	61bb      	str	r3, [r7, #24]
}
 800fc2a:	bf00      	nop
 800fc2c:	e7fe      	b.n	800fc2c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc2e:	f001 feed 	bl	8011a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d01f      	beq.n	800fc7e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc3e:	68b9      	ldr	r1, [r7, #8]
 800fc40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc42:	f000 f8f7 	bl	800fe34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	1e5a      	subs	r2, r3, #1
 800fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00f      	beq.n	800fc76 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc58:	3310      	adds	r3, #16
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 feda 	bl	8010a14 <xTaskRemoveFromEventList>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d007      	beq.n	800fc76 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fc66:	4b3d      	ldr	r3, [pc, #244]	; (800fd5c <xQueueReceive+0x1c8>)
 800fc68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	f3bf 8f4f 	dsb	sy
 800fc72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fc76:	f001 fefd 	bl	8011a74 <vPortExitCritical>
				return pdPASS;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e069      	b.n	800fd52 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc84:	f001 fef6 	bl	8011a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e062      	b.n	800fd52 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc92:	f107 0310 	add.w	r3, r7, #16
 800fc96:	4618      	mov	r0, r3
 800fc98:	f000 ff4a 	bl	8010b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fca0:	f001 fee8 	bl	8011a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fca4:	f000 fc88 	bl	80105b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fca8:	f001 feb0 	bl	8011a0c <vPortEnterCritical>
 800fcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcb2:	b25b      	sxtb	r3, r3
 800fcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcb8:	d103      	bne.n	800fcc2 <xQueueReceive+0x12e>
 800fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcc8:	b25b      	sxtb	r3, r3
 800fcca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcce:	d103      	bne.n	800fcd8 <xQueueReceive+0x144>
 800fcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcd8:	f001 fecc 	bl	8011a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcdc:	1d3a      	adds	r2, r7, #4
 800fcde:	f107 0310 	add.w	r3, r7, #16
 800fce2:	4611      	mov	r1, r2
 800fce4:	4618      	mov	r0, r3
 800fce6:	f000 ff39 	bl	8010b5c <xTaskCheckForTimeOut>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d123      	bne.n	800fd38 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcf2:	f000 f917 	bl	800ff24 <prvIsQueueEmpty>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d017      	beq.n	800fd2c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfe:	3324      	adds	r3, #36	; 0x24
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	4611      	mov	r1, r2
 800fd04:	4618      	mov	r0, r3
 800fd06:	f000 fe31 	bl	801096c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd0c:	f000 f8b8 	bl	800fe80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd10:	f000 fc60 	bl	80105d4 <xTaskResumeAll>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d189      	bne.n	800fc2e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800fd1a:	4b10      	ldr	r3, [pc, #64]	; (800fd5c <xQueueReceive+0x1c8>)
 800fd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	e780      	b.n	800fc2e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fd2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd2e:	f000 f8a7 	bl	800fe80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd32:	f000 fc4f 	bl	80105d4 <xTaskResumeAll>
 800fd36:	e77a      	b.n	800fc2e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd3a:	f000 f8a1 	bl	800fe80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd3e:	f000 fc49 	bl	80105d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd44:	f000 f8ee 	bl	800ff24 <prvIsQueueEmpty>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f43f af6f 	beq.w	800fc2e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fd50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3730      	adds	r7, #48	; 0x30
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	e000ed04 	.word	0xe000ed04

0800fd60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10d      	bne.n	800fd9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d14d      	bne.n	800fe22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f001 f84e 	bl	8010e2c <xTaskPriorityDisinherit>
 800fd90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	609a      	str	r2, [r3, #8]
 800fd98:	e043      	b.n	800fe22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d119      	bne.n	800fdd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6858      	ldr	r0, [r3, #4]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda8:	461a      	mov	r2, r3
 800fdaa:	68b9      	ldr	r1, [r7, #8]
 800fdac:	f011 f9d7 	bl	802115e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	685a      	ldr	r2, [r3, #4]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb8:	441a      	add	r2, r3
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	689b      	ldr	r3, [r3, #8]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d32b      	bcc.n	800fe22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	605a      	str	r2, [r3, #4]
 800fdd2:	e026      	b.n	800fe22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	68d8      	ldr	r0, [r3, #12]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fddc:	461a      	mov	r2, r3
 800fdde:	68b9      	ldr	r1, [r7, #8]
 800fde0:	f011 f9bd 	bl	802115e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	68da      	ldr	r2, [r3, #12]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdec:	425b      	negs	r3, r3
 800fdee:	441a      	add	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	68da      	ldr	r2, [r3, #12]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d207      	bcs.n	800fe10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	689a      	ldr	r2, [r3, #8]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe08:	425b      	negs	r3, r3
 800fe0a:	441a      	add	r2, r3
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b02      	cmp	r3, #2
 800fe14:	d105      	bne.n	800fe22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	1c5a      	adds	r2, r3, #1
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fe2a:	697b      	ldr	r3, [r7, #20]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3718      	adds	r7, #24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d018      	beq.n	800fe78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68da      	ldr	r2, [r3, #12]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe4e:	441a      	add	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	68da      	ldr	r2, [r3, #12]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d303      	bcc.n	800fe68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68d9      	ldr	r1, [r3, #12]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe70:	461a      	mov	r2, r3
 800fe72:	6838      	ldr	r0, [r7, #0]
 800fe74:	f011 f973 	bl	802115e <memcpy>
	}
}
 800fe78:	bf00      	nop
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fe88:	f001 fdc0 	bl	8011a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe94:	e011      	b.n	800feba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d012      	beq.n	800fec4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	3324      	adds	r3, #36	; 0x24
 800fea2:	4618      	mov	r0, r3
 800fea4:	f000 fdb6 	bl	8010a14 <xTaskRemoveFromEventList>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d001      	beq.n	800feb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800feae:	f000 febb 	bl	8010c28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800feb2:	7bfb      	ldrb	r3, [r7, #15]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800feba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	dce9      	bgt.n	800fe96 <prvUnlockQueue+0x16>
 800fec2:	e000      	b.n	800fec6 <prvUnlockQueue+0x46>
					break;
 800fec4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	22ff      	movs	r2, #255	; 0xff
 800feca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fece:	f001 fdd1 	bl	8011a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fed2:	f001 fd9b 	bl	8011a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fedc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fede:	e011      	b.n	800ff04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d012      	beq.n	800ff0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3310      	adds	r3, #16
 800feec:	4618      	mov	r0, r3
 800feee:	f000 fd91 	bl	8010a14 <xTaskRemoveFromEventList>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d001      	beq.n	800fefc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fef8:	f000 fe96 	bl	8010c28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fefc:	7bbb      	ldrb	r3, [r7, #14]
 800fefe:	3b01      	subs	r3, #1
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	dce9      	bgt.n	800fee0 <prvUnlockQueue+0x60>
 800ff0c:	e000      	b.n	800ff10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	22ff      	movs	r2, #255	; 0xff
 800ff14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff18:	f001 fdac 	bl	8011a74 <vPortExitCritical>
}
 800ff1c:	bf00      	nop
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff2c:	f001 fd6e 	bl	8011a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d102      	bne.n	800ff3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	e001      	b.n	800ff42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff42:	f001 fd97 	bl	8011a74 <vPortExitCritical>

	return xReturn;
 800ff46:	68fb      	ldr	r3, [r7, #12]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff58:	f001 fd58 	bl	8011a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d102      	bne.n	800ff6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	60fb      	str	r3, [r7, #12]
 800ff6c:	e001      	b.n	800ff72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff72:	f001 fd7f 	bl	8011a74 <vPortExitCritical>

	return xReturn;
 800ff76:	68fb      	ldr	r3, [r7, #12]
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60fb      	str	r3, [r7, #12]
 800ff8e:	e014      	b.n	800ffba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ff90:	4a0f      	ldr	r2, [pc, #60]	; (800ffd0 <vQueueAddToRegistry+0x50>)
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10b      	bne.n	800ffb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ff9c:	490c      	ldr	r1, [pc, #48]	; (800ffd0 <vQueueAddToRegistry+0x50>)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ffa6:	4a0a      	ldr	r2, [pc, #40]	; (800ffd0 <vQueueAddToRegistry+0x50>)
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	00db      	lsls	r3, r3, #3
 800ffac:	4413      	add	r3, r2
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ffb2:	e006      	b.n	800ffc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	60fb      	str	r3, [r7, #12]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2b07      	cmp	r3, #7
 800ffbe:	d9e7      	bls.n	800ff90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ffc0:	bf00      	nop
 800ffc2:	bf00      	nop
 800ffc4:	3714      	adds	r7, #20
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	2000cec8 	.word	0x2000cec8

0800ffd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ffe4:	f001 fd12 	bl	8011a0c <vPortEnterCritical>
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ffee:	b25b      	sxtb	r3, r3
 800fff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fff4:	d103      	bne.n	800fffe <vQueueWaitForMessageRestricted+0x2a>
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010004:	b25b      	sxtb	r3, r3
 8010006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801000a:	d103      	bne.n	8010014 <vQueueWaitForMessageRestricted+0x40>
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	2200      	movs	r2, #0
 8010010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010014:	f001 fd2e 	bl	8011a74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001c:	2b00      	cmp	r3, #0
 801001e:	d106      	bne.n	801002e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	3324      	adds	r3, #36	; 0x24
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	68b9      	ldr	r1, [r7, #8]
 8010028:	4618      	mov	r0, r3
 801002a:	f000 fcc5 	bl	80109b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801002e:	6978      	ldr	r0, [r7, #20]
 8010030:	f7ff ff26 	bl	800fe80 <prvUnlockQueue>
	}
 8010034:	bf00      	nop
 8010036:	3718      	adds	r7, #24
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801003c:	b580      	push	{r7, lr}
 801003e:	b08e      	sub	sp, #56	; 0x38
 8010040:	af04      	add	r7, sp, #16
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
 8010048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801004a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10c      	bne.n	801006a <xTaskCreateStatic+0x2e>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010054:	b672      	cpsid	i
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	b662      	cpsie	i
 8010064:	623b      	str	r3, [r7, #32]
}
 8010066:	bf00      	nop
 8010068:	e7fe      	b.n	8010068 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801006a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006c:	2b00      	cmp	r3, #0
 801006e:	d10c      	bne.n	801008a <xTaskCreateStatic+0x4e>
	__asm volatile
 8010070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010074:	b672      	cpsid	i
 8010076:	f383 8811 	msr	BASEPRI, r3
 801007a:	f3bf 8f6f 	isb	sy
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	b662      	cpsie	i
 8010084:	61fb      	str	r3, [r7, #28]
}
 8010086:	bf00      	nop
 8010088:	e7fe      	b.n	8010088 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801008a:	235c      	movs	r3, #92	; 0x5c
 801008c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	2b5c      	cmp	r3, #92	; 0x5c
 8010092:	d00c      	beq.n	80100ae <xTaskCreateStatic+0x72>
	__asm volatile
 8010094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010098:	b672      	cpsid	i
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	b662      	cpsie	i
 80100a8:	61bb      	str	r3, [r7, #24]
}
 80100aa:	bf00      	nop
 80100ac:	e7fe      	b.n	80100ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80100ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d01e      	beq.n	80100f4 <xTaskCreateStatic+0xb8>
 80100b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d01b      	beq.n	80100f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	2202      	movs	r2, #2
 80100ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80100ce:	2300      	movs	r3, #0
 80100d0:	9303      	str	r3, [sp, #12]
 80100d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d4:	9302      	str	r3, [sp, #8]
 80100d6:	f107 0314 	add.w	r3, r7, #20
 80100da:	9301      	str	r3, [sp, #4]
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	68b9      	ldr	r1, [r7, #8]
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f000 f850 	bl	801018c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80100ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100ee:	f000 f8df 	bl	80102b0 <prvAddNewTaskToReadyList>
 80100f2:	e001      	b.n	80100f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80100f8:	697b      	ldr	r3, [r7, #20]
	}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3728      	adds	r7, #40	; 0x28
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010102:	b580      	push	{r7, lr}
 8010104:	b08c      	sub	sp, #48	; 0x30
 8010106:	af04      	add	r7, sp, #16
 8010108:	60f8      	str	r0, [r7, #12]
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	603b      	str	r3, [r7, #0]
 801010e:	4613      	mov	r3, r2
 8010110:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010112:	88fb      	ldrh	r3, [r7, #6]
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4618      	mov	r0, r3
 8010118:	f001 fda4 	bl	8011c64 <pvPortMalloc>
 801011c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00e      	beq.n	8010142 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010124:	205c      	movs	r0, #92	; 0x5c
 8010126:	f001 fd9d 	bl	8011c64 <pvPortMalloc>
 801012a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d003      	beq.n	801013a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	697a      	ldr	r2, [r7, #20]
 8010136:	631a      	str	r2, [r3, #48]	; 0x30
 8010138:	e005      	b.n	8010146 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801013a:	6978      	ldr	r0, [r7, #20]
 801013c:	f001 fe5c 	bl	8011df8 <vPortFree>
 8010140:	e001      	b.n	8010146 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010142:	2300      	movs	r3, #0
 8010144:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d017      	beq.n	801017c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010154:	88fa      	ldrh	r2, [r7, #6]
 8010156:	2300      	movs	r3, #0
 8010158:	9303      	str	r3, [sp, #12]
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	9302      	str	r3, [sp, #8]
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	68b9      	ldr	r1, [r7, #8]
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	f000 f80e 	bl	801018c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010170:	69f8      	ldr	r0, [r7, #28]
 8010172:	f000 f89d 	bl	80102b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010176:	2301      	movs	r3, #1
 8010178:	61bb      	str	r3, [r7, #24]
 801017a:	e002      	b.n	8010182 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801017c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010180:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010182:	69bb      	ldr	r3, [r7, #24]
	}
 8010184:	4618      	mov	r0, r3
 8010186:	3720      	adds	r7, #32
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
 8010198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801019a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	461a      	mov	r2, r3
 80101a4:	21a5      	movs	r1, #165	; 0xa5
 80101a6:	f010 ff11 	bl	8020fcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101ae:	6879      	ldr	r1, [r7, #4]
 80101b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80101b4:	440b      	add	r3, r1
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4413      	add	r3, r2
 80101ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	f023 0307 	bic.w	r3, r3, #7
 80101c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00c      	beq.n	80101e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	b672      	cpsid	i
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	b662      	cpsie	i
 80101e2:	617b      	str	r3, [r7, #20]
}
 80101e4:	bf00      	nop
 80101e6:	e7fe      	b.n	80101e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d01f      	beq.n	801022e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80101ee:	2300      	movs	r3, #0
 80101f0:	61fb      	str	r3, [r7, #28]
 80101f2:	e012      	b.n	801021a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	4413      	add	r3, r2
 80101fa:	7819      	ldrb	r1, [r3, #0]
 80101fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	4413      	add	r3, r2
 8010202:	3334      	adds	r3, #52	; 0x34
 8010204:	460a      	mov	r2, r1
 8010206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	4413      	add	r3, r2
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d006      	beq.n	8010222 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	3301      	adds	r3, #1
 8010218:	61fb      	str	r3, [r7, #28]
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	2b0f      	cmp	r3, #15
 801021e:	d9e9      	bls.n	80101f4 <prvInitialiseNewTask+0x68>
 8010220:	e000      	b.n	8010224 <prvInitialiseNewTask+0x98>
			{
				break;
 8010222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010226:	2200      	movs	r2, #0
 8010228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801022c:	e003      	b.n	8010236 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801022e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010230:	2200      	movs	r2, #0
 8010232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010238:	2b37      	cmp	r3, #55	; 0x37
 801023a:	d901      	bls.n	8010240 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801023c:	2337      	movs	r3, #55	; 0x37
 801023e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801024a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801024c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024e:	2200      	movs	r2, #0
 8010250:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010254:	3304      	adds	r3, #4
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff f952 	bl	800f500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801025c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025e:	3318      	adds	r3, #24
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff f94d 	bl	800f500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801026a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801026c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801027a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027e:	2200      	movs	r2, #0
 8010280:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010284:	2200      	movs	r2, #0
 8010286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	68f9      	ldr	r1, [r7, #12]
 801028e:	69b8      	ldr	r0, [r7, #24]
 8010290:	f001 fab0 	bl	80117f4 <pxPortInitialiseStack>
 8010294:	4602      	mov	r2, r0
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801029a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80102a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102a6:	bf00      	nop
 80102a8:	3720      	adds	r7, #32
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
	...

080102b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80102b8:	f001 fba8 	bl	8011a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80102bc:	4b2d      	ldr	r3, [pc, #180]	; (8010374 <prvAddNewTaskToReadyList+0xc4>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3301      	adds	r3, #1
 80102c2:	4a2c      	ldr	r2, [pc, #176]	; (8010374 <prvAddNewTaskToReadyList+0xc4>)
 80102c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80102c6:	4b2c      	ldr	r3, [pc, #176]	; (8010378 <prvAddNewTaskToReadyList+0xc8>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d109      	bne.n	80102e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80102ce:	4a2a      	ldr	r2, [pc, #168]	; (8010378 <prvAddNewTaskToReadyList+0xc8>)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80102d4:	4b27      	ldr	r3, [pc, #156]	; (8010374 <prvAddNewTaskToReadyList+0xc4>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d110      	bne.n	80102fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80102dc:	f000 fcc8 	bl	8010c70 <prvInitialiseTaskLists>
 80102e0:	e00d      	b.n	80102fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80102e2:	4b26      	ldr	r3, [pc, #152]	; (801037c <prvAddNewTaskToReadyList+0xcc>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d109      	bne.n	80102fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80102ea:	4b23      	ldr	r3, [pc, #140]	; (8010378 <prvAddNewTaskToReadyList+0xc8>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d802      	bhi.n	80102fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80102f8:	4a1f      	ldr	r2, [pc, #124]	; (8010378 <prvAddNewTaskToReadyList+0xc8>)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80102fe:	4b20      	ldr	r3, [pc, #128]	; (8010380 <prvAddNewTaskToReadyList+0xd0>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3301      	adds	r3, #1
 8010304:	4a1e      	ldr	r2, [pc, #120]	; (8010380 <prvAddNewTaskToReadyList+0xd0>)
 8010306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010308:	4b1d      	ldr	r3, [pc, #116]	; (8010380 <prvAddNewTaskToReadyList+0xd0>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010314:	4b1b      	ldr	r3, [pc, #108]	; (8010384 <prvAddNewTaskToReadyList+0xd4>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	429a      	cmp	r2, r3
 801031a:	d903      	bls.n	8010324 <prvAddNewTaskToReadyList+0x74>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010320:	4a18      	ldr	r2, [pc, #96]	; (8010384 <prvAddNewTaskToReadyList+0xd4>)
 8010322:	6013      	str	r3, [r2, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010328:	4613      	mov	r3, r2
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	4413      	add	r3, r2
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	4a15      	ldr	r2, [pc, #84]	; (8010388 <prvAddNewTaskToReadyList+0xd8>)
 8010332:	441a      	add	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	3304      	adds	r3, #4
 8010338:	4619      	mov	r1, r3
 801033a:	4610      	mov	r0, r2
 801033c:	f7ff f8ed 	bl	800f51a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010340:	f001 fb98 	bl	8011a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010344:	4b0d      	ldr	r3, [pc, #52]	; (801037c <prvAddNewTaskToReadyList+0xcc>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00e      	beq.n	801036a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801034c:	4b0a      	ldr	r3, [pc, #40]	; (8010378 <prvAddNewTaskToReadyList+0xc8>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010356:	429a      	cmp	r2, r3
 8010358:	d207      	bcs.n	801036a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801035a:	4b0c      	ldr	r3, [pc, #48]	; (801038c <prvAddNewTaskToReadyList+0xdc>)
 801035c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	2000d3dc 	.word	0x2000d3dc
 8010378:	2000cf08 	.word	0x2000cf08
 801037c:	2000d3e8 	.word	0x2000d3e8
 8010380:	2000d3f8 	.word	0x2000d3f8
 8010384:	2000d3e4 	.word	0x2000d3e4
 8010388:	2000cf0c 	.word	0x2000cf0c
 801038c:	e000ed04 	.word	0xe000ed04

08010390 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010398:	f001 fb38 	bl	8011a0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d102      	bne.n	80103a8 <vTaskDelete+0x18>
 80103a2:	4b2d      	ldr	r3, [pc, #180]	; (8010458 <vTaskDelete+0xc8>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	e000      	b.n	80103aa <vTaskDelete+0x1a>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	3304      	adds	r3, #4
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7ff f90f 	bl	800f5d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d004      	beq.n	80103c8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	3318      	adds	r3, #24
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7ff f906 	bl	800f5d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80103c8:	4b24      	ldr	r3, [pc, #144]	; (801045c <vTaskDelete+0xcc>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	3301      	adds	r3, #1
 80103ce:	4a23      	ldr	r2, [pc, #140]	; (801045c <vTaskDelete+0xcc>)
 80103d0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80103d2:	4b21      	ldr	r3, [pc, #132]	; (8010458 <vTaskDelete+0xc8>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	429a      	cmp	r2, r3
 80103da:	d10b      	bne.n	80103f4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	3304      	adds	r3, #4
 80103e0:	4619      	mov	r1, r3
 80103e2:	481f      	ldr	r0, [pc, #124]	; (8010460 <vTaskDelete+0xd0>)
 80103e4:	f7ff f899 	bl	800f51a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80103e8:	4b1e      	ldr	r3, [pc, #120]	; (8010464 <vTaskDelete+0xd4>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3301      	adds	r3, #1
 80103ee:	4a1d      	ldr	r2, [pc, #116]	; (8010464 <vTaskDelete+0xd4>)
 80103f0:	6013      	str	r3, [r2, #0]
 80103f2:	e009      	b.n	8010408 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80103f4:	4b1c      	ldr	r3, [pc, #112]	; (8010468 <vTaskDelete+0xd8>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	4a1b      	ldr	r2, [pc, #108]	; (8010468 <vTaskDelete+0xd8>)
 80103fc:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f000 fca4 	bl	8010d4c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010404:	f000 fcd4 	bl	8010db0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8010408:	f001 fb34 	bl	8011a74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801040c:	4b17      	ldr	r3, [pc, #92]	; (801046c <vTaskDelete+0xdc>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d01d      	beq.n	8010450 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8010414:	4b10      	ldr	r3, [pc, #64]	; (8010458 <vTaskDelete+0xc8>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	429a      	cmp	r2, r3
 801041c:	d118      	bne.n	8010450 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801041e:	4b14      	ldr	r3, [pc, #80]	; (8010470 <vTaskDelete+0xe0>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00c      	beq.n	8010440 <vTaskDelete+0xb0>
	__asm volatile
 8010426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042a:	b672      	cpsid	i
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	b662      	cpsie	i
 801043a:	60bb      	str	r3, [r7, #8]
}
 801043c:	bf00      	nop
 801043e:	e7fe      	b.n	801043e <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8010440:	4b0c      	ldr	r3, [pc, #48]	; (8010474 <vTaskDelete+0xe4>)
 8010442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010450:	bf00      	nop
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	2000cf08 	.word	0x2000cf08
 801045c:	2000d3f8 	.word	0x2000d3f8
 8010460:	2000d3b0 	.word	0x2000d3b0
 8010464:	2000d3c4 	.word	0x2000d3c4
 8010468:	2000d3dc 	.word	0x2000d3dc
 801046c:	2000d3e8 	.word	0x2000d3e8
 8010470:	2000d404 	.word	0x2000d404
 8010474:	e000ed04 	.word	0xe000ed04

08010478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010480:	2300      	movs	r3, #0
 8010482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d019      	beq.n	80104be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801048a:	4b14      	ldr	r3, [pc, #80]	; (80104dc <vTaskDelay+0x64>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00c      	beq.n	80104ac <vTaskDelay+0x34>
	__asm volatile
 8010492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010496:	b672      	cpsid	i
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	b662      	cpsie	i
 80104a6:	60bb      	str	r3, [r7, #8]
}
 80104a8:	bf00      	nop
 80104aa:	e7fe      	b.n	80104aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80104ac:	f000 f884 	bl	80105b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80104b0:	2100      	movs	r1, #0
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 fd2c 	bl	8010f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80104b8:	f000 f88c 	bl	80105d4 <xTaskResumeAll>
 80104bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d107      	bne.n	80104d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80104c4:	4b06      	ldr	r3, [pc, #24]	; (80104e0 <vTaskDelay+0x68>)
 80104c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104d4:	bf00      	nop
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	2000d404 	.word	0x2000d404
 80104e0:	e000ed04 	.word	0xe000ed04

080104e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08a      	sub	sp, #40	; 0x28
 80104e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104f2:	463a      	mov	r2, r7
 80104f4:	1d39      	adds	r1, r7, #4
 80104f6:	f107 0308 	add.w	r3, r7, #8
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fe ffac 	bl	800f458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	9202      	str	r2, [sp, #8]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	2300      	movs	r3, #0
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	2300      	movs	r3, #0
 8010510:	460a      	mov	r2, r1
 8010512:	4923      	ldr	r1, [pc, #140]	; (80105a0 <vTaskStartScheduler+0xbc>)
 8010514:	4823      	ldr	r0, [pc, #140]	; (80105a4 <vTaskStartScheduler+0xc0>)
 8010516:	f7ff fd91 	bl	801003c <xTaskCreateStatic>
 801051a:	4603      	mov	r3, r0
 801051c:	4a22      	ldr	r2, [pc, #136]	; (80105a8 <vTaskStartScheduler+0xc4>)
 801051e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010520:	4b21      	ldr	r3, [pc, #132]	; (80105a8 <vTaskStartScheduler+0xc4>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010528:	2301      	movs	r3, #1
 801052a:	617b      	str	r3, [r7, #20]
 801052c:	e001      	b.n	8010532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801052e:	2300      	movs	r3, #0
 8010530:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d102      	bne.n	801053e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010538:	f000 fd3e 	bl	8010fb8 <xTimerCreateTimerTask>
 801053c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d118      	bne.n	8010576 <vTaskStartScheduler+0x92>
	__asm volatile
 8010544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010548:	b672      	cpsid	i
 801054a:	f383 8811 	msr	BASEPRI, r3
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	b662      	cpsie	i
 8010558:	613b      	str	r3, [r7, #16]
}
 801055a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801055c:	4b13      	ldr	r3, [pc, #76]	; (80105ac <vTaskStartScheduler+0xc8>)
 801055e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010562:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010564:	4b12      	ldr	r3, [pc, #72]	; (80105b0 <vTaskStartScheduler+0xcc>)
 8010566:	2201      	movs	r2, #1
 8010568:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801056a:	4b12      	ldr	r3, [pc, #72]	; (80105b4 <vTaskStartScheduler+0xd0>)
 801056c:	2200      	movs	r2, #0
 801056e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010570:	f001 f9ce 	bl	8011910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010574:	e010      	b.n	8010598 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801057c:	d10c      	bne.n	8010598 <vTaskStartScheduler+0xb4>
	__asm volatile
 801057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010582:	b672      	cpsid	i
 8010584:	f383 8811 	msr	BASEPRI, r3
 8010588:	f3bf 8f6f 	isb	sy
 801058c:	f3bf 8f4f 	dsb	sy
 8010590:	b662      	cpsie	i
 8010592:	60fb      	str	r3, [r7, #12]
}
 8010594:	bf00      	nop
 8010596:	e7fe      	b.n	8010596 <vTaskStartScheduler+0xb2>
}
 8010598:	bf00      	nop
 801059a:	3718      	adds	r7, #24
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	080221d8 	.word	0x080221d8
 80105a4:	08010c41 	.word	0x08010c41
 80105a8:	2000d400 	.word	0x2000d400
 80105ac:	2000d3fc 	.word	0x2000d3fc
 80105b0:	2000d3e8 	.word	0x2000d3e8
 80105b4:	2000d3e0 	.word	0x2000d3e0

080105b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80105b8:	b480      	push	{r7}
 80105ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80105bc:	4b04      	ldr	r3, [pc, #16]	; (80105d0 <vTaskSuspendAll+0x18>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3301      	adds	r3, #1
 80105c2:	4a03      	ldr	r2, [pc, #12]	; (80105d0 <vTaskSuspendAll+0x18>)
 80105c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80105c6:	bf00      	nop
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr
 80105d0:	2000d404 	.word	0x2000d404

080105d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105da:	2300      	movs	r3, #0
 80105dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105de:	2300      	movs	r3, #0
 80105e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105e2:	4b43      	ldr	r3, [pc, #268]	; (80106f0 <xTaskResumeAll+0x11c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10c      	bne.n	8010604 <xTaskResumeAll+0x30>
	__asm volatile
 80105ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ee:	b672      	cpsid	i
 80105f0:	f383 8811 	msr	BASEPRI, r3
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	f3bf 8f4f 	dsb	sy
 80105fc:	b662      	cpsie	i
 80105fe:	603b      	str	r3, [r7, #0]
}
 8010600:	bf00      	nop
 8010602:	e7fe      	b.n	8010602 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010604:	f001 fa02 	bl	8011a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010608:	4b39      	ldr	r3, [pc, #228]	; (80106f0 <xTaskResumeAll+0x11c>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3b01      	subs	r3, #1
 801060e:	4a38      	ldr	r2, [pc, #224]	; (80106f0 <xTaskResumeAll+0x11c>)
 8010610:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010612:	4b37      	ldr	r3, [pc, #220]	; (80106f0 <xTaskResumeAll+0x11c>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d162      	bne.n	80106e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801061a:	4b36      	ldr	r3, [pc, #216]	; (80106f4 <xTaskResumeAll+0x120>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d05e      	beq.n	80106e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010622:	e02f      	b.n	8010684 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010624:	4b34      	ldr	r3, [pc, #208]	; (80106f8 <xTaskResumeAll+0x124>)
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	3318      	adds	r3, #24
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe ffcf 	bl	800f5d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3304      	adds	r3, #4
 801063a:	4618      	mov	r0, r3
 801063c:	f7fe ffca 	bl	800f5d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010644:	4b2d      	ldr	r3, [pc, #180]	; (80106fc <xTaskResumeAll+0x128>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	429a      	cmp	r2, r3
 801064a:	d903      	bls.n	8010654 <xTaskResumeAll+0x80>
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010650:	4a2a      	ldr	r2, [pc, #168]	; (80106fc <xTaskResumeAll+0x128>)
 8010652:	6013      	str	r3, [r2, #0]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010658:	4613      	mov	r3, r2
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	4a27      	ldr	r2, [pc, #156]	; (8010700 <xTaskResumeAll+0x12c>)
 8010662:	441a      	add	r2, r3
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	3304      	adds	r3, #4
 8010668:	4619      	mov	r1, r3
 801066a:	4610      	mov	r0, r2
 801066c:	f7fe ff55 	bl	800f51a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010674:	4b23      	ldr	r3, [pc, #140]	; (8010704 <xTaskResumeAll+0x130>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067a:	429a      	cmp	r2, r3
 801067c:	d302      	bcc.n	8010684 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801067e:	4b22      	ldr	r3, [pc, #136]	; (8010708 <xTaskResumeAll+0x134>)
 8010680:	2201      	movs	r2, #1
 8010682:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010684:	4b1c      	ldr	r3, [pc, #112]	; (80106f8 <xTaskResumeAll+0x124>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1cb      	bne.n	8010624 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010692:	f000 fb8d 	bl	8010db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010696:	4b1d      	ldr	r3, [pc, #116]	; (801070c <xTaskResumeAll+0x138>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d010      	beq.n	80106c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80106a2:	f000 f847 	bl	8010734 <xTaskIncrementTick>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80106ac:	4b16      	ldr	r3, [pc, #88]	; (8010708 <xTaskResumeAll+0x134>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1f1      	bne.n	80106a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80106be:	4b13      	ldr	r3, [pc, #76]	; (801070c <xTaskResumeAll+0x138>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80106c4:	4b10      	ldr	r3, [pc, #64]	; (8010708 <xTaskResumeAll+0x134>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d009      	beq.n	80106e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80106cc:	2301      	movs	r3, #1
 80106ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80106d0:	4b0f      	ldr	r3, [pc, #60]	; (8010710 <xTaskResumeAll+0x13c>)
 80106d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d6:	601a      	str	r2, [r3, #0]
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106e0:	f001 f9c8 	bl	8011a74 <vPortExitCritical>

	return xAlreadyYielded;
 80106e4:	68bb      	ldr	r3, [r7, #8]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	2000d404 	.word	0x2000d404
 80106f4:	2000d3dc 	.word	0x2000d3dc
 80106f8:	2000d39c 	.word	0x2000d39c
 80106fc:	2000d3e4 	.word	0x2000d3e4
 8010700:	2000cf0c 	.word	0x2000cf0c
 8010704:	2000cf08 	.word	0x2000cf08
 8010708:	2000d3f0 	.word	0x2000d3f0
 801070c:	2000d3ec 	.word	0x2000d3ec
 8010710:	e000ed04 	.word	0xe000ed04

08010714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801071a:	4b05      	ldr	r3, [pc, #20]	; (8010730 <xTaskGetTickCount+0x1c>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010720:	687b      	ldr	r3, [r7, #4]
}
 8010722:	4618      	mov	r0, r3
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	2000d3e0 	.word	0x2000d3e0

08010734 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801073a:	2300      	movs	r3, #0
 801073c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801073e:	4b50      	ldr	r3, [pc, #320]	; (8010880 <xTaskIncrementTick+0x14c>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	f040 808b 	bne.w	801085e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010748:	4b4e      	ldr	r3, [pc, #312]	; (8010884 <xTaskIncrementTick+0x150>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	3301      	adds	r3, #1
 801074e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010750:	4a4c      	ldr	r2, [pc, #304]	; (8010884 <xTaskIncrementTick+0x150>)
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d122      	bne.n	80107a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801075c:	4b4a      	ldr	r3, [pc, #296]	; (8010888 <xTaskIncrementTick+0x154>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00c      	beq.n	8010780 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076a:	b672      	cpsid	i
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	b662      	cpsie	i
 801077a:	603b      	str	r3, [r7, #0]
}
 801077c:	bf00      	nop
 801077e:	e7fe      	b.n	801077e <xTaskIncrementTick+0x4a>
 8010780:	4b41      	ldr	r3, [pc, #260]	; (8010888 <xTaskIncrementTick+0x154>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	60fb      	str	r3, [r7, #12]
 8010786:	4b41      	ldr	r3, [pc, #260]	; (801088c <xTaskIncrementTick+0x158>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a3f      	ldr	r2, [pc, #252]	; (8010888 <xTaskIncrementTick+0x154>)
 801078c:	6013      	str	r3, [r2, #0]
 801078e:	4a3f      	ldr	r2, [pc, #252]	; (801088c <xTaskIncrementTick+0x158>)
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	4b3e      	ldr	r3, [pc, #248]	; (8010890 <xTaskIncrementTick+0x15c>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	3301      	adds	r3, #1
 801079a:	4a3d      	ldr	r2, [pc, #244]	; (8010890 <xTaskIncrementTick+0x15c>)
 801079c:	6013      	str	r3, [r2, #0]
 801079e:	f000 fb07 	bl	8010db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80107a2:	4b3c      	ldr	r3, [pc, #240]	; (8010894 <xTaskIncrementTick+0x160>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	693a      	ldr	r2, [r7, #16]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d349      	bcc.n	8010840 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107ac:	4b36      	ldr	r3, [pc, #216]	; (8010888 <xTaskIncrementTick+0x154>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d104      	bne.n	80107c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107b6:	4b37      	ldr	r3, [pc, #220]	; (8010894 <xTaskIncrementTick+0x160>)
 80107b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107bc:	601a      	str	r2, [r3, #0]
					break;
 80107be:	e03f      	b.n	8010840 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107c0:	4b31      	ldr	r3, [pc, #196]	; (8010888 <xTaskIncrementTick+0x154>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d203      	bcs.n	80107e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80107d8:	4a2e      	ldr	r2, [pc, #184]	; (8010894 <xTaskIncrementTick+0x160>)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80107de:	e02f      	b.n	8010840 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	3304      	adds	r3, #4
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fe fef5 	bl	800f5d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d004      	beq.n	80107fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	3318      	adds	r3, #24
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fe feec 	bl	800f5d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010800:	4b25      	ldr	r3, [pc, #148]	; (8010898 <xTaskIncrementTick+0x164>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	429a      	cmp	r2, r3
 8010806:	d903      	bls.n	8010810 <xTaskIncrementTick+0xdc>
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080c:	4a22      	ldr	r2, [pc, #136]	; (8010898 <xTaskIncrementTick+0x164>)
 801080e:	6013      	str	r3, [r2, #0]
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010814:	4613      	mov	r3, r2
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	4413      	add	r3, r2
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	4a1f      	ldr	r2, [pc, #124]	; (801089c <xTaskIncrementTick+0x168>)
 801081e:	441a      	add	r2, r3
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	3304      	adds	r3, #4
 8010824:	4619      	mov	r1, r3
 8010826:	4610      	mov	r0, r2
 8010828:	f7fe fe77 	bl	800f51a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010830:	4b1b      	ldr	r3, [pc, #108]	; (80108a0 <xTaskIncrementTick+0x16c>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010836:	429a      	cmp	r2, r3
 8010838:	d3b8      	bcc.n	80107ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801083a:	2301      	movs	r3, #1
 801083c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801083e:	e7b5      	b.n	80107ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010840:	4b17      	ldr	r3, [pc, #92]	; (80108a0 <xTaskIncrementTick+0x16c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010846:	4915      	ldr	r1, [pc, #84]	; (801089c <xTaskIncrementTick+0x168>)
 8010848:	4613      	mov	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	4413      	add	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	440b      	add	r3, r1
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d907      	bls.n	8010868 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010858:	2301      	movs	r3, #1
 801085a:	617b      	str	r3, [r7, #20]
 801085c:	e004      	b.n	8010868 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801085e:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <xTaskIncrementTick+0x170>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3301      	adds	r3, #1
 8010864:	4a0f      	ldr	r2, [pc, #60]	; (80108a4 <xTaskIncrementTick+0x170>)
 8010866:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010868:	4b0f      	ldr	r3, [pc, #60]	; (80108a8 <xTaskIncrementTick+0x174>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d001      	beq.n	8010874 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010870:	2301      	movs	r3, #1
 8010872:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010874:	697b      	ldr	r3, [r7, #20]
}
 8010876:	4618      	mov	r0, r3
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	2000d404 	.word	0x2000d404
 8010884:	2000d3e0 	.word	0x2000d3e0
 8010888:	2000d394 	.word	0x2000d394
 801088c:	2000d398 	.word	0x2000d398
 8010890:	2000d3f4 	.word	0x2000d3f4
 8010894:	2000d3fc 	.word	0x2000d3fc
 8010898:	2000d3e4 	.word	0x2000d3e4
 801089c:	2000cf0c 	.word	0x2000cf0c
 80108a0:	2000cf08 	.word	0x2000cf08
 80108a4:	2000d3ec 	.word	0x2000d3ec
 80108a8:	2000d3f0 	.word	0x2000d3f0

080108ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80108b2:	4b29      	ldr	r3, [pc, #164]	; (8010958 <vTaskSwitchContext+0xac>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d003      	beq.n	80108c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80108ba:	4b28      	ldr	r3, [pc, #160]	; (801095c <vTaskSwitchContext+0xb0>)
 80108bc:	2201      	movs	r2, #1
 80108be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80108c0:	e043      	b.n	801094a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80108c2:	4b26      	ldr	r3, [pc, #152]	; (801095c <vTaskSwitchContext+0xb0>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108c8:	4b25      	ldr	r3, [pc, #148]	; (8010960 <vTaskSwitchContext+0xb4>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	60fb      	str	r3, [r7, #12]
 80108ce:	e012      	b.n	80108f6 <vTaskSwitchContext+0x4a>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d10c      	bne.n	80108f0 <vTaskSwitchContext+0x44>
	__asm volatile
 80108d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108da:	b672      	cpsid	i
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	b662      	cpsie	i
 80108ea:	607b      	str	r3, [r7, #4]
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <vTaskSwitchContext+0x42>
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	3b01      	subs	r3, #1
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	491b      	ldr	r1, [pc, #108]	; (8010964 <vTaskSwitchContext+0xb8>)
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	4613      	mov	r3, r2
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	4413      	add	r3, r2
 8010900:	009b      	lsls	r3, r3, #2
 8010902:	440b      	add	r3, r1
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d0e2      	beq.n	80108d0 <vTaskSwitchContext+0x24>
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	4613      	mov	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	4a13      	ldr	r2, [pc, #76]	; (8010964 <vTaskSwitchContext+0xb8>)
 8010916:	4413      	add	r3, r2
 8010918:	60bb      	str	r3, [r7, #8]
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	685a      	ldr	r2, [r3, #4]
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	605a      	str	r2, [r3, #4]
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	685a      	ldr	r2, [r3, #4]
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	3308      	adds	r3, #8
 801092c:	429a      	cmp	r2, r3
 801092e:	d104      	bne.n	801093a <vTaskSwitchContext+0x8e>
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	605a      	str	r2, [r3, #4]
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	4a09      	ldr	r2, [pc, #36]	; (8010968 <vTaskSwitchContext+0xbc>)
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	4a06      	ldr	r2, [pc, #24]	; (8010960 <vTaskSwitchContext+0xb4>)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6013      	str	r3, [r2, #0]
}
 801094a:	bf00      	nop
 801094c:	3714      	adds	r7, #20
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	2000d404 	.word	0x2000d404
 801095c:	2000d3f0 	.word	0x2000d3f0
 8010960:	2000d3e4 	.word	0x2000d3e4
 8010964:	2000cf0c 	.word	0x2000cf0c
 8010968:	2000cf08 	.word	0x2000cf08

0801096c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d10c      	bne.n	8010996 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010980:	b672      	cpsid	i
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	b662      	cpsie	i
 8010990:	60fb      	str	r3, [r7, #12]
}
 8010992:	bf00      	nop
 8010994:	e7fe      	b.n	8010994 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010996:	4b07      	ldr	r3, [pc, #28]	; (80109b4 <vTaskPlaceOnEventList+0x48>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	3318      	adds	r3, #24
 801099c:	4619      	mov	r1, r3
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7fe fddf 	bl	800f562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80109a4:	2101      	movs	r1, #1
 80109a6:	6838      	ldr	r0, [r7, #0]
 80109a8:	f000 fab2 	bl	8010f10 <prvAddCurrentTaskToDelayedList>
}
 80109ac:	bf00      	nop
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	2000cf08 	.word	0x2000cf08

080109b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10c      	bne.n	80109e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	b672      	cpsid	i
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	b662      	cpsie	i
 80109de:	617b      	str	r3, [r7, #20]
}
 80109e0:	bf00      	nop
 80109e2:	e7fe      	b.n	80109e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80109e4:	4b0a      	ldr	r3, [pc, #40]	; (8010a10 <vTaskPlaceOnEventListRestricted+0x58>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3318      	adds	r3, #24
 80109ea:	4619      	mov	r1, r3
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f7fe fd94 	bl	800f51a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d002      	beq.n	80109fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80109fe:	6879      	ldr	r1, [r7, #4]
 8010a00:	68b8      	ldr	r0, [r7, #8]
 8010a02:	f000 fa85 	bl	8010f10 <prvAddCurrentTaskToDelayedList>
	}
 8010a06:	bf00      	nop
 8010a08:	3718      	adds	r7, #24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	2000cf08 	.word	0x2000cf08

08010a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b086      	sub	sp, #24
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10c      	bne.n	8010a44 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2e:	b672      	cpsid	i
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	b662      	cpsie	i
 8010a3e:	60fb      	str	r3, [r7, #12]
}
 8010a40:	bf00      	nop
 8010a42:	e7fe      	b.n	8010a42 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	3318      	adds	r3, #24
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fe fdc3 	bl	800f5d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a4e:	4b1e      	ldr	r3, [pc, #120]	; (8010ac8 <xTaskRemoveFromEventList+0xb4>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d11d      	bne.n	8010a92 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	3304      	adds	r3, #4
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fe fdba 	bl	800f5d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a64:	4b19      	ldr	r3, [pc, #100]	; (8010acc <xTaskRemoveFromEventList+0xb8>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d903      	bls.n	8010a74 <xTaskRemoveFromEventList+0x60>
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a70:	4a16      	ldr	r2, [pc, #88]	; (8010acc <xTaskRemoveFromEventList+0xb8>)
 8010a72:	6013      	str	r3, [r2, #0]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a78:	4613      	mov	r3, r2
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	4413      	add	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4a13      	ldr	r2, [pc, #76]	; (8010ad0 <xTaskRemoveFromEventList+0xbc>)
 8010a82:	441a      	add	r2, r3
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	3304      	adds	r3, #4
 8010a88:	4619      	mov	r1, r3
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	f7fe fd45 	bl	800f51a <vListInsertEnd>
 8010a90:	e005      	b.n	8010a9e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	3318      	adds	r3, #24
 8010a96:	4619      	mov	r1, r3
 8010a98:	480e      	ldr	r0, [pc, #56]	; (8010ad4 <xTaskRemoveFromEventList+0xc0>)
 8010a9a:	f7fe fd3e 	bl	800f51a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa2:	4b0d      	ldr	r3, [pc, #52]	; (8010ad8 <xTaskRemoveFromEventList+0xc4>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d905      	bls.n	8010ab8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010aac:	2301      	movs	r3, #1
 8010aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010ab0:	4b0a      	ldr	r3, [pc, #40]	; (8010adc <xTaskRemoveFromEventList+0xc8>)
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	e001      	b.n	8010abc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010abc:	697b      	ldr	r3, [r7, #20]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3718      	adds	r7, #24
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	2000d404 	.word	0x2000d404
 8010acc:	2000d3e4 	.word	0x2000d3e4
 8010ad0:	2000cf0c 	.word	0x2000cf0c
 8010ad4:	2000d39c 	.word	0x2000d39c
 8010ad8:	2000cf08 	.word	0x2000cf08
 8010adc:	2000d3f0 	.word	0x2000d3f0

08010ae0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b084      	sub	sp, #16
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10c      	bne.n	8010b08 <vTaskSetTimeOutState+0x28>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	b672      	cpsid	i
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	b662      	cpsie	i
 8010b02:	60fb      	str	r3, [r7, #12]
}
 8010b04:	bf00      	nop
 8010b06:	e7fe      	b.n	8010b06 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8010b08:	f000 ff80 	bl	8011a0c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b0c:	4b06      	ldr	r3, [pc, #24]	; (8010b28 <vTaskSetTimeOutState+0x48>)
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8010b14:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <vTaskSetTimeOutState+0x4c>)
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8010b1c:	f000 ffaa 	bl	8011a74 <vPortExitCritical>
}
 8010b20:	bf00      	nop
 8010b22:	3710      	adds	r7, #16
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	2000d3f4 	.word	0x2000d3f4
 8010b2c:	2000d3e0 	.word	0x2000d3e0

08010b30 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b38:	4b06      	ldr	r3, [pc, #24]	; (8010b54 <vTaskInternalSetTimeOutState+0x24>)
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010b40:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <vTaskInternalSetTimeOutState+0x28>)
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	605a      	str	r2, [r3, #4]
}
 8010b48:	bf00      	nop
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	2000d3f4 	.word	0x2000d3f4
 8010b58:	2000d3e0 	.word	0x2000d3e0

08010b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b088      	sub	sp, #32
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10c      	bne.n	8010b86 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b70:	b672      	cpsid	i
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	b662      	cpsie	i
 8010b80:	613b      	str	r3, [r7, #16]
}
 8010b82:	bf00      	nop
 8010b84:	e7fe      	b.n	8010b84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10c      	bne.n	8010ba6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b90:	b672      	cpsid	i
 8010b92:	f383 8811 	msr	BASEPRI, r3
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	b662      	cpsie	i
 8010ba0:	60fb      	str	r3, [r7, #12]
}
 8010ba2:	bf00      	nop
 8010ba4:	e7fe      	b.n	8010ba4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010ba6:	f000 ff31 	bl	8011a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010baa:	4b1d      	ldr	r3, [pc, #116]	; (8010c20 <xTaskCheckForTimeOut+0xc4>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	69ba      	ldr	r2, [r7, #24]
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bc2:	d102      	bne.n	8010bca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	61fb      	str	r3, [r7, #28]
 8010bc8:	e023      	b.n	8010c12 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	4b15      	ldr	r3, [pc, #84]	; (8010c24 <xTaskCheckForTimeOut+0xc8>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d007      	beq.n	8010be6 <xTaskCheckForTimeOut+0x8a>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	69ba      	ldr	r2, [r7, #24]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d302      	bcc.n	8010be6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010be0:	2301      	movs	r3, #1
 8010be2:	61fb      	str	r3, [r7, #28]
 8010be4:	e015      	b.n	8010c12 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d20b      	bcs.n	8010c08 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	1ad2      	subs	r2, r2, r3
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f7ff ff97 	bl	8010b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010c02:	2300      	movs	r3, #0
 8010c04:	61fb      	str	r3, [r7, #28]
 8010c06:	e004      	b.n	8010c12 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010c12:	f000 ff2f 	bl	8011a74 <vPortExitCritical>

	return xReturn;
 8010c16:	69fb      	ldr	r3, [r7, #28]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3720      	adds	r7, #32
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	2000d3e0 	.word	0x2000d3e0
 8010c24:	2000d3f4 	.word	0x2000d3f4

08010c28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010c28:	b480      	push	{r7}
 8010c2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010c2c:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <vTaskMissedYield+0x14>)
 8010c2e:	2201      	movs	r2, #1
 8010c30:	601a      	str	r2, [r3, #0]
}
 8010c32:	bf00      	nop
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	2000d3f0 	.word	0x2000d3f0

08010c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010c48:	f000 f852 	bl	8010cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010c4c:	4b06      	ldr	r3, [pc, #24]	; (8010c68 <prvIdleTask+0x28>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d9f9      	bls.n	8010c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010c54:	4b05      	ldr	r3, [pc, #20]	; (8010c6c <prvIdleTask+0x2c>)
 8010c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c5a:	601a      	str	r2, [r3, #0]
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010c64:	e7f0      	b.n	8010c48 <prvIdleTask+0x8>
 8010c66:	bf00      	nop
 8010c68:	2000cf0c 	.word	0x2000cf0c
 8010c6c:	e000ed04 	.word	0xe000ed04

08010c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010c76:	2300      	movs	r3, #0
 8010c78:	607b      	str	r3, [r7, #4]
 8010c7a:	e00c      	b.n	8010c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	4613      	mov	r3, r2
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	4413      	add	r3, r2
 8010c84:	009b      	lsls	r3, r3, #2
 8010c86:	4a12      	ldr	r2, [pc, #72]	; (8010cd0 <prvInitialiseTaskLists+0x60>)
 8010c88:	4413      	add	r3, r2
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe fc18 	bl	800f4c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	3301      	adds	r3, #1
 8010c94:	607b      	str	r3, [r7, #4]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2b37      	cmp	r3, #55	; 0x37
 8010c9a:	d9ef      	bls.n	8010c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010c9c:	480d      	ldr	r0, [pc, #52]	; (8010cd4 <prvInitialiseTaskLists+0x64>)
 8010c9e:	f7fe fc0f 	bl	800f4c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010ca2:	480d      	ldr	r0, [pc, #52]	; (8010cd8 <prvInitialiseTaskLists+0x68>)
 8010ca4:	f7fe fc0c 	bl	800f4c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010ca8:	480c      	ldr	r0, [pc, #48]	; (8010cdc <prvInitialiseTaskLists+0x6c>)
 8010caa:	f7fe fc09 	bl	800f4c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010cae:	480c      	ldr	r0, [pc, #48]	; (8010ce0 <prvInitialiseTaskLists+0x70>)
 8010cb0:	f7fe fc06 	bl	800f4c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010cb4:	480b      	ldr	r0, [pc, #44]	; (8010ce4 <prvInitialiseTaskLists+0x74>)
 8010cb6:	f7fe fc03 	bl	800f4c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010cba:	4b0b      	ldr	r3, [pc, #44]	; (8010ce8 <prvInitialiseTaskLists+0x78>)
 8010cbc:	4a05      	ldr	r2, [pc, #20]	; (8010cd4 <prvInitialiseTaskLists+0x64>)
 8010cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010cc0:	4b0a      	ldr	r3, [pc, #40]	; (8010cec <prvInitialiseTaskLists+0x7c>)
 8010cc2:	4a05      	ldr	r2, [pc, #20]	; (8010cd8 <prvInitialiseTaskLists+0x68>)
 8010cc4:	601a      	str	r2, [r3, #0]
}
 8010cc6:	bf00      	nop
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	2000cf0c 	.word	0x2000cf0c
 8010cd4:	2000d36c 	.word	0x2000d36c
 8010cd8:	2000d380 	.word	0x2000d380
 8010cdc:	2000d39c 	.word	0x2000d39c
 8010ce0:	2000d3b0 	.word	0x2000d3b0
 8010ce4:	2000d3c8 	.word	0x2000d3c8
 8010ce8:	2000d394 	.word	0x2000d394
 8010cec:	2000d398 	.word	0x2000d398

08010cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010cf6:	e019      	b.n	8010d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010cf8:	f000 fe88 	bl	8011a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cfc:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <prvCheckTasksWaitingTermination+0x50>)
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	3304      	adds	r3, #4
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fe fc63 	bl	800f5d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010d0e:	4b0d      	ldr	r3, [pc, #52]	; (8010d44 <prvCheckTasksWaitingTermination+0x54>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	3b01      	subs	r3, #1
 8010d14:	4a0b      	ldr	r2, [pc, #44]	; (8010d44 <prvCheckTasksWaitingTermination+0x54>)
 8010d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010d18:	4b0b      	ldr	r3, [pc, #44]	; (8010d48 <prvCheckTasksWaitingTermination+0x58>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	4a0a      	ldr	r2, [pc, #40]	; (8010d48 <prvCheckTasksWaitingTermination+0x58>)
 8010d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010d22:	f000 fea7 	bl	8011a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 f810 	bl	8010d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d2c:	4b06      	ldr	r3, [pc, #24]	; (8010d48 <prvCheckTasksWaitingTermination+0x58>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1e1      	bne.n	8010cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010d34:	bf00      	nop
 8010d36:	bf00      	nop
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	2000d3b0 	.word	0x2000d3b0
 8010d44:	2000d3dc 	.word	0x2000d3dc
 8010d48:	2000d3c4 	.word	0x2000d3c4

08010d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d108      	bne.n	8010d70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d62:	4618      	mov	r0, r3
 8010d64:	f001 f848 	bl	8011df8 <vPortFree>
				vPortFree( pxTCB );
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f001 f845 	bl	8011df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010d6e:	e01a      	b.n	8010da6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d103      	bne.n	8010d82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f001 f83c 	bl	8011df8 <vPortFree>
	}
 8010d80:	e011      	b.n	8010da6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010d88:	2b02      	cmp	r3, #2
 8010d8a:	d00c      	beq.n	8010da6 <prvDeleteTCB+0x5a>
	__asm volatile
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	b672      	cpsid	i
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	b662      	cpsie	i
 8010da0:	60fb      	str	r3, [r7, #12]
}
 8010da2:	bf00      	nop
 8010da4:	e7fe      	b.n	8010da4 <prvDeleteTCB+0x58>
	}
 8010da6:	bf00      	nop
 8010da8:	3710      	adds	r7, #16
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
	...

08010db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010db6:	4b0c      	ldr	r3, [pc, #48]	; (8010de8 <prvResetNextTaskUnblockTime+0x38>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d104      	bne.n	8010dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010dc0:	4b0a      	ldr	r3, [pc, #40]	; (8010dec <prvResetNextTaskUnblockTime+0x3c>)
 8010dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010dc8:	e008      	b.n	8010ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dca:	4b07      	ldr	r3, [pc, #28]	; (8010de8 <prvResetNextTaskUnblockTime+0x38>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	4a04      	ldr	r2, [pc, #16]	; (8010dec <prvResetNextTaskUnblockTime+0x3c>)
 8010dda:	6013      	str	r3, [r2, #0]
}
 8010ddc:	bf00      	nop
 8010dde:	370c      	adds	r7, #12
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr
 8010de8:	2000d394 	.word	0x2000d394
 8010dec:	2000d3fc 	.word	0x2000d3fc

08010df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010df0:	b480      	push	{r7}
 8010df2:	b083      	sub	sp, #12
 8010df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010df6:	4b0b      	ldr	r3, [pc, #44]	; (8010e24 <xTaskGetSchedulerState+0x34>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d102      	bne.n	8010e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	607b      	str	r3, [r7, #4]
 8010e02:	e008      	b.n	8010e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e04:	4b08      	ldr	r3, [pc, #32]	; (8010e28 <xTaskGetSchedulerState+0x38>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	607b      	str	r3, [r7, #4]
 8010e10:	e001      	b.n	8010e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010e12:	2300      	movs	r3, #0
 8010e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010e16:	687b      	ldr	r3, [r7, #4]
	}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	2000d3e8 	.word	0x2000d3e8
 8010e28:	2000d404 	.word	0x2000d404

08010e2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b086      	sub	sp, #24
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d05a      	beq.n	8010ef8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010e42:	4b30      	ldr	r3, [pc, #192]	; (8010f04 <xTaskPriorityDisinherit+0xd8>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d00c      	beq.n	8010e66 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e50:	b672      	cpsid	i
 8010e52:	f383 8811 	msr	BASEPRI, r3
 8010e56:	f3bf 8f6f 	isb	sy
 8010e5a:	f3bf 8f4f 	dsb	sy
 8010e5e:	b662      	cpsie	i
 8010e60:	60fb      	str	r3, [r7, #12]
}
 8010e62:	bf00      	nop
 8010e64:	e7fe      	b.n	8010e64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d10c      	bne.n	8010e88 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e72:	b672      	cpsid	i
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	b662      	cpsie	i
 8010e82:	60bb      	str	r3, [r7, #8]
}
 8010e84:	bf00      	nop
 8010e86:	e7fe      	b.n	8010e86 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e8c:	1e5a      	subs	r2, r3, #1
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d02c      	beq.n	8010ef8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d128      	bne.n	8010ef8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fe fb92 	bl	800f5d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ebc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ec8:	4b0f      	ldr	r3, [pc, #60]	; (8010f08 <xTaskPriorityDisinherit+0xdc>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d903      	bls.n	8010ed8 <xTaskPriorityDisinherit+0xac>
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed4:	4a0c      	ldr	r2, [pc, #48]	; (8010f08 <xTaskPriorityDisinherit+0xdc>)
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010edc:	4613      	mov	r3, r2
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4413      	add	r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	4a09      	ldr	r2, [pc, #36]	; (8010f0c <xTaskPriorityDisinherit+0xe0>)
 8010ee6:	441a      	add	r2, r3
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	3304      	adds	r3, #4
 8010eec:	4619      	mov	r1, r3
 8010eee:	4610      	mov	r0, r2
 8010ef0:	f7fe fb13 	bl	800f51a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ef8:	697b      	ldr	r3, [r7, #20]
	}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3718      	adds	r7, #24
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	2000cf08 	.word	0x2000cf08
 8010f08:	2000d3e4 	.word	0x2000d3e4
 8010f0c:	2000cf0c 	.word	0x2000cf0c

08010f10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f1a:	4b21      	ldr	r3, [pc, #132]	; (8010fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f20:	4b20      	ldr	r3, [pc, #128]	; (8010fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	3304      	adds	r3, #4
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fe fb54 	bl	800f5d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f32:	d10a      	bne.n	8010f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d007      	beq.n	8010f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f3a:	4b1a      	ldr	r3, [pc, #104]	; (8010fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	3304      	adds	r3, #4
 8010f40:	4619      	mov	r1, r3
 8010f42:	4819      	ldr	r0, [pc, #100]	; (8010fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010f44:	f7fe fae9 	bl	800f51a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010f48:	e026      	b.n	8010f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4413      	add	r3, r2
 8010f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010f52:	4b14      	ldr	r3, [pc, #80]	; (8010fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010f5a:	68ba      	ldr	r2, [r7, #8]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d209      	bcs.n	8010f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f62:	4b12      	ldr	r3, [pc, #72]	; (8010fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	4b0f      	ldr	r3, [pc, #60]	; (8010fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4610      	mov	r0, r2
 8010f70:	f7fe faf7 	bl	800f562 <vListInsert>
}
 8010f74:	e010      	b.n	8010f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f76:	4b0e      	ldr	r3, [pc, #56]	; (8010fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	4b0a      	ldr	r3, [pc, #40]	; (8010fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	3304      	adds	r3, #4
 8010f80:	4619      	mov	r1, r3
 8010f82:	4610      	mov	r0, r2
 8010f84:	f7fe faed 	bl	800f562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f88:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	68ba      	ldr	r2, [r7, #8]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d202      	bcs.n	8010f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010f92:	4a08      	ldr	r2, [pc, #32]	; (8010fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	6013      	str	r3, [r2, #0]
}
 8010f98:	bf00      	nop
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	2000d3e0 	.word	0x2000d3e0
 8010fa4:	2000cf08 	.word	0x2000cf08
 8010fa8:	2000d3c8 	.word	0x2000d3c8
 8010fac:	2000d398 	.word	0x2000d398
 8010fb0:	2000d394 	.word	0x2000d394
 8010fb4:	2000d3fc 	.word	0x2000d3fc

08010fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b08a      	sub	sp, #40	; 0x28
 8010fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010fc2:	f000 fbb5 	bl	8011730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010fc6:	4b1d      	ldr	r3, [pc, #116]	; (801103c <xTimerCreateTimerTask+0x84>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d021      	beq.n	8011012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010fd6:	1d3a      	adds	r2, r7, #4
 8010fd8:	f107 0108 	add.w	r1, r7, #8
 8010fdc:	f107 030c 	add.w	r3, r7, #12
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fa53 	bl	800f48c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010fe6:	6879      	ldr	r1, [r7, #4]
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	9202      	str	r2, [sp, #8]
 8010fee:	9301      	str	r3, [sp, #4]
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	460a      	mov	r2, r1
 8010ff8:	4911      	ldr	r1, [pc, #68]	; (8011040 <xTimerCreateTimerTask+0x88>)
 8010ffa:	4812      	ldr	r0, [pc, #72]	; (8011044 <xTimerCreateTimerTask+0x8c>)
 8010ffc:	f7ff f81e 	bl	801003c <xTaskCreateStatic>
 8011000:	4603      	mov	r3, r0
 8011002:	4a11      	ldr	r2, [pc, #68]	; (8011048 <xTimerCreateTimerTask+0x90>)
 8011004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011006:	4b10      	ldr	r3, [pc, #64]	; (8011048 <xTimerCreateTimerTask+0x90>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d001      	beq.n	8011012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801100e:	2301      	movs	r3, #1
 8011010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d10c      	bne.n	8011032 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101c:	b672      	cpsid	i
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	b662      	cpsie	i
 801102c:	613b      	str	r3, [r7, #16]
}
 801102e:	bf00      	nop
 8011030:	e7fe      	b.n	8011030 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011032:	697b      	ldr	r3, [r7, #20]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	2000d438 	.word	0x2000d438
 8011040:	080221e0 	.word	0x080221e0
 8011044:	080112c9 	.word	0x080112c9
 8011048:	2000d43c 	.word	0x2000d43c

0801104c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801104c:	b580      	push	{r7, lr}
 801104e:	b088      	sub	sp, #32
 8011050:	af02      	add	r7, sp, #8
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
 8011058:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801105a:	202c      	movs	r0, #44	; 0x2c
 801105c:	f000 fe02 	bl	8011c64 <pvPortMalloc>
 8011060:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d00d      	beq.n	8011084 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	9301      	str	r3, [sp, #4]
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	68b9      	ldr	r1, [r7, #8]
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f000 f847 	bl	8011112 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011084:	697b      	ldr	r3, [r7, #20]
	}
 8011086:	4618      	mov	r0, r3
 8011088:	3718      	adds	r7, #24
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801108e:	b580      	push	{r7, lr}
 8011090:	b08a      	sub	sp, #40	; 0x28
 8011092:	af02      	add	r7, sp, #8
 8011094:	60f8      	str	r0, [r7, #12]
 8011096:	60b9      	str	r1, [r7, #8]
 8011098:	607a      	str	r2, [r7, #4]
 801109a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801109c:	232c      	movs	r3, #44	; 0x2c
 801109e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	2b2c      	cmp	r3, #44	; 0x2c
 80110a4:	d00c      	beq.n	80110c0 <xTimerCreateStatic+0x32>
	__asm volatile
 80110a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110aa:	b672      	cpsid	i
 80110ac:	f383 8811 	msr	BASEPRI, r3
 80110b0:	f3bf 8f6f 	isb	sy
 80110b4:	f3bf 8f4f 	dsb	sy
 80110b8:	b662      	cpsie	i
 80110ba:	61bb      	str	r3, [r7, #24]
}
 80110bc:	bf00      	nop
 80110be:	e7fe      	b.n	80110be <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80110c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d10c      	bne.n	80110e2 <xTimerCreateStatic+0x54>
	__asm volatile
 80110c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110cc:	b672      	cpsid	i
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	b662      	cpsie	i
 80110dc:	617b      	str	r3, [r7, #20]
}
 80110de:	bf00      	nop
 80110e0:	e7fe      	b.n	80110e0 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00d      	beq.n	8011108 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	2202      	movs	r2, #2
 80110f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	9301      	str	r3, [sp, #4]
 80110f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	68b9      	ldr	r1, [r7, #8]
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f000 f805 	bl	8011112 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011108:	69fb      	ldr	r3, [r7, #28]
	}
 801110a:	4618      	mov	r0, r3
 801110c:	3720      	adds	r7, #32
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}

08011112 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b086      	sub	sp, #24
 8011116:	af00      	add	r7, sp, #0
 8011118:	60f8      	str	r0, [r7, #12]
 801111a:	60b9      	str	r1, [r7, #8]
 801111c:	607a      	str	r2, [r7, #4]
 801111e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10c      	bne.n	8011140 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	b672      	cpsid	i
 801112c:	f383 8811 	msr	BASEPRI, r3
 8011130:	f3bf 8f6f 	isb	sy
 8011134:	f3bf 8f4f 	dsb	sy
 8011138:	b662      	cpsie	i
 801113a:	617b      	str	r3, [r7, #20]
}
 801113c:	bf00      	nop
 801113e:	e7fe      	b.n	801113e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8011140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011142:	2b00      	cmp	r3, #0
 8011144:	d01e      	beq.n	8011184 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011146:	f000 faf3 	bl	8011730 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011152:	68ba      	ldr	r2, [r7, #8]
 8011154:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011158:	683a      	ldr	r2, [r7, #0]
 801115a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115e:	6a3a      	ldr	r2, [r7, #32]
 8011160:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011164:	3304      	adds	r3, #4
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe f9ca 	bl	800f500 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d008      	beq.n	8011184 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011178:	f043 0304 	orr.w	r3, r3, #4
 801117c:	b2da      	uxtb	r2, r3
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011184:	bf00      	nop
 8011186:	3718      	adds	r7, #24
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08a      	sub	sp, #40	; 0x28
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801119a:	2300      	movs	r3, #0
 801119c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d10c      	bne.n	80111be <xTimerGenericCommand+0x32>
	__asm volatile
 80111a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a8:	b672      	cpsid	i
 80111aa:	f383 8811 	msr	BASEPRI, r3
 80111ae:	f3bf 8f6f 	isb	sy
 80111b2:	f3bf 8f4f 	dsb	sy
 80111b6:	b662      	cpsie	i
 80111b8:	623b      	str	r3, [r7, #32]
}
 80111ba:	bf00      	nop
 80111bc:	e7fe      	b.n	80111bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80111be:	4b1a      	ldr	r3, [pc, #104]	; (8011228 <xTimerGenericCommand+0x9c>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d02a      	beq.n	801121c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	2b05      	cmp	r3, #5
 80111d6:	dc18      	bgt.n	801120a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80111d8:	f7ff fe0a 	bl	8010df0 <xTaskGetSchedulerState>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b02      	cmp	r3, #2
 80111e0:	d109      	bne.n	80111f6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80111e2:	4b11      	ldr	r3, [pc, #68]	; (8011228 <xTimerGenericCommand+0x9c>)
 80111e4:	6818      	ldr	r0, [r3, #0]
 80111e6:	f107 0110 	add.w	r1, r7, #16
 80111ea:	2300      	movs	r3, #0
 80111ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ee:	f7fe fb2b 	bl	800f848 <xQueueGenericSend>
 80111f2:	6278      	str	r0, [r7, #36]	; 0x24
 80111f4:	e012      	b.n	801121c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80111f6:	4b0c      	ldr	r3, [pc, #48]	; (8011228 <xTimerGenericCommand+0x9c>)
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	f107 0110 	add.w	r1, r7, #16
 80111fe:	2300      	movs	r3, #0
 8011200:	2200      	movs	r2, #0
 8011202:	f7fe fb21 	bl	800f848 <xQueueGenericSend>
 8011206:	6278      	str	r0, [r7, #36]	; 0x24
 8011208:	e008      	b.n	801121c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801120a:	4b07      	ldr	r3, [pc, #28]	; (8011228 <xTimerGenericCommand+0x9c>)
 801120c:	6818      	ldr	r0, [r3, #0]
 801120e:	f107 0110 	add.w	r1, r7, #16
 8011212:	2300      	movs	r3, #0
 8011214:	683a      	ldr	r2, [r7, #0]
 8011216:	f7fe fc1d 	bl	800fa54 <xQueueGenericSendFromISR>
 801121a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801121e:	4618      	mov	r0, r3
 8011220:	3728      	adds	r7, #40	; 0x28
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	2000d438 	.word	0x2000d438

0801122c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b088      	sub	sp, #32
 8011230:	af02      	add	r7, sp, #8
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011236:	4b23      	ldr	r3, [pc, #140]	; (80112c4 <prvProcessExpiredTimer+0x98>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	3304      	adds	r3, #4
 8011244:	4618      	mov	r0, r3
 8011246:	f7fe f9c5 	bl	800f5d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011250:	f003 0304 	and.w	r3, r3, #4
 8011254:	2b00      	cmp	r3, #0
 8011256:	d024      	beq.n	80112a2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	699a      	ldr	r2, [r3, #24]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	18d1      	adds	r1, r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	683a      	ldr	r2, [r7, #0]
 8011264:	6978      	ldr	r0, [r7, #20]
 8011266:	f000 f8d3 	bl	8011410 <prvInsertTimerInActiveList>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d021      	beq.n	80112b4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011270:	2300      	movs	r3, #0
 8011272:	9300      	str	r3, [sp, #0]
 8011274:	2300      	movs	r3, #0
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	2100      	movs	r1, #0
 801127a:	6978      	ldr	r0, [r7, #20]
 801127c:	f7ff ff86 	bl	801118c <xTimerGenericCommand>
 8011280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d115      	bne.n	80112b4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128c:	b672      	cpsid	i
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	b662      	cpsie	i
 801129c:	60fb      	str	r3, [r7, #12]
}
 801129e:	bf00      	nop
 80112a0:	e7fe      	b.n	80112a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112a8:	f023 0301 	bic.w	r3, r3, #1
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	6a1b      	ldr	r3, [r3, #32]
 80112b8:	6978      	ldr	r0, [r7, #20]
 80112ba:	4798      	blx	r3
}
 80112bc:	bf00      	nop
 80112be:	3718      	adds	r7, #24
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	2000d430 	.word	0x2000d430

080112c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b084      	sub	sp, #16
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80112d0:	f107 0308 	add.w	r3, r7, #8
 80112d4:	4618      	mov	r0, r3
 80112d6:	f000 f857 	bl	8011388 <prvGetNextExpireTime>
 80112da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	4619      	mov	r1, r3
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 f803 	bl	80112ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80112e6:	f000 f8d5 	bl	8011494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80112ea:	e7f1      	b.n	80112d0 <prvTimerTask+0x8>

080112ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80112f6:	f7ff f95f 	bl	80105b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80112fa:	f107 0308 	add.w	r3, r7, #8
 80112fe:	4618      	mov	r0, r3
 8011300:	f000 f866 	bl	80113d0 <prvSampleTimeNow>
 8011304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d130      	bne.n	801136e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d10a      	bne.n	8011328 <prvProcessTimerOrBlockTask+0x3c>
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	429a      	cmp	r2, r3
 8011318:	d806      	bhi.n	8011328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801131a:	f7ff f95b 	bl	80105d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801131e:	68f9      	ldr	r1, [r7, #12]
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f7ff ff83 	bl	801122c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011326:	e024      	b.n	8011372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d008      	beq.n	8011340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801132e:	4b13      	ldr	r3, [pc, #76]	; (801137c <prvProcessTimerOrBlockTask+0x90>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <prvProcessTimerOrBlockTask+0x50>
 8011338:	2301      	movs	r3, #1
 801133a:	e000      	b.n	801133e <prvProcessTimerOrBlockTask+0x52>
 801133c:	2300      	movs	r3, #0
 801133e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011340:	4b0f      	ldr	r3, [pc, #60]	; (8011380 <prvProcessTimerOrBlockTask+0x94>)
 8011342:	6818      	ldr	r0, [r3, #0]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	683a      	ldr	r2, [r7, #0]
 801134c:	4619      	mov	r1, r3
 801134e:	f7fe fe41 	bl	800ffd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011352:	f7ff f93f 	bl	80105d4 <xTaskResumeAll>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d10a      	bne.n	8011372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801135c:	4b09      	ldr	r3, [pc, #36]	; (8011384 <prvProcessTimerOrBlockTask+0x98>)
 801135e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	f3bf 8f4f 	dsb	sy
 8011368:	f3bf 8f6f 	isb	sy
}
 801136c:	e001      	b.n	8011372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801136e:	f7ff f931 	bl	80105d4 <xTaskResumeAll>
}
 8011372:	bf00      	nop
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	2000d434 	.word	0x2000d434
 8011380:	2000d438 	.word	0x2000d438
 8011384:	e000ed04 	.word	0xe000ed04

08011388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011388:	b480      	push	{r7}
 801138a:	b085      	sub	sp, #20
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011390:	4b0e      	ldr	r3, [pc, #56]	; (80113cc <prvGetNextExpireTime+0x44>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d101      	bne.n	801139e <prvGetNextExpireTime+0x16>
 801139a:	2201      	movs	r2, #1
 801139c:	e000      	b.n	80113a0 <prvGetNextExpireTime+0x18>
 801139e:	2200      	movs	r2, #0
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d105      	bne.n	80113b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113ac:	4b07      	ldr	r3, [pc, #28]	; (80113cc <prvGetNextExpireTime+0x44>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	60fb      	str	r3, [r7, #12]
 80113b6:	e001      	b.n	80113bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80113b8:	2300      	movs	r3, #0
 80113ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80113bc:	68fb      	ldr	r3, [r7, #12]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3714      	adds	r7, #20
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr
 80113ca:	bf00      	nop
 80113cc:	2000d430 	.word	0x2000d430

080113d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80113d8:	f7ff f99c 	bl	8010714 <xTaskGetTickCount>
 80113dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80113de:	4b0b      	ldr	r3, [pc, #44]	; (801140c <prvSampleTimeNow+0x3c>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d205      	bcs.n	80113f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80113e8:	f000 f93c 	bl	8011664 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2201      	movs	r2, #1
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	e002      	b.n	80113fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80113fa:	4a04      	ldr	r2, [pc, #16]	; (801140c <prvSampleTimeNow+0x3c>)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011400:	68fb      	ldr	r3, [r7, #12]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	2000d440 	.word	0x2000d440

08011410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b086      	sub	sp, #24
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	607a      	str	r2, [r7, #4]
 801141c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801141e:	2300      	movs	r3, #0
 8011420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	68ba      	ldr	r2, [r7, #8]
 8011426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801142e:	68ba      	ldr	r2, [r7, #8]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	429a      	cmp	r2, r3
 8011434:	d812      	bhi.n	801145c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	1ad2      	subs	r2, r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	699b      	ldr	r3, [r3, #24]
 8011440:	429a      	cmp	r2, r3
 8011442:	d302      	bcc.n	801144a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011444:	2301      	movs	r3, #1
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	e01b      	b.n	8011482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801144a:	4b10      	ldr	r3, [pc, #64]	; (801148c <prvInsertTimerInActiveList+0x7c>)
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	3304      	adds	r3, #4
 8011452:	4619      	mov	r1, r3
 8011454:	4610      	mov	r0, r2
 8011456:	f7fe f884 	bl	800f562 <vListInsert>
 801145a:	e012      	b.n	8011482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	429a      	cmp	r2, r3
 8011462:	d206      	bcs.n	8011472 <prvInsertTimerInActiveList+0x62>
 8011464:	68ba      	ldr	r2, [r7, #8]
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	429a      	cmp	r2, r3
 801146a:	d302      	bcc.n	8011472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801146c:	2301      	movs	r3, #1
 801146e:	617b      	str	r3, [r7, #20]
 8011470:	e007      	b.n	8011482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011472:	4b07      	ldr	r3, [pc, #28]	; (8011490 <prvInsertTimerInActiveList+0x80>)
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3304      	adds	r3, #4
 801147a:	4619      	mov	r1, r3
 801147c:	4610      	mov	r0, r2
 801147e:	f7fe f870 	bl	800f562 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011482:	697b      	ldr	r3, [r7, #20]
}
 8011484:	4618      	mov	r0, r3
 8011486:	3718      	adds	r7, #24
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	2000d434 	.word	0x2000d434
 8011490:	2000d430 	.word	0x2000d430

08011494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b08e      	sub	sp, #56	; 0x38
 8011498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801149a:	e0d0      	b.n	801163e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	da1a      	bge.n	80114d8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80114a2:	1d3b      	adds	r3, r7, #4
 80114a4:	3304      	adds	r3, #4
 80114a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80114a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d10c      	bne.n	80114c8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b2:	b672      	cpsid	i
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	b662      	cpsie	i
 80114c2:	61fb      	str	r3, [r7, #28]
}
 80114c4:	bf00      	nop
 80114c6:	e7fe      	b.n	80114c6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80114c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114ce:	6850      	ldr	r0, [r2, #4]
 80114d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114d2:	6892      	ldr	r2, [r2, #8]
 80114d4:	4611      	mov	r1, r2
 80114d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f2c0 80af 	blt.w	801163e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	695b      	ldr	r3, [r3, #20]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d004      	beq.n	80114f6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80114ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ee:	3304      	adds	r3, #4
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fe f86f 	bl	800f5d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80114f6:	463b      	mov	r3, r7
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff ff69 	bl	80113d0 <prvSampleTimeNow>
 80114fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2b09      	cmp	r3, #9
 8011504:	f200 809a 	bhi.w	801163c <prvProcessReceivedCommands+0x1a8>
 8011508:	a201      	add	r2, pc, #4	; (adr r2, 8011510 <prvProcessReceivedCommands+0x7c>)
 801150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801150e:	bf00      	nop
 8011510:	08011539 	.word	0x08011539
 8011514:	08011539 	.word	0x08011539
 8011518:	08011539 	.word	0x08011539
 801151c:	080115b1 	.word	0x080115b1
 8011520:	080115c5 	.word	0x080115c5
 8011524:	08011613 	.word	0x08011613
 8011528:	08011539 	.word	0x08011539
 801152c:	08011539 	.word	0x08011539
 8011530:	080115b1 	.word	0x080115b1
 8011534:	080115c5 	.word	0x080115c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801153e:	f043 0301 	orr.w	r3, r3, #1
 8011542:	b2da      	uxtb	r2, r3
 8011544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801154a:	68ba      	ldr	r2, [r7, #8]
 801154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154e:	699b      	ldr	r3, [r3, #24]
 8011550:	18d1      	adds	r1, r2, r3
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011558:	f7ff ff5a 	bl	8011410 <prvInsertTimerInActiveList>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d06d      	beq.n	801163e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011564:	6a1b      	ldr	r3, [r3, #32]
 8011566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011568:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011570:	f003 0304 	and.w	r3, r3, #4
 8011574:	2b00      	cmp	r3, #0
 8011576:	d062      	beq.n	801163e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011578:	68ba      	ldr	r2, [r7, #8]
 801157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157c:	699b      	ldr	r3, [r3, #24]
 801157e:	441a      	add	r2, r3
 8011580:	2300      	movs	r3, #0
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	2300      	movs	r3, #0
 8011586:	2100      	movs	r1, #0
 8011588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801158a:	f7ff fdff 	bl	801118c <xTimerGenericCommand>
 801158e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011590:	6a3b      	ldr	r3, [r7, #32]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d153      	bne.n	801163e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8011596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159a:	b672      	cpsid	i
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	b662      	cpsie	i
 80115aa:	61bb      	str	r3, [r7, #24]
}
 80115ac:	bf00      	nop
 80115ae:	e7fe      	b.n	80115ae <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115b6:	f023 0301 	bic.w	r3, r3, #1
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80115c2:	e03c      	b.n	801163e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115ca:	f043 0301 	orr.w	r3, r3, #1
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80115d6:	68ba      	ldr	r2, [r7, #8]
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80115dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115de:	699b      	ldr	r3, [r3, #24]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10c      	bne.n	80115fe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80115e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e8:	b672      	cpsid	i
 80115ea:	f383 8811 	msr	BASEPRI, r3
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f3bf 8f4f 	dsb	sy
 80115f6:	b662      	cpsie	i
 80115f8:	617b      	str	r3, [r7, #20]
}
 80115fa:	bf00      	nop
 80115fc:	e7fe      	b.n	80115fc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80115fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011600:	699a      	ldr	r2, [r3, #24]
 8011602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011604:	18d1      	adds	r1, r2, r3
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801160a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801160c:	f7ff ff00 	bl	8011410 <prvInsertTimerInActiveList>
					break;
 8011610:	e015      	b.n	801163e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011618:	f003 0302 	and.w	r3, r3, #2
 801161c:	2b00      	cmp	r3, #0
 801161e:	d103      	bne.n	8011628 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8011620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011622:	f000 fbe9 	bl	8011df8 <vPortFree>
 8011626:	e00a      	b.n	801163e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801162e:	f023 0301 	bic.w	r3, r3, #1
 8011632:	b2da      	uxtb	r2, r3
 8011634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801163a:	e000      	b.n	801163e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 801163c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801163e:	4b08      	ldr	r3, [pc, #32]	; (8011660 <prvProcessReceivedCommands+0x1cc>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	1d39      	adds	r1, r7, #4
 8011644:	2200      	movs	r2, #0
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe faa4 	bl	800fb94 <xQueueReceive>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	f47f af24 	bne.w	801149c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011654:	bf00      	nop
 8011656:	bf00      	nop
 8011658:	3730      	adds	r7, #48	; 0x30
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	2000d438 	.word	0x2000d438

08011664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b088      	sub	sp, #32
 8011668:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801166a:	e04a      	b.n	8011702 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801166c:	4b2e      	ldr	r3, [pc, #184]	; (8011728 <prvSwitchTimerLists+0xc4>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011676:	4b2c      	ldr	r3, [pc, #176]	; (8011728 <prvSwitchTimerLists+0xc4>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	3304      	adds	r3, #4
 8011684:	4618      	mov	r0, r3
 8011686:	f7fd ffa5 	bl	800f5d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011698:	f003 0304 	and.w	r3, r3, #4
 801169c:	2b00      	cmp	r3, #0
 801169e:	d030      	beq.n	8011702 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	693a      	ldr	r2, [r7, #16]
 80116a6:	4413      	add	r3, r2
 80116a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d90e      	bls.n	80116d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80116be:	4b1a      	ldr	r3, [pc, #104]	; (8011728 <prvSwitchTimerLists+0xc4>)
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3304      	adds	r3, #4
 80116c6:	4619      	mov	r1, r3
 80116c8:	4610      	mov	r0, r2
 80116ca:	f7fd ff4a 	bl	800f562 <vListInsert>
 80116ce:	e018      	b.n	8011702 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80116d0:	2300      	movs	r3, #0
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	2300      	movs	r3, #0
 80116d6:	693a      	ldr	r2, [r7, #16]
 80116d8:	2100      	movs	r1, #0
 80116da:	68f8      	ldr	r0, [r7, #12]
 80116dc:	f7ff fd56 	bl	801118c <xTimerGenericCommand>
 80116e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10c      	bne.n	8011702 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80116e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ec:	b672      	cpsid	i
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	b662      	cpsie	i
 80116fc:	603b      	str	r3, [r7, #0]
}
 80116fe:	bf00      	nop
 8011700:	e7fe      	b.n	8011700 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011702:	4b09      	ldr	r3, [pc, #36]	; (8011728 <prvSwitchTimerLists+0xc4>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1af      	bne.n	801166c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <prvSwitchTimerLists+0xc4>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011712:	4b06      	ldr	r3, [pc, #24]	; (801172c <prvSwitchTimerLists+0xc8>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	4a04      	ldr	r2, [pc, #16]	; (8011728 <prvSwitchTimerLists+0xc4>)
 8011718:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801171a:	4a04      	ldr	r2, [pc, #16]	; (801172c <prvSwitchTimerLists+0xc8>)
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	6013      	str	r3, [r2, #0]
}
 8011720:	bf00      	nop
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	2000d430 	.word	0x2000d430
 801172c:	2000d434 	.word	0x2000d434

08011730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011736:	f000 f969 	bl	8011a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801173a:	4b15      	ldr	r3, [pc, #84]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d120      	bne.n	8011784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011742:	4814      	ldr	r0, [pc, #80]	; (8011794 <prvCheckForValidListAndQueue+0x64>)
 8011744:	f7fd febc 	bl	800f4c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011748:	4813      	ldr	r0, [pc, #76]	; (8011798 <prvCheckForValidListAndQueue+0x68>)
 801174a:	f7fd feb9 	bl	800f4c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801174e:	4b13      	ldr	r3, [pc, #76]	; (801179c <prvCheckForValidListAndQueue+0x6c>)
 8011750:	4a10      	ldr	r2, [pc, #64]	; (8011794 <prvCheckForValidListAndQueue+0x64>)
 8011752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011754:	4b12      	ldr	r3, [pc, #72]	; (80117a0 <prvCheckForValidListAndQueue+0x70>)
 8011756:	4a10      	ldr	r2, [pc, #64]	; (8011798 <prvCheckForValidListAndQueue+0x68>)
 8011758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801175a:	2300      	movs	r3, #0
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	4b11      	ldr	r3, [pc, #68]	; (80117a4 <prvCheckForValidListAndQueue+0x74>)
 8011760:	4a11      	ldr	r2, [pc, #68]	; (80117a8 <prvCheckForValidListAndQueue+0x78>)
 8011762:	2110      	movs	r1, #16
 8011764:	200a      	movs	r0, #10
 8011766:	f7fd ffc9 	bl	800f6fc <xQueueGenericCreateStatic>
 801176a:	4603      	mov	r3, r0
 801176c:	4a08      	ldr	r2, [pc, #32]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 801176e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011770:	4b07      	ldr	r3, [pc, #28]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d005      	beq.n	8011784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <prvCheckForValidListAndQueue+0x60>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	490b      	ldr	r1, [pc, #44]	; (80117ac <prvCheckForValidListAndQueue+0x7c>)
 801177e:	4618      	mov	r0, r3
 8011780:	f7fe fbfe 	bl	800ff80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011784:	f000 f976 	bl	8011a74 <vPortExitCritical>
}
 8011788:	bf00      	nop
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	2000d438 	.word	0x2000d438
 8011794:	2000d408 	.word	0x2000d408
 8011798:	2000d41c 	.word	0x2000d41c
 801179c:	2000d430 	.word	0x2000d430
 80117a0:	2000d434 	.word	0x2000d434
 80117a4:	2000d4e4 	.word	0x2000d4e4
 80117a8:	2000d444 	.word	0x2000d444
 80117ac:	080221e8 	.word	0x080221e8

080117b0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b086      	sub	sp, #24
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d10c      	bne.n	80117dc <pvTimerGetTimerID+0x2c>
	__asm volatile
 80117c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c6:	b672      	cpsid	i
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	b662      	cpsie	i
 80117d6:	60fb      	str	r3, [r7, #12]
}
 80117d8:	bf00      	nop
 80117da:	e7fe      	b.n	80117da <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 80117dc:	f000 f916 	bl	8011a0c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	69db      	ldr	r3, [r3, #28]
 80117e4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80117e6:	f000 f945 	bl	8011a74 <vPortExitCritical>

	return pvReturn;
 80117ea:	693b      	ldr	r3, [r7, #16]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3b04      	subs	r3, #4
 8011804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801180c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3b04      	subs	r3, #4
 8011812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	f023 0201 	bic.w	r2, r3, #1
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	3b04      	subs	r3, #4
 8011822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011824:	4a0c      	ldr	r2, [pc, #48]	; (8011858 <pxPortInitialiseStack+0x64>)
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	3b14      	subs	r3, #20
 801182e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	3b04      	subs	r3, #4
 801183a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f06f 0202 	mvn.w	r2, #2
 8011842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	3b20      	subs	r3, #32
 8011848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801184a:	68fb      	ldr	r3, [r7, #12]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3714      	adds	r7, #20
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr
 8011858:	0801185d 	.word	0x0801185d

0801185c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801185c:	b480      	push	{r7}
 801185e:	b085      	sub	sp, #20
 8011860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011866:	4b14      	ldr	r3, [pc, #80]	; (80118b8 <prvTaskExitError+0x5c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801186e:	d00c      	beq.n	801188a <prvTaskExitError+0x2e>
	__asm volatile
 8011870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011874:	b672      	cpsid	i
 8011876:	f383 8811 	msr	BASEPRI, r3
 801187a:	f3bf 8f6f 	isb	sy
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	b662      	cpsie	i
 8011884:	60fb      	str	r3, [r7, #12]
}
 8011886:	bf00      	nop
 8011888:	e7fe      	b.n	8011888 <prvTaskExitError+0x2c>
	__asm volatile
 801188a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188e:	b672      	cpsid	i
 8011890:	f383 8811 	msr	BASEPRI, r3
 8011894:	f3bf 8f6f 	isb	sy
 8011898:	f3bf 8f4f 	dsb	sy
 801189c:	b662      	cpsie	i
 801189e:	60bb      	str	r3, [r7, #8]
}
 80118a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80118a2:	bf00      	nop
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d0fc      	beq.n	80118a4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80118aa:	bf00      	nop
 80118ac:	bf00      	nop
 80118ae:	3714      	adds	r7, #20
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr
 80118b8:	2000009c 	.word	0x2000009c
 80118bc:	00000000 	.word	0x00000000

080118c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80118c0:	4b07      	ldr	r3, [pc, #28]	; (80118e0 <pxCurrentTCBConst2>)
 80118c2:	6819      	ldr	r1, [r3, #0]
 80118c4:	6808      	ldr	r0, [r1, #0]
 80118c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ca:	f380 8809 	msr	PSP, r0
 80118ce:	f3bf 8f6f 	isb	sy
 80118d2:	f04f 0000 	mov.w	r0, #0
 80118d6:	f380 8811 	msr	BASEPRI, r0
 80118da:	4770      	bx	lr
 80118dc:	f3af 8000 	nop.w

080118e0 <pxCurrentTCBConst2>:
 80118e0:	2000cf08 	.word	0x2000cf08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118e4:	bf00      	nop
 80118e6:	bf00      	nop

080118e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118e8:	4808      	ldr	r0, [pc, #32]	; (801190c <prvPortStartFirstTask+0x24>)
 80118ea:	6800      	ldr	r0, [r0, #0]
 80118ec:	6800      	ldr	r0, [r0, #0]
 80118ee:	f380 8808 	msr	MSP, r0
 80118f2:	f04f 0000 	mov.w	r0, #0
 80118f6:	f380 8814 	msr	CONTROL, r0
 80118fa:	b662      	cpsie	i
 80118fc:	b661      	cpsie	f
 80118fe:	f3bf 8f4f 	dsb	sy
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	df00      	svc	0
 8011908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801190a:	bf00      	nop
 801190c:	e000ed08 	.word	0xe000ed08

08011910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011916:	4b37      	ldr	r3, [pc, #220]	; (80119f4 <xPortStartScheduler+0xe4>)
 8011918:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	22ff      	movs	r2, #255	; 0xff
 8011926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	b2db      	uxtb	r3, r3
 801192e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011930:	78fb      	ldrb	r3, [r7, #3]
 8011932:	b2db      	uxtb	r3, r3
 8011934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011938:	b2da      	uxtb	r2, r3
 801193a:	4b2f      	ldr	r3, [pc, #188]	; (80119f8 <xPortStartScheduler+0xe8>)
 801193c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801193e:	4b2f      	ldr	r3, [pc, #188]	; (80119fc <xPortStartScheduler+0xec>)
 8011940:	2207      	movs	r2, #7
 8011942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011944:	e009      	b.n	801195a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011946:	4b2d      	ldr	r3, [pc, #180]	; (80119fc <xPortStartScheduler+0xec>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3b01      	subs	r3, #1
 801194c:	4a2b      	ldr	r2, [pc, #172]	; (80119fc <xPortStartScheduler+0xec>)
 801194e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011950:	78fb      	ldrb	r3, [r7, #3]
 8011952:	b2db      	uxtb	r3, r3
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	b2db      	uxtb	r3, r3
 8011958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801195a:	78fb      	ldrb	r3, [r7, #3]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011962:	2b80      	cmp	r3, #128	; 0x80
 8011964:	d0ef      	beq.n	8011946 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011966:	4b25      	ldr	r3, [pc, #148]	; (80119fc <xPortStartScheduler+0xec>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f1c3 0307 	rsb	r3, r3, #7
 801196e:	2b04      	cmp	r3, #4
 8011970:	d00c      	beq.n	801198c <xPortStartScheduler+0x7c>
	__asm volatile
 8011972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011976:	b672      	cpsid	i
 8011978:	f383 8811 	msr	BASEPRI, r3
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	f3bf 8f4f 	dsb	sy
 8011984:	b662      	cpsie	i
 8011986:	60bb      	str	r3, [r7, #8]
}
 8011988:	bf00      	nop
 801198a:	e7fe      	b.n	801198a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801198c:	4b1b      	ldr	r3, [pc, #108]	; (80119fc <xPortStartScheduler+0xec>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	021b      	lsls	r3, r3, #8
 8011992:	4a1a      	ldr	r2, [pc, #104]	; (80119fc <xPortStartScheduler+0xec>)
 8011994:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011996:	4b19      	ldr	r3, [pc, #100]	; (80119fc <xPortStartScheduler+0xec>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801199e:	4a17      	ldr	r2, [pc, #92]	; (80119fc <xPortStartScheduler+0xec>)
 80119a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119aa:	4b15      	ldr	r3, [pc, #84]	; (8011a00 <xPortStartScheduler+0xf0>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4a14      	ldr	r2, [pc, #80]	; (8011a00 <xPortStartScheduler+0xf0>)
 80119b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119b6:	4b12      	ldr	r3, [pc, #72]	; (8011a00 <xPortStartScheduler+0xf0>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a11      	ldr	r2, [pc, #68]	; (8011a00 <xPortStartScheduler+0xf0>)
 80119bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119c2:	f000 f8dd 	bl	8011b80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119c6:	4b0f      	ldr	r3, [pc, #60]	; (8011a04 <xPortStartScheduler+0xf4>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119cc:	f000 f8fc 	bl	8011bc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119d0:	4b0d      	ldr	r3, [pc, #52]	; (8011a08 <xPortStartScheduler+0xf8>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4a0c      	ldr	r2, [pc, #48]	; (8011a08 <xPortStartScheduler+0xf8>)
 80119d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80119da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119dc:	f7ff ff84 	bl	80118e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119e0:	f7fe ff64 	bl	80108ac <vTaskSwitchContext>
	prvTaskExitError();
 80119e4:	f7ff ff3a 	bl	801185c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	e000e400 	.word	0xe000e400
 80119f8:	2000d534 	.word	0x2000d534
 80119fc:	2000d538 	.word	0x2000d538
 8011a00:	e000ed20 	.word	0xe000ed20
 8011a04:	2000009c 	.word	0x2000009c
 8011a08:	e000ef34 	.word	0xe000ef34

08011a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
	__asm volatile
 8011a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a16:	b672      	cpsid	i
 8011a18:	f383 8811 	msr	BASEPRI, r3
 8011a1c:	f3bf 8f6f 	isb	sy
 8011a20:	f3bf 8f4f 	dsb	sy
 8011a24:	b662      	cpsie	i
 8011a26:	607b      	str	r3, [r7, #4]
}
 8011a28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a2a:	4b10      	ldr	r3, [pc, #64]	; (8011a6c <vPortEnterCritical+0x60>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	3301      	adds	r3, #1
 8011a30:	4a0e      	ldr	r2, [pc, #56]	; (8011a6c <vPortEnterCritical+0x60>)
 8011a32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a34:	4b0d      	ldr	r3, [pc, #52]	; (8011a6c <vPortEnterCritical+0x60>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d111      	bne.n	8011a60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a3c:	4b0c      	ldr	r3, [pc, #48]	; (8011a70 <vPortEnterCritical+0x64>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00c      	beq.n	8011a60 <vPortEnterCritical+0x54>
	__asm volatile
 8011a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a4a:	b672      	cpsid	i
 8011a4c:	f383 8811 	msr	BASEPRI, r3
 8011a50:	f3bf 8f6f 	isb	sy
 8011a54:	f3bf 8f4f 	dsb	sy
 8011a58:	b662      	cpsie	i
 8011a5a:	603b      	str	r3, [r7, #0]
}
 8011a5c:	bf00      	nop
 8011a5e:	e7fe      	b.n	8011a5e <vPortEnterCritical+0x52>
	}
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	2000009c 	.word	0x2000009c
 8011a70:	e000ed04 	.word	0xe000ed04

08011a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a7a:	4b13      	ldr	r3, [pc, #76]	; (8011ac8 <vPortExitCritical+0x54>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d10c      	bne.n	8011a9c <vPortExitCritical+0x28>
	__asm volatile
 8011a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a86:	b672      	cpsid	i
 8011a88:	f383 8811 	msr	BASEPRI, r3
 8011a8c:	f3bf 8f6f 	isb	sy
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	b662      	cpsie	i
 8011a96:	607b      	str	r3, [r7, #4]
}
 8011a98:	bf00      	nop
 8011a9a:	e7fe      	b.n	8011a9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011a9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ac8 <vPortExitCritical+0x54>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	4a09      	ldr	r2, [pc, #36]	; (8011ac8 <vPortExitCritical+0x54>)
 8011aa4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011aa6:	4b08      	ldr	r3, [pc, #32]	; (8011ac8 <vPortExitCritical+0x54>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d105      	bne.n	8011aba <vPortExitCritical+0x46>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	f383 8811 	msr	BASEPRI, r3
}
 8011ab8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011aba:	bf00      	nop
 8011abc:	370c      	adds	r7, #12
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop
 8011ac8:	2000009c 	.word	0x2000009c
 8011acc:	00000000 	.word	0x00000000

08011ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ad0:	f3ef 8009 	mrs	r0, PSP
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	4b15      	ldr	r3, [pc, #84]	; (8011b30 <pxCurrentTCBConst>)
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	f01e 0f10 	tst.w	lr, #16
 8011ae0:	bf08      	it	eq
 8011ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aea:	6010      	str	r0, [r2, #0]
 8011aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011af4:	b672      	cpsid	i
 8011af6:	f380 8811 	msr	BASEPRI, r0
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	b662      	cpsie	i
 8011b04:	f7fe fed2 	bl	80108ac <vTaskSwitchContext>
 8011b08:	f04f 0000 	mov.w	r0, #0
 8011b0c:	f380 8811 	msr	BASEPRI, r0
 8011b10:	bc09      	pop	{r0, r3}
 8011b12:	6819      	ldr	r1, [r3, #0]
 8011b14:	6808      	ldr	r0, [r1, #0]
 8011b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1a:	f01e 0f10 	tst.w	lr, #16
 8011b1e:	bf08      	it	eq
 8011b20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b24:	f380 8809 	msr	PSP, r0
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop

08011b30 <pxCurrentTCBConst>:
 8011b30:	2000cf08 	.word	0x2000cf08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b34:	bf00      	nop
 8011b36:	bf00      	nop

08011b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	b672      	cpsid	i
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	b662      	cpsie	i
 8011b52:	607b      	str	r3, [r7, #4]
}
 8011b54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b56:	f7fe fded 	bl	8010734 <xTaskIncrementTick>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d003      	beq.n	8011b68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b60:	4b06      	ldr	r3, [pc, #24]	; (8011b7c <SysTick_Handler+0x44>)
 8011b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b66:	601a      	str	r2, [r3, #0]
 8011b68:	2300      	movs	r3, #0
 8011b6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	f383 8811 	msr	BASEPRI, r3
}
 8011b72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b74:	bf00      	nop
 8011b76:	3708      	adds	r7, #8
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	e000ed04 	.word	0xe000ed04

08011b80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b80:	b480      	push	{r7}
 8011b82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b84:	4b0b      	ldr	r3, [pc, #44]	; (8011bb4 <vPortSetupTimerInterrupt+0x34>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b8a:	4b0b      	ldr	r3, [pc, #44]	; (8011bb8 <vPortSetupTimerInterrupt+0x38>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b90:	4b0a      	ldr	r3, [pc, #40]	; (8011bbc <vPortSetupTimerInterrupt+0x3c>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a0a      	ldr	r2, [pc, #40]	; (8011bc0 <vPortSetupTimerInterrupt+0x40>)
 8011b96:	fba2 2303 	umull	r2, r3, r2, r3
 8011b9a:	099b      	lsrs	r3, r3, #6
 8011b9c:	4a09      	ldr	r2, [pc, #36]	; (8011bc4 <vPortSetupTimerInterrupt+0x44>)
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011ba2:	4b04      	ldr	r3, [pc, #16]	; (8011bb4 <vPortSetupTimerInterrupt+0x34>)
 8011ba4:	2207      	movs	r2, #7
 8011ba6:	601a      	str	r2, [r3, #0]
}
 8011ba8:	bf00      	nop
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop
 8011bb4:	e000e010 	.word	0xe000e010
 8011bb8:	e000e018 	.word	0xe000e018
 8011bbc:	20000004 	.word	0x20000004
 8011bc0:	10624dd3 	.word	0x10624dd3
 8011bc4:	e000e014 	.word	0xe000e014

08011bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011bd8 <vPortEnableVFP+0x10>
 8011bcc:	6801      	ldr	r1, [r0, #0]
 8011bce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011bd2:	6001      	str	r1, [r0, #0]
 8011bd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011bd6:	bf00      	nop
 8011bd8:	e000ed88 	.word	0xe000ed88

08011bdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011be2:	f3ef 8305 	mrs	r3, IPSR
 8011be6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b0f      	cmp	r3, #15
 8011bec:	d916      	bls.n	8011c1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bee:	4a19      	ldr	r2, [pc, #100]	; (8011c54 <vPortValidateInterruptPriority+0x78>)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011bf8:	4b17      	ldr	r3, [pc, #92]	; (8011c58 <vPortValidateInterruptPriority+0x7c>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	7afa      	ldrb	r2, [r7, #11]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d20c      	bcs.n	8011c1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c06:	b672      	cpsid	i
 8011c08:	f383 8811 	msr	BASEPRI, r3
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	b662      	cpsie	i
 8011c16:	607b      	str	r3, [r7, #4]
}
 8011c18:	bf00      	nop
 8011c1a:	e7fe      	b.n	8011c1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c1c:	4b0f      	ldr	r3, [pc, #60]	; (8011c5c <vPortValidateInterruptPriority+0x80>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c24:	4b0e      	ldr	r3, [pc, #56]	; (8011c60 <vPortValidateInterruptPriority+0x84>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d90c      	bls.n	8011c46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8011c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c30:	b672      	cpsid	i
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	b662      	cpsie	i
 8011c40:	603b      	str	r3, [r7, #0]
}
 8011c42:	bf00      	nop
 8011c44:	e7fe      	b.n	8011c44 <vPortValidateInterruptPriority+0x68>
	}
 8011c46:	bf00      	nop
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop
 8011c54:	e000e3f0 	.word	0xe000e3f0
 8011c58:	2000d534 	.word	0x2000d534
 8011c5c:	e000ed0c 	.word	0xe000ed0c
 8011c60:	2000d538 	.word	0x2000d538

08011c64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b08a      	sub	sp, #40	; 0x28
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c70:	f7fe fca2 	bl	80105b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c74:	4b5b      	ldr	r3, [pc, #364]	; (8011de4 <pvPortMalloc+0x180>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d101      	bne.n	8011c80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c7c:	f000 f91a 	bl	8011eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c80:	4b59      	ldr	r3, [pc, #356]	; (8011de8 <pvPortMalloc+0x184>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4013      	ands	r3, r2
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f040 8092 	bne.w	8011db2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d01f      	beq.n	8011cd4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011c94:	2208      	movs	r2, #8
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4413      	add	r3, r2
 8011c9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f003 0307 	and.w	r3, r3, #7
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d016      	beq.n	8011cd4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f023 0307 	bic.w	r3, r3, #7
 8011cac:	3308      	adds	r3, #8
 8011cae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f003 0307 	and.w	r3, r3, #7
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00c      	beq.n	8011cd4 <pvPortMalloc+0x70>
	__asm volatile
 8011cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cbe:	b672      	cpsid	i
 8011cc0:	f383 8811 	msr	BASEPRI, r3
 8011cc4:	f3bf 8f6f 	isb	sy
 8011cc8:	f3bf 8f4f 	dsb	sy
 8011ccc:	b662      	cpsie	i
 8011cce:	617b      	str	r3, [r7, #20]
}
 8011cd0:	bf00      	nop
 8011cd2:	e7fe      	b.n	8011cd2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d06b      	beq.n	8011db2 <pvPortMalloc+0x14e>
 8011cda:	4b44      	ldr	r3, [pc, #272]	; (8011dec <pvPortMalloc+0x188>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d866      	bhi.n	8011db2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ce4:	4b42      	ldr	r3, [pc, #264]	; (8011df0 <pvPortMalloc+0x18c>)
 8011ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ce8:	4b41      	ldr	r3, [pc, #260]	; (8011df0 <pvPortMalloc+0x18c>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cee:	e004      	b.n	8011cfa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d903      	bls.n	8011d0c <pvPortMalloc+0xa8>
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1f1      	bne.n	8011cf0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011d0c:	4b35      	ldr	r3, [pc, #212]	; (8011de4 <pvPortMalloc+0x180>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d04d      	beq.n	8011db2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011d16:	6a3b      	ldr	r3, [r7, #32]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2208      	movs	r2, #8
 8011d1c:	4413      	add	r3, r2
 8011d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2a:	685a      	ldr	r2, [r3, #4]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	1ad2      	subs	r2, r2, r3
 8011d30:	2308      	movs	r3, #8
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d921      	bls.n	8011d7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	f003 0307 	and.w	r3, r3, #7
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00c      	beq.n	8011d64 <pvPortMalloc+0x100>
	__asm volatile
 8011d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4e:	b672      	cpsid	i
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	b662      	cpsie	i
 8011d5e:	613b      	str	r3, [r7, #16]
}
 8011d60:	bf00      	nop
 8011d62:	e7fe      	b.n	8011d62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	685a      	ldr	r2, [r3, #4]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	1ad2      	subs	r2, r2, r3
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d76:	69b8      	ldr	r0, [r7, #24]
 8011d78:	f000 f8fe 	bl	8011f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d7c:	4b1b      	ldr	r3, [pc, #108]	; (8011dec <pvPortMalloc+0x188>)
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	4a19      	ldr	r2, [pc, #100]	; (8011dec <pvPortMalloc+0x188>)
 8011d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d8a:	4b18      	ldr	r3, [pc, #96]	; (8011dec <pvPortMalloc+0x188>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	4b19      	ldr	r3, [pc, #100]	; (8011df4 <pvPortMalloc+0x190>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d203      	bcs.n	8011d9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d96:	4b15      	ldr	r3, [pc, #84]	; (8011dec <pvPortMalloc+0x188>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4a16      	ldr	r2, [pc, #88]	; (8011df4 <pvPortMalloc+0x190>)
 8011d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da0:	685a      	ldr	r2, [r3, #4]
 8011da2:	4b11      	ldr	r3, [pc, #68]	; (8011de8 <pvPortMalloc+0x184>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	431a      	orrs	r2, r3
 8011da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	2200      	movs	r2, #0
 8011db0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011db2:	f7fe fc0f 	bl	80105d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	f003 0307 	and.w	r3, r3, #7
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00c      	beq.n	8011dda <pvPortMalloc+0x176>
	__asm volatile
 8011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc4:	b672      	cpsid	i
 8011dc6:	f383 8811 	msr	BASEPRI, r3
 8011dca:	f3bf 8f6f 	isb	sy
 8011dce:	f3bf 8f4f 	dsb	sy
 8011dd2:	b662      	cpsie	i
 8011dd4:	60fb      	str	r3, [r7, #12]
}
 8011dd6:	bf00      	nop
 8011dd8:	e7fe      	b.n	8011dd8 <pvPortMalloc+0x174>
	return pvReturn;
 8011dda:	69fb      	ldr	r3, [r7, #28]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3728      	adds	r7, #40	; 0x28
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	20011144 	.word	0x20011144
 8011de8:	20011150 	.word	0x20011150
 8011dec:	20011148 	.word	0x20011148
 8011df0:	2001113c 	.word	0x2001113c
 8011df4:	2001114c 	.word	0x2001114c

08011df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d04c      	beq.n	8011ea4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011e0a:	2308      	movs	r3, #8
 8011e0c:	425b      	negs	r3, r3
 8011e0e:	697a      	ldr	r2, [r7, #20]
 8011e10:	4413      	add	r3, r2
 8011e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	685a      	ldr	r2, [r3, #4]
 8011e1c:	4b23      	ldr	r3, [pc, #140]	; (8011eac <vPortFree+0xb4>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4013      	ands	r3, r2
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d10c      	bne.n	8011e40 <vPortFree+0x48>
	__asm volatile
 8011e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2a:	b672      	cpsid	i
 8011e2c:	f383 8811 	msr	BASEPRI, r3
 8011e30:	f3bf 8f6f 	isb	sy
 8011e34:	f3bf 8f4f 	dsb	sy
 8011e38:	b662      	cpsie	i
 8011e3a:	60fb      	str	r3, [r7, #12]
}
 8011e3c:	bf00      	nop
 8011e3e:	e7fe      	b.n	8011e3e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d00c      	beq.n	8011e62 <vPortFree+0x6a>
	__asm volatile
 8011e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4c:	b672      	cpsid	i
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	b662      	cpsie	i
 8011e5c:	60bb      	str	r3, [r7, #8]
}
 8011e5e:	bf00      	nop
 8011e60:	e7fe      	b.n	8011e60 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	685a      	ldr	r2, [r3, #4]
 8011e66:	4b11      	ldr	r3, [pc, #68]	; (8011eac <vPortFree+0xb4>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4013      	ands	r3, r2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d019      	beq.n	8011ea4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d115      	bne.n	8011ea4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	685a      	ldr	r2, [r3, #4]
 8011e7c:	4b0b      	ldr	r3, [pc, #44]	; (8011eac <vPortFree+0xb4>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	43db      	mvns	r3, r3
 8011e82:	401a      	ands	r2, r3
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e88:	f7fe fb96 	bl	80105b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	4b07      	ldr	r3, [pc, #28]	; (8011eb0 <vPortFree+0xb8>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4413      	add	r3, r2
 8011e96:	4a06      	ldr	r2, [pc, #24]	; (8011eb0 <vPortFree+0xb8>)
 8011e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e9a:	6938      	ldr	r0, [r7, #16]
 8011e9c:	f000 f86c 	bl	8011f78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011ea0:	f7fe fb98 	bl	80105d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011ea4:	bf00      	nop
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	20011150 	.word	0x20011150
 8011eb0:	20011148 	.word	0x20011148

08011eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ec0:	4b27      	ldr	r3, [pc, #156]	; (8011f60 <prvHeapInit+0xac>)
 8011ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f003 0307 	and.w	r3, r3, #7
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00c      	beq.n	8011ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	3307      	adds	r3, #7
 8011ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f023 0307 	bic.w	r3, r3, #7
 8011eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	1ad3      	subs	r3, r2, r3
 8011ee2:	4a1f      	ldr	r2, [pc, #124]	; (8011f60 <prvHeapInit+0xac>)
 8011ee4:	4413      	add	r3, r2
 8011ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011eec:	4a1d      	ldr	r2, [pc, #116]	; (8011f64 <prvHeapInit+0xb0>)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ef2:	4b1c      	ldr	r3, [pc, #112]	; (8011f64 <prvHeapInit+0xb0>)
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	4413      	add	r3, r2
 8011efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011f00:	2208      	movs	r2, #8
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	1a9b      	subs	r3, r3, r2
 8011f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f023 0307 	bic.w	r3, r3, #7
 8011f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	4a15      	ldr	r2, [pc, #84]	; (8011f68 <prvHeapInit+0xb4>)
 8011f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011f16:	4b14      	ldr	r3, [pc, #80]	; (8011f68 <prvHeapInit+0xb4>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f1e:	4b12      	ldr	r3, [pc, #72]	; (8011f68 <prvHeapInit+0xb4>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	2200      	movs	r2, #0
 8011f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	1ad2      	subs	r2, r2, r3
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f34:	4b0c      	ldr	r3, [pc, #48]	; (8011f68 <prvHeapInit+0xb4>)
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	4a0a      	ldr	r2, [pc, #40]	; (8011f6c <prvHeapInit+0xb8>)
 8011f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	4a09      	ldr	r2, [pc, #36]	; (8011f70 <prvHeapInit+0xbc>)
 8011f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <prvHeapInit+0xc0>)
 8011f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f52:	601a      	str	r2, [r3, #0]
}
 8011f54:	bf00      	nop
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	2000d53c 	.word	0x2000d53c
 8011f64:	2001113c 	.word	0x2001113c
 8011f68:	20011144 	.word	0x20011144
 8011f6c:	2001114c 	.word	0x2001114c
 8011f70:	20011148 	.word	0x20011148
 8011f74:	20011150 	.word	0x20011150

08011f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f80:	4b28      	ldr	r3, [pc, #160]	; (8012024 <prvInsertBlockIntoFreeList+0xac>)
 8011f82:	60fb      	str	r3, [r7, #12]
 8011f84:	e002      	b.n	8011f8c <prvInsertBlockIntoFreeList+0x14>
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	60fb      	str	r3, [r7, #12]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d8f7      	bhi.n	8011f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	68ba      	ldr	r2, [r7, #8]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d108      	bne.n	8011fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	685a      	ldr	r2, [r3, #4]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	441a      	add	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	441a      	add	r2, r3
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d118      	bne.n	8012000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	4b15      	ldr	r3, [pc, #84]	; (8012028 <prvInsertBlockIntoFreeList+0xb0>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d00d      	beq.n	8011ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	685a      	ldr	r2, [r3, #4]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	441a      	add	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	601a      	str	r2, [r3, #0]
 8011ff4:	e008      	b.n	8012008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ff6:	4b0c      	ldr	r3, [pc, #48]	; (8012028 <prvInsertBlockIntoFreeList+0xb0>)
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	e003      	b.n	8012008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012008:	68fa      	ldr	r2, [r7, #12]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	429a      	cmp	r2, r3
 801200e:	d002      	beq.n	8012016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012016:	bf00      	nop
 8012018:	3714      	adds	r7, #20
 801201a:	46bd      	mov	sp, r7
 801201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012020:	4770      	bx	lr
 8012022:	bf00      	nop
 8012024:	2001113c 	.word	0x2001113c
 8012028:	20011144 	.word	0x20011144

0801202c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012030:	2200      	movs	r2, #0
 8012032:	4912      	ldr	r1, [pc, #72]	; (801207c <MX_USB_DEVICE_Init+0x50>)
 8012034:	4812      	ldr	r0, [pc, #72]	; (8012080 <MX_USB_DEVICE_Init+0x54>)
 8012036:	f7fb fd13 	bl	800da60 <USBD_Init>
 801203a:	4603      	mov	r3, r0
 801203c:	2b00      	cmp	r3, #0
 801203e:	d001      	beq.n	8012044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012040:	f7f2 f866 	bl	8004110 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012044:	490f      	ldr	r1, [pc, #60]	; (8012084 <MX_USB_DEVICE_Init+0x58>)
 8012046:	480e      	ldr	r0, [pc, #56]	; (8012080 <MX_USB_DEVICE_Init+0x54>)
 8012048:	f7fb fd3a 	bl	800dac0 <USBD_RegisterClass>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d001      	beq.n	8012056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012052:	f7f2 f85d 	bl	8004110 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012056:	490c      	ldr	r1, [pc, #48]	; (8012088 <MX_USB_DEVICE_Init+0x5c>)
 8012058:	4809      	ldr	r0, [pc, #36]	; (8012080 <MX_USB_DEVICE_Init+0x54>)
 801205a:	f7fb fc71 	bl	800d940 <USBD_CDC_RegisterInterface>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d001      	beq.n	8012068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012064:	f7f2 f854 	bl	8004110 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012068:	4805      	ldr	r0, [pc, #20]	; (8012080 <MX_USB_DEVICE_Init+0x54>)
 801206a:	f7fb fd5f 	bl	800db2c <USBD_Start>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012074:	f7f2 f84c 	bl	8004110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012078:	bf00      	nop
 801207a:	bd80      	pop	{r7, pc}
 801207c:	200000b4 	.word	0x200000b4
 8012080:	20011154 	.word	0x20011154
 8012084:	2000001c 	.word	0x2000001c
 8012088:	200000a0 	.word	0x200000a0

0801208c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012090:	2200      	movs	r2, #0
 8012092:	4905      	ldr	r1, [pc, #20]	; (80120a8 <CDC_Init_FS+0x1c>)
 8012094:	4805      	ldr	r0, [pc, #20]	; (80120ac <CDC_Init_FS+0x20>)
 8012096:	f7fb fc6d 	bl	800d974 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801209a:	4905      	ldr	r1, [pc, #20]	; (80120b0 <CDC_Init_FS+0x24>)
 801209c:	4803      	ldr	r0, [pc, #12]	; (80120ac <CDC_Init_FS+0x20>)
 801209e:	f7fb fc8b 	bl	800d9b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80120a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20011c30 	.word	0x20011c30
 80120ac:	20011154 	.word	0x20011154
 80120b0:	20011430 	.word	0x20011430

080120b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80120b4:	b480      	push	{r7}
 80120b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80120b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr

080120c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	6039      	str	r1, [r7, #0]
 80120ce:	71fb      	strb	r3, [r7, #7]
 80120d0:	4613      	mov	r3, r2
 80120d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80120d4:	79fb      	ldrb	r3, [r7, #7]
 80120d6:	2b23      	cmp	r3, #35	; 0x23
 80120d8:	d84a      	bhi.n	8012170 <CDC_Control_FS+0xac>
 80120da:	a201      	add	r2, pc, #4	; (adr r2, 80120e0 <CDC_Control_FS+0x1c>)
 80120dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120e0:	08012171 	.word	0x08012171
 80120e4:	08012171 	.word	0x08012171
 80120e8:	08012171 	.word	0x08012171
 80120ec:	08012171 	.word	0x08012171
 80120f0:	08012171 	.word	0x08012171
 80120f4:	08012171 	.word	0x08012171
 80120f8:	08012171 	.word	0x08012171
 80120fc:	08012171 	.word	0x08012171
 8012100:	08012171 	.word	0x08012171
 8012104:	08012171 	.word	0x08012171
 8012108:	08012171 	.word	0x08012171
 801210c:	08012171 	.word	0x08012171
 8012110:	08012171 	.word	0x08012171
 8012114:	08012171 	.word	0x08012171
 8012118:	08012171 	.word	0x08012171
 801211c:	08012171 	.word	0x08012171
 8012120:	08012171 	.word	0x08012171
 8012124:	08012171 	.word	0x08012171
 8012128:	08012171 	.word	0x08012171
 801212c:	08012171 	.word	0x08012171
 8012130:	08012171 	.word	0x08012171
 8012134:	08012171 	.word	0x08012171
 8012138:	08012171 	.word	0x08012171
 801213c:	08012171 	.word	0x08012171
 8012140:	08012171 	.word	0x08012171
 8012144:	08012171 	.word	0x08012171
 8012148:	08012171 	.word	0x08012171
 801214c:	08012171 	.word	0x08012171
 8012150:	08012171 	.word	0x08012171
 8012154:	08012171 	.word	0x08012171
 8012158:	08012171 	.word	0x08012171
 801215c:	08012171 	.word	0x08012171
 8012160:	08012171 	.word	0x08012171
 8012164:	08012171 	.word	0x08012171
 8012168:	08012171 	.word	0x08012171
 801216c:	08012171 	.word	0x08012171
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012170:	bf00      	nop
  }

  return (USBD_OK);
 8012172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012174:	4618      	mov	r0, r3
 8012176:	370c      	adds	r7, #12
 8012178:	46bd      	mov	sp, r7
 801217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217e:	4770      	bx	lr

08012180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801218a:	6879      	ldr	r1, [r7, #4]
 801218c:	4805      	ldr	r0, [pc, #20]	; (80121a4 <CDC_Receive_FS+0x24>)
 801218e:	f7fb fc13 	bl	800d9b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012192:	4804      	ldr	r0, [pc, #16]	; (80121a4 <CDC_Receive_FS+0x24>)
 8012194:	f7fb fc2e 	bl	800d9f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012198:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801219a:	4618      	mov	r0, r3
 801219c:	3708      	adds	r7, #8
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	20011154 	.word	0x20011154

080121a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b087      	sub	sp, #28
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	4613      	mov	r3, r2
 80121b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80121b6:	2300      	movs	r3, #0
 80121b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80121ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121be:	4618      	mov	r0, r3
 80121c0:	371c      	adds	r7, #28
 80121c2:	46bd      	mov	sp, r7
 80121c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c8:	4770      	bx	lr
	...

080121cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	4603      	mov	r3, r0
 80121d4:	6039      	str	r1, [r7, #0]
 80121d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	2212      	movs	r2, #18
 80121dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80121de:	4b03      	ldr	r3, [pc, #12]	; (80121ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	370c      	adds	r7, #12
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr
 80121ec:	200000d4 	.word	0x200000d4

080121f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	4603      	mov	r3, r0
 80121f8:	6039      	str	r1, [r7, #0]
 80121fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2204      	movs	r2, #4
 8012200:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012202:	4b03      	ldr	r3, [pc, #12]	; (8012210 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012204:	4618      	mov	r0, r3
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	200000f4 	.word	0x200000f4

08012214 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	4603      	mov	r3, r0
 801221c:	6039      	str	r1, [r7, #0]
 801221e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012220:	79fb      	ldrb	r3, [r7, #7]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d105      	bne.n	8012232 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012226:	683a      	ldr	r2, [r7, #0]
 8012228:	4907      	ldr	r1, [pc, #28]	; (8012248 <USBD_FS_ProductStrDescriptor+0x34>)
 801222a:	4808      	ldr	r0, [pc, #32]	; (801224c <USBD_FS_ProductStrDescriptor+0x38>)
 801222c:	f7fc fe54 	bl	800eed8 <USBD_GetString>
 8012230:	e004      	b.n	801223c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012232:	683a      	ldr	r2, [r7, #0]
 8012234:	4904      	ldr	r1, [pc, #16]	; (8012248 <USBD_FS_ProductStrDescriptor+0x34>)
 8012236:	4805      	ldr	r0, [pc, #20]	; (801224c <USBD_FS_ProductStrDescriptor+0x38>)
 8012238:	f7fc fe4e 	bl	800eed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801223c:	4b02      	ldr	r3, [pc, #8]	; (8012248 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801223e:	4618      	mov	r0, r3
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20012430 	.word	0x20012430
 801224c:	080221f0 	.word	0x080221f0

08012250 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	6039      	str	r1, [r7, #0]
 801225a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801225c:	683a      	ldr	r2, [r7, #0]
 801225e:	4904      	ldr	r1, [pc, #16]	; (8012270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012260:	4804      	ldr	r0, [pc, #16]	; (8012274 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012262:	f7fc fe39 	bl	800eed8 <USBD_GetString>
  return USBD_StrDesc;
 8012266:	4b02      	ldr	r3, [pc, #8]	; (8012270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012268:	4618      	mov	r0, r3
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	20012430 	.word	0x20012430
 8012274:	08022208 	.word	0x08022208

08012278 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	4603      	mov	r3, r0
 8012280:	6039      	str	r1, [r7, #0]
 8012282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	221a      	movs	r2, #26
 8012288:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801228a:	f000 f855 	bl	8012338 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801228e:	4b02      	ldr	r3, [pc, #8]	; (8012298 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012290:	4618      	mov	r0, r3
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	200000f8 	.word	0x200000f8

0801229c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	4603      	mov	r3, r0
 80122a4:	6039      	str	r1, [r7, #0]
 80122a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80122a8:	79fb      	ldrb	r3, [r7, #7]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d105      	bne.n	80122ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	4907      	ldr	r1, [pc, #28]	; (80122d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80122b2:	4808      	ldr	r0, [pc, #32]	; (80122d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80122b4:	f7fc fe10 	bl	800eed8 <USBD_GetString>
 80122b8:	e004      	b.n	80122c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	4904      	ldr	r1, [pc, #16]	; (80122d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80122be:	4805      	ldr	r0, [pc, #20]	; (80122d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80122c0:	f7fc fe0a 	bl	800eed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80122c4:	4b02      	ldr	r3, [pc, #8]	; (80122d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3708      	adds	r7, #8
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	20012430 	.word	0x20012430
 80122d4:	0802221c 	.word	0x0802221c

080122d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	4603      	mov	r3, r0
 80122e0:	6039      	str	r1, [r7, #0]
 80122e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80122e4:	79fb      	ldrb	r3, [r7, #7]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d105      	bne.n	80122f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	4907      	ldr	r1, [pc, #28]	; (801230c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80122ee:	4808      	ldr	r0, [pc, #32]	; (8012310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80122f0:	f7fc fdf2 	bl	800eed8 <USBD_GetString>
 80122f4:	e004      	b.n	8012300 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	4904      	ldr	r1, [pc, #16]	; (801230c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80122fa:	4805      	ldr	r0, [pc, #20]	; (8012310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80122fc:	f7fc fdec 	bl	800eed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012300:	4b02      	ldr	r3, [pc, #8]	; (801230c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012302:	4618      	mov	r0, r3
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	20012430 	.word	0x20012430
 8012310:	08022228 	.word	0x08022228

08012314 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	4603      	mov	r3, r0
 801231c:	6039      	str	r1, [r7, #0]
 801231e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	220c      	movs	r2, #12
 8012324:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012326:	4b03      	ldr	r3, [pc, #12]	; (8012334 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr
 8012334:	200000e8 	.word	0x200000e8

08012338 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801233e:	4b0f      	ldr	r3, [pc, #60]	; (801237c <Get_SerialNum+0x44>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012344:	4b0e      	ldr	r3, [pc, #56]	; (8012380 <Get_SerialNum+0x48>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801234a:	4b0e      	ldr	r3, [pc, #56]	; (8012384 <Get_SerialNum+0x4c>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4413      	add	r3, r2
 8012356:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d009      	beq.n	8012372 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801235e:	2208      	movs	r2, #8
 8012360:	4909      	ldr	r1, [pc, #36]	; (8012388 <Get_SerialNum+0x50>)
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f000 f814 	bl	8012390 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012368:	2204      	movs	r2, #4
 801236a:	4908      	ldr	r1, [pc, #32]	; (801238c <Get_SerialNum+0x54>)
 801236c:	68b8      	ldr	r0, [r7, #8]
 801236e:	f000 f80f 	bl	8012390 <IntToUnicode>
  }
}
 8012372:	bf00      	nop
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	1ff0f420 	.word	0x1ff0f420
 8012380:	1ff0f424 	.word	0x1ff0f424
 8012384:	1ff0f428 	.word	0x1ff0f428
 8012388:	200000fa 	.word	0x200000fa
 801238c:	2000010a 	.word	0x2000010a

08012390 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012390:	b480      	push	{r7}
 8012392:	b087      	sub	sp, #28
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	4613      	mov	r3, r2
 801239c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801239e:	2300      	movs	r3, #0
 80123a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80123a2:	2300      	movs	r3, #0
 80123a4:	75fb      	strb	r3, [r7, #23]
 80123a6:	e027      	b.n	80123f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	0f1b      	lsrs	r3, r3, #28
 80123ac:	2b09      	cmp	r3, #9
 80123ae:	d80b      	bhi.n	80123c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	0f1b      	lsrs	r3, r3, #28
 80123b4:	b2da      	uxtb	r2, r3
 80123b6:	7dfb      	ldrb	r3, [r7, #23]
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	4619      	mov	r1, r3
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	440b      	add	r3, r1
 80123c0:	3230      	adds	r2, #48	; 0x30
 80123c2:	b2d2      	uxtb	r2, r2
 80123c4:	701a      	strb	r2, [r3, #0]
 80123c6:	e00a      	b.n	80123de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	0f1b      	lsrs	r3, r3, #28
 80123cc:	b2da      	uxtb	r2, r3
 80123ce:	7dfb      	ldrb	r3, [r7, #23]
 80123d0:	005b      	lsls	r3, r3, #1
 80123d2:	4619      	mov	r1, r3
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	440b      	add	r3, r1
 80123d8:	3237      	adds	r2, #55	; 0x37
 80123da:	b2d2      	uxtb	r2, r2
 80123dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80123e4:	7dfb      	ldrb	r3, [r7, #23]
 80123e6:	005b      	lsls	r3, r3, #1
 80123e8:	3301      	adds	r3, #1
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	4413      	add	r3, r2
 80123ee:	2200      	movs	r2, #0
 80123f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80123f2:	7dfb      	ldrb	r3, [r7, #23]
 80123f4:	3301      	adds	r3, #1
 80123f6:	75fb      	strb	r3, [r7, #23]
 80123f8:	7dfa      	ldrb	r2, [r7, #23]
 80123fa:	79fb      	ldrb	r3, [r7, #7]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d3d3      	bcc.n	80123a8 <IntToUnicode+0x18>
  }
}
 8012400:	bf00      	nop
 8012402:	bf00      	nop
 8012404:	371c      	adds	r7, #28
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr
	...

08012410 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b0ae      	sub	sp, #184	; 0xb8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012418:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801241c:	2200      	movs	r2, #0
 801241e:	601a      	str	r2, [r3, #0]
 8012420:	605a      	str	r2, [r3, #4]
 8012422:	609a      	str	r2, [r3, #8]
 8012424:	60da      	str	r2, [r3, #12]
 8012426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012428:	f107 0314 	add.w	r3, r7, #20
 801242c:	2290      	movs	r2, #144	; 0x90
 801242e:	2100      	movs	r1, #0
 8012430:	4618      	mov	r0, r3
 8012432:	f00e fdcb 	bl	8020fcc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801243e:	d161      	bne.n	8012504 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8012440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012444:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8012446:	2300      	movs	r3, #0
 8012448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801244c:	f107 0314 	add.w	r3, r7, #20
 8012450:	4618      	mov	r0, r3
 8012452:	f7f6 fdc9 	bl	8008fe8 <HAL_RCCEx_PeriphCLKConfig>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801245c:	f7f1 fe58 	bl	8004110 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012460:	4b2a      	ldr	r3, [pc, #168]	; (801250c <HAL_PCD_MspInit+0xfc>)
 8012462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012464:	4a29      	ldr	r2, [pc, #164]	; (801250c <HAL_PCD_MspInit+0xfc>)
 8012466:	f043 0301 	orr.w	r3, r3, #1
 801246a:	6313      	str	r3, [r2, #48]	; 0x30
 801246c:	4b27      	ldr	r3, [pc, #156]	; (801250c <HAL_PCD_MspInit+0xfc>)
 801246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012470:	f003 0301 	and.w	r3, r3, #1
 8012474:	613b      	str	r3, [r7, #16]
 8012476:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8012478:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801247c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012480:	2302      	movs	r3, #2
 8012482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012486:	2300      	movs	r3, #0
 8012488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801248c:	2303      	movs	r3, #3
 801248e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012492:	230a      	movs	r3, #10
 8012494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012498:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801249c:	4619      	mov	r1, r3
 801249e:	481c      	ldr	r0, [pc, #112]	; (8012510 <HAL_PCD_MspInit+0x100>)
 80124a0:	f7f4 fba4 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80124a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80124ac:	2300      	movs	r3, #0
 80124ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124b2:	2300      	movs	r3, #0
 80124b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80124b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80124bc:	4619      	mov	r1, r3
 80124be:	4814      	ldr	r0, [pc, #80]	; (8012510 <HAL_PCD_MspInit+0x100>)
 80124c0:	f7f4 fb94 	bl	8006bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80124c4:	4b11      	ldr	r3, [pc, #68]	; (801250c <HAL_PCD_MspInit+0xfc>)
 80124c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124c8:	4a10      	ldr	r2, [pc, #64]	; (801250c <HAL_PCD_MspInit+0xfc>)
 80124ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124ce:	6353      	str	r3, [r2, #52]	; 0x34
 80124d0:	4b0e      	ldr	r3, [pc, #56]	; (801250c <HAL_PCD_MspInit+0xfc>)
 80124d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124d8:	60fb      	str	r3, [r7, #12]
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	4b0b      	ldr	r3, [pc, #44]	; (801250c <HAL_PCD_MspInit+0xfc>)
 80124de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124e0:	4a0a      	ldr	r2, [pc, #40]	; (801250c <HAL_PCD_MspInit+0xfc>)
 80124e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80124e6:	6453      	str	r3, [r2, #68]	; 0x44
 80124e8:	4b08      	ldr	r3, [pc, #32]	; (801250c <HAL_PCD_MspInit+0xfc>)
 80124ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124f0:	60bb      	str	r3, [r7, #8]
 80124f2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80124f4:	2200      	movs	r2, #0
 80124f6:	2105      	movs	r1, #5
 80124f8:	2043      	movs	r0, #67	; 0x43
 80124fa:	f7f3 fc11 	bl	8005d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80124fe:	2043      	movs	r0, #67	; 0x43
 8012500:	f7f3 fc2a 	bl	8005d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012504:	bf00      	nop
 8012506:	37b8      	adds	r7, #184	; 0xb8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	40023800 	.word	0x40023800
 8012510:	40020000 	.word	0x40020000

08012514 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012528:	4619      	mov	r1, r3
 801252a:	4610      	mov	r0, r2
 801252c:	f7fb fb4b 	bl	800dbc6 <USBD_LL_SetupStage>
}
 8012530:	bf00      	nop
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	460b      	mov	r3, r1
 8012542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801254a:	78fa      	ldrb	r2, [r7, #3]
 801254c:	6879      	ldr	r1, [r7, #4]
 801254e:	4613      	mov	r3, r2
 8012550:	00db      	lsls	r3, r3, #3
 8012552:	4413      	add	r3, r2
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	440b      	add	r3, r1
 8012558:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	78fb      	ldrb	r3, [r7, #3]
 8012560:	4619      	mov	r1, r3
 8012562:	f7fb fb85 	bl	800dc70 <USBD_LL_DataOutStage>
}
 8012566:	bf00      	nop
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b082      	sub	sp, #8
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
 8012576:	460b      	mov	r3, r1
 8012578:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8012580:	78fa      	ldrb	r2, [r7, #3]
 8012582:	6879      	ldr	r1, [r7, #4]
 8012584:	4613      	mov	r3, r2
 8012586:	00db      	lsls	r3, r3, #3
 8012588:	4413      	add	r3, r2
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	440b      	add	r3, r1
 801258e:	334c      	adds	r3, #76	; 0x4c
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	78fb      	ldrb	r3, [r7, #3]
 8012594:	4619      	mov	r1, r3
 8012596:	f7fb fc1e 	bl	800ddd6 <USBD_LL_DataInStage>
}
 801259a:	bf00      	nop
 801259c:	3708      	adds	r7, #8
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b082      	sub	sp, #8
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fb fd52 	bl	800e05a <USBD_LL_SOF>
}
 80125b6:	bf00      	nop
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b084      	sub	sp, #16
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80125c6:	2301      	movs	r3, #1
 80125c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	68db      	ldr	r3, [r3, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d102      	bne.n	80125d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80125d2:	2300      	movs	r3, #0
 80125d4:	73fb      	strb	r3, [r7, #15]
 80125d6:	e008      	b.n	80125ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	2b02      	cmp	r3, #2
 80125de:	d102      	bne.n	80125e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80125e0:	2301      	movs	r3, #1
 80125e2:	73fb      	strb	r3, [r7, #15]
 80125e4:	e001      	b.n	80125ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80125e6:	f7f1 fd93 	bl	8004110 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80125f0:	7bfa      	ldrb	r2, [r7, #15]
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fb fcf2 	bl	800dfde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012600:	4618      	mov	r0, r3
 8012602:	f7fb fc9a 	bl	800df3a <USBD_LL_Reset>
}
 8012606:	bf00      	nop
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
	...

08012610 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801261e:	4618      	mov	r0, r3
 8012620:	f7fb fced 	bl	800dffe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	6812      	ldr	r2, [r2, #0]
 8012632:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012636:	f043 0301 	orr.w	r3, r3, #1
 801263a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6a1b      	ldr	r3, [r3, #32]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d005      	beq.n	8012650 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012644:	4b04      	ldr	r3, [pc, #16]	; (8012658 <HAL_PCD_SuspendCallback+0x48>)
 8012646:	691b      	ldr	r3, [r3, #16]
 8012648:	4a03      	ldr	r2, [pc, #12]	; (8012658 <HAL_PCD_SuspendCallback+0x48>)
 801264a:	f043 0306 	orr.w	r3, r3, #6
 801264e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012650:	bf00      	nop
 8012652:	3708      	adds	r7, #8
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}
 8012658:	e000ed00 	.word	0xe000ed00

0801265c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801266a:	4618      	mov	r0, r3
 801266c:	f7fb fcdd 	bl	800e02a <USBD_LL_Resume>
}
 8012670:	bf00      	nop
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	460b      	mov	r3, r1
 8012682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801268a:	78fa      	ldrb	r2, [r7, #3]
 801268c:	4611      	mov	r1, r2
 801268e:	4618      	mov	r0, r3
 8012690:	f7fb fd35 	bl	800e0fe <USBD_LL_IsoOUTIncomplete>
}
 8012694:	bf00      	nop
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	460b      	mov	r3, r1
 80126a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80126ae:	78fa      	ldrb	r2, [r7, #3]
 80126b0:	4611      	mov	r1, r2
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fb fcf1 	bl	800e09a <USBD_LL_IsoINIncomplete>
}
 80126b8:	bf00      	nop
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fb fd47 	bl	800e162 <USBD_LL_DevConnected>
}
 80126d4:	bf00      	nop
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fb fd44 	bl	800e178 <USBD_LL_DevDisconnected>
}
 80126f0:	bf00      	nop
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d13c      	bne.n	8012782 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012708:	4a20      	ldr	r2, [pc, #128]	; (801278c <USBD_LL_Init+0x94>)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4a1e      	ldr	r2, [pc, #120]	; (801278c <USBD_LL_Init+0x94>)
 8012714:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012718:	4b1c      	ldr	r3, [pc, #112]	; (801278c <USBD_LL_Init+0x94>)
 801271a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801271e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012720:	4b1a      	ldr	r3, [pc, #104]	; (801278c <USBD_LL_Init+0x94>)
 8012722:	2206      	movs	r2, #6
 8012724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012726:	4b19      	ldr	r3, [pc, #100]	; (801278c <USBD_LL_Init+0x94>)
 8012728:	2202      	movs	r2, #2
 801272a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801272c:	4b17      	ldr	r3, [pc, #92]	; (801278c <USBD_LL_Init+0x94>)
 801272e:	2200      	movs	r2, #0
 8012730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012732:	4b16      	ldr	r3, [pc, #88]	; (801278c <USBD_LL_Init+0x94>)
 8012734:	2202      	movs	r2, #2
 8012736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8012738:	4b14      	ldr	r3, [pc, #80]	; (801278c <USBD_LL_Init+0x94>)
 801273a:	2201      	movs	r2, #1
 801273c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801273e:	4b13      	ldr	r3, [pc, #76]	; (801278c <USBD_LL_Init+0x94>)
 8012740:	2200      	movs	r2, #0
 8012742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012744:	4b11      	ldr	r3, [pc, #68]	; (801278c <USBD_LL_Init+0x94>)
 8012746:	2200      	movs	r2, #0
 8012748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801274a:	4b10      	ldr	r3, [pc, #64]	; (801278c <USBD_LL_Init+0x94>)
 801274c:	2201      	movs	r2, #1
 801274e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012750:	4b0e      	ldr	r3, [pc, #56]	; (801278c <USBD_LL_Init+0x94>)
 8012752:	2200      	movs	r2, #0
 8012754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012756:	480d      	ldr	r0, [pc, #52]	; (801278c <USBD_LL_Init+0x94>)
 8012758:	f7f4 fc27 	bl	8006faa <HAL_PCD_Init>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012762:	f7f1 fcd5 	bl	8004110 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012766:	2180      	movs	r1, #128	; 0x80
 8012768:	4808      	ldr	r0, [pc, #32]	; (801278c <USBD_LL_Init+0x94>)
 801276a:	f7f5 fea2 	bl	80084b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801276e:	2240      	movs	r2, #64	; 0x40
 8012770:	2100      	movs	r1, #0
 8012772:	4806      	ldr	r0, [pc, #24]	; (801278c <USBD_LL_Init+0x94>)
 8012774:	f7f5 fe56 	bl	8008424 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012778:	2280      	movs	r2, #128	; 0x80
 801277a:	2101      	movs	r1, #1
 801277c:	4803      	ldr	r0, [pc, #12]	; (801278c <USBD_LL_Init+0x94>)
 801277e:	f7f5 fe51 	bl	8008424 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012782:	2300      	movs	r3, #0
}
 8012784:	4618      	mov	r0, r3
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}
 801278c:	20012630 	.word	0x20012630

08012790 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012798:	2300      	movs	r3, #0
 801279a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801279c:	2300      	movs	r3, #0
 801279e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7f4 fd23 	bl	80071f2 <HAL_PCD_Start>
 80127ac:	4603      	mov	r3, r0
 80127ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127b0:	7bfb      	ldrb	r3, [r7, #15]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f000 f97e 	bl	8012ab4 <USBD_Get_USB_Status>
 80127b8:	4603      	mov	r3, r0
 80127ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3710      	adds	r7, #16
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b084      	sub	sp, #16
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
 80127ce:	4608      	mov	r0, r1
 80127d0:	4611      	mov	r1, r2
 80127d2:	461a      	mov	r2, r3
 80127d4:	4603      	mov	r3, r0
 80127d6:	70fb      	strb	r3, [r7, #3]
 80127d8:	460b      	mov	r3, r1
 80127da:	70bb      	strb	r3, [r7, #2]
 80127dc:	4613      	mov	r3, r2
 80127de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127e0:	2300      	movs	r3, #0
 80127e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127e4:	2300      	movs	r3, #0
 80127e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80127ee:	78bb      	ldrb	r3, [r7, #2]
 80127f0:	883a      	ldrh	r2, [r7, #0]
 80127f2:	78f9      	ldrb	r1, [r7, #3]
 80127f4:	f7f5 fa10 	bl	8007c18 <HAL_PCD_EP_Open>
 80127f8:	4603      	mov	r3, r0
 80127fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127fc:	7bfb      	ldrb	r3, [r7, #15]
 80127fe:	4618      	mov	r0, r3
 8012800:	f000 f958 	bl	8012ab4 <USBD_Get_USB_Status>
 8012804:	4603      	mov	r3, r0
 8012806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012808:	7bbb      	ldrb	r3, [r7, #14]
}
 801280a:	4618      	mov	r0, r3
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012812:	b580      	push	{r7, lr}
 8012814:	b084      	sub	sp, #16
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	460b      	mov	r3, r1
 801281c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801281e:	2300      	movs	r3, #0
 8012820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012822:	2300      	movs	r3, #0
 8012824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801282c:	78fa      	ldrb	r2, [r7, #3]
 801282e:	4611      	mov	r1, r2
 8012830:	4618      	mov	r0, r3
 8012832:	f7f5 fa59 	bl	8007ce8 <HAL_PCD_EP_Close>
 8012836:	4603      	mov	r3, r0
 8012838:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801283a:	7bfb      	ldrb	r3, [r7, #15]
 801283c:	4618      	mov	r0, r3
 801283e:	f000 f939 	bl	8012ab4 <USBD_Get_USB_Status>
 8012842:	4603      	mov	r3, r0
 8012844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012846:	7bbb      	ldrb	r3, [r7, #14]
}
 8012848:	4618      	mov	r0, r3
 801284a:	3710      	adds	r7, #16
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	460b      	mov	r3, r1
 801285a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801285c:	2300      	movs	r3, #0
 801285e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012860:	2300      	movs	r3, #0
 8012862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801286a:	78fa      	ldrb	r2, [r7, #3]
 801286c:	4611      	mov	r1, r2
 801286e:	4618      	mov	r0, r3
 8012870:	f7f5 fb31 	bl	8007ed6 <HAL_PCD_EP_SetStall>
 8012874:	4603      	mov	r3, r0
 8012876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012878:	7bfb      	ldrb	r3, [r7, #15]
 801287a:	4618      	mov	r0, r3
 801287c:	f000 f91a 	bl	8012ab4 <USBD_Get_USB_Status>
 8012880:	4603      	mov	r3, r0
 8012882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012884:	7bbb      	ldrb	r3, [r7, #14]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801288e:	b580      	push	{r7, lr}
 8012890:	b084      	sub	sp, #16
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	460b      	mov	r3, r1
 8012898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801289a:	2300      	movs	r3, #0
 801289c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801289e:	2300      	movs	r3, #0
 80128a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128a8:	78fa      	ldrb	r2, [r7, #3]
 80128aa:	4611      	mov	r1, r2
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7f5 fb76 	bl	8007f9e <HAL_PCD_EP_ClrStall>
 80128b2:	4603      	mov	r3, r0
 80128b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f000 f8fb 	bl	8012ab4 <USBD_Get_USB_Status>
 80128be:	4603      	mov	r3, r0
 80128c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3710      	adds	r7, #16
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	460b      	mov	r3, r1
 80128d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80128e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	da0b      	bge.n	8012900 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80128e8:	78fb      	ldrb	r3, [r7, #3]
 80128ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128ee:	68f9      	ldr	r1, [r7, #12]
 80128f0:	4613      	mov	r3, r2
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	4413      	add	r3, r2
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	440b      	add	r3, r1
 80128fa:	333e      	adds	r3, #62	; 0x3e
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	e00b      	b.n	8012918 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012900:	78fb      	ldrb	r3, [r7, #3]
 8012902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012906:	68f9      	ldr	r1, [r7, #12]
 8012908:	4613      	mov	r3, r2
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	4413      	add	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	440b      	add	r3, r1
 8012912:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012916:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012918:	4618      	mov	r0, r3
 801291a:	3714      	adds	r7, #20
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	460b      	mov	r3, r1
 801292e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012930:	2300      	movs	r3, #0
 8012932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012934:	2300      	movs	r3, #0
 8012936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801293e:	78fa      	ldrb	r2, [r7, #3]
 8012940:	4611      	mov	r1, r2
 8012942:	4618      	mov	r0, r3
 8012944:	f7f5 f943 	bl	8007bce <HAL_PCD_SetAddress>
 8012948:	4603      	mov	r3, r0
 801294a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801294c:	7bfb      	ldrb	r3, [r7, #15]
 801294e:	4618      	mov	r0, r3
 8012950:	f000 f8b0 	bl	8012ab4 <USBD_Get_USB_Status>
 8012954:	4603      	mov	r3, r0
 8012956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012958:	7bbb      	ldrb	r3, [r7, #14]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b086      	sub	sp, #24
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	607a      	str	r2, [r7, #4]
 801296c:	603b      	str	r3, [r7, #0]
 801296e:	460b      	mov	r3, r1
 8012970:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012976:	2300      	movs	r3, #0
 8012978:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012980:	7af9      	ldrb	r1, [r7, #11]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	f7f5 fa5c 	bl	8007e42 <HAL_PCD_EP_Transmit>
 801298a:	4603      	mov	r3, r0
 801298c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801298e:	7dfb      	ldrb	r3, [r7, #23]
 8012990:	4618      	mov	r0, r3
 8012992:	f000 f88f 	bl	8012ab4 <USBD_Get_USB_Status>
 8012996:	4603      	mov	r3, r0
 8012998:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801299a:	7dbb      	ldrb	r3, [r7, #22]
}
 801299c:	4618      	mov	r0, r3
 801299e:	3718      	adds	r7, #24
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	607a      	str	r2, [r7, #4]
 80129ae:	603b      	str	r3, [r7, #0]
 80129b0:	460b      	mov	r3, r1
 80129b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129b4:	2300      	movs	r3, #0
 80129b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129b8:	2300      	movs	r3, #0
 80129ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80129c2:	7af9      	ldrb	r1, [r7, #11]
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	f7f5 f9d8 	bl	8007d7c <HAL_PCD_EP_Receive>
 80129cc:	4603      	mov	r3, r0
 80129ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129d0:	7dfb      	ldrb	r3, [r7, #23]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f000 f86e 	bl	8012ab4 <USBD_Get_USB_Status>
 80129d8:	4603      	mov	r3, r0
 80129da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3718      	adds	r7, #24
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}

080129e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129e6:	b580      	push	{r7, lr}
 80129e8:	b082      	sub	sp, #8
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
 80129ee:	460b      	mov	r3, r1
 80129f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80129f8:	78fa      	ldrb	r2, [r7, #3]
 80129fa:	4611      	mov	r1, r2
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7f5 fa08 	bl	8007e12 <HAL_PCD_EP_GetRxCount>
 8012a02:	4603      	mov	r3, r0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	460b      	mov	r3, r1
 8012a16:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012a18:	78fb      	ldrb	r3, [r7, #3]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d002      	beq.n	8012a24 <HAL_PCDEx_LPM_Callback+0x18>
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d01f      	beq.n	8012a62 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012a22:	e03b      	b.n	8012a9c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6a1b      	ldr	r3, [r3, #32]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d007      	beq.n	8012a3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012a2c:	f000 f83c 	bl	8012aa8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a30:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012a32:	691b      	ldr	r3, [r3, #16]
 8012a34:	4a1b      	ldr	r2, [pc, #108]	; (8012aa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012a36:	f023 0306 	bic.w	r3, r3, #6
 8012a3a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	6812      	ldr	r2, [r2, #0]
 8012a4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012a4e:	f023 0301 	bic.w	r3, r3, #1
 8012a52:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7fb fae5 	bl	800e02a <USBD_LL_Resume>
    break;
 8012a60:	e01c      	b.n	8012a9c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	6812      	ldr	r2, [r2, #0]
 8012a70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012a74:	f043 0301 	orr.w	r3, r3, #1
 8012a78:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7fb fabc 	bl	800dffe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6a1b      	ldr	r3, [r3, #32]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d005      	beq.n	8012a9a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a8e:	4b05      	ldr	r3, [pc, #20]	; (8012aa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	4a04      	ldr	r2, [pc, #16]	; (8012aa4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012a94:	f043 0306 	orr.w	r3, r3, #6
 8012a98:	6113      	str	r3, [r2, #16]
    break;
 8012a9a:	bf00      	nop
}
 8012a9c:	bf00      	nop
 8012a9e:	3708      	adds	r7, #8
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	e000ed00 	.word	0xe000ed00

08012aa8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012aac:	f7f1 faac 	bl	8004008 <SystemClock_Config>
}
 8012ab0:	bf00      	nop
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b085      	sub	sp, #20
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	4603      	mov	r3, r0
 8012abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012ac2:	79fb      	ldrb	r3, [r7, #7]
 8012ac4:	2b03      	cmp	r3, #3
 8012ac6:	d817      	bhi.n	8012af8 <USBD_Get_USB_Status+0x44>
 8012ac8:	a201      	add	r2, pc, #4	; (adr r2, 8012ad0 <USBD_Get_USB_Status+0x1c>)
 8012aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ace:	bf00      	nop
 8012ad0:	08012ae1 	.word	0x08012ae1
 8012ad4:	08012ae7 	.word	0x08012ae7
 8012ad8:	08012aed 	.word	0x08012aed
 8012adc:	08012af3 	.word	0x08012af3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ae4:	e00b      	b.n	8012afe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ae6:	2303      	movs	r3, #3
 8012ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8012aea:	e008      	b.n	8012afe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012aec:	2301      	movs	r3, #1
 8012aee:	73fb      	strb	r3, [r7, #15]
    break;
 8012af0:	e005      	b.n	8012afe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012af2:	2303      	movs	r3, #3
 8012af4:	73fb      	strb	r3, [r7, #15]
    break;
 8012af6:	e002      	b.n	8012afe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012af8:	2303      	movs	r3, #3
 8012afa:	73fb      	strb	r3, [r7, #15]
    break;
 8012afc:	bf00      	nop
  }
  return usb_status;
 8012afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3714      	adds	r7, #20
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8012b0c:	4b04      	ldr	r3, [pc, #16]	; (8012b20 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	b10a      	cbz	r2, 8012b16 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8012b12:	4803      	ldr	r0, [pc, #12]	; (8012b20 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8012b14:	4770      	bx	lr
 8012b16:	4a03      	ldr	r2, [pc, #12]	; (8012b24 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8012b18:	4801      	ldr	r0, [pc, #4]	; (8012b20 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8012b1a:	6812      	ldr	r2, [r2, #0]
 8012b1c:	601a      	str	r2, [r3, #0]
 8012b1e:	4770      	bx	lr
 8012b20:	2000011c 	.word	0x2000011c
 8012b24:	200003cc 	.word	0x200003cc

08012b28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8012b28:	4a02      	ldr	r2, [pc, #8]	; (8012b34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xc>)
 8012b2a:	4b03      	ldr	r3, [pc, #12]	; (8012b38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x10>)
 8012b2c:	6812      	ldr	r2, [r2, #0]
 8012b2e:	601a      	str	r2, [r3, #0]
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	200003cc 	.word	0x200003cc
 8012b38:	2000011c 	.word	0x2000011c

08012b3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012b3c:	4b04      	ldr	r3, [pc, #16]	; (8012b50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	b10a      	cbz	r2, 8012b46 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8012b42:	4803      	ldr	r0, [pc, #12]	; (8012b50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8012b44:	4770      	bx	lr
 8012b46:	4a03      	ldr	r2, [pc, #12]	; (8012b54 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8012b48:	4801      	ldr	r0, [pc, #4]	; (8012b50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8012b4a:	6812      	ldr	r2, [r2, #0]
 8012b4c:	601a      	str	r2, [r3, #0]
 8012b4e:	4770      	bx	lr
 8012b50:	20000130 	.word	0x20000130
 8012b54:	200003cc 	.word	0x200003cc

08012b58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012b58:	4a02      	ldr	r2, [pc, #8]	; (8012b64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8012b5a:	4b03      	ldr	r3, [pc, #12]	; (8012b68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8012b5c:	6812      	ldr	r2, [r2, #0]
 8012b5e:	601a      	str	r2, [r3, #0]
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	200003cc 	.word	0x200003cc
 8012b68:	20000130 	.word	0x20000130

08012b6c <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8012b6c:	f004 b9cc 	b.w	8016f08 <geometry_msgs__msg__Point__init>

08012b70 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8012b70:	f004 b9ce 	b.w	8016f10 <geometry_msgs__msg__Point__fini>

08012b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8012b74:	4b04      	ldr	r3, [pc, #16]	; (8012b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	b10a      	cbz	r2, 8012b7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8012b7a:	4803      	ldr	r0, [pc, #12]	; (8012b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8012b7c:	4770      	bx	lr
 8012b7e:	4a03      	ldr	r2, [pc, #12]	; (8012b8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8012b80:	4801      	ldr	r0, [pc, #4]	; (8012b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8012b82:	6812      	ldr	r2, [r2, #0]
 8012b84:	601a      	str	r2, [r3, #0]
 8012b86:	4770      	bx	lr
 8012b88:	200001f0 	.word	0x200001f0
 8012b8c:	200003d0 	.word	0x200003d0

08012b90 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8012b90:	f004 b9c0 	b.w	8016f14 <geometry_msgs__msg__Twist__init>

08012b94 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8012b94:	f004 b9e2 	b.w	8016f5c <geometry_msgs__msg__Twist__fini>

08012b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012b98:	b510      	push	{r4, lr}
 8012b9a:	4c08      	ldr	r4, [pc, #32]	; (8012bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8012b9c:	f000 f818 	bl	8012bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012ba0:	60e0      	str	r0, [r4, #12]
 8012ba2:	f000 f815 	bl	8012bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012ba6:	4b06      	ldr	r3, [pc, #24]	; (8012bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8012ba8:	64a0      	str	r0, [r4, #72]	; 0x48
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	b10a      	cbz	r2, 8012bb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8012bae:	4804      	ldr	r0, [pc, #16]	; (8012bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8012bb0:	bd10      	pop	{r4, pc}
 8012bb2:	4a04      	ldr	r2, [pc, #16]	; (8012bc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8012bb4:	4802      	ldr	r0, [pc, #8]	; (8012bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8012bb6:	6812      	ldr	r2, [r2, #0]
 8012bb8:	601a      	str	r2, [r3, #0]
 8012bba:	bd10      	pop	{r4, pc}
 8012bbc:	200001fc 	.word	0x200001fc
 8012bc0:	20000274 	.word	0x20000274
 8012bc4:	200003d0 	.word	0x200003d0

08012bc8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8012bc8:	f004 b9d4 	b.w	8016f74 <geometry_msgs__msg__Vector3__init>

08012bcc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8012bcc:	f004 b9d6 	b.w	8016f7c <geometry_msgs__msg__Vector3__fini>

08012bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8012bd0:	4b04      	ldr	r3, [pc, #16]	; (8012be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	b10a      	cbz	r2, 8012bda <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8012bd6:	4803      	ldr	r0, [pc, #12]	; (8012be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012bd8:	4770      	bx	lr
 8012bda:	4a03      	ldr	r2, [pc, #12]	; (8012be8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8012bdc:	4801      	ldr	r0, [pc, #4]	; (8012be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012bde:	6812      	ldr	r2, [r2, #0]
 8012be0:	601a      	str	r2, [r3, #0]
 8012be2:	4770      	bx	lr
 8012be4:	20000334 	.word	0x20000334
 8012be8:	200003d0 	.word	0x200003d0

08012bec <get_serialized_size_geometry_msgs__msg__Point>:
 8012bec:	b1b8      	cbz	r0, 8012c1e <get_serialized_size_geometry_msgs__msg__Point+0x32>
 8012bee:	b538      	push	{r3, r4, r5, lr}
 8012bf0:	460d      	mov	r5, r1
 8012bf2:	2108      	movs	r1, #8
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	f001 fad7 	bl	80141a8 <ucdr_alignment>
 8012bfa:	f105 0308 	add.w	r3, r5, #8
 8012bfe:	2108      	movs	r1, #8
 8012c00:	f1c5 0508 	rsb	r5, r5, #8
 8012c04:	181c      	adds	r4, r3, r0
 8012c06:	4620      	mov	r0, r4
 8012c08:	f001 face 	bl	80141a8 <ucdr_alignment>
 8012c0c:	2108      	movs	r1, #8
 8012c0e:	4408      	add	r0, r1
 8012c10:	4404      	add	r4, r0
 8012c12:	4620      	mov	r0, r4
 8012c14:	f001 fac8 	bl	80141a8 <ucdr_alignment>
 8012c18:	4428      	add	r0, r5
 8012c1a:	4420      	add	r0, r4
 8012c1c:	bd38      	pop	{r3, r4, r5, pc}
 8012c1e:	4770      	bx	lr

08012c20 <_Point__cdr_deserialize>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	460c      	mov	r4, r1
 8012c24:	b171      	cbz	r1, 8012c44 <_Point__cdr_deserialize+0x24>
 8012c26:	4605      	mov	r5, r0
 8012c28:	f001 f9a0 	bl	8013f6c <ucdr_deserialize_double>
 8012c2c:	f104 0108 	add.w	r1, r4, #8
 8012c30:	4628      	mov	r0, r5
 8012c32:	f001 f99b 	bl	8013f6c <ucdr_deserialize_double>
 8012c36:	f104 0110 	add.w	r1, r4, #16
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c40:	f001 b994 	b.w	8013f6c <ucdr_deserialize_double>
 8012c44:	4608      	mov	r0, r1
 8012c46:	bd38      	pop	{r3, r4, r5, pc}

08012c48 <_Point__cdr_serialize>:
 8012c48:	b198      	cbz	r0, 8012c72 <_Point__cdr_serialize+0x2a>
 8012c4a:	b538      	push	{r3, r4, r5, lr}
 8012c4c:	460d      	mov	r5, r1
 8012c4e:	4604      	mov	r4, r0
 8012c50:	ed90 0b00 	vldr	d0, [r0]
 8012c54:	4608      	mov	r0, r1
 8012c56:	f001 f8b9 	bl	8013dcc <ucdr_serialize_double>
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	ed94 0b02 	vldr	d0, [r4, #8]
 8012c60:	f001 f8b4 	bl	8013dcc <ucdr_serialize_double>
 8012c64:	4628      	mov	r0, r5
 8012c66:	ed94 0b04 	vldr	d0, [r4, #16]
 8012c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c6e:	f001 b8ad 	b.w	8013dcc <ucdr_serialize_double>
 8012c72:	4770      	bx	lr

08012c74 <_Point__get_serialized_size>:
 8012c74:	b190      	cbz	r0, 8012c9c <_Point__get_serialized_size+0x28>
 8012c76:	2108      	movs	r1, #8
 8012c78:	2000      	movs	r0, #0
 8012c7a:	b510      	push	{r4, lr}
 8012c7c:	f001 fa94 	bl	80141a8 <ucdr_alignment>
 8012c80:	2108      	movs	r1, #8
 8012c82:	1844      	adds	r4, r0, r1
 8012c84:	4620      	mov	r0, r4
 8012c86:	f001 fa8f 	bl	80141a8 <ucdr_alignment>
 8012c8a:	2108      	movs	r1, #8
 8012c8c:	4408      	add	r0, r1
 8012c8e:	4404      	add	r4, r0
 8012c90:	4620      	mov	r0, r4
 8012c92:	f001 fa89 	bl	80141a8 <ucdr_alignment>
 8012c96:	3008      	adds	r0, #8
 8012c98:	4420      	add	r0, r4
 8012c9a:	bd10      	pop	{r4, pc}
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop

08012ca0 <_Point__max_serialized_size>:
 8012ca0:	b538      	push	{r3, r4, r5, lr}
 8012ca2:	2108      	movs	r1, #8
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	f001 fa7f 	bl	80141a8 <ucdr_alignment>
 8012caa:	2108      	movs	r1, #8
 8012cac:	1845      	adds	r5, r0, r1
 8012cae:	4628      	mov	r0, r5
 8012cb0:	f001 fa7a 	bl	80141a8 <ucdr_alignment>
 8012cb4:	2108      	movs	r1, #8
 8012cb6:	1844      	adds	r4, r0, r1
 8012cb8:	442c      	add	r4, r5
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f001 fa74 	bl	80141a8 <ucdr_alignment>
 8012cc0:	3008      	adds	r0, #8
 8012cc2:	4420      	add	r0, r4
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	bf00      	nop

08012cc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8012cc8:	4800      	ldr	r0, [pc, #0]	; (8012ccc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 8012cca:	4770      	bx	lr
 8012ccc:	20000340 	.word	0x20000340

08012cd0 <get_serialized_size_geometry_msgs__msg__Twist>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	b150      	cbz	r0, 8012cec <get_serialized_size_geometry_msgs__msg__Twist+0x1c>
 8012cd6:	460d      	mov	r5, r1
 8012cd8:	f000 f866 	bl	8012da8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	f104 0018 	add.w	r0, r4, #24
 8012ce2:	461c      	mov	r4, r3
 8012ce4:	18e9      	adds	r1, r5, r3
 8012ce6:	f000 f85f 	bl	8012da8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012cea:	4420      	add	r0, r4
 8012cec:	bd38      	pop	{r3, r4, r5, pc}
 8012cee:	bf00      	nop

08012cf0 <_Twist__cdr_deserialize>:
 8012cf0:	b570      	push	{r4, r5, r6, lr}
 8012cf2:	460c      	mov	r4, r1
 8012cf4:	b199      	cbz	r1, 8012d1e <_Twist__cdr_deserialize+0x2e>
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	f000 f8de 	bl	8012eb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	4621      	mov	r1, r4
 8012d00:	4628      	mov	r0, r5
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	68db      	ldr	r3, [r3, #12]
 8012d06:	4798      	blx	r3
 8012d08:	f000 f8d6 	bl	8012eb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	f104 0118 	add.w	r1, r4, #24
 8012d12:	4628      	mov	r0, r5
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	4718      	bx	r3
 8012d1e:	4608      	mov	r0, r1
 8012d20:	bd70      	pop	{r4, r5, r6, pc}
 8012d22:	bf00      	nop

08012d24 <_Twist__cdr_serialize>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	9101      	str	r1, [sp, #4]
 8012d2a:	b1a0      	cbz	r0, 8012d56 <_Twist__cdr_serialize+0x32>
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	f000 f8c3 	bl	8012eb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012d32:	4603      	mov	r3, r0
 8012d34:	9901      	ldr	r1, [sp, #4]
 8012d36:	4620      	mov	r0, r4
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	689b      	ldr	r3, [r3, #8]
 8012d3c:	4798      	blx	r3
 8012d3e:	f000 f8bb 	bl	8012eb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012d42:	4603      	mov	r3, r0
 8012d44:	9901      	ldr	r1, [sp, #4]
 8012d46:	f104 0018 	add.w	r0, r4, #24
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	689b      	ldr	r3, [r3, #8]
 8012d4e:	b002      	add	sp, #8
 8012d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d54:	4718      	bx	r3
 8012d56:	b002      	add	sp, #8
 8012d58:	bd10      	pop	{r4, pc}
 8012d5a:	bf00      	nop

08012d5c <_Twist__get_serialized_size>:
 8012d5c:	b510      	push	{r4, lr}
 8012d5e:	4604      	mov	r4, r0
 8012d60:	b148      	cbz	r0, 8012d76 <_Twist__get_serialized_size+0x1a>
 8012d62:	2100      	movs	r1, #0
 8012d64:	f000 f820 	bl	8012da8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012d68:	4601      	mov	r1, r0
 8012d6a:	f104 0018 	add.w	r0, r4, #24
 8012d6e:	460c      	mov	r4, r1
 8012d70:	f000 f81a 	bl	8012da8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012d74:	4420      	add	r0, r4
 8012d76:	bd10      	pop	{r4, pc}

08012d78 <_Twist__max_serialized_size>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	2100      	movs	r1, #0
 8012d80:	f10d 0007 	add.w	r0, sp, #7
 8012d84:	f88d 3007 	strb.w	r3, [sp, #7]
 8012d88:	f000 f87c 	bl	8012e84 <max_serialized_size_geometry_msgs__msg__Vector3>
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	f10d 0007 	add.w	r0, sp, #7
 8012d92:	4621      	mov	r1, r4
 8012d94:	f000 f876 	bl	8012e84 <max_serialized_size_geometry_msgs__msg__Vector3>
 8012d98:	4420      	add	r0, r4
 8012d9a:	b002      	add	sp, #8
 8012d9c:	bd10      	pop	{r4, pc}
 8012d9e:	bf00      	nop

08012da0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8012da0:	4800      	ldr	r0, [pc, #0]	; (8012da4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8012da2:	4770      	bx	lr
 8012da4:	20000368 	.word	0x20000368

08012da8 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8012da8:	b1b8      	cbz	r0, 8012dda <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8012daa:	b538      	push	{r3, r4, r5, lr}
 8012dac:	460d      	mov	r5, r1
 8012dae:	2108      	movs	r1, #8
 8012db0:	4628      	mov	r0, r5
 8012db2:	f001 f9f9 	bl	80141a8 <ucdr_alignment>
 8012db6:	f105 0308 	add.w	r3, r5, #8
 8012dba:	2108      	movs	r1, #8
 8012dbc:	f1c5 0508 	rsb	r5, r5, #8
 8012dc0:	181c      	adds	r4, r3, r0
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f001 f9f0 	bl	80141a8 <ucdr_alignment>
 8012dc8:	2108      	movs	r1, #8
 8012dca:	4408      	add	r0, r1
 8012dcc:	4404      	add	r4, r0
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f001 f9ea 	bl	80141a8 <ucdr_alignment>
 8012dd4:	4428      	add	r0, r5
 8012dd6:	4420      	add	r0, r4
 8012dd8:	bd38      	pop	{r3, r4, r5, pc}
 8012dda:	4770      	bx	lr

08012ddc <_Vector3__cdr_deserialize>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	460c      	mov	r4, r1
 8012de0:	b171      	cbz	r1, 8012e00 <_Vector3__cdr_deserialize+0x24>
 8012de2:	4605      	mov	r5, r0
 8012de4:	f001 f8c2 	bl	8013f6c <ucdr_deserialize_double>
 8012de8:	f104 0108 	add.w	r1, r4, #8
 8012dec:	4628      	mov	r0, r5
 8012dee:	f001 f8bd 	bl	8013f6c <ucdr_deserialize_double>
 8012df2:	f104 0110 	add.w	r1, r4, #16
 8012df6:	4628      	mov	r0, r5
 8012df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dfc:	f001 b8b6 	b.w	8013f6c <ucdr_deserialize_double>
 8012e00:	4608      	mov	r0, r1
 8012e02:	bd38      	pop	{r3, r4, r5, pc}

08012e04 <_Vector3__cdr_serialize>:
 8012e04:	b198      	cbz	r0, 8012e2e <_Vector3__cdr_serialize+0x2a>
 8012e06:	b538      	push	{r3, r4, r5, lr}
 8012e08:	460d      	mov	r5, r1
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	ed90 0b00 	vldr	d0, [r0]
 8012e10:	4608      	mov	r0, r1
 8012e12:	f000 ffdb 	bl	8013dcc <ucdr_serialize_double>
 8012e16:	4628      	mov	r0, r5
 8012e18:	ed94 0b02 	vldr	d0, [r4, #8]
 8012e1c:	f000 ffd6 	bl	8013dcc <ucdr_serialize_double>
 8012e20:	4628      	mov	r0, r5
 8012e22:	ed94 0b04 	vldr	d0, [r4, #16]
 8012e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e2a:	f000 bfcf 	b.w	8013dcc <ucdr_serialize_double>
 8012e2e:	4770      	bx	lr

08012e30 <_Vector3__get_serialized_size>:
 8012e30:	b190      	cbz	r0, 8012e58 <_Vector3__get_serialized_size+0x28>
 8012e32:	2108      	movs	r1, #8
 8012e34:	2000      	movs	r0, #0
 8012e36:	b510      	push	{r4, lr}
 8012e38:	f001 f9b6 	bl	80141a8 <ucdr_alignment>
 8012e3c:	2108      	movs	r1, #8
 8012e3e:	1844      	adds	r4, r0, r1
 8012e40:	4620      	mov	r0, r4
 8012e42:	f001 f9b1 	bl	80141a8 <ucdr_alignment>
 8012e46:	2108      	movs	r1, #8
 8012e48:	4408      	add	r0, r1
 8012e4a:	4404      	add	r4, r0
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f001 f9ab 	bl	80141a8 <ucdr_alignment>
 8012e52:	3008      	adds	r0, #8
 8012e54:	4420      	add	r0, r4
 8012e56:	bd10      	pop	{r4, pc}
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop

08012e5c <_Vector3__max_serialized_size>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	2108      	movs	r1, #8
 8012e60:	2000      	movs	r0, #0
 8012e62:	f001 f9a1 	bl	80141a8 <ucdr_alignment>
 8012e66:	2108      	movs	r1, #8
 8012e68:	1845      	adds	r5, r0, r1
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	f001 f99c 	bl	80141a8 <ucdr_alignment>
 8012e70:	2108      	movs	r1, #8
 8012e72:	1844      	adds	r4, r0, r1
 8012e74:	442c      	add	r4, r5
 8012e76:	4620      	mov	r0, r4
 8012e78:	f001 f996 	bl	80141a8 <ucdr_alignment>
 8012e7c:	3008      	adds	r0, #8
 8012e7e:	4420      	add	r0, r4
 8012e80:	bd38      	pop	{r3, r4, r5, pc}
 8012e82:	bf00      	nop

08012e84 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8012e84:	b570      	push	{r4, r5, r6, lr}
 8012e86:	460c      	mov	r4, r1
 8012e88:	2301      	movs	r3, #1
 8012e8a:	2108      	movs	r1, #8
 8012e8c:	f104 0508 	add.w	r5, r4, #8
 8012e90:	7003      	strb	r3, [r0, #0]
 8012e92:	4620      	mov	r0, r4
 8012e94:	f1c4 0408 	rsb	r4, r4, #8
 8012e98:	f001 f986 	bl	80141a8 <ucdr_alignment>
 8012e9c:	1946      	adds	r6, r0, r5
 8012e9e:	2108      	movs	r1, #8
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f001 f981 	bl	80141a8 <ucdr_alignment>
 8012ea6:	2108      	movs	r1, #8
 8012ea8:	1845      	adds	r5, r0, r1
 8012eaa:	4435      	add	r5, r6
 8012eac:	4628      	mov	r0, r5
 8012eae:	f001 f97b 	bl	80141a8 <ucdr_alignment>
 8012eb2:	4420      	add	r0, r4
 8012eb4:	4428      	add	r0, r5
 8012eb6:	bd70      	pop	{r4, r5, r6, pc}

08012eb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8012eb8:	4800      	ldr	r0, [pc, #0]	; (8012ebc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8012eba:	4770      	bx	lr
 8012ebc:	20000390 	.word	0x20000390

08012ec0 <ucdr_serialize_bool>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	460d      	mov	r5, r1
 8012ec4:	2101      	movs	r1, #1
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	f001 f922 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8012ecc:	b148      	cbz	r0, 8012ee2 <ucdr_serialize_bool+0x22>
 8012ece:	68a3      	ldr	r3, [r4, #8]
 8012ed0:	2101      	movs	r1, #1
 8012ed2:	701d      	strb	r5, [r3, #0]
 8012ed4:	68a2      	ldr	r2, [r4, #8]
 8012ed6:	6923      	ldr	r3, [r4, #16]
 8012ed8:	440a      	add	r2, r1
 8012eda:	7561      	strb	r1, [r4, #21]
 8012edc:	440b      	add	r3, r1
 8012ede:	60a2      	str	r2, [r4, #8]
 8012ee0:	6123      	str	r3, [r4, #16]
 8012ee2:	7da0      	ldrb	r0, [r4, #22]
 8012ee4:	f080 0001 	eor.w	r0, r0, #1
 8012ee8:	bd38      	pop	{r3, r4, r5, pc}
 8012eea:	bf00      	nop

08012eec <ucdr_deserialize_bool>:
 8012eec:	b538      	push	{r3, r4, r5, lr}
 8012eee:	460d      	mov	r5, r1
 8012ef0:	2101      	movs	r1, #1
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	f001 f90c 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8012ef8:	b160      	cbz	r0, 8012f14 <ucdr_deserialize_bool+0x28>
 8012efa:	68a2      	ldr	r2, [r4, #8]
 8012efc:	2101      	movs	r1, #1
 8012efe:	6923      	ldr	r3, [r4, #16]
 8012f00:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012f04:	440b      	add	r3, r1
 8012f06:	3800      	subs	r0, #0
 8012f08:	bf18      	it	ne
 8012f0a:	2001      	movne	r0, #1
 8012f0c:	7028      	strb	r0, [r5, #0]
 8012f0e:	60a2      	str	r2, [r4, #8]
 8012f10:	6123      	str	r3, [r4, #16]
 8012f12:	7561      	strb	r1, [r4, #21]
 8012f14:	7da0      	ldrb	r0, [r4, #22]
 8012f16:	f080 0001 	eor.w	r0, r0, #1
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}

08012f1c <ucdr_serialize_uint8_t>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	460d      	mov	r5, r1
 8012f20:	2101      	movs	r1, #1
 8012f22:	4604      	mov	r4, r0
 8012f24:	f001 f8f4 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8012f28:	b148      	cbz	r0, 8012f3e <ucdr_serialize_uint8_t+0x22>
 8012f2a:	68a3      	ldr	r3, [r4, #8]
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	701d      	strb	r5, [r3, #0]
 8012f30:	68a2      	ldr	r2, [r4, #8]
 8012f32:	6923      	ldr	r3, [r4, #16]
 8012f34:	440a      	add	r2, r1
 8012f36:	7561      	strb	r1, [r4, #21]
 8012f38:	440b      	add	r3, r1
 8012f3a:	60a2      	str	r2, [r4, #8]
 8012f3c:	6123      	str	r3, [r4, #16]
 8012f3e:	7da0      	ldrb	r0, [r4, #22]
 8012f40:	f080 0001 	eor.w	r0, r0, #1
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
 8012f46:	bf00      	nop

08012f48 <ucdr_deserialize_uint8_t>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	460d      	mov	r5, r1
 8012f4c:	2101      	movs	r1, #1
 8012f4e:	4604      	mov	r4, r0
 8012f50:	f001 f8de 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8012f54:	b150      	cbz	r0, 8012f6c <ucdr_deserialize_uint8_t+0x24>
 8012f56:	68a3      	ldr	r3, [r4, #8]
 8012f58:	2101      	movs	r1, #1
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	702b      	strb	r3, [r5, #0]
 8012f5e:	68a2      	ldr	r2, [r4, #8]
 8012f60:	6923      	ldr	r3, [r4, #16]
 8012f62:	440a      	add	r2, r1
 8012f64:	7561      	strb	r1, [r4, #21]
 8012f66:	440b      	add	r3, r1
 8012f68:	60a2      	str	r2, [r4, #8]
 8012f6a:	6123      	str	r3, [r4, #16]
 8012f6c:	7da0      	ldrb	r0, [r4, #22]
 8012f6e:	f080 0001 	eor.w	r0, r0, #1
 8012f72:	bd38      	pop	{r3, r4, r5, pc}

08012f74 <ucdr_serialize_uint16_t>:
 8012f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f78:	460b      	mov	r3, r1
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	2102      	movs	r1, #2
 8012f80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012f84:	f001 f918 	bl	80141b8 <ucdr_buffer_alignment>
 8012f88:	4601      	mov	r1, r0
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	7d67      	ldrb	r7, [r4, #21]
 8012f8e:	f001 f95b 	bl	8014248 <ucdr_advance_buffer>
 8012f92:	2102      	movs	r1, #2
 8012f94:	4620      	mov	r0, r4
 8012f96:	f001 f8af 	bl	80140f8 <ucdr_check_buffer_available_for>
 8012f9a:	bb78      	cbnz	r0, 8012ffc <ucdr_serialize_uint16_t+0x88>
 8012f9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012fa0:	42ab      	cmp	r3, r5
 8012fa2:	d926      	bls.n	8012ff2 <ucdr_serialize_uint16_t+0x7e>
 8012fa4:	1b5e      	subs	r6, r3, r5
 8012fa6:	60a3      	str	r3, [r4, #8]
 8012fa8:	6923      	ldr	r3, [r4, #16]
 8012faa:	4620      	mov	r0, r4
 8012fac:	f1c6 0802 	rsb	r8, r6, #2
 8012fb0:	4433      	add	r3, r6
 8012fb2:	4641      	mov	r1, r8
 8012fb4:	6123      	str	r3, [r4, #16]
 8012fb6:	f001 f8ab 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d03b      	beq.n	8013036 <ucdr_serialize_uint16_t+0xc2>
 8012fbe:	7d23      	ldrb	r3, [r4, #20]
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d04a      	beq.n	801305a <ucdr_serialize_uint16_t+0xe6>
 8012fc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012fc8:	702b      	strb	r3, [r5, #0]
 8012fca:	2e00      	cmp	r6, #0
 8012fcc:	d040      	beq.n	8013050 <ucdr_serialize_uint16_t+0xdc>
 8012fce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012fd2:	706b      	strb	r3, [r5, #1]
 8012fd4:	6923      	ldr	r3, [r4, #16]
 8012fd6:	2102      	movs	r1, #2
 8012fd8:	68a2      	ldr	r2, [r4, #8]
 8012fda:	3302      	adds	r3, #2
 8012fdc:	7da0      	ldrb	r0, [r4, #22]
 8012fde:	4442      	add	r2, r8
 8012fe0:	7561      	strb	r1, [r4, #21]
 8012fe2:	1b9e      	subs	r6, r3, r6
 8012fe4:	f080 0001 	eor.w	r0, r0, #1
 8012fe8:	60a2      	str	r2, [r4, #8]
 8012fea:	6126      	str	r6, [r4, #16]
 8012fec:	b002      	add	sp, #8
 8012fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ff2:	2102      	movs	r1, #2
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	f001 f88b 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8012ffa:	b190      	cbz	r0, 8013022 <ucdr_serialize_uint16_t+0xae>
 8012ffc:	7d23      	ldrb	r3, [r4, #20]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	68a3      	ldr	r3, [r4, #8]
 8013002:	d014      	beq.n	801302e <ucdr_serialize_uint16_t+0xba>
 8013004:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013008:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801300c:	7019      	strb	r1, [r3, #0]
 801300e:	68a3      	ldr	r3, [r4, #8]
 8013010:	705a      	strb	r2, [r3, #1]
 8013012:	2102      	movs	r1, #2
 8013014:	68a2      	ldr	r2, [r4, #8]
 8013016:	6923      	ldr	r3, [r4, #16]
 8013018:	440a      	add	r2, r1
 801301a:	7561      	strb	r1, [r4, #21]
 801301c:	440b      	add	r3, r1
 801301e:	60a2      	str	r2, [r4, #8]
 8013020:	6123      	str	r3, [r4, #16]
 8013022:	7da0      	ldrb	r0, [r4, #22]
 8013024:	f080 0001 	eor.w	r0, r0, #1
 8013028:	b002      	add	sp, #8
 801302a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801302e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013032:	801a      	strh	r2, [r3, #0]
 8013034:	e7ed      	b.n	8013012 <ucdr_serialize_uint16_t+0x9e>
 8013036:	68a2      	ldr	r2, [r4, #8]
 8013038:	6923      	ldr	r3, [r4, #16]
 801303a:	7da0      	ldrb	r0, [r4, #22]
 801303c:	1b92      	subs	r2, r2, r6
 801303e:	1b9b      	subs	r3, r3, r6
 8013040:	7567      	strb	r7, [r4, #21]
 8013042:	f080 0001 	eor.w	r0, r0, #1
 8013046:	60a2      	str	r2, [r4, #8]
 8013048:	6123      	str	r3, [r4, #16]
 801304a:	b002      	add	sp, #8
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	68a3      	ldr	r3, [r4, #8]
 8013052:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013056:	701a      	strb	r2, [r3, #0]
 8013058:	e7bc      	b.n	8012fd4 <ucdr_serialize_uint16_t+0x60>
 801305a:	4628      	mov	r0, r5
 801305c:	f10d 0506 	add.w	r5, sp, #6
 8013060:	4632      	mov	r2, r6
 8013062:	4629      	mov	r1, r5
 8013064:	f00e f87b 	bl	802115e <memcpy>
 8013068:	4642      	mov	r2, r8
 801306a:	19a9      	adds	r1, r5, r6
 801306c:	68a0      	ldr	r0, [r4, #8]
 801306e:	f00e f876 	bl	802115e <memcpy>
 8013072:	e7af      	b.n	8012fd4 <ucdr_serialize_uint16_t+0x60>

08013074 <ucdr_serialize_endian_uint16_t>:
 8013074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013078:	4604      	mov	r4, r0
 801307a:	b083      	sub	sp, #12
 801307c:	460d      	mov	r5, r1
 801307e:	2102      	movs	r1, #2
 8013080:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013084:	f001 f898 	bl	80141b8 <ucdr_buffer_alignment>
 8013088:	4601      	mov	r1, r0
 801308a:	4620      	mov	r0, r4
 801308c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013090:	f001 f8da 	bl	8014248 <ucdr_advance_buffer>
 8013094:	2102      	movs	r1, #2
 8013096:	4620      	mov	r0, r4
 8013098:	f001 f82e 	bl	80140f8 <ucdr_check_buffer_available_for>
 801309c:	bb70      	cbnz	r0, 80130fc <ucdr_serialize_endian_uint16_t+0x88>
 801309e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80130a2:	42be      	cmp	r6, r7
 80130a4:	d925      	bls.n	80130f2 <ucdr_serialize_endian_uint16_t+0x7e>
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	4620      	mov	r0, r4
 80130aa:	60a6      	str	r6, [r4, #8]
 80130ac:	1bf6      	subs	r6, r6, r7
 80130ae:	4433      	add	r3, r6
 80130b0:	f1c6 0902 	rsb	r9, r6, #2
 80130b4:	6123      	str	r3, [r4, #16]
 80130b6:	4649      	mov	r1, r9
 80130b8:	f001 f82a 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80130bc:	2800      	cmp	r0, #0
 80130be:	d039      	beq.n	8013134 <ucdr_serialize_endian_uint16_t+0xc0>
 80130c0:	2d01      	cmp	r5, #1
 80130c2:	d04a      	beq.n	801315a <ucdr_serialize_endian_uint16_t+0xe6>
 80130c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80130c8:	703b      	strb	r3, [r7, #0]
 80130ca:	2e00      	cmp	r6, #0
 80130cc:	d040      	beq.n	8013150 <ucdr_serialize_endian_uint16_t+0xdc>
 80130ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80130d2:	707b      	strb	r3, [r7, #1]
 80130d4:	6923      	ldr	r3, [r4, #16]
 80130d6:	2102      	movs	r1, #2
 80130d8:	68a2      	ldr	r2, [r4, #8]
 80130da:	7da0      	ldrb	r0, [r4, #22]
 80130dc:	3302      	adds	r3, #2
 80130de:	444a      	add	r2, r9
 80130e0:	7561      	strb	r1, [r4, #21]
 80130e2:	1b9b      	subs	r3, r3, r6
 80130e4:	f080 0001 	eor.w	r0, r0, #1
 80130e8:	60a2      	str	r2, [r4, #8]
 80130ea:	6123      	str	r3, [r4, #16]
 80130ec:	b003      	add	sp, #12
 80130ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130f2:	2102      	movs	r1, #2
 80130f4:	4620      	mov	r0, r4
 80130f6:	f001 f80b 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80130fa:	b188      	cbz	r0, 8013120 <ucdr_serialize_endian_uint16_t+0xac>
 80130fc:	2d01      	cmp	r5, #1
 80130fe:	68a3      	ldr	r3, [r4, #8]
 8013100:	d014      	beq.n	801312c <ucdr_serialize_endian_uint16_t+0xb8>
 8013102:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013106:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801310a:	7019      	strb	r1, [r3, #0]
 801310c:	68a3      	ldr	r3, [r4, #8]
 801310e:	705a      	strb	r2, [r3, #1]
 8013110:	2102      	movs	r1, #2
 8013112:	68a2      	ldr	r2, [r4, #8]
 8013114:	6923      	ldr	r3, [r4, #16]
 8013116:	440a      	add	r2, r1
 8013118:	7561      	strb	r1, [r4, #21]
 801311a:	440b      	add	r3, r1
 801311c:	60a2      	str	r2, [r4, #8]
 801311e:	6123      	str	r3, [r4, #16]
 8013120:	7da0      	ldrb	r0, [r4, #22]
 8013122:	f080 0001 	eor.w	r0, r0, #1
 8013126:	b003      	add	sp, #12
 8013128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801312c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013130:	801a      	strh	r2, [r3, #0]
 8013132:	e7ed      	b.n	8013110 <ucdr_serialize_endian_uint16_t+0x9c>
 8013134:	68a2      	ldr	r2, [r4, #8]
 8013136:	6923      	ldr	r3, [r4, #16]
 8013138:	7da0      	ldrb	r0, [r4, #22]
 801313a:	1b92      	subs	r2, r2, r6
 801313c:	1b9b      	subs	r3, r3, r6
 801313e:	f884 8015 	strb.w	r8, [r4, #21]
 8013142:	f080 0001 	eor.w	r0, r0, #1
 8013146:	60a2      	str	r2, [r4, #8]
 8013148:	6123      	str	r3, [r4, #16]
 801314a:	b003      	add	sp, #12
 801314c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013150:	68a3      	ldr	r3, [r4, #8]
 8013152:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013156:	701a      	strb	r2, [r3, #0]
 8013158:	e7bc      	b.n	80130d4 <ucdr_serialize_endian_uint16_t+0x60>
 801315a:	f10d 0506 	add.w	r5, sp, #6
 801315e:	4632      	mov	r2, r6
 8013160:	4638      	mov	r0, r7
 8013162:	4629      	mov	r1, r5
 8013164:	f00d fffb 	bl	802115e <memcpy>
 8013168:	464a      	mov	r2, r9
 801316a:	19a9      	adds	r1, r5, r6
 801316c:	68a0      	ldr	r0, [r4, #8]
 801316e:	f00d fff6 	bl	802115e <memcpy>
 8013172:	e7af      	b.n	80130d4 <ucdr_serialize_endian_uint16_t+0x60>

08013174 <ucdr_deserialize_uint16_t>:
 8013174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013178:	4604      	mov	r4, r0
 801317a:	460d      	mov	r5, r1
 801317c:	2102      	movs	r1, #2
 801317e:	f001 f81b 	bl	80141b8 <ucdr_buffer_alignment>
 8013182:	4601      	mov	r1, r0
 8013184:	4620      	mov	r0, r4
 8013186:	f894 8015 	ldrb.w	r8, [r4, #21]
 801318a:	f001 f85d 	bl	8014248 <ucdr_advance_buffer>
 801318e:	2102      	movs	r1, #2
 8013190:	4620      	mov	r0, r4
 8013192:	f000 ffb1 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013196:	bb60      	cbnz	r0, 80131f2 <ucdr_deserialize_uint16_t+0x7e>
 8013198:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801319c:	42be      	cmp	r6, r7
 801319e:	d923      	bls.n	80131e8 <ucdr_deserialize_uint16_t+0x74>
 80131a0:	6923      	ldr	r3, [r4, #16]
 80131a2:	4620      	mov	r0, r4
 80131a4:	60a6      	str	r6, [r4, #8]
 80131a6:	1bf6      	subs	r6, r6, r7
 80131a8:	4433      	add	r3, r6
 80131aa:	f1c6 0902 	rsb	r9, r6, #2
 80131ae:	6123      	str	r3, [r4, #16]
 80131b0:	4649      	mov	r1, r9
 80131b2:	f000 ffad 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d034      	beq.n	8013224 <ucdr_deserialize_uint16_t+0xb0>
 80131ba:	7d23      	ldrb	r3, [r4, #20]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	d042      	beq.n	8013246 <ucdr_deserialize_uint16_t+0xd2>
 80131c0:	787b      	ldrb	r3, [r7, #1]
 80131c2:	702b      	strb	r3, [r5, #0]
 80131c4:	2e00      	cmp	r6, #0
 80131c6:	d03a      	beq.n	801323e <ucdr_deserialize_uint16_t+0xca>
 80131c8:	783b      	ldrb	r3, [r7, #0]
 80131ca:	706b      	strb	r3, [r5, #1]
 80131cc:	6923      	ldr	r3, [r4, #16]
 80131ce:	2102      	movs	r1, #2
 80131d0:	68a2      	ldr	r2, [r4, #8]
 80131d2:	3302      	adds	r3, #2
 80131d4:	7da0      	ldrb	r0, [r4, #22]
 80131d6:	444a      	add	r2, r9
 80131d8:	7561      	strb	r1, [r4, #21]
 80131da:	1b9b      	subs	r3, r3, r6
 80131dc:	f080 0001 	eor.w	r0, r0, #1
 80131e0:	60a2      	str	r2, [r4, #8]
 80131e2:	6123      	str	r3, [r4, #16]
 80131e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131e8:	2102      	movs	r1, #2
 80131ea:	4620      	mov	r0, r4
 80131ec:	f000 ff90 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80131f0:	b180      	cbz	r0, 8013214 <ucdr_deserialize_uint16_t+0xa0>
 80131f2:	7d23      	ldrb	r3, [r4, #20]
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	68a3      	ldr	r3, [r4, #8]
 80131f8:	d011      	beq.n	801321e <ucdr_deserialize_uint16_t+0xaa>
 80131fa:	785b      	ldrb	r3, [r3, #1]
 80131fc:	702b      	strb	r3, [r5, #0]
 80131fe:	68a3      	ldr	r3, [r4, #8]
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	706b      	strb	r3, [r5, #1]
 8013204:	2102      	movs	r1, #2
 8013206:	68a2      	ldr	r2, [r4, #8]
 8013208:	6923      	ldr	r3, [r4, #16]
 801320a:	440a      	add	r2, r1
 801320c:	7561      	strb	r1, [r4, #21]
 801320e:	440b      	add	r3, r1
 8013210:	60a2      	str	r2, [r4, #8]
 8013212:	6123      	str	r3, [r4, #16]
 8013214:	7da0      	ldrb	r0, [r4, #22]
 8013216:	f080 0001 	eor.w	r0, r0, #1
 801321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801321e:	881b      	ldrh	r3, [r3, #0]
 8013220:	802b      	strh	r3, [r5, #0]
 8013222:	e7ef      	b.n	8013204 <ucdr_deserialize_uint16_t+0x90>
 8013224:	68a2      	ldr	r2, [r4, #8]
 8013226:	6923      	ldr	r3, [r4, #16]
 8013228:	1b92      	subs	r2, r2, r6
 801322a:	7da0      	ldrb	r0, [r4, #22]
 801322c:	1b9b      	subs	r3, r3, r6
 801322e:	f884 8015 	strb.w	r8, [r4, #21]
 8013232:	f080 0001 	eor.w	r0, r0, #1
 8013236:	60a2      	str	r2, [r4, #8]
 8013238:	6123      	str	r3, [r4, #16]
 801323a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323e:	68a3      	ldr	r3, [r4, #8]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	706b      	strb	r3, [r5, #1]
 8013244:	e7c2      	b.n	80131cc <ucdr_deserialize_uint16_t+0x58>
 8013246:	4639      	mov	r1, r7
 8013248:	4632      	mov	r2, r6
 801324a:	4628      	mov	r0, r5
 801324c:	f00d ff87 	bl	802115e <memcpy>
 8013250:	464a      	mov	r2, r9
 8013252:	19a8      	adds	r0, r5, r6
 8013254:	68a1      	ldr	r1, [r4, #8]
 8013256:	f00d ff82 	bl	802115e <memcpy>
 801325a:	e7b7      	b.n	80131cc <ucdr_deserialize_uint16_t+0x58>

0801325c <ucdr_deserialize_endian_uint16_t>:
 801325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013260:	4604      	mov	r4, r0
 8013262:	460e      	mov	r6, r1
 8013264:	2102      	movs	r1, #2
 8013266:	4615      	mov	r5, r2
 8013268:	f000 ffa6 	bl	80141b8 <ucdr_buffer_alignment>
 801326c:	4601      	mov	r1, r0
 801326e:	4620      	mov	r0, r4
 8013270:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013274:	f000 ffe8 	bl	8014248 <ucdr_advance_buffer>
 8013278:	2102      	movs	r1, #2
 801327a:	4620      	mov	r0, r4
 801327c:	f000 ff3c 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013280:	bb70      	cbnz	r0, 80132e0 <ucdr_deserialize_endian_uint16_t+0x84>
 8013282:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8013286:	454f      	cmp	r7, r9
 8013288:	d925      	bls.n	80132d6 <ucdr_deserialize_endian_uint16_t+0x7a>
 801328a:	6923      	ldr	r3, [r4, #16]
 801328c:	4620      	mov	r0, r4
 801328e:	60a7      	str	r7, [r4, #8]
 8013290:	eba7 0709 	sub.w	r7, r7, r9
 8013294:	443b      	add	r3, r7
 8013296:	f1c7 0a02 	rsb	sl, r7, #2
 801329a:	6123      	str	r3, [r4, #16]
 801329c:	4651      	mov	r1, sl
 801329e:	f000 ff37 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80132a2:	2800      	cmp	r0, #0
 80132a4:	d034      	beq.n	8013310 <ucdr_deserialize_endian_uint16_t+0xb4>
 80132a6:	2e01      	cmp	r6, #1
 80132a8:	d043      	beq.n	8013332 <ucdr_deserialize_endian_uint16_t+0xd6>
 80132aa:	f899 3001 	ldrb.w	r3, [r9, #1]
 80132ae:	702b      	strb	r3, [r5, #0]
 80132b0:	2f00      	cmp	r7, #0
 80132b2:	d03a      	beq.n	801332a <ucdr_deserialize_endian_uint16_t+0xce>
 80132b4:	f899 3000 	ldrb.w	r3, [r9]
 80132b8:	706b      	strb	r3, [r5, #1]
 80132ba:	6923      	ldr	r3, [r4, #16]
 80132bc:	2102      	movs	r1, #2
 80132be:	68a2      	ldr	r2, [r4, #8]
 80132c0:	3302      	adds	r3, #2
 80132c2:	7da0      	ldrb	r0, [r4, #22]
 80132c4:	4452      	add	r2, sl
 80132c6:	7561      	strb	r1, [r4, #21]
 80132c8:	1bdb      	subs	r3, r3, r7
 80132ca:	f080 0001 	eor.w	r0, r0, #1
 80132ce:	60a2      	str	r2, [r4, #8]
 80132d0:	6123      	str	r3, [r4, #16]
 80132d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d6:	2102      	movs	r1, #2
 80132d8:	4620      	mov	r0, r4
 80132da:	f000 ff19 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80132de:	b178      	cbz	r0, 8013300 <ucdr_deserialize_endian_uint16_t+0xa4>
 80132e0:	2e01      	cmp	r6, #1
 80132e2:	68a3      	ldr	r3, [r4, #8]
 80132e4:	d011      	beq.n	801330a <ucdr_deserialize_endian_uint16_t+0xae>
 80132e6:	785b      	ldrb	r3, [r3, #1]
 80132e8:	702b      	strb	r3, [r5, #0]
 80132ea:	68a3      	ldr	r3, [r4, #8]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	706b      	strb	r3, [r5, #1]
 80132f0:	2102      	movs	r1, #2
 80132f2:	68a2      	ldr	r2, [r4, #8]
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	440a      	add	r2, r1
 80132f8:	7561      	strb	r1, [r4, #21]
 80132fa:	440b      	add	r3, r1
 80132fc:	60a2      	str	r2, [r4, #8]
 80132fe:	6123      	str	r3, [r4, #16]
 8013300:	7da0      	ldrb	r0, [r4, #22]
 8013302:	f080 0001 	eor.w	r0, r0, #1
 8013306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	802b      	strh	r3, [r5, #0]
 801330e:	e7ef      	b.n	80132f0 <ucdr_deserialize_endian_uint16_t+0x94>
 8013310:	68a2      	ldr	r2, [r4, #8]
 8013312:	6923      	ldr	r3, [r4, #16]
 8013314:	1bd2      	subs	r2, r2, r7
 8013316:	7da0      	ldrb	r0, [r4, #22]
 8013318:	1bdb      	subs	r3, r3, r7
 801331a:	f884 8015 	strb.w	r8, [r4, #21]
 801331e:	f080 0001 	eor.w	r0, r0, #1
 8013322:	60a2      	str	r2, [r4, #8]
 8013324:	6123      	str	r3, [r4, #16]
 8013326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801332a:	68a3      	ldr	r3, [r4, #8]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	706b      	strb	r3, [r5, #1]
 8013330:	e7c3      	b.n	80132ba <ucdr_deserialize_endian_uint16_t+0x5e>
 8013332:	4649      	mov	r1, r9
 8013334:	463a      	mov	r2, r7
 8013336:	4628      	mov	r0, r5
 8013338:	f00d ff11 	bl	802115e <memcpy>
 801333c:	4652      	mov	r2, sl
 801333e:	19e8      	adds	r0, r5, r7
 8013340:	68a1      	ldr	r1, [r4, #8]
 8013342:	f00d ff0c 	bl	802115e <memcpy>
 8013346:	e7b8      	b.n	80132ba <ucdr_deserialize_endian_uint16_t+0x5e>

08013348 <ucdr_serialize_uint32_t>:
 8013348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334c:	b082      	sub	sp, #8
 801334e:	4604      	mov	r4, r0
 8013350:	9101      	str	r1, [sp, #4]
 8013352:	2104      	movs	r1, #4
 8013354:	f000 ff30 	bl	80141b8 <ucdr_buffer_alignment>
 8013358:	4601      	mov	r1, r0
 801335a:	4620      	mov	r0, r4
 801335c:	7d67      	ldrb	r7, [r4, #21]
 801335e:	f000 ff73 	bl	8014248 <ucdr_advance_buffer>
 8013362:	2104      	movs	r1, #4
 8013364:	4620      	mov	r0, r4
 8013366:	f000 fec7 	bl	80140f8 <ucdr_check_buffer_available_for>
 801336a:	2800      	cmp	r0, #0
 801336c:	d139      	bne.n	80133e2 <ucdr_serialize_uint32_t+0x9a>
 801336e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013372:	42ab      	cmp	r3, r5
 8013374:	d930      	bls.n	80133d8 <ucdr_serialize_uint32_t+0x90>
 8013376:	1b5e      	subs	r6, r3, r5
 8013378:	60a3      	str	r3, [r4, #8]
 801337a:	6923      	ldr	r3, [r4, #16]
 801337c:	4620      	mov	r0, r4
 801337e:	f1c6 0804 	rsb	r8, r6, #4
 8013382:	4433      	add	r3, r6
 8013384:	4641      	mov	r1, r8
 8013386:	6123      	str	r3, [r4, #16]
 8013388:	f000 fec2 	bl	8014110 <ucdr_check_final_buffer_behavior>
 801338c:	2800      	cmp	r0, #0
 801338e:	d04c      	beq.n	801342a <ucdr_serialize_uint32_t+0xe2>
 8013390:	7d23      	ldrb	r3, [r4, #20]
 8013392:	2b01      	cmp	r3, #1
 8013394:	d063      	beq.n	801345e <ucdr_serialize_uint32_t+0x116>
 8013396:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801339a:	702b      	strb	r3, [r5, #0]
 801339c:	2e00      	cmp	r6, #0
 801339e:	d051      	beq.n	8013444 <ucdr_serialize_uint32_t+0xfc>
 80133a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80133a4:	2e01      	cmp	r6, #1
 80133a6:	706b      	strb	r3, [r5, #1]
 80133a8:	d050      	beq.n	801344c <ucdr_serialize_uint32_t+0x104>
 80133aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80133ae:	2e02      	cmp	r6, #2
 80133b0:	70ab      	strb	r3, [r5, #2]
 80133b2:	d04f      	beq.n	8013454 <ucdr_serialize_uint32_t+0x10c>
 80133b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80133b8:	70eb      	strb	r3, [r5, #3]
 80133ba:	6923      	ldr	r3, [r4, #16]
 80133bc:	2104      	movs	r1, #4
 80133be:	68a2      	ldr	r2, [r4, #8]
 80133c0:	3304      	adds	r3, #4
 80133c2:	7da0      	ldrb	r0, [r4, #22]
 80133c4:	4442      	add	r2, r8
 80133c6:	7561      	strb	r1, [r4, #21]
 80133c8:	1b9e      	subs	r6, r3, r6
 80133ca:	f080 0001 	eor.w	r0, r0, #1
 80133ce:	60a2      	str	r2, [r4, #8]
 80133d0:	6126      	str	r6, [r4, #16]
 80133d2:	b002      	add	sp, #8
 80133d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133d8:	2104      	movs	r1, #4
 80133da:	4620      	mov	r0, r4
 80133dc:	f000 fe98 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80133e0:	b1d0      	cbz	r0, 8013418 <ucdr_serialize_uint32_t+0xd0>
 80133e2:	7d23      	ldrb	r3, [r4, #20]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	68a3      	ldr	r3, [r4, #8]
 80133e8:	d01c      	beq.n	8013424 <ucdr_serialize_uint32_t+0xdc>
 80133ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80133ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80133f6:	7018      	strb	r0, [r3, #0]
 80133f8:	68a3      	ldr	r3, [r4, #8]
 80133fa:	705a      	strb	r2, [r3, #1]
 80133fc:	68a3      	ldr	r3, [r4, #8]
 80133fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013402:	7099      	strb	r1, [r3, #2]
 8013404:	68a3      	ldr	r3, [r4, #8]
 8013406:	70da      	strb	r2, [r3, #3]
 8013408:	2104      	movs	r1, #4
 801340a:	68a2      	ldr	r2, [r4, #8]
 801340c:	6923      	ldr	r3, [r4, #16]
 801340e:	440a      	add	r2, r1
 8013410:	7561      	strb	r1, [r4, #21]
 8013412:	440b      	add	r3, r1
 8013414:	60a2      	str	r2, [r4, #8]
 8013416:	6123      	str	r3, [r4, #16]
 8013418:	7da0      	ldrb	r0, [r4, #22]
 801341a:	f080 0001 	eor.w	r0, r0, #1
 801341e:	b002      	add	sp, #8
 8013420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013424:	9a01      	ldr	r2, [sp, #4]
 8013426:	601a      	str	r2, [r3, #0]
 8013428:	e7ee      	b.n	8013408 <ucdr_serialize_uint32_t+0xc0>
 801342a:	68a2      	ldr	r2, [r4, #8]
 801342c:	6923      	ldr	r3, [r4, #16]
 801342e:	7da0      	ldrb	r0, [r4, #22]
 8013430:	1b92      	subs	r2, r2, r6
 8013432:	1b9b      	subs	r3, r3, r6
 8013434:	7567      	strb	r7, [r4, #21]
 8013436:	f080 0001 	eor.w	r0, r0, #1
 801343a:	60a2      	str	r2, [r4, #8]
 801343c:	6123      	str	r3, [r4, #16]
 801343e:	b002      	add	sp, #8
 8013440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013444:	68a3      	ldr	r3, [r4, #8]
 8013446:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801344a:	701a      	strb	r2, [r3, #0]
 801344c:	68a3      	ldr	r3, [r4, #8]
 801344e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013452:	701a      	strb	r2, [r3, #0]
 8013454:	68a3      	ldr	r3, [r4, #8]
 8013456:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801345a:	701a      	strb	r2, [r3, #0]
 801345c:	e7ad      	b.n	80133ba <ucdr_serialize_uint32_t+0x72>
 801345e:	4628      	mov	r0, r5
 8013460:	ad01      	add	r5, sp, #4
 8013462:	4632      	mov	r2, r6
 8013464:	4629      	mov	r1, r5
 8013466:	f00d fe7a 	bl	802115e <memcpy>
 801346a:	4642      	mov	r2, r8
 801346c:	19a9      	adds	r1, r5, r6
 801346e:	68a0      	ldr	r0, [r4, #8]
 8013470:	f00d fe75 	bl	802115e <memcpy>
 8013474:	e7a1      	b.n	80133ba <ucdr_serialize_uint32_t+0x72>
 8013476:	bf00      	nop

08013478 <ucdr_serialize_endian_uint32_t>:
 8013478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801347c:	4604      	mov	r4, r0
 801347e:	b083      	sub	sp, #12
 8013480:	460d      	mov	r5, r1
 8013482:	2104      	movs	r1, #4
 8013484:	9201      	str	r2, [sp, #4]
 8013486:	f000 fe97 	bl	80141b8 <ucdr_buffer_alignment>
 801348a:	4601      	mov	r1, r0
 801348c:	4620      	mov	r0, r4
 801348e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013492:	f000 fed9 	bl	8014248 <ucdr_advance_buffer>
 8013496:	2104      	movs	r1, #4
 8013498:	4620      	mov	r0, r4
 801349a:	f000 fe2d 	bl	80140f8 <ucdr_check_buffer_available_for>
 801349e:	2800      	cmp	r0, #0
 80134a0:	d138      	bne.n	8013514 <ucdr_serialize_endian_uint32_t+0x9c>
 80134a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80134a6:	42b7      	cmp	r7, r6
 80134a8:	d92f      	bls.n	801350a <ucdr_serialize_endian_uint32_t+0x92>
 80134aa:	6923      	ldr	r3, [r4, #16]
 80134ac:	4620      	mov	r0, r4
 80134ae:	60a7      	str	r7, [r4, #8]
 80134b0:	1bbf      	subs	r7, r7, r6
 80134b2:	443b      	add	r3, r7
 80134b4:	f1c7 0904 	rsb	r9, r7, #4
 80134b8:	6123      	str	r3, [r4, #16]
 80134ba:	4649      	mov	r1, r9
 80134bc:	f000 fe28 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80134c0:	2800      	cmp	r0, #0
 80134c2:	d04a      	beq.n	801355a <ucdr_serialize_endian_uint32_t+0xe2>
 80134c4:	2d01      	cmp	r5, #1
 80134c6:	d063      	beq.n	8013590 <ucdr_serialize_endian_uint32_t+0x118>
 80134c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134cc:	7033      	strb	r3, [r6, #0]
 80134ce:	2f00      	cmp	r7, #0
 80134d0:	d051      	beq.n	8013576 <ucdr_serialize_endian_uint32_t+0xfe>
 80134d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134d6:	2f01      	cmp	r7, #1
 80134d8:	7073      	strb	r3, [r6, #1]
 80134da:	d050      	beq.n	801357e <ucdr_serialize_endian_uint32_t+0x106>
 80134dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80134e0:	2f02      	cmp	r7, #2
 80134e2:	70b3      	strb	r3, [r6, #2]
 80134e4:	d04f      	beq.n	8013586 <ucdr_serialize_endian_uint32_t+0x10e>
 80134e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80134ea:	70f3      	strb	r3, [r6, #3]
 80134ec:	6923      	ldr	r3, [r4, #16]
 80134ee:	2104      	movs	r1, #4
 80134f0:	68a2      	ldr	r2, [r4, #8]
 80134f2:	7da0      	ldrb	r0, [r4, #22]
 80134f4:	3304      	adds	r3, #4
 80134f6:	444a      	add	r2, r9
 80134f8:	7561      	strb	r1, [r4, #21]
 80134fa:	1bdb      	subs	r3, r3, r7
 80134fc:	f080 0001 	eor.w	r0, r0, #1
 8013500:	60a2      	str	r2, [r4, #8]
 8013502:	6123      	str	r3, [r4, #16]
 8013504:	b003      	add	sp, #12
 8013506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801350a:	2104      	movs	r1, #4
 801350c:	4620      	mov	r0, r4
 801350e:	f000 fdff 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013512:	b1c8      	cbz	r0, 8013548 <ucdr_serialize_endian_uint32_t+0xd0>
 8013514:	2d01      	cmp	r5, #1
 8013516:	68a3      	ldr	r3, [r4, #8]
 8013518:	d01c      	beq.n	8013554 <ucdr_serialize_endian_uint32_t+0xdc>
 801351a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801351e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013522:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013526:	7018      	strb	r0, [r3, #0]
 8013528:	68a3      	ldr	r3, [r4, #8]
 801352a:	705a      	strb	r2, [r3, #1]
 801352c:	68a3      	ldr	r3, [r4, #8]
 801352e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013532:	7099      	strb	r1, [r3, #2]
 8013534:	68a3      	ldr	r3, [r4, #8]
 8013536:	70da      	strb	r2, [r3, #3]
 8013538:	2104      	movs	r1, #4
 801353a:	68a2      	ldr	r2, [r4, #8]
 801353c:	6923      	ldr	r3, [r4, #16]
 801353e:	440a      	add	r2, r1
 8013540:	7561      	strb	r1, [r4, #21]
 8013542:	440b      	add	r3, r1
 8013544:	60a2      	str	r2, [r4, #8]
 8013546:	6123      	str	r3, [r4, #16]
 8013548:	7da0      	ldrb	r0, [r4, #22]
 801354a:	f080 0001 	eor.w	r0, r0, #1
 801354e:	b003      	add	sp, #12
 8013550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013554:	9a01      	ldr	r2, [sp, #4]
 8013556:	601a      	str	r2, [r3, #0]
 8013558:	e7ee      	b.n	8013538 <ucdr_serialize_endian_uint32_t+0xc0>
 801355a:	68a2      	ldr	r2, [r4, #8]
 801355c:	6923      	ldr	r3, [r4, #16]
 801355e:	7da0      	ldrb	r0, [r4, #22]
 8013560:	1bd2      	subs	r2, r2, r7
 8013562:	1bdb      	subs	r3, r3, r7
 8013564:	f884 8015 	strb.w	r8, [r4, #21]
 8013568:	f080 0001 	eor.w	r0, r0, #1
 801356c:	60a2      	str	r2, [r4, #8]
 801356e:	6123      	str	r3, [r4, #16]
 8013570:	b003      	add	sp, #12
 8013572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013576:	68a3      	ldr	r3, [r4, #8]
 8013578:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801357c:	701a      	strb	r2, [r3, #0]
 801357e:	68a3      	ldr	r3, [r4, #8]
 8013580:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013584:	701a      	strb	r2, [r3, #0]
 8013586:	68a3      	ldr	r3, [r4, #8]
 8013588:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801358c:	701a      	strb	r2, [r3, #0]
 801358e:	e7ad      	b.n	80134ec <ucdr_serialize_endian_uint32_t+0x74>
 8013590:	ad01      	add	r5, sp, #4
 8013592:	463a      	mov	r2, r7
 8013594:	4630      	mov	r0, r6
 8013596:	4629      	mov	r1, r5
 8013598:	f00d fde1 	bl	802115e <memcpy>
 801359c:	464a      	mov	r2, r9
 801359e:	19e9      	adds	r1, r5, r7
 80135a0:	68a0      	ldr	r0, [r4, #8]
 80135a2:	f00d fddc 	bl	802115e <memcpy>
 80135a6:	e7a1      	b.n	80134ec <ucdr_serialize_endian_uint32_t+0x74>

080135a8 <ucdr_deserialize_uint32_t>:
 80135a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135ac:	4604      	mov	r4, r0
 80135ae:	460d      	mov	r5, r1
 80135b0:	2104      	movs	r1, #4
 80135b2:	f000 fe01 	bl	80141b8 <ucdr_buffer_alignment>
 80135b6:	4601      	mov	r1, r0
 80135b8:	4620      	mov	r0, r4
 80135ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80135be:	f000 fe43 	bl	8014248 <ucdr_advance_buffer>
 80135c2:	2104      	movs	r1, #4
 80135c4:	4620      	mov	r0, r4
 80135c6:	f000 fd97 	bl	80140f8 <ucdr_check_buffer_available_for>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	d138      	bne.n	8013640 <ucdr_deserialize_uint32_t+0x98>
 80135ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80135d2:	42b7      	cmp	r7, r6
 80135d4:	d92f      	bls.n	8013636 <ucdr_deserialize_uint32_t+0x8e>
 80135d6:	6923      	ldr	r3, [r4, #16]
 80135d8:	4620      	mov	r0, r4
 80135da:	60a7      	str	r7, [r4, #8]
 80135dc:	1bbf      	subs	r7, r7, r6
 80135de:	443b      	add	r3, r7
 80135e0:	f1c7 0904 	rsb	r9, r7, #4
 80135e4:	6123      	str	r3, [r4, #16]
 80135e6:	4649      	mov	r1, r9
 80135e8:	f000 fd92 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d046      	beq.n	801367e <ucdr_deserialize_uint32_t+0xd6>
 80135f0:	7d23      	ldrb	r3, [r4, #20]
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d05c      	beq.n	80136b0 <ucdr_deserialize_uint32_t+0x108>
 80135f6:	78f3      	ldrb	r3, [r6, #3]
 80135f8:	702b      	strb	r3, [r5, #0]
 80135fa:	2f00      	cmp	r7, #0
 80135fc:	d04c      	beq.n	8013698 <ucdr_deserialize_uint32_t+0xf0>
 80135fe:	78b3      	ldrb	r3, [r6, #2]
 8013600:	2f01      	cmp	r7, #1
 8013602:	706b      	strb	r3, [r5, #1]
 8013604:	f105 0302 	add.w	r3, r5, #2
 8013608:	d04a      	beq.n	80136a0 <ucdr_deserialize_uint32_t+0xf8>
 801360a:	7873      	ldrb	r3, [r6, #1]
 801360c:	2f02      	cmp	r7, #2
 801360e:	70ab      	strb	r3, [r5, #2]
 8013610:	f105 0303 	add.w	r3, r5, #3
 8013614:	d048      	beq.n	80136a8 <ucdr_deserialize_uint32_t+0x100>
 8013616:	7833      	ldrb	r3, [r6, #0]
 8013618:	70eb      	strb	r3, [r5, #3]
 801361a:	6923      	ldr	r3, [r4, #16]
 801361c:	2104      	movs	r1, #4
 801361e:	68a2      	ldr	r2, [r4, #8]
 8013620:	3304      	adds	r3, #4
 8013622:	7da0      	ldrb	r0, [r4, #22]
 8013624:	444a      	add	r2, r9
 8013626:	7561      	strb	r1, [r4, #21]
 8013628:	1bdb      	subs	r3, r3, r7
 801362a:	f080 0001 	eor.w	r0, r0, #1
 801362e:	60a2      	str	r2, [r4, #8]
 8013630:	6123      	str	r3, [r4, #16]
 8013632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013636:	2104      	movs	r1, #4
 8013638:	4620      	mov	r0, r4
 801363a:	f000 fd69 	bl	8014110 <ucdr_check_final_buffer_behavior>
 801363e:	b1b0      	cbz	r0, 801366e <ucdr_deserialize_uint32_t+0xc6>
 8013640:	7d23      	ldrb	r3, [r4, #20]
 8013642:	2b01      	cmp	r3, #1
 8013644:	68a3      	ldr	r3, [r4, #8]
 8013646:	d017      	beq.n	8013678 <ucdr_deserialize_uint32_t+0xd0>
 8013648:	78db      	ldrb	r3, [r3, #3]
 801364a:	702b      	strb	r3, [r5, #0]
 801364c:	68a3      	ldr	r3, [r4, #8]
 801364e:	789b      	ldrb	r3, [r3, #2]
 8013650:	706b      	strb	r3, [r5, #1]
 8013652:	68a3      	ldr	r3, [r4, #8]
 8013654:	785b      	ldrb	r3, [r3, #1]
 8013656:	70ab      	strb	r3, [r5, #2]
 8013658:	68a3      	ldr	r3, [r4, #8]
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	70eb      	strb	r3, [r5, #3]
 801365e:	2104      	movs	r1, #4
 8013660:	68a2      	ldr	r2, [r4, #8]
 8013662:	6923      	ldr	r3, [r4, #16]
 8013664:	440a      	add	r2, r1
 8013666:	7561      	strb	r1, [r4, #21]
 8013668:	440b      	add	r3, r1
 801366a:	60a2      	str	r2, [r4, #8]
 801366c:	6123      	str	r3, [r4, #16]
 801366e:	7da0      	ldrb	r0, [r4, #22]
 8013670:	f080 0001 	eor.w	r0, r0, #1
 8013674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	602b      	str	r3, [r5, #0]
 801367c:	e7ef      	b.n	801365e <ucdr_deserialize_uint32_t+0xb6>
 801367e:	68a2      	ldr	r2, [r4, #8]
 8013680:	6923      	ldr	r3, [r4, #16]
 8013682:	1bd2      	subs	r2, r2, r7
 8013684:	7da0      	ldrb	r0, [r4, #22]
 8013686:	1bdb      	subs	r3, r3, r7
 8013688:	f884 8015 	strb.w	r8, [r4, #21]
 801368c:	f080 0001 	eor.w	r0, r0, #1
 8013690:	60a2      	str	r2, [r4, #8]
 8013692:	6123      	str	r3, [r4, #16]
 8013694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013698:	68a3      	ldr	r3, [r4, #8]
 801369a:	789b      	ldrb	r3, [r3, #2]
 801369c:	706b      	strb	r3, [r5, #1]
 801369e:	1cab      	adds	r3, r5, #2
 80136a0:	68a2      	ldr	r2, [r4, #8]
 80136a2:	7852      	ldrb	r2, [r2, #1]
 80136a4:	f803 2b01 	strb.w	r2, [r3], #1
 80136a8:	68a2      	ldr	r2, [r4, #8]
 80136aa:	7812      	ldrb	r2, [r2, #0]
 80136ac:	701a      	strb	r2, [r3, #0]
 80136ae:	e7b4      	b.n	801361a <ucdr_deserialize_uint32_t+0x72>
 80136b0:	4631      	mov	r1, r6
 80136b2:	463a      	mov	r2, r7
 80136b4:	4628      	mov	r0, r5
 80136b6:	f00d fd52 	bl	802115e <memcpy>
 80136ba:	464a      	mov	r2, r9
 80136bc:	19e8      	adds	r0, r5, r7
 80136be:	68a1      	ldr	r1, [r4, #8]
 80136c0:	f00d fd4d 	bl	802115e <memcpy>
 80136c4:	e7a9      	b.n	801361a <ucdr_deserialize_uint32_t+0x72>
 80136c6:	bf00      	nop

080136c8 <ucdr_deserialize_endian_uint32_t>:
 80136c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136cc:	4604      	mov	r4, r0
 80136ce:	460e      	mov	r6, r1
 80136d0:	2104      	movs	r1, #4
 80136d2:	4615      	mov	r5, r2
 80136d4:	f000 fd70 	bl	80141b8 <ucdr_buffer_alignment>
 80136d8:	4601      	mov	r1, r0
 80136da:	4620      	mov	r0, r4
 80136dc:	f894 8015 	ldrb.w	r8, [r4, #21]
 80136e0:	f000 fdb2 	bl	8014248 <ucdr_advance_buffer>
 80136e4:	2104      	movs	r1, #4
 80136e6:	4620      	mov	r0, r4
 80136e8:	f000 fd06 	bl	80140f8 <ucdr_check_buffer_available_for>
 80136ec:	2800      	cmp	r0, #0
 80136ee:	d13c      	bne.n	801376a <ucdr_deserialize_endian_uint32_t+0xa2>
 80136f0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80136f4:	42bb      	cmp	r3, r7
 80136f6:	d933      	bls.n	8013760 <ucdr_deserialize_endian_uint32_t+0x98>
 80136f8:	eba3 0907 	sub.w	r9, r3, r7
 80136fc:	60a3      	str	r3, [r4, #8]
 80136fe:	6923      	ldr	r3, [r4, #16]
 8013700:	4620      	mov	r0, r4
 8013702:	f1c9 0a04 	rsb	sl, r9, #4
 8013706:	444b      	add	r3, r9
 8013708:	4651      	mov	r1, sl
 801370a:	6123      	str	r3, [r4, #16]
 801370c:	f000 fd00 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013710:	2800      	cmp	r0, #0
 8013712:	d048      	beq.n	80137a6 <ucdr_deserialize_endian_uint32_t+0xde>
 8013714:	2e01      	cmp	r6, #1
 8013716:	d061      	beq.n	80137dc <ucdr_deserialize_endian_uint32_t+0x114>
 8013718:	78fb      	ldrb	r3, [r7, #3]
 801371a:	702b      	strb	r3, [r5, #0]
 801371c:	f1b9 0f00 	cmp.w	r9, #0
 8013720:	d050      	beq.n	80137c4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013722:	78bb      	ldrb	r3, [r7, #2]
 8013724:	f1b9 0f01 	cmp.w	r9, #1
 8013728:	706b      	strb	r3, [r5, #1]
 801372a:	f105 0302 	add.w	r3, r5, #2
 801372e:	d04d      	beq.n	80137cc <ucdr_deserialize_endian_uint32_t+0x104>
 8013730:	787b      	ldrb	r3, [r7, #1]
 8013732:	f1b9 0f02 	cmp.w	r9, #2
 8013736:	70ab      	strb	r3, [r5, #2]
 8013738:	f105 0303 	add.w	r3, r5, #3
 801373c:	d04a      	beq.n	80137d4 <ucdr_deserialize_endian_uint32_t+0x10c>
 801373e:	783b      	ldrb	r3, [r7, #0]
 8013740:	70eb      	strb	r3, [r5, #3]
 8013742:	6923      	ldr	r3, [r4, #16]
 8013744:	2104      	movs	r1, #4
 8013746:	68a2      	ldr	r2, [r4, #8]
 8013748:	3304      	adds	r3, #4
 801374a:	7da0      	ldrb	r0, [r4, #22]
 801374c:	4452      	add	r2, sl
 801374e:	7561      	strb	r1, [r4, #21]
 8013750:	eba3 0309 	sub.w	r3, r3, r9
 8013754:	f080 0001 	eor.w	r0, r0, #1
 8013758:	60a2      	str	r2, [r4, #8]
 801375a:	6123      	str	r3, [r4, #16]
 801375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013760:	2104      	movs	r1, #4
 8013762:	4620      	mov	r0, r4
 8013764:	f000 fcd4 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013768:	b1a8      	cbz	r0, 8013796 <ucdr_deserialize_endian_uint32_t+0xce>
 801376a:	2e01      	cmp	r6, #1
 801376c:	68a3      	ldr	r3, [r4, #8]
 801376e:	d017      	beq.n	80137a0 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013770:	78db      	ldrb	r3, [r3, #3]
 8013772:	702b      	strb	r3, [r5, #0]
 8013774:	68a3      	ldr	r3, [r4, #8]
 8013776:	789b      	ldrb	r3, [r3, #2]
 8013778:	706b      	strb	r3, [r5, #1]
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	785b      	ldrb	r3, [r3, #1]
 801377e:	70ab      	strb	r3, [r5, #2]
 8013780:	68a3      	ldr	r3, [r4, #8]
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	70eb      	strb	r3, [r5, #3]
 8013786:	2104      	movs	r1, #4
 8013788:	68a2      	ldr	r2, [r4, #8]
 801378a:	6923      	ldr	r3, [r4, #16]
 801378c:	440a      	add	r2, r1
 801378e:	7561      	strb	r1, [r4, #21]
 8013790:	440b      	add	r3, r1
 8013792:	60a2      	str	r2, [r4, #8]
 8013794:	6123      	str	r3, [r4, #16]
 8013796:	7da0      	ldrb	r0, [r4, #22]
 8013798:	f080 0001 	eor.w	r0, r0, #1
 801379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	602b      	str	r3, [r5, #0]
 80137a4:	e7ef      	b.n	8013786 <ucdr_deserialize_endian_uint32_t+0xbe>
 80137a6:	68a2      	ldr	r2, [r4, #8]
 80137a8:	6923      	ldr	r3, [r4, #16]
 80137aa:	eba2 0209 	sub.w	r2, r2, r9
 80137ae:	7da0      	ldrb	r0, [r4, #22]
 80137b0:	eba3 0309 	sub.w	r3, r3, r9
 80137b4:	f884 8015 	strb.w	r8, [r4, #21]
 80137b8:	f080 0001 	eor.w	r0, r0, #1
 80137bc:	60a2      	str	r2, [r4, #8]
 80137be:	6123      	str	r3, [r4, #16]
 80137c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137c4:	68a3      	ldr	r3, [r4, #8]
 80137c6:	789b      	ldrb	r3, [r3, #2]
 80137c8:	706b      	strb	r3, [r5, #1]
 80137ca:	1cab      	adds	r3, r5, #2
 80137cc:	68a2      	ldr	r2, [r4, #8]
 80137ce:	7852      	ldrb	r2, [r2, #1]
 80137d0:	f803 2b01 	strb.w	r2, [r3], #1
 80137d4:	68a2      	ldr	r2, [r4, #8]
 80137d6:	7812      	ldrb	r2, [r2, #0]
 80137d8:	701a      	strb	r2, [r3, #0]
 80137da:	e7b2      	b.n	8013742 <ucdr_deserialize_endian_uint32_t+0x7a>
 80137dc:	4639      	mov	r1, r7
 80137de:	464a      	mov	r2, r9
 80137e0:	4628      	mov	r0, r5
 80137e2:	f00d fcbc 	bl	802115e <memcpy>
 80137e6:	4652      	mov	r2, sl
 80137e8:	eb05 0009 	add.w	r0, r5, r9
 80137ec:	68a1      	ldr	r1, [r4, #8]
 80137ee:	f00d fcb6 	bl	802115e <memcpy>
 80137f2:	e7a6      	b.n	8013742 <ucdr_deserialize_endian_uint32_t+0x7a>

080137f4 <ucdr_serialize_uint64_t>:
 80137f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f8:	4604      	mov	r4, r0
 80137fa:	b082      	sub	sp, #8
 80137fc:	2108      	movs	r1, #8
 80137fe:	e9cd 2300 	strd	r2, r3, [sp]
 8013802:	f000 fcd9 	bl	80141b8 <ucdr_buffer_alignment>
 8013806:	4601      	mov	r1, r0
 8013808:	4620      	mov	r0, r4
 801380a:	7d67      	ldrb	r7, [r4, #21]
 801380c:	f000 fd1c 	bl	8014248 <ucdr_advance_buffer>
 8013810:	2108      	movs	r1, #8
 8013812:	4620      	mov	r0, r4
 8013814:	f000 fc70 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013818:	2800      	cmp	r0, #0
 801381a:	d14e      	bne.n	80138ba <ucdr_serialize_uint64_t+0xc6>
 801381c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013820:	42ab      	cmp	r3, r5
 8013822:	d945      	bls.n	80138b0 <ucdr_serialize_uint64_t+0xbc>
 8013824:	1b5e      	subs	r6, r3, r5
 8013826:	60a3      	str	r3, [r4, #8]
 8013828:	6923      	ldr	r3, [r4, #16]
 801382a:	4620      	mov	r0, r4
 801382c:	f1c6 0808 	rsb	r8, r6, #8
 8013830:	4433      	add	r3, r6
 8013832:	4641      	mov	r1, r8
 8013834:	6123      	str	r3, [r4, #16]
 8013836:	f000 fc6b 	bl	8014110 <ucdr_check_final_buffer_behavior>
 801383a:	2800      	cmp	r0, #0
 801383c:	d074      	beq.n	8013928 <ucdr_serialize_uint64_t+0x134>
 801383e:	7d23      	ldrb	r3, [r4, #20]
 8013840:	2b01      	cmp	r3, #1
 8013842:	f000 809b 	beq.w	801397c <ucdr_serialize_uint64_t+0x188>
 8013846:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801384a:	702b      	strb	r3, [r5, #0]
 801384c:	2e00      	cmp	r6, #0
 801384e:	d078      	beq.n	8013942 <ucdr_serialize_uint64_t+0x14e>
 8013850:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013854:	2e01      	cmp	r6, #1
 8013856:	706b      	strb	r3, [r5, #1]
 8013858:	d077      	beq.n	801394a <ucdr_serialize_uint64_t+0x156>
 801385a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801385e:	2e02      	cmp	r6, #2
 8013860:	70ab      	strb	r3, [r5, #2]
 8013862:	d076      	beq.n	8013952 <ucdr_serialize_uint64_t+0x15e>
 8013864:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013868:	2e03      	cmp	r6, #3
 801386a:	70eb      	strb	r3, [r5, #3]
 801386c:	d075      	beq.n	801395a <ucdr_serialize_uint64_t+0x166>
 801386e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013872:	2e04      	cmp	r6, #4
 8013874:	712b      	strb	r3, [r5, #4]
 8013876:	d074      	beq.n	8013962 <ucdr_serialize_uint64_t+0x16e>
 8013878:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801387c:	2e05      	cmp	r6, #5
 801387e:	716b      	strb	r3, [r5, #5]
 8013880:	d073      	beq.n	801396a <ucdr_serialize_uint64_t+0x176>
 8013882:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013886:	2e06      	cmp	r6, #6
 8013888:	71ab      	strb	r3, [r5, #6]
 801388a:	d072      	beq.n	8013972 <ucdr_serialize_uint64_t+0x17e>
 801388c:	f89d 3000 	ldrb.w	r3, [sp]
 8013890:	71eb      	strb	r3, [r5, #7]
 8013892:	6923      	ldr	r3, [r4, #16]
 8013894:	2108      	movs	r1, #8
 8013896:	68a2      	ldr	r2, [r4, #8]
 8013898:	3308      	adds	r3, #8
 801389a:	7da0      	ldrb	r0, [r4, #22]
 801389c:	4442      	add	r2, r8
 801389e:	7561      	strb	r1, [r4, #21]
 80138a0:	1b9e      	subs	r6, r3, r6
 80138a2:	f080 0001 	eor.w	r0, r0, #1
 80138a6:	60a2      	str	r2, [r4, #8]
 80138a8:	6126      	str	r6, [r4, #16]
 80138aa:	b002      	add	sp, #8
 80138ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138b0:	2108      	movs	r1, #8
 80138b2:	4620      	mov	r0, r4
 80138b4:	f000 fc2c 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80138b8:	b350      	cbz	r0, 8013910 <ucdr_serialize_uint64_t+0x11c>
 80138ba:	7d23      	ldrb	r3, [r4, #20]
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d02d      	beq.n	801391c <ucdr_serialize_uint64_t+0x128>
 80138c0:	68a3      	ldr	r3, [r4, #8]
 80138c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80138c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80138ca:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80138ce:	7018      	strb	r0, [r3, #0]
 80138d0:	68a3      	ldr	r3, [r4, #8]
 80138d2:	705a      	strb	r2, [r3, #1]
 80138d4:	68a3      	ldr	r3, [r4, #8]
 80138d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80138da:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80138de:	7099      	strb	r1, [r3, #2]
 80138e0:	68a3      	ldr	r3, [r4, #8]
 80138e2:	70da      	strb	r2, [r3, #3]
 80138e4:	68a3      	ldr	r3, [r4, #8]
 80138e6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80138ea:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80138ee:	7118      	strb	r0, [r3, #4]
 80138f0:	68a3      	ldr	r3, [r4, #8]
 80138f2:	715a      	strb	r2, [r3, #5]
 80138f4:	68a3      	ldr	r3, [r4, #8]
 80138f6:	f89d 2000 	ldrb.w	r2, [sp]
 80138fa:	7199      	strb	r1, [r3, #6]
 80138fc:	68a3      	ldr	r3, [r4, #8]
 80138fe:	71da      	strb	r2, [r3, #7]
 8013900:	2108      	movs	r1, #8
 8013902:	68a2      	ldr	r2, [r4, #8]
 8013904:	6923      	ldr	r3, [r4, #16]
 8013906:	440a      	add	r2, r1
 8013908:	7561      	strb	r1, [r4, #21]
 801390a:	440b      	add	r3, r1
 801390c:	60a2      	str	r2, [r4, #8]
 801390e:	6123      	str	r3, [r4, #16]
 8013910:	7da0      	ldrb	r0, [r4, #22]
 8013912:	f080 0001 	eor.w	r0, r0, #1
 8013916:	b002      	add	sp, #8
 8013918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391c:	466b      	mov	r3, sp
 801391e:	68a2      	ldr	r2, [r4, #8]
 8013920:	cb03      	ldmia	r3!, {r0, r1}
 8013922:	6010      	str	r0, [r2, #0]
 8013924:	6051      	str	r1, [r2, #4]
 8013926:	e7eb      	b.n	8013900 <ucdr_serialize_uint64_t+0x10c>
 8013928:	68a2      	ldr	r2, [r4, #8]
 801392a:	6923      	ldr	r3, [r4, #16]
 801392c:	7da0      	ldrb	r0, [r4, #22]
 801392e:	1b92      	subs	r2, r2, r6
 8013930:	1b9b      	subs	r3, r3, r6
 8013932:	7567      	strb	r7, [r4, #21]
 8013934:	f080 0001 	eor.w	r0, r0, #1
 8013938:	60a2      	str	r2, [r4, #8]
 801393a:	6123      	str	r3, [r4, #16]
 801393c:	b002      	add	sp, #8
 801393e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013942:	68a3      	ldr	r3, [r4, #8]
 8013944:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013948:	701a      	strb	r2, [r3, #0]
 801394a:	68a3      	ldr	r3, [r4, #8]
 801394c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013950:	701a      	strb	r2, [r3, #0]
 8013952:	68a3      	ldr	r3, [r4, #8]
 8013954:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013958:	701a      	strb	r2, [r3, #0]
 801395a:	68a3      	ldr	r3, [r4, #8]
 801395c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	68a3      	ldr	r3, [r4, #8]
 8013964:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013968:	701a      	strb	r2, [r3, #0]
 801396a:	68a3      	ldr	r3, [r4, #8]
 801396c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013970:	701a      	strb	r2, [r3, #0]
 8013972:	68a3      	ldr	r3, [r4, #8]
 8013974:	f89d 2000 	ldrb.w	r2, [sp]
 8013978:	701a      	strb	r2, [r3, #0]
 801397a:	e78a      	b.n	8013892 <ucdr_serialize_uint64_t+0x9e>
 801397c:	4628      	mov	r0, r5
 801397e:	466d      	mov	r5, sp
 8013980:	4632      	mov	r2, r6
 8013982:	4629      	mov	r1, r5
 8013984:	f00d fbeb 	bl	802115e <memcpy>
 8013988:	4642      	mov	r2, r8
 801398a:	19a9      	adds	r1, r5, r6
 801398c:	68a0      	ldr	r0, [r4, #8]
 801398e:	f00d fbe6 	bl	802115e <memcpy>
 8013992:	e77e      	b.n	8013892 <ucdr_serialize_uint64_t+0x9e>

08013994 <ucdr_serialize_int16_t>:
 8013994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013998:	460b      	mov	r3, r1
 801399a:	b082      	sub	sp, #8
 801399c:	4604      	mov	r4, r0
 801399e:	2102      	movs	r1, #2
 80139a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80139a4:	f000 fc08 	bl	80141b8 <ucdr_buffer_alignment>
 80139a8:	4601      	mov	r1, r0
 80139aa:	4620      	mov	r0, r4
 80139ac:	7d67      	ldrb	r7, [r4, #21]
 80139ae:	f000 fc4b 	bl	8014248 <ucdr_advance_buffer>
 80139b2:	2102      	movs	r1, #2
 80139b4:	4620      	mov	r0, r4
 80139b6:	f000 fb9f 	bl	80140f8 <ucdr_check_buffer_available_for>
 80139ba:	bb78      	cbnz	r0, 8013a1c <ucdr_serialize_int16_t+0x88>
 80139bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80139c0:	42ab      	cmp	r3, r5
 80139c2:	d926      	bls.n	8013a12 <ucdr_serialize_int16_t+0x7e>
 80139c4:	1b5e      	subs	r6, r3, r5
 80139c6:	60a3      	str	r3, [r4, #8]
 80139c8:	6923      	ldr	r3, [r4, #16]
 80139ca:	4620      	mov	r0, r4
 80139cc:	f1c6 0802 	rsb	r8, r6, #2
 80139d0:	4433      	add	r3, r6
 80139d2:	4641      	mov	r1, r8
 80139d4:	6123      	str	r3, [r4, #16]
 80139d6:	f000 fb9b 	bl	8014110 <ucdr_check_final_buffer_behavior>
 80139da:	2800      	cmp	r0, #0
 80139dc:	d03b      	beq.n	8013a56 <ucdr_serialize_int16_t+0xc2>
 80139de:	7d23      	ldrb	r3, [r4, #20]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d04a      	beq.n	8013a7a <ucdr_serialize_int16_t+0xe6>
 80139e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80139e8:	702b      	strb	r3, [r5, #0]
 80139ea:	2e00      	cmp	r6, #0
 80139ec:	d040      	beq.n	8013a70 <ucdr_serialize_int16_t+0xdc>
 80139ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80139f2:	706b      	strb	r3, [r5, #1]
 80139f4:	6923      	ldr	r3, [r4, #16]
 80139f6:	2102      	movs	r1, #2
 80139f8:	68a2      	ldr	r2, [r4, #8]
 80139fa:	3302      	adds	r3, #2
 80139fc:	7da0      	ldrb	r0, [r4, #22]
 80139fe:	4442      	add	r2, r8
 8013a00:	7561      	strb	r1, [r4, #21]
 8013a02:	1b9e      	subs	r6, r3, r6
 8013a04:	f080 0001 	eor.w	r0, r0, #1
 8013a08:	60a2      	str	r2, [r4, #8]
 8013a0a:	6126      	str	r6, [r4, #16]
 8013a0c:	b002      	add	sp, #8
 8013a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a12:	2102      	movs	r1, #2
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 fb7b 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013a1a:	b190      	cbz	r0, 8013a42 <ucdr_serialize_int16_t+0xae>
 8013a1c:	7d23      	ldrb	r3, [r4, #20]
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	68a3      	ldr	r3, [r4, #8]
 8013a22:	d014      	beq.n	8013a4e <ucdr_serialize_int16_t+0xba>
 8013a24:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013a28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a2c:	7019      	strb	r1, [r3, #0]
 8013a2e:	68a3      	ldr	r3, [r4, #8]
 8013a30:	705a      	strb	r2, [r3, #1]
 8013a32:	2102      	movs	r1, #2
 8013a34:	68a2      	ldr	r2, [r4, #8]
 8013a36:	6923      	ldr	r3, [r4, #16]
 8013a38:	440a      	add	r2, r1
 8013a3a:	7561      	strb	r1, [r4, #21]
 8013a3c:	440b      	add	r3, r1
 8013a3e:	60a2      	str	r2, [r4, #8]
 8013a40:	6123      	str	r3, [r4, #16]
 8013a42:	7da0      	ldrb	r0, [r4, #22]
 8013a44:	f080 0001 	eor.w	r0, r0, #1
 8013a48:	b002      	add	sp, #8
 8013a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a4e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013a52:	801a      	strh	r2, [r3, #0]
 8013a54:	e7ed      	b.n	8013a32 <ucdr_serialize_int16_t+0x9e>
 8013a56:	68a2      	ldr	r2, [r4, #8]
 8013a58:	6923      	ldr	r3, [r4, #16]
 8013a5a:	7da0      	ldrb	r0, [r4, #22]
 8013a5c:	1b92      	subs	r2, r2, r6
 8013a5e:	1b9b      	subs	r3, r3, r6
 8013a60:	7567      	strb	r7, [r4, #21]
 8013a62:	f080 0001 	eor.w	r0, r0, #1
 8013a66:	60a2      	str	r2, [r4, #8]
 8013a68:	6123      	str	r3, [r4, #16]
 8013a6a:	b002      	add	sp, #8
 8013a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a70:	68a3      	ldr	r3, [r4, #8]
 8013a72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a76:	701a      	strb	r2, [r3, #0]
 8013a78:	e7bc      	b.n	80139f4 <ucdr_serialize_int16_t+0x60>
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f10d 0506 	add.w	r5, sp, #6
 8013a80:	4632      	mov	r2, r6
 8013a82:	4629      	mov	r1, r5
 8013a84:	f00d fb6b 	bl	802115e <memcpy>
 8013a88:	4642      	mov	r2, r8
 8013a8a:	19a9      	adds	r1, r5, r6
 8013a8c:	68a0      	ldr	r0, [r4, #8]
 8013a8e:	f00d fb66 	bl	802115e <memcpy>
 8013a92:	e7af      	b.n	80139f4 <ucdr_serialize_int16_t+0x60>

08013a94 <ucdr_deserialize_int16_t>:
 8013a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a98:	4604      	mov	r4, r0
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	2102      	movs	r1, #2
 8013a9e:	f000 fb8b 	bl	80141b8 <ucdr_buffer_alignment>
 8013aa2:	4601      	mov	r1, r0
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013aaa:	f000 fbcd 	bl	8014248 <ucdr_advance_buffer>
 8013aae:	2102      	movs	r1, #2
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f000 fb21 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013ab6:	bb60      	cbnz	r0, 8013b12 <ucdr_deserialize_int16_t+0x7e>
 8013ab8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013abc:	42be      	cmp	r6, r7
 8013abe:	d923      	bls.n	8013b08 <ucdr_deserialize_int16_t+0x74>
 8013ac0:	6923      	ldr	r3, [r4, #16]
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	60a6      	str	r6, [r4, #8]
 8013ac6:	1bf6      	subs	r6, r6, r7
 8013ac8:	4433      	add	r3, r6
 8013aca:	f1c6 0902 	rsb	r9, r6, #2
 8013ace:	6123      	str	r3, [r4, #16]
 8013ad0:	4649      	mov	r1, r9
 8013ad2:	f000 fb1d 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d034      	beq.n	8013b44 <ucdr_deserialize_int16_t+0xb0>
 8013ada:	7d23      	ldrb	r3, [r4, #20]
 8013adc:	2b01      	cmp	r3, #1
 8013ade:	d042      	beq.n	8013b66 <ucdr_deserialize_int16_t+0xd2>
 8013ae0:	787b      	ldrb	r3, [r7, #1]
 8013ae2:	702b      	strb	r3, [r5, #0]
 8013ae4:	2e00      	cmp	r6, #0
 8013ae6:	d03a      	beq.n	8013b5e <ucdr_deserialize_int16_t+0xca>
 8013ae8:	783b      	ldrb	r3, [r7, #0]
 8013aea:	706b      	strb	r3, [r5, #1]
 8013aec:	6923      	ldr	r3, [r4, #16]
 8013aee:	2102      	movs	r1, #2
 8013af0:	68a2      	ldr	r2, [r4, #8]
 8013af2:	3302      	adds	r3, #2
 8013af4:	7da0      	ldrb	r0, [r4, #22]
 8013af6:	444a      	add	r2, r9
 8013af8:	7561      	strb	r1, [r4, #21]
 8013afa:	1b9b      	subs	r3, r3, r6
 8013afc:	f080 0001 	eor.w	r0, r0, #1
 8013b00:	60a2      	str	r2, [r4, #8]
 8013b02:	6123      	str	r3, [r4, #16]
 8013b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b08:	2102      	movs	r1, #2
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f000 fb00 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013b10:	b180      	cbz	r0, 8013b34 <ucdr_deserialize_int16_t+0xa0>
 8013b12:	7d23      	ldrb	r3, [r4, #20]
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	68a3      	ldr	r3, [r4, #8]
 8013b18:	d011      	beq.n	8013b3e <ucdr_deserialize_int16_t+0xaa>
 8013b1a:	785b      	ldrb	r3, [r3, #1]
 8013b1c:	702b      	strb	r3, [r5, #0]
 8013b1e:	68a3      	ldr	r3, [r4, #8]
 8013b20:	781b      	ldrb	r3, [r3, #0]
 8013b22:	706b      	strb	r3, [r5, #1]
 8013b24:	2102      	movs	r1, #2
 8013b26:	68a2      	ldr	r2, [r4, #8]
 8013b28:	6923      	ldr	r3, [r4, #16]
 8013b2a:	440a      	add	r2, r1
 8013b2c:	7561      	strb	r1, [r4, #21]
 8013b2e:	440b      	add	r3, r1
 8013b30:	60a2      	str	r2, [r4, #8]
 8013b32:	6123      	str	r3, [r4, #16]
 8013b34:	7da0      	ldrb	r0, [r4, #22]
 8013b36:	f080 0001 	eor.w	r0, r0, #1
 8013b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b3e:	881b      	ldrh	r3, [r3, #0]
 8013b40:	802b      	strh	r3, [r5, #0]
 8013b42:	e7ef      	b.n	8013b24 <ucdr_deserialize_int16_t+0x90>
 8013b44:	68a2      	ldr	r2, [r4, #8]
 8013b46:	6923      	ldr	r3, [r4, #16]
 8013b48:	1b92      	subs	r2, r2, r6
 8013b4a:	7da0      	ldrb	r0, [r4, #22]
 8013b4c:	1b9b      	subs	r3, r3, r6
 8013b4e:	f884 8015 	strb.w	r8, [r4, #21]
 8013b52:	f080 0001 	eor.w	r0, r0, #1
 8013b56:	60a2      	str	r2, [r4, #8]
 8013b58:	6123      	str	r3, [r4, #16]
 8013b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b5e:	68a3      	ldr	r3, [r4, #8]
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	706b      	strb	r3, [r5, #1]
 8013b64:	e7c2      	b.n	8013aec <ucdr_deserialize_int16_t+0x58>
 8013b66:	4639      	mov	r1, r7
 8013b68:	4632      	mov	r2, r6
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	f00d faf7 	bl	802115e <memcpy>
 8013b70:	464a      	mov	r2, r9
 8013b72:	19a8      	adds	r0, r5, r6
 8013b74:	68a1      	ldr	r1, [r4, #8]
 8013b76:	f00d faf2 	bl	802115e <memcpy>
 8013b7a:	e7b7      	b.n	8013aec <ucdr_deserialize_int16_t+0x58>

08013b7c <ucdr_serialize_int32_t>:
 8013b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b80:	b082      	sub	sp, #8
 8013b82:	4604      	mov	r4, r0
 8013b84:	9101      	str	r1, [sp, #4]
 8013b86:	2104      	movs	r1, #4
 8013b88:	f000 fb16 	bl	80141b8 <ucdr_buffer_alignment>
 8013b8c:	4601      	mov	r1, r0
 8013b8e:	4620      	mov	r0, r4
 8013b90:	7d67      	ldrb	r7, [r4, #21]
 8013b92:	f000 fb59 	bl	8014248 <ucdr_advance_buffer>
 8013b96:	2104      	movs	r1, #4
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f000 faad 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d139      	bne.n	8013c16 <ucdr_serialize_int32_t+0x9a>
 8013ba2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013ba6:	42ab      	cmp	r3, r5
 8013ba8:	d930      	bls.n	8013c0c <ucdr_serialize_int32_t+0x90>
 8013baa:	1b5e      	subs	r6, r3, r5
 8013bac:	60a3      	str	r3, [r4, #8]
 8013bae:	6923      	ldr	r3, [r4, #16]
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f1c6 0804 	rsb	r8, r6, #4
 8013bb6:	4433      	add	r3, r6
 8013bb8:	4641      	mov	r1, r8
 8013bba:	6123      	str	r3, [r4, #16]
 8013bbc:	f000 faa8 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	d04c      	beq.n	8013c5e <ucdr_serialize_int32_t+0xe2>
 8013bc4:	7d23      	ldrb	r3, [r4, #20]
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	d063      	beq.n	8013c92 <ucdr_serialize_int32_t+0x116>
 8013bca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013bce:	702b      	strb	r3, [r5, #0]
 8013bd0:	2e00      	cmp	r6, #0
 8013bd2:	d051      	beq.n	8013c78 <ucdr_serialize_int32_t+0xfc>
 8013bd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013bd8:	2e01      	cmp	r6, #1
 8013bda:	706b      	strb	r3, [r5, #1]
 8013bdc:	d050      	beq.n	8013c80 <ucdr_serialize_int32_t+0x104>
 8013bde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013be2:	2e02      	cmp	r6, #2
 8013be4:	70ab      	strb	r3, [r5, #2]
 8013be6:	d04f      	beq.n	8013c88 <ucdr_serialize_int32_t+0x10c>
 8013be8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bec:	70eb      	strb	r3, [r5, #3]
 8013bee:	6923      	ldr	r3, [r4, #16]
 8013bf0:	2104      	movs	r1, #4
 8013bf2:	68a2      	ldr	r2, [r4, #8]
 8013bf4:	3304      	adds	r3, #4
 8013bf6:	7da0      	ldrb	r0, [r4, #22]
 8013bf8:	4442      	add	r2, r8
 8013bfa:	7561      	strb	r1, [r4, #21]
 8013bfc:	1b9e      	subs	r6, r3, r6
 8013bfe:	f080 0001 	eor.w	r0, r0, #1
 8013c02:	60a2      	str	r2, [r4, #8]
 8013c04:	6126      	str	r6, [r4, #16]
 8013c06:	b002      	add	sp, #8
 8013c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c0c:	2104      	movs	r1, #4
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f000 fa7e 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013c14:	b1d0      	cbz	r0, 8013c4c <ucdr_serialize_int32_t+0xd0>
 8013c16:	7d23      	ldrb	r3, [r4, #20]
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	68a3      	ldr	r3, [r4, #8]
 8013c1c:	d01c      	beq.n	8013c58 <ucdr_serialize_int32_t+0xdc>
 8013c1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c26:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013c2a:	7018      	strb	r0, [r3, #0]
 8013c2c:	68a3      	ldr	r3, [r4, #8]
 8013c2e:	705a      	strb	r2, [r3, #1]
 8013c30:	68a3      	ldr	r3, [r4, #8]
 8013c32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c36:	7099      	strb	r1, [r3, #2]
 8013c38:	68a3      	ldr	r3, [r4, #8]
 8013c3a:	70da      	strb	r2, [r3, #3]
 8013c3c:	2104      	movs	r1, #4
 8013c3e:	68a2      	ldr	r2, [r4, #8]
 8013c40:	6923      	ldr	r3, [r4, #16]
 8013c42:	440a      	add	r2, r1
 8013c44:	7561      	strb	r1, [r4, #21]
 8013c46:	440b      	add	r3, r1
 8013c48:	60a2      	str	r2, [r4, #8]
 8013c4a:	6123      	str	r3, [r4, #16]
 8013c4c:	7da0      	ldrb	r0, [r4, #22]
 8013c4e:	f080 0001 	eor.w	r0, r0, #1
 8013c52:	b002      	add	sp, #8
 8013c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c58:	9a01      	ldr	r2, [sp, #4]
 8013c5a:	601a      	str	r2, [r3, #0]
 8013c5c:	e7ee      	b.n	8013c3c <ucdr_serialize_int32_t+0xc0>
 8013c5e:	68a2      	ldr	r2, [r4, #8]
 8013c60:	6923      	ldr	r3, [r4, #16]
 8013c62:	7da0      	ldrb	r0, [r4, #22]
 8013c64:	1b92      	subs	r2, r2, r6
 8013c66:	1b9b      	subs	r3, r3, r6
 8013c68:	7567      	strb	r7, [r4, #21]
 8013c6a:	f080 0001 	eor.w	r0, r0, #1
 8013c6e:	60a2      	str	r2, [r4, #8]
 8013c70:	6123      	str	r3, [r4, #16]
 8013c72:	b002      	add	sp, #8
 8013c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c78:	68a3      	ldr	r3, [r4, #8]
 8013c7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c7e:	701a      	strb	r2, [r3, #0]
 8013c80:	68a3      	ldr	r3, [r4, #8]
 8013c82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013c86:	701a      	strb	r2, [r3, #0]
 8013c88:	68a3      	ldr	r3, [r4, #8]
 8013c8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c8e:	701a      	strb	r2, [r3, #0]
 8013c90:	e7ad      	b.n	8013bee <ucdr_serialize_int32_t+0x72>
 8013c92:	4628      	mov	r0, r5
 8013c94:	ad01      	add	r5, sp, #4
 8013c96:	4632      	mov	r2, r6
 8013c98:	4629      	mov	r1, r5
 8013c9a:	f00d fa60 	bl	802115e <memcpy>
 8013c9e:	4642      	mov	r2, r8
 8013ca0:	19a9      	adds	r1, r5, r6
 8013ca2:	68a0      	ldr	r0, [r4, #8]
 8013ca4:	f00d fa5b 	bl	802115e <memcpy>
 8013ca8:	e7a1      	b.n	8013bee <ucdr_serialize_int32_t+0x72>
 8013caa:	bf00      	nop

08013cac <ucdr_deserialize_int32_t>:
 8013cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	460d      	mov	r5, r1
 8013cb4:	2104      	movs	r1, #4
 8013cb6:	f000 fa7f 	bl	80141b8 <ucdr_buffer_alignment>
 8013cba:	4601      	mov	r1, r0
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013cc2:	f000 fac1 	bl	8014248 <ucdr_advance_buffer>
 8013cc6:	2104      	movs	r1, #4
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f000 fa15 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d138      	bne.n	8013d44 <ucdr_deserialize_int32_t+0x98>
 8013cd2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013cd6:	42b7      	cmp	r7, r6
 8013cd8:	d92f      	bls.n	8013d3a <ucdr_deserialize_int32_t+0x8e>
 8013cda:	6923      	ldr	r3, [r4, #16]
 8013cdc:	4620      	mov	r0, r4
 8013cde:	60a7      	str	r7, [r4, #8]
 8013ce0:	1bbf      	subs	r7, r7, r6
 8013ce2:	443b      	add	r3, r7
 8013ce4:	f1c7 0904 	rsb	r9, r7, #4
 8013ce8:	6123      	str	r3, [r4, #16]
 8013cea:	4649      	mov	r1, r9
 8013cec:	f000 fa10 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d046      	beq.n	8013d82 <ucdr_deserialize_int32_t+0xd6>
 8013cf4:	7d23      	ldrb	r3, [r4, #20]
 8013cf6:	2b01      	cmp	r3, #1
 8013cf8:	d05c      	beq.n	8013db4 <ucdr_deserialize_int32_t+0x108>
 8013cfa:	78f3      	ldrb	r3, [r6, #3]
 8013cfc:	702b      	strb	r3, [r5, #0]
 8013cfe:	2f00      	cmp	r7, #0
 8013d00:	d04c      	beq.n	8013d9c <ucdr_deserialize_int32_t+0xf0>
 8013d02:	78b3      	ldrb	r3, [r6, #2]
 8013d04:	2f01      	cmp	r7, #1
 8013d06:	706b      	strb	r3, [r5, #1]
 8013d08:	f105 0302 	add.w	r3, r5, #2
 8013d0c:	d04a      	beq.n	8013da4 <ucdr_deserialize_int32_t+0xf8>
 8013d0e:	7873      	ldrb	r3, [r6, #1]
 8013d10:	2f02      	cmp	r7, #2
 8013d12:	70ab      	strb	r3, [r5, #2]
 8013d14:	f105 0303 	add.w	r3, r5, #3
 8013d18:	d048      	beq.n	8013dac <ucdr_deserialize_int32_t+0x100>
 8013d1a:	7833      	ldrb	r3, [r6, #0]
 8013d1c:	70eb      	strb	r3, [r5, #3]
 8013d1e:	6923      	ldr	r3, [r4, #16]
 8013d20:	2104      	movs	r1, #4
 8013d22:	68a2      	ldr	r2, [r4, #8]
 8013d24:	3304      	adds	r3, #4
 8013d26:	7da0      	ldrb	r0, [r4, #22]
 8013d28:	444a      	add	r2, r9
 8013d2a:	7561      	strb	r1, [r4, #21]
 8013d2c:	1bdb      	subs	r3, r3, r7
 8013d2e:	f080 0001 	eor.w	r0, r0, #1
 8013d32:	60a2      	str	r2, [r4, #8]
 8013d34:	6123      	str	r3, [r4, #16]
 8013d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d3a:	2104      	movs	r1, #4
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f000 f9e7 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013d42:	b1b0      	cbz	r0, 8013d72 <ucdr_deserialize_int32_t+0xc6>
 8013d44:	7d23      	ldrb	r3, [r4, #20]
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	68a3      	ldr	r3, [r4, #8]
 8013d4a:	d017      	beq.n	8013d7c <ucdr_deserialize_int32_t+0xd0>
 8013d4c:	78db      	ldrb	r3, [r3, #3]
 8013d4e:	702b      	strb	r3, [r5, #0]
 8013d50:	68a3      	ldr	r3, [r4, #8]
 8013d52:	789b      	ldrb	r3, [r3, #2]
 8013d54:	706b      	strb	r3, [r5, #1]
 8013d56:	68a3      	ldr	r3, [r4, #8]
 8013d58:	785b      	ldrb	r3, [r3, #1]
 8013d5a:	70ab      	strb	r3, [r5, #2]
 8013d5c:	68a3      	ldr	r3, [r4, #8]
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	70eb      	strb	r3, [r5, #3]
 8013d62:	2104      	movs	r1, #4
 8013d64:	68a2      	ldr	r2, [r4, #8]
 8013d66:	6923      	ldr	r3, [r4, #16]
 8013d68:	440a      	add	r2, r1
 8013d6a:	7561      	strb	r1, [r4, #21]
 8013d6c:	440b      	add	r3, r1
 8013d6e:	60a2      	str	r2, [r4, #8]
 8013d70:	6123      	str	r3, [r4, #16]
 8013d72:	7da0      	ldrb	r0, [r4, #22]
 8013d74:	f080 0001 	eor.w	r0, r0, #1
 8013d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	602b      	str	r3, [r5, #0]
 8013d80:	e7ef      	b.n	8013d62 <ucdr_deserialize_int32_t+0xb6>
 8013d82:	68a2      	ldr	r2, [r4, #8]
 8013d84:	6923      	ldr	r3, [r4, #16]
 8013d86:	1bd2      	subs	r2, r2, r7
 8013d88:	7da0      	ldrb	r0, [r4, #22]
 8013d8a:	1bdb      	subs	r3, r3, r7
 8013d8c:	f884 8015 	strb.w	r8, [r4, #21]
 8013d90:	f080 0001 	eor.w	r0, r0, #1
 8013d94:	60a2      	str	r2, [r4, #8]
 8013d96:	6123      	str	r3, [r4, #16]
 8013d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d9c:	68a3      	ldr	r3, [r4, #8]
 8013d9e:	789b      	ldrb	r3, [r3, #2]
 8013da0:	706b      	strb	r3, [r5, #1]
 8013da2:	1cab      	adds	r3, r5, #2
 8013da4:	68a2      	ldr	r2, [r4, #8]
 8013da6:	7852      	ldrb	r2, [r2, #1]
 8013da8:	f803 2b01 	strb.w	r2, [r3], #1
 8013dac:	68a2      	ldr	r2, [r4, #8]
 8013dae:	7812      	ldrb	r2, [r2, #0]
 8013db0:	701a      	strb	r2, [r3, #0]
 8013db2:	e7b4      	b.n	8013d1e <ucdr_deserialize_int32_t+0x72>
 8013db4:	4631      	mov	r1, r6
 8013db6:	463a      	mov	r2, r7
 8013db8:	4628      	mov	r0, r5
 8013dba:	f00d f9d0 	bl	802115e <memcpy>
 8013dbe:	464a      	mov	r2, r9
 8013dc0:	19e8      	adds	r0, r5, r7
 8013dc2:	68a1      	ldr	r1, [r4, #8]
 8013dc4:	f00d f9cb 	bl	802115e <memcpy>
 8013dc8:	e7a9      	b.n	8013d1e <ucdr_deserialize_int32_t+0x72>
 8013dca:	bf00      	nop

08013dcc <ucdr_serialize_double>:
 8013dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	2108      	movs	r1, #8
 8013dd6:	ed8d 0b00 	vstr	d0, [sp]
 8013dda:	f000 f9ed 	bl	80141b8 <ucdr_buffer_alignment>
 8013dde:	4601      	mov	r1, r0
 8013de0:	4620      	mov	r0, r4
 8013de2:	7d67      	ldrb	r7, [r4, #21]
 8013de4:	f000 fa30 	bl	8014248 <ucdr_advance_buffer>
 8013de8:	2108      	movs	r1, #8
 8013dea:	4620      	mov	r0, r4
 8013dec:	f000 f984 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	d14e      	bne.n	8013e92 <ucdr_serialize_double+0xc6>
 8013df4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013df8:	42ab      	cmp	r3, r5
 8013dfa:	d945      	bls.n	8013e88 <ucdr_serialize_double+0xbc>
 8013dfc:	1b5e      	subs	r6, r3, r5
 8013dfe:	60a3      	str	r3, [r4, #8]
 8013e00:	6923      	ldr	r3, [r4, #16]
 8013e02:	4620      	mov	r0, r4
 8013e04:	f1c6 0808 	rsb	r8, r6, #8
 8013e08:	4433      	add	r3, r6
 8013e0a:	4641      	mov	r1, r8
 8013e0c:	6123      	str	r3, [r4, #16]
 8013e0e:	f000 f97f 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d074      	beq.n	8013f00 <ucdr_serialize_double+0x134>
 8013e16:	7d23      	ldrb	r3, [r4, #20]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	f000 809b 	beq.w	8013f54 <ucdr_serialize_double+0x188>
 8013e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e22:	702b      	strb	r3, [r5, #0]
 8013e24:	2e00      	cmp	r6, #0
 8013e26:	d078      	beq.n	8013f1a <ucdr_serialize_double+0x14e>
 8013e28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e2c:	2e01      	cmp	r6, #1
 8013e2e:	706b      	strb	r3, [r5, #1]
 8013e30:	d077      	beq.n	8013f22 <ucdr_serialize_double+0x156>
 8013e32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e36:	2e02      	cmp	r6, #2
 8013e38:	70ab      	strb	r3, [r5, #2]
 8013e3a:	d076      	beq.n	8013f2a <ucdr_serialize_double+0x15e>
 8013e3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e40:	2e03      	cmp	r6, #3
 8013e42:	70eb      	strb	r3, [r5, #3]
 8013e44:	d075      	beq.n	8013f32 <ucdr_serialize_double+0x166>
 8013e46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013e4a:	2e04      	cmp	r6, #4
 8013e4c:	712b      	strb	r3, [r5, #4]
 8013e4e:	d074      	beq.n	8013f3a <ucdr_serialize_double+0x16e>
 8013e50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013e54:	2e05      	cmp	r6, #5
 8013e56:	716b      	strb	r3, [r5, #5]
 8013e58:	d073      	beq.n	8013f42 <ucdr_serialize_double+0x176>
 8013e5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013e5e:	2e06      	cmp	r6, #6
 8013e60:	71ab      	strb	r3, [r5, #6]
 8013e62:	d072      	beq.n	8013f4a <ucdr_serialize_double+0x17e>
 8013e64:	f89d 3000 	ldrb.w	r3, [sp]
 8013e68:	71eb      	strb	r3, [r5, #7]
 8013e6a:	6923      	ldr	r3, [r4, #16]
 8013e6c:	2108      	movs	r1, #8
 8013e6e:	68a2      	ldr	r2, [r4, #8]
 8013e70:	3308      	adds	r3, #8
 8013e72:	7da0      	ldrb	r0, [r4, #22]
 8013e74:	4442      	add	r2, r8
 8013e76:	7561      	strb	r1, [r4, #21]
 8013e78:	1b9e      	subs	r6, r3, r6
 8013e7a:	f080 0001 	eor.w	r0, r0, #1
 8013e7e:	60a2      	str	r2, [r4, #8]
 8013e80:	6126      	str	r6, [r4, #16]
 8013e82:	b002      	add	sp, #8
 8013e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e88:	2108      	movs	r1, #8
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f000 f940 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013e90:	b350      	cbz	r0, 8013ee8 <ucdr_serialize_double+0x11c>
 8013e92:	7d23      	ldrb	r3, [r4, #20]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d02d      	beq.n	8013ef4 <ucdr_serialize_double+0x128>
 8013e98:	68a3      	ldr	r3, [r4, #8]
 8013e9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013e9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ea2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013ea6:	7018      	strb	r0, [r3, #0]
 8013ea8:	68a3      	ldr	r3, [r4, #8]
 8013eaa:	705a      	strb	r2, [r3, #1]
 8013eac:	68a3      	ldr	r3, [r4, #8]
 8013eae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013eb2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013eb6:	7099      	strb	r1, [r3, #2]
 8013eb8:	68a3      	ldr	r3, [r4, #8]
 8013eba:	70da      	strb	r2, [r3, #3]
 8013ebc:	68a3      	ldr	r3, [r4, #8]
 8013ebe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013ec2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013ec6:	7118      	strb	r0, [r3, #4]
 8013ec8:	68a3      	ldr	r3, [r4, #8]
 8013eca:	715a      	strb	r2, [r3, #5]
 8013ecc:	68a3      	ldr	r3, [r4, #8]
 8013ece:	f89d 2000 	ldrb.w	r2, [sp]
 8013ed2:	7199      	strb	r1, [r3, #6]
 8013ed4:	68a3      	ldr	r3, [r4, #8]
 8013ed6:	71da      	strb	r2, [r3, #7]
 8013ed8:	2108      	movs	r1, #8
 8013eda:	68a2      	ldr	r2, [r4, #8]
 8013edc:	6923      	ldr	r3, [r4, #16]
 8013ede:	440a      	add	r2, r1
 8013ee0:	7561      	strb	r1, [r4, #21]
 8013ee2:	440b      	add	r3, r1
 8013ee4:	60a2      	str	r2, [r4, #8]
 8013ee6:	6123      	str	r3, [r4, #16]
 8013ee8:	7da0      	ldrb	r0, [r4, #22]
 8013eea:	f080 0001 	eor.w	r0, r0, #1
 8013eee:	b002      	add	sp, #8
 8013ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef4:	466b      	mov	r3, sp
 8013ef6:	68a2      	ldr	r2, [r4, #8]
 8013ef8:	cb03      	ldmia	r3!, {r0, r1}
 8013efa:	6010      	str	r0, [r2, #0]
 8013efc:	6051      	str	r1, [r2, #4]
 8013efe:	e7eb      	b.n	8013ed8 <ucdr_serialize_double+0x10c>
 8013f00:	68a2      	ldr	r2, [r4, #8]
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	7da0      	ldrb	r0, [r4, #22]
 8013f06:	1b92      	subs	r2, r2, r6
 8013f08:	1b9b      	subs	r3, r3, r6
 8013f0a:	7567      	strb	r7, [r4, #21]
 8013f0c:	f080 0001 	eor.w	r0, r0, #1
 8013f10:	60a2      	str	r2, [r4, #8]
 8013f12:	6123      	str	r3, [r4, #16]
 8013f14:	b002      	add	sp, #8
 8013f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f1a:	68a3      	ldr	r3, [r4, #8]
 8013f1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f20:	701a      	strb	r2, [r3, #0]
 8013f22:	68a3      	ldr	r3, [r4, #8]
 8013f24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f28:	701a      	strb	r2, [r3, #0]
 8013f2a:	68a3      	ldr	r3, [r4, #8]
 8013f2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f30:	701a      	strb	r2, [r3, #0]
 8013f32:	68a3      	ldr	r3, [r4, #8]
 8013f34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	68a3      	ldr	r3, [r4, #8]
 8013f3c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f40:	701a      	strb	r2, [r3, #0]
 8013f42:	68a3      	ldr	r3, [r4, #8]
 8013f44:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013f48:	701a      	strb	r2, [r3, #0]
 8013f4a:	68a3      	ldr	r3, [r4, #8]
 8013f4c:	f89d 2000 	ldrb.w	r2, [sp]
 8013f50:	701a      	strb	r2, [r3, #0]
 8013f52:	e78a      	b.n	8013e6a <ucdr_serialize_double+0x9e>
 8013f54:	4628      	mov	r0, r5
 8013f56:	466d      	mov	r5, sp
 8013f58:	4632      	mov	r2, r6
 8013f5a:	4629      	mov	r1, r5
 8013f5c:	f00d f8ff 	bl	802115e <memcpy>
 8013f60:	4642      	mov	r2, r8
 8013f62:	19a9      	adds	r1, r5, r6
 8013f64:	68a0      	ldr	r0, [r4, #8]
 8013f66:	f00d f8fa 	bl	802115e <memcpy>
 8013f6a:	e77e      	b.n	8013e6a <ucdr_serialize_double+0x9e>

08013f6c <ucdr_deserialize_double>:
 8013f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f70:	4604      	mov	r4, r0
 8013f72:	460d      	mov	r5, r1
 8013f74:	2108      	movs	r1, #8
 8013f76:	f000 f91f 	bl	80141b8 <ucdr_buffer_alignment>
 8013f7a:	4601      	mov	r1, r0
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f82:	f000 f961 	bl	8014248 <ucdr_advance_buffer>
 8013f86:	2108      	movs	r1, #8
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f000 f8b5 	bl	80140f8 <ucdr_check_buffer_available_for>
 8013f8e:	2800      	cmp	r0, #0
 8013f90:	d151      	bne.n	8014036 <ucdr_deserialize_double+0xca>
 8013f92:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013f96:	42be      	cmp	r6, r7
 8013f98:	d948      	bls.n	801402c <ucdr_deserialize_double+0xc0>
 8013f9a:	6923      	ldr	r3, [r4, #16]
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	60a6      	str	r6, [r4, #8]
 8013fa0:	1bf6      	subs	r6, r6, r7
 8013fa2:	4433      	add	r3, r6
 8013fa4:	f1c6 0908 	rsb	r9, r6, #8
 8013fa8:	6123      	str	r3, [r4, #16]
 8013faa:	4649      	mov	r1, r9
 8013fac:	f000 f8b0 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d06d      	beq.n	8014090 <ucdr_deserialize_double+0x124>
 8013fb4:	7d23      	ldrb	r3, [r4, #20]
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	f000 8093 	beq.w	80140e2 <ucdr_deserialize_double+0x176>
 8013fbc:	79fb      	ldrb	r3, [r7, #7]
 8013fbe:	702b      	strb	r3, [r5, #0]
 8013fc0:	2e00      	cmp	r6, #0
 8013fc2:	d072      	beq.n	80140aa <ucdr_deserialize_double+0x13e>
 8013fc4:	79bb      	ldrb	r3, [r7, #6]
 8013fc6:	2e01      	cmp	r6, #1
 8013fc8:	706b      	strb	r3, [r5, #1]
 8013fca:	f105 0302 	add.w	r3, r5, #2
 8013fce:	d070      	beq.n	80140b2 <ucdr_deserialize_double+0x146>
 8013fd0:	797b      	ldrb	r3, [r7, #5]
 8013fd2:	2e02      	cmp	r6, #2
 8013fd4:	70ab      	strb	r3, [r5, #2]
 8013fd6:	f105 0303 	add.w	r3, r5, #3
 8013fda:	d06e      	beq.n	80140ba <ucdr_deserialize_double+0x14e>
 8013fdc:	793b      	ldrb	r3, [r7, #4]
 8013fde:	2e03      	cmp	r6, #3
 8013fe0:	70eb      	strb	r3, [r5, #3]
 8013fe2:	f105 0304 	add.w	r3, r5, #4
 8013fe6:	d06c      	beq.n	80140c2 <ucdr_deserialize_double+0x156>
 8013fe8:	78fb      	ldrb	r3, [r7, #3]
 8013fea:	2e04      	cmp	r6, #4
 8013fec:	712b      	strb	r3, [r5, #4]
 8013fee:	f105 0305 	add.w	r3, r5, #5
 8013ff2:	d06a      	beq.n	80140ca <ucdr_deserialize_double+0x15e>
 8013ff4:	78bb      	ldrb	r3, [r7, #2]
 8013ff6:	2e05      	cmp	r6, #5
 8013ff8:	716b      	strb	r3, [r5, #5]
 8013ffa:	f105 0306 	add.w	r3, r5, #6
 8013ffe:	d068      	beq.n	80140d2 <ucdr_deserialize_double+0x166>
 8014000:	787b      	ldrb	r3, [r7, #1]
 8014002:	2e06      	cmp	r6, #6
 8014004:	71ab      	strb	r3, [r5, #6]
 8014006:	f105 0307 	add.w	r3, r5, #7
 801400a:	d066      	beq.n	80140da <ucdr_deserialize_double+0x16e>
 801400c:	783b      	ldrb	r3, [r7, #0]
 801400e:	71eb      	strb	r3, [r5, #7]
 8014010:	6923      	ldr	r3, [r4, #16]
 8014012:	2108      	movs	r1, #8
 8014014:	68a2      	ldr	r2, [r4, #8]
 8014016:	3308      	adds	r3, #8
 8014018:	7da0      	ldrb	r0, [r4, #22]
 801401a:	444a      	add	r2, r9
 801401c:	7561      	strb	r1, [r4, #21]
 801401e:	1b9e      	subs	r6, r3, r6
 8014020:	f080 0001 	eor.w	r0, r0, #1
 8014024:	60a2      	str	r2, [r4, #8]
 8014026:	6126      	str	r6, [r4, #16]
 8014028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801402c:	2108      	movs	r1, #8
 801402e:	4620      	mov	r0, r4
 8014030:	f000 f86e 	bl	8014110 <ucdr_check_final_buffer_behavior>
 8014034:	b310      	cbz	r0, 801407c <ucdr_deserialize_double+0x110>
 8014036:	7d23      	ldrb	r3, [r4, #20]
 8014038:	2b01      	cmp	r3, #1
 801403a:	68a3      	ldr	r3, [r4, #8]
 801403c:	d023      	beq.n	8014086 <ucdr_deserialize_double+0x11a>
 801403e:	79db      	ldrb	r3, [r3, #7]
 8014040:	702b      	strb	r3, [r5, #0]
 8014042:	68a3      	ldr	r3, [r4, #8]
 8014044:	799b      	ldrb	r3, [r3, #6]
 8014046:	706b      	strb	r3, [r5, #1]
 8014048:	68a3      	ldr	r3, [r4, #8]
 801404a:	795b      	ldrb	r3, [r3, #5]
 801404c:	70ab      	strb	r3, [r5, #2]
 801404e:	68a3      	ldr	r3, [r4, #8]
 8014050:	791b      	ldrb	r3, [r3, #4]
 8014052:	70eb      	strb	r3, [r5, #3]
 8014054:	68a3      	ldr	r3, [r4, #8]
 8014056:	78db      	ldrb	r3, [r3, #3]
 8014058:	712b      	strb	r3, [r5, #4]
 801405a:	68a3      	ldr	r3, [r4, #8]
 801405c:	789b      	ldrb	r3, [r3, #2]
 801405e:	716b      	strb	r3, [r5, #5]
 8014060:	68a3      	ldr	r3, [r4, #8]
 8014062:	785b      	ldrb	r3, [r3, #1]
 8014064:	71ab      	strb	r3, [r5, #6]
 8014066:	68a3      	ldr	r3, [r4, #8]
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	71eb      	strb	r3, [r5, #7]
 801406c:	2108      	movs	r1, #8
 801406e:	68a2      	ldr	r2, [r4, #8]
 8014070:	6923      	ldr	r3, [r4, #16]
 8014072:	440a      	add	r2, r1
 8014074:	7561      	strb	r1, [r4, #21]
 8014076:	440b      	add	r3, r1
 8014078:	60a2      	str	r2, [r4, #8]
 801407a:	6123      	str	r3, [r4, #16]
 801407c:	7da0      	ldrb	r0, [r4, #22]
 801407e:	f080 0001 	eor.w	r0, r0, #1
 8014082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	602a      	str	r2, [r5, #0]
 801408c:	606b      	str	r3, [r5, #4]
 801408e:	e7ed      	b.n	801406c <ucdr_deserialize_double+0x100>
 8014090:	68a2      	ldr	r2, [r4, #8]
 8014092:	6923      	ldr	r3, [r4, #16]
 8014094:	1b92      	subs	r2, r2, r6
 8014096:	7da0      	ldrb	r0, [r4, #22]
 8014098:	1b9b      	subs	r3, r3, r6
 801409a:	f884 8015 	strb.w	r8, [r4, #21]
 801409e:	f080 0001 	eor.w	r0, r0, #1
 80140a2:	60a2      	str	r2, [r4, #8]
 80140a4:	6123      	str	r3, [r4, #16]
 80140a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140aa:	68a3      	ldr	r3, [r4, #8]
 80140ac:	799b      	ldrb	r3, [r3, #6]
 80140ae:	706b      	strb	r3, [r5, #1]
 80140b0:	1cab      	adds	r3, r5, #2
 80140b2:	68a2      	ldr	r2, [r4, #8]
 80140b4:	7952      	ldrb	r2, [r2, #5]
 80140b6:	f803 2b01 	strb.w	r2, [r3], #1
 80140ba:	68a2      	ldr	r2, [r4, #8]
 80140bc:	7912      	ldrb	r2, [r2, #4]
 80140be:	f803 2b01 	strb.w	r2, [r3], #1
 80140c2:	68a2      	ldr	r2, [r4, #8]
 80140c4:	78d2      	ldrb	r2, [r2, #3]
 80140c6:	f803 2b01 	strb.w	r2, [r3], #1
 80140ca:	68a2      	ldr	r2, [r4, #8]
 80140cc:	7892      	ldrb	r2, [r2, #2]
 80140ce:	f803 2b01 	strb.w	r2, [r3], #1
 80140d2:	68a2      	ldr	r2, [r4, #8]
 80140d4:	7852      	ldrb	r2, [r2, #1]
 80140d6:	f803 2b01 	strb.w	r2, [r3], #1
 80140da:	68a2      	ldr	r2, [r4, #8]
 80140dc:	7812      	ldrb	r2, [r2, #0]
 80140de:	701a      	strb	r2, [r3, #0]
 80140e0:	e796      	b.n	8014010 <ucdr_deserialize_double+0xa4>
 80140e2:	4639      	mov	r1, r7
 80140e4:	4632      	mov	r2, r6
 80140e6:	4628      	mov	r0, r5
 80140e8:	f00d f839 	bl	802115e <memcpy>
 80140ec:	464a      	mov	r2, r9
 80140ee:	19a8      	adds	r0, r5, r6
 80140f0:	68a1      	ldr	r1, [r4, #8]
 80140f2:	f00d f834 	bl	802115e <memcpy>
 80140f6:	e78b      	b.n	8014010 <ucdr_deserialize_double+0xa4>

080140f8 <ucdr_check_buffer_available_for>:
 80140f8:	7d83      	ldrb	r3, [r0, #22]
 80140fa:	b93b      	cbnz	r3, 801410c <ucdr_check_buffer_available_for+0x14>
 80140fc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8014100:	4419      	add	r1, r3
 8014102:	4288      	cmp	r0, r1
 8014104:	bf34      	ite	cc
 8014106:	2000      	movcc	r0, #0
 8014108:	2001      	movcs	r0, #1
 801410a:	4770      	bx	lr
 801410c:	2000      	movs	r0, #0
 801410e:	4770      	bx	lr

08014110 <ucdr_check_final_buffer_behavior>:
 8014110:	7d83      	ldrb	r3, [r0, #22]
 8014112:	b943      	cbnz	r3, 8014126 <ucdr_check_final_buffer_behavior+0x16>
 8014114:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8014118:	b510      	push	{r4, lr}
 801411a:	4291      	cmp	r1, r2
 801411c:	4604      	mov	r4, r0
 801411e:	d205      	bcs.n	801412c <ucdr_check_final_buffer_behavior+0x1c>
 8014120:	2301      	movs	r3, #1
 8014122:	4618      	mov	r0, r3
 8014124:	bd10      	pop	{r4, pc}
 8014126:	2300      	movs	r3, #0
 8014128:	4618      	mov	r0, r3
 801412a:	4770      	bx	lr
 801412c:	6982      	ldr	r2, [r0, #24]
 801412e:	b13a      	cbz	r2, 8014140 <ucdr_check_final_buffer_behavior+0x30>
 8014130:	69c1      	ldr	r1, [r0, #28]
 8014132:	4790      	blx	r2
 8014134:	f080 0301 	eor.w	r3, r0, #1
 8014138:	75a0      	strb	r0, [r4, #22]
 801413a:	b2db      	uxtb	r3, r3
 801413c:	4618      	mov	r0, r3
 801413e:	bd10      	pop	{r4, pc}
 8014140:	2001      	movs	r0, #1
 8014142:	75a0      	strb	r0, [r4, #22]
 8014144:	e7fa      	b.n	801413c <ucdr_check_final_buffer_behavior+0x2c>
 8014146:	bf00      	nop

08014148 <ucdr_set_on_full_buffer_callback>:
 8014148:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <ucdr_init_buffer_origin_offset_endian>:
 8014150:	b410      	push	{r4}
 8014152:	9c01      	ldr	r4, [sp, #4]
 8014154:	440a      	add	r2, r1
 8014156:	6001      	str	r1, [r0, #0]
 8014158:	6042      	str	r2, [r0, #4]
 801415a:	190a      	adds	r2, r1, r4
 801415c:	441c      	add	r4, r3
 801415e:	6082      	str	r2, [r0, #8]
 8014160:	2200      	movs	r2, #0
 8014162:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8014166:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801416a:	7542      	strb	r2, [r0, #21]
 801416c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014170:	7582      	strb	r2, [r0, #22]
 8014172:	7503      	strb	r3, [r0, #20]
 8014174:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014178:	4770      	bx	lr
 801417a:	bf00      	nop

0801417c <ucdr_init_buffer_origin_offset>:
 801417c:	b510      	push	{r4, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	9c04      	ldr	r4, [sp, #16]
 8014182:	9400      	str	r4, [sp, #0]
 8014184:	2401      	movs	r4, #1
 8014186:	9401      	str	r4, [sp, #4]
 8014188:	f7ff ffe2 	bl	8014150 <ucdr_init_buffer_origin_offset_endian>
 801418c:	b002      	add	sp, #8
 801418e:	bd10      	pop	{r4, pc}

08014190 <ucdr_init_buffer_origin>:
 8014190:	b510      	push	{r4, lr}
 8014192:	2400      	movs	r4, #0
 8014194:	b082      	sub	sp, #8
 8014196:	9400      	str	r4, [sp, #0]
 8014198:	f7ff fff0 	bl	801417c <ucdr_init_buffer_origin_offset>
 801419c:	b002      	add	sp, #8
 801419e:	bd10      	pop	{r4, pc}

080141a0 <ucdr_init_buffer>:
 80141a0:	2300      	movs	r3, #0
 80141a2:	f7ff bff5 	b.w	8014190 <ucdr_init_buffer_origin>
 80141a6:	bf00      	nop

080141a8 <ucdr_alignment>:
 80141a8:	fbb0 f2f1 	udiv	r2, r0, r1
 80141ac:	fb02 0011 	mls	r0, r2, r1, r0
 80141b0:	1e4b      	subs	r3, r1, #1
 80141b2:	1a08      	subs	r0, r1, r0
 80141b4:	4018      	ands	r0, r3
 80141b6:	4770      	bx	lr

080141b8 <ucdr_buffer_alignment>:
 80141b8:	7d43      	ldrb	r3, [r0, #21]
 80141ba:	428b      	cmp	r3, r1
 80141bc:	d209      	bcs.n	80141d2 <ucdr_buffer_alignment+0x1a>
 80141be:	6903      	ldr	r3, [r0, #16]
 80141c0:	1e4a      	subs	r2, r1, #1
 80141c2:	fbb3 f0f1 	udiv	r0, r3, r1
 80141c6:	fb01 3010 	mls	r0, r1, r0, r3
 80141ca:	1a09      	subs	r1, r1, r0
 80141cc:	ea01 0002 	and.w	r0, r1, r2
 80141d0:	4770      	bx	lr
 80141d2:	2000      	movs	r0, #0
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop

080141d8 <ucdr_align_to>:
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4604      	mov	r4, r0
 80141dc:	460d      	mov	r5, r1
 80141de:	f7ff ffeb 	bl	80141b8 <ucdr_buffer_alignment>
 80141e2:	68a3      	ldr	r3, [r4, #8]
 80141e4:	7565      	strb	r5, [r4, #21]
 80141e6:	181a      	adds	r2, r3, r0
 80141e8:	6923      	ldr	r3, [r4, #16]
 80141ea:	4418      	add	r0, r3
 80141ec:	6863      	ldr	r3, [r4, #4]
 80141ee:	4293      	cmp	r3, r2
 80141f0:	6120      	str	r0, [r4, #16]
 80141f2:	bf28      	it	cs
 80141f4:	4613      	movcs	r3, r2
 80141f6:	60a3      	str	r3, [r4, #8]
 80141f8:	bd38      	pop	{r3, r4, r5, pc}
 80141fa:	bf00      	nop

080141fc <ucdr_buffer_length>:
 80141fc:	6882      	ldr	r2, [r0, #8]
 80141fe:	6800      	ldr	r0, [r0, #0]
 8014200:	1a10      	subs	r0, r2, r0
 8014202:	4770      	bx	lr

08014204 <ucdr_buffer_remaining>:
 8014204:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8014208:	1a10      	subs	r0, r2, r0
 801420a:	4770      	bx	lr

0801420c <ucdr_check_final_buffer_behavior_array>:
 801420c:	b538      	push	{r3, r4, r5, lr}
 801420e:	7d83      	ldrb	r3, [r0, #22]
 8014210:	b9a3      	cbnz	r3, 801423c <ucdr_check_final_buffer_behavior_array+0x30>
 8014212:	4604      	mov	r4, r0
 8014214:	460d      	mov	r5, r1
 8014216:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801421a:	429a      	cmp	r2, r3
 801421c:	d300      	bcc.n	8014220 <ucdr_check_final_buffer_behavior_array+0x14>
 801421e:	b931      	cbnz	r1, 801422e <ucdr_check_final_buffer_behavior_array+0x22>
 8014220:	4620      	mov	r0, r4
 8014222:	f7ff ffef 	bl	8014204 <ucdr_buffer_remaining>
 8014226:	42a8      	cmp	r0, r5
 8014228:	bf28      	it	cs
 801422a:	4628      	movcs	r0, r5
 801422c:	bd38      	pop	{r3, r4, r5, pc}
 801422e:	6983      	ldr	r3, [r0, #24]
 8014230:	b133      	cbz	r3, 8014240 <ucdr_check_final_buffer_behavior_array+0x34>
 8014232:	69c1      	ldr	r1, [r0, #28]
 8014234:	4798      	blx	r3
 8014236:	75a0      	strb	r0, [r4, #22]
 8014238:	2800      	cmp	r0, #0
 801423a:	d0f1      	beq.n	8014220 <ucdr_check_final_buffer_behavior_array+0x14>
 801423c:	2000      	movs	r0, #0
 801423e:	bd38      	pop	{r3, r4, r5, pc}
 8014240:	2301      	movs	r3, #1
 8014242:	7583      	strb	r3, [r0, #22]
 8014244:	e7fa      	b.n	801423c <ucdr_check_final_buffer_behavior_array+0x30>
 8014246:	bf00      	nop

08014248 <ucdr_advance_buffer>:
 8014248:	b538      	push	{r3, r4, r5, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	460d      	mov	r5, r1
 801424e:	f7ff ff53 	bl	80140f8 <ucdr_check_buffer_available_for>
 8014252:	b178      	cbz	r0, 8014274 <ucdr_advance_buffer+0x2c>
 8014254:	6923      	ldr	r3, [r4, #16]
 8014256:	68a2      	ldr	r2, [r4, #8]
 8014258:	442b      	add	r3, r5
 801425a:	442a      	add	r2, r5
 801425c:	6123      	str	r3, [r4, #16]
 801425e:	2301      	movs	r3, #1
 8014260:	60a2      	str	r2, [r4, #8]
 8014262:	7563      	strb	r3, [r4, #21]
 8014264:	bd38      	pop	{r3, r4, r5, pc}
 8014266:	68a2      	ldr	r2, [r4, #8]
 8014268:	1a2d      	subs	r5, r5, r0
 801426a:	6923      	ldr	r3, [r4, #16]
 801426c:	4402      	add	r2, r0
 801426e:	4418      	add	r0, r3
 8014270:	60a2      	str	r2, [r4, #8]
 8014272:	6120      	str	r0, [r4, #16]
 8014274:	4629      	mov	r1, r5
 8014276:	2201      	movs	r2, #1
 8014278:	4620      	mov	r0, r4
 801427a:	f7ff ffc7 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801427e:	2800      	cmp	r0, #0
 8014280:	d1f1      	bne.n	8014266 <ucdr_advance_buffer+0x1e>
 8014282:	2301      	movs	r3, #1
 8014284:	7563      	strb	r3, [r4, #21]
 8014286:	bd38      	pop	{r3, r4, r5, pc}

08014288 <rcl_get_zero_initialized_init_options>:
 8014288:	2000      	movs	r0, #0
 801428a:	4770      	bx	lr

0801428c <rcl_init_options_init>:
 801428c:	b084      	sub	sp, #16
 801428e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014290:	b097      	sub	sp, #92	; 0x5c
 8014292:	ae1d      	add	r6, sp, #116	; 0x74
 8014294:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8014298:	2800      	cmp	r0, #0
 801429a:	d058      	beq.n	801434e <rcl_init_options_init+0xc2>
 801429c:	6803      	ldr	r3, [r0, #0]
 801429e:	4605      	mov	r5, r0
 80142a0:	b133      	cbz	r3, 80142b0 <rcl_init_options_init+0x24>
 80142a2:	2464      	movs	r4, #100	; 0x64
 80142a4:	4620      	mov	r0, r4
 80142a6:	b017      	add	sp, #92	; 0x5c
 80142a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80142ac:	b004      	add	sp, #16
 80142ae:	4770      	bx	lr
 80142b0:	4630      	mov	r0, r6
 80142b2:	f001 f9e1 	bl	8015678 <rcutils_allocator_is_valid>
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d049      	beq.n	801434e <rcl_init_options_init+0xc2>
 80142ba:	46b4      	mov	ip, r6
 80142bc:	ac11      	add	r4, sp, #68	; 0x44
 80142be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80142c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142c4:	f8dc 3000 	ldr.w	r3, [ip]
 80142c8:	2050      	movs	r0, #80	; 0x50
 80142ca:	9921      	ldr	r1, [sp, #132]	; 0x84
 80142cc:	6023      	str	r3, [r4, #0]
 80142ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142d0:	4798      	blx	r3
 80142d2:	4604      	mov	r4, r0
 80142d4:	6028      	str	r0, [r5, #0]
 80142d6:	2800      	cmp	r0, #0
 80142d8:	d03b      	beq.n	8014352 <rcl_init_options_init+0xc6>
 80142da:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80142de:	4686      	mov	lr, r0
 80142e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80142e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80142e8:	f8dc 3000 	ldr.w	r3, [ip]
 80142ec:	a802      	add	r0, sp, #8
 80142ee:	f8ce 3000 	str.w	r3, [lr]
 80142f2:	f001 fa4d 	bl	8015790 <rmw_get_zero_initialized_init_options>
 80142f6:	f10d 0e08 	add.w	lr, sp, #8
 80142fa:	f104 0c18 	add.w	ip, r4, #24
 80142fe:	682f      	ldr	r7, [r5, #0]
 8014300:	ac20      	add	r4, sp, #128	; 0x80
 8014302:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014306:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801430a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801430e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014312:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014316:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801431a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801431e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014326:	e88d 0003 	stmia.w	sp, {r0, r1}
 801432a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801432e:	f107 0018 	add.w	r0, r7, #24
 8014332:	f001 fa9f 	bl	8015874 <rmw_init_options_init>
 8014336:	4604      	mov	r4, r0
 8014338:	2800      	cmp	r0, #0
 801433a:	d0b3      	beq.n	80142a4 <rcl_init_options_init+0x18>
 801433c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801433e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014340:	6828      	ldr	r0, [r5, #0]
 8014342:	4798      	blx	r3
 8014344:	4620      	mov	r0, r4
 8014346:	f006 fced 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801434a:	4604      	mov	r4, r0
 801434c:	e7aa      	b.n	80142a4 <rcl_init_options_init+0x18>
 801434e:	240b      	movs	r4, #11
 8014350:	e7a8      	b.n	80142a4 <rcl_init_options_init+0x18>
 8014352:	240a      	movs	r4, #10
 8014354:	e7a6      	b.n	80142a4 <rcl_init_options_init+0x18>
 8014356:	bf00      	nop

08014358 <rcl_init_options_fini>:
 8014358:	b530      	push	{r4, r5, lr}
 801435a:	b087      	sub	sp, #28
 801435c:	b1f0      	cbz	r0, 801439c <rcl_init_options_fini+0x44>
 801435e:	6803      	ldr	r3, [r0, #0]
 8014360:	4604      	mov	r4, r0
 8014362:	b1db      	cbz	r3, 801439c <rcl_init_options_fini+0x44>
 8014364:	469c      	mov	ip, r3
 8014366:	f10d 0e04 	add.w	lr, sp, #4
 801436a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801436e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014372:	f8dc 3000 	ldr.w	r3, [ip]
 8014376:	a801      	add	r0, sp, #4
 8014378:	f8ce 3000 	str.w	r3, [lr]
 801437c:	f001 f97c 	bl	8015678 <rcutils_allocator_is_valid>
 8014380:	b160      	cbz	r0, 801439c <rcl_init_options_fini+0x44>
 8014382:	6820      	ldr	r0, [r4, #0]
 8014384:	3018      	adds	r0, #24
 8014386:	f001 fb2f 	bl	80159e8 <rmw_init_options_fini>
 801438a:	4605      	mov	r5, r0
 801438c:	b950      	cbnz	r0, 80143a4 <rcl_init_options_fini+0x4c>
 801438e:	6820      	ldr	r0, [r4, #0]
 8014390:	9b02      	ldr	r3, [sp, #8]
 8014392:	9905      	ldr	r1, [sp, #20]
 8014394:	4798      	blx	r3
 8014396:	4628      	mov	r0, r5
 8014398:	b007      	add	sp, #28
 801439a:	bd30      	pop	{r4, r5, pc}
 801439c:	250b      	movs	r5, #11
 801439e:	4628      	mov	r0, r5
 80143a0:	b007      	add	sp, #28
 80143a2:	bd30      	pop	{r4, r5, pc}
 80143a4:	f006 fcbe 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 80143a8:	4605      	mov	r5, r0
 80143aa:	e7f8      	b.n	801439e <rcl_init_options_fini+0x46>

080143ac <rcl_init_options_copy>:
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	b094      	sub	sp, #80	; 0x50
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d05b      	beq.n	801446e <rcl_init_options_copy+0xc2>
 80143b6:	4604      	mov	r4, r0
 80143b8:	6800      	ldr	r0, [r0, #0]
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d057      	beq.n	801446e <rcl_init_options_copy+0xc2>
 80143be:	460e      	mov	r6, r1
 80143c0:	f001 f95a 	bl	8015678 <rcutils_allocator_is_valid>
 80143c4:	2e00      	cmp	r6, #0
 80143c6:	d052      	beq.n	801446e <rcl_init_options_copy+0xc2>
 80143c8:	f080 0001 	eor.w	r0, r0, #1
 80143cc:	b2c0      	uxtb	r0, r0
 80143ce:	2800      	cmp	r0, #0
 80143d0:	d14d      	bne.n	801446e <rcl_init_options_copy+0xc2>
 80143d2:	6833      	ldr	r3, [r6, #0]
 80143d4:	b123      	cbz	r3, 80143e0 <rcl_init_options_copy+0x34>
 80143d6:	2464      	movs	r4, #100	; 0x64
 80143d8:	4620      	mov	r0, r4
 80143da:	b014      	add	sp, #80	; 0x50
 80143dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143e0:	6827      	ldr	r7, [r4, #0]
 80143e2:	ad0f      	add	r5, sp, #60	; 0x3c
 80143e4:	46bc      	mov	ip, r7
 80143e6:	f8d7 8000 	ldr.w	r8, [r7]
 80143ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143f0:	f8dc 3000 	ldr.w	r3, [ip]
 80143f4:	2050      	movs	r0, #80	; 0x50
 80143f6:	4619      	mov	r1, r3
 80143f8:	602b      	str	r3, [r5, #0]
 80143fa:	47c0      	blx	r8
 80143fc:	4605      	mov	r5, r0
 80143fe:	6030      	str	r0, [r6, #0]
 8014400:	b3d0      	cbz	r0, 8014478 <rcl_init_options_copy+0xcc>
 8014402:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8014406:	4686      	mov	lr, r0
 8014408:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801440c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014410:	f8dc 3000 	ldr.w	r3, [ip]
 8014414:	4668      	mov	r0, sp
 8014416:	f8ce 3000 	str.w	r3, [lr]
 801441a:	f001 f9b9 	bl	8015790 <rmw_get_zero_initialized_init_options>
 801441e:	46ee      	mov	lr, sp
 8014420:	f105 0c18 	add.w	ip, r5, #24
 8014424:	6824      	ldr	r4, [r4, #0]
 8014426:	6835      	ldr	r5, [r6, #0]
 8014428:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801442c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014430:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014434:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014438:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801443c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014440:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014444:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014448:	f104 0018 	add.w	r0, r4, #24
 801444c:	f105 0118 	add.w	r1, r5, #24
 8014450:	f001 fa78 	bl	8015944 <rmw_init_options_copy>
 8014454:	4604      	mov	r4, r0
 8014456:	2800      	cmp	r0, #0
 8014458:	d0be      	beq.n	80143d8 <rcl_init_options_copy+0x2c>
 801445a:	f001 f91b 	bl	8015694 <rcutils_get_error_string>
 801445e:	f001 f92f 	bl	80156c0 <rcutils_reset_error>
 8014462:	4630      	mov	r0, r6
 8014464:	f7ff ff78 	bl	8014358 <rcl_init_options_fini>
 8014468:	b140      	cbz	r0, 801447c <rcl_init_options_copy+0xd0>
 801446a:	4604      	mov	r4, r0
 801446c:	e7b4      	b.n	80143d8 <rcl_init_options_copy+0x2c>
 801446e:	240b      	movs	r4, #11
 8014470:	4620      	mov	r0, r4
 8014472:	b014      	add	sp, #80	; 0x50
 8014474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014478:	240a      	movs	r4, #10
 801447a:	e7ad      	b.n	80143d8 <rcl_init_options_copy+0x2c>
 801447c:	4620      	mov	r0, r4
 801447e:	b014      	add	sp, #80	; 0x50
 8014480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014484:	f006 bc4e 	b.w	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>

08014488 <rcl_init_options_set_domain_id>:
 8014488:	b120      	cbz	r0, 8014494 <rcl_init_options_set_domain_id+0xc>
 801448a:	6803      	ldr	r3, [r0, #0]
 801448c:	b113      	cbz	r3, 8014494 <rcl_init_options_set_domain_id+0xc>
 801448e:	2000      	movs	r0, #0
 8014490:	6259      	str	r1, [r3, #36]	; 0x24
 8014492:	4770      	bx	lr
 8014494:	200b      	movs	r0, #11
 8014496:	4770      	bx	lr

08014498 <rcl_node_get_default_options>:
 8014498:	b510      	push	{r4, lr}
 801449a:	4604      	mov	r4, r0
 801449c:	2268      	movs	r2, #104	; 0x68
 801449e:	2100      	movs	r1, #0
 80144a0:	f00c fd94 	bl	8020fcc <memset>
 80144a4:	4620      	mov	r0, r4
 80144a6:	f001 f8d9 	bl	801565c <rcutils_get_default_allocator>
 80144aa:	2301      	movs	r3, #1
 80144ac:	4620      	mov	r0, r4
 80144ae:	7523      	strb	r3, [r4, #20]
 80144b0:	bd10      	pop	{r4, pc}
 80144b2:	bf00      	nop

080144b4 <rcl_node_options_copy>:
 80144b4:	2800      	cmp	r0, #0
 80144b6:	bf18      	it	ne
 80144b8:	4288      	cmpne	r0, r1
 80144ba:	d01b      	beq.n	80144f4 <rcl_node_options_copy+0x40>
 80144bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144be:	fab1 f681 	clz	r6, r1
 80144c2:	460c      	mov	r4, r1
 80144c4:	0976      	lsrs	r6, r6, #5
 80144c6:	b199      	cbz	r1, 80144f0 <rcl_node_options_copy+0x3c>
 80144c8:	4605      	mov	r5, r0
 80144ca:	8a87      	ldrh	r7, [r0, #20]
 80144cc:	4684      	mov	ip, r0
 80144ce:	468e      	mov	lr, r1
 80144d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144d6:	682b      	ldr	r3, [r5, #0]
 80144d8:	2250      	movs	r2, #80	; 0x50
 80144da:	f10c 0118 	add.w	r1, ip, #24
 80144de:	f104 0018 	add.w	r0, r4, #24
 80144e2:	f8ce 3000 	str.w	r3, [lr]
 80144e6:	82a7      	strh	r7, [r4, #20]
 80144e8:	f00c fe39 	bl	802115e <memcpy>
 80144ec:	4630      	mov	r0, r6
 80144ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f0:	200b      	movs	r0, #11
 80144f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f4:	200b      	movs	r0, #11
 80144f6:	4770      	bx	lr

080144f8 <rcl_get_zero_initialized_publisher>:
 80144f8:	4b01      	ldr	r3, [pc, #4]	; (8014500 <rcl_get_zero_initialized_publisher+0x8>)
 80144fa:	6818      	ldr	r0, [r3, #0]
 80144fc:	4770      	bx	lr
 80144fe:	bf00      	nop
 8014500:	08022594 	.word	0x08022594

08014504 <rcl_publisher_init>:
 8014504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014508:	b088      	sub	sp, #32
 801450a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801450c:	2e00      	cmp	r6, #0
 801450e:	d06b      	beq.n	80145e8 <rcl_publisher_init+0xe4>
 8014510:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8014514:	4605      	mov	r5, r0
 8014516:	460f      	mov	r7, r1
 8014518:	4690      	mov	r8, r2
 801451a:	4650      	mov	r0, sl
 801451c:	4699      	mov	r9, r3
 801451e:	f001 f8ab 	bl	8015678 <rcutils_allocator_is_valid>
 8014522:	f080 0401 	eor.w	r4, r0, #1
 8014526:	b2e4      	uxtb	r4, r4
 8014528:	2c00      	cmp	r4, #0
 801452a:	d15d      	bne.n	80145e8 <rcl_publisher_init+0xe4>
 801452c:	2d00      	cmp	r5, #0
 801452e:	d05b      	beq.n	80145e8 <rcl_publisher_init+0xe4>
 8014530:	682b      	ldr	r3, [r5, #0]
 8014532:	b123      	cbz	r3, 801453e <rcl_publisher_init+0x3a>
 8014534:	2464      	movs	r4, #100	; 0x64
 8014536:	4620      	mov	r0, r4
 8014538:	b008      	add	sp, #32
 801453a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801453e:	4638      	mov	r0, r7
 8014540:	f006 feee 	bl	801b320 <rcl_node_is_valid>
 8014544:	2800      	cmp	r0, #0
 8014546:	d054      	beq.n	80145f2 <rcl_publisher_init+0xee>
 8014548:	f1b8 0f00 	cmp.w	r8, #0
 801454c:	d04c      	beq.n	80145e8 <rcl_publisher_init+0xe4>
 801454e:	fab9 f389 	clz	r3, r9
 8014552:	095b      	lsrs	r3, r3, #5
 8014554:	f1b9 0f00 	cmp.w	r9, #0
 8014558:	d046      	beq.n	80145e8 <rcl_publisher_init+0xe4>
 801455a:	aa07      	add	r2, sp, #28
 801455c:	9307      	str	r3, [sp, #28]
 801455e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014562:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8014566:	9205      	str	r2, [sp, #20]
 8014568:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801456c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014570:	4649      	mov	r1, r9
 8014572:	4638      	mov	r0, r7
 8014574:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8014578:	f006 fefa 	bl	801b370 <rcl_node_resolve_name>
 801457c:	2800      	cmp	r0, #0
 801457e:	d14f      	bne.n	8014620 <rcl_publisher_init+0x11c>
 8014580:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8014582:	20c8      	movs	r0, #200	; 0xc8
 8014584:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8014586:	4798      	blx	r3
 8014588:	6028      	str	r0, [r5, #0]
 801458a:	2800      	cmp	r0, #0
 801458c:	d050      	beq.n	8014630 <rcl_publisher_init+0x12c>
 801458e:	4638      	mov	r0, r7
 8014590:	f006 fee8 	bl	801b364 <rcl_node_get_rmw_handle>
 8014594:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8014598:	4641      	mov	r1, r8
 801459a:	9a07      	ldr	r2, [sp, #28]
 801459c:	9300      	str	r3, [sp, #0]
 801459e:	4633      	mov	r3, r6
 80145a0:	682c      	ldr	r4, [r5, #0]
 80145a2:	f001 fd47 	bl	8016034 <rmw_create_publisher>
 80145a6:	682b      	ldr	r3, [r5, #0]
 80145a8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80145ac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80145b0:	b370      	cbz	r0, 8014610 <rcl_publisher_init+0x10c>
 80145b2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80145b6:	f001 fe21 	bl	80161fc <rmw_publisher_get_actual_qos>
 80145ba:	682b      	ldr	r3, [r5, #0]
 80145bc:	4604      	mov	r4, r0
 80145be:	b9d0      	cbnz	r0, 80145f6 <rcl_publisher_init+0xf2>
 80145c0:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 80145c4:	4631      	mov	r1, r6
 80145c6:	4618      	mov	r0, r3
 80145c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80145cc:	2270      	movs	r2, #112	; 0x70
 80145ce:	f00c fdc6 	bl	802115e <memcpy>
 80145d2:	683a      	ldr	r2, [r7, #0]
 80145d4:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80145d8:	9807      	ldr	r0, [sp, #28]
 80145da:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80145dc:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80145de:	4798      	blx	r3
 80145e0:	4620      	mov	r0, r4
 80145e2:	b008      	add	sp, #32
 80145e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e8:	240b      	movs	r4, #11
 80145ea:	4620      	mov	r0, r4
 80145ec:	b008      	add	sp, #32
 80145ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145f2:	24c8      	movs	r4, #200	; 0xc8
 80145f4:	e79f      	b.n	8014536 <rcl_publisher_init+0x32>
 80145f6:	b1cb      	cbz	r3, 801462c <rcl_publisher_init+0x128>
 80145f8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80145fc:	b142      	cbz	r2, 8014610 <rcl_publisher_init+0x10c>
 80145fe:	4638      	mov	r0, r7
 8014600:	f006 feb0 	bl	801b364 <rcl_node_get_rmw_handle>
 8014604:	682b      	ldr	r3, [r5, #0]
 8014606:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 801460a:	f001 fe0b 	bl	8016224 <rmw_destroy_publisher>
 801460e:	682b      	ldr	r3, [r5, #0]
 8014610:	4618      	mov	r0, r3
 8014612:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8014614:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8014616:	2401      	movs	r4, #1
 8014618:	4790      	blx	r2
 801461a:	2300      	movs	r3, #0
 801461c:	602b      	str	r3, [r5, #0]
 801461e:	e7db      	b.n	80145d8 <rcl_publisher_init+0xd4>
 8014620:	2867      	cmp	r0, #103	; 0x67
 8014622:	d007      	beq.n	8014634 <rcl_publisher_init+0x130>
 8014624:	2869      	cmp	r0, #105	; 0x69
 8014626:	d005      	beq.n	8014634 <rcl_publisher_init+0x130>
 8014628:	280a      	cmp	r0, #10
 801462a:	d001      	beq.n	8014630 <rcl_publisher_init+0x12c>
 801462c:	2401      	movs	r4, #1
 801462e:	e7d3      	b.n	80145d8 <rcl_publisher_init+0xd4>
 8014630:	240a      	movs	r4, #10
 8014632:	e7d1      	b.n	80145d8 <rcl_publisher_init+0xd4>
 8014634:	2467      	movs	r4, #103	; 0x67
 8014636:	e7cf      	b.n	80145d8 <rcl_publisher_init+0xd4>

08014638 <rcl_publisher_get_default_options>:
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	4d14      	ldr	r5, [pc, #80]	; (801468c <rcl_publisher_get_default_options+0x54>)
 801463c:	b088      	sub	sp, #32
 801463e:	4604      	mov	r4, r0
 8014640:	2250      	movs	r2, #80	; 0x50
 8014642:	4913      	ldr	r1, [pc, #76]	; (8014690 <rcl_publisher_get_default_options+0x58>)
 8014644:	4628      	mov	r0, r5
 8014646:	f00c fd8a 	bl	802115e <memcpy>
 801464a:	a802      	add	r0, sp, #8
 801464c:	f001 f806 	bl	801565c <rcutils_get_default_allocator>
 8014650:	f10d 0c08 	add.w	ip, sp, #8
 8014654:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8014658:	466e      	mov	r6, sp
 801465a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801465e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014662:	f8dc 3000 	ldr.w	r3, [ip]
 8014666:	4630      	mov	r0, r6
 8014668:	f8ce 3000 	str.w	r3, [lr]
 801466c:	f001 f8a0 	bl	80157b0 <rmw_get_default_publisher_options>
 8014670:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8014674:	2270      	movs	r2, #112	; 0x70
 8014676:	e896 0003 	ldmia.w	r6, {r0, r1}
 801467a:	e883 0003 	stmia.w	r3, {r0, r1}
 801467e:	4629      	mov	r1, r5
 8014680:	4620      	mov	r0, r4
 8014682:	f00c fd6c 	bl	802115e <memcpy>
 8014686:	4620      	mov	r0, r4
 8014688:	b008      	add	sp, #32
 801468a:	bd70      	pop	{r4, r5, r6, pc}
 801468c:	20012b38 	.word	0x20012b38
 8014690:	08022598 	.word	0x08022598

08014694 <rcl_publish>:
 8014694:	b1f8      	cbz	r0, 80146d6 <rcl_publish+0x42>
 8014696:	6803      	ldr	r3, [r0, #0]
 8014698:	b570      	push	{r4, r5, r6, lr}
 801469a:	4604      	mov	r4, r0
 801469c:	b1b3      	cbz	r3, 80146cc <rcl_publish+0x38>
 801469e:	4616      	mov	r6, r2
 80146a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80146a4:	b192      	cbz	r2, 80146cc <rcl_publish+0x38>
 80146a6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80146aa:	460d      	mov	r5, r1
 80146ac:	f006 fb58 	bl	801ad60 <rcl_context_is_valid>
 80146b0:	b160      	cbz	r0, 80146cc <rcl_publish+0x38>
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80146b8:	b140      	cbz	r0, 80146cc <rcl_publish+0x38>
 80146ba:	b155      	cbz	r5, 80146d2 <rcl_publish+0x3e>
 80146bc:	4632      	mov	r2, r6
 80146be:	4629      	mov	r1, r5
 80146c0:	f001 fc58 	bl	8015f74 <rmw_publish>
 80146c4:	3800      	subs	r0, #0
 80146c6:	bf18      	it	ne
 80146c8:	2001      	movne	r0, #1
 80146ca:	bd70      	pop	{r4, r5, r6, pc}
 80146cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80146d0:	bd70      	pop	{r4, r5, r6, pc}
 80146d2:	200b      	movs	r0, #11
 80146d4:	bd70      	pop	{r4, r5, r6, pc}
 80146d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80146da:	4770      	bx	lr

080146dc <rcl_publisher_is_valid>:
 80146dc:	b1a0      	cbz	r0, 8014708 <rcl_publisher_is_valid+0x2c>
 80146de:	6803      	ldr	r3, [r0, #0]
 80146e0:	b510      	push	{r4, lr}
 80146e2:	4604      	mov	r4, r0
 80146e4:	b173      	cbz	r3, 8014704 <rcl_publisher_is_valid+0x28>
 80146e6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80146ea:	b15a      	cbz	r2, 8014704 <rcl_publisher_is_valid+0x28>
 80146ec:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80146f0:	f006 fb36 	bl	801ad60 <rcl_context_is_valid>
 80146f4:	b130      	cbz	r0, 8014704 <rcl_publisher_is_valid+0x28>
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80146fc:	3800      	subs	r0, #0
 80146fe:	bf18      	it	ne
 8014700:	2001      	movne	r0, #1
 8014702:	bd10      	pop	{r4, pc}
 8014704:	2000      	movs	r0, #0
 8014706:	bd10      	pop	{r4, pc}
 8014708:	2000      	movs	r0, #0
 801470a:	4770      	bx	lr

0801470c <rcl_publisher_is_valid_except_context>:
 801470c:	b130      	cbz	r0, 801471c <rcl_publisher_is_valid_except_context+0x10>
 801470e:	6800      	ldr	r0, [r0, #0]
 8014710:	b120      	cbz	r0, 801471c <rcl_publisher_is_valid_except_context+0x10>
 8014712:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8014716:	3800      	subs	r0, #0
 8014718:	bf18      	it	ne
 801471a:	2001      	movne	r0, #1
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop

08014720 <_rclc_check_for_new_data>:
 8014720:	2800      	cmp	r0, #0
 8014722:	d046      	beq.n	80147b2 <_rclc_check_for_new_data+0x92>
 8014724:	4603      	mov	r3, r0
 8014726:	b530      	push	{r4, r5, lr}
 8014728:	7802      	ldrb	r2, [r0, #0]
 801472a:	b085      	sub	sp, #20
 801472c:	2a0a      	cmp	r2, #10
 801472e:	d842      	bhi.n	80147b6 <_rclc_check_for_new_data+0x96>
 8014730:	e8df f002 	tbb	[pc, r2]
 8014734:	14181212 	.word	0x14181212
 8014738:	06060614 	.word	0x06060614
 801473c:	2e1a      	.short	0x2e1a
 801473e:	16          	.byte	0x16
 801473f:	00          	.byte	0x00
 8014740:	6a0a      	ldr	r2, [r1, #32]
 8014742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014744:	2000      	movs	r0, #0
 8014746:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801474a:	1a12      	subs	r2, r2, r0
 801474c:	bf18      	it	ne
 801474e:	2201      	movne	r2, #1
 8014750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014754:	b005      	add	sp, #20
 8014756:	bd30      	pop	{r4, r5, pc}
 8014758:	680a      	ldr	r2, [r1, #0]
 801475a:	e7f2      	b.n	8014742 <_rclc_check_for_new_data+0x22>
 801475c:	698a      	ldr	r2, [r1, #24]
 801475e:	e7f0      	b.n	8014742 <_rclc_check_for_new_data+0x22>
 8014760:	688a      	ldr	r2, [r1, #8]
 8014762:	e7ee      	b.n	8014742 <_rclc_check_for_new_data+0x22>
 8014764:	690a      	ldr	r2, [r1, #16]
 8014766:	e7ec      	b.n	8014742 <_rclc_check_for_new_data+0x22>
 8014768:	685c      	ldr	r4, [r3, #4]
 801476a:	4608      	mov	r0, r1
 801476c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014778:	f104 0110 	add.w	r1, r4, #16
 801477c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014780:	9500      	str	r5, [sp, #0]
 8014782:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8014786:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801478a:	f008 fd2d 	bl	801d1e8 <rcl_action_client_wait_set_get_entities_ready>
 801478e:	e7e1      	b.n	8014754 <_rclc_check_for_new_data+0x34>
 8014790:	685c      	ldr	r4, [r3, #4]
 8014792:	4608      	mov	r0, r1
 8014794:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8014798:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801479c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80147a0:	e9cd 2100 	strd	r2, r1, [sp]
 80147a4:	f104 0220 	add.w	r2, r4, #32
 80147a8:	f104 0110 	add.w	r1, r4, #16
 80147ac:	f008 ff34 	bl	801d618 <rcl_action_server_wait_set_get_entities_ready>
 80147b0:	e7d0      	b.n	8014754 <_rclc_check_for_new_data+0x34>
 80147b2:	200b      	movs	r0, #11
 80147b4:	4770      	bx	lr
 80147b6:	2001      	movs	r0, #1
 80147b8:	e7cc      	b.n	8014754 <_rclc_check_for_new_data+0x34>
 80147ba:	bf00      	nop

080147bc <_rclc_take_new_data>:
 80147bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147be:	b09b      	sub	sp, #108	; 0x6c
 80147c0:	2800      	cmp	r0, #0
 80147c2:	f000 8088 	beq.w	80148d6 <_rclc_take_new_data+0x11a>
 80147c6:	7803      	ldrb	r3, [r0, #0]
 80147c8:	4604      	mov	r4, r0
 80147ca:	2b0a      	cmp	r3, #10
 80147cc:	f200 8167 	bhi.w	8014a9e <_rclc_take_new_data+0x2e2>
 80147d0:	e8df f003 	tbb	[pc, r3]
 80147d4:	44152d2d 	.word	0x44152d2d
 80147d8:	19191944 	.word	0x19191944
 80147dc:	065a      	.short	0x065a
 80147de:	15          	.byte	0x15
 80147df:	00          	.byte	0x00
 80147e0:	6840      	ldr	r0, [r0, #4]
 80147e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	f040 80b2 	bne.w	8014950 <_rclc_take_new_data+0x194>
 80147ec:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f040 80e4 	bne.w	80149be <_rclc_take_new_data+0x202>
 80147f6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d16f      	bne.n	80148de <_rclc_take_new_data+0x122>
 80147fe:	2500      	movs	r5, #0
 8014800:	4628      	mov	r0, r5
 8014802:	b01b      	add	sp, #108	; 0x6c
 8014804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014806:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014808:	6a0b      	ldr	r3, [r1, #32]
 801480a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d0f5      	beq.n	80147fe <_rclc_take_new_data+0x42>
 8014812:	6882      	ldr	r2, [r0, #8]
 8014814:	f100 0110 	add.w	r1, r0, #16
 8014818:	6840      	ldr	r0, [r0, #4]
 801481a:	f006 ff83 	bl	801b724 <rcl_take_request>
 801481e:	4605      	mov	r5, r0
 8014820:	2800      	cmp	r0, #0
 8014822:	d0ec      	beq.n	80147fe <_rclc_take_new_data+0x42>
 8014824:	f240 2359 	movw	r3, #601	; 0x259
 8014828:	4298      	cmp	r0, r3
 801482a:	d013      	beq.n	8014854 <_rclc_take_new_data+0x98>
 801482c:	e029      	b.n	8014882 <_rclc_take_new_data+0xc6>
 801482e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014830:	680b      	ldr	r3, [r1, #0]
 8014832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d0e1      	beq.n	80147fe <_rclc_take_new_data+0x42>
 801483a:	2300      	movs	r3, #0
 801483c:	aa0a      	add	r2, sp, #40	; 0x28
 801483e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8014842:	f007 f8b3 	bl	801b9ac <rcl_take>
 8014846:	4605      	mov	r5, r0
 8014848:	2800      	cmp	r0, #0
 801484a:	d0d9      	beq.n	8014800 <_rclc_take_new_data+0x44>
 801484c:	f240 1391 	movw	r3, #401	; 0x191
 8014850:	4298      	cmp	r0, r3
 8014852:	d116      	bne.n	8014882 <_rclc_take_new_data+0xc6>
 8014854:	2300      	movs	r3, #0
 8014856:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801485a:	e7d1      	b.n	8014800 <_rclc_take_new_data+0x44>
 801485c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801485e:	698b      	ldr	r3, [r1, #24]
 8014860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d0ca      	beq.n	80147fe <_rclc_take_new_data+0x42>
 8014868:	6882      	ldr	r2, [r0, #8]
 801486a:	f100 0110 	add.w	r1, r0, #16
 801486e:	6840      	ldr	r0, [r0, #4]
 8014870:	f006 fa06 	bl	801ac80 <rcl_take_response>
 8014874:	4605      	mov	r5, r0
 8014876:	2800      	cmp	r0, #0
 8014878:	d0c1      	beq.n	80147fe <_rclc_take_new_data+0x42>
 801487a:	f240 13f5 	movw	r3, #501	; 0x1f5
 801487e:	4298      	cmp	r0, r3
 8014880:	d0be      	beq.n	8014800 <_rclc_take_new_data+0x44>
 8014882:	f000 ff1d 	bl	80156c0 <rcutils_reset_error>
 8014886:	e7bb      	b.n	8014800 <_rclc_take_new_data+0x44>
 8014888:	6840      	ldr	r0, [r0, #4]
 801488a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801488e:	2b00      	cmp	r3, #0
 8014890:	d17d      	bne.n	801498e <_rclc_take_new_data+0x1d2>
 8014892:	69c3      	ldr	r3, [r0, #28]
 8014894:	b11b      	cbz	r3, 801489e <_rclc_take_new_data+0xe2>
 8014896:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801489a:	2b00      	cmp	r3, #0
 801489c:	d144      	bne.n	8014928 <_rclc_take_new_data+0x16c>
 801489e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	f040 80ac 	bne.w	8014a00 <_rclc_take_new_data+0x244>
 80148a8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d0a6      	beq.n	80147fe <_rclc_take_new_data+0x42>
 80148b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80148b2:	a90a      	add	r1, sp, #40	; 0x28
 80148b4:	3010      	adds	r0, #16
 80148b6:	f008 fb6f 	bl	801cf98 <rcl_action_take_result_response>
 80148ba:	4605      	mov	r5, r0
 80148bc:	2800      	cmp	r0, #0
 80148be:	d1e0      	bne.n	8014882 <_rclc_take_new_data+0xc6>
 80148c0:	6860      	ldr	r0, [r4, #4]
 80148c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80148c6:	f008 ffd7 	bl	801d878 <rclc_action_find_handle_by_result_request_sequence_number>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d098      	beq.n	8014800 <_rclc_take_new_data+0x44>
 80148ce:	2301      	movs	r3, #1
 80148d0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80148d4:	e794      	b.n	8014800 <_rclc_take_new_data+0x44>
 80148d6:	250b      	movs	r5, #11
 80148d8:	4628      	mov	r0, r5
 80148da:	b01b      	add	sp, #108	; 0x6c
 80148dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148de:	ae04      	add	r6, sp, #16
 80148e0:	3010      	adds	r0, #16
 80148e2:	aa0a      	add	r2, sp, #40	; 0x28
 80148e4:	4631      	mov	r1, r6
 80148e6:	f008 fdcb 	bl	801d480 <rcl_action_take_cancel_request>
 80148ea:	4605      	mov	r5, r0
 80148ec:	2800      	cmp	r0, #0
 80148ee:	d1c8      	bne.n	8014882 <_rclc_take_new_data+0xc6>
 80148f0:	a90a      	add	r1, sp, #40	; 0x28
 80148f2:	6860      	ldr	r0, [r4, #4]
 80148f4:	f008 ff80 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 80148f8:	4607      	mov	r7, r0
 80148fa:	2800      	cmp	r0, #0
 80148fc:	f000 80bb 	beq.w	8014a76 <_rclc_take_new_data+0x2ba>
 8014900:	2101      	movs	r1, #1
 8014902:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014906:	f008 ff01 	bl	801d70c <rcl_action_transition_goal_state>
 801490a:	2803      	cmp	r0, #3
 801490c:	4684      	mov	ip, r0
 801490e:	f040 80a7 	bne.w	8014a60 <_rclc_take_new_data+0x2a4>
 8014912:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8014916:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801491a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801491e:	e884 0003 	stmia.w	r4, {r0, r1}
 8014922:	f887 c008 	strb.w	ip, [r7, #8]
 8014926:	e76b      	b.n	8014800 <_rclc_take_new_data+0x44>
 8014928:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801492a:	3010      	adds	r0, #16
 801492c:	f008 fbb4 	bl	801d098 <rcl_action_take_feedback>
 8014930:	4605      	mov	r5, r0
 8014932:	2800      	cmp	r0, #0
 8014934:	d1a5      	bne.n	8014882 <_rclc_take_new_data+0xc6>
 8014936:	6860      	ldr	r0, [r4, #4]
 8014938:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801493a:	f008 ff5d 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 801493e:	4603      	mov	r3, r0
 8014940:	2800      	cmp	r0, #0
 8014942:	f000 80a3 	beq.w	8014a8c <_rclc_take_new_data+0x2d0>
 8014946:	2201      	movs	r2, #1
 8014948:	6860      	ldr	r0, [r4, #4]
 801494a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 801494e:	e7a6      	b.n	801489e <_rclc_take_new_data+0xe2>
 8014950:	f008 ff2c 	bl	801d7ac <rclc_action_take_goal_handle>
 8014954:	4606      	mov	r6, r0
 8014956:	6860      	ldr	r0, [r4, #4]
 8014958:	2e00      	cmp	r6, #0
 801495a:	f43f af47 	beq.w	80147ec <_rclc_take_new_data+0x30>
 801495e:	6070      	str	r0, [r6, #4]
 8014960:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014964:	69f2      	ldr	r2, [r6, #28]
 8014966:	3010      	adds	r0, #16
 8014968:	f008 fcd4 	bl	801d314 <rcl_action_take_goal_request>
 801496c:	4605      	mov	r5, r0
 801496e:	2800      	cmp	r0, #0
 8014970:	f040 808e 	bne.w	8014a90 <_rclc_take_new_data+0x2d4>
 8014974:	69f7      	ldr	r7, [r6, #28]
 8014976:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014978:	7235      	strb	r5, [r6, #8]
 801497a:	f8c6 0009 	str.w	r0, [r6, #9]
 801497e:	f8c6 100d 	str.w	r1, [r6, #13]
 8014982:	6860      	ldr	r0, [r4, #4]
 8014984:	f8c6 2011 	str.w	r2, [r6, #17]
 8014988:	f8c6 3015 	str.w	r3, [r6, #21]
 801498c:	e72e      	b.n	80147ec <_rclc_take_new_data+0x30>
 801498e:	aa04      	add	r2, sp, #16
 8014990:	a90a      	add	r1, sp, #40	; 0x28
 8014992:	3010      	adds	r0, #16
 8014994:	f008 fa88 	bl	801cea8 <rcl_action_take_goal_response>
 8014998:	4605      	mov	r5, r0
 801499a:	2800      	cmp	r0, #0
 801499c:	f47f af71 	bne.w	8014882 <_rclc_take_new_data+0xc6>
 80149a0:	6860      	ldr	r0, [r4, #4]
 80149a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80149a6:	f008 ff55 	bl	801d854 <rclc_action_find_handle_by_goal_request_sequence_number>
 80149aa:	b130      	cbz	r0, 80149ba <_rclc_take_new_data+0x1fe>
 80149ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80149b0:	2201      	movs	r2, #1
 80149b2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80149b6:	f880 2020 	strb.w	r2, [r0, #32]
 80149ba:	6860      	ldr	r0, [r4, #4]
 80149bc:	e769      	b.n	8014892 <_rclc_take_new_data+0xd6>
 80149be:	3010      	adds	r0, #16
 80149c0:	aa04      	add	r2, sp, #16
 80149c2:	a90a      	add	r1, sp, #40	; 0x28
 80149c4:	f008 fd1c 	bl	801d400 <rcl_action_take_result_request>
 80149c8:	4605      	mov	r5, r0
 80149ca:	2800      	cmp	r0, #0
 80149cc:	f47f af59 	bne.w	8014882 <_rclc_take_new_data+0xc6>
 80149d0:	a904      	add	r1, sp, #16
 80149d2:	6860      	ldr	r0, [r4, #4]
 80149d4:	f008 ff10 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 80149d8:	4607      	mov	r7, r0
 80149da:	b160      	cbz	r0, 80149f6 <_rclc_take_new_data+0x23a>
 80149dc:	ad0a      	add	r5, sp, #40	; 0x28
 80149de:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80149e2:	f04f 0c02 	mov.w	ip, #2
 80149e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80149ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80149ee:	e886 0003 	stmia.w	r6, {r0, r1}
 80149f2:	f887 c008 	strb.w	ip, [r7, #8]
 80149f6:	6860      	ldr	r0, [r4, #4]
 80149f8:	2300      	movs	r3, #0
 80149fa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80149fe:	e6fa      	b.n	80147f6 <_rclc_take_new_data+0x3a>
 8014a00:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014a04:	a90a      	add	r1, sp, #40	; 0x28
 8014a06:	3010      	adds	r0, #16
 8014a08:	f008 fb06 	bl	801d018 <rcl_action_take_cancel_response>
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	f47f af37 	bne.w	8014882 <_rclc_take_new_data+0xc6>
 8014a14:	6860      	ldr	r0, [r4, #4]
 8014a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014a1a:	f008 ff3f 	bl	801d89c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014a1e:	4606      	mov	r6, r0
 8014a20:	6860      	ldr	r0, [r4, #4]
 8014a22:	2e00      	cmp	r6, #0
 8014a24:	f43f af40 	beq.w	80148a8 <_rclc_take_new_data+0xec>
 8014a28:	2701      	movs	r7, #1
 8014a2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014a2c:	84b7      	strh	r7, [r6, #36]	; 0x24
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f43f af3a 	beq.w	80148a8 <_rclc_take_new_data+0xec>
 8014a34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014a36:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014a3a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014a3e:	f008 fedb 	bl	801d7f8 <rclc_action_find_goal_handle_by_uuid>
 8014a42:	b138      	cbz	r0, 8014a54 <_rclc_take_new_data+0x298>
 8014a44:	6860      	ldr	r0, [r4, #4]
 8014a46:	3501      	adds	r5, #1
 8014a48:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8014a4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014a4e:	42ab      	cmp	r3, r5
 8014a50:	d8f0      	bhi.n	8014a34 <_rclc_take_new_data+0x278>
 8014a52:	e729      	b.n	80148a8 <_rclc_take_new_data+0xec>
 8014a54:	6860      	ldr	r0, [r4, #4]
 8014a56:	3501      	adds	r5, #1
 8014a58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014a5a:	42ab      	cmp	r3, r5
 8014a5c:	d8ea      	bhi.n	8014a34 <_rclc_take_new_data+0x278>
 8014a5e:	e723      	b.n	80148a8 <_rclc_take_new_data+0xec>
 8014a60:	ab06      	add	r3, sp, #24
 8014a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a64:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a68:	2103      	movs	r1, #3
 8014a6a:	6860      	ldr	r0, [r4, #4]
 8014a6c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a70:	f008 ff8a 	bl	801d988 <rclc_action_server_goal_cancel_reject>
 8014a74:	e6c4      	b.n	8014800 <_rclc_take_new_data+0x44>
 8014a76:	ab06      	add	r3, sp, #24
 8014a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a7e:	2102      	movs	r1, #2
 8014a80:	6860      	ldr	r0, [r4, #4]
 8014a82:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a86:	f008 ff7f 	bl	801d988 <rclc_action_server_goal_cancel_reject>
 8014a8a:	e6b9      	b.n	8014800 <_rclc_take_new_data+0x44>
 8014a8c:	6860      	ldr	r0, [r4, #4]
 8014a8e:	e706      	b.n	801489e <_rclc_take_new_data+0xe2>
 8014a90:	4631      	mov	r1, r6
 8014a92:	6860      	ldr	r0, [r4, #4]
 8014a94:	f008 fe9a 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014a98:	f000 fe12 	bl	80156c0 <rcutils_reset_error>
 8014a9c:	e6b0      	b.n	8014800 <_rclc_take_new_data+0x44>
 8014a9e:	2501      	movs	r5, #1
 8014aa0:	e6ae      	b.n	8014800 <_rclc_take_new_data+0x44>
 8014aa2:	bf00      	nop

08014aa4 <_rclc_execute.part.0>:
 8014aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aa6:	7803      	ldrb	r3, [r0, #0]
 8014aa8:	b085      	sub	sp, #20
 8014aaa:	4604      	mov	r4, r0
 8014aac:	2b0a      	cmp	r3, #10
 8014aae:	f200 8139 	bhi.w	8014d24 <_rclc_execute.part.0+0x280>
 8014ab2:	e8df f003 	tbb	[pc, r3]
 8014ab6:	4268      	.short	0x4268
 8014ab8:	06a75b4d 	.word	0x06a75b4d
 8014abc:	721d0606 	.word	0x721d0606
 8014ac0:	62          	.byte	0x62
 8014ac1:	00          	.byte	0x00
 8014ac2:	2b06      	cmp	r3, #6
 8014ac4:	f000 8126 	beq.w	8014d14 <_rclc_execute.part.0+0x270>
 8014ac8:	2b07      	cmp	r3, #7
 8014aca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014acc:	f040 811c 	bne.w	8014d08 <_rclc_execute.part.0+0x264>
 8014ad0:	f104 0510 	add.w	r5, r4, #16
 8014ad4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8014ad8:	6880      	ldr	r0, [r0, #8]
 8014ada:	4798      	blx	r3
 8014adc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014ade:	4629      	mov	r1, r5
 8014ae0:	6860      	ldr	r0, [r4, #4]
 8014ae2:	f006 fe5f 	bl	801b7a4 <rcl_send_response>
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	b378      	cbz	r0, 8014b4a <_rclc_execute.part.0+0xa6>
 8014aea:	f000 fde9 	bl	80156c0 <rcutils_reset_error>
 8014aee:	e02c      	b.n	8014b4a <_rclc_execute.part.0+0xa6>
 8014af0:	6840      	ldr	r0, [r0, #4]
 8014af2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	f000 808e 	beq.w	8014c18 <_rclc_execute.part.0+0x174>
 8014afc:	2600      	movs	r6, #0
 8014afe:	2701      	movs	r7, #1
 8014b00:	e004      	b.n	8014b0c <_rclc_execute.part.0+0x68>
 8014b02:	f008 fe2d 	bl	801d760 <rclc_action_send_result_request>
 8014b06:	b998      	cbnz	r0, 8014b30 <_rclc_execute.part.0+0x8c>
 8014b08:	722f      	strb	r7, [r5, #8]
 8014b0a:	6860      	ldr	r0, [r4, #4]
 8014b0c:	f008 fed8 	bl	801d8c0 <rclc_action_find_first_handle_with_goal_response>
 8014b10:	4605      	mov	r5, r0
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d07f      	beq.n	8014c16 <_rclc_execute.part.0+0x172>
 8014b16:	6863      	ldr	r3, [r4, #4]
 8014b18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014b1a:	699b      	ldr	r3, [r3, #24]
 8014b1c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8014b20:	f885 6020 	strb.w	r6, [r5, #32]
 8014b24:	4798      	blx	r3
 8014b26:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d1e8      	bne.n	8014b02 <_rclc_execute.part.0+0x5e>
 8014b30:	6860      	ldr	r0, [r4, #4]
 8014b32:	4629      	mov	r1, r5
 8014b34:	f008 fe4a 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014b38:	e7e7      	b.n	8014b0a <_rclc_execute.part.0+0x66>
 8014b3a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8014b3e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8014b42:	b100      	cbz	r0, 8014b46 <_rclc_execute.part.0+0xa2>
 8014b44:	68a0      	ldr	r0, [r4, #8]
 8014b46:	2400      	movs	r4, #0
 8014b48:	4798      	blx	r3
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	b005      	add	sp, #20
 8014b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b50:	6840      	ldr	r0, [r0, #4]
 8014b52:	f007 fa5f 	bl	801c014 <rcl_timer_call>
 8014b56:	f240 3321 	movw	r3, #801	; 0x321
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	4298      	cmp	r0, r3
 8014b5e:	d001      	beq.n	8014b64 <_rclc_execute.part.0+0xc0>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d1c2      	bne.n	8014aea <_rclc_execute.part.0+0x46>
 8014b64:	2400      	movs	r4, #0
 8014b66:	4620      	mov	r0, r4
 8014b68:	b005      	add	sp, #20
 8014b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b6c:	2400      	movs	r4, #0
 8014b6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014b70:	6880      	ldr	r0, [r0, #8]
 8014b72:	4798      	blx	r3
 8014b74:	4620      	mov	r0, r4
 8014b76:	b005      	add	sp, #20
 8014b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b7a:	2400      	movs	r4, #0
 8014b7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014b7e:	4798      	blx	r3
 8014b80:	4620      	mov	r0, r4
 8014b82:	b005      	add	sp, #20
 8014b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b86:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8014b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014b8c:	b100      	cbz	r0, 8014b90 <_rclc_execute.part.0+0xec>
 8014b8e:	68a0      	ldr	r0, [r4, #8]
 8014b90:	2400      	movs	r4, #0
 8014b92:	4798      	blx	r3
 8014b94:	4620      	mov	r0, r4
 8014b96:	b005      	add	sp, #20
 8014b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b9a:	6840      	ldr	r0, [r0, #4]
 8014b9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014ba0:	bb3b      	cbnz	r3, 8014bf2 <_rclc_execute.part.0+0x14e>
 8014ba2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d07d      	beq.n	8014ca6 <_rclc_execute.part.0+0x202>
 8014baa:	f640 0634 	movw	r6, #2100	; 0x834
 8014bae:	2701      	movs	r7, #1
 8014bb0:	e007      	b.n	8014bc2 <_rclc_execute.part.0+0x11e>
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f008 fe9c 	bl	801d8f0 <rclc_action_server_response_goal_request>
 8014bb8:	4629      	mov	r1, r5
 8014bba:	6860      	ldr	r0, [r4, #4]
 8014bbc:	f008 fe06 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014bc0:	6860      	ldr	r0, [r4, #4]
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	f008 fe2e 	bl	801d824 <rclc_action_find_first_handle_by_status>
 8014bc8:	4605      	mov	r5, r0
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d068      	beq.n	8014ca0 <_rclc_execute.part.0+0x1fc>
 8014bce:	6863      	ldr	r3, [r4, #4]
 8014bd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014bd2:	699b      	ldr	r3, [r3, #24]
 8014bd4:	4798      	blx	r3
 8014bd6:	42b0      	cmp	r0, r6
 8014bd8:	f04f 0100 	mov.w	r1, #0
 8014bdc:	d1e9      	bne.n	8014bb2 <_rclc_execute.part.0+0x10e>
 8014bde:	2101      	movs	r1, #1
 8014be0:	4628      	mov	r0, r5
 8014be2:	f008 fe85 	bl	801d8f0 <rclc_action_server_response_goal_request>
 8014be6:	722f      	strb	r7, [r5, #8]
 8014be8:	e7ea      	b.n	8014bc0 <_rclc_execute.part.0+0x11c>
 8014bea:	6848      	ldr	r0, [r1, #4]
 8014bec:	f008 fdee 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014bf0:	6860      	ldr	r0, [r4, #4]
 8014bf2:	f008 fe23 	bl	801d83c <rclc_action_find_first_terminated_handle>
 8014bf6:	4601      	mov	r1, r0
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d1f6      	bne.n	8014bea <_rclc_execute.part.0+0x146>
 8014bfc:	6860      	ldr	r0, [r4, #4]
 8014bfe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8014c02:	e7ce      	b.n	8014ba2 <_rclc_execute.part.0+0xfe>
 8014c04:	2400      	movs	r4, #0
 8014c06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014c08:	f100 0110 	add.w	r1, r0, #16
 8014c0c:	6880      	ldr	r0, [r0, #8]
 8014c0e:	4798      	blx	r3
 8014c10:	4620      	mov	r0, r4
 8014c12:	b005      	add	sp, #20
 8014c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c16:	6860      	ldr	r0, [r4, #4]
 8014c18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014c1c:	b18b      	cbz	r3, 8014c42 <_rclc_execute.part.0+0x19e>
 8014c1e:	68c5      	ldr	r5, [r0, #12]
 8014c20:	b32d      	cbz	r5, 8014c6e <_rclc_execute.part.0+0x1ca>
 8014c22:	2600      	movs	r6, #0
 8014c24:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8014c28:	b143      	cbz	r3, 8014c3c <_rclc_execute.part.0+0x198>
 8014c2a:	69c3      	ldr	r3, [r0, #28]
 8014c2c:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8014c30:	b123      	cbz	r3, 8014c3c <_rclc_execute.part.0+0x198>
 8014c32:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014c34:	4628      	mov	r0, r5
 8014c36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014c38:	4798      	blx	r3
 8014c3a:	6860      	ldr	r0, [r4, #4]
 8014c3c:	682d      	ldr	r5, [r5, #0]
 8014c3e:	2d00      	cmp	r5, #0
 8014c40:	d1f0      	bne.n	8014c24 <_rclc_execute.part.0+0x180>
 8014c42:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014c46:	b193      	cbz	r3, 8014c6e <_rclc_execute.part.0+0x1ca>
 8014c48:	68c5      	ldr	r5, [r0, #12]
 8014c4a:	b185      	cbz	r5, 8014c6e <_rclc_execute.part.0+0x1ca>
 8014c4c:	2600      	movs	r6, #0
 8014c4e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8014c52:	b14b      	cbz	r3, 8014c68 <_rclc_execute.part.0+0x1c4>
 8014c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014c56:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8014c5a:	b12b      	cbz	r3, 8014c68 <_rclc_execute.part.0+0x1c4>
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8014c62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014c64:	4798      	blx	r3
 8014c66:	6860      	ldr	r0, [r4, #4]
 8014c68:	682d      	ldr	r5, [r5, #0]
 8014c6a:	2d00      	cmp	r5, #0
 8014c6c:	d1ef      	bne.n	8014c4e <_rclc_execute.part.0+0x1aa>
 8014c6e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	f43f af76 	beq.w	8014b64 <_rclc_execute.part.0+0xc0>
 8014c78:	2700      	movs	r7, #0
 8014c7a:	e00b      	b.n	8014c94 <_rclc_execute.part.0+0x1f0>
 8014c7c:	6863      	ldr	r3, [r4, #4]
 8014c7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014c82:	6a1e      	ldr	r6, [r3, #32]
 8014c84:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8014c88:	47b0      	blx	r6
 8014c8a:	6860      	ldr	r0, [r4, #4]
 8014c8c:	4629      	mov	r1, r5
 8014c8e:	f008 fd9d 	bl	801d7cc <rclc_action_remove_used_goal_handle>
 8014c92:	6860      	ldr	r0, [r4, #4]
 8014c94:	f008 fe20 	bl	801d8d8 <rclc_action_find_first_handle_with_result_response>
 8014c98:	4605      	mov	r5, r0
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d1ee      	bne.n	8014c7c <_rclc_execute.part.0+0x1d8>
 8014c9e:	e761      	b.n	8014b64 <_rclc_execute.part.0+0xc0>
 8014ca0:	6860      	ldr	r0, [r4, #4]
 8014ca2:	f880 5020 	strb.w	r5, [r0, #32]
 8014ca6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f43f af5a 	beq.w	8014b64 <_rclc_execute.part.0+0xc0>
 8014cb0:	68c5      	ldr	r5, [r0, #12]
 8014cb2:	b1b5      	cbz	r5, 8014ce2 <_rclc_execute.part.0+0x23e>
 8014cb4:	2602      	movs	r6, #2
 8014cb6:	e001      	b.n	8014cbc <_rclc_execute.part.0+0x218>
 8014cb8:	682d      	ldr	r5, [r5, #0]
 8014cba:	b195      	cbz	r5, 8014ce2 <_rclc_execute.part.0+0x23e>
 8014cbc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014cc0:	2b03      	cmp	r3, #3
 8014cc2:	d1f9      	bne.n	8014cb8 <_rclc_execute.part.0+0x214>
 8014cc4:	69c3      	ldr	r3, [r0, #28]
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014cca:	4798      	blx	r3
 8014ccc:	4603      	mov	r3, r0
 8014cce:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014cd8:	b143      	cbz	r3, 8014cec <_rclc_execute.part.0+0x248>
 8014cda:	f008 fe29 	bl	801d930 <rclc_action_server_goal_cancel_accept>
 8014cde:	6860      	ldr	r0, [r4, #4]
 8014ce0:	e7ea      	b.n	8014cb8 <_rclc_execute.part.0+0x214>
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	461c      	mov	r4, r3
 8014ce6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8014cea:	e72e      	b.n	8014b4a <_rclc_execute.part.0+0xa6>
 8014cec:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014cee:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8014cf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014cf6:	2101      	movs	r1, #1
 8014cf8:	6860      	ldr	r0, [r4, #4]
 8014cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014cfe:	f008 fe43 	bl	801d988 <rclc_action_server_goal_cancel_reject>
 8014d02:	722e      	strb	r6, [r5, #8]
 8014d04:	6860      	ldr	r0, [r4, #4]
 8014d06:	e7d7      	b.n	8014cb8 <_rclc_execute.part.0+0x214>
 8014d08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014d0a:	f104 0510 	add.w	r5, r4, #16
 8014d0e:	6880      	ldr	r0, [r0, #8]
 8014d10:	4798      	blx	r3
 8014d12:	e6e3      	b.n	8014adc <_rclc_execute.part.0+0x38>
 8014d14:	f100 0510 	add.w	r5, r0, #16
 8014d18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014d1a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014d1c:	4629      	mov	r1, r5
 8014d1e:	6880      	ldr	r0, [r0, #8]
 8014d20:	4798      	blx	r3
 8014d22:	e6db      	b.n	8014adc <_rclc_execute.part.0+0x38>
 8014d24:	2401      	movs	r4, #1
 8014d26:	e710      	b.n	8014b4a <_rclc_execute.part.0+0xa6>

08014d28 <rclc_executor_trigger_any>:
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	d03d      	beq.n	8014da8 <rclc_executor_trigger_any+0x80>
 8014d2c:	2900      	cmp	r1, #0
 8014d2e:	d03c      	beq.n	8014daa <rclc_executor_trigger_any+0x82>
 8014d30:	4603      	mov	r3, r0
 8014d32:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8014d36:	2200      	movs	r2, #0
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	d035      	beq.n	8014da8 <rclc_executor_trigger_any+0x80>
 8014d3c:	b430      	push	{r4, r5}
 8014d3e:	f893 c000 	ldrb.w	ip, [r3]
 8014d42:	f1bc 0f08 	cmp.w	ip, #8
 8014d46:	d11d      	bne.n	8014d84 <rclc_executor_trigger_any+0x5c>
 8014d48:	685c      	ldr	r4, [r3, #4]
 8014d4a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014d4c:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8014d50:	d105      	bne.n	8014d5e <rclc_executor_trigger_any+0x36>
 8014d52:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8014d56:	b910      	cbnz	r0, 8014d5e <rclc_executor_trigger_any+0x36>
 8014d58:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8014d5c:	b128      	cbz	r0, 8014d6a <rclc_executor_trigger_any+0x42>
 8014d5e:	bc30      	pop	{r4, r5}
 8014d60:	4770      	bx	lr
 8014d62:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d1f9      	bne.n	8014d5e <rclc_executor_trigger_any+0x36>
 8014d6a:	3201      	adds	r2, #1
 8014d6c:	3340      	adds	r3, #64	; 0x40
 8014d6e:	4291      	cmp	r1, r2
 8014d70:	d017      	beq.n	8014da2 <rclc_executor_trigger_any+0x7a>
 8014d72:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d0f1      	beq.n	8014d5e <rclc_executor_trigger_any+0x36>
 8014d7a:	f893 c000 	ldrb.w	ip, [r3]
 8014d7e:	f1bc 0f08 	cmp.w	ip, #8
 8014d82:	d0e1      	beq.n	8014d48 <rclc_executor_trigger_any+0x20>
 8014d84:	f1bc 0f09 	cmp.w	ip, #9
 8014d88:	d1eb      	bne.n	8014d62 <rclc_executor_trigger_any+0x3a>
 8014d8a:	685c      	ldr	r4, [r3, #4]
 8014d8c:	6a25      	ldr	r5, [r4, #32]
 8014d8e:	2d00      	cmp	r5, #0
 8014d90:	d1e5      	bne.n	8014d5e <rclc_executor_trigger_any+0x36>
 8014d92:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d1e1      	bne.n	8014d5e <rclc_executor_trigger_any+0x36>
 8014d9a:	3201      	adds	r2, #1
 8014d9c:	3340      	adds	r3, #64	; 0x40
 8014d9e:	4291      	cmp	r1, r2
 8014da0:	d1e7      	bne.n	8014d72 <rclc_executor_trigger_any+0x4a>
 8014da2:	2000      	movs	r0, #0
 8014da4:	bc30      	pop	{r4, r5}
 8014da6:	4770      	bx	lr
 8014da8:	4770      	bx	lr
 8014daa:	4608      	mov	r0, r1
 8014dac:	4770      	bx	lr
 8014dae:	bf00      	nop

08014db0 <rclc_executor_init>:
 8014db0:	2900      	cmp	r1, #0
 8014db2:	d06a      	beq.n	8014e8a <rclc_executor_init+0xda>
 8014db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014db8:	4605      	mov	r5, r0
 8014dba:	b0b0      	sub	sp, #192	; 0xc0
 8014dbc:	2800      	cmp	r0, #0
 8014dbe:	d05c      	beq.n	8014e7a <rclc_executor_init+0xca>
 8014dc0:	4616      	mov	r6, r2
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	4688      	mov	r8, r1
 8014dc6:	461f      	mov	r7, r3
 8014dc8:	f000 fc56 	bl	8015678 <rcutils_allocator_is_valid>
 8014dcc:	2e00      	cmp	r6, #0
 8014dce:	d054      	beq.n	8014e7a <rclc_executor_init+0xca>
 8014dd0:	f080 0401 	eor.w	r4, r0, #1
 8014dd4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8014dd8:	d14f      	bne.n	8014e7a <rclc_executor_init+0xca>
 8014dda:	2288      	movs	r2, #136	; 0x88
 8014ddc:	4930      	ldr	r1, [pc, #192]	; (8014ea0 <rclc_executor_init+0xf0>)
 8014dde:	a80e      	add	r0, sp, #56	; 0x38
 8014de0:	f00c f9bd 	bl	802115e <memcpy>
 8014de4:	a90e      	add	r1, sp, #56	; 0x38
 8014de6:	2288      	movs	r2, #136	; 0x88
 8014de8:	4628      	mov	r0, r5
 8014dea:	f00c f9b8 	bl	802115e <memcpy>
 8014dee:	4668      	mov	r0, sp
 8014df0:	f8c5 8000 	str.w	r8, [r5]
 8014df4:	60ae      	str	r6, [r5, #8]
 8014df6:	f007 fa83 	bl	801c300 <rcl_get_zero_initialized_wait_set>
 8014dfa:	46ec      	mov	ip, sp
 8014dfc:	f105 0e14 	add.w	lr, r5, #20
 8014e00:	f8d7 8000 	ldr.w	r8, [r7]
 8014e04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e18:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014e98 <rclc_executor_init+0xe8>
 8014e1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e20:	f8dc 3000 	ldr.w	r3, [ip]
 8014e24:	01b0      	lsls	r0, r6, #6
 8014e26:	6939      	ldr	r1, [r7, #16]
 8014e28:	f8ce 3000 	str.w	r3, [lr]
 8014e2c:	612f      	str	r7, [r5, #16]
 8014e2e:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8014e32:	47c0      	blx	r8
 8014e34:	6068      	str	r0, [r5, #4]
 8014e36:	b908      	cbnz	r0, 8014e3c <rclc_executor_init+0x8c>
 8014e38:	e029      	b.n	8014e8e <rclc_executor_init+0xde>
 8014e3a:	6868      	ldr	r0, [r5, #4]
 8014e3c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014e40:	3401      	adds	r4, #1
 8014e42:	4631      	mov	r1, r6
 8014e44:	f000 faa8 	bl	8015398 <rclc_executor_handle_init>
 8014e48:	42a6      	cmp	r6, r4
 8014e4a:	d8f6      	bhi.n	8014e3a <rclc_executor_init+0x8a>
 8014e4c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014e50:	f000 fa98 	bl	8015384 <rclc_executor_handle_counters_zero_init>
 8014e54:	4a13      	ldr	r2, [pc, #76]	; (8014ea4 <rclc_executor_init+0xf4>)
 8014e56:	2300      	movs	r3, #0
 8014e58:	6868      	ldr	r0, [r5, #4]
 8014e5a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8014e5e:	b168      	cbz	r0, 8014e7c <rclc_executor_init+0xcc>
 8014e60:	68ab      	ldr	r3, [r5, #8]
 8014e62:	b173      	cbz	r3, 8014e82 <rclc_executor_init+0xd2>
 8014e64:	692a      	ldr	r2, [r5, #16]
 8014e66:	fab2 f382 	clz	r3, r2
 8014e6a:	095b      	lsrs	r3, r3, #5
 8014e6c:	b14a      	cbz	r2, 8014e82 <rclc_executor_init+0xd2>
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8014e74:	b030      	add	sp, #192	; 0xc0
 8014e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e7a:	200b      	movs	r0, #11
 8014e7c:	b030      	add	sp, #192	; 0xc0
 8014e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e82:	2000      	movs	r0, #0
 8014e84:	b030      	add	sp, #192	; 0xc0
 8014e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e8a:	200b      	movs	r0, #11
 8014e8c:	4770      	bx	lr
 8014e8e:	200a      	movs	r0, #10
 8014e90:	e7f4      	b.n	8014e7c <rclc_executor_init+0xcc>
 8014e92:	bf00      	nop
 8014e94:	f3af 8000 	nop.w
 8014e98:	3b9aca00 	.word	0x3b9aca00
 8014e9c:	00000000 	.word	0x00000000
 8014ea0:	080225e8 	.word	0x080225e8
 8014ea4:	08014d29 	.word	0x08014d29

08014ea8 <rclc_executor_add_subscription>:
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	bf18      	it	ne
 8014eac:	2a00      	cmpne	r2, #0
 8014eae:	b570      	push	{r4, r5, r6, lr}
 8014eb0:	4604      	mov	r4, r0
 8014eb2:	bf0c      	ite	eq
 8014eb4:	2001      	moveq	r0, #1
 8014eb6:	2000      	movne	r0, #0
 8014eb8:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014ebc:	2900      	cmp	r1, #0
 8014ebe:	bf08      	it	eq
 8014ec0:	f040 0001 	orreq.w	r0, r0, #1
 8014ec4:	bb28      	cbnz	r0, 8014f12 <rclc_executor_add_subscription+0x6a>
 8014ec6:	fab4 f584 	clz	r5, r4
 8014eca:	096d      	lsrs	r5, r5, #5
 8014ecc:	b30c      	cbz	r4, 8014f12 <rclc_executor_add_subscription+0x6a>
 8014ece:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014ed2:	4286      	cmp	r6, r0
 8014ed4:	d301      	bcc.n	8014eda <rclc_executor_add_subscription+0x32>
 8014ed6:	2001      	movs	r0, #1
 8014ed8:	bd70      	pop	{r4, r5, r6, pc}
 8014eda:	6860      	ldr	r0, [r4, #4]
 8014edc:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014ee0:	f800 500e 	strb.w	r5, [r0, lr]
 8014ee4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014ee8:	3601      	adds	r6, #1
 8014eea:	6303      	str	r3, [r0, #48]	; 0x30
 8014eec:	2301      	movs	r3, #1
 8014eee:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014ef0:	f104 0514 	add.w	r5, r4, #20
 8014ef4:	f880 c001 	strb.w	ip, [r0, #1]
 8014ef8:	8703      	strh	r3, [r0, #56]	; 0x38
 8014efa:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014efe:	4628      	mov	r0, r5
 8014f00:	60e6      	str	r6, [r4, #12]
 8014f02:	f007 fa11 	bl	801c328 <rcl_wait_set_is_valid>
 8014f06:	b930      	cbnz	r0, 8014f16 <rclc_executor_add_subscription+0x6e>
 8014f08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014f0a:	2000      	movs	r0, #0
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	64a3      	str	r3, [r4, #72]	; 0x48
 8014f10:	bd70      	pop	{r4, r5, r6, pc}
 8014f12:	200b      	movs	r0, #11
 8014f14:	bd70      	pop	{r4, r5, r6, pc}
 8014f16:	4628      	mov	r0, r5
 8014f18:	f007 fa0c 	bl	801c334 <rcl_wait_set_fini>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d0f3      	beq.n	8014f08 <rclc_executor_add_subscription+0x60>
 8014f20:	bd70      	pop	{r4, r5, r6, pc}
 8014f22:	bf00      	nop

08014f24 <rclc_executor_add_timer>:
 8014f24:	b351      	cbz	r1, 8014f7c <rclc_executor_add_timer+0x58>
 8014f26:	fab0 f280 	clz	r2, r0
 8014f2a:	b570      	push	{r4, r5, r6, lr}
 8014f2c:	0952      	lsrs	r2, r2, #5
 8014f2e:	4604      	mov	r4, r0
 8014f30:	b1e0      	cbz	r0, 8014f6c <rclc_executor_add_timer+0x48>
 8014f32:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 8014f36:	4283      	cmp	r3, r0
 8014f38:	d301      	bcc.n	8014f3e <rclc_executor_add_timer+0x1a>
 8014f3a:	2001      	movs	r0, #1
 8014f3c:	bd70      	pop	{r4, r5, r6, pc}
 8014f3e:	6860      	ldr	r0, [r4, #4]
 8014f40:	019d      	lsls	r5, r3, #6
 8014f42:	1c5e      	adds	r6, r3, #1
 8014f44:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 8014f48:	6059      	str	r1, [r3, #4]
 8014f4a:	2102      	movs	r1, #2
 8014f4c:	5341      	strh	r1, [r0, r5]
 8014f4e:	2101      	movs	r1, #1
 8014f50:	f104 0514 	add.w	r5, r4, #20
 8014f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8014f56:	8719      	strh	r1, [r3, #56]	; 0x38
 8014f58:	4628      	mov	r0, r5
 8014f5a:	60e6      	str	r6, [r4, #12]
 8014f5c:	f007 f9e4 	bl	801c328 <rcl_wait_set_is_valid>
 8014f60:	b930      	cbnz	r0, 8014f70 <rclc_executor_add_timer+0x4c>
 8014f62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014f64:	2000      	movs	r0, #0
 8014f66:	3301      	adds	r3, #1
 8014f68:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014f6a:	bd70      	pop	{r4, r5, r6, pc}
 8014f6c:	200b      	movs	r0, #11
 8014f6e:	bd70      	pop	{r4, r5, r6, pc}
 8014f70:	4628      	mov	r0, r5
 8014f72:	f007 f9df 	bl	801c334 <rcl_wait_set_fini>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d0f3      	beq.n	8014f62 <rclc_executor_add_timer+0x3e>
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	200b      	movs	r0, #11
 8014f7e:	4770      	bx	lr

08014f80 <rclc_executor_prepare>:
 8014f80:	2800      	cmp	r0, #0
 8014f82:	d044      	beq.n	801500e <rclc_executor_prepare+0x8e>
 8014f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f86:	f100 0514 	add.w	r5, r0, #20
 8014f8a:	b09b      	sub	sp, #108	; 0x6c
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	4628      	mov	r0, r5
 8014f90:	f007 f9ca 	bl	801c328 <rcl_wait_set_is_valid>
 8014f94:	b110      	cbz	r0, 8014f9c <rclc_executor_prepare+0x1c>
 8014f96:	2000      	movs	r0, #0
 8014f98:	b01b      	add	sp, #108	; 0x6c
 8014f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f007 f9c9 	bl	801c334 <rcl_wait_set_fini>
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	d130      	bne.n	8015008 <rclc_executor_prepare+0x88>
 8014fa6:	a80c      	add	r0, sp, #48	; 0x30
 8014fa8:	ae04      	add	r6, sp, #16
 8014faa:	f007 f9a9 	bl	801c300 <rcl_get_zero_initialized_wait_set>
 8014fae:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014fb2:	46ae      	mov	lr, r5
 8014fb4:	6927      	ldr	r7, [r4, #16]
 8014fb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fc2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fce:	f8dc 3000 	ldr.w	r3, [ip]
 8014fd2:	f8ce 3000 	str.w	r3, [lr]
 8014fd6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014fd8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	4628      	mov	r0, r5
 8014fde:	6822      	ldr	r2, [r4, #0]
 8014fe0:	6033      	str	r3, [r6, #0]
 8014fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014fe4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014fe6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014fea:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8014fee:	e9cd 2100 	strd	r2, r1, [sp]
 8014ff2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014ff6:	f007 fc9d 	bl	801c934 <rcl_wait_set_init>
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	d0cc      	beq.n	8014f98 <rclc_executor_prepare+0x18>
 8014ffe:	900b      	str	r0, [sp, #44]	; 0x2c
 8015000:	f000 fb5e 	bl	80156c0 <rcutils_reset_error>
 8015004:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015006:	e7c7      	b.n	8014f98 <rclc_executor_prepare+0x18>
 8015008:	f000 fb5a 	bl	80156c0 <rcutils_reset_error>
 801500c:	e7cb      	b.n	8014fa6 <rclc_executor_prepare+0x26>
 801500e:	200b      	movs	r0, #11
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop

08015014 <rclc_executor_spin_some.part.0>:
 8015014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015018:	4605      	mov	r5, r0
 801501a:	4691      	mov	r9, r2
 801501c:	4698      	mov	r8, r3
 801501e:	f7ff ffaf 	bl	8014f80 <rclc_executor_prepare>
 8015022:	f105 0614 	add.w	r6, r5, #20
 8015026:	4630      	mov	r0, r6
 8015028:	f007 fa50 	bl	801c4cc <rcl_wait_set_clear>
 801502c:	4607      	mov	r7, r0
 801502e:	2800      	cmp	r0, #0
 8015030:	f040 80a8 	bne.w	8015184 <rclc_executor_spin_some.part.0+0x170>
 8015034:	68ab      	ldr	r3, [r5, #8]
 8015036:	b30b      	cbz	r3, 801507c <rclc_executor_spin_some.part.0+0x68>
 8015038:	4604      	mov	r4, r0
 801503a:	6869      	ldr	r1, [r5, #4]
 801503c:	01a2      	lsls	r2, r4, #6
 801503e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8015042:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8015046:	b1cb      	cbz	r3, 801507c <rclc_executor_spin_some.part.0+0x68>
 8015048:	5c8b      	ldrb	r3, [r1, r2]
 801504a:	2b0a      	cmp	r3, #10
 801504c:	f200 80de 	bhi.w	801520c <rclc_executor_spin_some.part.0+0x1f8>
 8015050:	e8df f003 	tbb	[pc, r3]
 8015054:	8da99d9d 	.word	0x8da99d9d
 8015058:	0606068d 	.word	0x0606068d
 801505c:	c1ce      	.short	0xc1ce
 801505e:	b5          	.byte	0xb5
 801505f:	00          	.byte	0x00
 8015060:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015064:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015068:	4630      	mov	r0, r6
 801506a:	f007 fd7f 	bl	801cb6c <rcl_wait_set_add_service>
 801506e:	2800      	cmp	r0, #0
 8015070:	f040 8087 	bne.w	8015182 <rclc_executor_spin_some.part.0+0x16e>
 8015074:	3401      	adds	r4, #1
 8015076:	68ab      	ldr	r3, [r5, #8]
 8015078:	429c      	cmp	r4, r3
 801507a:	d3de      	bcc.n	801503a <rclc_executor_spin_some.part.0+0x26>
 801507c:	4643      	mov	r3, r8
 801507e:	464a      	mov	r2, r9
 8015080:	4630      	mov	r0, r6
 8015082:	f007 fda1 	bl	801cbc8 <rcl_wait>
 8015086:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 801508a:	2b00      	cmp	r3, #0
 801508c:	f000 80c6 	beq.w	801521c <rclc_executor_spin_some.part.0+0x208>
 8015090:	2b01      	cmp	r3, #1
 8015092:	f040 80bb 	bne.w	801520c <rclc_executor_spin_some.part.0+0x1f8>
 8015096:	68ab      	ldr	r3, [r5, #8]
 8015098:	2b00      	cmp	r3, #0
 801509a:	f000 8159 	beq.w	8015350 <rclc_executor_spin_some.part.0+0x33c>
 801509e:	2400      	movs	r4, #0
 80150a0:	f240 1991 	movw	r9, #401	; 0x191
 80150a4:	46a0      	mov	r8, r4
 80150a6:	e00a      	b.n	80150be <rclc_executor_spin_some.part.0+0xaa>
 80150a8:	f7ff fb3a 	bl	8014720 <_rclc_check_for_new_data>
 80150ac:	4604      	mov	r4, r0
 80150ae:	b110      	cbz	r0, 80150b6 <rclc_executor_spin_some.part.0+0xa2>
 80150b0:	4548      	cmp	r0, r9
 80150b2:	f040 80b1 	bne.w	8015218 <rclc_executor_spin_some.part.0+0x204>
 80150b6:	68ab      	ldr	r3, [r5, #8]
 80150b8:	4598      	cmp	r8, r3
 80150ba:	f080 8126 	bcs.w	801530a <rclc_executor_spin_some.part.0+0x2f6>
 80150be:	686a      	ldr	r2, [r5, #4]
 80150c0:	4631      	mov	r1, r6
 80150c2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80150c6:	f108 0801 	add.w	r8, r8, #1
 80150ca:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80150ce:	f1bc 0f00 	cmp.w	ip, #0
 80150d2:	d1e9      	bne.n	80150a8 <rclc_executor_spin_some.part.0+0x94>
 80150d4:	4619      	mov	r1, r3
 80150d6:	4610      	mov	r0, r2
 80150d8:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80150dc:	4798      	blx	r3
 80150de:	2800      	cmp	r0, #0
 80150e0:	f000 809a 	beq.w	8015218 <rclc_executor_spin_some.part.0+0x204>
 80150e4:	68ab      	ldr	r3, [r5, #8]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	f000 8096 	beq.w	8015218 <rclc_executor_spin_some.part.0+0x204>
 80150ec:	f04f 0800 	mov.w	r8, #0
 80150f0:	f240 1991 	movw	r9, #401	; 0x191
 80150f4:	e009      	b.n	801510a <rclc_executor_spin_some.part.0+0xf6>
 80150f6:	f7ff fb61 	bl	80147bc <_rclc_take_new_data>
 80150fa:	4604      	mov	r4, r0
 80150fc:	b110      	cbz	r0, 8015104 <rclc_executor_spin_some.part.0+0xf0>
 80150fe:	4548      	cmp	r0, r9
 8015100:	f040 808a 	bne.w	8015218 <rclc_executor_spin_some.part.0+0x204>
 8015104:	68ab      	ldr	r3, [r5, #8]
 8015106:	4598      	cmp	r8, r3
 8015108:	d209      	bcs.n	801511e <rclc_executor_spin_some.part.0+0x10a>
 801510a:	6868      	ldr	r0, [r5, #4]
 801510c:	4631      	mov	r1, r6
 801510e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8015112:	f108 0801 	add.w	r8, r8, #1
 8015116:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 801511a:	2a00      	cmp	r2, #0
 801511c:	d1eb      	bne.n	80150f6 <rclc_executor_spin_some.part.0+0xe2>
 801511e:	2b00      	cmp	r3, #0
 8015120:	d07a      	beq.n	8015218 <rclc_executor_spin_some.part.0+0x204>
 8015122:	2600      	movs	r6, #0
 8015124:	e00e      	b.n	8015144 <rclc_executor_spin_some.part.0+0x130>
 8015126:	f812 200c 	ldrb.w	r2, [r2, ip]
 801512a:	2a08      	cmp	r2, #8
 801512c:	f000 80fc 	beq.w	8015328 <rclc_executor_spin_some.part.0+0x314>
 8015130:	2a09      	cmp	r2, #9
 8015132:	f000 80ee 	beq.w	8015312 <rclc_executor_spin_some.part.0+0x2fe>
 8015136:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 801513a:	b98a      	cbnz	r2, 8015160 <rclc_executor_spin_some.part.0+0x14c>
 801513c:	3601      	adds	r6, #1
 801513e:	429e      	cmp	r6, r3
 8015140:	d267      	bcs.n	8015212 <rclc_executor_spin_some.part.0+0x1fe>
 8015142:	2400      	movs	r4, #0
 8015144:	686a      	ldr	r2, [r5, #4]
 8015146:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801514a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801514e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8015152:	2900      	cmp	r1, #0
 8015154:	d060      	beq.n	8015218 <rclc_executor_spin_some.part.0+0x204>
 8015156:	7841      	ldrb	r1, [r0, #1]
 8015158:	2900      	cmp	r1, #0
 801515a:	d0e4      	beq.n	8015126 <rclc_executor_spin_some.part.0+0x112>
 801515c:	2901      	cmp	r1, #1
 801515e:	d1ed      	bne.n	801513c <rclc_executor_spin_some.part.0+0x128>
 8015160:	f7ff fca0 	bl	8014aa4 <_rclc_execute.part.0>
 8015164:	2800      	cmp	r0, #0
 8015166:	f040 80b5 	bne.w	80152d4 <rclc_executor_spin_some.part.0+0x2c0>
 801516a:	68ab      	ldr	r3, [r5, #8]
 801516c:	e7e6      	b.n	801513c <rclc_executor_spin_some.part.0+0x128>
 801516e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015172:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015176:	4630      	mov	r0, r6
 8015178:	f007 fccc 	bl	801cb14 <rcl_wait_set_add_client>
 801517c:	2800      	cmp	r0, #0
 801517e:	f43f af79 	beq.w	8015074 <rclc_executor_spin_some.part.0+0x60>
 8015182:	4607      	mov	r7, r0
 8015184:	f000 fa9c 	bl	80156c0 <rcutils_reset_error>
 8015188:	4638      	mov	r0, r7
 801518a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801518e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8015192:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015196:	4630      	mov	r0, r6
 8015198:	f007 f96c 	bl	801c474 <rcl_wait_set_add_subscription>
 801519c:	2800      	cmp	r0, #0
 801519e:	f43f af69 	beq.w	8015074 <rclc_executor_spin_some.part.0+0x60>
 80151a2:	4607      	mov	r7, r0
 80151a4:	e7ee      	b.n	8015184 <rclc_executor_spin_some.part.0+0x170>
 80151a6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80151aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80151ae:	4630      	mov	r0, r6
 80151b0:	f007 fc80 	bl	801cab4 <rcl_wait_set_add_timer>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	f43f af5d 	beq.w	8015074 <rclc_executor_spin_some.part.0+0x60>
 80151ba:	4607      	mov	r7, r0
 80151bc:	e7e2      	b.n	8015184 <rclc_executor_spin_some.part.0+0x170>
 80151be:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80151c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80151c6:	4630      	mov	r0, r6
 80151c8:	f007 fc48 	bl	801ca5c <rcl_wait_set_add_guard_condition>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	f43f af51 	beq.w	8015074 <rclc_executor_spin_some.part.0+0x60>
 80151d2:	4607      	mov	r7, r0
 80151d4:	e7d6      	b.n	8015184 <rclc_executor_spin_some.part.0+0x170>
 80151d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80151da:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80151de:	4630      	mov	r0, r6
 80151e0:	3110      	adds	r1, #16
 80151e2:	f008 f9c5 	bl	801d570 <rcl_action_wait_set_add_action_server>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	f43f af44 	beq.w	8015074 <rclc_executor_spin_some.part.0+0x60>
 80151ec:	4607      	mov	r7, r0
 80151ee:	e7c9      	b.n	8015184 <rclc_executor_spin_some.part.0+0x170>
 80151f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80151f4:	2300      	movs	r3, #0
 80151f6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80151fa:	4630      	mov	r0, r6
 80151fc:	3110      	adds	r1, #16
 80151fe:	f007 ff8f 	bl	801d120 <rcl_action_wait_set_add_action_client>
 8015202:	2800      	cmp	r0, #0
 8015204:	f43f af36 	beq.w	8015074 <rclc_executor_spin_some.part.0+0x60>
 8015208:	4607      	mov	r7, r0
 801520a:	e7bb      	b.n	8015184 <rclc_executor_spin_some.part.0+0x170>
 801520c:	2701      	movs	r7, #1
 801520e:	f000 fa57 	bl	80156c0 <rcutils_reset_error>
 8015212:	4638      	mov	r0, r7
 8015214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015218:	4627      	mov	r7, r4
 801521a:	e7fa      	b.n	8015212 <rclc_executor_spin_some.part.0+0x1fe>
 801521c:	68ab      	ldr	r3, [r5, #8]
 801521e:	2b00      	cmp	r3, #0
 8015220:	f000 8093 	beq.w	801534a <rclc_executor_spin_some.part.0+0x336>
 8015224:	2400      	movs	r4, #0
 8015226:	f240 1991 	movw	r9, #401	; 0x191
 801522a:	46a0      	mov	r8, r4
 801522c:	e008      	b.n	8015240 <rclc_executor_spin_some.part.0+0x22c>
 801522e:	f7ff fa77 	bl	8014720 <_rclc_check_for_new_data>
 8015232:	4604      	mov	r4, r0
 8015234:	b108      	cbz	r0, 801523a <rclc_executor_spin_some.part.0+0x226>
 8015236:	4548      	cmp	r0, r9
 8015238:	d1ee      	bne.n	8015218 <rclc_executor_spin_some.part.0+0x204>
 801523a:	68ab      	ldr	r3, [r5, #8]
 801523c:	4598      	cmp	r8, r3
 801523e:	d266      	bcs.n	801530e <rclc_executor_spin_some.part.0+0x2fa>
 8015240:	686a      	ldr	r2, [r5, #4]
 8015242:	4631      	mov	r1, r6
 8015244:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015248:	f108 0801 	add.w	r8, r8, #1
 801524c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8015250:	f1bc 0f00 	cmp.w	ip, #0
 8015254:	d1eb      	bne.n	801522e <rclc_executor_spin_some.part.0+0x21a>
 8015256:	4619      	mov	r1, r3
 8015258:	4610      	mov	r0, r2
 801525a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 801525e:	4798      	blx	r3
 8015260:	2800      	cmp	r0, #0
 8015262:	d0d9      	beq.n	8015218 <rclc_executor_spin_some.part.0+0x204>
 8015264:	68ab      	ldr	r3, [r5, #8]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d0d6      	beq.n	8015218 <rclc_executor_spin_some.part.0+0x204>
 801526a:	f04f 0a00 	mov.w	sl, #0
 801526e:	f240 1891 	movw	r8, #401	; 0x191
 8015272:	f240 2959 	movw	r9, #601	; 0x259
 8015276:	e00e      	b.n	8015296 <rclc_executor_spin_some.part.0+0x282>
 8015278:	f813 300b 	ldrb.w	r3, [r3, fp]
 801527c:	2b08      	cmp	r3, #8
 801527e:	d034      	beq.n	80152ea <rclc_executor_spin_some.part.0+0x2d6>
 8015280:	2b09      	cmp	r3, #9
 8015282:	d029      	beq.n	80152d8 <rclc_executor_spin_some.part.0+0x2c4>
 8015284:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015288:	bb03      	cbnz	r3, 80152cc <rclc_executor_spin_some.part.0+0x2b8>
 801528a:	f10a 0a01 	add.w	sl, sl, #1
 801528e:	68ab      	ldr	r3, [r5, #8]
 8015290:	459a      	cmp	sl, r3
 8015292:	d2be      	bcs.n	8015212 <rclc_executor_spin_some.part.0+0x1fe>
 8015294:	2400      	movs	r4, #0
 8015296:	6868      	ldr	r0, [r5, #4]
 8015298:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 801529c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 80152a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d0b7      	beq.n	8015218 <rclc_executor_spin_some.part.0+0x204>
 80152a8:	4631      	mov	r1, r6
 80152aa:	f7ff fa87 	bl	80147bc <_rclc_take_new_data>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	bf18      	it	ne
 80152b2:	4540      	cmpne	r0, r8
 80152b4:	d001      	beq.n	80152ba <rclc_executor_spin_some.part.0+0x2a6>
 80152b6:	4548      	cmp	r0, r9
 80152b8:	d10c      	bne.n	80152d4 <rclc_executor_spin_some.part.0+0x2c0>
 80152ba:	686b      	ldr	r3, [r5, #4]
 80152bc:	eb13 000b 	adds.w	r0, r3, fp
 80152c0:	d021      	beq.n	8015306 <rclc_executor_spin_some.part.0+0x2f2>
 80152c2:	7842      	ldrb	r2, [r0, #1]
 80152c4:	2a00      	cmp	r2, #0
 80152c6:	d0d7      	beq.n	8015278 <rclc_executor_spin_some.part.0+0x264>
 80152c8:	2a01      	cmp	r2, #1
 80152ca:	d1de      	bne.n	801528a <rclc_executor_spin_some.part.0+0x276>
 80152cc:	f7ff fbea 	bl	8014aa4 <_rclc_execute.part.0>
 80152d0:	2800      	cmp	r0, #0
 80152d2:	d0da      	beq.n	801528a <rclc_executor_spin_some.part.0+0x276>
 80152d4:	4607      	mov	r7, r0
 80152d6:	e79c      	b.n	8015212 <rclc_executor_spin_some.part.0+0x1fe>
 80152d8:	6843      	ldr	r3, [r0, #4]
 80152da:	6a1a      	ldr	r2, [r3, #32]
 80152dc:	2a00      	cmp	r2, #0
 80152de:	d1f5      	bne.n	80152cc <rclc_executor_spin_some.part.0+0x2b8>
 80152e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d0d0      	beq.n	801528a <rclc_executor_spin_some.part.0+0x276>
 80152e8:	e7f0      	b.n	80152cc <rclc_executor_spin_some.part.0+0x2b8>
 80152ea:	6843      	ldr	r3, [r0, #4]
 80152ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80152ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80152f2:	d1eb      	bne.n	80152cc <rclc_executor_spin_some.part.0+0x2b8>
 80152f4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80152f8:	2a00      	cmp	r2, #0
 80152fa:	d1e7      	bne.n	80152cc <rclc_executor_spin_some.part.0+0x2b8>
 80152fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015300:	2b00      	cmp	r3, #0
 8015302:	d0c2      	beq.n	801528a <rclc_executor_spin_some.part.0+0x276>
 8015304:	e7e2      	b.n	80152cc <rclc_executor_spin_some.part.0+0x2b8>
 8015306:	270b      	movs	r7, #11
 8015308:	e783      	b.n	8015212 <rclc_executor_spin_some.part.0+0x1fe>
 801530a:	686a      	ldr	r2, [r5, #4]
 801530c:	e6e2      	b.n	80150d4 <rclc_executor_spin_some.part.0+0xc0>
 801530e:	686a      	ldr	r2, [r5, #4]
 8015310:	e7a1      	b.n	8015256 <rclc_executor_spin_some.part.0+0x242>
 8015312:	6842      	ldr	r2, [r0, #4]
 8015314:	6a11      	ldr	r1, [r2, #32]
 8015316:	2900      	cmp	r1, #0
 8015318:	f47f af22 	bne.w	8015160 <rclc_executor_spin_some.part.0+0x14c>
 801531c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8015320:	2a00      	cmp	r2, #0
 8015322:	f43f af0b 	beq.w	801513c <rclc_executor_spin_some.part.0+0x128>
 8015326:	e71b      	b.n	8015160 <rclc_executor_spin_some.part.0+0x14c>
 8015328:	6842      	ldr	r2, [r0, #4]
 801532a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801532c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8015330:	f47f af16 	bne.w	8015160 <rclc_executor_spin_some.part.0+0x14c>
 8015334:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8015338:	2900      	cmp	r1, #0
 801533a:	f47f af11 	bne.w	8015160 <rclc_executor_spin_some.part.0+0x14c>
 801533e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8015342:	2a00      	cmp	r2, #0
 8015344:	f43f aefa 	beq.w	801513c <rclc_executor_spin_some.part.0+0x128>
 8015348:	e70a      	b.n	8015160 <rclc_executor_spin_some.part.0+0x14c>
 801534a:	686a      	ldr	r2, [r5, #4]
 801534c:	461c      	mov	r4, r3
 801534e:	e782      	b.n	8015256 <rclc_executor_spin_some.part.0+0x242>
 8015350:	686a      	ldr	r2, [r5, #4]
 8015352:	461c      	mov	r4, r3
 8015354:	e6be      	b.n	80150d4 <rclc_executor_spin_some.part.0+0xc0>
 8015356:	bf00      	nop

08015358 <rclc_executor_spin_some>:
 8015358:	b190      	cbz	r0, 8015380 <rclc_executor_spin_some+0x28>
 801535a:	b570      	push	{r4, r5, r6, lr}
 801535c:	4604      	mov	r4, r0
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	4616      	mov	r6, r2
 8015362:	461d      	mov	r5, r3
 8015364:	f005 fcfc 	bl	801ad60 <rcl_context_is_valid>
 8015368:	b130      	cbz	r0, 8015378 <rclc_executor_spin_some+0x20>
 801536a:	4632      	mov	r2, r6
 801536c:	462b      	mov	r3, r5
 801536e:	4620      	mov	r0, r4
 8015370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015374:	f7ff be4e 	b.w	8015014 <rclc_executor_spin_some.part.0>
 8015378:	f000 f9a2 	bl	80156c0 <rcutils_reset_error>
 801537c:	2001      	movs	r0, #1
 801537e:	bd70      	pop	{r4, r5, r6, pc}
 8015380:	200b      	movs	r0, #11
 8015382:	4770      	bx	lr

08015384 <rclc_executor_handle_counters_zero_init>:
 8015384:	b130      	cbz	r0, 8015394 <rclc_executor_handle_counters_zero_init+0x10>
 8015386:	2220      	movs	r2, #32
 8015388:	2100      	movs	r1, #0
 801538a:	b508      	push	{r3, lr}
 801538c:	f00b fe1e 	bl	8020fcc <memset>
 8015390:	2000      	movs	r0, #0
 8015392:	bd08      	pop	{r3, pc}
 8015394:	200b      	movs	r0, #11
 8015396:	4770      	bx	lr

08015398 <rclc_executor_handle_init>:
 8015398:	4603      	mov	r3, r0
 801539a:	b178      	cbz	r0, 80153bc <rclc_executor_handle_init+0x24>
 801539c:	2200      	movs	r2, #0
 801539e:	f04f 0c0b 	mov.w	ip, #11
 80153a2:	6341      	str	r1, [r0, #52]	; 0x34
 80153a4:	4610      	mov	r0, r2
 80153a6:	f8a3 c000 	strh.w	ip, [r3]
 80153aa:	631a      	str	r2, [r3, #48]	; 0x30
 80153ac:	871a      	strh	r2, [r3, #56]	; 0x38
 80153ae:	ed9f 7b04 	vldr	d7, [pc, #16]	; 80153c0 <rclc_executor_handle_init+0x28>
 80153b2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80153b6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 80153ba:	4770      	bx	lr
 80153bc:	200b      	movs	r0, #11
 80153be:	4770      	bx	lr
	...

080153c8 <rclc_support_init_with_options>:
 80153c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153cc:	b083      	sub	sp, #12
 80153ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	bf18      	it	ne
 80153d4:	2f00      	cmpne	r7, #0
 80153d6:	d027      	beq.n	8015428 <rclc_support_init_with_options+0x60>
 80153d8:	4604      	mov	r4, r0
 80153da:	b328      	cbz	r0, 8015428 <rclc_support_init_with_options+0x60>
 80153dc:	46e9      	mov	r9, sp
 80153de:	461d      	mov	r5, r3
 80153e0:	460e      	mov	r6, r1
 80153e2:	4690      	mov	r8, r2
 80153e4:	4648      	mov	r0, r9
 80153e6:	f005 fcb1 	bl	801ad4c <rcl_get_zero_initialized_context>
 80153ea:	462a      	mov	r2, r5
 80153ec:	4623      	mov	r3, r4
 80153ee:	e899 0003 	ldmia.w	r9, {r0, r1}
 80153f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80153f6:	4641      	mov	r1, r8
 80153f8:	4630      	mov	r0, r6
 80153fa:	f005 fd17 	bl	801ae2c <rcl_init>
 80153fe:	4605      	mov	r5, r0
 8015400:	b960      	cbnz	r0, 801541c <rclc_support_init_with_options+0x54>
 8015402:	463a      	mov	r2, r7
 8015404:	f104 010c 	add.w	r1, r4, #12
 8015408:	2003      	movs	r0, #3
 801540a:	60a7      	str	r7, [r4, #8]
 801540c:	f006 fb4e 	bl	801baac <rcl_clock_init>
 8015410:	4605      	mov	r5, r0
 8015412:	b918      	cbnz	r0, 801541c <rclc_support_init_with_options+0x54>
 8015414:	4628      	mov	r0, r5
 8015416:	b003      	add	sp, #12
 8015418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801541c:	f000 f950 	bl	80156c0 <rcutils_reset_error>
 8015420:	4628      	mov	r0, r5
 8015422:	b003      	add	sp, #12
 8015424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015428:	250b      	movs	r5, #11
 801542a:	4628      	mov	r0, r5
 801542c:	b003      	add	sp, #12
 801542e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015432:	bf00      	nop

08015434 <rclc_node_init_with_options>:
 8015434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015438:	b087      	sub	sp, #28
 801543a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801543c:	2e00      	cmp	r6, #0
 801543e:	bf18      	it	ne
 8015440:	2b00      	cmpne	r3, #0
 8015442:	bf0c      	ite	eq
 8015444:	f04f 0c01 	moveq.w	ip, #1
 8015448:	f04f 0c00 	movne.w	ip, #0
 801544c:	2a00      	cmp	r2, #0
 801544e:	bf08      	it	eq
 8015450:	f04c 0c01 	orreq.w	ip, ip, #1
 8015454:	2900      	cmp	r1, #0
 8015456:	bf08      	it	eq
 8015458:	f04c 0c01 	orreq.w	ip, ip, #1
 801545c:	f1bc 0f00 	cmp.w	ip, #0
 8015460:	d118      	bne.n	8015494 <rclc_node_init_with_options+0x60>
 8015462:	4604      	mov	r4, r0
 8015464:	b1b0      	cbz	r0, 8015494 <rclc_node_init_with_options+0x60>
 8015466:	f10d 0910 	add.w	r9, sp, #16
 801546a:	460d      	mov	r5, r1
 801546c:	4698      	mov	r8, r3
 801546e:	4617      	mov	r7, r2
 8015470:	4648      	mov	r0, r9
 8015472:	f005 fe03 	bl	801b07c <rcl_get_zero_initialized_node>
 8015476:	9600      	str	r6, [sp, #0]
 8015478:	4643      	mov	r3, r8
 801547a:	463a      	mov	r2, r7
 801547c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015480:	e884 0003 	stmia.w	r4, {r0, r1}
 8015484:	4629      	mov	r1, r5
 8015486:	4620      	mov	r0, r4
 8015488:	f005 fe02 	bl	801b090 <rcl_node_init>
 801548c:	b930      	cbnz	r0, 801549c <rclc_node_init_with_options+0x68>
 801548e:	b007      	add	sp, #28
 8015490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015494:	200b      	movs	r0, #11
 8015496:	b007      	add	sp, #28
 8015498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801549c:	9003      	str	r0, [sp, #12]
 801549e:	f000 f90f 	bl	80156c0 <rcutils_reset_error>
 80154a2:	9803      	ldr	r0, [sp, #12]
 80154a4:	b007      	add	sp, #28
 80154a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154aa:	bf00      	nop

080154ac <rclc_publisher_init_default>:
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	bf18      	it	ne
 80154b0:	2a00      	cmpne	r2, #0
 80154b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b6:	4616      	mov	r6, r2
 80154b8:	bf0c      	ite	eq
 80154ba:	2201      	moveq	r2, #1
 80154bc:	2200      	movne	r2, #0
 80154be:	b0a0      	sub	sp, #128	; 0x80
 80154c0:	2900      	cmp	r1, #0
 80154c2:	bf08      	it	eq
 80154c4:	f042 0201 	orreq.w	r2, r2, #1
 80154c8:	bb1a      	cbnz	r2, 8015512 <rclc_publisher_init_default+0x66>
 80154ca:	4604      	mov	r4, r0
 80154cc:	b308      	cbz	r0, 8015512 <rclc_publisher_init_default+0x66>
 80154ce:	f10d 0810 	add.w	r8, sp, #16
 80154d2:	461f      	mov	r7, r3
 80154d4:	460d      	mov	r5, r1
 80154d6:	f7ff f80f 	bl	80144f8 <rcl_get_zero_initialized_publisher>
 80154da:	6020      	str	r0, [r4, #0]
 80154dc:	4640      	mov	r0, r8
 80154de:	f7ff f8ab 	bl	8014638 <rcl_publisher_get_default_options>
 80154e2:	2250      	movs	r2, #80	; 0x50
 80154e4:	490d      	ldr	r1, [pc, #52]	; (801551c <rclc_publisher_init_default+0x70>)
 80154e6:	4640      	mov	r0, r8
 80154e8:	f00b fe39 	bl	802115e <memcpy>
 80154ec:	463b      	mov	r3, r7
 80154ee:	4632      	mov	r2, r6
 80154f0:	4629      	mov	r1, r5
 80154f2:	4620      	mov	r0, r4
 80154f4:	f8cd 8000 	str.w	r8, [sp]
 80154f8:	f7ff f804 	bl	8014504 <rcl_publisher_init>
 80154fc:	b910      	cbnz	r0, 8015504 <rclc_publisher_init_default+0x58>
 80154fe:	b020      	add	sp, #128	; 0x80
 8015500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015504:	9003      	str	r0, [sp, #12]
 8015506:	f000 f8db 	bl	80156c0 <rcutils_reset_error>
 801550a:	9803      	ldr	r0, [sp, #12]
 801550c:	b020      	add	sp, #128	; 0x80
 801550e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015512:	200b      	movs	r0, #11
 8015514:	b020      	add	sp, #128	; 0x80
 8015516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551a:	bf00      	nop
 801551c:	08022670 	.word	0x08022670

08015520 <rclc_subscription_init_default>:
 8015520:	2b00      	cmp	r3, #0
 8015522:	bf18      	it	ne
 8015524:	2a00      	cmpne	r2, #0
 8015526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801552a:	4616      	mov	r6, r2
 801552c:	bf0c      	ite	eq
 801552e:	2201      	moveq	r2, #1
 8015530:	2200      	movne	r2, #0
 8015532:	b0a0      	sub	sp, #128	; 0x80
 8015534:	2900      	cmp	r1, #0
 8015536:	bf08      	it	eq
 8015538:	f042 0201 	orreq.w	r2, r2, #1
 801553c:	bb1a      	cbnz	r2, 8015586 <rclc_subscription_init_default+0x66>
 801553e:	4604      	mov	r4, r0
 8015540:	b308      	cbz	r0, 8015586 <rclc_subscription_init_default+0x66>
 8015542:	f10d 0810 	add.w	r8, sp, #16
 8015546:	461f      	mov	r7, r3
 8015548:	460d      	mov	r5, r1
 801554a:	f006 f94d 	bl	801b7e8 <rcl_get_zero_initialized_subscription>
 801554e:	6020      	str	r0, [r4, #0]
 8015550:	4640      	mov	r0, r8
 8015552:	f006 f9fd 	bl	801b950 <rcl_subscription_get_default_options>
 8015556:	2250      	movs	r2, #80	; 0x50
 8015558:	490d      	ldr	r1, [pc, #52]	; (8015590 <rclc_subscription_init_default+0x70>)
 801555a:	4640      	mov	r0, r8
 801555c:	f00b fdff 	bl	802115e <memcpy>
 8015560:	463b      	mov	r3, r7
 8015562:	4632      	mov	r2, r6
 8015564:	4629      	mov	r1, r5
 8015566:	4620      	mov	r0, r4
 8015568:	f8cd 8000 	str.w	r8, [sp]
 801556c:	f006 f942 	bl	801b7f4 <rcl_subscription_init>
 8015570:	b910      	cbnz	r0, 8015578 <rclc_subscription_init_default+0x58>
 8015572:	b020      	add	sp, #128	; 0x80
 8015574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015578:	9003      	str	r0, [sp, #12]
 801557a:	f000 f8a1 	bl	80156c0 <rcutils_reset_error>
 801557e:	9803      	ldr	r0, [sp, #12]
 8015580:	b020      	add	sp, #128	; 0x80
 8015582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015586:	200b      	movs	r0, #11
 8015588:	b020      	add	sp, #128	; 0x80
 801558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558e:	bf00      	nop
 8015590:	080226c0 	.word	0x080226c0

08015594 <rclc_timer_init_default>:
 8015594:	b361      	cbz	r1, 80155f0 <rclc_timer_init_default+0x5c>
 8015596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801559a:	4606      	mov	r6, r0
 801559c:	b08a      	sub	sp, #40	; 0x28
 801559e:	b318      	cbz	r0, 80155e8 <rclc_timer_init_default+0x54>
 80155a0:	460d      	mov	r5, r1
 80155a2:	4690      	mov	r8, r2
 80155a4:	461f      	mov	r7, r3
 80155a6:	f006 fc79 	bl	801be9c <rcl_get_zero_initialized_timer>
 80155aa:	68ac      	ldr	r4, [r5, #8]
 80155ac:	f10d 0c0c 	add.w	ip, sp, #12
 80155b0:	6030      	str	r0, [r6, #0]
 80155b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	462a      	mov	r2, r5
 80155bc:	f105 010c 	add.w	r1, r5, #12
 80155c0:	4630      	mov	r0, r6
 80155c2:	f8cc 3000 	str.w	r3, [ip]
 80155c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155c8:	e9cd 8700 	strd	r8, r7, [sp]
 80155cc:	9302      	str	r3, [sp, #8]
 80155ce:	f006 fc6b 	bl	801bea8 <rcl_timer_init>
 80155d2:	b910      	cbnz	r0, 80155da <rclc_timer_init_default+0x46>
 80155d4:	b00a      	add	sp, #40	; 0x28
 80155d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155da:	9009      	str	r0, [sp, #36]	; 0x24
 80155dc:	f000 f870 	bl	80156c0 <rcutils_reset_error>
 80155e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155e2:	b00a      	add	sp, #40	; 0x28
 80155e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e8:	200b      	movs	r0, #11
 80155ea:	b00a      	add	sp, #40	; 0x28
 80155ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155f0:	200b      	movs	r0, #11
 80155f2:	4770      	bx	lr

080155f4 <__default_zero_allocate>:
 80155f4:	f00a bf52 	b.w	802049c <calloc>

080155f8 <__default_reallocate>:
 80155f8:	f00b b8de 	b.w	80207b8 <realloc>

080155fc <__default_deallocate>:
 80155fc:	f00a bfbc 	b.w	8020578 <free>

08015600 <__default_allocate>:
 8015600:	f00a bfb2 	b.w	8020568 <malloc>

08015604 <rcutils_get_zero_initialized_allocator>:
 8015604:	b510      	push	{r4, lr}
 8015606:	4c05      	ldr	r4, [pc, #20]	; (801561c <rcutils_get_zero_initialized_allocator+0x18>)
 8015608:	4686      	mov	lr, r0
 801560a:	4684      	mov	ip, r0
 801560c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801560e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015612:	6823      	ldr	r3, [r4, #0]
 8015614:	4670      	mov	r0, lr
 8015616:	f8cc 3000 	str.w	r3, [ip]
 801561a:	bd10      	pop	{r4, pc}
 801561c:	08022710 	.word	0x08022710

08015620 <rcutils_set_default_allocator>:
 8015620:	b1a8      	cbz	r0, 801564e <rcutils_set_default_allocator+0x2e>
 8015622:	6802      	ldr	r2, [r0, #0]
 8015624:	b1a2      	cbz	r2, 8015650 <rcutils_set_default_allocator+0x30>
 8015626:	6841      	ldr	r1, [r0, #4]
 8015628:	b1a1      	cbz	r1, 8015654 <rcutils_set_default_allocator+0x34>
 801562a:	b410      	push	{r4}
 801562c:	68c4      	ldr	r4, [r0, #12]
 801562e:	b164      	cbz	r4, 801564a <rcutils_set_default_allocator+0x2a>
 8015630:	6880      	ldr	r0, [r0, #8]
 8015632:	b138      	cbz	r0, 8015644 <rcutils_set_default_allocator+0x24>
 8015634:	4b08      	ldr	r3, [pc, #32]	; (8015658 <rcutils_set_default_allocator+0x38>)
 8015636:	601a      	str	r2, [r3, #0]
 8015638:	2200      	movs	r2, #0
 801563a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801563e:	2001      	movs	r0, #1
 8015640:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8015644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015648:	4770      	bx	lr
 801564a:	4620      	mov	r0, r4
 801564c:	e7fa      	b.n	8015644 <rcutils_set_default_allocator+0x24>
 801564e:	4770      	bx	lr
 8015650:	4610      	mov	r0, r2
 8015652:	4770      	bx	lr
 8015654:	4608      	mov	r0, r1
 8015656:	4770      	bx	lr
 8015658:	200003b8 	.word	0x200003b8

0801565c <rcutils_get_default_allocator>:
 801565c:	b510      	push	{r4, lr}
 801565e:	4c05      	ldr	r4, [pc, #20]	; (8015674 <rcutils_get_default_allocator+0x18>)
 8015660:	4686      	mov	lr, r0
 8015662:	4684      	mov	ip, r0
 8015664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015666:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801566a:	6823      	ldr	r3, [r4, #0]
 801566c:	4670      	mov	r0, lr
 801566e:	f8cc 3000 	str.w	r3, [ip]
 8015672:	bd10      	pop	{r4, pc}
 8015674:	200003b8 	.word	0x200003b8

08015678 <rcutils_allocator_is_valid>:
 8015678:	b158      	cbz	r0, 8015692 <rcutils_allocator_is_valid+0x1a>
 801567a:	6803      	ldr	r3, [r0, #0]
 801567c:	b143      	cbz	r3, 8015690 <rcutils_allocator_is_valid+0x18>
 801567e:	6843      	ldr	r3, [r0, #4]
 8015680:	b133      	cbz	r3, 8015690 <rcutils_allocator_is_valid+0x18>
 8015682:	68c3      	ldr	r3, [r0, #12]
 8015684:	b123      	cbz	r3, 8015690 <rcutils_allocator_is_valid+0x18>
 8015686:	6880      	ldr	r0, [r0, #8]
 8015688:	3800      	subs	r0, #0
 801568a:	bf18      	it	ne
 801568c:	2001      	movne	r0, #1
 801568e:	4770      	bx	lr
 8015690:	4618      	mov	r0, r3
 8015692:	4770      	bx	lr

08015694 <rcutils_get_error_string>:
 8015694:	4b06      	ldr	r3, [pc, #24]	; (80156b0 <rcutils_get_error_string+0x1c>)
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	b13b      	cbz	r3, 80156aa <rcutils_get_error_string+0x16>
 801569a:	4b06      	ldr	r3, [pc, #24]	; (80156b4 <rcutils_get_error_string+0x20>)
 801569c:	781a      	ldrb	r2, [r3, #0]
 801569e:	b90a      	cbnz	r2, 80156a4 <rcutils_get_error_string+0x10>
 80156a0:	2201      	movs	r2, #1
 80156a2:	701a      	strb	r2, [r3, #0]
 80156a4:	4b04      	ldr	r3, [pc, #16]	; (80156b8 <rcutils_get_error_string+0x24>)
 80156a6:	7818      	ldrb	r0, [r3, #0]
 80156a8:	4770      	bx	lr
 80156aa:	4b04      	ldr	r3, [pc, #16]	; (80156bc <rcutils_get_error_string+0x28>)
 80156ac:	7818      	ldrb	r0, [r3, #0]
 80156ae:	4770      	bx	lr
 80156b0:	20012ba8 	.word	0x20012ba8
 80156b4:	20012bc1 	.word	0x20012bc1
 80156b8:	20012bc0 	.word	0x20012bc0
 80156bc:	08022724 	.word	0x08022724

080156c0 <rcutils_reset_error>:
 80156c0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80156e0 <rcutils_reset_error+0x20>
 80156c4:	2300      	movs	r3, #0
 80156c6:	4a08      	ldr	r2, [pc, #32]	; (80156e8 <rcutils_reset_error+0x28>)
 80156c8:	4808      	ldr	r0, [pc, #32]	; (80156ec <rcutils_reset_error+0x2c>)
 80156ca:	8013      	strh	r3, [r2, #0]
 80156cc:	4908      	ldr	r1, [pc, #32]	; (80156f0 <rcutils_reset_error+0x30>)
 80156ce:	7003      	strb	r3, [r0, #0]
 80156d0:	700b      	strb	r3, [r1, #0]
 80156d2:	ed82 7b02 	vstr	d7, [r2, #8]
 80156d6:	4a07      	ldr	r2, [pc, #28]	; (80156f4 <rcutils_reset_error+0x34>)
 80156d8:	7013      	strb	r3, [r2, #0]
 80156da:	4770      	bx	lr
 80156dc:	f3af 8000 	nop.w
	...
 80156e8:	20012bb0 	.word	0x20012bb0
 80156ec:	20012bc1 	.word	0x20012bc1
 80156f0:	20012bc0 	.word	0x20012bc0
 80156f4:	20012ba8 	.word	0x20012ba8

080156f8 <rcutils_system_time_now>:
 80156f8:	b300      	cbz	r0, 801573c <rcutils_system_time_now+0x44>
 80156fa:	b570      	push	{r4, r5, r6, lr}
 80156fc:	b084      	sub	sp, #16
 80156fe:	4604      	mov	r4, r0
 8015700:	2001      	movs	r0, #1
 8015702:	4669      	mov	r1, sp
 8015704:	f7ee fdf8 	bl	80042f8 <clock_gettime>
 8015708:	e9dd 3100 	ldrd	r3, r1, [sp]
 801570c:	2900      	cmp	r1, #0
 801570e:	db12      	blt.n	8015736 <rcutils_system_time_now+0x3e>
 8015710:	ea53 0201 	orrs.w	r2, r3, r1
 8015714:	9d02      	ldr	r5, [sp, #8]
 8015716:	d101      	bne.n	801571c <rcutils_system_time_now+0x24>
 8015718:	2d00      	cmp	r5, #0
 801571a:	db0c      	blt.n	8015736 <rcutils_system_time_now+0x3e>
 801571c:	4e08      	ldr	r6, [pc, #32]	; (8015740 <rcutils_system_time_now+0x48>)
 801571e:	2000      	movs	r0, #0
 8015720:	fba3 3206 	umull	r3, r2, r3, r6
 8015724:	195b      	adds	r3, r3, r5
 8015726:	fb06 2201 	mla	r2, r6, r1, r2
 801572a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801572e:	e9c4 3200 	strd	r3, r2, [r4]
 8015732:	b004      	add	sp, #16
 8015734:	bd70      	pop	{r4, r5, r6, pc}
 8015736:	2002      	movs	r0, #2
 8015738:	b004      	add	sp, #16
 801573a:	bd70      	pop	{r4, r5, r6, pc}
 801573c:	200b      	movs	r0, #11
 801573e:	4770      	bx	lr
 8015740:	3b9aca00 	.word	0x3b9aca00

08015744 <rcutils_steady_time_now>:
 8015744:	b300      	cbz	r0, 8015788 <rcutils_steady_time_now+0x44>
 8015746:	b570      	push	{r4, r5, r6, lr}
 8015748:	b084      	sub	sp, #16
 801574a:	4604      	mov	r4, r0
 801574c:	2000      	movs	r0, #0
 801574e:	4669      	mov	r1, sp
 8015750:	f7ee fdd2 	bl	80042f8 <clock_gettime>
 8015754:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015758:	2900      	cmp	r1, #0
 801575a:	db12      	blt.n	8015782 <rcutils_steady_time_now+0x3e>
 801575c:	ea53 0201 	orrs.w	r2, r3, r1
 8015760:	9d02      	ldr	r5, [sp, #8]
 8015762:	d101      	bne.n	8015768 <rcutils_steady_time_now+0x24>
 8015764:	2d00      	cmp	r5, #0
 8015766:	db0c      	blt.n	8015782 <rcutils_steady_time_now+0x3e>
 8015768:	4e08      	ldr	r6, [pc, #32]	; (801578c <rcutils_steady_time_now+0x48>)
 801576a:	2000      	movs	r0, #0
 801576c:	fba3 3206 	umull	r3, r2, r3, r6
 8015770:	195b      	adds	r3, r3, r5
 8015772:	fb06 2201 	mla	r2, r6, r1, r2
 8015776:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801577a:	e9c4 3200 	strd	r3, r2, [r4]
 801577e:	b004      	add	sp, #16
 8015780:	bd70      	pop	{r4, r5, r6, pc}
 8015782:	2002      	movs	r0, #2
 8015784:	b004      	add	sp, #16
 8015786:	bd70      	pop	{r4, r5, r6, pc}
 8015788:	200b      	movs	r0, #11
 801578a:	4770      	bx	lr
 801578c:	3b9aca00 	.word	0x3b9aca00

08015790 <rmw_get_zero_initialized_init_options>:
 8015790:	b510      	push	{r4, lr}
 8015792:	4604      	mov	r4, r0
 8015794:	2238      	movs	r2, #56	; 0x38
 8015796:	2100      	movs	r1, #0
 8015798:	f00b fc18 	bl	8020fcc <memset>
 801579c:	f104 0010 	add.w	r0, r4, #16
 80157a0:	f000 f80a 	bl	80157b8 <rmw_get_default_security_options>
 80157a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157a8:	4620      	mov	r0, r4
 80157aa:	60e3      	str	r3, [r4, #12]
 80157ac:	bd10      	pop	{r4, pc}
 80157ae:	bf00      	nop

080157b0 <rmw_get_default_publisher_options>:
 80157b0:	2200      	movs	r2, #0
 80157b2:	6002      	str	r2, [r0, #0]
 80157b4:	7102      	strb	r2, [r0, #4]
 80157b6:	4770      	bx	lr

080157b8 <rmw_get_default_security_options>:
 80157b8:	2200      	movs	r2, #0
 80157ba:	7002      	strb	r2, [r0, #0]
 80157bc:	6042      	str	r2, [r0, #4]
 80157be:	4770      	bx	lr

080157c0 <rmw_uros_set_custom_transport>:
 80157c0:	b470      	push	{r4, r5, r6}
 80157c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80157c6:	b162      	cbz	r2, 80157e2 <rmw_uros_set_custom_transport+0x22>
 80157c8:	b15b      	cbz	r3, 80157e2 <rmw_uros_set_custom_transport+0x22>
 80157ca:	b155      	cbz	r5, 80157e2 <rmw_uros_set_custom_transport+0x22>
 80157cc:	b14e      	cbz	r6, 80157e2 <rmw_uros_set_custom_transport+0x22>
 80157ce:	4c06      	ldr	r4, [pc, #24]	; (80157e8 <rmw_uros_set_custom_transport+0x28>)
 80157d0:	7020      	strb	r0, [r4, #0]
 80157d2:	2000      	movs	r0, #0
 80157d4:	6166      	str	r6, [r4, #20]
 80157d6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80157da:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80157de:	bc70      	pop	{r4, r5, r6}
 80157e0:	4770      	bx	lr
 80157e2:	200b      	movs	r0, #11
 80157e4:	bc70      	pop	{r4, r5, r6}
 80157e6:	4770      	bx	lr
 80157e8:	20012bc4 	.word	0x20012bc4

080157ec <rmw_uros_ping_agent>:
 80157ec:	4b1f      	ldr	r3, [pc, #124]	; (801586c <rmw_uros_ping_agent+0x80>)
 80157ee:	7b1a      	ldrb	r2, [r3, #12]
 80157f0:	b570      	push	{r4, r5, r6, lr}
 80157f2:	4605      	mov	r5, r0
 80157f4:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80157f8:	460e      	mov	r6, r1
 80157fa:	b192      	cbz	r2, 8015822 <rmw_uros_ping_agent+0x36>
 80157fc:	681c      	ldr	r4, [r3, #0]
 80157fe:	b184      	cbz	r4, 8015822 <rmw_uros_ping_agent+0x36>
 8015800:	68a0      	ldr	r0, [r4, #8]
 8015802:	4632      	mov	r2, r6
 8015804:	4629      	mov	r1, r5
 8015806:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801580a:	f001 fea9 	bl	8017560 <uxr_ping_agent_session>
 801580e:	6864      	ldr	r4, [r4, #4]
 8015810:	f080 0301 	eor.w	r3, r0, #1
 8015814:	b2d8      	uxtb	r0, r3
 8015816:	b10c      	cbz	r4, 801581c <rmw_uros_ping_agent+0x30>
 8015818:	2800      	cmp	r0, #0
 801581a:	d1f1      	bne.n	8015800 <rmw_uros_ping_agent+0x14>
 801581c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8015820:	bd70      	pop	{r4, r5, r6, pc}
 8015822:	4b13      	ldr	r3, [pc, #76]	; (8015870 <rmw_uros_ping_agent+0x84>)
 8015824:	2100      	movs	r1, #0
 8015826:	781a      	ldrb	r2, [r3, #0]
 8015828:	6918      	ldr	r0, [r3, #16]
 801582a:	f88d 2200 	strb.w	r2, [sp, #512]	; 0x200
 801582e:	685a      	ldr	r2, [r3, #4]
 8015830:	909c      	str	r0, [sp, #624]	; 0x270
 8015832:	92a3      	str	r2, [sp, #652]	; 0x28c
 8015834:	6958      	ldr	r0, [r3, #20]
 8015836:	68da      	ldr	r2, [r3, #12]
 8015838:	689b      	ldr	r3, [r3, #8]
 801583a:	929b      	str	r2, [sp, #620]	; 0x26c
 801583c:	466a      	mov	r2, sp
 801583e:	909d      	str	r0, [sp, #628]	; 0x274
 8015840:	4608      	mov	r0, r1
 8015842:	939a      	str	r3, [sp, #616]	; 0x268
 8015844:	f000 fef2 	bl	801662c <rmw_uxrce_transport_init>
 8015848:	2800      	cmp	r0, #0
 801584a:	d1e7      	bne.n	801581c <rmw_uros_ping_agent+0x30>
 801584c:	4632      	mov	r2, r6
 801584e:	4629      	mov	r1, r5
 8015850:	a89e      	add	r0, sp, #632	; 0x278
 8015852:	f001 fed1 	bl	80175f8 <uxr_ping_agent_attempts>
 8015856:	4604      	mov	r4, r0
 8015858:	4668      	mov	r0, sp
 801585a:	f001 fe4d 	bl	80174f8 <uxr_close_custom_transport>
 801585e:	f084 0301 	eor.w	r3, r4, #1
 8015862:	b2d8      	uxtb	r0, r3
 8015864:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8015868:	bd70      	pop	{r4, r5, r6, pc}
 801586a:	bf00      	nop
 801586c:	2001751c 	.word	0x2001751c
 8015870:	20012bc4 	.word	0x20012bc4

08015874 <rmw_init_options_init>:
 8015874:	b084      	sub	sp, #16
 8015876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015878:	b083      	sub	sp, #12
 801587a:	ad09      	add	r5, sp, #36	; 0x24
 801587c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015880:	b130      	cbz	r0, 8015890 <rmw_init_options_init+0x1c>
 8015882:	4604      	mov	r4, r0
 8015884:	4628      	mov	r0, r5
 8015886:	f7ff fef7 	bl	8015678 <rcutils_allocator_is_valid>
 801588a:	b108      	cbz	r0, 8015890 <rmw_init_options_init+0x1c>
 801588c:	68a6      	ldr	r6, [r4, #8]
 801588e:	b12e      	cbz	r6, 801589c <rmw_init_options_init+0x28>
 8015890:	200b      	movs	r0, #11
 8015892:	b003      	add	sp, #12
 8015894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015898:	b004      	add	sp, #16
 801589a:	4770      	bx	lr
 801589c:	2200      	movs	r2, #0
 801589e:	2300      	movs	r3, #0
 80158a0:	f104 0c20 	add.w	ip, r4, #32
 80158a4:	f8df e098 	ldr.w	lr, [pc, #152]	; 8015940 <rmw_init_options_init+0xcc>
 80158a8:	466f      	mov	r7, sp
 80158aa:	e9c4 2300 	strd	r2, r3, [r4]
 80158ae:	4b20      	ldr	r3, [pc, #128]	; (8015930 <rmw_init_options_init+0xbc>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	60a3      	str	r3, [r4, #8]
 80158b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158ba:	682b      	ldr	r3, [r5, #0]
 80158bc:	4638      	mov	r0, r7
 80158be:	f8cc 3000 	str.w	r3, [ip]
 80158c2:	f8c4 e01c 	str.w	lr, [r4, #28]
 80158c6:	60e6      	str	r6, [r4, #12]
 80158c8:	f7ff ff76 	bl	80157b8 <rmw_get_default_security_options>
 80158cc:	f104 0310 	add.w	r3, r4, #16
 80158d0:	2203      	movs	r2, #3
 80158d2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80158d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80158da:	4816      	ldr	r0, [pc, #88]	; (8015934 <rmw_init_options_init+0xc0>)
 80158dc:	4916      	ldr	r1, [pc, #88]	; (8015938 <rmw_init_options_init+0xc4>)
 80158de:	7626      	strb	r6, [r4, #24]
 80158e0:	f000 ffbc 	bl	801685c <rmw_uxrce_init_init_options_impl_memory>
 80158e4:	4813      	ldr	r0, [pc, #76]	; (8015934 <rmw_init_options_init+0xc0>)
 80158e6:	f008 fedd 	bl	801e6a4 <get_memory>
 80158ea:	b1f0      	cbz	r0, 801592a <rmw_init_options_init+0xb6>
 80158ec:	4a13      	ldr	r2, [pc, #76]	; (801593c <rmw_init_options_init+0xc8>)
 80158ee:	6883      	ldr	r3, [r0, #8]
 80158f0:	6851      	ldr	r1, [r2, #4]
 80158f2:	6363      	str	r3, [r4, #52]	; 0x34
 80158f4:	7810      	ldrb	r0, [r2, #0]
 80158f6:	6159      	str	r1, [r3, #20]
 80158f8:	68d1      	ldr	r1, [r2, #12]
 80158fa:	7418      	strb	r0, [r3, #16]
 80158fc:	61d9      	str	r1, [r3, #28]
 80158fe:	6911      	ldr	r1, [r2, #16]
 8015900:	6219      	str	r1, [r3, #32]
 8015902:	6951      	ldr	r1, [r2, #20]
 8015904:	6892      	ldr	r2, [r2, #8]
 8015906:	6259      	str	r1, [r3, #36]	; 0x24
 8015908:	619a      	str	r2, [r3, #24]
 801590a:	f003 ff3d 	bl	8019788 <uxr_nanos>
 801590e:	f00a fee7 	bl	80206e0 <srand>
 8015912:	f00a ff13 	bl	802073c <rand>
 8015916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015918:	6298      	str	r0, [r3, #40]	; 0x28
 801591a:	2800      	cmp	r0, #0
 801591c:	d0f9      	beq.n	8015912 <rmw_init_options_init+0x9e>
 801591e:	2000      	movs	r0, #0
 8015920:	b003      	add	sp, #12
 8015922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015926:	b004      	add	sp, #16
 8015928:	4770      	bx	lr
 801592a:	2001      	movs	r0, #1
 801592c:	e7b1      	b.n	8015892 <rmw_init_options_init+0x1e>
 801592e:	bf00      	nop
 8015930:	08023148 	.word	0x08023148
 8015934:	200174dc 	.word	0x200174dc
 8015938:	20012d78 	.word	0x20012d78
 801593c:	20012bc4 	.word	0x20012bc4
 8015940:	08022728 	.word	0x08022728

08015944 <rmw_init_options_copy>:
 8015944:	2800      	cmp	r0, #0
 8015946:	d047      	beq.n	80159d8 <rmw_init_options_copy+0x94>
 8015948:	b570      	push	{r4, r5, r6, lr}
 801594a:	460d      	mov	r5, r1
 801594c:	b149      	cbz	r1, 8015962 <rmw_init_options_copy+0x1e>
 801594e:	4604      	mov	r4, r0
 8015950:	6880      	ldr	r0, [r0, #8]
 8015952:	b120      	cbz	r0, 801595e <rmw_init_options_copy+0x1a>
 8015954:	4b22      	ldr	r3, [pc, #136]	; (80159e0 <rmw_init_options_copy+0x9c>)
 8015956:	6819      	ldr	r1, [r3, #0]
 8015958:	f7ea fc72 	bl	8000240 <strcmp>
 801595c:	bba8      	cbnz	r0, 80159ca <rmw_init_options_copy+0x86>
 801595e:	68ab      	ldr	r3, [r5, #8]
 8015960:	b11b      	cbz	r3, 801596a <rmw_init_options_copy+0x26>
 8015962:	f04f 0c0b 	mov.w	ip, #11
 8015966:	4660      	mov	r0, ip
 8015968:	bd70      	pop	{r4, r5, r6, pc}
 801596a:	4623      	mov	r3, r4
 801596c:	462a      	mov	r2, r5
 801596e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015972:	f8d3 e000 	ldr.w	lr, [r3]
 8015976:	3310      	adds	r3, #16
 8015978:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801597c:	3210      	adds	r2, #16
 801597e:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8015982:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015986:	42b3      	cmp	r3, r6
 8015988:	f842 ec10 	str.w	lr, [r2, #-16]
 801598c:	f842 cc0c 	str.w	ip, [r2, #-12]
 8015990:	f842 0c08 	str.w	r0, [r2, #-8]
 8015994:	f842 1c04 	str.w	r1, [r2, #-4]
 8015998:	d1eb      	bne.n	8015972 <rmw_init_options_copy+0x2e>
 801599a:	6819      	ldr	r1, [r3, #0]
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	4811      	ldr	r0, [pc, #68]	; (80159e4 <rmw_init_options_copy+0xa0>)
 80159a0:	6011      	str	r1, [r2, #0]
 80159a2:	6053      	str	r3, [r2, #4]
 80159a4:	f008 fe7e 	bl	801e6a4 <get_memory>
 80159a8:	b198      	cbz	r0, 80159d2 <rmw_init_options_copy+0x8e>
 80159aa:	6883      	ldr	r3, [r0, #8]
 80159ac:	f04f 0c00 	mov.w	ip, #0
 80159b0:	636b      	str	r3, [r5, #52]	; 0x34
 80159b2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80159b4:	f103 0410 	add.w	r4, r3, #16
 80159b8:	3510      	adds	r5, #16
 80159ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80159c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80159c6:	4660      	mov	r0, ip
 80159c8:	bd70      	pop	{r4, r5, r6, pc}
 80159ca:	f04f 0c0c 	mov.w	ip, #12
 80159ce:	4660      	mov	r0, ip
 80159d0:	bd70      	pop	{r4, r5, r6, pc}
 80159d2:	f04f 0c01 	mov.w	ip, #1
 80159d6:	e7c6      	b.n	8015966 <rmw_init_options_copy+0x22>
 80159d8:	f04f 0c0b 	mov.w	ip, #11
 80159dc:	4660      	mov	r0, ip
 80159de:	4770      	bx	lr
 80159e0:	08023148 	.word	0x08023148
 80159e4:	200174dc 	.word	0x200174dc

080159e8 <rmw_init_options_fini>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	b08e      	sub	sp, #56	; 0x38
 80159ec:	b388      	cbz	r0, 8015a52 <rmw_init_options_fini+0x6a>
 80159ee:	4604      	mov	r4, r0
 80159f0:	3020      	adds	r0, #32
 80159f2:	f7ff fe41 	bl	8015678 <rcutils_allocator_is_valid>
 80159f6:	b360      	cbz	r0, 8015a52 <rmw_init_options_fini+0x6a>
 80159f8:	68a0      	ldr	r0, [r4, #8]
 80159fa:	b120      	cbz	r0, 8015a06 <rmw_init_options_fini+0x1e>
 80159fc:	4b1a      	ldr	r3, [pc, #104]	; (8015a68 <rmw_init_options_fini+0x80>)
 80159fe:	6819      	ldr	r1, [r3, #0]
 8015a00:	f7ea fc1e 	bl	8000240 <strcmp>
 8015a04:	bb68      	cbnz	r0, 8015a62 <rmw_init_options_fini+0x7a>
 8015a06:	4b19      	ldr	r3, [pc, #100]	; (8015a6c <rmw_init_options_fini+0x84>)
 8015a08:	6819      	ldr	r1, [r3, #0]
 8015a0a:	b331      	cbz	r1, 8015a5a <rmw_init_options_fini+0x72>
 8015a0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015a0e:	e001      	b.n	8015a14 <rmw_init_options_fini+0x2c>
 8015a10:	6849      	ldr	r1, [r1, #4]
 8015a12:	b311      	cbz	r1, 8015a5a <rmw_init_options_fini+0x72>
 8015a14:	688b      	ldr	r3, [r1, #8]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d1fa      	bne.n	8015a10 <rmw_init_options_fini+0x28>
 8015a1a:	4814      	ldr	r0, [pc, #80]	; (8015a6c <rmw_init_options_fini+0x84>)
 8015a1c:	f008 fe52 	bl	801e6c4 <put_memory>
 8015a20:	4668      	mov	r0, sp
 8015a22:	f7ff feb5 	bl	8015790 <rmw_get_zero_initialized_init_options>
 8015a26:	46ee      	mov	lr, sp
 8015a28:	46a4      	mov	ip, r4
 8015a2a:	2400      	movs	r4, #0
 8015a2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a44:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a48:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	b00e      	add	sp, #56	; 0x38
 8015a50:	bd10      	pop	{r4, pc}
 8015a52:	240b      	movs	r4, #11
 8015a54:	4620      	mov	r0, r4
 8015a56:	b00e      	add	sp, #56	; 0x38
 8015a58:	bd10      	pop	{r4, pc}
 8015a5a:	2401      	movs	r4, #1
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	b00e      	add	sp, #56	; 0x38
 8015a60:	bd10      	pop	{r4, pc}
 8015a62:	240c      	movs	r4, #12
 8015a64:	e7f2      	b.n	8015a4c <rmw_init_options_fini+0x64>
 8015a66:	bf00      	nop
 8015a68:	08023148 	.word	0x08023148
 8015a6c:	200174dc 	.word	0x200174dc

08015a70 <rmw_init>:
 8015a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a74:	b083      	sub	sp, #12
 8015a76:	2800      	cmp	r0, #0
 8015a78:	f000 80d3 	beq.w	8015c22 <rmw_init+0x1b2>
 8015a7c:	460e      	mov	r6, r1
 8015a7e:	2900      	cmp	r1, #0
 8015a80:	f000 80cf 	beq.w	8015c22 <rmw_init+0x1b2>
 8015a84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015a86:	4605      	mov	r5, r0
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	f000 80ca 	beq.w	8015c22 <rmw_init+0x1b2>
 8015a8e:	4b78      	ldr	r3, [pc, #480]	; (8015c70 <rmw_init+0x200>)
 8015a90:	6880      	ldr	r0, [r0, #8]
 8015a92:	681f      	ldr	r7, [r3, #0]
 8015a94:	b128      	cbz	r0, 8015aa2 <rmw_init+0x32>
 8015a96:	4639      	mov	r1, r7
 8015a98:	f7ea fbd2 	bl	8000240 <strcmp>
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	f040 80ca 	bne.w	8015c36 <rmw_init+0x1c6>
 8015aa2:	4c74      	ldr	r4, [pc, #464]	; (8015c74 <rmw_init+0x204>)
 8015aa4:	f04f 0800 	mov.w	r8, #0
 8015aa8:	4973      	ldr	r1, [pc, #460]	; (8015c78 <rmw_init+0x208>)
 8015aaa:	4874      	ldr	r0, [pc, #464]	; (8015c7c <rmw_init+0x20c>)
 8015aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ab0:	60b7      	str	r7, [r6, #8]
 8015ab2:	e9c6 2300 	strd	r2, r3, [r6]
 8015ab6:	68eb      	ldr	r3, [r5, #12]
 8015ab8:	2201      	movs	r2, #1
 8015aba:	64b3      	str	r3, [r6, #72]	; 0x48
 8015abc:	f000 fe6e 	bl	801679c <rmw_uxrce_init_session_memory>
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	2204      	movs	r2, #4
 8015ac4:	496e      	ldr	r1, [pc, #440]	; (8015c80 <rmw_init+0x210>)
 8015ac6:	f000 fea9 	bl	801681c <rmw_uxrce_init_static_input_buffer_memory>
 8015aca:	486c      	ldr	r0, [pc, #432]	; (8015c7c <rmw_init+0x20c>)
 8015acc:	f884 800d 	strb.w	r8, [r4, #13]
 8015ad0:	f008 fde8 	bl	801e6a4 <get_memory>
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	f000 80a9 	beq.w	8015c2c <rmw_init+0x1bc>
 8015ada:	6884      	ldr	r4, [r0, #8]
 8015adc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015ade:	f104 0910 	add.w	r9, r4, #16
 8015ae2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015ae4:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015ae8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015aec:	9101      	str	r1, [sp, #4]
 8015aee:	4661      	mov	r1, ip
 8015af0:	6a00      	ldr	r0, [r0, #32]
 8015af2:	9000      	str	r0, [sp, #0]
 8015af4:	4648      	mov	r0, r9
 8015af6:	f001 fcc1 	bl	801747c <uxr_set_custom_transport_callbacks>
 8015afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015afe:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8015b02:	4960      	ldr	r1, [pc, #384]	; (8015c84 <rmw_init+0x214>)
 8015b04:	4860      	ldr	r0, [pc, #384]	; (8015c88 <rmw_init+0x218>)
 8015b06:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015b0a:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8015b0e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8015b12:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015b16:	2201      	movs	r2, #1
 8015b18:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015b1c:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015b20:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015b24:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8015b28:	64f4      	str	r4, [r6, #76]	; 0x4c
 8015b2a:	f000 fe17 	bl	801675c <rmw_uxrce_init_node_memory>
 8015b2e:	2205      	movs	r2, #5
 8015b30:	4956      	ldr	r1, [pc, #344]	; (8015c8c <rmw_init+0x21c>)
 8015b32:	4857      	ldr	r0, [pc, #348]	; (8015c90 <rmw_init+0x220>)
 8015b34:	f000 fdf2 	bl	801671c <rmw_uxrce_init_subscription_memory>
 8015b38:	220a      	movs	r2, #10
 8015b3a:	4956      	ldr	r1, [pc, #344]	; (8015c94 <rmw_init+0x224>)
 8015b3c:	4856      	ldr	r0, [pc, #344]	; (8015c98 <rmw_init+0x228>)
 8015b3e:	f000 fdcd 	bl	80166dc <rmw_uxrce_init_publisher_memory>
 8015b42:	2201      	movs	r2, #1
 8015b44:	4955      	ldr	r1, [pc, #340]	; (8015c9c <rmw_init+0x22c>)
 8015b46:	4856      	ldr	r0, [pc, #344]	; (8015ca0 <rmw_init+0x230>)
 8015b48:	f000 fd88 	bl	801665c <rmw_uxrce_init_service_memory>
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	4955      	ldr	r1, [pc, #340]	; (8015ca4 <rmw_init+0x234>)
 8015b50:	4855      	ldr	r0, [pc, #340]	; (8015ca8 <rmw_init+0x238>)
 8015b52:	f000 fda3 	bl	801669c <rmw_uxrce_init_client_memory>
 8015b56:	220f      	movs	r2, #15
 8015b58:	4954      	ldr	r1, [pc, #336]	; (8015cac <rmw_init+0x23c>)
 8015b5a:	4855      	ldr	r0, [pc, #340]	; (8015cb0 <rmw_init+0x240>)
 8015b5c:	f000 fe3e 	bl	80167dc <rmw_uxrce_init_topic_memory>
 8015b60:	2203      	movs	r2, #3
 8015b62:	4954      	ldr	r1, [pc, #336]	; (8015cb4 <rmw_init+0x244>)
 8015b64:	4854      	ldr	r0, [pc, #336]	; (8015cb8 <rmw_init+0x248>)
 8015b66:	f000 fe79 	bl	801685c <rmw_uxrce_init_init_options_impl_memory>
 8015b6a:	2204      	movs	r2, #4
 8015b6c:	4953      	ldr	r1, [pc, #332]	; (8015cbc <rmw_init+0x24c>)
 8015b6e:	4854      	ldr	r0, [pc, #336]	; (8015cc0 <rmw_init+0x250>)
 8015b70:	f000 fe94 	bl	801689c <rmw_uxrce_init_wait_set_memory>
 8015b74:	4953      	ldr	r1, [pc, #332]	; (8015cc4 <rmw_init+0x254>)
 8015b76:	4854      	ldr	r0, [pc, #336]	; (8015cc8 <rmw_init+0x258>)
 8015b78:	2204      	movs	r2, #4
 8015b7a:	f000 feaf 	bl	80168dc <rmw_uxrce_init_guard_condition_memory>
 8015b7e:	4642      	mov	r2, r8
 8015b80:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8015b82:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015b84:	f000 fd52 	bl	801662c <rmw_uxrce_transport_init>
 8015b88:	4607      	mov	r7, r0
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d158      	bne.n	8015c40 <rmw_init+0x1d0>
 8015b8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015b90:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015b94:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	f001 ffa4 	bl	8017ae8 <uxr_init_session>
 8015ba0:	4622      	mov	r2, r4
 8015ba2:	494a      	ldr	r1, [pc, #296]	; (8015ccc <rmw_init+0x25c>)
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	f001 ffc3 	bl	8017b30 <uxr_set_topic_callback>
 8015baa:	463a      	mov	r2, r7
 8015bac:	4948      	ldr	r1, [pc, #288]	; (8015cd0 <rmw_init+0x260>)
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f001 ffba 	bl	8017b28 <uxr_set_status_callback>
 8015bb4:	463a      	mov	r2, r7
 8015bb6:	4947      	ldr	r1, [pc, #284]	; (8015cd4 <rmw_init+0x264>)
 8015bb8:	4628      	mov	r0, r5
 8015bba:	f001 ffbd 	bl	8017b38 <uxr_set_request_callback>
 8015bbe:	463a      	mov	r2, r7
 8015bc0:	4945      	ldr	r1, [pc, #276]	; (8015cd8 <rmw_init+0x268>)
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f001 ffbc 	bl	8017b40 <uxr_set_reply_callback>
 8015bc8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015bcc:	2304      	movs	r3, #4
 8015bce:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015bd2:	0092      	lsls	r2, r2, #2
 8015bd4:	4628      	mov	r0, r5
 8015bd6:	f001 fff3 	bl	8017bc0 <uxr_create_input_reliable_stream>
 8015bda:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015bde:	2304      	movs	r3, #4
 8015be0:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015be4:	0092      	lsls	r2, r2, #2
 8015be6:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015bea:	4628      	mov	r0, r5
 8015bec:	f001 ffbe 	bl	8017b6c <uxr_create_output_reliable_stream>
 8015bf0:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015bf4:	4628      	mov	r0, r5
 8015bf6:	f001 ffdd 	bl	8017bb4 <uxr_create_input_best_effort_stream>
 8015bfa:	f241 3194 	movw	r1, #5012	; 0x1394
 8015bfe:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015c02:	4628      	mov	r0, r5
 8015c04:	4421      	add	r1, r4
 8015c06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015c0a:	f001 ff9d 	bl	8017b48 <uxr_create_output_best_effort_stream>
 8015c0e:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015c12:	4628      	mov	r0, r5
 8015c14:	f002 fd50 	bl	80186b8 <uxr_create_session>
 8015c18:	b1f8      	cbz	r0, 8015c5a <rmw_init+0x1ea>
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	b003      	add	sp, #12
 8015c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c22:	270b      	movs	r7, #11
 8015c24:	4638      	mov	r0, r7
 8015c26:	b003      	add	sp, #12
 8015c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c2c:	2701      	movs	r7, #1
 8015c2e:	4638      	mov	r0, r7
 8015c30:	b003      	add	sp, #12
 8015c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c36:	270c      	movs	r7, #12
 8015c38:	4638      	mov	r0, r7
 8015c3a:	b003      	add	sp, #12
 8015c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c40:	4648      	mov	r0, r9
 8015c42:	f001 fc59 	bl	80174f8 <uxr_close_custom_transport>
 8015c46:	4621      	mov	r1, r4
 8015c48:	480c      	ldr	r0, [pc, #48]	; (8015c7c <rmw_init+0x20c>)
 8015c4a:	f008 fd3b 	bl	801e6c4 <put_memory>
 8015c4e:	4638      	mov	r0, r7
 8015c50:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015c54:	b003      	add	sp, #12
 8015c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c5a:	4648      	mov	r0, r9
 8015c5c:	f001 fc4c 	bl	80174f8 <uxr_close_custom_transport>
 8015c60:	4621      	mov	r1, r4
 8015c62:	4806      	ldr	r0, [pc, #24]	; (8015c7c <rmw_init+0x20c>)
 8015c64:	f008 fd2e 	bl	801e6c4 <put_memory>
 8015c68:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015c6a:	2701      	movs	r7, #1
 8015c6c:	e7d5      	b.n	8015c1a <rmw_init+0x1aa>
 8015c6e:	bf00      	nop
 8015c70:	08023148 	.word	0x08023148
 8015c74:	2001752c 	.word	0x2001752c
 8015c78:	200137d8 	.word	0x200137d8
 8015c7c:	2001751c 	.word	0x2001751c
 8015c80:	20014d80 	.word	0x20014d80
 8015c84:	20012dfc 	.word	0x20012dfc
 8015c88:	200174ec 	.word	0x200174ec
 8015c8c:	20016e80 	.word	0x20016e80
 8015c90:	2001753c 	.word	0x2001753c
 8015c94:	20012ea0 	.word	0x20012ea0
 8015c98:	200174fc 	.word	0x200174fc
 8015c9c:	20013710 	.word	0x20013710
 8015ca0:	2001750c 	.word	0x2001750c
 8015ca4:	20012c30 	.word	0x20012c30
 8015ca8:	20012c1c 	.word	0x20012c1c
 8015cac:	200172b8 	.word	0x200172b8
 8015cb0:	2001754c 	.word	0x2001754c
 8015cb4:	20012d78 	.word	0x20012d78
 8015cb8:	200174dc 	.word	0x200174dc
 8015cbc:	2001745c 	.word	0x2001745c
 8015cc0:	2001755c 	.word	0x2001755c
 8015cc4:	20012cf8 	.word	0x20012cf8
 8015cc8:	200174cc 	.word	0x200174cc
 8015ccc:	0801e4dd 	.word	0x0801e4dd
 8015cd0:	0801e4d5 	.word	0x0801e4d5
 8015cd4:	0801e575 	.word	0x0801e575
 8015cd8:	0801e611 	.word	0x0801e611

08015cdc <rmw_context_fini>:
 8015cdc:	4b17      	ldr	r3, [pc, #92]	; (8015d3c <rmw_context_fini+0x60>)
 8015cde:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015ce0:	b570      	push	{r4, r5, r6, lr}
 8015ce2:	681c      	ldr	r4, [r3, #0]
 8015ce4:	4605      	mov	r5, r0
 8015ce6:	b334      	cbz	r4, 8015d36 <rmw_context_fini+0x5a>
 8015ce8:	2600      	movs	r6, #0
 8015cea:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015cee:	6902      	ldr	r2, [r0, #16]
 8015cf0:	428a      	cmp	r2, r1
 8015cf2:	d018      	beq.n	8015d26 <rmw_context_fini+0x4a>
 8015cf4:	2c00      	cmp	r4, #0
 8015cf6:	d1f8      	bne.n	8015cea <rmw_context_fini+0xe>
 8015cf8:	b189      	cbz	r1, 8015d1e <rmw_context_fini+0x42>
 8015cfa:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015cfe:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015d02:	789b      	ldrb	r3, [r3, #2]
 8015d04:	2b01      	cmp	r3, #1
 8015d06:	bf14      	ite	ne
 8015d08:	210a      	movne	r1, #10
 8015d0a:	2100      	moveq	r1, #0
 8015d0c:	f002 fcac 	bl	8018668 <uxr_delete_session_retries>
 8015d10:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015d12:	f000 fe03 	bl	801691c <rmw_uxrce_fini_session_memory>
 8015d16:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015d18:	3010      	adds	r0, #16
 8015d1a:	f001 fbed 	bl	80174f8 <uxr_close_custom_transport>
 8015d1e:	2300      	movs	r3, #0
 8015d20:	4630      	mov	r0, r6
 8015d22:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015d24:	bd70      	pop	{r4, r5, r6, pc}
 8015d26:	3018      	adds	r0, #24
 8015d28:	f000 f89c 	bl	8015e64 <rmw_destroy_node>
 8015d2c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015d2e:	4606      	mov	r6, r0
 8015d30:	2c00      	cmp	r4, #0
 8015d32:	d1da      	bne.n	8015cea <rmw_context_fini+0xe>
 8015d34:	e7e0      	b.n	8015cf8 <rmw_context_fini+0x1c>
 8015d36:	4626      	mov	r6, r4
 8015d38:	e7de      	b.n	8015cf8 <rmw_context_fini+0x1c>
 8015d3a:	bf00      	nop
 8015d3c:	200174ec 	.word	0x200174ec

08015d40 <create_node>:
 8015d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d44:	b083      	sub	sp, #12
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d064      	beq.n	8015e14 <create_node+0xd4>
 8015d4a:	4606      	mov	r6, r0
 8015d4c:	4838      	ldr	r0, [pc, #224]	; (8015e30 <create_node+0xf0>)
 8015d4e:	460f      	mov	r7, r1
 8015d50:	4690      	mov	r8, r2
 8015d52:	461d      	mov	r5, r3
 8015d54:	f008 fca6 	bl	801e6a4 <get_memory>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d05b      	beq.n	8015e14 <create_node+0xd4>
 8015d5c:	6884      	ldr	r4, [r0, #8]
 8015d5e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015d60:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015d64:	f104 0518 	add.w	r5, r4, #24
 8015d68:	6123      	str	r3, [r4, #16]
 8015d6a:	f008 fd03 	bl	801e774 <rmw_get_implementation_identifier>
 8015d6e:	f8c4 9020 	str.w	r9, [r4, #32]
 8015d72:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015d76:	4630      	mov	r0, r6
 8015d78:	f7ea fa6c 	bl	8000254 <strlen>
 8015d7c:	1c42      	adds	r2, r0, #1
 8015d7e:	2a3c      	cmp	r2, #60	; 0x3c
 8015d80:	d840      	bhi.n	8015e04 <create_node+0xc4>
 8015d82:	4648      	mov	r0, r9
 8015d84:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015d88:	4631      	mov	r1, r6
 8015d8a:	f00b f9e8 	bl	802115e <memcpy>
 8015d8e:	4638      	mov	r0, r7
 8015d90:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015d94:	f7ea fa5e 	bl	8000254 <strlen>
 8015d98:	1c42      	adds	r2, r0, #1
 8015d9a:	2a3c      	cmp	r2, #60	; 0x3c
 8015d9c:	d832      	bhi.n	8015e04 <create_node+0xc4>
 8015d9e:	4639      	mov	r1, r7
 8015da0:	4648      	mov	r0, r9
 8015da2:	f00b f9dc 	bl	802115e <memcpy>
 8015da6:	6923      	ldr	r3, [r4, #16]
 8015da8:	2101      	movs	r1, #1
 8015daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dae:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015db2:	1842      	adds	r2, r0, r1
 8015db4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015db8:	f001 fba2 	bl	8017500 <uxr_object_id>
 8015dbc:	6160      	str	r0, [r4, #20]
 8015dbe:	783b      	ldrb	r3, [r7, #0]
 8015dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8015dc2:	d12c      	bne.n	8015e1e <create_node+0xde>
 8015dc4:	787b      	ldrb	r3, [r7, #1]
 8015dc6:	bb53      	cbnz	r3, 8015e1e <create_node+0xde>
 8015dc8:	4633      	mov	r3, r6
 8015dca:	4a1a      	ldr	r2, [pc, #104]	; (8015e34 <create_node+0xf4>)
 8015dcc:	213c      	movs	r1, #60	; 0x3c
 8015dce:	481a      	ldr	r0, [pc, #104]	; (8015e38 <create_node+0xf8>)
 8015dd0:	f00a ff8c 	bl	8020cec <sniprintf>
 8015dd4:	6920      	ldr	r0, [r4, #16]
 8015dd6:	2106      	movs	r1, #6
 8015dd8:	fa1f f388 	uxth.w	r3, r8
 8015ddc:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015de0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015de4:	9101      	str	r1, [sp, #4]
 8015de6:	4914      	ldr	r1, [pc, #80]	; (8015e38 <create_node+0xf8>)
 8015de8:	9100      	str	r1, [sp, #0]
 8015dea:	6811      	ldr	r1, [r2, #0]
 8015dec:	6962      	ldr	r2, [r4, #20]
 8015dee:	f001 f913 	bl	8017018 <uxr_buffer_create_participant_bin>
 8015df2:	4602      	mov	r2, r0
 8015df4:	6920      	ldr	r0, [r4, #16]
 8015df6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015dfa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015dfe:	f000 ff11 	bl	8016c24 <run_xrce_session>
 8015e02:	b918      	cbnz	r0, 8015e0c <create_node+0xcc>
 8015e04:	4628      	mov	r0, r5
 8015e06:	2500      	movs	r5, #0
 8015e08:	f000 fd8e 	bl	8016928 <rmw_uxrce_fini_node_memory>
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	b003      	add	sp, #12
 8015e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e14:	2500      	movs	r5, #0
 8015e16:	4628      	mov	r0, r5
 8015e18:	b003      	add	sp, #12
 8015e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e1e:	463b      	mov	r3, r7
 8015e20:	4a06      	ldr	r2, [pc, #24]	; (8015e3c <create_node+0xfc>)
 8015e22:	213c      	movs	r1, #60	; 0x3c
 8015e24:	9600      	str	r6, [sp, #0]
 8015e26:	4804      	ldr	r0, [pc, #16]	; (8015e38 <create_node+0xf8>)
 8015e28:	f00a ff60 	bl	8020cec <sniprintf>
 8015e2c:	e7d2      	b.n	8015dd4 <create_node+0x94>
 8015e2e:	bf00      	nop
 8015e30:	200174ec 	.word	0x200174ec
 8015e34:	08022744 	.word	0x08022744
 8015e38:	20012be0 	.word	0x20012be0
 8015e3c:	0802272c 	.word	0x0802272c

08015e40 <rmw_create_node>:
 8015e40:	468c      	mov	ip, r1
 8015e42:	4611      	mov	r1, r2
 8015e44:	f1bc 0f00 	cmp.w	ip, #0
 8015e48:	d00a      	beq.n	8015e60 <rmw_create_node+0x20>
 8015e4a:	f89c 3000 	ldrb.w	r3, [ip]
 8015e4e:	b13b      	cbz	r3, 8015e60 <rmw_create_node+0x20>
 8015e50:	b132      	cbz	r2, 8015e60 <rmw_create_node+0x20>
 8015e52:	7813      	ldrb	r3, [r2, #0]
 8015e54:	b123      	cbz	r3, 8015e60 <rmw_create_node+0x20>
 8015e56:	4603      	mov	r3, r0
 8015e58:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015e5a:	4660      	mov	r0, ip
 8015e5c:	f7ff bf70 	b.w	8015d40 <create_node>
 8015e60:	2000      	movs	r0, #0
 8015e62:	4770      	bx	lr

08015e64 <rmw_destroy_node>:
 8015e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e66:	b328      	cbz	r0, 8015eb4 <rmw_destroy_node+0x50>
 8015e68:	4607      	mov	r7, r0
 8015e6a:	6800      	ldr	r0, [r0, #0]
 8015e6c:	b120      	cbz	r0, 8015e78 <rmw_destroy_node+0x14>
 8015e6e:	4b37      	ldr	r3, [pc, #220]	; (8015f4c <rmw_destroy_node+0xe8>)
 8015e70:	6819      	ldr	r1, [r3, #0]
 8015e72:	f7ea f9e5 	bl	8000240 <strcmp>
 8015e76:	b9e8      	cbnz	r0, 8015eb4 <rmw_destroy_node+0x50>
 8015e78:	687d      	ldr	r5, [r7, #4]
 8015e7a:	b1dd      	cbz	r5, 8015eb4 <rmw_destroy_node+0x50>
 8015e7c:	4b34      	ldr	r3, [pc, #208]	; (8015f50 <rmw_destroy_node+0xec>)
 8015e7e:	681c      	ldr	r4, [r3, #0]
 8015e80:	2c00      	cmp	r4, #0
 8015e82:	d060      	beq.n	8015f46 <rmw_destroy_node+0xe2>
 8015e84:	2600      	movs	r6, #0
 8015e86:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015e8a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015e8e:	429d      	cmp	r5, r3
 8015e90:	d013      	beq.n	8015eba <rmw_destroy_node+0x56>
 8015e92:	2c00      	cmp	r4, #0
 8015e94:	d1f7      	bne.n	8015e86 <rmw_destroy_node+0x22>
 8015e96:	4b2f      	ldr	r3, [pc, #188]	; (8015f54 <rmw_destroy_node+0xf0>)
 8015e98:	681c      	ldr	r4, [r3, #0]
 8015e9a:	b1c4      	cbz	r4, 8015ece <rmw_destroy_node+0x6a>
 8015e9c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015ea0:	6a0b      	ldr	r3, [r1, #32]
 8015ea2:	429d      	cmp	r5, r3
 8015ea4:	d1f9      	bne.n	8015e9a <rmw_destroy_node+0x36>
 8015ea6:	317c      	adds	r1, #124	; 0x7c
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f000 fb5d 	bl	8016568 <rmw_destroy_subscription>
 8015eae:	2801      	cmp	r0, #1
 8015eb0:	4606      	mov	r6, r0
 8015eb2:	d1f2      	bne.n	8015e9a <rmw_destroy_node+0x36>
 8015eb4:	2601      	movs	r6, #1
 8015eb6:	4630      	mov	r0, r6
 8015eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015eba:	3184      	adds	r1, #132	; 0x84
 8015ebc:	4638      	mov	r0, r7
 8015ebe:	f000 f9b1 	bl	8016224 <rmw_destroy_publisher>
 8015ec2:	2801      	cmp	r0, #1
 8015ec4:	4606      	mov	r6, r0
 8015ec6:	d0f5      	beq.n	8015eb4 <rmw_destroy_node+0x50>
 8015ec8:	2c00      	cmp	r4, #0
 8015eca:	d1dc      	bne.n	8015e86 <rmw_destroy_node+0x22>
 8015ecc:	e7e3      	b.n	8015e96 <rmw_destroy_node+0x32>
 8015ece:	4b22      	ldr	r3, [pc, #136]	; (8015f58 <rmw_destroy_node+0xf4>)
 8015ed0:	681c      	ldr	r4, [r3, #0]
 8015ed2:	b16c      	cbz	r4, 8015ef0 <rmw_destroy_node+0x8c>
 8015ed4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015ed8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015eda:	429d      	cmp	r5, r3
 8015edc:	d1f9      	bne.n	8015ed2 <rmw_destroy_node+0x6e>
 8015ede:	317c      	adds	r1, #124	; 0x7c
 8015ee0:	4638      	mov	r0, r7
 8015ee2:	f000 f9f3 	bl	80162cc <rmw_destroy_service>
 8015ee6:	2801      	cmp	r0, #1
 8015ee8:	4606      	mov	r6, r0
 8015eea:	d0e3      	beq.n	8015eb4 <rmw_destroy_node+0x50>
 8015eec:	2c00      	cmp	r4, #0
 8015eee:	d1f1      	bne.n	8015ed4 <rmw_destroy_node+0x70>
 8015ef0:	4b1a      	ldr	r3, [pc, #104]	; (8015f5c <rmw_destroy_node+0xf8>)
 8015ef2:	681c      	ldr	r4, [r3, #0]
 8015ef4:	b16c      	cbz	r4, 8015f12 <rmw_destroy_node+0xae>
 8015ef6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015efa:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015efc:	429d      	cmp	r5, r3
 8015efe:	d1f9      	bne.n	8015ef4 <rmw_destroy_node+0x90>
 8015f00:	317c      	adds	r1, #124	; 0x7c
 8015f02:	4638      	mov	r0, r7
 8015f04:	f008 fbf2 	bl	801e6ec <rmw_destroy_client>
 8015f08:	2801      	cmp	r0, #1
 8015f0a:	4606      	mov	r6, r0
 8015f0c:	d0d2      	beq.n	8015eb4 <rmw_destroy_node+0x50>
 8015f0e:	2c00      	cmp	r4, #0
 8015f10:	d1f1      	bne.n	8015ef6 <rmw_destroy_node+0x92>
 8015f12:	6928      	ldr	r0, [r5, #16]
 8015f14:	696a      	ldr	r2, [r5, #20]
 8015f16:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015f1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015f1e:	6819      	ldr	r1, [r3, #0]
 8015f20:	f001 f82e 	bl	8016f80 <uxr_buffer_delete_entity>
 8015f24:	4602      	mov	r2, r0
 8015f26:	6928      	ldr	r0, [r5, #16]
 8015f28:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015f2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015f30:	f000 fe78 	bl	8016c24 <run_xrce_session>
 8015f34:	4603      	mov	r3, r0
 8015f36:	4638      	mov	r0, r7
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	bf08      	it	eq
 8015f3c:	2602      	moveq	r6, #2
 8015f3e:	f000 fcf3 	bl	8016928 <rmw_uxrce_fini_node_memory>
 8015f42:	4630      	mov	r0, r6
 8015f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f46:	4626      	mov	r6, r4
 8015f48:	e7a5      	b.n	8015e96 <rmw_destroy_node+0x32>
 8015f4a:	bf00      	nop
 8015f4c:	08023148 	.word	0x08023148
 8015f50:	200174fc 	.word	0x200174fc
 8015f54:	2001753c 	.word	0x2001753c
 8015f58:	2001750c 	.word	0x2001750c
 8015f5c:	20012c1c 	.word	0x20012c1c

08015f60 <rmw_node_get_graph_guard_condition>:
 8015f60:	6843      	ldr	r3, [r0, #4]
 8015f62:	6918      	ldr	r0, [r3, #16]
 8015f64:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015f68:	4770      	bx	lr
 8015f6a:	bf00      	nop

08015f6c <flush_session>:
 8015f6c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8015f6e:	f002 ba07 	b.w	8018380 <uxr_run_session_until_confirm_delivery>
 8015f72:	bf00      	nop

08015f74 <rmw_publish>:
 8015f74:	2800      	cmp	r0, #0
 8015f76:	d053      	beq.n	8016020 <rmw_publish+0xac>
 8015f78:	b570      	push	{r4, r5, r6, lr}
 8015f7a:	460d      	mov	r5, r1
 8015f7c:	b08e      	sub	sp, #56	; 0x38
 8015f7e:	2900      	cmp	r1, #0
 8015f80:	d04b      	beq.n	801601a <rmw_publish+0xa6>
 8015f82:	4604      	mov	r4, r0
 8015f84:	6800      	ldr	r0, [r0, #0]
 8015f86:	f000 fec7 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	d045      	beq.n	801601a <rmw_publish+0xa6>
 8015f8e:	6866      	ldr	r6, [r4, #4]
 8015f90:	2e00      	cmp	r6, #0
 8015f92:	d042      	beq.n	801601a <rmw_publish+0xa6>
 8015f94:	69b4      	ldr	r4, [r6, #24]
 8015f96:	4628      	mov	r0, r5
 8015f98:	6923      	ldr	r3, [r4, #16]
 8015f9a:	4798      	blx	r3
 8015f9c:	69f3      	ldr	r3, [r6, #28]
 8015f9e:	9005      	str	r0, [sp, #20]
 8015fa0:	b113      	cbz	r3, 8015fa8 <rmw_publish+0x34>
 8015fa2:	a805      	add	r0, sp, #20
 8015fa4:	4798      	blx	r3
 8015fa6:	9805      	ldr	r0, [sp, #20]
 8015fa8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015fac:	691b      	ldr	r3, [r3, #16]
 8015fae:	9000      	str	r0, [sp, #0]
 8015fb0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015fb4:	6972      	ldr	r2, [r6, #20]
 8015fb6:	ab06      	add	r3, sp, #24
 8015fb8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015fba:	f003 fc85 	bl	80198c8 <uxr_prepare_output_stream>
 8015fbe:	b1d8      	cbz	r0, 8015ff8 <rmw_publish+0x84>
 8015fc0:	68a3      	ldr	r3, [r4, #8]
 8015fc2:	a906      	add	r1, sp, #24
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	4798      	blx	r3
 8015fc8:	6a33      	ldr	r3, [r6, #32]
 8015fca:	4604      	mov	r4, r0
 8015fcc:	b10b      	cbz	r3, 8015fd2 <rmw_publish+0x5e>
 8015fce:	a806      	add	r0, sp, #24
 8015fd0:	4798      	blx	r3
 8015fd2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015fdc:	d022      	beq.n	8016024 <rmw_publish+0xb0>
 8015fde:	6918      	ldr	r0, [r3, #16]
 8015fe0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8015fe2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fe6:	f002 f9cb 	bl	8018380 <uxr_run_session_until_confirm_delivery>
 8015fea:	4020      	ands	r0, r4
 8015fec:	b2c4      	uxtb	r4, r0
 8015fee:	f084 0001 	eor.w	r0, r4, #1
 8015ff2:	b2c0      	uxtb	r0, r0
 8015ff4:	b00e      	add	sp, #56	; 0x38
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}
 8015ff8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015ffc:	6918      	ldr	r0, [r3, #16]
 8015ffe:	9b05      	ldr	r3, [sp, #20]
 8016000:	9602      	str	r6, [sp, #8]
 8016002:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	4b09      	ldr	r3, [pc, #36]	; (8016030 <rmw_publish+0xbc>)
 801600a:	9301      	str	r3, [sp, #4]
 801600c:	ab06      	add	r3, sp, #24
 801600e:	6972      	ldr	r2, [r6, #20]
 8016010:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8016012:	f003 fc89 	bl	8019928 <uxr_prepare_output_stream_fragmented>
 8016016:	2800      	cmp	r0, #0
 8016018:	d1d2      	bne.n	8015fc0 <rmw_publish+0x4c>
 801601a:	2001      	movs	r0, #1
 801601c:	b00e      	add	sp, #56	; 0x38
 801601e:	bd70      	pop	{r4, r5, r6, pc}
 8016020:	2001      	movs	r0, #1
 8016022:	4770      	bx	lr
 8016024:	6918      	ldr	r0, [r3, #16]
 8016026:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801602a:	f001 fdef 	bl	8017c0c <uxr_flash_output_streams>
 801602e:	e7de      	b.n	8015fee <rmw_publish+0x7a>
 8016030:	08015f6d 	.word	0x08015f6d

08016034 <rmw_create_publisher>:
 8016034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016038:	b087      	sub	sp, #28
 801603a:	2800      	cmp	r0, #0
 801603c:	f000 80d2 	beq.w	80161e4 <rmw_create_publisher+0x1b0>
 8016040:	460e      	mov	r6, r1
 8016042:	2900      	cmp	r1, #0
 8016044:	f000 80ce 	beq.w	80161e4 <rmw_create_publisher+0x1b0>
 8016048:	4604      	mov	r4, r0
 801604a:	6800      	ldr	r0, [r0, #0]
 801604c:	4615      	mov	r5, r2
 801604e:	461f      	mov	r7, r3
 8016050:	f000 fe62 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8016054:	f080 0001 	eor.w	r0, r0, #1
 8016058:	b2c0      	uxtb	r0, r0
 801605a:	2800      	cmp	r0, #0
 801605c:	f040 80c2 	bne.w	80161e4 <rmw_create_publisher+0x1b0>
 8016060:	2d00      	cmp	r5, #0
 8016062:	f000 80bf 	beq.w	80161e4 <rmw_create_publisher+0x1b0>
 8016066:	782b      	ldrb	r3, [r5, #0]
 8016068:	2b00      	cmp	r3, #0
 801606a:	f000 80bb 	beq.w	80161e4 <rmw_create_publisher+0x1b0>
 801606e:	2f00      	cmp	r7, #0
 8016070:	f000 80b8 	beq.w	80161e4 <rmw_create_publisher+0x1b0>
 8016074:	485e      	ldr	r0, [pc, #376]	; (80161f0 <rmw_create_publisher+0x1bc>)
 8016076:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801607a:	f008 fb13 	bl	801e6a4 <get_memory>
 801607e:	2800      	cmp	r0, #0
 8016080:	f000 80b0 	beq.w	80161e4 <rmw_create_publisher+0x1b0>
 8016084:	6884      	ldr	r4, [r0, #8]
 8016086:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 801608a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 801608e:	f008 fb71 	bl	801e774 <rmw_get_implementation_identifier>
 8016092:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8016096:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 801609a:	4628      	mov	r0, r5
 801609c:	f7ea f8da 	bl	8000254 <strlen>
 80160a0:	3001      	adds	r0, #1
 80160a2:	f104 0884 	add.w	r8, r4, #132	; 0x84
 80160a6:	283c      	cmp	r0, #60	; 0x3c
 80160a8:	f200 808f 	bhi.w	80161ca <rmw_create_publisher+0x196>
 80160ac:	462b      	mov	r3, r5
 80160ae:	4a51      	ldr	r2, [pc, #324]	; (80161f4 <rmw_create_publisher+0x1c0>)
 80160b0:	213c      	movs	r1, #60	; 0x3c
 80160b2:	4650      	mov	r0, sl
 80160b4:	f00a fe1a 	bl	8020cec <sniprintf>
 80160b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80160bc:	4639      	mov	r1, r7
 80160be:	2250      	movs	r2, #80	; 0x50
 80160c0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80160c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80160c6:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 80160ca:	f00b f848 	bl	802115e <memcpy>
 80160ce:	7a3b      	ldrb	r3, [r7, #8]
 80160d0:	4630      	mov	r0, r6
 80160d2:	4949      	ldr	r1, [pc, #292]	; (80161f8 <rmw_create_publisher+0x1c4>)
 80160d4:	2b02      	cmp	r3, #2
 80160d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160da:	bf0c      	ite	eq
 80160dc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 80160e0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 80160e4:	67a3      	str	r3, [r4, #120]	; 0x78
 80160e6:	2300      	movs	r3, #0
 80160e8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80160ec:	f000 fe22 	bl	8016d34 <get_message_typesupport_handle>
 80160f0:	2800      	cmp	r0, #0
 80160f2:	d06a      	beq.n	80161ca <rmw_create_publisher+0x196>
 80160f4:	6842      	ldr	r2, [r0, #4]
 80160f6:	61a2      	str	r2, [r4, #24]
 80160f8:	2a00      	cmp	r2, #0
 80160fa:	d066      	beq.n	80161ca <rmw_create_publisher+0x196>
 80160fc:	4629      	mov	r1, r5
 80160fe:	463b      	mov	r3, r7
 8016100:	4648      	mov	r0, r9
 8016102:	f008 fb3d 	bl	801e780 <create_topic>
 8016106:	6260      	str	r0, [r4, #36]	; 0x24
 8016108:	2800      	cmp	r0, #0
 801610a:	d062      	beq.n	80161d2 <rmw_create_publisher+0x19e>
 801610c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016110:	2103      	movs	r1, #3
 8016112:	2506      	movs	r5, #6
 8016114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016118:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 801611c:	1c42      	adds	r2, r0, #1
 801611e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8016122:	f001 f9ed 	bl	8017500 <uxr_object_id>
 8016126:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801612a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801612e:	6120      	str	r0, [r4, #16]
 8016130:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8016134:	6910      	ldr	r0, [r2, #16]
 8016136:	9500      	str	r5, [sp, #0]
 8016138:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801613c:	6819      	ldr	r1, [r3, #0]
 801613e:	6922      	ldr	r2, [r4, #16]
 8016140:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016144:	f000 ffd0 	bl	80170e8 <uxr_buffer_create_publisher_bin>
 8016148:	4602      	mov	r2, r0
 801614a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801614e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016152:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016156:	f000 fd65 	bl	8016c24 <run_xrce_session>
 801615a:	b3b0      	cbz	r0, 80161ca <rmw_create_publisher+0x196>
 801615c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016160:	2105      	movs	r1, #5
 8016162:	f10d 0a10 	add.w	sl, sp, #16
 8016166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801616a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 801616e:	1c42      	adds	r2, r0, #1
 8016170:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8016174:	f001 f9c4 	bl	8017500 <uxr_object_id>
 8016178:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801617c:	4639      	mov	r1, r7
 801617e:	6160      	str	r0, [r4, #20]
 8016180:	691e      	ldr	r6, [r3, #16]
 8016182:	4650      	mov	r0, sl
 8016184:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016188:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 801618c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8016190:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8016194:	f000 fd62 	bl	8016c5c <convert_qos_profile>
 8016198:	9503      	str	r5, [sp, #12]
 801619a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801619e:	9001      	str	r0, [sp, #4]
 80161a0:	4630      	mov	r0, r6
 80161a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80161a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	6839      	ldr	r1, [r7, #0]
 80161ae:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80161b2:	f000 fff9 	bl	80171a8 <uxr_buffer_create_datawriter_bin>
 80161b6:	4602      	mov	r2, r0
 80161b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80161bc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80161c0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80161c4:	f000 fd2e 	bl	8016c24 <run_xrce_session>
 80161c8:	b970      	cbnz	r0, 80161e8 <rmw_create_publisher+0x1b4>
 80161ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80161cc:	b108      	cbz	r0, 80161d2 <rmw_create_publisher+0x19e>
 80161ce:	f000 fc1b 	bl	8016a08 <rmw_uxrce_fini_topic_memory>
 80161d2:	4640      	mov	r0, r8
 80161d4:	f04f 0800 	mov.w	r8, #0
 80161d8:	f000 fbbe 	bl	8016958 <rmw_uxrce_fini_publisher_memory>
 80161dc:	4640      	mov	r0, r8
 80161de:	b007      	add	sp, #28
 80161e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e4:	f04f 0800 	mov.w	r8, #0
 80161e8:	4640      	mov	r0, r8
 80161ea:	b007      	add	sp, #28
 80161ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f0:	200174fc 	.word	0x200174fc
 80161f4:	08022744 	.word	0x08022744
 80161f8:	080223c8 	.word	0x080223c8

080161fc <rmw_publisher_get_actual_qos>:
 80161fc:	b178      	cbz	r0, 801621e <rmw_publisher_get_actual_qos+0x22>
 80161fe:	b510      	push	{r4, lr}
 8016200:	fab1 f481 	clz	r4, r1
 8016204:	0964      	lsrs	r4, r4, #5
 8016206:	b141      	cbz	r1, 801621a <rmw_publisher_get_actual_qos+0x1e>
 8016208:	6843      	ldr	r3, [r0, #4]
 801620a:	2250      	movs	r2, #80	; 0x50
 801620c:	4608      	mov	r0, r1
 801620e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016212:	f00a ffa4 	bl	802115e <memcpy>
 8016216:	4620      	mov	r0, r4
 8016218:	bd10      	pop	{r4, pc}
 801621a:	200b      	movs	r0, #11
 801621c:	bd10      	pop	{r4, pc}
 801621e:	200b      	movs	r0, #11
 8016220:	4770      	bx	lr
 8016222:	bf00      	nop

08016224 <rmw_destroy_publisher>:
 8016224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016228:	b128      	cbz	r0, 8016236 <rmw_destroy_publisher+0x12>
 801622a:	4604      	mov	r4, r0
 801622c:	6800      	ldr	r0, [r0, #0]
 801622e:	460d      	mov	r5, r1
 8016230:	f000 fd72 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8016234:	b918      	cbnz	r0, 801623e <rmw_destroy_publisher+0x1a>
 8016236:	2401      	movs	r4, #1
 8016238:	4620      	mov	r0, r4
 801623a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801623e:	6863      	ldr	r3, [r4, #4]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d0f8      	beq.n	8016236 <rmw_destroy_publisher+0x12>
 8016244:	fab5 f485 	clz	r4, r5
 8016248:	0964      	lsrs	r4, r4, #5
 801624a:	2d00      	cmp	r5, #0
 801624c:	d0f3      	beq.n	8016236 <rmw_destroy_publisher+0x12>
 801624e:	6828      	ldr	r0, [r5, #0]
 8016250:	f000 fd62 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8016254:	2800      	cmp	r0, #0
 8016256:	d0ee      	beq.n	8016236 <rmw_destroy_publisher+0x12>
 8016258:	686e      	ldr	r6, [r5, #4]
 801625a:	2e00      	cmp	r6, #0
 801625c:	d0eb      	beq.n	8016236 <rmw_destroy_publisher+0x12>
 801625e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8016260:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016264:	f008 fadc 	bl	801e820 <destroy_topic>
 8016268:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801626c:	6972      	ldr	r2, [r6, #20]
 801626e:	6918      	ldr	r0, [r3, #16]
 8016270:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016274:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016278:	6819      	ldr	r1, [r3, #0]
 801627a:	f000 fe81 	bl	8016f80 <uxr_buffer_delete_entity>
 801627e:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016282:	4680      	mov	r8, r0
 8016284:	6932      	ldr	r2, [r6, #16]
 8016286:	6918      	ldr	r0, [r3, #16]
 8016288:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801628c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016290:	6819      	ldr	r1, [r3, #0]
 8016292:	f000 fe75 	bl	8016f80 <uxr_buffer_delete_entity>
 8016296:	4606      	mov	r6, r0
 8016298:	6938      	ldr	r0, [r7, #16]
 801629a:	4642      	mov	r2, r8
 801629c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80162a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80162a4:	f000 fcbe 	bl	8016c24 <run_xrce_session>
 80162a8:	693f      	ldr	r7, [r7, #16]
 80162aa:	4632      	mov	r2, r6
 80162ac:	4606      	mov	r6, r0
 80162ae:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80162b2:	4638      	mov	r0, r7
 80162b4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80162b8:	f000 fcb4 	bl	8016c24 <run_xrce_session>
 80162bc:	b126      	cbz	r6, 80162c8 <rmw_destroy_publisher+0xa4>
 80162be:	b118      	cbz	r0, 80162c8 <rmw_destroy_publisher+0xa4>
 80162c0:	4628      	mov	r0, r5
 80162c2:	f000 fb49 	bl	8016958 <rmw_uxrce_fini_publisher_memory>
 80162c6:	e7b7      	b.n	8016238 <rmw_destroy_publisher+0x14>
 80162c8:	2402      	movs	r4, #2
 80162ca:	e7f9      	b.n	80162c0 <rmw_destroy_publisher+0x9c>

080162cc <rmw_destroy_service>:
 80162cc:	b570      	push	{r4, r5, r6, lr}
 80162ce:	b128      	cbz	r0, 80162dc <rmw_destroy_service+0x10>
 80162d0:	4604      	mov	r4, r0
 80162d2:	6800      	ldr	r0, [r0, #0]
 80162d4:	460d      	mov	r5, r1
 80162d6:	f000 fd1f 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 80162da:	b910      	cbnz	r0, 80162e2 <rmw_destroy_service+0x16>
 80162dc:	2401      	movs	r4, #1
 80162de:	4620      	mov	r0, r4
 80162e0:	bd70      	pop	{r4, r5, r6, pc}
 80162e2:	6863      	ldr	r3, [r4, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d0f9      	beq.n	80162dc <rmw_destroy_service+0x10>
 80162e8:	2d00      	cmp	r5, #0
 80162ea:	d0f7      	beq.n	80162dc <rmw_destroy_service+0x10>
 80162ec:	6828      	ldr	r0, [r5, #0]
 80162ee:	f000 fd13 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 80162f2:	2800      	cmp	r0, #0
 80162f4:	d0f2      	beq.n	80162dc <rmw_destroy_service+0x10>
 80162f6:	686e      	ldr	r6, [r5, #4]
 80162f8:	2e00      	cmp	r6, #0
 80162fa:	d0ef      	beq.n	80162dc <rmw_destroy_service+0x10>
 80162fc:	6864      	ldr	r4, [r4, #4]
 80162fe:	6932      	ldr	r2, [r6, #16]
 8016300:	6920      	ldr	r0, [r4, #16]
 8016302:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016306:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801630a:	6819      	ldr	r1, [r3, #0]
 801630c:	f001 fa66 	bl	80177dc <uxr_buffer_cancel_data>
 8016310:	4602      	mov	r2, r0
 8016312:	6920      	ldr	r0, [r4, #16]
 8016314:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016318:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801631c:	f000 fc82 	bl	8016c24 <run_xrce_session>
 8016320:	6920      	ldr	r0, [r4, #16]
 8016322:	6932      	ldr	r2, [r6, #16]
 8016324:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016328:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801632c:	6819      	ldr	r1, [r3, #0]
 801632e:	f000 fe27 	bl	8016f80 <uxr_buffer_delete_entity>
 8016332:	4602      	mov	r2, r0
 8016334:	6920      	ldr	r0, [r4, #16]
 8016336:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801633a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801633e:	f000 fc71 	bl	8016c24 <run_xrce_session>
 8016342:	4603      	mov	r3, r0
 8016344:	4628      	mov	r0, r5
 8016346:	2b00      	cmp	r3, #0
 8016348:	bf14      	ite	ne
 801634a:	2400      	movne	r4, #0
 801634c:	2402      	moveq	r4, #2
 801634e:	f000 fb2f 	bl	80169b0 <rmw_uxrce_fini_service_memory>
 8016352:	e7c4      	b.n	80162de <rmw_destroy_service+0x12>

08016354 <rmw_create_subscription>:
 8016354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016358:	b08d      	sub	sp, #52	; 0x34
 801635a:	2900      	cmp	r1, #0
 801635c:	f000 80d8 	beq.w	8016510 <rmw_create_subscription+0x1bc>
 8016360:	4604      	mov	r4, r0
 8016362:	2800      	cmp	r0, #0
 8016364:	f000 80d4 	beq.w	8016510 <rmw_create_subscription+0x1bc>
 8016368:	6800      	ldr	r0, [r0, #0]
 801636a:	460e      	mov	r6, r1
 801636c:	4615      	mov	r5, r2
 801636e:	461f      	mov	r7, r3
 8016370:	f000 fcd2 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8016374:	f080 0001 	eor.w	r0, r0, #1
 8016378:	b2c0      	uxtb	r0, r0
 801637a:	2800      	cmp	r0, #0
 801637c:	f040 80c8 	bne.w	8016510 <rmw_create_subscription+0x1bc>
 8016380:	2d00      	cmp	r5, #0
 8016382:	f000 80c5 	beq.w	8016510 <rmw_create_subscription+0x1bc>
 8016386:	782b      	ldrb	r3, [r5, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	f000 80c1 	beq.w	8016510 <rmw_create_subscription+0x1bc>
 801638e:	2f00      	cmp	r7, #0
 8016390:	f000 80be 	beq.w	8016510 <rmw_create_subscription+0x1bc>
 8016394:	4867      	ldr	r0, [pc, #412]	; (8016534 <rmw_create_subscription+0x1e0>)
 8016396:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801639a:	f008 f983 	bl	801e6a4 <get_memory>
 801639e:	4604      	mov	r4, r0
 80163a0:	2800      	cmp	r0, #0
 80163a2:	f000 80b6 	beq.w	8016512 <rmw_create_subscription+0x1be>
 80163a6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80163aa:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 80163ae:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 80163b2:	f008 f9df 	bl	801e774 <rmw_get_implementation_identifier>
 80163b6:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 80163ba:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 80163be:	4628      	mov	r0, r5
 80163c0:	f7e9 ff48 	bl	8000254 <strlen>
 80163c4:	3001      	adds	r0, #1
 80163c6:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 80163ca:	283c      	cmp	r0, #60	; 0x3c
 80163cc:	f200 80a5 	bhi.w	801651a <rmw_create_subscription+0x1c6>
 80163d0:	462b      	mov	r3, r5
 80163d2:	4a59      	ldr	r2, [pc, #356]	; (8016538 <rmw_create_subscription+0x1e4>)
 80163d4:	213c      	movs	r1, #60	; 0x3c
 80163d6:	4650      	mov	r0, sl
 80163d8:	f00a fc88 	bl	8020cec <sniprintf>
 80163dc:	4639      	mov	r1, r7
 80163de:	2250      	movs	r2, #80	; 0x50
 80163e0:	f108 0028 	add.w	r0, r8, #40	; 0x28
 80163e4:	f8c8 9020 	str.w	r9, [r8, #32]
 80163e8:	f00a feb9 	bl	802115e <memcpy>
 80163ec:	4630      	mov	r0, r6
 80163ee:	4953      	ldr	r1, [pc, #332]	; (801653c <rmw_create_subscription+0x1e8>)
 80163f0:	f000 fca0 	bl	8016d34 <get_message_typesupport_handle>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	f000 8090 	beq.w	801651a <rmw_create_subscription+0x1c6>
 80163fa:	6842      	ldr	r2, [r0, #4]
 80163fc:	f8c8 2018 	str.w	r2, [r8, #24]
 8016400:	2a00      	cmp	r2, #0
 8016402:	f000 808a 	beq.w	801651a <rmw_create_subscription+0x1c6>
 8016406:	4629      	mov	r1, r5
 8016408:	463b      	mov	r3, r7
 801640a:	4648      	mov	r0, r9
 801640c:	f008 f9b8 	bl	801e780 <create_topic>
 8016410:	f8c8 001c 	str.w	r0, [r8, #28]
 8016414:	2800      	cmp	r0, #0
 8016416:	f000 8085 	beq.w	8016524 <rmw_create_subscription+0x1d0>
 801641a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801641e:	2104      	movs	r1, #4
 8016420:	2506      	movs	r5, #6
 8016422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016426:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801642a:	1c42      	adds	r2, r0, #1
 801642c:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8016430:	f001 f866 	bl	8017500 <uxr_object_id>
 8016434:	f8c8 0010 	str.w	r0, [r8, #16]
 8016438:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801643c:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8016440:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016444:	9500      	str	r5, [sp, #0]
 8016446:	6819      	ldr	r1, [r3, #0]
 8016448:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801644c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016450:	f000 fe7a 	bl	8017148 <uxr_buffer_create_subscriber_bin>
 8016454:	4602      	mov	r2, r0
 8016456:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801645a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801645e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016462:	f000 fbdf 	bl	8016c24 <run_xrce_session>
 8016466:	2800      	cmp	r0, #0
 8016468:	d057      	beq.n	801651a <rmw_create_subscription+0x1c6>
 801646a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801646e:	4629      	mov	r1, r5
 8016470:	ae08      	add	r6, sp, #32
 8016472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016476:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801647a:	1c42      	adds	r2, r0, #1
 801647c:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8016480:	f001 f83e 	bl	8017500 <uxr_object_id>
 8016484:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016488:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801648c:	4639      	mov	r1, r7
 801648e:	f8c8 0014 	str.w	r0, [r8, #20]
 8016492:	4630      	mov	r0, r6
 8016494:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8016498:	9305      	str	r3, [sp, #20]
 801649a:	f000 fbdf 	bl	8016c5c <convert_qos_profile>
 801649e:	9503      	str	r5, [sp, #12]
 80164a0:	9b05      	ldr	r3, [sp, #20]
 80164a2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80164a6:	9001      	str	r0, [sp, #4]
 80164a8:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80164ac:	f8ad 1008 	strh.w	r1, [sp, #8]
 80164b0:	691b      	ldr	r3, [r3, #16]
 80164b2:	9300      	str	r3, [sp, #0]
 80164b4:	f8db 1000 	ldr.w	r1, [fp]
 80164b8:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80164bc:	f000 feea 	bl	8017294 <uxr_buffer_create_datareader_bin>
 80164c0:	4602      	mov	r2, r0
 80164c2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80164c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80164ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80164ce:	f000 fba9 	bl	8016c24 <run_xrce_session>
 80164d2:	b310      	cbz	r0, 801651a <rmw_create_subscription+0x1c6>
 80164d4:	7a3b      	ldrb	r3, [r7, #8]
 80164d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80164de:	2b02      	cmp	r3, #2
 80164e0:	920a      	str	r2, [sp, #40]	; 0x28
 80164e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80164e6:	f04f 0200 	mov.w	r2, #0
 80164ea:	bf08      	it	eq
 80164ec:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80164f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80164f4:	bf18      	it	ne
 80164f6:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 80164fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80164fc:	9307      	str	r3, [sp, #28]
 80164fe:	ab0a      	add	r3, sp, #40	; 0x28
 8016500:	9300      	str	r3, [sp, #0]
 8016502:	9b07      	ldr	r3, [sp, #28]
 8016504:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016508:	6809      	ldr	r1, [r1, #0]
 801650a:	f001 f92d 	bl	8017768 <uxr_buffer_request_data>
 801650e:	e000      	b.n	8016512 <rmw_create_subscription+0x1be>
 8016510:	2400      	movs	r4, #0
 8016512:	4620      	mov	r0, r4
 8016514:	b00d      	add	sp, #52	; 0x34
 8016516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801651e:	b108      	cbz	r0, 8016524 <rmw_create_subscription+0x1d0>
 8016520:	f000 fa72 	bl	8016a08 <rmw_uxrce_fini_topic_memory>
 8016524:	4620      	mov	r0, r4
 8016526:	2400      	movs	r4, #0
 8016528:	f000 fa2c 	bl	8016984 <rmw_uxrce_fini_subscription_memory>
 801652c:	4620      	mov	r0, r4
 801652e:	b00d      	add	sp, #52	; 0x34
 8016530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016534:	2001753c 	.word	0x2001753c
 8016538:	08022744 	.word	0x08022744
 801653c:	080223c8 	.word	0x080223c8

08016540 <rmw_subscription_get_actual_qos>:
 8016540:	b178      	cbz	r0, 8016562 <rmw_subscription_get_actual_qos+0x22>
 8016542:	b510      	push	{r4, lr}
 8016544:	fab1 f481 	clz	r4, r1
 8016548:	0964      	lsrs	r4, r4, #5
 801654a:	b141      	cbz	r1, 801655e <rmw_subscription_get_actual_qos+0x1e>
 801654c:	6843      	ldr	r3, [r0, #4]
 801654e:	2250      	movs	r2, #80	; 0x50
 8016550:	4608      	mov	r0, r1
 8016552:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016556:	f00a fe02 	bl	802115e <memcpy>
 801655a:	4620      	mov	r0, r4
 801655c:	bd10      	pop	{r4, pc}
 801655e:	200b      	movs	r0, #11
 8016560:	bd10      	pop	{r4, pc}
 8016562:	200b      	movs	r0, #11
 8016564:	4770      	bx	lr
 8016566:	bf00      	nop

08016568 <rmw_destroy_subscription>:
 8016568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801656c:	b128      	cbz	r0, 801657a <rmw_destroy_subscription+0x12>
 801656e:	4604      	mov	r4, r0
 8016570:	6800      	ldr	r0, [r0, #0]
 8016572:	460d      	mov	r5, r1
 8016574:	f000 fbd0 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8016578:	b918      	cbnz	r0, 8016582 <rmw_destroy_subscription+0x1a>
 801657a:	2401      	movs	r4, #1
 801657c:	4620      	mov	r0, r4
 801657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016582:	6863      	ldr	r3, [r4, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d0f8      	beq.n	801657a <rmw_destroy_subscription+0x12>
 8016588:	fab5 f485 	clz	r4, r5
 801658c:	0964      	lsrs	r4, r4, #5
 801658e:	2d00      	cmp	r5, #0
 8016590:	d0f3      	beq.n	801657a <rmw_destroy_subscription+0x12>
 8016592:	6828      	ldr	r0, [r5, #0]
 8016594:	f000 fbc0 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8016598:	2800      	cmp	r0, #0
 801659a:	d0ee      	beq.n	801657a <rmw_destroy_subscription+0x12>
 801659c:	686e      	ldr	r6, [r5, #4]
 801659e:	2e00      	cmp	r6, #0
 80165a0:	d0eb      	beq.n	801657a <rmw_destroy_subscription+0x12>
 80165a2:	6a37      	ldr	r7, [r6, #32]
 80165a4:	6972      	ldr	r2, [r6, #20]
 80165a6:	6938      	ldr	r0, [r7, #16]
 80165a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80165ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165b0:	6819      	ldr	r1, [r3, #0]
 80165b2:	f001 f913 	bl	80177dc <uxr_buffer_cancel_data>
 80165b6:	4602      	mov	r2, r0
 80165b8:	6938      	ldr	r0, [r7, #16]
 80165ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80165be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80165c2:	f000 fb2f 	bl	8016c24 <run_xrce_session>
 80165c6:	69f0      	ldr	r0, [r6, #28]
 80165c8:	f008 f92a 	bl	801e820 <destroy_topic>
 80165cc:	6a33      	ldr	r3, [r6, #32]
 80165ce:	6972      	ldr	r2, [r6, #20]
 80165d0:	6918      	ldr	r0, [r3, #16]
 80165d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80165d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165da:	6819      	ldr	r1, [r3, #0]
 80165dc:	f000 fcd0 	bl	8016f80 <uxr_buffer_delete_entity>
 80165e0:	6a33      	ldr	r3, [r6, #32]
 80165e2:	4680      	mov	r8, r0
 80165e4:	6932      	ldr	r2, [r6, #16]
 80165e6:	6918      	ldr	r0, [r3, #16]
 80165e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80165ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165f0:	6819      	ldr	r1, [r3, #0]
 80165f2:	f000 fcc5 	bl	8016f80 <uxr_buffer_delete_entity>
 80165f6:	4606      	mov	r6, r0
 80165f8:	6938      	ldr	r0, [r7, #16]
 80165fa:	4642      	mov	r2, r8
 80165fc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016600:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016604:	f000 fb0e 	bl	8016c24 <run_xrce_session>
 8016608:	693f      	ldr	r7, [r7, #16]
 801660a:	4632      	mov	r2, r6
 801660c:	4606      	mov	r6, r0
 801660e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016612:	4638      	mov	r0, r7
 8016614:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016618:	f000 fb04 	bl	8016c24 <run_xrce_session>
 801661c:	b126      	cbz	r6, 8016628 <rmw_destroy_subscription+0xc0>
 801661e:	b118      	cbz	r0, 8016628 <rmw_destroy_subscription+0xc0>
 8016620:	4628      	mov	r0, r5
 8016622:	f000 f9af 	bl	8016984 <rmw_uxrce_fini_subscription_memory>
 8016626:	e7a9      	b.n	801657c <rmw_destroy_subscription+0x14>
 8016628:	2402      	movs	r4, #2
 801662a:	e7f9      	b.n	8016620 <rmw_destroy_subscription+0xb8>

0801662c <rmw_uxrce_transport_init>:
 801662c:	b508      	push	{r3, lr}
 801662e:	b108      	cbz	r0, 8016634 <rmw_uxrce_transport_init+0x8>
 8016630:	f100 0210 	add.w	r2, r0, #16
 8016634:	b139      	cbz	r1, 8016646 <rmw_uxrce_transport_init+0x1a>
 8016636:	6949      	ldr	r1, [r1, #20]
 8016638:	4610      	mov	r0, r2
 801663a:	f000 ff29 	bl	8017490 <uxr_init_custom_transport>
 801663e:	f080 0001 	eor.w	r0, r0, #1
 8016642:	b2c0      	uxtb	r0, r0
 8016644:	bd08      	pop	{r3, pc}
 8016646:	4b04      	ldr	r3, [pc, #16]	; (8016658 <rmw_uxrce_transport_init+0x2c>)
 8016648:	4610      	mov	r0, r2
 801664a:	6859      	ldr	r1, [r3, #4]
 801664c:	f000 ff20 	bl	8017490 <uxr_init_custom_transport>
 8016650:	f080 0001 	eor.w	r0, r0, #1
 8016654:	b2c0      	uxtb	r0, r0
 8016656:	bd08      	pop	{r3, pc}
 8016658:	20012bc4 	.word	0x20012bc4

0801665c <rmw_uxrce_init_service_memory>:
 801665c:	b1e2      	cbz	r2, 8016698 <rmw_uxrce_init_service_memory+0x3c>
 801665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016662:	7b05      	ldrb	r5, [r0, #12]
 8016664:	4606      	mov	r6, r0
 8016666:	b9ad      	cbnz	r5, 8016694 <rmw_uxrce_init_service_memory+0x38>
 8016668:	23c8      	movs	r3, #200	; 0xc8
 801666a:	4617      	mov	r7, r2
 801666c:	460c      	mov	r4, r1
 801666e:	46a8      	mov	r8, r5
 8016670:	6083      	str	r3, [r0, #8]
 8016672:	f240 1301 	movw	r3, #257	; 0x101
 8016676:	e9c0 5500 	strd	r5, r5, [r0]
 801667a:	8183      	strh	r3, [r0, #12]
 801667c:	3501      	adds	r5, #1
 801667e:	4621      	mov	r1, r4
 8016680:	4630      	mov	r0, r6
 8016682:	f008 f81f 	bl	801e6c4 <put_memory>
 8016686:	42af      	cmp	r7, r5
 8016688:	60a4      	str	r4, [r4, #8]
 801668a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801668e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016692:	d1f3      	bne.n	801667c <rmw_uxrce_init_service_memory+0x20>
 8016694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016698:	4770      	bx	lr
 801669a:	bf00      	nop

0801669c <rmw_uxrce_init_client_memory>:
 801669c:	b1e2      	cbz	r2, 80166d8 <rmw_uxrce_init_client_memory+0x3c>
 801669e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166a2:	7b05      	ldrb	r5, [r0, #12]
 80166a4:	4606      	mov	r6, r0
 80166a6:	b9ad      	cbnz	r5, 80166d4 <rmw_uxrce_init_client_memory+0x38>
 80166a8:	23c8      	movs	r3, #200	; 0xc8
 80166aa:	4617      	mov	r7, r2
 80166ac:	460c      	mov	r4, r1
 80166ae:	46a8      	mov	r8, r5
 80166b0:	6083      	str	r3, [r0, #8]
 80166b2:	f240 1301 	movw	r3, #257	; 0x101
 80166b6:	e9c0 5500 	strd	r5, r5, [r0]
 80166ba:	8183      	strh	r3, [r0, #12]
 80166bc:	3501      	adds	r5, #1
 80166be:	4621      	mov	r1, r4
 80166c0:	4630      	mov	r0, r6
 80166c2:	f007 ffff 	bl	801e6c4 <put_memory>
 80166c6:	42af      	cmp	r7, r5
 80166c8:	60a4      	str	r4, [r4, #8]
 80166ca:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80166ce:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80166d2:	d1f3      	bne.n	80166bc <rmw_uxrce_init_client_memory+0x20>
 80166d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop

080166dc <rmw_uxrce_init_publisher_memory>:
 80166dc:	b1e2      	cbz	r2, 8016718 <rmw_uxrce_init_publisher_memory+0x3c>
 80166de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e2:	7b05      	ldrb	r5, [r0, #12]
 80166e4:	4606      	mov	r6, r0
 80166e6:	b9ad      	cbnz	r5, 8016714 <rmw_uxrce_init_publisher_memory+0x38>
 80166e8:	23d8      	movs	r3, #216	; 0xd8
 80166ea:	4617      	mov	r7, r2
 80166ec:	460c      	mov	r4, r1
 80166ee:	46a8      	mov	r8, r5
 80166f0:	6083      	str	r3, [r0, #8]
 80166f2:	f240 1301 	movw	r3, #257	; 0x101
 80166f6:	e9c0 5500 	strd	r5, r5, [r0]
 80166fa:	8183      	strh	r3, [r0, #12]
 80166fc:	3501      	adds	r5, #1
 80166fe:	4621      	mov	r1, r4
 8016700:	4630      	mov	r0, r6
 8016702:	f007 ffdf 	bl	801e6c4 <put_memory>
 8016706:	42af      	cmp	r7, r5
 8016708:	60a4      	str	r4, [r4, #8]
 801670a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801670e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016712:	d1f3      	bne.n	80166fc <rmw_uxrce_init_publisher_memory+0x20>
 8016714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop

0801671c <rmw_uxrce_init_subscription_memory>:
 801671c:	b1e2      	cbz	r2, 8016758 <rmw_uxrce_init_subscription_memory+0x3c>
 801671e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016722:	7b05      	ldrb	r5, [r0, #12]
 8016724:	4606      	mov	r6, r0
 8016726:	b9ad      	cbnz	r5, 8016754 <rmw_uxrce_init_subscription_memory+0x38>
 8016728:	23d8      	movs	r3, #216	; 0xd8
 801672a:	4617      	mov	r7, r2
 801672c:	460c      	mov	r4, r1
 801672e:	46a8      	mov	r8, r5
 8016730:	6083      	str	r3, [r0, #8]
 8016732:	f240 1301 	movw	r3, #257	; 0x101
 8016736:	e9c0 5500 	strd	r5, r5, [r0]
 801673a:	8183      	strh	r3, [r0, #12]
 801673c:	3501      	adds	r5, #1
 801673e:	4621      	mov	r1, r4
 8016740:	4630      	mov	r0, r6
 8016742:	f007 ffbf 	bl	801e6c4 <put_memory>
 8016746:	42af      	cmp	r7, r5
 8016748:	60a4      	str	r4, [r4, #8]
 801674a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801674e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016752:	d1f3      	bne.n	801673c <rmw_uxrce_init_subscription_memory+0x20>
 8016754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop

0801675c <rmw_uxrce_init_node_memory>:
 801675c:	b1e2      	cbz	r2, 8016798 <rmw_uxrce_init_node_memory+0x3c>
 801675e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016762:	7b05      	ldrb	r5, [r0, #12]
 8016764:	4606      	mov	r6, r0
 8016766:	b9ad      	cbnz	r5, 8016794 <rmw_uxrce_init_node_memory+0x38>
 8016768:	23a4      	movs	r3, #164	; 0xa4
 801676a:	4617      	mov	r7, r2
 801676c:	460c      	mov	r4, r1
 801676e:	46a8      	mov	r8, r5
 8016770:	6083      	str	r3, [r0, #8]
 8016772:	f240 1301 	movw	r3, #257	; 0x101
 8016776:	e9c0 5500 	strd	r5, r5, [r0]
 801677a:	8183      	strh	r3, [r0, #12]
 801677c:	3501      	adds	r5, #1
 801677e:	4621      	mov	r1, r4
 8016780:	4630      	mov	r0, r6
 8016782:	f007 ff9f 	bl	801e6c4 <put_memory>
 8016786:	42af      	cmp	r7, r5
 8016788:	60a4      	str	r4, [r4, #8]
 801678a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801678e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016792:	d1f3      	bne.n	801677c <rmw_uxrce_init_node_memory+0x20>
 8016794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop

0801679c <rmw_uxrce_init_session_memory>:
 801679c:	b1ea      	cbz	r2, 80167da <rmw_uxrce_init_session_memory+0x3e>
 801679e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167a2:	7b05      	ldrb	r5, [r0, #12]
 80167a4:	4606      	mov	r6, r0
 80167a6:	b9b5      	cbnz	r5, 80167d6 <rmw_uxrce_init_session_memory+0x3a>
 80167a8:	f241 58a8 	movw	r8, #5544	; 0x15a8
 80167ac:	f240 1301 	movw	r3, #257	; 0x101
 80167b0:	4617      	mov	r7, r2
 80167b2:	460c      	mov	r4, r1
 80167b4:	46a9      	mov	r9, r5
 80167b6:	f8c0 8008 	str.w	r8, [r0, #8]
 80167ba:	8183      	strh	r3, [r0, #12]
 80167bc:	e9c0 5500 	strd	r5, r5, [r0]
 80167c0:	3501      	adds	r5, #1
 80167c2:	4621      	mov	r1, r4
 80167c4:	4630      	mov	r0, r6
 80167c6:	f007 ff7d 	bl	801e6c4 <put_memory>
 80167ca:	42af      	cmp	r7, r5
 80167cc:	60a4      	str	r4, [r4, #8]
 80167ce:	f884 900c 	strb.w	r9, [r4, #12]
 80167d2:	4444      	add	r4, r8
 80167d4:	d1f4      	bne.n	80167c0 <rmw_uxrce_init_session_memory+0x24>
 80167d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167da:	4770      	bx	lr

080167dc <rmw_uxrce_init_topic_memory>:
 80167dc:	b1e2      	cbz	r2, 8016818 <rmw_uxrce_init_topic_memory+0x3c>
 80167de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e2:	7b05      	ldrb	r5, [r0, #12]
 80167e4:	4606      	mov	r6, r0
 80167e6:	b9ad      	cbnz	r5, 8016814 <rmw_uxrce_init_topic_memory+0x38>
 80167e8:	231c      	movs	r3, #28
 80167ea:	4617      	mov	r7, r2
 80167ec:	460c      	mov	r4, r1
 80167ee:	46a8      	mov	r8, r5
 80167f0:	6083      	str	r3, [r0, #8]
 80167f2:	f240 1301 	movw	r3, #257	; 0x101
 80167f6:	e9c0 5500 	strd	r5, r5, [r0]
 80167fa:	8183      	strh	r3, [r0, #12]
 80167fc:	3501      	adds	r5, #1
 80167fe:	4621      	mov	r1, r4
 8016800:	4630      	mov	r0, r6
 8016802:	f007 ff5f 	bl	801e6c4 <put_memory>
 8016806:	42af      	cmp	r7, r5
 8016808:	60a4      	str	r4, [r4, #8]
 801680a:	f104 041c 	add.w	r4, r4, #28
 801680e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016812:	d1f3      	bne.n	80167fc <rmw_uxrce_init_topic_memory+0x20>
 8016814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop

0801681c <rmw_uxrce_init_static_input_buffer_memory>:
 801681c:	b1ea      	cbz	r2, 801685a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801681e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016822:	7b05      	ldrb	r5, [r0, #12]
 8016824:	4606      	mov	r6, r0
 8016826:	b9b5      	cbnz	r5, 8016856 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016828:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801682c:	4617      	mov	r7, r2
 801682e:	460c      	mov	r4, r1
 8016830:	46a8      	mov	r8, r5
 8016832:	6083      	str	r3, [r0, #8]
 8016834:	f240 1301 	movw	r3, #257	; 0x101
 8016838:	e9c0 5500 	strd	r5, r5, [r0]
 801683c:	8183      	strh	r3, [r0, #12]
 801683e:	3501      	adds	r5, #1
 8016840:	4621      	mov	r1, r4
 8016842:	4630      	mov	r0, r6
 8016844:	f007 ff3e 	bl	801e6c4 <put_memory>
 8016848:	42af      	cmp	r7, r5
 801684a:	60a4      	str	r4, [r4, #8]
 801684c:	f884 800c 	strb.w	r8, [r4, #12]
 8016850:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016854:	d1f3      	bne.n	801683e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801685a:	4770      	bx	lr

0801685c <rmw_uxrce_init_init_options_impl_memory>:
 801685c:	b1e2      	cbz	r2, 8016898 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016862:	7b05      	ldrb	r5, [r0, #12]
 8016864:	4606      	mov	r6, r0
 8016866:	b9ad      	cbnz	r5, 8016894 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016868:	232c      	movs	r3, #44	; 0x2c
 801686a:	4617      	mov	r7, r2
 801686c:	460c      	mov	r4, r1
 801686e:	46a8      	mov	r8, r5
 8016870:	6083      	str	r3, [r0, #8]
 8016872:	f240 1301 	movw	r3, #257	; 0x101
 8016876:	e9c0 5500 	strd	r5, r5, [r0]
 801687a:	8183      	strh	r3, [r0, #12]
 801687c:	3501      	adds	r5, #1
 801687e:	4621      	mov	r1, r4
 8016880:	4630      	mov	r0, r6
 8016882:	f007 ff1f 	bl	801e6c4 <put_memory>
 8016886:	42af      	cmp	r7, r5
 8016888:	60a4      	str	r4, [r4, #8]
 801688a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 801688e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016892:	d1f3      	bne.n	801687c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016898:	4770      	bx	lr
 801689a:	bf00      	nop

0801689c <rmw_uxrce_init_wait_set_memory>:
 801689c:	b1e2      	cbz	r2, 80168d8 <rmw_uxrce_init_wait_set_memory+0x3c>
 801689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168a2:	7b05      	ldrb	r5, [r0, #12]
 80168a4:	4606      	mov	r6, r0
 80168a6:	b9ad      	cbnz	r5, 80168d4 <rmw_uxrce_init_wait_set_memory+0x38>
 80168a8:	231c      	movs	r3, #28
 80168aa:	4617      	mov	r7, r2
 80168ac:	460c      	mov	r4, r1
 80168ae:	46a8      	mov	r8, r5
 80168b0:	6083      	str	r3, [r0, #8]
 80168b2:	f240 1301 	movw	r3, #257	; 0x101
 80168b6:	e9c0 5500 	strd	r5, r5, [r0]
 80168ba:	8183      	strh	r3, [r0, #12]
 80168bc:	3501      	adds	r5, #1
 80168be:	4621      	mov	r1, r4
 80168c0:	4630      	mov	r0, r6
 80168c2:	f007 feff 	bl	801e6c4 <put_memory>
 80168c6:	42af      	cmp	r7, r5
 80168c8:	60a4      	str	r4, [r4, #8]
 80168ca:	f104 041c 	add.w	r4, r4, #28
 80168ce:	f804 8c10 	strb.w	r8, [r4, #-16]
 80168d2:	d1f3      	bne.n	80168bc <rmw_uxrce_init_wait_set_memory+0x20>
 80168d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168d8:	4770      	bx	lr
 80168da:	bf00      	nop

080168dc <rmw_uxrce_init_guard_condition_memory>:
 80168dc:	b1e2      	cbz	r2, 8016918 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80168de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e2:	7b05      	ldrb	r5, [r0, #12]
 80168e4:	4606      	mov	r6, r0
 80168e6:	b9ad      	cbnz	r5, 8016914 <rmw_uxrce_init_guard_condition_memory+0x38>
 80168e8:	2320      	movs	r3, #32
 80168ea:	4617      	mov	r7, r2
 80168ec:	460c      	mov	r4, r1
 80168ee:	46a8      	mov	r8, r5
 80168f0:	6083      	str	r3, [r0, #8]
 80168f2:	f240 1301 	movw	r3, #257	; 0x101
 80168f6:	e9c0 5500 	strd	r5, r5, [r0]
 80168fa:	8183      	strh	r3, [r0, #12]
 80168fc:	3501      	adds	r5, #1
 80168fe:	4621      	mov	r1, r4
 8016900:	4630      	mov	r0, r6
 8016902:	f007 fedf 	bl	801e6c4 <put_memory>
 8016906:	42af      	cmp	r7, r5
 8016908:	60a4      	str	r4, [r4, #8]
 801690a:	f104 0420 	add.w	r4, r4, #32
 801690e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016912:	d1f3      	bne.n	80168fc <rmw_uxrce_init_guard_condition_memory+0x20>
 8016914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016918:	4770      	bx	lr
 801691a:	bf00      	nop

0801691c <rmw_uxrce_fini_session_memory>:
 801691c:	4601      	mov	r1, r0
 801691e:	4801      	ldr	r0, [pc, #4]	; (8016924 <rmw_uxrce_fini_session_memory+0x8>)
 8016920:	f007 bed0 	b.w	801e6c4 <put_memory>
 8016924:	2001751c 	.word	0x2001751c

08016928 <rmw_uxrce_fini_node_memory>:
 8016928:	b538      	push	{r3, r4, r5, lr}
 801692a:	4604      	mov	r4, r0
 801692c:	6800      	ldr	r0, [r0, #0]
 801692e:	b128      	cbz	r0, 801693c <rmw_uxrce_fini_node_memory+0x14>
 8016930:	4b07      	ldr	r3, [pc, #28]	; (8016950 <rmw_uxrce_fini_node_memory+0x28>)
 8016932:	6819      	ldr	r1, [r3, #0]
 8016934:	f7e9 fc84 	bl	8000240 <strcmp>
 8016938:	b940      	cbnz	r0, 801694c <rmw_uxrce_fini_node_memory+0x24>
 801693a:	6020      	str	r0, [r4, #0]
 801693c:	6861      	ldr	r1, [r4, #4]
 801693e:	b129      	cbz	r1, 801694c <rmw_uxrce_fini_node_memory+0x24>
 8016940:	2500      	movs	r5, #0
 8016942:	4804      	ldr	r0, [pc, #16]	; (8016954 <rmw_uxrce_fini_node_memory+0x2c>)
 8016944:	610d      	str	r5, [r1, #16]
 8016946:	f007 febd 	bl	801e6c4 <put_memory>
 801694a:	6065      	str	r5, [r4, #4]
 801694c:	bd38      	pop	{r3, r4, r5, pc}
 801694e:	bf00      	nop
 8016950:	08023148 	.word	0x08023148
 8016954:	200174ec 	.word	0x200174ec

08016958 <rmw_uxrce_fini_publisher_memory>:
 8016958:	b510      	push	{r4, lr}
 801695a:	4604      	mov	r4, r0
 801695c:	6800      	ldr	r0, [r0, #0]
 801695e:	b128      	cbz	r0, 801696c <rmw_uxrce_fini_publisher_memory+0x14>
 8016960:	4b06      	ldr	r3, [pc, #24]	; (801697c <rmw_uxrce_fini_publisher_memory+0x24>)
 8016962:	6819      	ldr	r1, [r3, #0]
 8016964:	f7e9 fc6c 	bl	8000240 <strcmp>
 8016968:	b938      	cbnz	r0, 801697a <rmw_uxrce_fini_publisher_memory+0x22>
 801696a:	6020      	str	r0, [r4, #0]
 801696c:	6861      	ldr	r1, [r4, #4]
 801696e:	b121      	cbz	r1, 801697a <rmw_uxrce_fini_publisher_memory+0x22>
 8016970:	4803      	ldr	r0, [pc, #12]	; (8016980 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016972:	f007 fea7 	bl	801e6c4 <put_memory>
 8016976:	2300      	movs	r3, #0
 8016978:	6063      	str	r3, [r4, #4]
 801697a:	bd10      	pop	{r4, pc}
 801697c:	08023148 	.word	0x08023148
 8016980:	200174fc 	.word	0x200174fc

08016984 <rmw_uxrce_fini_subscription_memory>:
 8016984:	b510      	push	{r4, lr}
 8016986:	4604      	mov	r4, r0
 8016988:	6800      	ldr	r0, [r0, #0]
 801698a:	b128      	cbz	r0, 8016998 <rmw_uxrce_fini_subscription_memory+0x14>
 801698c:	4b06      	ldr	r3, [pc, #24]	; (80169a8 <rmw_uxrce_fini_subscription_memory+0x24>)
 801698e:	6819      	ldr	r1, [r3, #0]
 8016990:	f7e9 fc56 	bl	8000240 <strcmp>
 8016994:	b938      	cbnz	r0, 80169a6 <rmw_uxrce_fini_subscription_memory+0x22>
 8016996:	6020      	str	r0, [r4, #0]
 8016998:	6861      	ldr	r1, [r4, #4]
 801699a:	b121      	cbz	r1, 80169a6 <rmw_uxrce_fini_subscription_memory+0x22>
 801699c:	4803      	ldr	r0, [pc, #12]	; (80169ac <rmw_uxrce_fini_subscription_memory+0x28>)
 801699e:	f007 fe91 	bl	801e6c4 <put_memory>
 80169a2:	2300      	movs	r3, #0
 80169a4:	6063      	str	r3, [r4, #4]
 80169a6:	bd10      	pop	{r4, pc}
 80169a8:	08023148 	.word	0x08023148
 80169ac:	2001753c 	.word	0x2001753c

080169b0 <rmw_uxrce_fini_service_memory>:
 80169b0:	b510      	push	{r4, lr}
 80169b2:	4604      	mov	r4, r0
 80169b4:	6800      	ldr	r0, [r0, #0]
 80169b6:	b128      	cbz	r0, 80169c4 <rmw_uxrce_fini_service_memory+0x14>
 80169b8:	4b06      	ldr	r3, [pc, #24]	; (80169d4 <rmw_uxrce_fini_service_memory+0x24>)
 80169ba:	6819      	ldr	r1, [r3, #0]
 80169bc:	f7e9 fc40 	bl	8000240 <strcmp>
 80169c0:	b938      	cbnz	r0, 80169d2 <rmw_uxrce_fini_service_memory+0x22>
 80169c2:	6020      	str	r0, [r4, #0]
 80169c4:	6861      	ldr	r1, [r4, #4]
 80169c6:	b121      	cbz	r1, 80169d2 <rmw_uxrce_fini_service_memory+0x22>
 80169c8:	4803      	ldr	r0, [pc, #12]	; (80169d8 <rmw_uxrce_fini_service_memory+0x28>)
 80169ca:	f007 fe7b 	bl	801e6c4 <put_memory>
 80169ce:	2300      	movs	r3, #0
 80169d0:	6063      	str	r3, [r4, #4]
 80169d2:	bd10      	pop	{r4, pc}
 80169d4:	08023148 	.word	0x08023148
 80169d8:	2001750c 	.word	0x2001750c

080169dc <rmw_uxrce_fini_client_memory>:
 80169dc:	b510      	push	{r4, lr}
 80169de:	4604      	mov	r4, r0
 80169e0:	6800      	ldr	r0, [r0, #0]
 80169e2:	b128      	cbz	r0, 80169f0 <rmw_uxrce_fini_client_memory+0x14>
 80169e4:	4b06      	ldr	r3, [pc, #24]	; (8016a00 <rmw_uxrce_fini_client_memory+0x24>)
 80169e6:	6819      	ldr	r1, [r3, #0]
 80169e8:	f7e9 fc2a 	bl	8000240 <strcmp>
 80169ec:	b938      	cbnz	r0, 80169fe <rmw_uxrce_fini_client_memory+0x22>
 80169ee:	6020      	str	r0, [r4, #0]
 80169f0:	6861      	ldr	r1, [r4, #4]
 80169f2:	b121      	cbz	r1, 80169fe <rmw_uxrce_fini_client_memory+0x22>
 80169f4:	4803      	ldr	r0, [pc, #12]	; (8016a04 <rmw_uxrce_fini_client_memory+0x28>)
 80169f6:	f007 fe65 	bl	801e6c4 <put_memory>
 80169fa:	2300      	movs	r3, #0
 80169fc:	6063      	str	r3, [r4, #4]
 80169fe:	bd10      	pop	{r4, pc}
 8016a00:	08023148 	.word	0x08023148
 8016a04:	20012c1c 	.word	0x20012c1c

08016a08 <rmw_uxrce_fini_topic_memory>:
 8016a08:	b510      	push	{r4, lr}
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	4803      	ldr	r0, [pc, #12]	; (8016a1c <rmw_uxrce_fini_topic_memory+0x14>)
 8016a0e:	4621      	mov	r1, r4
 8016a10:	f007 fe58 	bl	801e6c4 <put_memory>
 8016a14:	2300      	movs	r3, #0
 8016a16:	61a3      	str	r3, [r4, #24]
 8016a18:	bd10      	pop	{r4, pc}
 8016a1a:	bf00      	nop
 8016a1c:	2001754c 	.word	0x2001754c

08016a20 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016a20:	b082      	sub	sp, #8
 8016a22:	492b      	ldr	r1, [pc, #172]	; (8016ad0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016a24:	b530      	push	{r4, r5, lr}
 8016a26:	680d      	ldr	r5, [r1, #0]
 8016a28:	ac03      	add	r4, sp, #12
 8016a2a:	e884 000c 	stmia.w	r4, {r2, r3}
 8016a2e:	461c      	mov	r4, r3
 8016a30:	2d00      	cmp	r5, #0
 8016a32:	d04b      	beq.n	8016acc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016a34:	462b      	mov	r3, r5
 8016a36:	2100      	movs	r1, #0
 8016a38:	689a      	ldr	r2, [r3, #8]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8016a40:	4290      	cmp	r0, r2
 8016a42:	bf08      	it	eq
 8016a44:	3101      	addeq	r1, #1
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d1f6      	bne.n	8016a38 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016a4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016a4e:	2b02      	cmp	r3, #2
 8016a50:	d029      	beq.n	8016aa6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016a52:	d820      	bhi.n	8016a96 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016a54:	428c      	cmp	r4, r1
 8016a56:	d828      	bhi.n	8016aaa <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016a58:	fab4 f284 	clz	r2, r4
 8016a5c:	0952      	lsrs	r2, r2, #5
 8016a5e:	b324      	cbz	r4, 8016aaa <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016a60:	b1dd      	cbz	r5, 8016a9a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016a62:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016a66:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016a6a:	e001      	b.n	8016a70 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016a6c:	686d      	ldr	r5, [r5, #4]
 8016a6e:	b1ad      	cbz	r5, 8016a9c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016a70:	68ab      	ldr	r3, [r5, #8]
 8016a72:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8016a76:	4288      	cmp	r0, r1
 8016a78:	d1f8      	bne.n	8016a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016a7a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8016a7e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8016a82:	4561      	cmp	r1, ip
 8016a84:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016a88:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016a8c:	daee      	bge.n	8016a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016a8e:	468c      	mov	ip, r1
 8016a90:	461c      	mov	r4, r3
 8016a92:	462a      	mov	r2, r5
 8016a94:	e7ea      	b.n	8016a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016a96:	2b03      	cmp	r3, #3
 8016a98:	d0dc      	beq.n	8016a54 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	4610      	mov	r0, r2
 8016a9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016aa2:	b002      	add	sp, #8
 8016aa4:	4770      	bx	lr
 8016aa6:	428c      	cmp	r4, r1
 8016aa8:	d905      	bls.n	8016ab6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016aaa:	4809      	ldr	r0, [pc, #36]	; (8016ad0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ab0:	b002      	add	sp, #8
 8016ab2:	f007 bdf7 	b.w	801e6a4 <get_memory>
 8016ab6:	fab4 f284 	clz	r2, r4
 8016aba:	0952      	lsrs	r2, r2, #5
 8016abc:	2c00      	cmp	r4, #0
 8016abe:	d1ed      	bne.n	8016a9c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016ac0:	4803      	ldr	r0, [pc, #12]	; (8016ad0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ac6:	b002      	add	sp, #8
 8016ac8:	f007 bdec 	b.w	801e6a4 <get_memory>
 8016acc:	4629      	mov	r1, r5
 8016ace:	e7bc      	b.n	8016a4a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016ad0:	2001752c 	.word	0x2001752c

08016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016ad4:	4b12      	ldr	r3, [pc, #72]	; (8016b20 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	b530      	push	{r4, r5, lr}
 8016ada:	b1f3      	cbz	r3, 8016b1a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016adc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016ae0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8016ae4:	2400      	movs	r4, #0
 8016ae6:	e001      	b.n	8016aec <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016ae8:	685b      	ldr	r3, [r3, #4]
 8016aea:	b1a3      	cbz	r3, 8016b16 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016aec:	689a      	ldr	r2, [r3, #8]
 8016aee:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8016af2:	4288      	cmp	r0, r1
 8016af4:	d1f8      	bne.n	8016ae8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016af6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8016afa:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8016afe:	4571      	cmp	r1, lr
 8016b00:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016b04:	eb72 050c 	sbcs.w	r5, r2, ip
 8016b08:	daee      	bge.n	8016ae8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016b0a:	461c      	mov	r4, r3
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	468e      	mov	lr, r1
 8016b10:	4694      	mov	ip, r2
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d1ea      	bne.n	8016aec <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016b16:	4620      	mov	r0, r4
 8016b18:	bd30      	pop	{r4, r5, pc}
 8016b1a:	461c      	mov	r4, r3
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	bd30      	pop	{r4, r5, pc}
 8016b20:	2001752c 	.word	0x2001752c
 8016b24:	00000000 	.word	0x00000000

08016b28 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016b28:	4b3d      	ldr	r3, [pc, #244]	; (8016c20 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b2e:	681f      	ldr	r7, [r3, #0]
 8016b30:	ed2d 8b06 	vpush	{d8-d10}
 8016b34:	b08d      	sub	sp, #52	; 0x34
 8016b36:	f008 f9bb 	bl	801eeb0 <rmw_uros_epoch_nanos>
 8016b3a:	2f00      	cmp	r7, #0
 8016b3c:	d05d      	beq.n	8016bfa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016b3e:	46b8      	mov	r8, r7
 8016b40:	4681      	mov	r9, r0
 8016b42:	468a      	mov	sl, r1
 8016b44:	ac04      	add	r4, sp, #16
 8016b46:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016b4a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016b4e:	2b04      	cmp	r3, #4
 8016b50:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8016c08 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016b54:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8016c10 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016b58:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8016c18 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016b5c:	d03f      	beq.n	8016bde <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016b5e:	2b05      	cmp	r3, #5
 8016b60:	d044      	beq.n	8016bec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016b62:	2b03      	cmp	r3, #3
 8016b64:	d03b      	beq.n	8016bde <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016b66:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016b6a:	ed8d ab06 	vstr	d10, [sp, #24]
 8016b6e:	ab08      	add	r3, sp, #32
 8016b70:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016b74:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8016b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016b7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016b82:	f007 fac9 	bl	801e118 <rmw_time_equal>
 8016b86:	b118      	cbz	r0, 8016b90 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016b88:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016b8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016b90:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8016b94:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8016b98:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016b9c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016ba0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016ba4:	f007 fb0e 	bl	801e1c4 <rmw_time_total_nsec>
 8016ba8:	1830      	adds	r0, r6, r0
 8016baa:	eb47 0101 	adc.w	r1, r7, r1
 8016bae:	4548      	cmp	r0, r9
 8016bb0:	eb71 030a 	sbcs.w	r3, r1, sl
 8016bb4:	db05      	blt.n	8016bc2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016bb6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016bba:	4591      	cmp	r9, r2
 8016bbc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016bc0:	da03      	bge.n	8016bca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016bc2:	4641      	mov	r1, r8
 8016bc4:	4816      	ldr	r0, [pc, #88]	; (8016c20 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016bc6:	f007 fd7d 	bl	801e6c4 <put_memory>
 8016bca:	f1bb 0f00 	cmp.w	fp, #0
 8016bce:	d014      	beq.n	8016bfa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016bd0:	46d8      	mov	r8, fp
 8016bd2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016bd6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016bda:	2b04      	cmp	r3, #4
 8016bdc:	d1bf      	bne.n	8016b5e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8016bde:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016be2:	3340      	adds	r3, #64	; 0x40
 8016be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016bea:	e7c0      	b.n	8016b6e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016bec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016bf0:	3348      	adds	r3, #72	; 0x48
 8016bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016bf8:	e7b9      	b.n	8016b6e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016bfa:	b00d      	add	sp, #52	; 0x34
 8016bfc:	ecbd 8b06 	vpop	{d8-d10}
 8016c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c04:	f3af 8000 	nop.w
	...
 8016c10:	00000001 	.word	0x00000001
 8016c14:	00000000 	.word	0x00000000
 8016c18:	0000001e 	.word	0x0000001e
 8016c1c:	00000000 	.word	0x00000000
 8016c20:	2001752c 	.word	0x2001752c

08016c24 <run_xrce_session>:
 8016c24:	b510      	push	{r4, lr}
 8016c26:	788c      	ldrb	r4, [r1, #2]
 8016c28:	b086      	sub	sp, #24
 8016c2a:	2c01      	cmp	r4, #1
 8016c2c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016c30:	d00c      	beq.n	8016c4c <run_xrce_session+0x28>
 8016c32:	2401      	movs	r4, #1
 8016c34:	4619      	mov	r1, r3
 8016c36:	f10d 020e 	add.w	r2, sp, #14
 8016c3a:	f10d 0317 	add.w	r3, sp, #23
 8016c3e:	9400      	str	r4, [sp, #0]
 8016c40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016c44:	f001 fbc0 	bl	80183c8 <uxr_run_session_until_all_status>
 8016c48:	b006      	add	sp, #24
 8016c4a:	bd10      	pop	{r4, pc}
 8016c4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016c50:	f000 ffdc 	bl	8017c0c <uxr_flash_output_streams>
 8016c54:	4620      	mov	r0, r4
 8016c56:	b006      	add	sp, #24
 8016c58:	bd10      	pop	{r4, pc}
 8016c5a:	bf00      	nop

08016c5c <convert_qos_profile>:
 8016c5c:	7a4a      	ldrb	r2, [r1, #9]
 8016c5e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016c62:	2a02      	cmp	r2, #2
 8016c64:	bf18      	it	ne
 8016c66:	2200      	movne	r2, #0
 8016c68:	7002      	strb	r2, [r0, #0]
 8016c6a:	f1ac 0202 	sub.w	r2, ip, #2
 8016c6e:	fab2 f282 	clz	r2, r2
 8016c72:	0952      	lsrs	r2, r2, #5
 8016c74:	7042      	strb	r2, [r0, #1]
 8016c76:	780a      	ldrb	r2, [r1, #0]
 8016c78:	8889      	ldrh	r1, [r1, #4]
 8016c7a:	f1a2 0202 	sub.w	r2, r2, #2
 8016c7e:	8081      	strh	r1, [r0, #4]
 8016c80:	fab2 f282 	clz	r2, r2
 8016c84:	0952      	lsrs	r2, r2, #5
 8016c86:	7082      	strb	r2, [r0, #2]
 8016c88:	4770      	bx	lr
 8016c8a:	bf00      	nop

08016c8c <generate_type_name>:
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	b530      	push	{r4, r5, lr}
 8016c90:	700b      	strb	r3, [r1, #0]
 8016c92:	b087      	sub	sp, #28
 8016c94:	6803      	ldr	r3, [r0, #0]
 8016c96:	4614      	mov	r4, r2
 8016c98:	b1bb      	cbz	r3, 8016cca <generate_type_name+0x3e>
 8016c9a:	4a0e      	ldr	r2, [pc, #56]	; (8016cd4 <generate_type_name+0x48>)
 8016c9c:	4615      	mov	r5, r2
 8016c9e:	9500      	str	r5, [sp, #0]
 8016ca0:	9203      	str	r2, [sp, #12]
 8016ca2:	4d0d      	ldr	r5, [pc, #52]	; (8016cd8 <generate_type_name+0x4c>)
 8016ca4:	6842      	ldr	r2, [r0, #4]
 8016ca6:	4608      	mov	r0, r1
 8016ca8:	490c      	ldr	r1, [pc, #48]	; (8016cdc <generate_type_name+0x50>)
 8016caa:	9204      	str	r2, [sp, #16]
 8016cac:	9105      	str	r1, [sp, #20]
 8016cae:	9102      	str	r1, [sp, #8]
 8016cb0:	4621      	mov	r1, r4
 8016cb2:	4a0b      	ldr	r2, [pc, #44]	; (8016ce0 <generate_type_name+0x54>)
 8016cb4:	9501      	str	r5, [sp, #4]
 8016cb6:	f00a f819 	bl	8020cec <sniprintf>
 8016cba:	2800      	cmp	r0, #0
 8016cbc:	bfa8      	it	ge
 8016cbe:	4284      	cmpge	r4, r0
 8016cc0:	bfcc      	ite	gt
 8016cc2:	2001      	movgt	r0, #1
 8016cc4:	2000      	movle	r0, #0
 8016cc6:	b007      	add	sp, #28
 8016cc8:	bd30      	pop	{r4, r5, pc}
 8016cca:	4b06      	ldr	r3, [pc, #24]	; (8016ce4 <generate_type_name+0x58>)
 8016ccc:	4a01      	ldr	r2, [pc, #4]	; (8016cd4 <generate_type_name+0x48>)
 8016cce:	461d      	mov	r5, r3
 8016cd0:	e7e5      	b.n	8016c9e <generate_type_name+0x12>
 8016cd2:	bf00      	nop
 8016cd4:	08022734 	.word	0x08022734
 8016cd8:	0802274c 	.word	0x0802274c
 8016cdc:	08022748 	.word	0x08022748
 8016ce0:	08022738 	.word	0x08022738
 8016ce4:	08022f20 	.word	0x08022f20

08016ce8 <generate_topic_name>:
 8016ce8:	b530      	push	{r4, r5, lr}
 8016cea:	4614      	mov	r4, r2
 8016cec:	b083      	sub	sp, #12
 8016cee:	4605      	mov	r5, r0
 8016cf0:	4b07      	ldr	r3, [pc, #28]	; (8016d10 <generate_topic_name+0x28>)
 8016cf2:	4a08      	ldr	r2, [pc, #32]	; (8016d14 <generate_topic_name+0x2c>)
 8016cf4:	4608      	mov	r0, r1
 8016cf6:	9500      	str	r5, [sp, #0]
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	f009 fff7 	bl	8020cec <sniprintf>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	bfa8      	it	ge
 8016d02:	4284      	cmpge	r4, r0
 8016d04:	bfcc      	ite	gt
 8016d06:	2001      	movgt	r0, #1
 8016d08:	2000      	movle	r0, #0
 8016d0a:	b003      	add	sp, #12
 8016d0c:	bd30      	pop	{r4, r5, pc}
 8016d0e:	bf00      	nop
 8016d10:	08022758 	.word	0x08022758
 8016d14:	08022750 	.word	0x08022750

08016d18 <is_uxrce_rmw_identifier_valid>:
 8016d18:	b510      	push	{r4, lr}
 8016d1a:	4604      	mov	r4, r0
 8016d1c:	b140      	cbz	r0, 8016d30 <is_uxrce_rmw_identifier_valid+0x18>
 8016d1e:	f007 fd29 	bl	801e774 <rmw_get_implementation_identifier>
 8016d22:	4601      	mov	r1, r0
 8016d24:	4620      	mov	r0, r4
 8016d26:	f7e9 fa8b 	bl	8000240 <strcmp>
 8016d2a:	fab0 f080 	clz	r0, r0
 8016d2e:	0940      	lsrs	r0, r0, #5
 8016d30:	bd10      	pop	{r4, pc}
 8016d32:	bf00      	nop

08016d34 <get_message_typesupport_handle>:
 8016d34:	6883      	ldr	r3, [r0, #8]
 8016d36:	4718      	bx	r3

08016d38 <get_message_typesupport_handle_function>:
 8016d38:	b510      	push	{r4, lr}
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	6800      	ldr	r0, [r0, #0]
 8016d3e:	f7e9 fa7f 	bl	8000240 <strcmp>
 8016d42:	2800      	cmp	r0, #0
 8016d44:	bf0c      	ite	eq
 8016d46:	4620      	moveq	r0, r4
 8016d48:	2000      	movne	r0, #0
 8016d4a:	bd10      	pop	{r4, pc}

08016d4c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d50:	6805      	ldr	r5, [r0, #0]
 8016d52:	4604      	mov	r4, r0
 8016d54:	460e      	mov	r6, r1
 8016d56:	4628      	mov	r0, r5
 8016d58:	f7e9 fa72 	bl	8000240 <strcmp>
 8016d5c:	b1c8      	cbz	r0, 8016d92 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8016d5e:	4b11      	ldr	r3, [pc, #68]	; (8016da4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	429d      	cmp	r5, r3
 8016d64:	d112      	bne.n	8016d8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016d66:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016d6a:	f8d8 4000 	ldr.w	r4, [r8]
 8016d6e:	b16c      	cbz	r4, 8016d8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016d70:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016d74:	2700      	movs	r7, #0
 8016d76:	3d04      	subs	r5, #4
 8016d78:	4631      	mov	r1, r6
 8016d7a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016d7e:	f7e9 fa5f 	bl	8000240 <strcmp>
 8016d82:	00bb      	lsls	r3, r7, #2
 8016d84:	b140      	cbz	r0, 8016d98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8016d86:	3701      	adds	r7, #1
 8016d88:	42bc      	cmp	r4, r7
 8016d8a:	d1f5      	bne.n	8016d78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d92:	4620      	mov	r0, r4
 8016d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016da0:	58d3      	ldr	r3, [r2, r3]
 8016da2:	4718      	bx	r3
 8016da4:	200003cc 	.word	0x200003cc

08016da8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8016da8:	4b04      	ldr	r3, [pc, #16]	; (8016dbc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8016daa:	681a      	ldr	r2, [r3, #0]
 8016dac:	b10a      	cbz	r2, 8016db2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 8016dae:	4803      	ldr	r0, [pc, #12]	; (8016dbc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8016db0:	4770      	bx	lr
 8016db2:	4a03      	ldr	r2, [pc, #12]	; (8016dc0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 8016db4:	4801      	ldr	r0, [pc, #4]	; (8016dbc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8016db6:	6812      	ldr	r2, [r2, #0]
 8016db8:	601a      	str	r2, [r3, #0]
 8016dba:	4770      	bx	lr
 8016dbc:	200003dc 	.word	0x200003dc
 8016dc0:	200003cc 	.word	0x200003cc

08016dc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8016dc4:	4a02      	ldr	r2, [pc, #8]	; (8016dd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0xc>)
 8016dc6:	4b03      	ldr	r3, [pc, #12]	; (8016dd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool+0x10>)
 8016dc8:	6812      	ldr	r2, [r2, #0]
 8016dca:	601a      	str	r2, [r3, #0]
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	200003cc 	.word	0x200003cc
 8016dd4:	200003dc 	.word	0x200003dc

08016dd8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 8016dd8:	4b04      	ldr	r3, [pc, #16]	; (8016dec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	b10a      	cbz	r2, 8016de2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0xa>
 8016dde:	4803      	ldr	r0, [pc, #12]	; (8016dec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8016de0:	4770      	bx	lr
 8016de2:	4a03      	ldr	r2, [pc, #12]	; (8016df0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x18>)
 8016de4:	4801      	ldr	r0, [pc, #4]	; (8016dec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8016de6:	6812      	ldr	r2, [r2, #0]
 8016de8:	601a      	str	r2, [r3, #0]
 8016dea:	4770      	bx	lr
 8016dec:	200003f0 	.word	0x200003f0
 8016df0:	200003cc 	.word	0x200003cc

08016df4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 8016df4:	4a02      	ldr	r2, [pc, #8]	; (8016e00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0xc>)
 8016df6:	4b03      	ldr	r3, [pc, #12]	; (8016e04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x10>)
 8016df8:	6812      	ldr	r2, [r2, #0]
 8016dfa:	601a      	str	r2, [r3, #0]
 8016dfc:	4770      	bx	lr
 8016dfe:	bf00      	nop
 8016e00:	200003cc 	.word	0x200003cc
 8016e04:	200003f0 	.word	0x200003f0

08016e08 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 8016e08:	f008 b860 	b.w	801eecc <std_msgs__msg__Bool__init>

08016e0c <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 8016e0c:	f008 b862 	b.w	801eed4 <std_msgs__msg__Bool__fini>

08016e10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8016e10:	4b04      	ldr	r3, [pc, #16]	; (8016e24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	b10a      	cbz	r2, 8016e1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 8016e16:	4803      	ldr	r0, [pc, #12]	; (8016e24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8016e18:	4770      	bx	lr
 8016e1a:	4a03      	ldr	r2, [pc, #12]	; (8016e28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 8016e1c:	4801      	ldr	r0, [pc, #4]	; (8016e24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 8016e1e:	6812      	ldr	r2, [r2, #0]
 8016e20:	601a      	str	r2, [r3, #0]
 8016e22:	4770      	bx	lr
 8016e24:	20000438 	.word	0x20000438
 8016e28:	200003d0 	.word	0x200003d0

08016e2c <std_msgs__msg__Float64__rosidl_typesupport_introspection_c__Float64_init_function>:
 8016e2c:	f008 b854 	b.w	801eed8 <std_msgs__msg__Float64__init>

08016e30 <std_msgs__msg__Float64__rosidl_typesupport_introspection_c__Float64_fini_function>:
 8016e30:	f008 b856 	b.w	801eee0 <std_msgs__msg__Float64__fini>

08016e34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 8016e34:	4b04      	ldr	r3, [pc, #16]	; (8016e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8016e36:	681a      	ldr	r2, [r3, #0]
 8016e38:	b10a      	cbz	r2, 8016e3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0xa>
 8016e3a:	4803      	ldr	r0, [pc, #12]	; (8016e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8016e3c:	4770      	bx	lr
 8016e3e:	4a03      	ldr	r2, [pc, #12]	; (8016e4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x18>)
 8016e40:	4801      	ldr	r0, [pc, #4]	; (8016e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8016e42:	6812      	ldr	r2, [r2, #0]
 8016e44:	601a      	str	r2, [r3, #0]
 8016e46:	4770      	bx	lr
 8016e48:	20000480 	.word	0x20000480
 8016e4c:	200003d0 	.word	0x200003d0

08016e50 <_Bool__max_serialized_size>:
 8016e50:	2101      	movs	r1, #1
 8016e52:	2000      	movs	r0, #0
 8016e54:	b508      	push	{r3, lr}
 8016e56:	f7fd f9a7 	bl	80141a8 <ucdr_alignment>
 8016e5a:	3001      	adds	r0, #1
 8016e5c:	bd08      	pop	{r3, pc}
 8016e5e:	bf00      	nop

08016e60 <_Bool__cdr_deserialize>:
 8016e60:	b109      	cbz	r1, 8016e66 <_Bool__cdr_deserialize+0x6>
 8016e62:	f7fc b843 	b.w	8012eec <ucdr_deserialize_bool>
 8016e66:	4608      	mov	r0, r1
 8016e68:	4770      	bx	lr
 8016e6a:	bf00      	nop

08016e6c <get_serialized_size_std_msgs__msg__Bool>:
 8016e6c:	b138      	cbz	r0, 8016e7e <get_serialized_size_std_msgs__msg__Bool+0x12>
 8016e6e:	b508      	push	{r3, lr}
 8016e70:	460b      	mov	r3, r1
 8016e72:	2101      	movs	r1, #1
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7fd f997 	bl	80141a8 <ucdr_alignment>
 8016e7a:	3001      	adds	r0, #1
 8016e7c:	bd08      	pop	{r3, pc}
 8016e7e:	4770      	bx	lr

08016e80 <_Bool__cdr_serialize>:
 8016e80:	460a      	mov	r2, r1
 8016e82:	b118      	cbz	r0, 8016e8c <_Bool__cdr_serialize+0xc>
 8016e84:	7801      	ldrb	r1, [r0, #0]
 8016e86:	4610      	mov	r0, r2
 8016e88:	f7fc b81a 	b.w	8012ec0 <ucdr_serialize_bool>
 8016e8c:	4770      	bx	lr
 8016e8e:	bf00      	nop

08016e90 <_Bool__get_serialized_size>:
 8016e90:	b130      	cbz	r0, 8016ea0 <_Bool__get_serialized_size+0x10>
 8016e92:	2101      	movs	r1, #1
 8016e94:	2000      	movs	r0, #0
 8016e96:	b508      	push	{r3, lr}
 8016e98:	f7fd f986 	bl	80141a8 <ucdr_alignment>
 8016e9c:	3001      	adds	r0, #1
 8016e9e:	bd08      	pop	{r3, pc}
 8016ea0:	4770      	bx	lr
 8016ea2:	bf00      	nop

08016ea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 8016ea4:	4800      	ldr	r0, [pc, #0]	; (8016ea8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 8016ea6:	4770      	bx	lr
 8016ea8:	2000048c 	.word	0x2000048c

08016eac <_Float64__max_serialized_size>:
 8016eac:	2108      	movs	r1, #8
 8016eae:	2000      	movs	r0, #0
 8016eb0:	b508      	push	{r3, lr}
 8016eb2:	f7fd f979 	bl	80141a8 <ucdr_alignment>
 8016eb6:	3008      	adds	r0, #8
 8016eb8:	bd08      	pop	{r3, pc}
 8016eba:	bf00      	nop

08016ebc <_Float64__cdr_deserialize>:
 8016ebc:	b109      	cbz	r1, 8016ec2 <_Float64__cdr_deserialize+0x6>
 8016ebe:	f7fd b855 	b.w	8013f6c <ucdr_deserialize_double>
 8016ec2:	4608      	mov	r0, r1
 8016ec4:	4770      	bx	lr
 8016ec6:	bf00      	nop

08016ec8 <_Float64__get_serialized_size>:
 8016ec8:	b130      	cbz	r0, 8016ed8 <_Float64__get_serialized_size+0x10>
 8016eca:	2108      	movs	r1, #8
 8016ecc:	2000      	movs	r0, #0
 8016ece:	b508      	push	{r3, lr}
 8016ed0:	f7fd f96a 	bl	80141a8 <ucdr_alignment>
 8016ed4:	3008      	adds	r0, #8
 8016ed6:	bd08      	pop	{r3, pc}
 8016ed8:	4770      	bx	lr
 8016eda:	bf00      	nop

08016edc <_Float64__cdr_serialize>:
 8016edc:	b120      	cbz	r0, 8016ee8 <_Float64__cdr_serialize+0xc>
 8016ede:	ed90 0b00 	vldr	d0, [r0]
 8016ee2:	4608      	mov	r0, r1
 8016ee4:	f7fc bf72 	b.w	8013dcc <ucdr_serialize_double>
 8016ee8:	4770      	bx	lr
 8016eea:	bf00      	nop

08016eec <get_serialized_size_std_msgs__msg__Float64>:
 8016eec:	b138      	cbz	r0, 8016efe <get_serialized_size_std_msgs__msg__Float64+0x12>
 8016eee:	b508      	push	{r3, lr}
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	2108      	movs	r1, #8
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f7fd f957 	bl	80141a8 <ucdr_alignment>
 8016efa:	3008      	adds	r0, #8
 8016efc:	bd08      	pop	{r3, pc}
 8016efe:	4770      	bx	lr

08016f00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 8016f00:	4800      	ldr	r0, [pc, #0]	; (8016f04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64+0x4>)
 8016f02:	4770      	bx	lr
 8016f04:	200004b4 	.word	0x200004b4

08016f08 <geometry_msgs__msg__Point__init>:
 8016f08:	3800      	subs	r0, #0
 8016f0a:	bf18      	it	ne
 8016f0c:	2001      	movne	r0, #1
 8016f0e:	4770      	bx	lr

08016f10 <geometry_msgs__msg__Point__fini>:
 8016f10:	4770      	bx	lr
 8016f12:	bf00      	nop

08016f14 <geometry_msgs__msg__Twist__init>:
 8016f14:	b570      	push	{r4, r5, r6, lr}
 8016f16:	4605      	mov	r5, r0
 8016f18:	b1a8      	cbz	r0, 8016f46 <geometry_msgs__msg__Twist__init+0x32>
 8016f1a:	f000 f82b 	bl	8016f74 <geometry_msgs__msg__Vector3__init>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	b140      	cbz	r0, 8016f34 <geometry_msgs__msg__Twist__init+0x20>
 8016f22:	f105 0618 	add.w	r6, r5, #24
 8016f26:	4630      	mov	r0, r6
 8016f28:	f000 f824 	bl	8016f74 <geometry_msgs__msg__Vector3__init>
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	b168      	cbz	r0, 8016f4c <geometry_msgs__msg__Twist__init+0x38>
 8016f30:	4620      	mov	r0, r4
 8016f32:	bd70      	pop	{r4, r5, r6, pc}
 8016f34:	4628      	mov	r0, r5
 8016f36:	f000 f821 	bl	8016f7c <geometry_msgs__msg__Vector3__fini>
 8016f3a:	f105 0018 	add.w	r0, r5, #24
 8016f3e:	f000 f81d 	bl	8016f7c <geometry_msgs__msg__Vector3__fini>
 8016f42:	4620      	mov	r0, r4
 8016f44:	bd70      	pop	{r4, r5, r6, pc}
 8016f46:	4604      	mov	r4, r0
 8016f48:	4620      	mov	r0, r4
 8016f4a:	bd70      	pop	{r4, r5, r6, pc}
 8016f4c:	4628      	mov	r0, r5
 8016f4e:	f000 f815 	bl	8016f7c <geometry_msgs__msg__Vector3__fini>
 8016f52:	4630      	mov	r0, r6
 8016f54:	f000 f812 	bl	8016f7c <geometry_msgs__msg__Vector3__fini>
 8016f58:	e7ea      	b.n	8016f30 <geometry_msgs__msg__Twist__init+0x1c>
 8016f5a:	bf00      	nop

08016f5c <geometry_msgs__msg__Twist__fini>:
 8016f5c:	b148      	cbz	r0, 8016f72 <geometry_msgs__msg__Twist__fini+0x16>
 8016f5e:	b510      	push	{r4, lr}
 8016f60:	4604      	mov	r4, r0
 8016f62:	f000 f80b 	bl	8016f7c <geometry_msgs__msg__Vector3__fini>
 8016f66:	f104 0018 	add.w	r0, r4, #24
 8016f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f6e:	f000 b805 	b.w	8016f7c <geometry_msgs__msg__Vector3__fini>
 8016f72:	4770      	bx	lr

08016f74 <geometry_msgs__msg__Vector3__init>:
 8016f74:	3800      	subs	r0, #0
 8016f76:	bf18      	it	ne
 8016f78:	2001      	movne	r0, #1
 8016f7a:	4770      	bx	lr

08016f7c <geometry_msgs__msg__Vector3__fini>:
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop

08016f80 <uxr_buffer_delete_entity>:
 8016f80:	b510      	push	{r4, lr}
 8016f82:	2300      	movs	r3, #0
 8016f84:	b08e      	sub	sp, #56	; 0x38
 8016f86:	4604      	mov	r4, r0
 8016f88:	9103      	str	r1, [sp, #12]
 8016f8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016f8e:	2303      	movs	r3, #3
 8016f90:	2204      	movs	r2, #4
 8016f92:	9300      	str	r3, [sp, #0]
 8016f94:	ab06      	add	r3, sp, #24
 8016f96:	f001 fc6d 	bl	8018874 <uxr_prepare_stream_to_write_submessage>
 8016f9a:	b918      	cbnz	r0, 8016fa4 <uxr_buffer_delete_entity+0x24>
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	b00e      	add	sp, #56	; 0x38
 8016fa2:	bd10      	pop	{r4, pc}
 8016fa4:	9902      	ldr	r1, [sp, #8]
 8016fa6:	aa05      	add	r2, sp, #20
 8016fa8:	4620      	mov	r0, r4
 8016faa:	f001 fd9f 	bl	8018aec <uxr_init_base_object_request>
 8016fae:	4604      	mov	r4, r0
 8016fb0:	a905      	add	r1, sp, #20
 8016fb2:	a806      	add	r0, sp, #24
 8016fb4:	f003 fc86 	bl	801a8c4 <uxr_serialize_DELETE_Payload>
 8016fb8:	4620      	mov	r0, r4
 8016fba:	b00e      	add	sp, #56	; 0x38
 8016fbc:	bd10      	pop	{r4, pc}
 8016fbe:	bf00      	nop

08016fc0 <uxr_common_create_entity>:
 8016fc0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016fc4:	b510      	push	{r4, lr}
 8016fc6:	f1bc 0f01 	cmp.w	ip, #1
 8016fca:	b08c      	sub	sp, #48	; 0x30
 8016fcc:	4604      	mov	r4, r0
 8016fce:	9202      	str	r2, [sp, #8]
 8016fd0:	bf0c      	ite	eq
 8016fd2:	f003 0201 	andeq.w	r2, r3, #1
 8016fd6:	2200      	movne	r2, #0
 8016fd8:	330e      	adds	r3, #14
 8016fda:	9103      	str	r1, [sp, #12]
 8016fdc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8016fe0:	441a      	add	r2, r3
 8016fe2:	ab04      	add	r3, sp, #16
 8016fe4:	9101      	str	r1, [sp, #4]
 8016fe6:	2101      	movs	r1, #1
 8016fe8:	b292      	uxth	r2, r2
 8016fea:	9100      	str	r1, [sp, #0]
 8016fec:	9903      	ldr	r1, [sp, #12]
 8016fee:	f001 fc41 	bl	8018874 <uxr_prepare_stream_to_write_submessage>
 8016ff2:	b918      	cbnz	r0, 8016ffc <uxr_common_create_entity+0x3c>
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	b00c      	add	sp, #48	; 0x30
 8016ffa:	bd10      	pop	{r4, pc}
 8016ffc:	9902      	ldr	r1, [sp, #8]
 8016ffe:	4620      	mov	r0, r4
 8017000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017002:	f001 fd73 	bl	8018aec <uxr_init_base_object_request>
 8017006:	4604      	mov	r4, r0
 8017008:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801700a:	a804      	add	r0, sp, #16
 801700c:	f003 fb9e 	bl	801a74c <uxr_serialize_CREATE_Payload>
 8017010:	4620      	mov	r0, r4
 8017012:	b00c      	add	sp, #48	; 0x30
 8017014:	bd10      	pop	{r4, pc}
 8017016:	bf00      	nop

08017018 <uxr_buffer_create_participant_bin>:
 8017018:	b570      	push	{r4, r5, r6, lr}
 801701a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801701e:	4605      	mov	r5, r0
 8017020:	ac11      	add	r4, sp, #68	; 0x44
 8017022:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8017026:	2303      	movs	r3, #3
 8017028:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801702c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017030:	7223      	strb	r3, [r4, #8]
 8017032:	2300      	movs	r3, #0
 8017034:	2201      	movs	r2, #1
 8017036:	f88d 3014 	strb.w	r3, [sp, #20]
 801703a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 801703c:	7122      	strb	r2, [r4, #4]
 801703e:	b1cb      	cbz	r3, 8017074 <uxr_buffer_create_participant_bin+0x5c>
 8017040:	f88d 201c 	strb.w	r2, [sp, #28]
 8017044:	9308      	str	r3, [sp, #32]
 8017046:	f44f 7200 	mov.w	r2, #512	; 0x200
 801704a:	a915      	add	r1, sp, #84	; 0x54
 801704c:	a809      	add	r0, sp, #36	; 0x24
 801704e:	f7fd f8a7 	bl	80141a0 <ucdr_init_buffer>
 8017052:	a905      	add	r1, sp, #20
 8017054:	a809      	add	r0, sp, #36	; 0x24
 8017056:	f002 ff63 	bl	8019f20 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801705a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801705c:	9600      	str	r6, [sp, #0]
 801705e:	4628      	mov	r0, r5
 8017060:	9401      	str	r4, [sp, #4]
 8017062:	60e3      	str	r3, [r4, #12]
 8017064:	b29b      	uxth	r3, r3
 8017066:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801706a:	f7ff ffa9 	bl	8016fc0 <uxr_common_create_entity>
 801706e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8017072:	bd70      	pop	{r4, r5, r6, pc}
 8017074:	f88d 301c 	strb.w	r3, [sp, #28]
 8017078:	e7e5      	b.n	8017046 <uxr_buffer_create_participant_bin+0x2e>
 801707a:	bf00      	nop

0801707c <uxr_buffer_create_topic_bin>:
 801707c:	b570      	push	{r4, r5, r6, lr}
 801707e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8017082:	4605      	mov	r5, r0
 8017084:	4618      	mov	r0, r3
 8017086:	9105      	str	r1, [sp, #20]
 8017088:	a997      	add	r1, sp, #604	; 0x25c
 801708a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 801708e:	ac13      	add	r4, sp, #76	; 0x4c
 8017090:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017094:	2302      	movs	r3, #2
 8017096:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801709a:	f000 fa53 	bl	8017544 <uxr_object_id_to_raw>
 801709e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80170a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80170a4:	a917      	add	r1, sp, #92	; 0x5c
 80170a6:	a80b      	add	r0, sp, #44	; 0x2c
 80170a8:	9306      	str	r3, [sp, #24]
 80170aa:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80170ac:	930a      	str	r3, [sp, #40]	; 0x28
 80170ae:	2303      	movs	r3, #3
 80170b0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80170b4:	2301      	movs	r3, #1
 80170b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80170ba:	2300      	movs	r3, #0
 80170bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80170c0:	f7fd f86e 	bl	80141a0 <ucdr_init_buffer>
 80170c4:	a906      	add	r1, sp, #24
 80170c6:	a80b      	add	r0, sp, #44	; 0x2c
 80170c8:	f002 ff4c 	bl	8019f64 <uxr_serialize_OBJK_Topic_Binary>
 80170cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170ce:	4628      	mov	r0, r5
 80170d0:	9600      	str	r6, [sp, #0]
 80170d2:	9316      	str	r3, [sp, #88]	; 0x58
 80170d4:	b29b      	uxth	r3, r3
 80170d6:	9401      	str	r4, [sp, #4]
 80170d8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80170dc:	f7ff ff70 	bl	8016fc0 <uxr_common_create_entity>
 80170e0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80170e4:	bd70      	pop	{r4, r5, r6, pc}
 80170e6:	bf00      	nop

080170e8 <uxr_buffer_create_publisher_bin>:
 80170e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ea:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80170ee:	2603      	movs	r6, #3
 80170f0:	4605      	mov	r5, r0
 80170f2:	4618      	mov	r0, r3
 80170f4:	9105      	str	r1, [sp, #20]
 80170f6:	a992      	add	r1, sp, #584	; 0x248
 80170f8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80170fc:	ac0e      	add	r4, sp, #56	; 0x38
 80170fe:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8017102:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017106:	f000 fa1d 	bl	8017544 <uxr_object_id_to_raw>
 801710a:	2300      	movs	r3, #0
 801710c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017110:	a912      	add	r1, sp, #72	; 0x48
 8017112:	a806      	add	r0, sp, #24
 8017114:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017118:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801711c:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8017120:	f7fd f83e 	bl	80141a0 <ucdr_init_buffer>
 8017124:	a993      	add	r1, sp, #588	; 0x24c
 8017126:	a806      	add	r0, sp, #24
 8017128:	f002 ffd0 	bl	801a0cc <uxr_serialize_OBJK_Publisher_Binary>
 801712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801712e:	4628      	mov	r0, r5
 8017130:	9700      	str	r7, [sp, #0]
 8017132:	9311      	str	r3, [sp, #68]	; 0x44
 8017134:	b29b      	uxth	r3, r3
 8017136:	9401      	str	r4, [sp, #4]
 8017138:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801713c:	f7ff ff40 	bl	8016fc0 <uxr_common_create_entity>
 8017140:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8017144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017146:	bf00      	nop

08017148 <uxr_buffer_create_subscriber_bin>:
 8017148:	b570      	push	{r4, r5, r6, lr}
 801714a:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 801714e:	4605      	mov	r5, r0
 8017150:	4618      	mov	r0, r3
 8017152:	9105      	str	r1, [sp, #20]
 8017154:	a992      	add	r1, sp, #584	; 0x248
 8017156:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 801715a:	ac0e      	add	r4, sp, #56	; 0x38
 801715c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017160:	2304      	movs	r3, #4
 8017162:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8017166:	f000 f9ed 	bl	8017544 <uxr_object_id_to_raw>
 801716a:	2300      	movs	r3, #0
 801716c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017170:	a912      	add	r1, sp, #72	; 0x48
 8017172:	a806      	add	r0, sp, #24
 8017174:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017178:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801717c:	2303      	movs	r3, #3
 801717e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017182:	f7fd f80d 	bl	80141a0 <ucdr_init_buffer>
 8017186:	a993      	add	r1, sp, #588	; 0x24c
 8017188:	a806      	add	r0, sp, #24
 801718a:	f003 f84f 	bl	801a22c <uxr_serialize_OBJK_Subscriber_Binary>
 801718e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017190:	4628      	mov	r0, r5
 8017192:	9600      	str	r6, [sp, #0]
 8017194:	9311      	str	r3, [sp, #68]	; 0x44
 8017196:	b29b      	uxth	r3, r3
 8017198:	9401      	str	r4, [sp, #4]
 801719a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801719e:	f7ff ff0f 	bl	8016fc0 <uxr_common_create_entity>
 80171a2:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 80171a6:	bd70      	pop	{r4, r5, r6, pc}

080171a8 <uxr_buffer_create_datawriter_bin>:
 80171a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ac:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80171b0:	4606      	mov	r6, r0
 80171b2:	4618      	mov	r0, r3
 80171b4:	2703      	movs	r7, #3
 80171b6:	ac1d      	add	r4, sp, #116	; 0x74
 80171b8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 80171bc:	9105      	str	r1, [sp, #20]
 80171be:	a9a1      	add	r1, sp, #644	; 0x284
 80171c0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 80171c4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80171c8:	2305      	movs	r3, #5
 80171ca:	7123      	strb	r3, [r4, #4]
 80171cc:	f000 f9ba 	bl	8017544 <uxr_object_id_to_raw>
 80171d0:	a90e      	add	r1, sp, #56	; 0x38
 80171d2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80171d4:	7227      	strb	r7, [r4, #8]
 80171d6:	f000 f9b5 	bl	8017544 <uxr_object_id_to_raw>
 80171da:	2300      	movs	r3, #0
 80171dc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80171e0:	3d00      	subs	r5, #0
 80171e2:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 80171e6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80171ea:	bf18      	it	ne
 80171ec:	2501      	movne	r5, #1
 80171ee:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80171f2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80171f6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80171fa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80171fe:	2301      	movs	r3, #1
 8017200:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017204:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017208:	bb8a      	cbnz	r2, 801726e <uxr_buffer_create_datawriter_bin+0xc6>
 801720a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801720e:	f04f 0c13 	mov.w	ip, #19
 8017212:	250b      	movs	r5, #11
 8017214:	2221      	movs	r2, #33	; 0x21
 8017216:	2111      	movs	r1, #17
 8017218:	2009      	movs	r0, #9
 801721a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801721e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017222:	b923      	cbnz	r3, 801722e <uxr_buffer_create_datawriter_bin+0x86>
 8017224:	4672      	mov	r2, lr
 8017226:	4661      	mov	r1, ip
 8017228:	4628      	mov	r0, r5
 801722a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801722e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017232:	2b01      	cmp	r3, #1
 8017234:	d025      	beq.n	8017282 <uxr_buffer_create_datawriter_bin+0xda>
 8017236:	2b03      	cmp	r3, #3
 8017238:	d029      	beq.n	801728e <uxr_buffer_create_datawriter_bin+0xe6>
 801723a:	b32b      	cbz	r3, 8017288 <uxr_buffer_create_datawriter_bin+0xe0>
 801723c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017240:	a921      	add	r1, sp, #132	; 0x84
 8017242:	a806      	add	r0, sp, #24
 8017244:	f7fc ffac 	bl	80141a0 <ucdr_init_buffer>
 8017248:	a90e      	add	r1, sp, #56	; 0x38
 801724a:	a806      	add	r0, sp, #24
 801724c:	f003 f8a0 	bl	801a390 <uxr_serialize_OBJK_DataWriter_Binary>
 8017250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017252:	f8cd 8000 	str.w	r8, [sp]
 8017256:	4630      	mov	r0, r6
 8017258:	9401      	str	r4, [sp, #4]
 801725a:	60e3      	str	r3, [r4, #12]
 801725c:	b29b      	uxth	r3, r3
 801725e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017262:	f7ff fead 	bl	8016fc0 <uxr_common_create_entity>
 8017266:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801726a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801726e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017272:	f04f 0c12 	mov.w	ip, #18
 8017276:	250a      	movs	r5, #10
 8017278:	2220      	movs	r2, #32
 801727a:	2110      	movs	r1, #16
 801727c:	2008      	movs	r0, #8
 801727e:	2702      	movs	r7, #2
 8017280:	e7cd      	b.n	801721e <uxr_buffer_create_datawriter_bin+0x76>
 8017282:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017286:	e7d9      	b.n	801723c <uxr_buffer_create_datawriter_bin+0x94>
 8017288:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801728c:	e7d6      	b.n	801723c <uxr_buffer_create_datawriter_bin+0x94>
 801728e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017292:	e7d3      	b.n	801723c <uxr_buffer_create_datawriter_bin+0x94>

08017294 <uxr_buffer_create_datareader_bin>:
 8017294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017298:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801729c:	4606      	mov	r6, r0
 801729e:	4618      	mov	r0, r3
 80172a0:	2703      	movs	r7, #3
 80172a2:	ac1f      	add	r4, sp, #124	; 0x7c
 80172a4:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 80172a8:	9105      	str	r1, [sp, #20]
 80172aa:	a9a3      	add	r1, sp, #652	; 0x28c
 80172ac:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 80172b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80172b4:	2306      	movs	r3, #6
 80172b6:	7123      	strb	r3, [r4, #4]
 80172b8:	f000 f944 	bl	8017544 <uxr_object_id_to_raw>
 80172bc:	a90e      	add	r1, sp, #56	; 0x38
 80172be:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 80172c0:	7227      	strb	r7, [r4, #8]
 80172c2:	f000 f93f 	bl	8017544 <uxr_object_id_to_raw>
 80172c6:	2300      	movs	r3, #0
 80172c8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80172cc:	3d00      	subs	r5, #0
 80172ce:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 80172d2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80172d6:	bf18      	it	ne
 80172d8:	2501      	movne	r5, #1
 80172da:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80172de:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80172e2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80172e6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80172ea:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80172ee:	2301      	movs	r3, #1
 80172f0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80172f4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80172f8:	bb8a      	cbnz	r2, 801735e <uxr_buffer_create_datareader_bin+0xca>
 80172fa:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80172fe:	f04f 0c13 	mov.w	ip, #19
 8017302:	250b      	movs	r5, #11
 8017304:	2221      	movs	r2, #33	; 0x21
 8017306:	2111      	movs	r1, #17
 8017308:	2009      	movs	r0, #9
 801730a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801730e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017312:	b923      	cbnz	r3, 801731e <uxr_buffer_create_datareader_bin+0x8a>
 8017314:	4672      	mov	r2, lr
 8017316:	4661      	mov	r1, ip
 8017318:	4628      	mov	r0, r5
 801731a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801731e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017322:	2b01      	cmp	r3, #1
 8017324:	d025      	beq.n	8017372 <uxr_buffer_create_datareader_bin+0xde>
 8017326:	2b03      	cmp	r3, #3
 8017328:	d029      	beq.n	801737e <uxr_buffer_create_datareader_bin+0xea>
 801732a:	b32b      	cbz	r3, 8017378 <uxr_buffer_create_datareader_bin+0xe4>
 801732c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017330:	a923      	add	r1, sp, #140	; 0x8c
 8017332:	a806      	add	r0, sp, #24
 8017334:	f7fc ff34 	bl	80141a0 <ucdr_init_buffer>
 8017338:	a90e      	add	r1, sp, #56	; 0x38
 801733a:	a806      	add	r0, sp, #24
 801733c:	f002 ffec 	bl	801a318 <uxr_serialize_OBJK_DataReader_Binary>
 8017340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017342:	f8cd 8000 	str.w	r8, [sp]
 8017346:	4630      	mov	r0, r6
 8017348:	9401      	str	r4, [sp, #4]
 801734a:	60e3      	str	r3, [r4, #12]
 801734c:	b29b      	uxth	r3, r3
 801734e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017352:	f7ff fe35 	bl	8016fc0 <uxr_common_create_entity>
 8017356:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801735a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801735e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017362:	f04f 0c12 	mov.w	ip, #18
 8017366:	250a      	movs	r5, #10
 8017368:	2220      	movs	r2, #32
 801736a:	2110      	movs	r1, #16
 801736c:	2008      	movs	r0, #8
 801736e:	2702      	movs	r7, #2
 8017370:	e7cd      	b.n	801730e <uxr_buffer_create_datareader_bin+0x7a>
 8017372:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017376:	e7d9      	b.n	801732c <uxr_buffer_create_datareader_bin+0x98>
 8017378:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801737c:	e7d6      	b.n	801732c <uxr_buffer_create_datareader_bin+0x98>
 801737e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017382:	e7d3      	b.n	801732c <uxr_buffer_create_datareader_bin+0x98>

08017384 <get_custom_error>:
 8017384:	4b01      	ldr	r3, [pc, #4]	; (801738c <get_custom_error+0x8>)
 8017386:	7818      	ldrb	r0, [r3, #0]
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop
 801738c:	2001756c 	.word	0x2001756c

08017390 <recv_custom_msg>:
 8017390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017394:	4693      	mov	fp, r2
 8017396:	b089      	sub	sp, #36	; 0x24
 8017398:	2200      	movs	r2, #0
 801739a:	4604      	mov	r4, r0
 801739c:	468a      	mov	sl, r1
 801739e:	9305      	str	r3, [sp, #20]
 80173a0:	f88d 201e 	strb.w	r2, [sp, #30]
 80173a4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80173a8:	b322      	cbz	r2, 80173f4 <recv_custom_msg+0x64>
 80173aa:	f200 2902 	addw	r9, r0, #514	; 0x202
 80173ae:	f10d 081f 	add.w	r8, sp, #31
 80173b2:	af05      	add	r7, sp, #20
 80173b4:	f10d 061e 	add.w	r6, sp, #30
 80173b8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80173bc:	e002      	b.n	80173c4 <recv_custom_msg+0x34>
 80173be:	9b05      	ldr	r3, [sp, #20]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	dd0f      	ble.n	80173e4 <recv_custom_msg+0x54>
 80173c4:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80173c8:	4623      	mov	r3, r4
 80173ca:	4622      	mov	r2, r4
 80173cc:	4648      	mov	r0, r9
 80173ce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80173d2:	e9cd 5600 	strd	r5, r6, [sp]
 80173d6:	f001 fd9f 	bl	8018f18 <uxr_read_framed_msg>
 80173da:	2800      	cmp	r0, #0
 80173dc:	d0ef      	beq.n	80173be <recv_custom_msg+0x2e>
 80173de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80173e2:	b1b3      	cbz	r3, 8017412 <recv_custom_msg+0x82>
 80173e4:	4b0f      	ldr	r3, [pc, #60]	; (8017424 <recv_custom_msg+0x94>)
 80173e6:	2000      	movs	r0, #0
 80173e8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80173ec:	701a      	strb	r2, [r3, #0]
 80173ee:	b009      	add	sp, #36	; 0x24
 80173f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f4:	f10d 021f 	add.w	r2, sp, #31
 80173f8:	4601      	mov	r1, r0
 80173fa:	9200      	str	r2, [sp, #0]
 80173fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017400:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017404:	47a8      	blx	r5
 8017406:	2800      	cmp	r0, #0
 8017408:	d0ec      	beq.n	80173e4 <recv_custom_msg+0x54>
 801740a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d1e8      	bne.n	80173e4 <recv_custom_msg+0x54>
 8017412:	f8cb 0000 	str.w	r0, [fp]
 8017416:	2001      	movs	r0, #1
 8017418:	f8ca 4000 	str.w	r4, [sl]
 801741c:	b009      	add	sp, #36	; 0x24
 801741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017422:	bf00      	nop
 8017424:	2001756c 	.word	0x2001756c

08017428 <send_custom_msg>:
 8017428:	b530      	push	{r4, r5, lr}
 801742a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801742e:	b087      	sub	sp, #28
 8017430:	4614      	mov	r4, r2
 8017432:	b995      	cbnz	r5, 801745a <send_custom_msg+0x32>
 8017434:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017438:	f10d 0317 	add.w	r3, sp, #23
 801743c:	47a8      	blx	r5
 801743e:	1e03      	subs	r3, r0, #0
 8017440:	bf18      	it	ne
 8017442:	2301      	movne	r3, #1
 8017444:	42a0      	cmp	r0, r4
 8017446:	bf18      	it	ne
 8017448:	2300      	movne	r3, #0
 801744a:	b91b      	cbnz	r3, 8017454 <send_custom_msg+0x2c>
 801744c:	4a0a      	ldr	r2, [pc, #40]	; (8017478 <send_custom_msg+0x50>)
 801744e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017452:	7011      	strb	r1, [r2, #0]
 8017454:	4618      	mov	r0, r3
 8017456:	b007      	add	sp, #28
 8017458:	bd30      	pop	{r4, r5, pc}
 801745a:	460b      	mov	r3, r1
 801745c:	2200      	movs	r2, #0
 801745e:	f10d 0117 	add.w	r1, sp, #23
 8017462:	9400      	str	r4, [sp, #0]
 8017464:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017468:	4602      	mov	r2, r0
 801746a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801746e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017472:	f001 fb73 	bl	8018b5c <uxr_write_framed_msg>
 8017476:	e7e2      	b.n	801743e <send_custom_msg+0x16>
 8017478:	2001756c 	.word	0x2001756c

0801747c <uxr_set_custom_transport_callbacks>:
 801747c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017480:	9901      	ldr	r1, [sp, #4]
 8017482:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017486:	9b00      	ldr	r3, [sp, #0]
 8017488:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop

08017490 <uxr_init_custom_transport>:
 8017490:	b538      	push	{r3, r4, r5, lr}
 8017492:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017496:	b303      	cbz	r3, 80174da <uxr_init_custom_transport+0x4a>
 8017498:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801749c:	4604      	mov	r4, r0
 801749e:	b1e2      	cbz	r2, 80174da <uxr_init_custom_transport+0x4a>
 80174a0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80174a4:	b1ca      	cbz	r2, 80174da <uxr_init_custom_transport+0x4a>
 80174a6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80174aa:	b1b2      	cbz	r2, 80174da <uxr_init_custom_transport+0x4a>
 80174ac:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80174b0:	4798      	blx	r3
 80174b2:	4605      	mov	r5, r0
 80174b4:	b188      	cbz	r0, 80174da <uxr_init_custom_transport+0x4a>
 80174b6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80174ba:	b98b      	cbnz	r3, 80174e0 <uxr_init_custom_transport+0x50>
 80174bc:	4b0b      	ldr	r3, [pc, #44]	; (80174ec <uxr_init_custom_transport+0x5c>)
 80174be:	4628      	mov	r0, r5
 80174c0:	490b      	ldr	r1, [pc, #44]	; (80174f0 <uxr_init_custom_transport+0x60>)
 80174c2:	4a0c      	ldr	r2, [pc, #48]	; (80174f4 <uxr_init_custom_transport+0x64>)
 80174c4:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80174c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174cc:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80174d0:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80174d4:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80174d8:	bd38      	pop	{r3, r4, r5, pc}
 80174da:	2500      	movs	r5, #0
 80174dc:	4628      	mov	r0, r5
 80174de:	bd38      	pop	{r3, r4, r5, pc}
 80174e0:	2100      	movs	r1, #0
 80174e2:	f204 2002 	addw	r0, r4, #514	; 0x202
 80174e6:	f001 fb33 	bl	8018b50 <uxr_init_framing_io>
 80174ea:	e7e7      	b.n	80174bc <uxr_init_custom_transport+0x2c>
 80174ec:	08017391 	.word	0x08017391
 80174f0:	08017429 	.word	0x08017429
 80174f4:	08017385 	.word	0x08017385

080174f8 <uxr_close_custom_transport>:
 80174f8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80174fc:	4718      	bx	r3
 80174fe:	bf00      	nop

08017500 <uxr_object_id>:
 8017500:	b082      	sub	sp, #8
 8017502:	2300      	movs	r3, #0
 8017504:	f88d 1006 	strb.w	r1, [sp, #6]
 8017508:	f360 030f 	bfi	r3, r0, #0, #16
 801750c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017510:	f362 431f 	bfi	r3, r2, #16, #16
 8017514:	4618      	mov	r0, r3
 8017516:	b002      	add	sp, #8
 8017518:	4770      	bx	lr
 801751a:	bf00      	nop

0801751c <uxr_object_id_from_raw>:
 801751c:	7843      	ldrb	r3, [r0, #1]
 801751e:	b082      	sub	sp, #8
 8017520:	7801      	ldrb	r1, [r0, #0]
 8017522:	2000      	movs	r0, #0
 8017524:	091a      	lsrs	r2, r3, #4
 8017526:	f003 030f 	and.w	r3, r3, #15
 801752a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801752e:	f88d 3006 	strb.w	r3, [sp, #6]
 8017532:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017536:	f362 000f 	bfi	r0, r2, #0, #16
 801753a:	f363 401f 	bfi	r0, r3, #16, #16
 801753e:	b002      	add	sp, #8
 8017540:	4770      	bx	lr
 8017542:	bf00      	nop

08017544 <uxr_object_id_to_raw>:
 8017544:	4602      	mov	r2, r0
 8017546:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801754a:	b082      	sub	sp, #8
 801754c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017550:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017554:	f881 c000 	strb.w	ip, [r1]
 8017558:	7048      	strb	r0, [r1, #1]
 801755a:	b002      	add	sp, #8
 801755c:	4770      	bx	lr
 801755e:	bf00      	nop

08017560 <uxr_ping_agent_session>:
 8017560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017564:	4617      	mov	r7, r2
 8017566:	b091      	sub	sp, #68	; 0x44
 8017568:	2210      	movs	r2, #16
 801756a:	4606      	mov	r6, r0
 801756c:	4688      	mov	r8, r1
 801756e:	a808      	add	r0, sp, #32
 8017570:	eb0d 0102 	add.w	r1, sp, r2
 8017574:	2500      	movs	r5, #0
 8017576:	f7fc fe13 	bl	80141a0 <ucdr_init_buffer>
 801757a:	4b1e      	ldr	r3, [pc, #120]	; (80175f4 <uxr_ping_agent_session+0x94>)
 801757c:	2402      	movs	r4, #2
 801757e:	462a      	mov	r2, r5
 8017580:	881b      	ldrh	r3, [r3, #0]
 8017582:	a808      	add	r0, sp, #32
 8017584:	9500      	str	r5, [sp, #0]
 8017586:	f8ad 300a 	strh.w	r3, [sp, #10]
 801758a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801758e:	7831      	ldrb	r1, [r6, #0]
 8017590:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017594:	462b      	mov	r3, r5
 8017596:	9403      	str	r4, [sp, #12]
 8017598:	f002 fa90 	bl	8019abc <uxr_serialize_message_header>
 801759c:	4621      	mov	r1, r4
 801759e:	462b      	mov	r3, r5
 80175a0:	2208      	movs	r2, #8
 80175a2:	a808      	add	r0, sp, #32
 80175a4:	f002 f88e 	bl	80196c4 <uxr_buffer_submessage_header>
 80175a8:	4604      	mov	r4, r0
 80175aa:	a902      	add	r1, sp, #8
 80175ac:	a808      	add	r0, sp, #32
 80175ae:	f003 f95d 	bl	801a86c <uxr_serialize_GET_INFO_Payload>
 80175b2:	b104      	cbz	r4, 80175b6 <uxr_ping_agent_session+0x56>
 80175b4:	b918      	cbnz	r0, 80175be <uxr_ping_agent_session+0x5e>
 80175b6:	2000      	movs	r0, #0
 80175b8:	b011      	add	sp, #68	; 0x44
 80175ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175be:	a808      	add	r0, sp, #32
 80175c0:	f7fc fe1c 	bl	80141fc <ucdr_buffer_length>
 80175c4:	4681      	mov	r9, r0
 80175c6:	e00d      	b.n	80175e4 <uxr_ping_agent_session+0x84>
 80175c8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80175ca:	e9d3 0400 	ldrd	r0, r4, [r3]
 80175ce:	47a0      	blx	r4
 80175d0:	4604      	mov	r4, r0
 80175d2:	4641      	mov	r1, r8
 80175d4:	4630      	mov	r0, r6
 80175d6:	f000 ff4d 	bl	8018474 <uxr_run_session_until_pong>
 80175da:	ea04 0c00 	and.w	ip, r4, r0
 80175de:	f01c 00ff 	ands.w	r0, ip, #255	; 0xff
 80175e2:	d1e9      	bne.n	80175b8 <uxr_ping_agent_session+0x58>
 80175e4:	42af      	cmp	r7, r5
 80175e6:	464a      	mov	r2, r9
 80175e8:	a904      	add	r1, sp, #16
 80175ea:	f105 0501 	add.w	r5, r5, #1
 80175ee:	d1eb      	bne.n	80175c8 <uxr_ping_agent_session+0x68>
 80175f0:	e7e1      	b.n	80175b6 <uxr_ping_agent_session+0x56>
 80175f2:	bf00      	nop
 80175f4:	08022238 	.word	0x08022238

080175f8 <uxr_ping_agent_attempts>:
 80175f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175fc:	ed2d 8b02 	vpush	{d8}
 8017600:	b0d3      	sub	sp, #332	; 0x14c
 8017602:	4606      	mov	r6, r0
 8017604:	468a      	mov	sl, r1
 8017606:	2400      	movs	r4, #0
 8017608:	a90c      	add	r1, sp, #48	; 0x30
 801760a:	a810      	add	r0, sp, #64	; 0x40
 801760c:	9205      	str	r2, [sp, #20]
 801760e:	2210      	movs	r2, #16
 8017610:	f7fc fdc6 	bl	80141a0 <ucdr_init_buffer>
 8017614:	4b53      	ldr	r3, [pc, #332]	; (8017764 <uxr_ping_agent_attempts+0x16c>)
 8017616:	2502      	movs	r5, #2
 8017618:	4622      	mov	r2, r4
 801761a:	881b      	ldrh	r3, [r3, #0]
 801761c:	2180      	movs	r1, #128	; 0x80
 801761e:	a810      	add	r0, sp, #64	; 0x40
 8017620:	9400      	str	r4, [sp, #0]
 8017622:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
 8017626:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801762a:	9521      	str	r5, [sp, #132]	; 0x84
 801762c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
 8017630:	4623      	mov	r3, r4
 8017632:	f002 fa43 	bl	8019abc <uxr_serialize_message_header>
 8017636:	4623      	mov	r3, r4
 8017638:	4629      	mov	r1, r5
 801763a:	2208      	movs	r2, #8
 801763c:	a810      	add	r0, sp, #64	; 0x40
 801763e:	f002 f841 	bl	80196c4 <uxr_buffer_submessage_header>
 8017642:	4681      	mov	r9, r0
 8017644:	a920      	add	r1, sp, #128	; 0x80
 8017646:	a810      	add	r0, sp, #64	; 0x40
 8017648:	f003 f910 	bl	801a86c <uxr_serialize_GET_INFO_Payload>
 801764c:	ea09 0000 	and.w	r0, r9, r0
 8017650:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 8017654:	d107      	bne.n	8017666 <uxr_ping_agent_attempts+0x6e>
 8017656:	f04f 0b00 	mov.w	fp, #0
 801765a:	4658      	mov	r0, fp
 801765c:	b053      	add	sp, #332	; 0x14c
 801765e:	ecbd 8b02 	vpop	{d8}
 8017662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017666:	a810      	add	r0, sp, #64	; 0x40
 8017668:	9404      	str	r4, [sp, #16]
 801766a:	f7fc fdc7 	bl	80141fc <ucdr_buffer_length>
 801766e:	ee08 0a10 	vmov	s16, r0
 8017672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017676:	4293      	cmp	r3, r2
 8017678:	d0ed      	beq.n	8017656 <uxr_ping_agent_attempts+0x5e>
 801767a:	ee18 2a10 	vmov	r2, s16
 801767e:	a90c      	add	r1, sp, #48	; 0x30
 8017680:	4655      	mov	r5, sl
 8017682:	f04f 0800 	mov.w	r8, #0
 8017686:	e9d6 0300 	ldrd	r0, r3, [r6]
 801768a:	4798      	blx	r3
 801768c:	f002 f860 	bl	8019750 <uxr_millis>
 8017690:	9003      	str	r0, [sp, #12]
 8017692:	e00b      	b.n	80176ac <uxr_ping_agent_attempts+0xb4>
 8017694:	f002 f85c 	bl	8019750 <uxr_millis>
 8017698:	9b03      	ldr	r3, [sp, #12]
 801769a:	1ac0      	subs	r0, r0, r3
 801769c:	1a2d      	subs	r5, r5, r0
 801769e:	f002 f857 	bl	8019750 <uxr_millis>
 80176a2:	9003      	str	r0, [sp, #12]
 80176a4:	2d00      	cmp	r5, #0
 80176a6:	dd30      	ble.n	801770a <uxr_ping_agent_attempts+0x112>
 80176a8:	2f00      	cmp	r7, #0
 80176aa:	d02e      	beq.n	801770a <uxr_ping_agent_attempts+0x112>
 80176ac:	4653      	mov	r3, sl
 80176ae:	aa09      	add	r2, sp, #36	; 0x24
 80176b0:	a908      	add	r1, sp, #32
 80176b2:	6830      	ldr	r0, [r6, #0]
 80176b4:	68b4      	ldr	r4, [r6, #8]
 80176b6:	464f      	mov	r7, r9
 80176b8:	f8cd 8020 	str.w	r8, [sp, #32]
 80176bc:	47a0      	blx	r4
 80176be:	4683      	mov	fp, r0
 80176c0:	2800      	cmp	r0, #0
 80176c2:	d0e7      	beq.n	8017694 <uxr_ping_agent_attempts+0x9c>
 80176c4:	a818      	add	r0, sp, #96	; 0x60
 80176c6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80176ca:	f7fc fd69 	bl	80141a0 <ucdr_init_buffer>
 80176ce:	ab07      	add	r3, sp, #28
 80176d0:	f10d 0219 	add.w	r2, sp, #25
 80176d4:	a918      	add	r1, sp, #96	; 0x60
 80176d6:	a80a      	add	r0, sp, #40	; 0x28
 80176d8:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
 80176dc:	f001 f9be 	bl	8018a5c <uxr_read_session_header>
 80176e0:	22c8      	movs	r2, #200	; 0xc8
 80176e2:	2100      	movs	r1, #0
 80176e4:	a820      	add	r0, sp, #128	; 0x80
 80176e6:	f009 fc71 	bl	8020fcc <memset>
 80176ea:	a818      	add	r0, sp, #96	; 0x60
 80176ec:	f7fc fd8a 	bl	8014204 <ucdr_buffer_remaining>
 80176f0:	2804      	cmp	r0, #4
 80176f2:	d816      	bhi.n	8017722 <uxr_ping_agent_attempts+0x12a>
 80176f4:	f89d 3135 	ldrb.w	r3, [sp, #309]	; 0x135
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	bf13      	iteet	ne
 80176fc:	f04f 0b01 	movne.w	fp, #1
 8017700:	f04f 0b00 	moveq.w	fp, #0
 8017704:	2701      	moveq	r7, #1
 8017706:	2700      	movne	r7, #0
 8017708:	e7c4      	b.n	8017694 <uxr_ping_agent_attempts+0x9c>
 801770a:	9b04      	ldr	r3, [sp, #16]
 801770c:	3301      	adds	r3, #1
 801770e:	9304      	str	r3, [sp, #16]
 8017710:	f1bb 0f00 	cmp.w	fp, #0
 8017714:	d0ad      	beq.n	8017672 <uxr_ping_agent_attempts+0x7a>
 8017716:	4658      	mov	r0, fp
 8017718:	b053      	add	sp, #332	; 0x14c
 801771a:	ecbd 8b02 	vpop	{d8}
 801771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017722:	f10d 031e 	add.w	r3, sp, #30
 8017726:	f10d 021b 	add.w	r2, sp, #27
 801772a:	f10d 011a 	add.w	r1, sp, #26
 801772e:	a818      	add	r0, sp, #96	; 0x60
 8017730:	f88d 801a 	strb.w	r8, [sp, #26]
 8017734:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017738:	f88d 801b 	strb.w	r8, [sp, #27]
 801773c:	f002 fa10 	bl	8019b60 <uxr_deserialize_submessage_header>
 8017740:	a818      	add	r0, sp, #96	; 0x60
 8017742:	f7fc fd5f 	bl	8014204 <ucdr_buffer_remaining>
 8017746:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801774a:	4298      	cmp	r0, r3
 801774c:	d3d2      	bcc.n	80176f4 <uxr_ping_agent_attempts+0xfc>
 801774e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8017752:	2b06      	cmp	r3, #6
 8017754:	d1ce      	bne.n	80176f4 <uxr_ping_agent_attempts+0xfc>
 8017756:	a918      	add	r1, sp, #96	; 0x60
 8017758:	a820      	add	r0, sp, #128	; 0x80
 801775a:	f88d 8135 	strb.w	r8, [sp, #309]	; 0x135
 801775e:	f000 fac9 	bl	8017cf4 <read_submessage_info>
 8017762:	e7c7      	b.n	80176f4 <uxr_ping_agent_attempts+0xfc>
 8017764:	08022238 	.word	0x08022238

08017768 <uxr_buffer_request_data>:
 8017768:	b530      	push	{r4, r5, lr}
 801776a:	b095      	sub	sp, #84	; 0x54
 801776c:	4604      	mov	r4, r0
 801776e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017770:	9303      	str	r3, [sp, #12]
 8017772:	2d00      	cmp	r5, #0
 8017774:	f88d 301c 	strb.w	r3, [sp, #28]
 8017778:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801777c:	f04f 0200 	mov.w	r2, #0
 8017780:	bf14      	ite	ne
 8017782:	2101      	movne	r1, #1
 8017784:	4611      	moveq	r1, r2
 8017786:	f88d 201d 	strb.w	r2, [sp, #29]
 801778a:	f88d 201e 	strb.w	r2, [sp, #30]
 801778e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017792:	d021      	beq.n	80177d8 <uxr_buffer_request_data+0x70>
 8017794:	686b      	ldr	r3, [r5, #4]
 8017796:	2210      	movs	r2, #16
 8017798:	6829      	ldr	r1, [r5, #0]
 801779a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801779e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 80177a2:	2308      	movs	r3, #8
 80177a4:	2100      	movs	r1, #0
 80177a6:	4620      	mov	r0, r4
 80177a8:	e9cd 3100 	strd	r3, r1, [sp]
 80177ac:	ab0c      	add	r3, sp, #48	; 0x30
 80177ae:	9905      	ldr	r1, [sp, #20]
 80177b0:	f001 f860 	bl	8018874 <uxr_prepare_stream_to_write_submessage>
 80177b4:	b918      	cbnz	r0, 80177be <uxr_buffer_request_data+0x56>
 80177b6:	4604      	mov	r4, r0
 80177b8:	4620      	mov	r0, r4
 80177ba:	b015      	add	sp, #84	; 0x54
 80177bc:	bd30      	pop	{r4, r5, pc}
 80177be:	9904      	ldr	r1, [sp, #16]
 80177c0:	aa06      	add	r2, sp, #24
 80177c2:	4620      	mov	r0, r4
 80177c4:	f001 f992 	bl	8018aec <uxr_init_base_object_request>
 80177c8:	4604      	mov	r4, r0
 80177ca:	a906      	add	r1, sp, #24
 80177cc:	a80c      	add	r0, sp, #48	; 0x30
 80177ce:	f003 f923 	bl	801aa18 <uxr_serialize_READ_DATA_Payload>
 80177d2:	4620      	mov	r0, r4
 80177d4:	b015      	add	sp, #84	; 0x54
 80177d6:	bd30      	pop	{r4, r5, pc}
 80177d8:	2208      	movs	r2, #8
 80177da:	e7e2      	b.n	80177a2 <uxr_buffer_request_data+0x3a>

080177dc <uxr_buffer_cancel_data>:
 80177dc:	b510      	push	{r4, lr}
 80177de:	2300      	movs	r3, #0
 80177e0:	b094      	sub	sp, #80	; 0x50
 80177e2:	4604      	mov	r4, r0
 80177e4:	9205      	str	r2, [sp, #20]
 80177e6:	9301      	str	r3, [sp, #4]
 80177e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80177ec:	f88d 301e 	strb.w	r3, [sp, #30]
 80177f0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80177f4:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80177f8:	2308      	movs	r3, #8
 80177fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80177fe:	2201      	movs	r2, #1
 8017800:	9300      	str	r3, [sp, #0]
 8017802:	ab0c      	add	r3, sp, #48	; 0x30
 8017804:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017808:	2210      	movs	r2, #16
 801780a:	f001 f833 	bl	8018874 <uxr_prepare_stream_to_write_submessage>
 801780e:	b918      	cbnz	r0, 8017818 <uxr_buffer_cancel_data+0x3c>
 8017810:	4604      	mov	r4, r0
 8017812:	4620      	mov	r0, r4
 8017814:	b014      	add	sp, #80	; 0x50
 8017816:	bd10      	pop	{r4, pc}
 8017818:	9905      	ldr	r1, [sp, #20]
 801781a:	aa06      	add	r2, sp, #24
 801781c:	4620      	mov	r0, r4
 801781e:	f001 f965 	bl	8018aec <uxr_init_base_object_request>
 8017822:	4604      	mov	r4, r0
 8017824:	a906      	add	r1, sp, #24
 8017826:	a80c      	add	r0, sp, #48	; 0x30
 8017828:	f003 f8f6 	bl	801aa18 <uxr_serialize_READ_DATA_Payload>
 801782c:	4620      	mov	r0, r4
 801782e:	b014      	add	sp, #80	; 0x50
 8017830:	bd10      	pop	{r4, pc}
 8017832:	bf00      	nop

08017834 <read_submessage_format>:
 8017834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017838:	b095      	sub	sp, #84	; 0x54
 801783a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801783e:	b113      	cbz	r3, 8017846 <read_submessage_format+0x12>
 8017840:	b015      	add	sp, #84	; 0x54
 8017842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017846:	4606      	mov	r6, r0
 8017848:	981c      	ldr	r0, [sp, #112]	; 0x70
 801784a:	460c      	mov	r4, r1
 801784c:	4615      	mov	r5, r2
 801784e:	9004      	str	r0, [sp, #16]
 8017850:	4699      	mov	r9, r3
 8017852:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017854:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8017858:	9005      	str	r0, [sp, #20]
 801785a:	a80c      	add	r0, sp, #48	; 0x30
 801785c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017860:	1a52      	subs	r2, r2, r1
 8017862:	f7fc fc9d 	bl	80141a0 <ucdr_init_buffer>
 8017866:	a80c      	add	r0, sp, #48	; 0x30
 8017868:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801786c:	f7fc fc6c 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 8017870:	69e2      	ldr	r2, [r4, #28]
 8017872:	b19a      	cbz	r2, 801789c <read_submessage_format+0x68>
 8017874:	f1b8 0f07 	cmp.w	r8, #7
 8017878:	f882 9014 	strb.w	r9, [r2, #20]
 801787c:	d040      	beq.n	8017900 <read_submessage_format+0xcc>
 801787e:	f1b8 0f08 	cmp.w	r8, #8
 8017882:	d02e      	beq.n	80178e2 <read_submessage_format+0xae>
 8017884:	f1b8 0f06 	cmp.w	r8, #6
 8017888:	d011      	beq.n	80178ae <read_submessage_format+0x7a>
 801788a:	2301      	movs	r3, #1
 801788c:	7513      	strb	r3, [r2, #20]
 801788e:	4629      	mov	r1, r5
 8017890:	4620      	mov	r0, r4
 8017892:	f7fc fcd9 	bl	8014248 <ucdr_advance_buffer>
 8017896:	b015      	add	sp, #84	; 0x54
 8017898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801789c:	f1b8 0f07 	cmp.w	r8, #7
 80178a0:	d02e      	beq.n	8017900 <read_submessage_format+0xcc>
 80178a2:	f1b8 0f08 	cmp.w	r8, #8
 80178a6:	d01c      	beq.n	80178e2 <read_submessage_format+0xae>
 80178a8:	f1b8 0f06 	cmp.w	r8, #6
 80178ac:	d1ef      	bne.n	801788e <read_submessage_format+0x5a>
 80178ae:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80178b2:	f1b8 0f00 	cmp.w	r8, #0
 80178b6:	d011      	beq.n	80178dc <read_submessage_format+0xa8>
 80178b8:	ab0c      	add	r3, sp, #48	; 0x30
 80178ba:	9501      	str	r5, [sp, #4]
 80178bc:	463a      	mov	r2, r7
 80178be:	4630      	mov	r0, r6
 80178c0:	9300      	str	r3, [sp, #0]
 80178c2:	2306      	movs	r3, #6
 80178c4:	f88d 3016 	strb.w	r3, [sp, #22]
 80178c8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80178cc:	9302      	str	r3, [sp, #8]
 80178ce:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80178d2:	47c0      	blx	r8
 80178d4:	2301      	movs	r3, #1
 80178d6:	69e2      	ldr	r2, [r4, #28]
 80178d8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80178dc:	2a00      	cmp	r2, #0
 80178de:	d1d4      	bne.n	801788a <read_submessage_format+0x56>
 80178e0:	e7d5      	b.n	801788e <read_submessage_format+0x5a>
 80178e2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d0f8      	beq.n	80178dc <read_submessage_format+0xa8>
 80178ea:	a80c      	add	r0, sp, #48	; 0x30
 80178ec:	a906      	add	r1, sp, #24
 80178ee:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80178f2:	f003 f95d 	bl	801abb0 <uxr_deserialize_SampleIdentity>
 80178f6:	b9a0      	cbnz	r0, 8017922 <read_submessage_format+0xee>
 80178f8:	69e2      	ldr	r2, [r4, #28]
 80178fa:	2a00      	cmp	r2, #0
 80178fc:	d1c5      	bne.n	801788a <read_submessage_format+0x56>
 80178fe:	e7c6      	b.n	801788e <read_submessage_format+0x5a>
 8017900:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8017904:	b13b      	cbz	r3, 8017916 <read_submessage_format+0xe2>
 8017906:	a906      	add	r1, sp, #24
 8017908:	a80c      	add	r0, sp, #48	; 0x30
 801790a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801790e:	f002 fe0d 	bl	801a52c <uxr_deserialize_BaseObjectRequest>
 8017912:	bb60      	cbnz	r0, 801796e <read_submessage_format+0x13a>
 8017914:	69e2      	ldr	r2, [r4, #28]
 8017916:	68a3      	ldr	r3, [r4, #8]
 8017918:	442b      	add	r3, r5
 801791a:	60a3      	str	r3, [r4, #8]
 801791c:	2a00      	cmp	r2, #0
 801791e:	d1b4      	bne.n	801788a <read_submessage_format+0x56>
 8017920:	e7b5      	b.n	801788e <read_submessage_format+0x5a>
 8017922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017924:	a80c      	add	r0, sp, #48	; 0x30
 8017926:	eba8 0803 	sub.w	r8, r8, r3
 801792a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801792e:	44a8      	add	r8, r5
 8017930:	1a52      	subs	r2, r2, r1
 8017932:	f7fc fc35 	bl	80141a0 <ucdr_init_buffer>
 8017936:	a80c      	add	r0, sp, #48	; 0x30
 8017938:	fa1f f888 	uxth.w	r8, r8
 801793c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017940:	f7fc fc02 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 8017944:	ab0c      	add	r3, sp, #48	; 0x30
 8017946:	2108      	movs	r1, #8
 8017948:	f8cd 8004 	str.w	r8, [sp, #4]
 801794c:	9300      	str	r3, [sp, #0]
 801794e:	463a      	mov	r2, r7
 8017950:	f88d 1016 	strb.w	r1, [sp, #22]
 8017954:	ab06      	add	r3, sp, #24
 8017956:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801795a:	4630      	mov	r0, r6
 801795c:	9102      	str	r1, [sp, #8]
 801795e:	9905      	ldr	r1, [sp, #20]
 8017960:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8017964:	47b8      	blx	r7
 8017966:	2301      	movs	r3, #1
 8017968:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801796c:	e7c4      	b.n	80178f8 <read_submessage_format+0xc4>
 801796e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017974:	a80c      	add	r0, sp, #48	; 0x30
 8017976:	1a52      	subs	r2, r2, r1
 8017978:	eba8 0803 	sub.w	r8, r8, r3
 801797c:	f7fc fc10 	bl	80141a0 <ucdr_init_buffer>
 8017980:	a80c      	add	r0, sp, #48	; 0x30
 8017982:	44a8      	add	r8, r5
 8017984:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017988:	f7fc fbde 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 801798c:	ab0c      	add	r3, sp, #48	; 0x30
 801798e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8017992:	fa1f f888 	uxth.w	r8, r8
 8017996:	9300      	str	r3, [sp, #0]
 8017998:	463a      	mov	r2, r7
 801799a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801799e:	4630      	mov	r0, r6
 80179a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80179a4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80179a8:	2107      	movs	r1, #7
 80179aa:	f88d 1016 	strb.w	r1, [sp, #22]
 80179ae:	b29b      	uxth	r3, r3
 80179b0:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80179b4:	9102      	str	r1, [sp, #8]
 80179b6:	9905      	ldr	r1, [sp, #20]
 80179b8:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80179bc:	47b8      	blx	r7
 80179be:	2301      	movs	r3, #1
 80179c0:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80179c4:	e7a6      	b.n	8017914 <read_submessage_format+0xe0>
 80179c6:	bf00      	nop

080179c8 <on_get_fragmentation_info>:
 80179c8:	b500      	push	{lr}
 80179ca:	b08b      	sub	sp, #44	; 0x2c
 80179cc:	4601      	mov	r1, r0
 80179ce:	2204      	movs	r2, #4
 80179d0:	a802      	add	r0, sp, #8
 80179d2:	f7fc fbe5 	bl	80141a0 <ucdr_init_buffer>
 80179d6:	f10d 0305 	add.w	r3, sp, #5
 80179da:	f10d 0206 	add.w	r2, sp, #6
 80179de:	a901      	add	r1, sp, #4
 80179e0:	a802      	add	r0, sp, #8
 80179e2:	f001 fe89 	bl	80196f8 <uxr_read_submessage_header>
 80179e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80179ea:	2b0d      	cmp	r3, #13
 80179ec:	d003      	beq.n	80179f6 <on_get_fragmentation_info+0x2e>
 80179ee:	2000      	movs	r0, #0
 80179f0:	b00b      	add	sp, #44	; 0x2c
 80179f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80179f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80179fa:	f013 0f02 	tst.w	r3, #2
 80179fe:	bf14      	ite	ne
 8017a00:	2002      	movne	r0, #2
 8017a02:	2001      	moveq	r0, #1
 8017a04:	b00b      	add	sp, #44	; 0x2c
 8017a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a0a:	bf00      	nop

08017a0c <read_submessage_get_info>:
 8017a0c:	b570      	push	{r4, r5, r6, lr}
 8017a0e:	2500      	movs	r5, #0
 8017a10:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8017a14:	460e      	mov	r6, r1
 8017a16:	4604      	mov	r4, r0
 8017a18:	f44f 7224 	mov.w	r2, #656	; 0x290
 8017a1c:	4629      	mov	r1, r5
 8017a1e:	a810      	add	r0, sp, #64	; 0x40
 8017a20:	9503      	str	r5, [sp, #12]
 8017a22:	9504      	str	r5, [sp, #16]
 8017a24:	f009 fad2 	bl	8020fcc <memset>
 8017a28:	a903      	add	r1, sp, #12
 8017a2a:	4630      	mov	r0, r6
 8017a2c:	f002 ff34 	bl	801a898 <uxr_deserialize_GET_INFO_Payload>
 8017a30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017a34:	4620      	mov	r0, r4
 8017a36:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017a3a:	f001 f84f 	bl	8018adc <uxr_session_header_offset>
 8017a3e:	462b      	mov	r3, r5
 8017a40:	220c      	movs	r2, #12
 8017a42:	a905      	add	r1, sp, #20
 8017a44:	9000      	str	r0, [sp, #0]
 8017a46:	a808      	add	r0, sp, #32
 8017a48:	f7fc fb98 	bl	801417c <ucdr_init_buffer_origin_offset>
 8017a4c:	a910      	add	r1, sp, #64	; 0x40
 8017a4e:	a808      	add	r0, sp, #32
 8017a50:	f002 ff96 	bl	801a980 <uxr_serialize_INFO_Payload>
 8017a54:	9b08      	ldr	r3, [sp, #32]
 8017a56:	462a      	mov	r2, r5
 8017a58:	4629      	mov	r1, r5
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f000 ffea 	bl	8018a34 <uxr_stamp_session_header>
 8017a60:	a808      	add	r0, sp, #32
 8017a62:	f7fc fbcb 	bl	80141fc <ucdr_buffer_length>
 8017a66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017a68:	4602      	mov	r2, r0
 8017a6a:	a905      	add	r1, sp, #20
 8017a6c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017a70:	47a0      	blx	r4
 8017a72:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8017a76:	bd70      	pop	{r4, r5, r6, pc}

08017a78 <write_submessage_acknack.isra.0>:
 8017a78:	b570      	push	{r4, r5, r6, lr}
 8017a7a:	b092      	sub	sp, #72	; 0x48
 8017a7c:	4605      	mov	r5, r0
 8017a7e:	460e      	mov	r6, r1
 8017a80:	4614      	mov	r4, r2
 8017a82:	f001 f82b 	bl	8018adc <uxr_session_header_offset>
 8017a86:	a905      	add	r1, sp, #20
 8017a88:	9000      	str	r0, [sp, #0]
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	a80a      	add	r0, sp, #40	; 0x28
 8017a8e:	2211      	movs	r2, #17
 8017a90:	f7fc fb74 	bl	801417c <ucdr_init_buffer_origin_offset>
 8017a94:	2218      	movs	r2, #24
 8017a96:	2300      	movs	r3, #0
 8017a98:	210a      	movs	r1, #10
 8017a9a:	fb02 5404 	mla	r4, r2, r4, r5
 8017a9e:	a80a      	add	r0, sp, #40	; 0x28
 8017aa0:	2205      	movs	r2, #5
 8017aa2:	3450      	adds	r4, #80	; 0x50
 8017aa4:	f001 fe0e 	bl	80196c4 <uxr_buffer_submessage_header>
 8017aa8:	a903      	add	r1, sp, #12
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f007 fd56 	bl	801f55c <uxr_compute_acknack>
 8017ab0:	ba40      	rev16	r0, r0
 8017ab2:	a903      	add	r1, sp, #12
 8017ab4:	f88d 6010 	strb.w	r6, [sp, #16]
 8017ab8:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017abc:	a80a      	add	r0, sp, #40	; 0x28
 8017abe:	f002 ffd1 	bl	801aa64 <uxr_serialize_ACKNACK_Payload>
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	4611      	mov	r1, r2
 8017aca:	f000 ffb3 	bl	8018a34 <uxr_stamp_session_header>
 8017ace:	a80a      	add	r0, sp, #40	; 0x28
 8017ad0:	f7fc fb94 	bl	80141fc <ucdr_buffer_length>
 8017ad4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8017ad6:	4602      	mov	r2, r0
 8017ad8:	a905      	add	r1, sp, #20
 8017ada:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017ade:	47a0      	blx	r4
 8017ae0:	b012      	add	sp, #72	; 0x48
 8017ae2:	bd70      	pop	{r4, r5, r6, pc}
 8017ae4:	0000      	movs	r0, r0
	...

08017ae8 <uxr_init_session>:
 8017ae8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017b20 <uxr_init_session+0x38>
 8017aec:	2300      	movs	r3, #0
 8017aee:	b510      	push	{r4, lr}
 8017af0:	4604      	mov	r4, r0
 8017af2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8017af6:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8017afa:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8017afe:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8017b02:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8017b06:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8017b0a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8017b0e:	2181      	movs	r1, #129	; 0x81
 8017b10:	f000 fef4 	bl	80188fc <uxr_init_session_info>
 8017b14:	f104 0008 	add.w	r0, r4, #8
 8017b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b1c:	f001 bcee 	b.w	80194fc <uxr_init_stream_storage>
	...

08017b28 <uxr_set_status_callback>:
 8017b28:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8017b2c:	4770      	bx	lr
 8017b2e:	bf00      	nop

08017b30 <uxr_set_topic_callback>:
 8017b30:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8017b34:	4770      	bx	lr
 8017b36:	bf00      	nop

08017b38 <uxr_set_request_callback>:
 8017b38:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8017b3c:	4770      	bx	lr
 8017b3e:	bf00      	nop

08017b40 <uxr_set_reply_callback>:
 8017b40:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8017b44:	4770      	bx	lr
 8017b46:	bf00      	nop

08017b48 <uxr_create_output_best_effort_stream>:
 8017b48:	b510      	push	{r4, lr}
 8017b4a:	4604      	mov	r4, r0
 8017b4c:	b084      	sub	sp, #16
 8017b4e:	e9cd 2100 	strd	r2, r1, [sp]
 8017b52:	f000 ffc3 	bl	8018adc <uxr_session_header_offset>
 8017b56:	4603      	mov	r3, r0
 8017b58:	f104 0008 	add.w	r0, r4, #8
 8017b5c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8017b60:	b004      	add	sp, #16
 8017b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b66:	f001 bd0f 	b.w	8019588 <uxr_add_output_best_effort_buffer>
 8017b6a:	bf00      	nop

08017b6c <uxr_create_output_reliable_stream>:
 8017b6c:	b530      	push	{r4, r5, lr}
 8017b6e:	b089      	sub	sp, #36	; 0x24
 8017b70:	4604      	mov	r4, r0
 8017b72:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017b76:	9303      	str	r3, [sp, #12]
 8017b78:	f000 ffb0 	bl	8018adc <uxr_session_header_offset>
 8017b7c:	4605      	mov	r5, r0
 8017b7e:	9905      	ldr	r1, [sp, #20]
 8017b80:	f104 0008 	add.w	r0, r4, #8
 8017b84:	9500      	str	r5, [sp, #0]
 8017b86:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017b8a:	f001 fd11 	bl	80195b0 <uxr_add_output_reliable_buffer>
 8017b8e:	2200      	movs	r2, #0
 8017b90:	fa5f fc80 	uxtb.w	ip, r0
 8017b94:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017b98:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017b9c:	0e03      	lsrs	r3, r0, #24
 8017b9e:	f36c 0207 	bfi	r2, ip, #0, #8
 8017ba2:	f364 220f 	bfi	r2, r4, #8, #8
 8017ba6:	f361 4217 	bfi	r2, r1, #16, #8
 8017baa:	f363 621f 	bfi	r2, r3, #24, #8
 8017bae:	4610      	mov	r0, r2
 8017bb0:	b009      	add	sp, #36	; 0x24
 8017bb2:	bd30      	pop	{r4, r5, pc}

08017bb4 <uxr_create_input_best_effort_stream>:
 8017bb4:	b082      	sub	sp, #8
 8017bb6:	3008      	adds	r0, #8
 8017bb8:	b002      	add	sp, #8
 8017bba:	f001 bd13 	b.w	80195e4 <uxr_add_input_best_effort_buffer>
 8017bbe:	bf00      	nop

08017bc0 <uxr_create_input_reliable_stream>:
 8017bc0:	b510      	push	{r4, lr}
 8017bc2:	4c0c      	ldr	r4, [pc, #48]	; (8017bf4 <uxr_create_input_reliable_stream+0x34>)
 8017bc4:	b084      	sub	sp, #16
 8017bc6:	3008      	adds	r0, #8
 8017bc8:	9400      	str	r4, [sp, #0]
 8017bca:	f001 fd21 	bl	8019610 <uxr_add_input_reliable_buffer>
 8017bce:	2200      	movs	r2, #0
 8017bd0:	fa5f fe80 	uxtb.w	lr, r0
 8017bd4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017bd8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017bdc:	0e03      	lsrs	r3, r0, #24
 8017bde:	f36e 0207 	bfi	r2, lr, #0, #8
 8017be2:	f36c 220f 	bfi	r2, ip, #8, #8
 8017be6:	f361 4217 	bfi	r2, r1, #16, #8
 8017bea:	f363 621f 	bfi	r2, r3, #24, #8
 8017bee:	4610      	mov	r0, r2
 8017bf0:	b004      	add	sp, #16
 8017bf2:	bd10      	pop	{r4, pc}
 8017bf4:	080179c9 	.word	0x080179c9

08017bf8 <uxr_epoch_nanos>:
 8017bf8:	b510      	push	{r4, lr}
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	f001 fdc4 	bl	8019788 <uxr_nanos>
 8017c00:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8017c04:	1ac0      	subs	r0, r0, r3
 8017c06:	eb61 0102 	sbc.w	r1, r1, r2
 8017c0a:	bd10      	pop	{r4, pc}

08017c0c <uxr_flash_output_streams>:
 8017c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c10:	7e03      	ldrb	r3, [r0, #24]
 8017c12:	b084      	sub	sp, #16
 8017c14:	4604      	mov	r4, r0
 8017c16:	b1fb      	cbz	r3, 8017c58 <uxr_flash_output_streams+0x4c>
 8017c18:	f04f 0900 	mov.w	r9, #0
 8017c1c:	f10d 0802 	add.w	r8, sp, #2
 8017c20:	af03      	add	r7, sp, #12
 8017c22:	ae02      	add	r6, sp, #8
 8017c24:	4648      	mov	r0, r9
 8017c26:	2201      	movs	r2, #1
 8017c28:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8017c2c:	4611      	mov	r1, r2
 8017c2e:	3508      	adds	r5, #8
 8017c30:	f001 fc0a 	bl	8019448 <uxr_stream_id>
 8017c34:	4684      	mov	ip, r0
 8017c36:	4643      	mov	r3, r8
 8017c38:	463a      	mov	r2, r7
 8017c3a:	4631      	mov	r1, r6
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	f8cd c004 	str.w	ip, [sp, #4]
 8017c42:	f007 fd15 	bl	801f670 <uxr_prepare_best_effort_buffer_to_send>
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d13d      	bne.n	8017cc6 <uxr_flash_output_streams+0xba>
 8017c4a:	f109 0901 	add.w	r9, r9, #1
 8017c4e:	7e23      	ldrb	r3, [r4, #24]
 8017c50:	fa5f f089 	uxtb.w	r0, r9
 8017c54:	4283      	cmp	r3, r0
 8017c56:	d8e6      	bhi.n	8017c26 <uxr_flash_output_streams+0x1a>
 8017c58:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017c5c:	b383      	cbz	r3, 8017cc0 <uxr_flash_output_streams+0xb4>
 8017c5e:	f04f 0900 	mov.w	r9, #0
 8017c62:	f10d 0802 	add.w	r8, sp, #2
 8017c66:	af03      	add	r7, sp, #12
 8017c68:	ae02      	add	r6, sp, #8
 8017c6a:	4648      	mov	r0, r9
 8017c6c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017c70:	2201      	movs	r2, #1
 8017c72:	2102      	movs	r1, #2
 8017c74:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017c78:	f001 fbe6 	bl	8019448 <uxr_stream_id>
 8017c7c:	9001      	str	r0, [sp, #4]
 8017c7e:	3520      	adds	r5, #32
 8017c80:	e00c      	b.n	8017c9c <uxr_flash_output_streams+0x90>
 8017c82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017c86:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017c8a:	9b02      	ldr	r3, [sp, #8]
 8017c8c:	f000 fed2 	bl	8018a34 <uxr_stamp_session_header>
 8017c90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017c92:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017c96:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8017c9a:	47d0      	blx	sl
 8017c9c:	4643      	mov	r3, r8
 8017c9e:	463a      	mov	r2, r7
 8017ca0:	4631      	mov	r1, r6
 8017ca2:	4628      	mov	r0, r5
 8017ca4:	f007 ff08 	bl	801fab8 <uxr_prepare_next_reliable_buffer_to_send>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	4620      	mov	r0, r4
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d1e8      	bne.n	8017c82 <uxr_flash_output_streams+0x76>
 8017cb0:	f109 0901 	add.w	r9, r9, #1
 8017cb4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017cb8:	fa5f f089 	uxtb.w	r0, r9
 8017cbc:	4283      	cmp	r3, r0
 8017cbe:	d8d5      	bhi.n	8017c6c <uxr_flash_output_streams+0x60>
 8017cc0:	b004      	add	sp, #16
 8017cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cc6:	9b02      	ldr	r3, [sp, #8]
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017cce:	f109 0901 	add.w	r9, r9, #1
 8017cd2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017cd6:	f000 fead 	bl	8018a34 <uxr_stamp_session_header>
 8017cda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017cdc:	9a03      	ldr	r2, [sp, #12]
 8017cde:	685d      	ldr	r5, [r3, #4]
 8017ce0:	6818      	ldr	r0, [r3, #0]
 8017ce2:	9902      	ldr	r1, [sp, #8]
 8017ce4:	47a8      	blx	r5
 8017ce6:	7e23      	ldrb	r3, [r4, #24]
 8017ce8:	fa5f f089 	uxtb.w	r0, r9
 8017cec:	4283      	cmp	r3, r0
 8017cee:	d89a      	bhi.n	8017c26 <uxr_flash_output_streams+0x1a>
 8017cf0:	e7b2      	b.n	8017c58 <uxr_flash_output_streams+0x4c>
 8017cf2:	bf00      	nop

08017cf4 <read_submessage_info>:
 8017cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf8:	460d      	mov	r5, r1
 8017cfa:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017cfe:	4606      	mov	r6, r0
 8017d00:	4669      	mov	r1, sp
 8017d02:	4628      	mov	r0, r5
 8017d04:	f002 fcc4 	bl	801a690 <uxr_deserialize_BaseObjectReply>
 8017d08:	4604      	mov	r4, r0
 8017d0a:	a902      	add	r1, sp, #8
 8017d0c:	4628      	mov	r0, r5
 8017d0e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8017d12:	f7fb f8eb 	bl	8012eec <ucdr_deserialize_bool>
 8017d16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017d1a:	4004      	ands	r4, r0
 8017d1c:	b2e4      	uxtb	r4, r4
 8017d1e:	b95b      	cbnz	r3, 8017d38 <read_submessage_info+0x44>
 8017d20:	a987      	add	r1, sp, #540	; 0x21c
 8017d22:	4628      	mov	r0, r5
 8017d24:	f7fb f8e2 	bl	8012eec <ucdr_deserialize_bool>
 8017d28:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8017d2c:	4680      	mov	r8, r0
 8017d2e:	b94b      	cbnz	r3, 8017d44 <read_submessage_info+0x50>
 8017d30:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d38:	a903      	add	r1, sp, #12
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	f002 fb54 	bl	801a3e8 <uxr_deserialize_ObjectVariant>
 8017d40:	4004      	ands	r4, r0
 8017d42:	e7ed      	b.n	8017d20 <read_submessage_info+0x2c>
 8017d44:	a988      	add	r1, sp, #544	; 0x220
 8017d46:	4628      	mov	r0, r5
 8017d48:	f7fb f8fe 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8017d4c:	ea14 0f08 	tst.w	r4, r8
 8017d50:	d0ee      	beq.n	8017d30 <read_submessage_info+0x3c>
 8017d52:	2800      	cmp	r0, #0
 8017d54:	d0ec      	beq.n	8017d30 <read_submessage_info+0x3c>
 8017d56:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8017d5a:	2b0d      	cmp	r3, #13
 8017d5c:	d1e8      	bne.n	8017d30 <read_submessage_info+0x3c>
 8017d5e:	a98a      	add	r1, sp, #552	; 0x228
 8017d60:	4628      	mov	r0, r5
 8017d62:	f7fb fe97 	bl	8013a94 <ucdr_deserialize_int16_t>
 8017d66:	b138      	cbz	r0, 8017d78 <read_submessage_info+0x84>
 8017d68:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	dd06      	ble.n	8017d7e <read_submessage_info+0x8a>
 8017d70:	2f00      	cmp	r7, #0
 8017d72:	bf14      	ite	ne
 8017d74:	2001      	movne	r0, #1
 8017d76:	2002      	moveq	r0, #2
 8017d78:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8017d7c:	e7d8      	b.n	8017d30 <read_submessage_info+0x3c>
 8017d7e:	2000      	movs	r0, #0
 8017d80:	e7fa      	b.n	8017d78 <read_submessage_info+0x84>
 8017d82:	bf00      	nop

08017d84 <read_submessage_list>:
 8017d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d88:	4604      	mov	r4, r0
 8017d8a:	b097      	sub	sp, #92	; 0x5c
 8017d8c:	460d      	mov	r5, r1
 8017d8e:	4ec1      	ldr	r6, [pc, #772]	; (8018094 <read_submessage_list+0x310>)
 8017d90:	9209      	str	r2, [sp, #36]	; 0x24
 8017d92:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8017d96:	aa0c      	add	r2, sp, #48	; 0x30
 8017d98:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8017d9c:	4628      	mov	r0, r5
 8017d9e:	f001 fcab 	bl	80196f8 <uxr_read_submessage_header>
 8017da2:	2800      	cmp	r0, #0
 8017da4:	f000 8142 	beq.w	801802c <read_submessage_list+0x2a8>
 8017da8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8017dac:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8017db0:	3b02      	subs	r3, #2
 8017db2:	2b0d      	cmp	r3, #13
 8017db4:	d8ed      	bhi.n	8017d92 <read_submessage_list+0xe>
 8017db6:	a101      	add	r1, pc, #4	; (adr r1, 8017dbc <read_submessage_list+0x38>)
 8017db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017dbc:	08018023 	.word	0x08018023
 8017dc0:	08017d93 	.word	0x08017d93
 8017dc4:	08018013 	.word	0x08018013
 8017dc8:	08017fb1 	.word	0x08017fb1
 8017dcc:	08017fa7 	.word	0x08017fa7
 8017dd0:	08017d93 	.word	0x08017d93
 8017dd4:	08017d93 	.word	0x08017d93
 8017dd8:	08017efd 	.word	0x08017efd
 8017ddc:	08017e8f 	.word	0x08017e8f
 8017de0:	08017e4f 	.word	0x08017e4f
 8017de4:	08017d93 	.word	0x08017d93
 8017de8:	08017d93 	.word	0x08017d93
 8017dec:	08017d93 	.word	0x08017d93
 8017df0:	08017df5 	.word	0x08017df5
 8017df4:	a910      	add	r1, sp, #64	; 0x40
 8017df6:	4628      	mov	r0, r5
 8017df8:	f002 fe88 	bl	801ab0c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017dfc:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8017e00:	f1b8 0f00 	cmp.w	r8, #0
 8017e04:	f000 811a 	beq.w	801803c <read_submessage_list+0x2b8>
 8017e08:	f001 fcbe 	bl	8019788 <uxr_nanos>
 8017e0c:	4602      	mov	r2, r0
 8017e0e:	460b      	mov	r3, r1
 8017e10:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8017e14:	2100      	movs	r1, #0
 8017e16:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8017e18:	9006      	str	r0, [sp, #24]
 8017e1a:	468c      	mov	ip, r1
 8017e1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017e1e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017e22:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8017e24:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017e28:	468c      	mov	ip, r1
 8017e2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017e2c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017e30:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8017e34:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8017e38:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8017e40:	4620      	mov	r0, r4
 8017e42:	47c0      	blx	r8
 8017e44:	f04f 0301 	mov.w	r3, #1
 8017e48:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8017e4c:	e7a1      	b.n	8017d92 <read_submessage_list+0xe>
 8017e4e:	a910      	add	r1, sp, #64	; 0x40
 8017e50:	4628      	mov	r0, r5
 8017e52:	f002 fe47 	bl	801aae4 <uxr_deserialize_HEARTBEAT_Payload>
 8017e56:	2100      	movs	r1, #0
 8017e58:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017e5c:	f001 fb22 	bl	80194a4 <uxr_stream_id_from_raw>
 8017e60:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017e64:	900f      	str	r0, [sp, #60]	; 0x3c
 8017e66:	f104 0008 	add.w	r0, r4, #8
 8017e6a:	4641      	mov	r1, r8
 8017e6c:	f001 fc08 	bl	8019680 <uxr_get_input_reliable_stream>
 8017e70:	2800      	cmp	r0, #0
 8017e72:	d08e      	beq.n	8017d92 <read_submessage_list+0xe>
 8017e74:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8017e78:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017e7c:	f007 fb62 	bl	801f544 <uxr_process_heartbeat>
 8017e80:	4642      	mov	r2, r8
 8017e82:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8017e86:	4620      	mov	r0, r4
 8017e88:	f7ff fdf6 	bl	8017a78 <write_submessage_acknack.isra.0>
 8017e8c:	e781      	b.n	8017d92 <read_submessage_list+0xe>
 8017e8e:	a910      	add	r1, sp, #64	; 0x40
 8017e90:	4628      	mov	r0, r5
 8017e92:	f002 fdff 	bl	801aa94 <uxr_deserialize_ACKNACK_Payload>
 8017e96:	2100      	movs	r1, #0
 8017e98:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017e9c:	f001 fb02 	bl	80194a4 <uxr_stream_id_from_raw>
 8017ea0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017ea4:	900d      	str	r0, [sp, #52]	; 0x34
 8017ea6:	f104 0008 	add.w	r0, r4, #8
 8017eaa:	f001 fbd3 	bl	8019654 <uxr_get_output_reliable_stream>
 8017eae:	4680      	mov	r8, r0
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	f43f af6e 	beq.w	8017d92 <read_submessage_list+0xe>
 8017eb6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8017eba:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8017ebe:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8017ec2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017ec6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017eca:	b289      	uxth	r1, r1
 8017ecc:	f007 fe9c 	bl	801fc08 <uxr_process_acknack>
 8017ed0:	4640      	mov	r0, r8
 8017ed2:	f007 fe5d 	bl	801fb90 <uxr_begin_output_nack_buffer_it>
 8017ed6:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8017eda:	e005      	b.n	8017ee8 <read_submessage_list+0x164>
 8017edc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017ede:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8017ee2:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017ee6:	47c8      	blx	r9
 8017ee8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8017eec:	aa0f      	add	r2, sp, #60	; 0x3c
 8017eee:	4651      	mov	r1, sl
 8017ef0:	4640      	mov	r0, r8
 8017ef2:	f007 fe4f 	bl	801fb94 <uxr_next_reliable_nack_buffer_to_send>
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	d1f0      	bne.n	8017edc <read_submessage_list+0x158>
 8017efa:	e74a      	b.n	8017d92 <read_submessage_list+0xe>
 8017efc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8017f00:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8017f04:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8017f08:	4628      	mov	r0, r5
 8017f0a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8017f0e:	4651      	mov	r1, sl
 8017f10:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8017f14:	f1a8 0804 	sub.w	r8, r8, #4
 8017f18:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8017f1c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8017f20:	fa1f f888 	uxth.w	r8, r8
 8017f24:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017f28:	f009 090e 	and.w	r9, r9, #14
 8017f2c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8017f30:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8017f34:	f002 fafa 	bl	801a52c <uxr_deserialize_BaseObjectRequest>
 8017f38:	4650      	mov	r0, sl
 8017f3a:	a90f      	add	r1, sp, #60	; 0x3c
 8017f3c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8017f40:	f000 fdf4 	bl	8018b2c <uxr_parse_base_object_request>
 8017f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017f46:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8017f4a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8017f4e:	9110      	str	r1, [sp, #64]	; 0x40
 8017f50:	f1bb 0f00 	cmp.w	fp, #0
 8017f54:	d006      	beq.n	8017f64 <read_submessage_list+0x1e0>
 8017f56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017f5a:	4652      	mov	r2, sl
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	9300      	str	r3, [sp, #0]
 8017f60:	2300      	movs	r3, #0
 8017f62:	47d8      	blx	fp
 8017f64:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8017f66:	b182      	cbz	r2, 8017f8a <read_submessage_list+0x206>
 8017f68:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8017f6a:	f04f 0c00 	mov.w	ip, #0
 8017f6e:	3902      	subs	r1, #2
 8017f70:	e003      	b.n	8017f7a <read_submessage_list+0x1f6>
 8017f72:	f10c 0c01 	add.w	ip, ip, #1
 8017f76:	4594      	cmp	ip, r2
 8017f78:	d007      	beq.n	8017f8a <read_submessage_list+0x206>
 8017f7a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017f7e:	4553      	cmp	r3, sl
 8017f80:	d1f7      	bne.n	8017f72 <read_submessage_list+0x1ee>
 8017f82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017f84:	2200      	movs	r2, #0
 8017f86:	f803 200c 	strb.w	r2, [r3, ip]
 8017f8a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8017f8e:	464b      	mov	r3, r9
 8017f90:	4642      	mov	r2, r8
 8017f92:	4620      	mov	r0, r4
 8017f94:	9102      	str	r1, [sp, #8]
 8017f96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017f98:	9101      	str	r1, [sp, #4]
 8017f9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f9c:	9100      	str	r1, [sp, #0]
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	f7ff fc48 	bl	8017834 <read_submessage_format>
 8017fa4:	e6f5      	b.n	8017d92 <read_submessage_list+0xe>
 8017fa6:	4629      	mov	r1, r5
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7ff fea3 	bl	8017cf4 <read_submessage_info>
 8017fae:	e6f0      	b.n	8017d92 <read_submessage_list+0xe>
 8017fb0:	2a00      	cmp	r2, #0
 8017fb2:	d03e      	beq.n	8018032 <read_submessage_list+0x2ae>
 8017fb4:	a910      	add	r1, sp, #64	; 0x40
 8017fb6:	4628      	mov	r0, r5
 8017fb8:	f002 fcc4 	bl	801a944 <uxr_deserialize_STATUS_Payload>
 8017fbc:	a90e      	add	r1, sp, #56	; 0x38
 8017fbe:	aa0d      	add	r2, sp, #52	; 0x34
 8017fc0:	a810      	add	r0, sp, #64	; 0x40
 8017fc2:	f000 fdb3 	bl	8018b2c <uxr_parse_base_object_request>
 8017fc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017fc8:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8017fcc:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8017fd0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8017fd4:	910f      	str	r1, [sp, #60]	; 0x3c
 8017fd6:	f1ba 0f00 	cmp.w	sl, #0
 8017fda:	d006      	beq.n	8017fea <read_submessage_list+0x266>
 8017fdc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017fe0:	4642      	mov	r2, r8
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	9300      	str	r3, [sp, #0]
 8017fe6:	464b      	mov	r3, r9
 8017fe8:	47d0      	blx	sl
 8017fea:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8017fec:	2a00      	cmp	r2, #0
 8017fee:	f43f aed0 	beq.w	8017d92 <read_submessage_list+0xe>
 8017ff2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017ff4:	2100      	movs	r1, #0
 8017ff6:	3802      	subs	r0, #2
 8017ff8:	e003      	b.n	8018002 <read_submessage_list+0x27e>
 8017ffa:	3101      	adds	r1, #1
 8017ffc:	4291      	cmp	r1, r2
 8017ffe:	f43f aec8 	beq.w	8017d92 <read_submessage_list+0xe>
 8018002:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8018006:	4543      	cmp	r3, r8
 8018008:	d1f7      	bne.n	8017ffa <read_submessage_list+0x276>
 801800a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801800c:	f803 9001 	strb.w	r9, [r3, r1]
 8018010:	e6bf      	b.n	8017d92 <read_submessage_list+0xe>
 8018012:	2a00      	cmp	r2, #0
 8018014:	f47f aebd 	bne.w	8017d92 <read_submessage_list+0xe>
 8018018:	4629      	mov	r1, r5
 801801a:	4620      	mov	r0, r4
 801801c:	f000 fcca 	bl	80189b4 <uxr_read_create_session_status>
 8018020:	e6b7      	b.n	8017d92 <read_submessage_list+0xe>
 8018022:	4629      	mov	r1, r5
 8018024:	4620      	mov	r0, r4
 8018026:	f7ff fcf1 	bl	8017a0c <read_submessage_get_info>
 801802a:	e6b2      	b.n	8017d92 <read_submessage_list+0xe>
 801802c:	b017      	add	sp, #92	; 0x5c
 801802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018032:	4629      	mov	r1, r5
 8018034:	4620      	mov	r0, r4
 8018036:	f000 fccb 	bl	80189d0 <uxr_read_delete_session_status>
 801803a:	e6aa      	b.n	8017d92 <read_submessage_list+0xe>
 801803c:	f001 fba4 	bl	8019788 <uxr_nanos>
 8018040:	4642      	mov	r2, r8
 8018042:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018046:	fbc7 3206 	smlal	r3, r2, r7, r6
 801804a:	1818      	adds	r0, r3, r0
 801804c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801804e:	eb42 0101 	adc.w	r1, r2, r1
 8018052:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018054:	4642      	mov	r2, r8
 8018056:	fbc7 3206 	smlal	r3, r2, r7, r6
 801805a:	469c      	mov	ip, r3
 801805c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8018060:	fbc3 7806 	smlal	r7, r8, r3, r6
 8018064:	4643      	mov	r3, r8
 8018066:	eb1c 0c07 	adds.w	ip, ip, r7
 801806a:	eb42 0203 	adc.w	r2, r2, r3
 801806e:	ebb0 030c 	subs.w	r3, r0, ip
 8018072:	eb61 0202 	sbc.w	r2, r1, r2
 8018076:	2a00      	cmp	r2, #0
 8018078:	db08      	blt.n	801808c <read_submessage_list+0x308>
 801807a:	085b      	lsrs	r3, r3, #1
 801807c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8018080:	1052      	asrs	r2, r2, #1
 8018082:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8018086:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801808a:	e6db      	b.n	8017e44 <read_submessage_list+0xc0>
 801808c:	3301      	adds	r3, #1
 801808e:	f142 0200 	adc.w	r2, r2, #0
 8018092:	e7f2      	b.n	801807a <read_submessage_list+0x2f6>
 8018094:	3b9aca00 	.word	0x3b9aca00

08018098 <listen_message_reliably>:
 8018098:	1e0b      	subs	r3, r1, #0
 801809a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801809e:	bfb8      	it	lt
 80180a0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80180a4:	b09d      	sub	sp, #116	; 0x74
 80180a6:	4680      	mov	r8, r0
 80180a8:	9305      	str	r3, [sp, #20]
 80180aa:	f001 fb51 	bl	8019750 <uxr_millis>
 80180ae:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80180b2:	4681      	mov	r9, r0
 80180b4:	2a00      	cmp	r2, #0
 80180b6:	f000 809a 	beq.w	80181ee <listen_message_reliably+0x156>
 80180ba:	2600      	movs	r6, #0
 80180bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80180c0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80180c4:	460f      	mov	r7, r1
 80180c6:	4630      	mov	r0, r6
 80180c8:	9303      	str	r3, [sp, #12]
 80180ca:	e00e      	b.n	80180ea <listen_message_reliably+0x52>
 80180cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180ce:	3601      	adds	r6, #1
 80180d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180d2:	455a      	cmp	r2, fp
 80180d4:	9903      	ldr	r1, [sp, #12]
 80180d6:	b2f0      	uxtb	r0, r6
 80180d8:	eb73 0101 	sbcs.w	r1, r3, r1
 80180dc:	da01      	bge.n	80180e2 <listen_message_reliably+0x4a>
 80180de:	4693      	mov	fp, r2
 80180e0:	9303      	str	r3, [sp, #12]
 80180e2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80180e6:	4283      	cmp	r3, r0
 80180e8:	d95f      	bls.n	80181aa <listen_message_reliably+0x112>
 80180ea:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80180ee:	2102      	movs	r1, #2
 80180f0:	2201      	movs	r2, #1
 80180f2:	00e4      	lsls	r4, r4, #3
 80180f4:	f001 f9a8 	bl	8019448 <uxr_stream_id>
 80180f8:	4601      	mov	r1, r0
 80180fa:	f104 0520 	add.w	r5, r4, #32
 80180fe:	463b      	mov	r3, r7
 8018100:	464a      	mov	r2, r9
 8018102:	9109      	str	r1, [sp, #36]	; 0x24
 8018104:	4445      	add	r5, r8
 8018106:	4628      	mov	r0, r5
 8018108:	f007 fd16 	bl	801fb38 <uxr_update_output_stream_heartbeat_timestamp>
 801810c:	eb08 0304 	add.w	r3, r8, r4
 8018110:	2800      	cmp	r0, #0
 8018112:	d0db      	beq.n	80180cc <listen_message_reliably+0x34>
 8018114:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8018118:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 801811c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018120:	4640      	mov	r0, r8
 8018122:	3501      	adds	r5, #1
 8018124:	4444      	add	r4, r8
 8018126:	9304      	str	r3, [sp, #16]
 8018128:	f000 fcd8 	bl	8018adc <uxr_session_header_offset>
 801812c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018130:	2300      	movs	r3, #0
 8018132:	2211      	movs	r2, #17
 8018134:	a90c      	add	r1, sp, #48	; 0x30
 8018136:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801813a:	9000      	str	r0, [sp, #0]
 801813c:	4650      	mov	r0, sl
 801813e:	3601      	adds	r6, #1
 8018140:	f7fc f81c 	bl	801417c <ucdr_init_buffer_origin_offset>
 8018144:	2300      	movs	r3, #0
 8018146:	2205      	movs	r2, #5
 8018148:	210b      	movs	r1, #11
 801814a:	4650      	mov	r0, sl
 801814c:	f001 faba 	bl	80196c4 <uxr_buffer_submessage_header>
 8018150:	2101      	movs	r1, #1
 8018152:	8968      	ldrh	r0, [r5, #10]
 8018154:	f007 fdb4 	bl	801fcc0 <uxr_seq_num_add>
 8018158:	892b      	ldrh	r3, [r5, #8]
 801815a:	4602      	mov	r2, r0
 801815c:	a90a      	add	r1, sp, #40	; 0x28
 801815e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018162:	4650      	mov	r0, sl
 8018164:	9b04      	ldr	r3, [sp, #16]
 8018166:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801816a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801816e:	f002 fca5 	bl	801aabc <uxr_serialize_HEARTBEAT_Payload>
 8018172:	2200      	movs	r2, #0
 8018174:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018176:	4640      	mov	r0, r8
 8018178:	4611      	mov	r1, r2
 801817a:	f000 fc5b 	bl	8018a34 <uxr_stamp_session_header>
 801817e:	4650      	mov	r0, sl
 8018180:	f7fc f83c 	bl	80141fc <ucdr_buffer_length>
 8018184:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018188:	4602      	mov	r2, r0
 801818a:	a90c      	add	r1, sp, #48	; 0x30
 801818c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018190:	47a8      	blx	r5
 8018192:	9903      	ldr	r1, [sp, #12]
 8018194:	b2f0      	uxtb	r0, r6
 8018196:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801819a:	455a      	cmp	r2, fp
 801819c:	eb73 0101 	sbcs.w	r1, r3, r1
 80181a0:	db9d      	blt.n	80180de <listen_message_reliably+0x46>
 80181a2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80181a6:	4283      	cmp	r3, r0
 80181a8:	d89f      	bhi.n	80180ea <listen_message_reliably+0x52>
 80181aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80181ae:	9a03      	ldr	r2, [sp, #12]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	bf08      	it	eq
 80181b4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80181b8:	d019      	beq.n	80181ee <listen_message_reliably+0x156>
 80181ba:	ebab 0309 	sub.w	r3, fp, r9
 80181be:	2b00      	cmp	r3, #0
 80181c0:	9d05      	ldr	r5, [sp, #20]
 80181c2:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80181c6:	aa08      	add	r2, sp, #32
 80181c8:	bf08      	it	eq
 80181ca:	2301      	moveq	r3, #1
 80181cc:	a907      	add	r1, sp, #28
 80181ce:	6884      	ldr	r4, [r0, #8]
 80181d0:	429d      	cmp	r5, r3
 80181d2:	6800      	ldr	r0, [r0, #0]
 80181d4:	bfa8      	it	ge
 80181d6:	461d      	movge	r5, r3
 80181d8:	462b      	mov	r3, r5
 80181da:	47a0      	blx	r4
 80181dc:	b948      	cbnz	r0, 80181f2 <listen_message_reliably+0x15a>
 80181de:	9b05      	ldr	r3, [sp, #20]
 80181e0:	1b5b      	subs	r3, r3, r5
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	9305      	str	r3, [sp, #20]
 80181e6:	f73f af60 	bgt.w	80180aa <listen_message_reliably+0x12>
 80181ea:	4604      	mov	r4, r0
 80181ec:	e012      	b.n	8018214 <listen_message_reliably+0x17c>
 80181ee:	9b05      	ldr	r3, [sp, #20]
 80181f0:	e7e5      	b.n	80181be <listen_message_reliably+0x126>
 80181f2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80181f6:	4604      	mov	r4, r0
 80181f8:	2500      	movs	r5, #0
 80181fa:	a80c      	add	r0, sp, #48	; 0x30
 80181fc:	f7fb ffd0 	bl	80141a0 <ucdr_init_buffer>
 8018200:	f10d 031a 	add.w	r3, sp, #26
 8018204:	aa06      	add	r2, sp, #24
 8018206:	a90c      	add	r1, sp, #48	; 0x30
 8018208:	4640      	mov	r0, r8
 801820a:	f88d 5018 	strb.w	r5, [sp, #24]
 801820e:	f000 fc25 	bl	8018a5c <uxr_read_session_header>
 8018212:	b918      	cbnz	r0, 801821c <listen_message_reliably+0x184>
 8018214:	4620      	mov	r0, r4
 8018216:	b01d      	add	sp, #116	; 0x74
 8018218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801821c:	4629      	mov	r1, r5
 801821e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018222:	f001 f93f 	bl	80194a4 <uxr_stream_id_from_raw>
 8018226:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801822a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801822e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8018232:	2e01      	cmp	r6, #1
 8018234:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018238:	d04b      	beq.n	80182d2 <listen_message_reliably+0x23a>
 801823a:	2e02      	cmp	r6, #2
 801823c:	d00f      	beq.n	801825e <listen_message_reliably+0x1c6>
 801823e:	2e00      	cmp	r6, #0
 8018240:	d1e8      	bne.n	8018214 <listen_message_reliably+0x17c>
 8018242:	4631      	mov	r1, r6
 8018244:	4630      	mov	r0, r6
 8018246:	f001 f92d 	bl	80194a4 <uxr_stream_id_from_raw>
 801824a:	4602      	mov	r2, r0
 801824c:	a90c      	add	r1, sp, #48	; 0x30
 801824e:	4640      	mov	r0, r8
 8018250:	920a      	str	r2, [sp, #40]	; 0x28
 8018252:	f7ff fd97 	bl	8017d84 <read_submessage_list>
 8018256:	4620      	mov	r0, r4
 8018258:	b01d      	add	sp, #116	; 0x74
 801825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825e:	4629      	mov	r1, r5
 8018260:	f108 0008 	add.w	r0, r8, #8
 8018264:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8018268:	f001 fa0a 	bl	8019680 <uxr_get_input_reliable_stream>
 801826c:	4607      	mov	r7, r0
 801826e:	b338      	cbz	r0, 80182c0 <listen_message_reliably+0x228>
 8018270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018272:	a80c      	add	r0, sp, #48	; 0x30
 8018274:	9203      	str	r2, [sp, #12]
 8018276:	f7fb ffc5 	bl	8014204 <ucdr_buffer_remaining>
 801827a:	4603      	mov	r3, r0
 801827c:	f10d 0019 	add.w	r0, sp, #25
 8018280:	9a03      	ldr	r2, [sp, #12]
 8018282:	4651      	mov	r1, sl
 8018284:	9000      	str	r0, [sp, #0]
 8018286:	4638      	mov	r0, r7
 8018288:	f007 f860 	bl	801f34c <uxr_receive_reliable_message>
 801828c:	b1c0      	cbz	r0, 80182c0 <listen_message_reliably+0x228>
 801828e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018292:	b393      	cbz	r3, 80182fa <listen_message_reliably+0x262>
 8018294:	ae14      	add	r6, sp, #80	; 0x50
 8018296:	f04f 0a02 	mov.w	sl, #2
 801829a:	e00a      	b.n	80182b2 <listen_message_reliably+0x21a>
 801829c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80182a0:	4631      	mov	r1, r6
 80182a2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80182a6:	4640      	mov	r0, r8
 80182a8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80182ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182ae:	f7ff fd69 	bl	8017d84 <read_submessage_list>
 80182b2:	2204      	movs	r2, #4
 80182b4:	4631      	mov	r1, r6
 80182b6:	4638      	mov	r0, r7
 80182b8:	f007 f8ca 	bl	801f450 <uxr_next_input_reliable_buffer_available>
 80182bc:	2800      	cmp	r0, #0
 80182be:	d1ed      	bne.n	801829c <listen_message_reliably+0x204>
 80182c0:	4640      	mov	r0, r8
 80182c2:	462a      	mov	r2, r5
 80182c4:	4649      	mov	r1, r9
 80182c6:	f7ff fbd7 	bl	8017a78 <write_submessage_acknack.isra.0>
 80182ca:	4620      	mov	r0, r4
 80182cc:	b01d      	add	sp, #116	; 0x74
 80182ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182d2:	4629      	mov	r1, r5
 80182d4:	f108 0008 	add.w	r0, r8, #8
 80182d8:	f001 f9c8 	bl	801966c <uxr_get_input_best_effort_stream>
 80182dc:	2800      	cmp	r0, #0
 80182de:	d099      	beq.n	8018214 <listen_message_reliably+0x17c>
 80182e0:	4651      	mov	r1, sl
 80182e2:	f006 ffa9 	bl	801f238 <uxr_receive_best_effort_message>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d094      	beq.n	8018214 <listen_message_reliably+0x17c>
 80182ea:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80182ee:	a90c      	add	r1, sp, #48	; 0x30
 80182f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182f2:	4640      	mov	r0, r8
 80182f4:	f7ff fd46 	bl	8017d84 <read_submessage_list>
 80182f8:	e78c      	b.n	8018214 <listen_message_reliably+0x17c>
 80182fa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80182fe:	a90c      	add	r1, sp, #48	; 0x30
 8018300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018302:	4640      	mov	r0, r8
 8018304:	f7ff fd3e 	bl	8017d84 <read_submessage_list>
 8018308:	e7c4      	b.n	8018294 <listen_message_reliably+0x1fc>
 801830a:	bf00      	nop

0801830c <uxr_run_session_timeout>:
 801830c:	b570      	push	{r4, r5, r6, lr}
 801830e:	4604      	mov	r4, r0
 8018310:	460d      	mov	r5, r1
 8018312:	f001 fa1d 	bl	8019750 <uxr_millis>
 8018316:	4606      	mov	r6, r0
 8018318:	4620      	mov	r0, r4
 801831a:	f7ff fc77 	bl	8017c0c <uxr_flash_output_streams>
 801831e:	4629      	mov	r1, r5
 8018320:	4620      	mov	r0, r4
 8018322:	f7ff feb9 	bl	8018098 <listen_message_reliably>
 8018326:	f001 fa13 	bl	8019750 <uxr_millis>
 801832a:	1b83      	subs	r3, r0, r6
 801832c:	1ae9      	subs	r1, r5, r3
 801832e:	2900      	cmp	r1, #0
 8018330:	dcf6      	bgt.n	8018320 <uxr_run_session_timeout+0x14>
 8018332:	f104 0008 	add.w	r0, r4, #8
 8018336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801833a:	f001 b9ad 	b.w	8019698 <uxr_output_streams_confirmed>
 801833e:	bf00      	nop

08018340 <uxr_run_session_until_data>:
 8018340:	b570      	push	{r4, r5, r6, lr}
 8018342:	4604      	mov	r4, r0
 8018344:	460d      	mov	r5, r1
 8018346:	f001 fa03 	bl	8019750 <uxr_millis>
 801834a:	4606      	mov	r6, r0
 801834c:	4620      	mov	r0, r4
 801834e:	f7ff fc5d 	bl	8017c0c <uxr_flash_output_streams>
 8018352:	2300      	movs	r3, #0
 8018354:	4629      	mov	r1, r5
 8018356:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801835a:	e005      	b.n	8018368 <uxr_run_session_until_data+0x28>
 801835c:	f001 f9f8 	bl	8019750 <uxr_millis>
 8018360:	1b83      	subs	r3, r0, r6
 8018362:	1ae9      	subs	r1, r5, r3
 8018364:	2900      	cmp	r1, #0
 8018366:	dd07      	ble.n	8018378 <uxr_run_session_until_data+0x38>
 8018368:	4620      	mov	r0, r4
 801836a:	f7ff fe95 	bl	8018098 <listen_message_reliably>
 801836e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018372:	2800      	cmp	r0, #0
 8018374:	d0f2      	beq.n	801835c <uxr_run_session_until_data+0x1c>
 8018376:	bd70      	pop	{r4, r5, r6, pc}
 8018378:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801837c:	bd70      	pop	{r4, r5, r6, pc}
 801837e:	bf00      	nop

08018380 <uxr_run_session_until_confirm_delivery>:
 8018380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018384:	4606      	mov	r6, r0
 8018386:	460d      	mov	r5, r1
 8018388:	f001 f9e2 	bl	8019750 <uxr_millis>
 801838c:	4607      	mov	r7, r0
 801838e:	4630      	mov	r0, r6
 8018390:	f106 0808 	add.w	r8, r6, #8
 8018394:	f7ff fc3a 	bl	8017c0c <uxr_flash_output_streams>
 8018398:	2d00      	cmp	r5, #0
 801839a:	db10      	blt.n	80183be <uxr_run_session_until_confirm_delivery+0x3e>
 801839c:	462c      	mov	r4, r5
 801839e:	e006      	b.n	80183ae <uxr_run_session_until_confirm_delivery+0x2e>
 80183a0:	f7ff fe7a 	bl	8018098 <listen_message_reliably>
 80183a4:	f001 f9d4 	bl	8019750 <uxr_millis>
 80183a8:	1bc3      	subs	r3, r0, r7
 80183aa:	1aec      	subs	r4, r5, r3
 80183ac:	d407      	bmi.n	80183be <uxr_run_session_until_confirm_delivery+0x3e>
 80183ae:	4640      	mov	r0, r8
 80183b0:	f001 f972 	bl	8019698 <uxr_output_streams_confirmed>
 80183b4:	4603      	mov	r3, r0
 80183b6:	4621      	mov	r1, r4
 80183b8:	4630      	mov	r0, r6
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d0f0      	beq.n	80183a0 <uxr_run_session_until_confirm_delivery+0x20>
 80183be:	4640      	mov	r0, r8
 80183c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183c4:	f001 b968 	b.w	8019698 <uxr_output_streams_confirmed>

080183c8 <uxr_run_session_until_all_status>:
 80183c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80183d0:	4606      	mov	r6, r0
 80183d2:	4688      	mov	r8, r1
 80183d4:	4692      	mov	sl, r2
 80183d6:	461f      	mov	r7, r3
 80183d8:	f7ff fc18 	bl	8017c0c <uxr_flash_output_streams>
 80183dc:	f1bb 0f00 	cmp.w	fp, #0
 80183e0:	d004      	beq.n	80183ec <uxr_run_session_until_all_status+0x24>
 80183e2:	465a      	mov	r2, fp
 80183e4:	21ff      	movs	r1, #255	; 0xff
 80183e6:	4638      	mov	r0, r7
 80183e8:	f008 fdf0 	bl	8020fcc <memset>
 80183ec:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80183f0:	1e7d      	subs	r5, r7, #1
 80183f2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 80183f6:	f001 f9ab 	bl	8019750 <uxr_millis>
 80183fa:	4641      	mov	r1, r8
 80183fc:	4681      	mov	r9, r0
 80183fe:	4630      	mov	r0, r6
 8018400:	f7ff fe4a 	bl	8018098 <listen_message_reliably>
 8018404:	f001 f9a4 	bl	8019750 <uxr_millis>
 8018408:	eba0 0009 	sub.w	r0, r0, r9
 801840c:	eba8 0100 	sub.w	r1, r8, r0
 8018410:	f1bb 0f00 	cmp.w	fp, #0
 8018414:	d029      	beq.n	801846a <uxr_run_session_until_all_status+0xa2>
 8018416:	46ae      	mov	lr, r5
 8018418:	f04f 0c00 	mov.w	ip, #0
 801841c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018420:	2cff      	cmp	r4, #255	; 0xff
 8018422:	d015      	beq.n	8018450 <uxr_run_session_until_all_status+0x88>
 8018424:	f10c 0c01 	add.w	ip, ip, #1
 8018428:	45e3      	cmp	fp, ip
 801842a:	d8f7      	bhi.n	801841c <uxr_run_session_until_all_status+0x54>
 801842c:	2300      	movs	r3, #0
 801842e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018430:	e000      	b.n	8018434 <uxr_run_session_until_all_status+0x6c>
 8018432:	b158      	cbz	r0, 801844c <uxr_run_session_until_all_status+0x84>
 8018434:	462b      	mov	r3, r5
 8018436:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801843a:	3302      	adds	r3, #2
 801843c:	2801      	cmp	r0, #1
 801843e:	eba3 0307 	sub.w	r3, r3, r7
 8018442:	bf8c      	ite	hi
 8018444:	2000      	movhi	r0, #0
 8018446:	2001      	movls	r0, #1
 8018448:	459b      	cmp	fp, r3
 801844a:	d8f2      	bhi.n	8018432 <uxr_run_session_until_all_status+0x6a>
 801844c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018450:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018454:	f10c 0c01 	add.w	ip, ip, #1
 8018458:	45dc      	cmp	ip, fp
 801845a:	d201      	bcs.n	8018460 <uxr_run_session_until_all_status+0x98>
 801845c:	2b00      	cmp	r3, #0
 801845e:	d0dd      	beq.n	801841c <uxr_run_session_until_all_status+0x54>
 8018460:	2900      	cmp	r1, #0
 8018462:	dde3      	ble.n	801842c <uxr_run_session_until_all_status+0x64>
 8018464:	2b00      	cmp	r3, #0
 8018466:	d1ca      	bne.n	80183fe <uxr_run_session_until_all_status+0x36>
 8018468:	e7e0      	b.n	801842c <uxr_run_session_until_all_status+0x64>
 801846a:	2001      	movs	r0, #1
 801846c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018474 <uxr_run_session_until_pong>:
 8018474:	b570      	push	{r4, r5, r6, lr}
 8018476:	4604      	mov	r4, r0
 8018478:	460d      	mov	r5, r1
 801847a:	f001 f969 	bl	8019750 <uxr_millis>
 801847e:	4606      	mov	r6, r0
 8018480:	4620      	mov	r0, r4
 8018482:	f7ff fbc3 	bl	8017c0c <uxr_flash_output_streams>
 8018486:	2300      	movs	r3, #0
 8018488:	4629      	mov	r1, r5
 801848a:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 801848e:	e005      	b.n	801849c <uxr_run_session_until_pong+0x28>
 8018490:	f001 f95e 	bl	8019750 <uxr_millis>
 8018494:	1b83      	subs	r3, r0, r6
 8018496:	1ae9      	subs	r1, r5, r3
 8018498:	2900      	cmp	r1, #0
 801849a:	dd0c      	ble.n	80184b6 <uxr_run_session_until_pong+0x42>
 801849c:	4620      	mov	r0, r4
 801849e:	f7ff fdfb 	bl	8018098 <listen_message_reliably>
 80184a2:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d0f2      	beq.n	8018490 <uxr_run_session_until_pong+0x1c>
 80184aa:	f1a0 0001 	sub.w	r0, r0, #1
 80184ae:	fab0 f080 	clz	r0, r0
 80184b2:	0940      	lsrs	r0, r0, #5
 80184b4:	bd70      	pop	{r4, r5, r6, pc}
 80184b6:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
 80184ba:	f1a0 0001 	sub.w	r0, r0, #1
 80184be:	fab0 f080 	clz	r0, r0
 80184c2:	0940      	lsrs	r0, r0, #5
 80184c4:	bd70      	pop	{r4, r5, r6, pc}
 80184c6:	bf00      	nop

080184c8 <wait_session_status>:
 80184c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184cc:	4604      	mov	r4, r0
 80184ce:	b09d      	sub	sp, #116	; 0x74
 80184d0:	20ff      	movs	r0, #255	; 0xff
 80184d2:	9303      	str	r3, [sp, #12]
 80184d4:	7160      	strb	r0, [r4, #5]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	f000 80b6 	beq.w	8018648 <wait_session_status+0x180>
 80184dc:	4689      	mov	r9, r1
 80184de:	4692      	mov	sl, r2
 80184e0:	f04f 0b00 	mov.w	fp, #0
 80184e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80184e6:	4652      	mov	r2, sl
 80184e8:	4649      	mov	r1, r9
 80184ea:	e9d3 0500 	ldrd	r0, r5, [r3]
 80184ee:	47a8      	blx	r5
 80184f0:	f001 f92e 	bl	8019750 <uxr_millis>
 80184f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80184f8:	4605      	mov	r5, r0
 80184fa:	e009      	b.n	8018510 <wait_session_status+0x48>
 80184fc:	f001 f928 	bl	8019750 <uxr_millis>
 8018500:	1b40      	subs	r0, r0, r5
 8018502:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018506:	2b00      	cmp	r3, #0
 8018508:	dd40      	ble.n	801858c <wait_session_status+0xc4>
 801850a:	7960      	ldrb	r0, [r4, #5]
 801850c:	28ff      	cmp	r0, #255	; 0xff
 801850e:	d145      	bne.n	801859c <wait_session_status+0xd4>
 8018510:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018512:	a908      	add	r1, sp, #32
 8018514:	6896      	ldr	r6, [r2, #8]
 8018516:	6810      	ldr	r0, [r2, #0]
 8018518:	aa09      	add	r2, sp, #36	; 0x24
 801851a:	47b0      	blx	r6
 801851c:	2800      	cmp	r0, #0
 801851e:	d0ed      	beq.n	80184fc <wait_session_status+0x34>
 8018520:	a80c      	add	r0, sp, #48	; 0x30
 8018522:	2600      	movs	r6, #0
 8018524:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018528:	f7fb fe3a 	bl	80141a0 <ucdr_init_buffer>
 801852c:	f10d 031e 	add.w	r3, sp, #30
 8018530:	aa07      	add	r2, sp, #28
 8018532:	a90c      	add	r1, sp, #48	; 0x30
 8018534:	4620      	mov	r0, r4
 8018536:	f88d 601c 	strb.w	r6, [sp, #28]
 801853a:	f000 fa8f 	bl	8018a5c <uxr_read_session_header>
 801853e:	2800      	cmp	r0, #0
 8018540:	d0dc      	beq.n	80184fc <wait_session_status+0x34>
 8018542:	4631      	mov	r1, r6
 8018544:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018548:	f000 ffac 	bl	80194a4 <uxr_stream_id_from_raw>
 801854c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018550:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018554:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018558:	2f01      	cmp	r7, #1
 801855a:	9302      	str	r3, [sp, #8]
 801855c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018560:	d05c      	beq.n	801861c <wait_session_status+0x154>
 8018562:	2f02      	cmp	r7, #2
 8018564:	d020      	beq.n	80185a8 <wait_session_status+0xe0>
 8018566:	2f00      	cmp	r7, #0
 8018568:	d1c8      	bne.n	80184fc <wait_session_status+0x34>
 801856a:	4639      	mov	r1, r7
 801856c:	4638      	mov	r0, r7
 801856e:	f000 ff99 	bl	80194a4 <uxr_stream_id_from_raw>
 8018572:	a90c      	add	r1, sp, #48	; 0x30
 8018574:	4602      	mov	r2, r0
 8018576:	900b      	str	r0, [sp, #44]	; 0x2c
 8018578:	4620      	mov	r0, r4
 801857a:	f7ff fc03 	bl	8017d84 <read_submessage_list>
 801857e:	f001 f8e7 	bl	8019750 <uxr_millis>
 8018582:	1b40      	subs	r0, r0, r5
 8018584:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018588:	2b00      	cmp	r3, #0
 801858a:	dcbe      	bgt.n	801850a <wait_session_status+0x42>
 801858c:	f10b 0b01 	add.w	fp, fp, #1
 8018590:	9b03      	ldr	r3, [sp, #12]
 8018592:	7960      	ldrb	r0, [r4, #5]
 8018594:	455b      	cmp	r3, fp
 8018596:	d001      	beq.n	801859c <wait_session_status+0xd4>
 8018598:	28ff      	cmp	r0, #255	; 0xff
 801859a:	d0a3      	beq.n	80184e4 <wait_session_status+0x1c>
 801859c:	38ff      	subs	r0, #255	; 0xff
 801859e:	bf18      	it	ne
 80185a0:	2001      	movne	r0, #1
 80185a2:	b01d      	add	sp, #116	; 0x74
 80185a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80185ac:	4631      	mov	r1, r6
 80185ae:	f104 0008 	add.w	r0, r4, #8
 80185b2:	9304      	str	r3, [sp, #16]
 80185b4:	f001 f864 	bl	8019680 <uxr_get_input_reliable_stream>
 80185b8:	4680      	mov	r8, r0
 80185ba:	b348      	cbz	r0, 8018610 <wait_session_status+0x148>
 80185bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80185be:	a80c      	add	r0, sp, #48	; 0x30
 80185c0:	9205      	str	r2, [sp, #20]
 80185c2:	f7fb fe1f 	bl	8014204 <ucdr_buffer_remaining>
 80185c6:	4603      	mov	r3, r0
 80185c8:	f10d 001d 	add.w	r0, sp, #29
 80185cc:	9a05      	ldr	r2, [sp, #20]
 80185ce:	9000      	str	r0, [sp, #0]
 80185d0:	4640      	mov	r0, r8
 80185d2:	9902      	ldr	r1, [sp, #8]
 80185d4:	f006 feba 	bl	801f34c <uxr_receive_reliable_message>
 80185d8:	b1d0      	cbz	r0, 8018610 <wait_session_status+0x148>
 80185da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d03a      	beq.n	8018658 <wait_session_status+0x190>
 80185e2:	9f04      	ldr	r7, [sp, #16]
 80185e4:	e00a      	b.n	80185fc <wait_session_status+0x134>
 80185e6:	f04f 0302 	mov.w	r3, #2
 80185ea:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 80185ee:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80185f2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80185f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80185f8:	f7ff fbc4 	bl	8017d84 <read_submessage_list>
 80185fc:	a914      	add	r1, sp, #80	; 0x50
 80185fe:	2204      	movs	r2, #4
 8018600:	4640      	mov	r0, r8
 8018602:	f006 ff25 	bl	801f450 <uxr_next_input_reliable_buffer_available>
 8018606:	4603      	mov	r3, r0
 8018608:	a914      	add	r1, sp, #80	; 0x50
 801860a:	4620      	mov	r0, r4
 801860c:	2b00      	cmp	r3, #0
 801860e:	d1ea      	bne.n	80185e6 <wait_session_status+0x11e>
 8018610:	4632      	mov	r2, r6
 8018612:	9904      	ldr	r1, [sp, #16]
 8018614:	4620      	mov	r0, r4
 8018616:	f7ff fa2f 	bl	8017a78 <write_submessage_acknack.isra.0>
 801861a:	e76f      	b.n	80184fc <wait_session_status+0x34>
 801861c:	4631      	mov	r1, r6
 801861e:	f104 0008 	add.w	r0, r4, #8
 8018622:	f001 f823 	bl	801966c <uxr_get_input_best_effort_stream>
 8018626:	2800      	cmp	r0, #0
 8018628:	f43f af68 	beq.w	80184fc <wait_session_status+0x34>
 801862c:	9902      	ldr	r1, [sp, #8]
 801862e:	f006 fe03 	bl	801f238 <uxr_receive_best_effort_message>
 8018632:	2800      	cmp	r0, #0
 8018634:	f43f af62 	beq.w	80184fc <wait_session_status+0x34>
 8018638:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 801863c:	a90c      	add	r1, sp, #48	; 0x30
 801863e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018640:	4620      	mov	r0, r4
 8018642:	f7ff fb9f 	bl	8017d84 <read_submessage_list>
 8018646:	e759      	b.n	80184fc <wait_session_status+0x34>
 8018648:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801864a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801864e:	47a0      	blx	r4
 8018650:	2001      	movs	r0, #1
 8018652:	b01d      	add	sp, #116	; 0x74
 8018654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018658:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 801865c:	a90c      	add	r1, sp, #48	; 0x30
 801865e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018660:	4620      	mov	r0, r4
 8018662:	f7ff fb8f 	bl	8017d84 <read_submessage_list>
 8018666:	e7bc      	b.n	80185e2 <wait_session_status+0x11a>

08018668 <uxr_delete_session_retries>:
 8018668:	b530      	push	{r4, r5, lr}
 801866a:	b08f      	sub	sp, #60	; 0x3c
 801866c:	4604      	mov	r4, r0
 801866e:	460d      	mov	r5, r1
 8018670:	f000 fa34 	bl	8018adc <uxr_session_header_offset>
 8018674:	2300      	movs	r3, #0
 8018676:	2210      	movs	r2, #16
 8018678:	a902      	add	r1, sp, #8
 801867a:	9000      	str	r0, [sp, #0]
 801867c:	a806      	add	r0, sp, #24
 801867e:	f7fb fd7d 	bl	801417c <ucdr_init_buffer_origin_offset>
 8018682:	a906      	add	r1, sp, #24
 8018684:	4620      	mov	r0, r4
 8018686:	f000 f979 	bl	801897c <uxr_buffer_delete_session>
 801868a:	2200      	movs	r2, #0
 801868c:	9b06      	ldr	r3, [sp, #24]
 801868e:	4620      	mov	r0, r4
 8018690:	4611      	mov	r1, r2
 8018692:	f000 f9cf 	bl	8018a34 <uxr_stamp_session_header>
 8018696:	a806      	add	r0, sp, #24
 8018698:	f7fb fdb0 	bl	80141fc <ucdr_buffer_length>
 801869c:	462b      	mov	r3, r5
 801869e:	4602      	mov	r2, r0
 80186a0:	a902      	add	r1, sp, #8
 80186a2:	4620      	mov	r0, r4
 80186a4:	f7ff ff10 	bl	80184c8 <wait_session_status>
 80186a8:	b118      	cbz	r0, 80186b2 <uxr_delete_session_retries+0x4a>
 80186aa:	7960      	ldrb	r0, [r4, #5]
 80186ac:	fab0 f080 	clz	r0, r0
 80186b0:	0940      	lsrs	r0, r0, #5
 80186b2:	b00f      	add	sp, #60	; 0x3c
 80186b4:	bd30      	pop	{r4, r5, pc}
 80186b6:	bf00      	nop

080186b8 <uxr_create_session>:
 80186b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186bc:	f100 0b08 	add.w	fp, r0, #8
 80186c0:	4604      	mov	r4, r0
 80186c2:	b0ab      	sub	sp, #172	; 0xac
 80186c4:	4658      	mov	r0, fp
 80186c6:	465e      	mov	r6, fp
 80186c8:	f000 ff22 	bl	8019510 <uxr_reset_stream_storage>
 80186cc:	4620      	mov	r0, r4
 80186ce:	f000 fa05 	bl	8018adc <uxr_session_header_offset>
 80186d2:	2300      	movs	r3, #0
 80186d4:	221c      	movs	r2, #28
 80186d6:	a90b      	add	r1, sp, #44	; 0x2c
 80186d8:	9000      	str	r0, [sp, #0]
 80186da:	a812      	add	r0, sp, #72	; 0x48
 80186dc:	f7fb fd4e 	bl	801417c <ucdr_init_buffer_origin_offset>
 80186e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80186e2:	a912      	add	r1, sp, #72	; 0x48
 80186e4:	4620      	mov	r0, r4
 80186e6:	8a1a      	ldrh	r2, [r3, #16]
 80186e8:	3a04      	subs	r2, #4
 80186ea:	b292      	uxth	r2, r2
 80186ec:	f000 f91c 	bl	8018928 <uxr_buffer_create_session>
 80186f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80186f2:	4620      	mov	r0, r4
 80186f4:	f000 f98a 	bl	8018a0c <uxr_stamp_create_session_header>
 80186f8:	a812      	add	r0, sp, #72	; 0x48
 80186fa:	f7fb fd7f 	bl	80141fc <ucdr_buffer_length>
 80186fe:	23ff      	movs	r3, #255	; 0xff
 8018700:	4681      	mov	r9, r0
 8018702:	7163      	strb	r3, [r4, #5]
 8018704:	230a      	movs	r3, #10
 8018706:	9303      	str	r3, [sp, #12]
 8018708:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801870a:	464a      	mov	r2, r9
 801870c:	a90b      	add	r1, sp, #44	; 0x2c
 801870e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018712:	47a8      	blx	r5
 8018714:	f001 f81c 	bl	8019750 <uxr_millis>
 8018718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801871c:	4605      	mov	r5, r0
 801871e:	e009      	b.n	8018734 <uxr_create_session+0x7c>
 8018720:	f001 f816 	bl	8019750 <uxr_millis>
 8018724:	1b40      	subs	r0, r0, r5
 8018726:	7962      	ldrb	r2, [r4, #5]
 8018728:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801872c:	2b00      	cmp	r3, #0
 801872e:	dd38      	ble.n	80187a2 <uxr_create_session+0xea>
 8018730:	2aff      	cmp	r2, #255	; 0xff
 8018732:	d13c      	bne.n	80187ae <uxr_create_session+0xf6>
 8018734:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018736:	a907      	add	r1, sp, #28
 8018738:	6897      	ldr	r7, [r2, #8]
 801873a:	6810      	ldr	r0, [r2, #0]
 801873c:	aa08      	add	r2, sp, #32
 801873e:	47b8      	blx	r7
 8018740:	2800      	cmp	r0, #0
 8018742:	d0ed      	beq.n	8018720 <uxr_create_session+0x68>
 8018744:	a81a      	add	r0, sp, #104	; 0x68
 8018746:	2700      	movs	r7, #0
 8018748:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801874c:	f7fb fd28 	bl	80141a0 <ucdr_init_buffer>
 8018750:	f10d 031a 	add.w	r3, sp, #26
 8018754:	aa06      	add	r2, sp, #24
 8018756:	a91a      	add	r1, sp, #104	; 0x68
 8018758:	4620      	mov	r0, r4
 801875a:	f88d 7018 	strb.w	r7, [sp, #24]
 801875e:	f000 f97d 	bl	8018a5c <uxr_read_session_header>
 8018762:	2800      	cmp	r0, #0
 8018764:	d0dc      	beq.n	8018720 <uxr_create_session+0x68>
 8018766:	4639      	mov	r1, r7
 8018768:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801876c:	f000 fe9a 	bl	80194a4 <uxr_stream_id_from_raw>
 8018770:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018774:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018778:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801877c:	2f01      	cmp	r7, #1
 801877e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018782:	d053      	beq.n	801882c <uxr_create_session+0x174>
 8018784:	2f02      	cmp	r7, #2
 8018786:	d018      	beq.n	80187ba <uxr_create_session+0x102>
 8018788:	2f00      	cmp	r7, #0
 801878a:	d1c9      	bne.n	8018720 <uxr_create_session+0x68>
 801878c:	4639      	mov	r1, r7
 801878e:	4638      	mov	r0, r7
 8018790:	f000 fe88 	bl	80194a4 <uxr_stream_id_from_raw>
 8018794:	a91a      	add	r1, sp, #104	; 0x68
 8018796:	4602      	mov	r2, r0
 8018798:	900a      	str	r0, [sp, #40]	; 0x28
 801879a:	4620      	mov	r0, r4
 801879c:	f7ff faf2 	bl	8017d84 <read_submessage_list>
 80187a0:	e7be      	b.n	8018720 <uxr_create_session+0x68>
 80187a2:	9b03      	ldr	r3, [sp, #12]
 80187a4:	3b01      	subs	r3, #1
 80187a6:	9303      	str	r3, [sp, #12]
 80187a8:	d001      	beq.n	80187ae <uxr_create_session+0xf6>
 80187aa:	2aff      	cmp	r2, #255	; 0xff
 80187ac:	d0ac      	beq.n	8018708 <uxr_create_session+0x50>
 80187ae:	2a00      	cmp	r2, #0
 80187b0:	d051      	beq.n	8018856 <uxr_create_session+0x19e>
 80187b2:	2000      	movs	r0, #0
 80187b4:	b02b      	add	sp, #172	; 0xac
 80187b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80187be:	4641      	mov	r1, r8
 80187c0:	4630      	mov	r0, r6
 80187c2:	9304      	str	r3, [sp, #16]
 80187c4:	f000 ff5c 	bl	8019680 <uxr_get_input_reliable_stream>
 80187c8:	4682      	mov	sl, r0
 80187ca:	b348      	cbz	r0, 8018820 <uxr_create_session+0x168>
 80187cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80187ce:	a81a      	add	r0, sp, #104	; 0x68
 80187d0:	9205      	str	r2, [sp, #20]
 80187d2:	f7fb fd17 	bl	8014204 <ucdr_buffer_remaining>
 80187d6:	4603      	mov	r3, r0
 80187d8:	f10d 0019 	add.w	r0, sp, #25
 80187dc:	9a05      	ldr	r2, [sp, #20]
 80187de:	4659      	mov	r1, fp
 80187e0:	9000      	str	r0, [sp, #0]
 80187e2:	4650      	mov	r0, sl
 80187e4:	f006 fdb2 	bl	801f34c <uxr_receive_reliable_message>
 80187e8:	b1d0      	cbz	r0, 8018820 <uxr_create_session+0x168>
 80187ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d038      	beq.n	8018864 <uxr_create_session+0x1ac>
 80187f2:	9f04      	ldr	r7, [sp, #16]
 80187f4:	e00a      	b.n	801880c <uxr_create_session+0x154>
 80187f6:	f04f 0302 	mov.w	r3, #2
 80187fa:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80187fe:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8018802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018808:	f7ff fabc 	bl	8017d84 <read_submessage_list>
 801880c:	a922      	add	r1, sp, #136	; 0x88
 801880e:	2204      	movs	r2, #4
 8018810:	4650      	mov	r0, sl
 8018812:	f006 fe1d 	bl	801f450 <uxr_next_input_reliable_buffer_available>
 8018816:	4603      	mov	r3, r0
 8018818:	a922      	add	r1, sp, #136	; 0x88
 801881a:	4620      	mov	r0, r4
 801881c:	2b00      	cmp	r3, #0
 801881e:	d1ea      	bne.n	80187f6 <uxr_create_session+0x13e>
 8018820:	4642      	mov	r2, r8
 8018822:	9904      	ldr	r1, [sp, #16]
 8018824:	4620      	mov	r0, r4
 8018826:	f7ff f927 	bl	8017a78 <write_submessage_acknack.isra.0>
 801882a:	e779      	b.n	8018720 <uxr_create_session+0x68>
 801882c:	4641      	mov	r1, r8
 801882e:	4630      	mov	r0, r6
 8018830:	f000 ff1c 	bl	801966c <uxr_get_input_best_effort_stream>
 8018834:	2800      	cmp	r0, #0
 8018836:	f43f af73 	beq.w	8018720 <uxr_create_session+0x68>
 801883a:	4659      	mov	r1, fp
 801883c:	f006 fcfc 	bl	801f238 <uxr_receive_best_effort_message>
 8018840:	2800      	cmp	r0, #0
 8018842:	f43f af6d 	beq.w	8018720 <uxr_create_session+0x68>
 8018846:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801884a:	a91a      	add	r1, sp, #104	; 0x68
 801884c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801884e:	4620      	mov	r0, r4
 8018850:	f7ff fa98 	bl	8017d84 <read_submessage_list>
 8018854:	e764      	b.n	8018720 <uxr_create_session+0x68>
 8018856:	4630      	mov	r0, r6
 8018858:	f000 fe5a 	bl	8019510 <uxr_reset_stream_storage>
 801885c:	2001      	movs	r0, #1
 801885e:	b02b      	add	sp, #172	; 0xac
 8018860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018864:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018868:	a91a      	add	r1, sp, #104	; 0x68
 801886a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801886c:	4620      	mov	r0, r4
 801886e:	f7ff fa89 	bl	8017d84 <read_submessage_list>
 8018872:	e7be      	b.n	80187f2 <uxr_create_session+0x13a>

08018874 <uxr_prepare_stream_to_write_submessage>:
 8018874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018878:	b082      	sub	sp, #8
 801887a:	4604      	mov	r4, r0
 801887c:	4610      	mov	r0, r2
 801887e:	4615      	mov	r5, r2
 8018880:	461e      	mov	r6, r3
 8018882:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018886:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801888a:	f105 0904 	add.w	r9, r5, #4
 801888e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8018892:	9101      	str	r1, [sp, #4]
 8018894:	f000 ff56 	bl	8019744 <uxr_submessage_padding>
 8018898:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801889c:	4481      	add	r9, r0
 801889e:	2b01      	cmp	r3, #1
 80188a0:	d01d      	beq.n	80188de <uxr_prepare_stream_to_write_submessage+0x6a>
 80188a2:	2b02      	cmp	r3, #2
 80188a4:	d116      	bne.n	80188d4 <uxr_prepare_stream_to_write_submessage+0x60>
 80188a6:	f104 0008 	add.w	r0, r4, #8
 80188aa:	4651      	mov	r1, sl
 80188ac:	f000 fed2 	bl	8019654 <uxr_get_output_reliable_stream>
 80188b0:	4604      	mov	r4, r0
 80188b2:	b158      	cbz	r0, 80188cc <uxr_prepare_stream_to_write_submessage+0x58>
 80188b4:	4649      	mov	r1, r9
 80188b6:	4632      	mov	r2, r6
 80188b8:	f006 ff90 	bl	801f7dc <uxr_prepare_reliable_buffer_to_write>
 80188bc:	4604      	mov	r4, r0
 80188be:	b12c      	cbz	r4, 80188cc <uxr_prepare_stream_to_write_submessage+0x58>
 80188c0:	4643      	mov	r3, r8
 80188c2:	b2aa      	uxth	r2, r5
 80188c4:	4639      	mov	r1, r7
 80188c6:	4630      	mov	r0, r6
 80188c8:	f000 fefc 	bl	80196c4 <uxr_buffer_submessage_header>
 80188cc:	4620      	mov	r0, r4
 80188ce:	b002      	add	sp, #8
 80188d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188d4:	2400      	movs	r4, #0
 80188d6:	4620      	mov	r0, r4
 80188d8:	b002      	add	sp, #8
 80188da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188de:	f104 0008 	add.w	r0, r4, #8
 80188e2:	4651      	mov	r1, sl
 80188e4:	f000 feae 	bl	8019644 <uxr_get_output_best_effort_stream>
 80188e8:	4604      	mov	r4, r0
 80188ea:	2800      	cmp	r0, #0
 80188ec:	d0ee      	beq.n	80188cc <uxr_prepare_stream_to_write_submessage+0x58>
 80188ee:	4649      	mov	r1, r9
 80188f0:	4632      	mov	r2, r6
 80188f2:	f006 fe9d 	bl	801f630 <uxr_prepare_best_effort_buffer_to_write>
 80188f6:	4604      	mov	r4, r0
 80188f8:	e7e1      	b.n	80188be <uxr_prepare_stream_to_write_submessage+0x4a>
 80188fa:	bf00      	nop

080188fc <uxr_init_session_info>:
 80188fc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018900:	23ff      	movs	r3, #255	; 0xff
 8018902:	7102      	strb	r2, [r0, #4]
 8018904:	f880 c001 	strb.w	ip, [r0, #1]
 8018908:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801890c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018910:	7001      	strb	r1, [r0, #0]
 8018912:	f880 c002 	strb.w	ip, [r0, #2]
 8018916:	7143      	strb	r3, [r0, #5]
 8018918:	70c2      	strb	r2, [r0, #3]
 801891a:	b500      	push	{lr}
 801891c:	f04f 0e09 	mov.w	lr, #9
 8018920:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018924:	f85d fb04 	ldr.w	pc, [sp], #4

08018928 <uxr_buffer_create_session>:
 8018928:	b530      	push	{r4, r5, lr}
 801892a:	2300      	movs	r3, #0
 801892c:	b089      	sub	sp, #36	; 0x24
 801892e:	4d12      	ldr	r5, [pc, #72]	; (8018978 <uxr_buffer_create_session+0x50>)
 8018930:	460c      	mov	r4, r1
 8018932:	9307      	str	r3, [sp, #28]
 8018934:	4619      	mov	r1, r3
 8018936:	f8ad 201c 	strh.w	r2, [sp, #28]
 801893a:	2201      	movs	r2, #1
 801893c:	9301      	str	r3, [sp, #4]
 801893e:	80c2      	strh	r2, [r0, #6]
 8018940:	f88d 2004 	strb.w	r2, [sp, #4]
 8018944:	682a      	ldr	r2, [r5, #0]
 8018946:	9303      	str	r3, [sp, #12]
 8018948:	9200      	str	r2, [sp, #0]
 801894a:	88aa      	ldrh	r2, [r5, #4]
 801894c:	9306      	str	r3, [sp, #24]
 801894e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018952:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018956:	9202      	str	r2, [sp, #8]
 8018958:	7802      	ldrb	r2, [r0, #0]
 801895a:	4620      	mov	r0, r4
 801895c:	f88d 200c 	strb.w	r2, [sp, #12]
 8018960:	2210      	movs	r2, #16
 8018962:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8018966:	f000 fead 	bl	80196c4 <uxr_buffer_submessage_header>
 801896a:	4669      	mov	r1, sp
 801896c:	4620      	mov	r0, r4
 801896e:	f001 feeb 	bl	801a748 <uxr_serialize_CREATE_CLIENT_Payload>
 8018972:	b009      	add	sp, #36	; 0x24
 8018974:	bd30      	pop	{r4, r5, pc}
 8018976:	bf00      	nop
 8018978:	0802223c 	.word	0x0802223c

0801897c <uxr_buffer_delete_session>:
 801897c:	4a0c      	ldr	r2, [pc, #48]	; (80189b0 <uxr_buffer_delete_session+0x34>)
 801897e:	2302      	movs	r3, #2
 8018980:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8018984:	b510      	push	{r4, lr}
 8018986:	460c      	mov	r4, r1
 8018988:	b082      	sub	sp, #8
 801898a:	8911      	ldrh	r1, [r2, #8]
 801898c:	2204      	movs	r2, #4
 801898e:	80c3      	strh	r3, [r0, #6]
 8018990:	2300      	movs	r3, #0
 8018992:	f8ad 1006 	strh.w	r1, [sp, #6]
 8018996:	4620      	mov	r0, r4
 8018998:	2103      	movs	r1, #3
 801899a:	f8ad c004 	strh.w	ip, [sp, #4]
 801899e:	f000 fe91 	bl	80196c4 <uxr_buffer_submessage_header>
 80189a2:	a901      	add	r1, sp, #4
 80189a4:	4620      	mov	r0, r4
 80189a6:	f001 ff8d 	bl	801a8c4 <uxr_serialize_DELETE_Payload>
 80189aa:	b002      	add	sp, #8
 80189ac:	bd10      	pop	{r4, pc}
 80189ae:	bf00      	nop
 80189b0:	0802223c 	.word	0x0802223c

080189b4 <uxr_read_create_session_status>:
 80189b4:	b510      	push	{r4, lr}
 80189b6:	460b      	mov	r3, r1
 80189b8:	b088      	sub	sp, #32
 80189ba:	4604      	mov	r4, r0
 80189bc:	a901      	add	r1, sp, #4
 80189be:	4618      	mov	r0, r3
 80189c0:	f001 ff90 	bl	801a8e4 <uxr_deserialize_STATUS_AGENT_Payload>
 80189c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80189c8:	7163      	strb	r3, [r4, #5]
 80189ca:	b008      	add	sp, #32
 80189cc:	bd10      	pop	{r4, pc}
 80189ce:	bf00      	nop

080189d0 <uxr_read_delete_session_status>:
 80189d0:	b510      	push	{r4, lr}
 80189d2:	b084      	sub	sp, #16
 80189d4:	4604      	mov	r4, r0
 80189d6:	4608      	mov	r0, r1
 80189d8:	a902      	add	r1, sp, #8
 80189da:	f001 ffb3 	bl	801a944 <uxr_deserialize_STATUS_Payload>
 80189de:	88e3      	ldrh	r3, [r4, #6]
 80189e0:	2b02      	cmp	r3, #2
 80189e2:	d001      	beq.n	80189e8 <uxr_read_delete_session_status+0x18>
 80189e4:	b004      	add	sp, #16
 80189e6:	bd10      	pop	{r4, pc}
 80189e8:	f10d 000a 	add.w	r0, sp, #10
 80189ec:	f7fe fd96 	bl	801751c <uxr_object_id_from_raw>
 80189f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80189f4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80189f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80189fc:	b29b      	uxth	r3, r3
 80189fe:	2b02      	cmp	r3, #2
 8018a00:	d1f0      	bne.n	80189e4 <uxr_read_delete_session_status+0x14>
 8018a02:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018a06:	7163      	strb	r3, [r4, #5]
 8018a08:	e7ec      	b.n	80189e4 <uxr_read_delete_session_status+0x14>
 8018a0a:	bf00      	nop

08018a0c <uxr_stamp_create_session_header>:
 8018a0c:	b510      	push	{r4, lr}
 8018a0e:	2208      	movs	r2, #8
 8018a10:	b08a      	sub	sp, #40	; 0x28
 8018a12:	4604      	mov	r4, r0
 8018a14:	eb0d 0002 	add.w	r0, sp, r2
 8018a18:	f7fb fbc2 	bl	80141a0 <ucdr_init_buffer>
 8018a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a20:	2300      	movs	r3, #0
 8018a22:	a802      	add	r0, sp, #8
 8018a24:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8018a28:	9400      	str	r4, [sp, #0]
 8018a2a:	461a      	mov	r2, r3
 8018a2c:	f001 f846 	bl	8019abc <uxr_serialize_message_header>
 8018a30:	b00a      	add	sp, #40	; 0x28
 8018a32:	bd10      	pop	{r4, pc}

08018a34 <uxr_stamp_session_header>:
 8018a34:	b530      	push	{r4, r5, lr}
 8018a36:	b08d      	sub	sp, #52	; 0x34
 8018a38:	4604      	mov	r4, r0
 8018a3a:	460d      	mov	r5, r1
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	a804      	add	r0, sp, #16
 8018a40:	9203      	str	r2, [sp, #12]
 8018a42:	2208      	movs	r2, #8
 8018a44:	f7fb fbac 	bl	80141a0 <ucdr_init_buffer>
 8018a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a4c:	9b03      	ldr	r3, [sp, #12]
 8018a4e:	462a      	mov	r2, r5
 8018a50:	a804      	add	r0, sp, #16
 8018a52:	9400      	str	r4, [sp, #0]
 8018a54:	f001 f832 	bl	8019abc <uxr_serialize_message_header>
 8018a58:	b00d      	add	sp, #52	; 0x34
 8018a5a:	bd30      	pop	{r4, r5, pc}

08018a5c <uxr_read_session_header>:
 8018a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a60:	4607      	mov	r7, r0
 8018a62:	b084      	sub	sp, #16
 8018a64:	4608      	mov	r0, r1
 8018a66:	460c      	mov	r4, r1
 8018a68:	4615      	mov	r5, r2
 8018a6a:	461e      	mov	r6, r3
 8018a6c:	f7fb fbca 	bl	8014204 <ucdr_buffer_remaining>
 8018a70:	2808      	cmp	r0, #8
 8018a72:	d803      	bhi.n	8018a7c <uxr_read_session_header+0x20>
 8018a74:	2000      	movs	r0, #0
 8018a76:	b004      	add	sp, #16
 8018a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a7c:	f10d 080c 	add.w	r8, sp, #12
 8018a80:	4633      	mov	r3, r6
 8018a82:	462a      	mov	r2, r5
 8018a84:	4620      	mov	r0, r4
 8018a86:	f10d 010b 	add.w	r1, sp, #11
 8018a8a:	f8cd 8000 	str.w	r8, [sp]
 8018a8e:	f001 f833 	bl	8019af8 <uxr_deserialize_message_header>
 8018a92:	783a      	ldrb	r2, [r7, #0]
 8018a94:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8018a98:	4293      	cmp	r3, r2
 8018a9a:	d1eb      	bne.n	8018a74 <uxr_read_session_header+0x18>
 8018a9c:	061b      	lsls	r3, r3, #24
 8018a9e:	d41b      	bmi.n	8018ad8 <uxr_read_session_header+0x7c>
 8018aa0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018aa4:	787b      	ldrb	r3, [r7, #1]
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	d003      	beq.n	8018ab2 <uxr_read_session_header+0x56>
 8018aaa:	2001      	movs	r0, #1
 8018aac:	f080 0001 	eor.w	r0, r0, #1
 8018ab0:	e7e1      	b.n	8018a76 <uxr_read_session_header+0x1a>
 8018ab2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8018ab6:	1cb8      	adds	r0, r7, #2
 8018ab8:	78bb      	ldrb	r3, [r7, #2]
 8018aba:	429a      	cmp	r2, r3
 8018abc:	d1f5      	bne.n	8018aaa <uxr_read_session_header+0x4e>
 8018abe:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8018ac2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d1ef      	bne.n	8018aaa <uxr_read_session_header+0x4e>
 8018aca:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8018ace:	7843      	ldrb	r3, [r0, #1]
 8018ad0:	429a      	cmp	r2, r3
 8018ad2:	d1ea      	bne.n	8018aaa <uxr_read_session_header+0x4e>
 8018ad4:	2000      	movs	r0, #0
 8018ad6:	e7e9      	b.n	8018aac <uxr_read_session_header+0x50>
 8018ad8:	2001      	movs	r0, #1
 8018ada:	e7cc      	b.n	8018a76 <uxr_read_session_header+0x1a>

08018adc <uxr_session_header_offset>:
 8018adc:	f990 3000 	ldrsb.w	r3, [r0]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	bfac      	ite	ge
 8018ae4:	2008      	movge	r0, #8
 8018ae6:	2004      	movlt	r0, #4
 8018ae8:	4770      	bx	lr
 8018aea:	bf00      	nop

08018aec <uxr_init_base_object_request>:
 8018aec:	b510      	push	{r4, lr}
 8018aee:	b082      	sub	sp, #8
 8018af0:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8018af4:	9101      	str	r1, [sp, #4]
 8018af6:	88c3      	ldrh	r3, [r0, #6]
 8018af8:	f1a3 010a 	sub.w	r1, r3, #10
 8018afc:	b289      	uxth	r1, r1
 8018afe:	42a1      	cmp	r1, r4
 8018b00:	d80f      	bhi.n	8018b22 <uxr_init_base_object_request+0x36>
 8018b02:	3301      	adds	r3, #1
 8018b04:	b29c      	uxth	r4, r3
 8018b06:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	80c4      	strh	r4, [r0, #6]
 8018b0e:	1c91      	adds	r1, r2, #2
 8018b10:	9801      	ldr	r0, [sp, #4]
 8018b12:	f882 c000 	strb.w	ip, [r2]
 8018b16:	7053      	strb	r3, [r2, #1]
 8018b18:	f7fe fd14 	bl	8017544 <uxr_object_id_to_raw>
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	b002      	add	sp, #8
 8018b20:	bd10      	pop	{r4, pc}
 8018b22:	230a      	movs	r3, #10
 8018b24:	f04f 0c00 	mov.w	ip, #0
 8018b28:	461c      	mov	r4, r3
 8018b2a:	e7ef      	b.n	8018b0c <uxr_init_base_object_request+0x20>

08018b2c <uxr_parse_base_object_request>:
 8018b2c:	b570      	push	{r4, r5, r6, lr}
 8018b2e:	4604      	mov	r4, r0
 8018b30:	3002      	adds	r0, #2
 8018b32:	460d      	mov	r5, r1
 8018b34:	4616      	mov	r6, r2
 8018b36:	f7fe fcf1 	bl	801751c <uxr_object_id_from_raw>
 8018b3a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8018b3e:	8028      	strh	r0, [r5, #0]
 8018b40:	806b      	strh	r3, [r5, #2]
 8018b42:	7822      	ldrb	r2, [r4, #0]
 8018b44:	7863      	ldrb	r3, [r4, #1]
 8018b46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018b4a:	8033      	strh	r3, [r6, #0]
 8018b4c:	bd70      	pop	{r4, r5, r6, pc}
 8018b4e:	bf00      	nop

08018b50 <uxr_init_framing_io>:
 8018b50:	2300      	movs	r3, #0
 8018b52:	7041      	strb	r1, [r0, #1]
 8018b54:	7003      	strb	r3, [r0, #0]
 8018b56:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018b58:	4770      	bx	lr
 8018b5a:	bf00      	nop

08018b5c <uxr_write_framed_msg>:
 8018b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b60:	4617      	mov	r7, r2
 8018b62:	7842      	ldrb	r2, [r0, #1]
 8018b64:	460e      	mov	r6, r1
 8018b66:	b083      	sub	sp, #12
 8018b68:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8018b6c:	469b      	mov	fp, r3
 8018b6e:	237e      	movs	r3, #126	; 0x7e
 8018b70:	4604      	mov	r4, r0
 8018b72:	2901      	cmp	r1, #1
 8018b74:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8018b78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018b7c:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8018b80:	f240 8115 	bls.w	8018dae <uxr_write_framed_msg+0x252>
 8018b84:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8018b88:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8018b8c:	2202      	movs	r2, #2
 8018b8e:	2901      	cmp	r1, #1
 8018b90:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018b94:	d952      	bls.n	8018c3c <uxr_write_framed_msg+0xe0>
 8018b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b98:	2103      	movs	r1, #3
 8018b9a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018b9e:	b2dd      	uxtb	r5, r3
 8018ba0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018ba4:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8018ba8:	2a01      	cmp	r2, #1
 8018baa:	d95c      	bls.n	8018c66 <uxr_write_framed_msg+0x10a>
 8018bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bae:	1862      	adds	r2, r4, r1
 8018bb0:	3101      	adds	r1, #1
 8018bb2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018bb6:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8018bba:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018bbe:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018bc2:	2a01      	cmp	r2, #1
 8018bc4:	d961      	bls.n	8018c8a <uxr_write_framed_msg+0x12e>
 8018bc6:	1c4a      	adds	r2, r1, #1
 8018bc8:	4421      	add	r1, r4
 8018bca:	b2d2      	uxtb	r2, r2
 8018bcc:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8018bd0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d06a      	beq.n	8018cae <uxr_write_framed_msg+0x152>
 8018bd8:	f04f 0800 	mov.w	r8, #0
 8018bdc:	46c1      	mov	r9, r8
 8018bde:	e016      	b.n	8018c0e <uxr_write_framed_msg+0xb2>
 8018be0:	2a29      	cmp	r2, #41	; 0x29
 8018be2:	d868      	bhi.n	8018cb6 <uxr_write_framed_msg+0x15a>
 8018be4:	18a0      	adds	r0, r4, r2
 8018be6:	3201      	adds	r2, #1
 8018be8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018bec:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018bf0:	ea88 0101 	eor.w	r1, r8, r1
 8018bf4:	4b7d      	ldr	r3, [pc, #500]	; (8018dec <uxr_write_framed_msg+0x290>)
 8018bf6:	f109 0901 	add.w	r9, r9, #1
 8018bfa:	b2c9      	uxtb	r1, r1
 8018bfc:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8018c00:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8018c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c06:	454b      	cmp	r3, r9
 8018c08:	d969      	bls.n	8018cde <uxr_write_framed_msg+0x182>
 8018c0a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018c0e:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8018c12:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8018c16:	2801      	cmp	r0, #1
 8018c18:	d8e2      	bhi.n	8018be0 <uxr_write_framed_msg+0x84>
 8018c1a:	1c50      	adds	r0, r2, #1
 8018c1c:	b2c0      	uxtb	r0, r0
 8018c1e:	2829      	cmp	r0, #41	; 0x29
 8018c20:	d849      	bhi.n	8018cb6 <uxr_write_framed_msg+0x15a>
 8018c22:	18a0      	adds	r0, r4, r2
 8018c24:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8018c28:	3202      	adds	r2, #2
 8018c2a:	f081 0520 	eor.w	r5, r1, #32
 8018c2e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018c32:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8018c36:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018c3a:	e7d9      	b.n	8018bf0 <uxr_write_framed_msg+0x94>
 8018c3c:	2104      	movs	r1, #4
 8018c3e:	f04f 0c03 	mov.w	ip, #3
 8018c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c44:	4422      	add	r2, r4
 8018c46:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8018c4a:	44a4      	add	ip, r4
 8018c4c:	b2dd      	uxtb	r5, r3
 8018c4e:	f080 0020 	eor.w	r0, r0, #32
 8018c52:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8018c56:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8018c5a:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8018c5e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018c62:	2a01      	cmp	r2, #1
 8018c64:	d8a2      	bhi.n	8018bac <uxr_write_framed_msg+0x50>
 8018c66:	1862      	adds	r2, r4, r1
 8018c68:	207d      	movs	r0, #125	; 0x7d
 8018c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c6c:	f085 0520 	eor.w	r5, r5, #32
 8018c70:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8018c74:	3102      	adds	r1, #2
 8018c76:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018c7a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8018c7e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018c82:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018c86:	2a01      	cmp	r2, #1
 8018c88:	d89d      	bhi.n	8018bc6 <uxr_write_framed_msg+0x6a>
 8018c8a:	1c4d      	adds	r5, r1, #1
 8018c8c:	1c8a      	adds	r2, r1, #2
 8018c8e:	f080 0020 	eor.w	r0, r0, #32
 8018c92:	4421      	add	r1, r4
 8018c94:	fa54 f585 	uxtab	r5, r4, r5
 8018c98:	b2d2      	uxtb	r2, r2
 8018c9a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018c9e:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8018ca2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8018ca6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d194      	bne.n	8018bd8 <uxr_write_framed_msg+0x7c>
 8018cae:	4619      	mov	r1, r3
 8018cb0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018cb4:	e019      	b.n	8018cea <uxr_write_framed_msg+0x18e>
 8018cb6:	2500      	movs	r5, #0
 8018cb8:	e000      	b.n	8018cbc <uxr_write_framed_msg+0x160>
 8018cba:	b160      	cbz	r0, 8018cd6 <uxr_write_framed_msg+0x17a>
 8018cbc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018cc0:	1b52      	subs	r2, r2, r5
 8018cc2:	4653      	mov	r3, sl
 8018cc4:	4638      	mov	r0, r7
 8018cc6:	4421      	add	r1, r4
 8018cc8:	47b0      	blx	r6
 8018cca:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018cce:	4405      	add	r5, r0
 8018cd0:	4295      	cmp	r5, r2
 8018cd2:	d3f2      	bcc.n	8018cba <uxr_write_framed_msg+0x15e>
 8018cd4:	d066      	beq.n	8018da4 <uxr_write_framed_msg+0x248>
 8018cd6:	2000      	movs	r0, #0
 8018cd8:	b003      	add	sp, #12
 8018cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cde:	fa5f f188 	uxtb.w	r1, r8
 8018ce2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018ce6:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018cea:	f04f 0900 	mov.w	r9, #0
 8018cee:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8018cf2:	46c8      	mov	r8, r9
 8018cf4:	e013      	b.n	8018d1e <uxr_write_framed_msg+0x1c2>
 8018cf6:	2a29      	cmp	r2, #41	; 0x29
 8018cf8:	d824      	bhi.n	8018d44 <uxr_write_framed_msg+0x1e8>
 8018cfa:	18a3      	adds	r3, r4, r2
 8018cfc:	3201      	adds	r2, #1
 8018cfe:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8018d02:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018d06:	f109 0901 	add.w	r9, r9, #1
 8018d0a:	f1b9 0f02 	cmp.w	r9, #2
 8018d0e:	d02d      	beq.n	8018d6c <uxr_write_framed_msg+0x210>
 8018d10:	f109 0308 	add.w	r3, r9, #8
 8018d14:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018d18:	446b      	add	r3, sp
 8018d1a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018d1e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018d22:	2b01      	cmp	r3, #1
 8018d24:	d8e7      	bhi.n	8018cf6 <uxr_write_framed_msg+0x19a>
 8018d26:	1c53      	adds	r3, r2, #1
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	2b29      	cmp	r3, #41	; 0x29
 8018d2c:	d80a      	bhi.n	8018d44 <uxr_write_framed_msg+0x1e8>
 8018d2e:	18a3      	adds	r3, r4, r2
 8018d30:	f081 0120 	eor.w	r1, r1, #32
 8018d34:	3202      	adds	r2, #2
 8018d36:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8018d3a:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8018d3e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018d42:	e7e0      	b.n	8018d06 <uxr_write_framed_msg+0x1aa>
 8018d44:	2500      	movs	r5, #0
 8018d46:	e001      	b.n	8018d4c <uxr_write_framed_msg+0x1f0>
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	d0c4      	beq.n	8018cd6 <uxr_write_framed_msg+0x17a>
 8018d4c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018d50:	1b52      	subs	r2, r2, r5
 8018d52:	4653      	mov	r3, sl
 8018d54:	4638      	mov	r0, r7
 8018d56:	4421      	add	r1, r4
 8018d58:	47b0      	blx	r6
 8018d5a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018d5e:	4405      	add	r5, r0
 8018d60:	4295      	cmp	r5, r2
 8018d62:	d3f1      	bcc.n	8018d48 <uxr_write_framed_msg+0x1ec>
 8018d64:	d1b7      	bne.n	8018cd6 <uxr_write_framed_msg+0x17a>
 8018d66:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8018d6a:	e7d1      	b.n	8018d10 <uxr_write_framed_msg+0x1b4>
 8018d6c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018d70:	b19a      	cbz	r2, 8018d9a <uxr_write_framed_msg+0x23e>
 8018d72:	2500      	movs	r5, #0
 8018d74:	e001      	b.n	8018d7a <uxr_write_framed_msg+0x21e>
 8018d76:	2800      	cmp	r0, #0
 8018d78:	d0ad      	beq.n	8018cd6 <uxr_write_framed_msg+0x17a>
 8018d7a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018d7e:	1b52      	subs	r2, r2, r5
 8018d80:	4653      	mov	r3, sl
 8018d82:	4638      	mov	r0, r7
 8018d84:	4421      	add	r1, r4
 8018d86:	47b0      	blx	r6
 8018d88:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018d8c:	4405      	add	r5, r0
 8018d8e:	4295      	cmp	r5, r2
 8018d90:	d3f1      	bcc.n	8018d76 <uxr_write_framed_msg+0x21a>
 8018d92:	d1a0      	bne.n	8018cd6 <uxr_write_framed_msg+0x17a>
 8018d94:	2300      	movs	r3, #0
 8018d96:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d9c:	b298      	uxth	r0, r3
 8018d9e:	b003      	add	sp, #12
 8018da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da4:	f04f 0300 	mov.w	r3, #0
 8018da8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018dac:	e72a      	b.n	8018c04 <uxr_write_framed_msg+0xa8>
 8018dae:	217d      	movs	r1, #125	; 0x7d
 8018db0:	f082 0220 	eor.w	r2, r2, #32
 8018db4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8018db8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8018dbc:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8018dc0:	2203      	movs	r2, #3
 8018dc2:	2901      	cmp	r1, #1
 8018dc4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018dc8:	d803      	bhi.n	8018dd2 <uxr_write_framed_msg+0x276>
 8018dca:	2105      	movs	r1, #5
 8018dcc:	f04f 0c04 	mov.w	ip, #4
 8018dd0:	e737      	b.n	8018c42 <uxr_write_framed_msg+0xe6>
 8018dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018dd4:	2104      	movs	r1, #4
 8018dd6:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8018dda:	b2dd      	uxtb	r5, r3
 8018ddc:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018de0:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8018de4:	2a01      	cmp	r2, #1
 8018de6:	f63f aee1 	bhi.w	8018bac <uxr_write_framed_msg+0x50>
 8018dea:	e73c      	b.n	8018c66 <uxr_write_framed_msg+0x10a>
 8018dec:	08022994 	.word	0x08022994

08018df0 <uxr_framing_read_transport>:
 8018df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df4:	4604      	mov	r4, r0
 8018df6:	b085      	sub	sp, #20
 8018df8:	4692      	mov	sl, r2
 8018dfa:	4689      	mov	r9, r1
 8018dfc:	461d      	mov	r5, r3
 8018dfe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018e00:	f000 fca6 	bl	8019750 <uxr_millis>
 8018e04:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8018e08:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8018e0c:	4680      	mov	r8, r0
 8018e0e:	42ba      	cmp	r2, r7
 8018e10:	d05f      	beq.n	8018ed2 <uxr_framing_read_transport+0xe2>
 8018e12:	d817      	bhi.n	8018e44 <uxr_framing_read_transport+0x54>
 8018e14:	3f01      	subs	r7, #1
 8018e16:	1aba      	subs	r2, r7, r2
 8018e18:	2700      	movs	r7, #0
 8018e1a:	b2d2      	uxtb	r2, r2
 8018e1c:	42b2      	cmp	r2, r6
 8018e1e:	d81a      	bhi.n	8018e56 <uxr_framing_read_transport+0x66>
 8018e20:	19d3      	adds	r3, r2, r7
 8018e22:	42b3      	cmp	r3, r6
 8018e24:	d852      	bhi.n	8018ecc <uxr_framing_read_transport+0xdc>
 8018e26:	b9d2      	cbnz	r2, 8018e5e <uxr_framing_read_transport+0x6e>
 8018e28:	2600      	movs	r6, #0
 8018e2a:	f000 fc91 	bl	8019750 <uxr_millis>
 8018e2e:	682b      	ldr	r3, [r5, #0]
 8018e30:	eba0 0008 	sub.w	r0, r0, r8
 8018e34:	1a1b      	subs	r3, r3, r0
 8018e36:	4630      	mov	r0, r6
 8018e38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e3c:	602b      	str	r3, [r5, #0]
 8018e3e:	b005      	add	sp, #20
 8018e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e44:	2f00      	cmp	r7, #0
 8018e46:	d060      	beq.n	8018f0a <uxr_framing_read_transport+0x11a>
 8018e48:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8018e4c:	3f01      	subs	r7, #1
 8018e4e:	b2d2      	uxtb	r2, r2
 8018e50:	b2ff      	uxtb	r7, r7
 8018e52:	42b2      	cmp	r2, r6
 8018e54:	d9e4      	bls.n	8018e20 <uxr_framing_read_transport+0x30>
 8018e56:	b2f2      	uxtb	r2, r6
 8018e58:	2700      	movs	r7, #0
 8018e5a:	2a00      	cmp	r2, #0
 8018e5c:	d0e4      	beq.n	8018e28 <uxr_framing_read_transport+0x38>
 8018e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e60:	4650      	mov	r0, sl
 8018e62:	9203      	str	r2, [sp, #12]
 8018e64:	9300      	str	r3, [sp, #0]
 8018e66:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018e6a:	682b      	ldr	r3, [r5, #0]
 8018e6c:	3102      	adds	r1, #2
 8018e6e:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8018f14 <uxr_framing_read_transport+0x124>
 8018e72:	4421      	add	r1, r4
 8018e74:	47c8      	blx	r9
 8018e76:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018e7a:	4606      	mov	r6, r0
 8018e7c:	4403      	add	r3, r0
 8018e7e:	0859      	lsrs	r1, r3, #1
 8018e80:	fbab 2101 	umull	r2, r1, fp, r1
 8018e84:	222a      	movs	r2, #42	; 0x2a
 8018e86:	0889      	lsrs	r1, r1, #2
 8018e88:	fb02 3111 	mls	r1, r2, r1, r3
 8018e8c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d0c9      	beq.n	8018e28 <uxr_framing_read_transport+0x38>
 8018e94:	9a03      	ldr	r2, [sp, #12]
 8018e96:	4290      	cmp	r0, r2
 8018e98:	d1c7      	bne.n	8018e2a <uxr_framing_read_transport+0x3a>
 8018e9a:	2f00      	cmp	r7, #0
 8018e9c:	d0c5      	beq.n	8018e2a <uxr_framing_read_transport+0x3a>
 8018e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ea0:	3102      	adds	r1, #2
 8018ea2:	463a      	mov	r2, r7
 8018ea4:	4650      	mov	r0, sl
 8018ea6:	4421      	add	r1, r4
 8018ea8:	9300      	str	r3, [sp, #0]
 8018eaa:	2300      	movs	r3, #0
 8018eac:	47c8      	blx	r9
 8018eae:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8018eb2:	4406      	add	r6, r0
 8018eb4:	1813      	adds	r3, r2, r0
 8018eb6:	085a      	lsrs	r2, r3, #1
 8018eb8:	fbab 1b02 	umull	r1, fp, fp, r2
 8018ebc:	222a      	movs	r2, #42	; 0x2a
 8018ebe:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018ec2:	fb02 331b 	mls	r3, r2, fp, r3
 8018ec6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8018eca:	e7ae      	b.n	8018e2a <uxr_framing_read_transport+0x3a>
 8018ecc:	1ab6      	subs	r6, r6, r2
 8018ece:	b2f7      	uxtb	r7, r6
 8018ed0:	e7a9      	b.n	8018e26 <uxr_framing_read_transport+0x36>
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	2e28      	cmp	r6, #40	; 0x28
 8018ed6:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8018ed8:	d9bd      	bls.n	8018e56 <uxr_framing_read_transport+0x66>
 8018eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018edc:	2229      	movs	r2, #41	; 0x29
 8018ede:	1ca1      	adds	r1, r4, #2
 8018ee0:	4650      	mov	r0, sl
 8018ee2:	9300      	str	r3, [sp, #0]
 8018ee4:	682b      	ldr	r3, [r5, #0]
 8018ee6:	47c8      	blx	r9
 8018ee8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018eec:	4606      	mov	r6, r0
 8018eee:	212a      	movs	r1, #42	; 0x2a
 8018ef0:	4403      	add	r3, r0
 8018ef2:	4808      	ldr	r0, [pc, #32]	; (8018f14 <uxr_framing_read_transport+0x124>)
 8018ef4:	085a      	lsrs	r2, r3, #1
 8018ef6:	fba0 0202 	umull	r0, r2, r0, r2
 8018efa:	0892      	lsrs	r2, r2, #2
 8018efc:	fb01 3312 	mls	r3, r1, r2, r3
 8018f00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8018f04:	2e00      	cmp	r6, #0
 8018f06:	d08f      	beq.n	8018e28 <uxr_framing_read_transport+0x38>
 8018f08:	e78f      	b.n	8018e2a <uxr_framing_read_transport+0x3a>
 8018f0a:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8018f0e:	b2d2      	uxtb	r2, r2
 8018f10:	e784      	b.n	8018e1c <uxr_framing_read_transport+0x2c>
 8018f12:	bf00      	nop
 8018f14:	30c30c31 	.word	0x30c30c31

08018f18 <uxr_read_framed_msg>:
 8018f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1c:	461e      	mov	r6, r3
 8018f1e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8018f22:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8018f26:	b083      	sub	sp, #12
 8018f28:	4604      	mov	r4, r0
 8018f2a:	4688      	mov	r8, r1
 8018f2c:	429d      	cmp	r5, r3
 8018f2e:	4691      	mov	r9, r2
 8018f30:	f000 818c 	beq.w	801924c <uxr_read_framed_msg+0x334>
 8018f34:	7823      	ldrb	r3, [r4, #0]
 8018f36:	4dc3      	ldr	r5, [pc, #780]	; (8019244 <uxr_read_framed_msg+0x32c>)
 8018f38:	4fc3      	ldr	r7, [pc, #780]	; (8019248 <uxr_read_framed_msg+0x330>)
 8018f3a:	2b07      	cmp	r3, #7
 8018f3c:	d8fd      	bhi.n	8018f3a <uxr_read_framed_msg+0x22>
 8018f3e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018f42:	011c      	.short	0x011c
 8018f44:	00d900fb 	.word	0x00d900fb
 8018f48:	008f00ba 	.word	0x008f00ba
 8018f4c:	00320051 	.word	0x00320051
 8018f50:	0008      	.short	0x0008
 8018f52:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018f56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018f5a:	4299      	cmp	r1, r3
 8018f5c:	f000 814d 	beq.w	80191fa <uxr_read_framed_msg+0x2e2>
 8018f60:	18e2      	adds	r2, r4, r3
 8018f62:	7892      	ldrb	r2, [r2, #2]
 8018f64:	2a7d      	cmp	r2, #125	; 0x7d
 8018f66:	f000 81b8 	beq.w	80192da <uxr_read_framed_msg+0x3c2>
 8018f6a:	3301      	adds	r3, #1
 8018f6c:	212a      	movs	r1, #42	; 0x2a
 8018f6e:	2a7e      	cmp	r2, #126	; 0x7e
 8018f70:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018f74:	fba5 c000 	umull	ip, r0, r5, r0
 8018f78:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018f7c:	fb01 3310 	mls	r3, r1, r0, r3
 8018f80:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018f84:	f000 8257 	beq.w	8019436 <uxr_read_framed_msg+0x51e>
 8018f88:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018f8a:	2000      	movs	r0, #0
 8018f8c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8018f8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018f92:	7020      	strb	r0, [r4, #0]
 8018f94:	b29b      	uxth	r3, r3
 8018f96:	4299      	cmp	r1, r3
 8018f98:	86a3      	strh	r3, [r4, #52]	; 0x34
 8018f9a:	f000 8178 	beq.w	801928e <uxr_read_framed_msg+0x376>
 8018f9e:	2000      	movs	r0, #0
 8018fa0:	b003      	add	sp, #12
 8018fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fa6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8018faa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018fae:	4298      	cmp	r0, r3
 8018fb0:	f000 8132 	beq.w	8019218 <uxr_read_framed_msg+0x300>
 8018fb4:	18e2      	adds	r2, r4, r3
 8018fb6:	7891      	ldrb	r1, [r2, #2]
 8018fb8:	297d      	cmp	r1, #125	; 0x7d
 8018fba:	f000 8170 	beq.w	801929e <uxr_read_framed_msg+0x386>
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	202a      	movs	r0, #42	; 0x2a
 8018fc2:	297e      	cmp	r1, #126	; 0x7e
 8018fc4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018fc8:	fba5 c202 	umull	ip, r2, r5, r2
 8018fcc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018fd0:	fb00 3312 	mls	r3, r0, r2, r3
 8018fd4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018fd8:	f000 821d 	beq.w	8019416 <uxr_read_framed_msg+0x4fe>
 8018fdc:	2307      	movs	r3, #7
 8018fde:	86a1      	strh	r1, [r4, #52]	; 0x34
 8018fe0:	7023      	strb	r3, [r4, #0]
 8018fe2:	e7aa      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 8018fe4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8018fe6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8018fea:	459e      	cmp	lr, r3
 8018fec:	d827      	bhi.n	801903e <uxr_read_framed_msg+0x126>
 8018fee:	e032      	b.n	8019056 <uxr_read_framed_msg+0x13e>
 8018ff0:	fba5 b101 	umull	fp, r1, r5, r1
 8018ff4:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018ff8:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8018ffc:	0889      	lsrs	r1, r1, #2
 8018ffe:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019002:	fb0b 0111 	mls	r1, fp, r1, r0
 8019006:	f000 80d4 	beq.w	80191b2 <uxr_read_framed_msg+0x29a>
 801900a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801900e:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019012:	f000 80cb 	beq.w	80191ac <uxr_read_framed_msg+0x294>
 8019016:	f806 c003 	strb.w	ip, [r6, r3]
 801901a:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801901c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801901e:	ea80 010c 	eor.w	r1, r0, ip
 8019022:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019026:	3301      	adds	r3, #1
 8019028:	b2c9      	uxtb	r1, r1
 801902a:	b29b      	uxth	r3, r3
 801902c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019030:	4573      	cmp	r3, lr
 8019032:	8663      	strh	r3, [r4, #50]	; 0x32
 8019034:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019038:	86e2      	strh	r2, [r4, #54]	; 0x36
 801903a:	f080 811d 	bcs.w	8019278 <uxr_read_framed_msg+0x360>
 801903e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019042:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019046:	1c50      	adds	r0, r2, #1
 8019048:	eb04 0c02 	add.w	ip, r4, r2
 801904c:	4592      	cmp	sl, r2
 801904e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019052:	d1cd      	bne.n	8018ff0 <uxr_read_framed_msg+0xd8>
 8019054:	459e      	cmp	lr, r3
 8019056:	f040 8114 	bne.w	8019282 <uxr_read_framed_msg+0x36a>
 801905a:	2306      	movs	r3, #6
 801905c:	7023      	strb	r3, [r4, #0]
 801905e:	e76c      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 8019060:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019064:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019068:	4298      	cmp	r0, r3
 801906a:	f000 80c6 	beq.w	80191fa <uxr_read_framed_msg+0x2e2>
 801906e:	18e2      	adds	r2, r4, r3
 8019070:	7891      	ldrb	r1, [r2, #2]
 8019072:	297d      	cmp	r1, #125	; 0x7d
 8019074:	f000 8193 	beq.w	801939e <uxr_read_framed_msg+0x486>
 8019078:	3301      	adds	r3, #1
 801907a:	202a      	movs	r0, #42	; 0x2a
 801907c:	297e      	cmp	r1, #126	; 0x7e
 801907e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019082:	fba5 c202 	umull	ip, r2, r5, r2
 8019086:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801908a:	fb00 3312 	mls	r3, r0, r2, r3
 801908e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019092:	f000 81d0 	beq.w	8019436 <uxr_read_framed_msg+0x51e>
 8019096:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019098:	2000      	movs	r0, #0
 801909a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801909e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80190a0:	8660      	strh	r0, [r4, #50]	; 0x32
 80190a2:	b29b      	uxth	r3, r3
 80190a4:	86e0      	strh	r0, [r4, #54]	; 0x36
 80190a6:	428b      	cmp	r3, r1
 80190a8:	8623      	strh	r3, [r4, #48]	; 0x30
 80190aa:	f240 80e2 	bls.w	8019272 <uxr_read_framed_msg+0x35a>
 80190ae:	7020      	strb	r0, [r4, #0]
 80190b0:	b003      	add	sp, #12
 80190b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80190ba:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80190be:	4298      	cmp	r0, r3
 80190c0:	f000 80aa 	beq.w	8019218 <uxr_read_framed_msg+0x300>
 80190c4:	18e2      	adds	r2, r4, r3
 80190c6:	7891      	ldrb	r1, [r2, #2]
 80190c8:	297d      	cmp	r1, #125	; 0x7d
 80190ca:	f000 8186 	beq.w	80193da <uxr_read_framed_msg+0x4c2>
 80190ce:	3301      	adds	r3, #1
 80190d0:	202a      	movs	r0, #42	; 0x2a
 80190d2:	297e      	cmp	r1, #126	; 0x7e
 80190d4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80190d8:	fba5 c202 	umull	ip, r2, r5, r2
 80190dc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80190e0:	fb00 3312 	mls	r3, r0, r2, r3
 80190e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80190e8:	f000 8195 	beq.w	8019416 <uxr_read_framed_msg+0x4fe>
 80190ec:	2304      	movs	r3, #4
 80190ee:	8621      	strh	r1, [r4, #48]	; 0x30
 80190f0:	7023      	strb	r3, [r4, #0]
 80190f2:	e722      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 80190f4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80190f8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80190fc:	4290      	cmp	r0, r2
 80190fe:	f000 80b4 	beq.w	801926a <uxr_read_framed_msg+0x352>
 8019102:	18a3      	adds	r3, r4, r2
 8019104:	7899      	ldrb	r1, [r3, #2]
 8019106:	297d      	cmp	r1, #125	; 0x7d
 8019108:	f000 8107 	beq.w	801931a <uxr_read_framed_msg+0x402>
 801910c:	3201      	adds	r2, #1
 801910e:	232a      	movs	r3, #42	; 0x2a
 8019110:	297e      	cmp	r1, #126	; 0x7e
 8019112:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019116:	fba5 c000 	umull	ip, r0, r5, r0
 801911a:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801911e:	fb03 2210 	mls	r2, r3, r0, r2
 8019122:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019126:	f000 818a 	beq.w	801943e <uxr_read_framed_msg+0x526>
 801912a:	7863      	ldrb	r3, [r4, #1]
 801912c:	428b      	cmp	r3, r1
 801912e:	bf0c      	ite	eq
 8019130:	2303      	moveq	r3, #3
 8019132:	2300      	movne	r3, #0
 8019134:	7023      	strb	r3, [r4, #0]
 8019136:	e700      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 8019138:	2300      	movs	r3, #0
 801913a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801913e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019142:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019146:	4299      	cmp	r1, r3
 8019148:	d06a      	beq.n	8019220 <uxr_read_framed_msg+0x308>
 801914a:	18e2      	adds	r2, r4, r3
 801914c:	7890      	ldrb	r0, [r2, #2]
 801914e:	287d      	cmp	r0, #125	; 0x7d
 8019150:	f000 8100 	beq.w	8019354 <uxr_read_framed_msg+0x43c>
 8019154:	3301      	adds	r3, #1
 8019156:	212a      	movs	r1, #42	; 0x2a
 8019158:	287e      	cmp	r0, #126	; 0x7e
 801915a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801915e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019162:	fba5 c202 	umull	ip, r2, r5, r2
 8019166:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801916a:	fb01 3312 	mls	r3, r1, r2, r3
 801916e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019172:	d055      	beq.n	8019220 <uxr_read_framed_msg+0x308>
 8019174:	2302      	movs	r3, #2
 8019176:	7023      	strb	r3, [r4, #0]
 8019178:	e6df      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 801917a:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801917e:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019182:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019186:	1c5a      	adds	r2, r3, #1
 8019188:	459c      	cmp	ip, r3
 801918a:	eb04 0103 	add.w	r1, r4, r3
 801918e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019192:	f43f af04 	beq.w	8018f9e <uxr_read_framed_msg+0x86>
 8019196:	fba5 0303 	umull	r0, r3, r5, r3
 801919a:	7889      	ldrb	r1, [r1, #2]
 801919c:	089b      	lsrs	r3, r3, #2
 801919e:	297e      	cmp	r1, #126	; 0x7e
 80191a0:	fb0e 2313 	mls	r3, lr, r3, r2
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80191aa:	d1ec      	bne.n	8019186 <uxr_read_framed_msg+0x26e>
 80191ac:	2301      	movs	r3, #1
 80191ae:	7023      	strb	r3, [r4, #0]
 80191b0:	e6c3      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 80191b2:	1c50      	adds	r0, r2, #1
 80191b4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80191b8:	3202      	adds	r2, #2
 80191ba:	0841      	lsrs	r1, r0, #1
 80191bc:	fba5 c101 	umull	ip, r1, r5, r1
 80191c0:	0889      	lsrs	r1, r1, #2
 80191c2:	fb0b 0111 	mls	r1, fp, r1, r0
 80191c6:	1860      	adds	r0, r4, r1
 80191c8:	b2c9      	uxtb	r1, r1
 80191ca:	458a      	cmp	sl, r1
 80191cc:	f43f af42 	beq.w	8019054 <uxr_read_framed_msg+0x13c>
 80191d0:	0851      	lsrs	r1, r2, #1
 80191d2:	7880      	ldrb	r0, [r0, #2]
 80191d4:	fba5 a101 	umull	sl, r1, r5, r1
 80191d8:	287e      	cmp	r0, #126	; 0x7e
 80191da:	f080 0c20 	eor.w	ip, r0, #32
 80191de:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80191e2:	fb0b 2211 	mls	r2, fp, r1, r2
 80191e6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80191ea:	f47f af14 	bne.w	8019016 <uxr_read_framed_msg+0xfe>
 80191ee:	459e      	cmp	lr, r3
 80191f0:	f43f af33 	beq.w	801905a <uxr_read_framed_msg+0x142>
 80191f4:	2301      	movs	r3, #1
 80191f6:	7023      	strb	r3, [r4, #0]
 80191f8:	e69f      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 80191fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80191fc:	9300      	str	r3, [sp, #0]
 80191fe:	2301      	movs	r3, #1
 8019200:	9301      	str	r3, [sp, #4]
 8019202:	464a      	mov	r2, r9
 8019204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019206:	4641      	mov	r1, r8
 8019208:	4620      	mov	r0, r4
 801920a:	f7ff fdf1 	bl	8018df0 <uxr_framing_read_transport>
 801920e:	2800      	cmp	r0, #0
 8019210:	f43f aec5 	beq.w	8018f9e <uxr_read_framed_msg+0x86>
 8019214:	7823      	ldrb	r3, [r4, #0]
 8019216:	e690      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 8019218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801921a:	9300      	str	r3, [sp, #0]
 801921c:	2302      	movs	r3, #2
 801921e:	e7ef      	b.n	8019200 <uxr_read_framed_msg+0x2e8>
 8019220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019222:	464a      	mov	r2, r9
 8019224:	4641      	mov	r1, r8
 8019226:	4620      	mov	r0, r4
 8019228:	9300      	str	r3, [sp, #0]
 801922a:	2304      	movs	r3, #4
 801922c:	9301      	str	r3, [sp, #4]
 801922e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019230:	f7ff fdde 	bl	8018df0 <uxr_framing_read_transport>
 8019234:	2800      	cmp	r0, #0
 8019236:	d1ed      	bne.n	8019214 <uxr_read_framed_msg+0x2fc>
 8019238:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801923c:	2b7e      	cmp	r3, #126	; 0x7e
 801923e:	d0e9      	beq.n	8019214 <uxr_read_framed_msg+0x2fc>
 8019240:	e6ad      	b.n	8018f9e <uxr_read_framed_msg+0x86>
 8019242:	bf00      	nop
 8019244:	30c30c31 	.word	0x30c30c31
 8019248:	08022994 	.word	0x08022994
 801924c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801924e:	9300      	str	r3, [sp, #0]
 8019250:	2305      	movs	r3, #5
 8019252:	9301      	str	r3, [sp, #4]
 8019254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019256:	f7ff fdcb 	bl	8018df0 <uxr_framing_read_transport>
 801925a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801925e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019262:	429a      	cmp	r2, r3
 8019264:	f43f ae9b 	beq.w	8018f9e <uxr_read_framed_msg+0x86>
 8019268:	e664      	b.n	8018f34 <uxr_read_framed_msg+0x1c>
 801926a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801926c:	9300      	str	r3, [sp, #0]
 801926e:	2303      	movs	r3, #3
 8019270:	e7c6      	b.n	8019200 <uxr_read_framed_msg+0x2e8>
 8019272:	2305      	movs	r3, #5
 8019274:	7023      	strb	r3, [r4, #0]
 8019276:	e660      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 8019278:	f43f aeef 	beq.w	801905a <uxr_read_framed_msg+0x142>
 801927c:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019280:	d094      	beq.n	80191ac <uxr_read_framed_msg+0x294>
 8019282:	ebae 0303 	sub.w	r3, lr, r3
 8019286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019288:	3302      	adds	r3, #2
 801928a:	9200      	str	r2, [sp, #0]
 801928c:	e7b8      	b.n	8019200 <uxr_read_framed_msg+0x2e8>
 801928e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019294:	7013      	strb	r3, [r2, #0]
 8019296:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019298:	b003      	add	sp, #12
 801929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929e:	1c59      	adds	r1, r3, #1
 80192a0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80192a4:	084a      	lsrs	r2, r1, #1
 80192a6:	fba5 e202 	umull	lr, r2, r5, r2
 80192aa:	0892      	lsrs	r2, r2, #2
 80192ac:	fb0c 1212 	mls	r2, ip, r2, r1
 80192b0:	b2d1      	uxtb	r1, r2
 80192b2:	4288      	cmp	r0, r1
 80192b4:	d0b0      	beq.n	8019218 <uxr_read_framed_msg+0x300>
 80192b6:	3302      	adds	r3, #2
 80192b8:	4422      	add	r2, r4
 80192ba:	7891      	ldrb	r1, [r2, #2]
 80192bc:	085a      	lsrs	r2, r3, #1
 80192be:	fba5 0202 	umull	r0, r2, r5, r2
 80192c2:	297e      	cmp	r1, #126	; 0x7e
 80192c4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80192c8:	fb0c 3312 	mls	r3, ip, r2, r3
 80192cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80192d0:	f000 80a1 	beq.w	8019416 <uxr_read_framed_msg+0x4fe>
 80192d4:	f081 0120 	eor.w	r1, r1, #32
 80192d8:	e680      	b.n	8018fdc <uxr_read_framed_msg+0xc4>
 80192da:	f103 0c01 	add.w	ip, r3, #1
 80192de:	202a      	movs	r0, #42	; 0x2a
 80192e0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80192e4:	fba5 e202 	umull	lr, r2, r5, r2
 80192e8:	0892      	lsrs	r2, r2, #2
 80192ea:	fb00 c212 	mls	r2, r0, r2, ip
 80192ee:	fa5f fc82 	uxtb.w	ip, r2
 80192f2:	4561      	cmp	r1, ip
 80192f4:	d081      	beq.n	80191fa <uxr_read_framed_msg+0x2e2>
 80192f6:	3302      	adds	r3, #2
 80192f8:	4422      	add	r2, r4
 80192fa:	0859      	lsrs	r1, r3, #1
 80192fc:	7892      	ldrb	r2, [r2, #2]
 80192fe:	fba5 c101 	umull	ip, r1, r5, r1
 8019302:	2a7e      	cmp	r2, #126	; 0x7e
 8019304:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019308:	fb00 3311 	mls	r3, r0, r1, r3
 801930c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019310:	f000 8091 	beq.w	8019436 <uxr_read_framed_msg+0x51e>
 8019314:	f082 0220 	eor.w	r2, r2, #32
 8019318:	e636      	b.n	8018f88 <uxr_read_framed_msg+0x70>
 801931a:	1c51      	adds	r1, r2, #1
 801931c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019320:	084b      	lsrs	r3, r1, #1
 8019322:	fba5 e303 	umull	lr, r3, r5, r3
 8019326:	089b      	lsrs	r3, r3, #2
 8019328:	fb0c 1313 	mls	r3, ip, r3, r1
 801932c:	b2d9      	uxtb	r1, r3
 801932e:	4288      	cmp	r0, r1
 8019330:	d09b      	beq.n	801926a <uxr_read_framed_msg+0x352>
 8019332:	3202      	adds	r2, #2
 8019334:	4423      	add	r3, r4
 8019336:	0850      	lsrs	r0, r2, #1
 8019338:	789b      	ldrb	r3, [r3, #2]
 801933a:	fba5 1000 	umull	r1, r0, r5, r0
 801933e:	2b7e      	cmp	r3, #126	; 0x7e
 8019340:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019344:	fb0c 2210 	mls	r2, ip, r0, r2
 8019348:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801934c:	d077      	beq.n	801943e <uxr_read_framed_msg+0x526>
 801934e:	f083 0120 	eor.w	r1, r3, #32
 8019352:	e6ea      	b.n	801912a <uxr_read_framed_msg+0x212>
 8019354:	f103 0c01 	add.w	ip, r3, #1
 8019358:	202a      	movs	r0, #42	; 0x2a
 801935a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801935e:	fba5 e202 	umull	lr, r2, r5, r2
 8019362:	0892      	lsrs	r2, r2, #2
 8019364:	fb00 c212 	mls	r2, r0, r2, ip
 8019368:	fa5f fc82 	uxtb.w	ip, r2
 801936c:	4561      	cmp	r1, ip
 801936e:	f43f af57 	beq.w	8019220 <uxr_read_framed_msg+0x308>
 8019372:	3302      	adds	r3, #2
 8019374:	4422      	add	r2, r4
 8019376:	7891      	ldrb	r1, [r2, #2]
 8019378:	085a      	lsrs	r2, r3, #1
 801937a:	fba5 c202 	umull	ip, r2, r5, r2
 801937e:	297e      	cmp	r1, #126	; 0x7e
 8019380:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019384:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019388:	fb00 3312 	mls	r3, r0, r2, r3
 801938c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019390:	f43f af46 	beq.w	8019220 <uxr_read_framed_msg+0x308>
 8019394:	f081 0120 	eor.w	r1, r1, #32
 8019398:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801939c:	e6ea      	b.n	8019174 <uxr_read_framed_msg+0x25c>
 801939e:	1c59      	adds	r1, r3, #1
 80193a0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80193a4:	084a      	lsrs	r2, r1, #1
 80193a6:	fba5 e202 	umull	lr, r2, r5, r2
 80193aa:	0892      	lsrs	r2, r2, #2
 80193ac:	fb0c 1212 	mls	r2, ip, r2, r1
 80193b0:	b2d1      	uxtb	r1, r2
 80193b2:	4288      	cmp	r0, r1
 80193b4:	f43f af21 	beq.w	80191fa <uxr_read_framed_msg+0x2e2>
 80193b8:	3302      	adds	r3, #2
 80193ba:	4422      	add	r2, r4
 80193bc:	7891      	ldrb	r1, [r2, #2]
 80193be:	085a      	lsrs	r2, r3, #1
 80193c0:	fba5 0202 	umull	r0, r2, r5, r2
 80193c4:	297e      	cmp	r1, #126	; 0x7e
 80193c6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80193ca:	fb0c 3312 	mls	r3, ip, r2, r3
 80193ce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80193d2:	d030      	beq.n	8019436 <uxr_read_framed_msg+0x51e>
 80193d4:	f081 0120 	eor.w	r1, r1, #32
 80193d8:	e65d      	b.n	8019096 <uxr_read_framed_msg+0x17e>
 80193da:	1c59      	adds	r1, r3, #1
 80193dc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80193e0:	084a      	lsrs	r2, r1, #1
 80193e2:	fba5 e202 	umull	lr, r2, r5, r2
 80193e6:	0892      	lsrs	r2, r2, #2
 80193e8:	fb0c 1212 	mls	r2, ip, r2, r1
 80193ec:	b2d1      	uxtb	r1, r2
 80193ee:	4288      	cmp	r0, r1
 80193f0:	f43f af12 	beq.w	8019218 <uxr_read_framed_msg+0x300>
 80193f4:	3302      	adds	r3, #2
 80193f6:	4422      	add	r2, r4
 80193f8:	7891      	ldrb	r1, [r2, #2]
 80193fa:	085a      	lsrs	r2, r3, #1
 80193fc:	fba5 0202 	umull	r0, r2, r5, r2
 8019400:	297e      	cmp	r1, #126	; 0x7e
 8019402:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019406:	fb0c 3312 	mls	r3, ip, r2, r3
 801940a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801940e:	d002      	beq.n	8019416 <uxr_read_framed_msg+0x4fe>
 8019410:	f081 0120 	eor.w	r1, r1, #32
 8019414:	e66a      	b.n	80190ec <uxr_read_framed_msg+0x1d4>
 8019416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019418:	9300      	str	r3, [sp, #0]
 801941a:	2302      	movs	r3, #2
 801941c:	9301      	str	r3, [sp, #4]
 801941e:	464a      	mov	r2, r9
 8019420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019422:	4641      	mov	r1, r8
 8019424:	4620      	mov	r0, r4
 8019426:	f7ff fce3 	bl	8018df0 <uxr_framing_read_transport>
 801942a:	2800      	cmp	r0, #0
 801942c:	f47f aef2 	bne.w	8019214 <uxr_read_framed_msg+0x2fc>
 8019430:	2301      	movs	r3, #1
 8019432:	7023      	strb	r3, [r4, #0]
 8019434:	e581      	b.n	8018f3a <uxr_read_framed_msg+0x22>
 8019436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019438:	9300      	str	r3, [sp, #0]
 801943a:	2301      	movs	r3, #1
 801943c:	e7ee      	b.n	801941c <uxr_read_framed_msg+0x504>
 801943e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019440:	9300      	str	r3, [sp, #0]
 8019442:	2303      	movs	r3, #3
 8019444:	e7ea      	b.n	801941c <uxr_read_framed_msg+0x504>
 8019446:	bf00      	nop

08019448 <uxr_stream_id>:
 8019448:	2901      	cmp	r1, #1
 801944a:	4684      	mov	ip, r0
 801944c:	b500      	push	{lr}
 801944e:	b083      	sub	sp, #12
 8019450:	d01f      	beq.n	8019492 <uxr_stream_id+0x4a>
 8019452:	2902      	cmp	r1, #2
 8019454:	f04f 0e00 	mov.w	lr, #0
 8019458:	d020      	beq.n	801949c <uxr_stream_id+0x54>
 801945a:	2300      	movs	r3, #0
 801945c:	2000      	movs	r0, #0
 801945e:	f36e 0307 	bfi	r3, lr, #0, #8
 8019462:	f36c 230f 	bfi	r3, ip, #8, #8
 8019466:	f361 4317 	bfi	r3, r1, #16, #8
 801946a:	f362 631f 	bfi	r3, r2, #24, #8
 801946e:	fa5f fc83 	uxtb.w	ip, r3
 8019472:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019476:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801947a:	0e1b      	lsrs	r3, r3, #24
 801947c:	f36c 0007 	bfi	r0, ip, #0, #8
 8019480:	f361 200f 	bfi	r0, r1, #8, #8
 8019484:	f362 4017 	bfi	r0, r2, #16, #8
 8019488:	f363 601f 	bfi	r0, r3, #24, #8
 801948c:	b003      	add	sp, #12
 801948e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019492:	f100 0e01 	add.w	lr, r0, #1
 8019496:	fa5f fe8e 	uxtb.w	lr, lr
 801949a:	e7de      	b.n	801945a <uxr_stream_id+0x12>
 801949c:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 80194a0:	e7db      	b.n	801945a <uxr_stream_id+0x12>
 80194a2:	bf00      	nop

080194a4 <uxr_stream_id_from_raw>:
 80194a4:	b082      	sub	sp, #8
 80194a6:	b130      	cbz	r0, 80194b6 <uxr_stream_id_from_raw+0x12>
 80194a8:	0603      	lsls	r3, r0, #24
 80194aa:	d421      	bmi.n	80194f0 <uxr_stream_id_from_raw+0x4c>
 80194ac:	1e42      	subs	r2, r0, #1
 80194ae:	f04f 0c01 	mov.w	ip, #1
 80194b2:	b2d2      	uxtb	r2, r2
 80194b4:	e001      	b.n	80194ba <uxr_stream_id_from_raw+0x16>
 80194b6:	4684      	mov	ip, r0
 80194b8:	4602      	mov	r2, r0
 80194ba:	2300      	movs	r3, #0
 80194bc:	f360 0307 	bfi	r3, r0, #0, #8
 80194c0:	2000      	movs	r0, #0
 80194c2:	f362 230f 	bfi	r3, r2, #8, #8
 80194c6:	f36c 4317 	bfi	r3, ip, #16, #8
 80194ca:	f361 631f 	bfi	r3, r1, #24, #8
 80194ce:	fa5f fc83 	uxtb.w	ip, r3
 80194d2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80194d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80194da:	0e1b      	lsrs	r3, r3, #24
 80194dc:	f36c 0007 	bfi	r0, ip, #0, #8
 80194e0:	f361 200f 	bfi	r0, r1, #8, #8
 80194e4:	f362 4017 	bfi	r0, r2, #16, #8
 80194e8:	f363 601f 	bfi	r0, r3, #24, #8
 80194ec:	b002      	add	sp, #8
 80194ee:	4770      	bx	lr
 80194f0:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80194f4:	f04f 0c02 	mov.w	ip, #2
 80194f8:	e7df      	b.n	80194ba <uxr_stream_id_from_raw+0x16>
 80194fa:	bf00      	nop

080194fc <uxr_init_stream_storage>:
 80194fc:	2300      	movs	r3, #0
 80194fe:	7403      	strb	r3, [r0, #16]
 8019500:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019504:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019508:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801950c:	4770      	bx	lr
 801950e:	bf00      	nop

08019510 <uxr_reset_stream_storage>:
 8019510:	b570      	push	{r4, r5, r6, lr}
 8019512:	7c03      	ldrb	r3, [r0, #16]
 8019514:	4604      	mov	r4, r0
 8019516:	b14b      	cbz	r3, 801952c <uxr_reset_stream_storage+0x1c>
 8019518:	4606      	mov	r6, r0
 801951a:	2500      	movs	r5, #0
 801951c:	4630      	mov	r0, r6
 801951e:	3501      	adds	r5, #1
 8019520:	f006 f880 	bl	801f624 <uxr_reset_output_best_effort_stream>
 8019524:	7c23      	ldrb	r3, [r4, #16]
 8019526:	3610      	adds	r6, #16
 8019528:	42ab      	cmp	r3, r5
 801952a:	d8f7      	bhi.n	801951c <uxr_reset_stream_storage+0xc>
 801952c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019530:	b15b      	cbz	r3, 801954a <uxr_reset_stream_storage+0x3a>
 8019532:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019536:	2500      	movs	r5, #0
 8019538:	4630      	mov	r0, r6
 801953a:	3501      	adds	r5, #1
 801953c:	f005 fe78 	bl	801f230 <uxr_reset_input_best_effort_stream>
 8019540:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019544:	3602      	adds	r6, #2
 8019546:	42ab      	cmp	r3, r5
 8019548:	d8f6      	bhi.n	8019538 <uxr_reset_stream_storage+0x28>
 801954a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801954e:	b15b      	cbz	r3, 8019568 <uxr_reset_stream_storage+0x58>
 8019550:	f104 0618 	add.w	r6, r4, #24
 8019554:	2500      	movs	r5, #0
 8019556:	4630      	mov	r0, r6
 8019558:	3501      	adds	r5, #1
 801955a:	f006 f911 	bl	801f780 <uxr_reset_output_reliable_stream>
 801955e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019562:	3628      	adds	r6, #40	; 0x28
 8019564:	42ab      	cmp	r3, r5
 8019566:	d8f6      	bhi.n	8019556 <uxr_reset_stream_storage+0x46>
 8019568:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801956c:	b15b      	cbz	r3, 8019586 <uxr_reset_stream_storage+0x76>
 801956e:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019572:	2500      	movs	r5, #0
 8019574:	4630      	mov	r0, r6
 8019576:	3501      	adds	r5, #1
 8019578:	f005 fec6 	bl	801f308 <uxr_reset_input_reliable_stream>
 801957c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019580:	3618      	adds	r6, #24
 8019582:	42ab      	cmp	r3, r5
 8019584:	d8f6      	bhi.n	8019574 <uxr_reset_stream_storage+0x64>
 8019586:	bd70      	pop	{r4, r5, r6, pc}

08019588 <uxr_add_output_best_effort_buffer>:
 8019588:	b510      	push	{r4, lr}
 801958a:	7c04      	ldrb	r4, [r0, #16]
 801958c:	b082      	sub	sp, #8
 801958e:	f104 0c01 	add.w	ip, r4, #1
 8019592:	f880 c010 	strb.w	ip, [r0, #16]
 8019596:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801959a:	f006 f839 	bl	801f610 <uxr_init_output_best_effort_stream>
 801959e:	2201      	movs	r2, #1
 80195a0:	4620      	mov	r0, r4
 80195a2:	4611      	mov	r1, r2
 80195a4:	b002      	add	sp, #8
 80195a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195aa:	f7ff bf4d 	b.w	8019448 <uxr_stream_id>
 80195ae:	bf00      	nop

080195b0 <uxr_add_output_reliable_buffer>:
 80195b0:	b510      	push	{r4, lr}
 80195b2:	b084      	sub	sp, #16
 80195b4:	4684      	mov	ip, r0
 80195b6:	2028      	movs	r0, #40	; 0x28
 80195b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80195bc:	9400      	str	r4, [sp, #0]
 80195be:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80195c2:	fb00 c004 	mla	r0, r0, r4, ip
 80195c6:	f104 0e01 	add.w	lr, r4, #1
 80195ca:	3018      	adds	r0, #24
 80195cc:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80195d0:	f006 f89e 	bl	801f710 <uxr_init_output_reliable_stream>
 80195d4:	2201      	movs	r2, #1
 80195d6:	2102      	movs	r1, #2
 80195d8:	4620      	mov	r0, r4
 80195da:	b004      	add	sp, #16
 80195dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195e0:	f7ff bf32 	b.w	8019448 <uxr_stream_id>

080195e4 <uxr_add_input_best_effort_buffer>:
 80195e4:	b510      	push	{r4, lr}
 80195e6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80195ea:	b082      	sub	sp, #8
 80195ec:	1c62      	adds	r2, r4, #1
 80195ee:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80195f2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80195f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80195fa:	f005 fe15 	bl	801f228 <uxr_init_input_best_effort_stream>
 80195fe:	2200      	movs	r2, #0
 8019600:	2101      	movs	r1, #1
 8019602:	4620      	mov	r0, r4
 8019604:	b002      	add	sp, #8
 8019606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801960a:	f7ff bf1d 	b.w	8019448 <uxr_stream_id>
 801960e:	bf00      	nop

08019610 <uxr_add_input_reliable_buffer>:
 8019610:	b510      	push	{r4, lr}
 8019612:	b084      	sub	sp, #16
 8019614:	4684      	mov	ip, r0
 8019616:	2018      	movs	r0, #24
 8019618:	9c06      	ldr	r4, [sp, #24]
 801961a:	9400      	str	r4, [sp, #0]
 801961c:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019620:	fb00 c004 	mla	r0, r0, r4, ip
 8019624:	f104 0e01 	add.w	lr, r4, #1
 8019628:	3048      	adds	r0, #72	; 0x48
 801962a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801962e:	f005 fe45 	bl	801f2bc <uxr_init_input_reliable_stream>
 8019632:	2200      	movs	r2, #0
 8019634:	2102      	movs	r1, #2
 8019636:	4620      	mov	r0, r4
 8019638:	b004      	add	sp, #16
 801963a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801963e:	f7ff bf03 	b.w	8019448 <uxr_stream_id>
 8019642:	bf00      	nop

08019644 <uxr_get_output_best_effort_stream>:
 8019644:	7c03      	ldrb	r3, [r0, #16]
 8019646:	428b      	cmp	r3, r1
 8019648:	bf8c      	ite	hi
 801964a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801964e:	2000      	movls	r0, #0
 8019650:	4770      	bx	lr
 8019652:	bf00      	nop

08019654 <uxr_get_output_reliable_stream>:
 8019654:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019658:	428b      	cmp	r3, r1
 801965a:	d904      	bls.n	8019666 <uxr_get_output_reliable_stream+0x12>
 801965c:	2328      	movs	r3, #40	; 0x28
 801965e:	fb03 0001 	mla	r0, r3, r1, r0
 8019662:	3018      	adds	r0, #24
 8019664:	4770      	bx	lr
 8019666:	2000      	movs	r0, #0
 8019668:	4770      	bx	lr
 801966a:	bf00      	nop

0801966c <uxr_get_input_best_effort_stream>:
 801966c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019670:	428b      	cmp	r3, r1
 8019672:	d903      	bls.n	801967c <uxr_get_input_best_effort_stream+0x10>
 8019674:	3121      	adds	r1, #33	; 0x21
 8019676:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801967a:	4770      	bx	lr
 801967c:	2000      	movs	r0, #0
 801967e:	4770      	bx	lr

08019680 <uxr_get_input_reliable_stream>:
 8019680:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019684:	428b      	cmp	r3, r1
 8019686:	d904      	bls.n	8019692 <uxr_get_input_reliable_stream+0x12>
 8019688:	2318      	movs	r3, #24
 801968a:	fb03 0001 	mla	r0, r3, r1, r0
 801968e:	3048      	adds	r0, #72	; 0x48
 8019690:	4770      	bx	lr
 8019692:	2000      	movs	r0, #0
 8019694:	4770      	bx	lr
 8019696:	bf00      	nop

08019698 <uxr_output_streams_confirmed>:
 8019698:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801969c:	b183      	cbz	r3, 80196c0 <uxr_output_streams_confirmed+0x28>
 801969e:	b570      	push	{r4, r5, r6, lr}
 80196a0:	4606      	mov	r6, r0
 80196a2:	f100 0518 	add.w	r5, r0, #24
 80196a6:	2400      	movs	r4, #0
 80196a8:	e000      	b.n	80196ac <uxr_output_streams_confirmed+0x14>
 80196aa:	b140      	cbz	r0, 80196be <uxr_output_streams_confirmed+0x26>
 80196ac:	4628      	mov	r0, r5
 80196ae:	3401      	adds	r4, #1
 80196b0:	f006 fada 	bl	801fc68 <uxr_is_output_up_to_date>
 80196b4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80196b8:	3528      	adds	r5, #40	; 0x28
 80196ba:	42a3      	cmp	r3, r4
 80196bc:	d8f5      	bhi.n	80196aa <uxr_output_streams_confirmed+0x12>
 80196be:	bd70      	pop	{r4, r5, r6, pc}
 80196c0:	2001      	movs	r0, #1
 80196c2:	4770      	bx	lr

080196c4 <uxr_buffer_submessage_header>:
 80196c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c6:	460e      	mov	r6, r1
 80196c8:	2104      	movs	r1, #4
 80196ca:	4604      	mov	r4, r0
 80196cc:	4615      	mov	r5, r2
 80196ce:	461f      	mov	r7, r3
 80196d0:	f7fa fd82 	bl	80141d8 <ucdr_align_to>
 80196d4:	2301      	movs	r3, #1
 80196d6:	4631      	mov	r1, r6
 80196d8:	4620      	mov	r0, r4
 80196da:	ea47 0203 	orr.w	r2, r7, r3
 80196de:	7523      	strb	r3, [r4, #20]
 80196e0:	462b      	mov	r3, r5
 80196e2:	f000 fa29 	bl	8019b38 <uxr_serialize_submessage_header>
 80196e6:	4620      	mov	r0, r4
 80196e8:	f7fa fd8c 	bl	8014204 <ucdr_buffer_remaining>
 80196ec:	42a8      	cmp	r0, r5
 80196ee:	bf34      	ite	cc
 80196f0:	2000      	movcc	r0, #0
 80196f2:	2001      	movcs	r0, #1
 80196f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196f6:	bf00      	nop

080196f8 <uxr_read_submessage_header>:
 80196f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196fc:	4604      	mov	r4, r0
 80196fe:	460d      	mov	r5, r1
 8019700:	2104      	movs	r1, #4
 8019702:	4616      	mov	r6, r2
 8019704:	4698      	mov	r8, r3
 8019706:	f7fa fd67 	bl	80141d8 <ucdr_align_to>
 801970a:	4620      	mov	r0, r4
 801970c:	f7fa fd7a 	bl	8014204 <ucdr_buffer_remaining>
 8019710:	2803      	cmp	r0, #3
 8019712:	bf8c      	ite	hi
 8019714:	2701      	movhi	r7, #1
 8019716:	2700      	movls	r7, #0
 8019718:	d802      	bhi.n	8019720 <uxr_read_submessage_header+0x28>
 801971a:	4638      	mov	r0, r7
 801971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019720:	4633      	mov	r3, r6
 8019722:	4642      	mov	r2, r8
 8019724:	4620      	mov	r0, r4
 8019726:	4629      	mov	r1, r5
 8019728:	f000 fa1a 	bl	8019b60 <uxr_deserialize_submessage_header>
 801972c:	f898 3000 	ldrb.w	r3, [r8]
 8019730:	4638      	mov	r0, r7
 8019732:	f003 0201 	and.w	r2, r3, #1
 8019736:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801973a:	f888 3000 	strb.w	r3, [r8]
 801973e:	7522      	strb	r2, [r4, #20]
 8019740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019744 <uxr_submessage_padding>:
 8019744:	f010 0003 	ands.w	r0, r0, #3
 8019748:	bf18      	it	ne
 801974a:	f1c0 0004 	rsbne	r0, r0, #4
 801974e:	4770      	bx	lr

08019750 <uxr_millis>:
 8019750:	b510      	push	{r4, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	2001      	movs	r0, #1
 8019756:	4669      	mov	r1, sp
 8019758:	f7ea fdce 	bl	80042f8 <clock_gettime>
 801975c:	4908      	ldr	r1, [pc, #32]	; (8019780 <uxr_millis+0x30>)
 801975e:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019762:	fba0 0301 	umull	r0, r3, r0, r1
 8019766:	1900      	adds	r0, r0, r4
 8019768:	fb01 3102 	mla	r1, r1, r2, r3
 801976c:	4a05      	ldr	r2, [pc, #20]	; (8019784 <uxr_millis+0x34>)
 801976e:	f04f 0300 	mov.w	r3, #0
 8019772:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019776:	f7e6 fed9 	bl	800052c <__aeabi_ldivmod>
 801977a:	b004      	add	sp, #16
 801977c:	bd10      	pop	{r4, pc}
 801977e:	bf00      	nop
 8019780:	3b9aca00 	.word	0x3b9aca00
 8019784:	000f4240 	.word	0x000f4240

08019788 <uxr_nanos>:
 8019788:	b510      	push	{r4, lr}
 801978a:	b084      	sub	sp, #16
 801978c:	2001      	movs	r0, #1
 801978e:	4669      	mov	r1, sp
 8019790:	f7ea fdb2 	bl	80042f8 <clock_gettime>
 8019794:	4a06      	ldr	r2, [pc, #24]	; (80197b0 <uxr_nanos+0x28>)
 8019796:	9800      	ldr	r0, [sp, #0]
 8019798:	9902      	ldr	r1, [sp, #8]
 801979a:	fba0 0302 	umull	r0, r3, r0, r2
 801979e:	9c01      	ldr	r4, [sp, #4]
 80197a0:	1840      	adds	r0, r0, r1
 80197a2:	fb02 3304 	mla	r3, r2, r4, r3
 80197a6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80197aa:	b004      	add	sp, #16
 80197ac:	bd10      	pop	{r4, pc}
 80197ae:	bf00      	nop
 80197b0:	3b9aca00 	.word	0x3b9aca00

080197b4 <on_full_output_buffer_fragmented>:
 80197b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197b8:	460c      	mov	r4, r1
 80197ba:	b08a      	sub	sp, #40	; 0x28
 80197bc:	4606      	mov	r6, r0
 80197be:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80197c2:	f104 0008 	add.w	r0, r4, #8
 80197c6:	f7ff ff45 	bl	8019654 <uxr_get_output_reliable_stream>
 80197ca:	4605      	mov	r5, r0
 80197cc:	f006 fa56 	bl	801fc7c <get_available_free_slots>
 80197d0:	b968      	cbnz	r0, 80197ee <on_full_output_buffer_fragmented+0x3a>
 80197d2:	4620      	mov	r0, r4
 80197d4:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80197d8:	4798      	blx	r3
 80197da:	b918      	cbnz	r0, 80197e4 <on_full_output_buffer_fragmented+0x30>
 80197dc:	2001      	movs	r0, #1
 80197de:	b00a      	add	sp, #40	; 0x28
 80197e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e4:	4628      	mov	r0, r5
 80197e6:	f006 fa49 	bl	801fc7c <get_available_free_slots>
 80197ea:	2800      	cmp	r0, #0
 80197ec:	d0f6      	beq.n	80197dc <on_full_output_buffer_fragmented+0x28>
 80197ee:	8929      	ldrh	r1, [r5, #8]
 80197f0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80197f4:	89eb      	ldrh	r3, [r5, #14]
 80197f6:	7b28      	ldrb	r0, [r5, #12]
 80197f8:	686f      	ldr	r7, [r5, #4]
 80197fa:	1a12      	subs	r2, r2, r0
 80197fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8019800:	fbb7 f7f1 	udiv	r7, r7, r1
 8019804:	fb01 3110 	mls	r1, r1, r0, r3
 8019808:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801980c:	b289      	uxth	r1, r1
 801980e:	fb07 f101 	mul.w	r1, r7, r1
 8019812:	3f04      	subs	r7, #4
 8019814:	443a      	add	r2, r7
 8019816:	3104      	adds	r1, #4
 8019818:	fa1f f882 	uxth.w	r8, r2
 801981c:	463a      	mov	r2, r7
 801981e:	eba3 0308 	sub.w	r3, r3, r8
 8019822:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8019826:	682b      	ldr	r3, [r5, #0]
 8019828:	4419      	add	r1, r3
 801982a:	2300      	movs	r3, #0
 801982c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019830:	9000      	str	r0, [sp, #0]
 8019832:	a802      	add	r0, sp, #8
 8019834:	f7fa fca2 	bl	801417c <ucdr_init_buffer_origin_offset>
 8019838:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801983c:	f102 0308 	add.w	r3, r2, #8
 8019840:	42bb      	cmp	r3, r7
 8019842:	d927      	bls.n	8019894 <on_full_output_buffer_fragmented+0xe0>
 8019844:	4642      	mov	r2, r8
 8019846:	2300      	movs	r3, #0
 8019848:	210d      	movs	r1, #13
 801984a:	a802      	add	r0, sp, #8
 801984c:	f7ff ff3a 	bl	80196c4 <uxr_buffer_submessage_header>
 8019850:	8929      	ldrh	r1, [r5, #8]
 8019852:	89eb      	ldrh	r3, [r5, #14]
 8019854:	686a      	ldr	r2, [r5, #4]
 8019856:	fbb3 f0f1 	udiv	r0, r3, r1
 801985a:	fbb2 f2f1 	udiv	r2, r2, r1
 801985e:	fb01 3310 	mls	r3, r1, r0, r3
 8019862:	b29b      	uxth	r3, r3
 8019864:	fb02 f303 	mul.w	r3, r2, r3
 8019868:	682a      	ldr	r2, [r5, #0]
 801986a:	50d7      	str	r7, [r2, r3]
 801986c:	2101      	movs	r1, #1
 801986e:	89e8      	ldrh	r0, [r5, #14]
 8019870:	f006 fa26 	bl	801fcc0 <uxr_seq_num_add>
 8019874:	9904      	ldr	r1, [sp, #16]
 8019876:	9a03      	ldr	r2, [sp, #12]
 8019878:	81e8      	strh	r0, [r5, #14]
 801987a:	4630      	mov	r0, r6
 801987c:	1a52      	subs	r2, r2, r1
 801987e:	f7fa fc8f 	bl	80141a0 <ucdr_init_buffer>
 8019882:	4630      	mov	r0, r6
 8019884:	4622      	mov	r2, r4
 8019886:	490f      	ldr	r1, [pc, #60]	; (80198c4 <on_full_output_buffer_fragmented+0x110>)
 8019888:	f7fa fc5e 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 801988c:	2000      	movs	r0, #0
 801988e:	b00a      	add	sp, #40	; 0x28
 8019890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019894:	b292      	uxth	r2, r2
 8019896:	2302      	movs	r3, #2
 8019898:	210d      	movs	r1, #13
 801989a:	a802      	add	r0, sp, #8
 801989c:	f7ff ff12 	bl	80196c4 <uxr_buffer_submessage_header>
 80198a0:	8928      	ldrh	r0, [r5, #8]
 80198a2:	89eb      	ldrh	r3, [r5, #14]
 80198a4:	6869      	ldr	r1, [r5, #4]
 80198a6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80198aa:	fbb3 f7f0 	udiv	r7, r3, r0
 80198ae:	fbb1 f1f0 	udiv	r1, r1, r0
 80198b2:	fb00 3317 	mls	r3, r0, r7, r3
 80198b6:	3208      	adds	r2, #8
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	fb01 f303 	mul.w	r3, r1, r3
 80198be:	6829      	ldr	r1, [r5, #0]
 80198c0:	50ca      	str	r2, [r1, r3]
 80198c2:	e7d3      	b.n	801986c <on_full_output_buffer_fragmented+0xb8>
 80198c4:	080197b5 	.word	0x080197b5

080198c8 <uxr_prepare_output_stream>:
 80198c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198ca:	b087      	sub	sp, #28
 80198cc:	2707      	movs	r7, #7
 80198ce:	2500      	movs	r5, #0
 80198d0:	461c      	mov	r4, r3
 80198d2:	4606      	mov	r6, r0
 80198d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80198d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198da:	e9cd 7500 	strd	r7, r5, [sp]
 80198de:	3204      	adds	r2, #4
 80198e0:	f7fe ffc8 	bl	8018874 <uxr_prepare_stream_to_write_submessage>
 80198e4:	f080 0201 	eor.w	r2, r0, #1
 80198e8:	b2d2      	uxtb	r2, r2
 80198ea:	75a2      	strb	r2, [r4, #22]
 80198ec:	b112      	cbz	r2, 80198f4 <uxr_prepare_output_stream+0x2c>
 80198ee:	4628      	mov	r0, r5
 80198f0:	b007      	add	sp, #28
 80198f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198f4:	aa05      	add	r2, sp, #20
 80198f6:	9902      	ldr	r1, [sp, #8]
 80198f8:	4630      	mov	r0, r6
 80198fa:	f7ff f8f7 	bl	8018aec <uxr_init_base_object_request>
 80198fe:	a905      	add	r1, sp, #20
 8019900:	4605      	mov	r5, r0
 8019902:	4620      	mov	r0, r4
 8019904:	f001 f89e 	bl	801aa44 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019908:	69a6      	ldr	r6, [r4, #24]
 801990a:	69e7      	ldr	r7, [r4, #28]
 801990c:	4620      	mov	r0, r4
 801990e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019912:	1a52      	subs	r2, r2, r1
 8019914:	f7fa fc44 	bl	80141a0 <ucdr_init_buffer>
 8019918:	4620      	mov	r0, r4
 801991a:	463a      	mov	r2, r7
 801991c:	4631      	mov	r1, r6
 801991e:	f7fa fc13 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 8019922:	4628      	mov	r0, r5
 8019924:	b007      	add	sp, #28
 8019926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019928 <uxr_prepare_output_stream_fragmented>:
 8019928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801992c:	b091      	sub	sp, #68	; 0x44
 801992e:	4605      	mov	r5, r0
 8019930:	3008      	adds	r0, #8
 8019932:	461e      	mov	r6, r3
 8019934:	9105      	str	r1, [sp, #20]
 8019936:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801993a:	9204      	str	r2, [sp, #16]
 801993c:	f7ff fe8a 	bl	8019654 <uxr_get_output_reliable_stream>
 8019940:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019944:	2b01      	cmp	r3, #1
 8019946:	f000 8093 	beq.w	8019a70 <uxr_prepare_output_stream_fragmented+0x148>
 801994a:	4604      	mov	r4, r0
 801994c:	2800      	cmp	r0, #0
 801994e:	f000 808f 	beq.w	8019a70 <uxr_prepare_output_stream_fragmented+0x148>
 8019952:	f006 f993 	bl	801fc7c <get_available_free_slots>
 8019956:	2800      	cmp	r0, #0
 8019958:	f000 8085 	beq.w	8019a66 <uxr_prepare_output_stream_fragmented+0x13e>
 801995c:	8923      	ldrh	r3, [r4, #8]
 801995e:	89e7      	ldrh	r7, [r4, #14]
 8019960:	6862      	ldr	r2, [r4, #4]
 8019962:	fbb7 f9f3 	udiv	r9, r7, r3
 8019966:	fbb2 f2f3 	udiv	r2, r2, r3
 801996a:	fb03 7919 	mls	r9, r3, r9, r7
 801996e:	6823      	ldr	r3, [r4, #0]
 8019970:	f1a2 0b04 	sub.w	fp, r2, #4
 8019974:	9203      	str	r2, [sp, #12]
 8019976:	fa1f f989 	uxth.w	r9, r9
 801997a:	fb02 f909 	mul.w	r9, r2, r9
 801997e:	f109 0904 	add.w	r9, r9, #4
 8019982:	4499      	add	r9, r3
 8019984:	7b23      	ldrb	r3, [r4, #12]
 8019986:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801998a:	4543      	cmp	r3, r8
 801998c:	d37c      	bcc.n	8019a88 <uxr_prepare_output_stream_fragmented+0x160>
 801998e:	f1ab 0a04 	sub.w	sl, fp, #4
 8019992:	465a      	mov	r2, fp
 8019994:	4649      	mov	r1, r9
 8019996:	a808      	add	r0, sp, #32
 8019998:	ebaa 0a03 	sub.w	sl, sl, r3
 801999c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801999e:	f8cd 8000 	str.w	r8, [sp]
 80199a2:	3308      	adds	r3, #8
 80199a4:	fa1f fa8a 	uxth.w	sl, sl
 80199a8:	9302      	str	r3, [sp, #8]
 80199aa:	2300      	movs	r3, #0
 80199ac:	f7fa fbe6 	bl	801417c <ucdr_init_buffer_origin_offset>
 80199b0:	9b02      	ldr	r3, [sp, #8]
 80199b2:	4652      	mov	r2, sl
 80199b4:	210d      	movs	r1, #13
 80199b6:	455b      	cmp	r3, fp
 80199b8:	bf34      	ite	cc
 80199ba:	2302      	movcc	r3, #2
 80199bc:	2300      	movcs	r3, #0
 80199be:	a808      	add	r0, sp, #32
 80199c0:	f7ff fe80 	bl	80196c4 <uxr_buffer_submessage_header>
 80199c4:	8921      	ldrh	r1, [r4, #8]
 80199c6:	6863      	ldr	r3, [r4, #4]
 80199c8:	4638      	mov	r0, r7
 80199ca:	fbb7 f2f1 	udiv	r2, r7, r1
 80199ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80199d2:	fb01 7212 	mls	r2, r1, r2, r7
 80199d6:	2101      	movs	r1, #1
 80199d8:	b292      	uxth	r2, r2
 80199da:	fb02 f303 	mul.w	r3, r2, r3
 80199de:	6822      	ldr	r2, [r4, #0]
 80199e0:	f842 b003 	str.w	fp, [r2, r3]
 80199e4:	f006 f96c 	bl	801fcc0 <uxr_seq_num_add>
 80199e8:	9b03      	ldr	r3, [sp, #12]
 80199ea:	f108 0104 	add.w	r1, r8, #4
 80199ee:	4607      	mov	r7, r0
 80199f0:	f1a3 0208 	sub.w	r2, r3, #8
 80199f4:	4630      	mov	r0, r6
 80199f6:	4449      	add	r1, r9
 80199f8:	eba2 0208 	sub.w	r2, r2, r8
 80199fc:	f7fa fbd0 	bl	80141a0 <ucdr_init_buffer>
 8019a00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019a02:	2107      	movs	r1, #7
 8019a04:	81e7      	strh	r7, [r4, #14]
 8019a06:	1d1a      	adds	r2, r3, #4
 8019a08:	2300      	movs	r3, #0
 8019a0a:	4630      	mov	r0, r6
 8019a0c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8019a10:	bf28      	it	cs
 8019a12:	461a      	movcs	r2, r3
 8019a14:	b292      	uxth	r2, r2
 8019a16:	f7ff fe55 	bl	80196c4 <uxr_buffer_submessage_header>
 8019a1a:	aa07      	add	r2, sp, #28
 8019a1c:	9904      	ldr	r1, [sp, #16]
 8019a1e:	4628      	mov	r0, r5
 8019a20:	f7ff f864 	bl	8018aec <uxr_init_base_object_request>
 8019a24:	4604      	mov	r4, r0
 8019a26:	b320      	cbz	r0, 8019a72 <uxr_prepare_output_stream_fragmented+0x14a>
 8019a28:	a907      	add	r1, sp, #28
 8019a2a:	4630      	mov	r0, r6
 8019a2c:	f001 f80a 	bl	801aa44 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019a30:	4630      	mov	r0, r6
 8019a32:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8019a36:	1a52      	subs	r2, r2, r1
 8019a38:	f7fa fbb2 	bl	80141a0 <ucdr_init_buffer>
 8019a3c:	9b05      	ldr	r3, [sp, #20]
 8019a3e:	9a02      	ldr	r2, [sp, #8]
 8019a40:	4630      	mov	r0, r6
 8019a42:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8019a46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019a48:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8019a4c:	462a      	mov	r2, r5
 8019a4e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8019a52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019a54:	4918      	ldr	r1, [pc, #96]	; (8019ab8 <uxr_prepare_output_stream_fragmented+0x190>)
 8019a56:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8019a5a:	f7fa fb75 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 8019a5e:	4620      	mov	r0, r4
 8019a60:	b011      	add	sp, #68	; 0x44
 8019a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019a68:	4628      	mov	r0, r5
 8019a6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019a6c:	4798      	blx	r3
 8019a6e:	b920      	cbnz	r0, 8019a7a <uxr_prepare_output_stream_fragmented+0x152>
 8019a70:	2400      	movs	r4, #0
 8019a72:	4620      	mov	r0, r4
 8019a74:	b011      	add	sp, #68	; 0x44
 8019a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	f006 f8fe 	bl	801fc7c <get_available_free_slots>
 8019a80:	2800      	cmp	r0, #0
 8019a82:	f47f af6b 	bne.w	801995c <uxr_prepare_output_stream_fragmented+0x34>
 8019a86:	e7f3      	b.n	8019a70 <uxr_prepare_output_stream_fragmented+0x148>
 8019a88:	4638      	mov	r0, r7
 8019a8a:	2101      	movs	r1, #1
 8019a8c:	f006 f918 	bl	801fcc0 <uxr_seq_num_add>
 8019a90:	8922      	ldrh	r2, [r4, #8]
 8019a92:	6863      	ldr	r3, [r4, #4]
 8019a94:	4607      	mov	r7, r0
 8019a96:	fbb3 f9f2 	udiv	r9, r3, r2
 8019a9a:	fbb0 f3f2 	udiv	r3, r0, r2
 8019a9e:	fb02 0313 	mls	r3, r2, r3, r0
 8019aa2:	b29b      	uxth	r3, r3
 8019aa4:	fb03 f909 	mul.w	r9, r3, r9
 8019aa8:	6823      	ldr	r3, [r4, #0]
 8019aaa:	f109 0904 	add.w	r9, r9, #4
 8019aae:	4499      	add	r9, r3
 8019ab0:	7b23      	ldrb	r3, [r4, #12]
 8019ab2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8019ab6:	e76a      	b.n	801998e <uxr_prepare_output_stream_fragmented+0x66>
 8019ab8:	080197b5 	.word	0x080197b5

08019abc <uxr_serialize_message_header>:
 8019abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019abe:	4616      	mov	r6, r2
 8019ac0:	b083      	sub	sp, #12
 8019ac2:	4604      	mov	r4, r0
 8019ac4:	460d      	mov	r5, r1
 8019ac6:	9301      	str	r3, [sp, #4]
 8019ac8:	9f08      	ldr	r7, [sp, #32]
 8019aca:	f7f9 fa27 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019ace:	4631      	mov	r1, r6
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f7f9 fa23 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019ad6:	9a01      	ldr	r2, [sp, #4]
 8019ad8:	2101      	movs	r1, #1
 8019ada:	4620      	mov	r0, r4
 8019adc:	f7f9 faca 	bl	8013074 <ucdr_serialize_endian_uint16_t>
 8019ae0:	062b      	lsls	r3, r5, #24
 8019ae2:	d501      	bpl.n	8019ae8 <uxr_serialize_message_header+0x2c>
 8019ae4:	b003      	add	sp, #12
 8019ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ae8:	2204      	movs	r2, #4
 8019aea:	4639      	mov	r1, r7
 8019aec:	4620      	mov	r0, r4
 8019aee:	b003      	add	sp, #12
 8019af0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019af4:	f005 ba5c 	b.w	801efb0 <ucdr_serialize_array_uint8_t>

08019af8 <uxr_deserialize_message_header>:
 8019af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019afa:	4616      	mov	r6, r2
 8019afc:	b083      	sub	sp, #12
 8019afe:	4604      	mov	r4, r0
 8019b00:	460d      	mov	r5, r1
 8019b02:	9301      	str	r3, [sp, #4]
 8019b04:	9f08      	ldr	r7, [sp, #32]
 8019b06:	f7f9 fa1f 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8019b0a:	4631      	mov	r1, r6
 8019b0c:	4620      	mov	r0, r4
 8019b0e:	f7f9 fa1b 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8019b12:	9a01      	ldr	r2, [sp, #4]
 8019b14:	2101      	movs	r1, #1
 8019b16:	4620      	mov	r0, r4
 8019b18:	f7f9 fba0 	bl	801325c <ucdr_deserialize_endian_uint16_t>
 8019b1c:	f995 3000 	ldrsb.w	r3, [r5]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	da01      	bge.n	8019b28 <uxr_deserialize_message_header+0x30>
 8019b24:	b003      	add	sp, #12
 8019b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b28:	2204      	movs	r2, #4
 8019b2a:	4639      	mov	r1, r7
 8019b2c:	4620      	mov	r0, r4
 8019b2e:	b003      	add	sp, #12
 8019b30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b34:	f005 baa0 	b.w	801f078 <ucdr_deserialize_array_uint8_t>

08019b38 <uxr_serialize_submessage_header>:
 8019b38:	b530      	push	{r4, r5, lr}
 8019b3a:	4615      	mov	r5, r2
 8019b3c:	b083      	sub	sp, #12
 8019b3e:	4604      	mov	r4, r0
 8019b40:	9301      	str	r3, [sp, #4]
 8019b42:	f7f9 f9eb 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019b46:	4629      	mov	r1, r5
 8019b48:	4620      	mov	r0, r4
 8019b4a:	f7f9 f9e7 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019b4e:	9a01      	ldr	r2, [sp, #4]
 8019b50:	2101      	movs	r1, #1
 8019b52:	4620      	mov	r0, r4
 8019b54:	b003      	add	sp, #12
 8019b56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b5a:	f7f9 ba8b 	b.w	8013074 <ucdr_serialize_endian_uint16_t>
 8019b5e:	bf00      	nop

08019b60 <uxr_deserialize_submessage_header>:
 8019b60:	b530      	push	{r4, r5, lr}
 8019b62:	4615      	mov	r5, r2
 8019b64:	b083      	sub	sp, #12
 8019b66:	4604      	mov	r4, r0
 8019b68:	9301      	str	r3, [sp, #4]
 8019b6a:	f7f9 f9ed 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8019b6e:	4629      	mov	r1, r5
 8019b70:	4620      	mov	r0, r4
 8019b72:	f7f9 f9e9 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8019b76:	9a01      	ldr	r2, [sp, #4]
 8019b78:	2101      	movs	r1, #1
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	b003      	add	sp, #12
 8019b7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b82:	f7f9 bb6b 	b.w	801325c <ucdr_deserialize_endian_uint16_t>
 8019b86:	bf00      	nop

08019b88 <uxr_serialize_CLIENT_Representation>:
 8019b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b8c:	2204      	movs	r2, #4
 8019b8e:	460e      	mov	r6, r1
 8019b90:	4605      	mov	r5, r0
 8019b92:	f005 fa0d 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019b96:	4607      	mov	r7, r0
 8019b98:	2202      	movs	r2, #2
 8019b9a:	1d31      	adds	r1, r6, #4
 8019b9c:	4628      	mov	r0, r5
 8019b9e:	f005 fa07 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019ba2:	4038      	ands	r0, r7
 8019ba4:	2202      	movs	r2, #2
 8019ba6:	1db1      	adds	r1, r6, #6
 8019ba8:	b2c7      	uxtb	r7, r0
 8019baa:	4628      	mov	r0, r5
 8019bac:	f005 fa00 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019bb0:	2204      	movs	r2, #4
 8019bb2:	4007      	ands	r7, r0
 8019bb4:	f106 0108 	add.w	r1, r6, #8
 8019bb8:	4628      	mov	r0, r5
 8019bba:	f005 f9f9 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019bbe:	4007      	ands	r7, r0
 8019bc0:	7b31      	ldrb	r1, [r6, #12]
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	f7f9 f9aa 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019bc8:	7b71      	ldrb	r1, [r6, #13]
 8019bca:	4007      	ands	r7, r0
 8019bcc:	4628      	mov	r0, r5
 8019bce:	f7f9 f977 	bl	8012ec0 <ucdr_serialize_bool>
 8019bd2:	7b73      	ldrb	r3, [r6, #13]
 8019bd4:	ea07 0800 	and.w	r8, r7, r0
 8019bd8:	b93b      	cbnz	r3, 8019bea <uxr_serialize_CLIENT_Representation+0x62>
 8019bda:	8bb1      	ldrh	r1, [r6, #28]
 8019bdc:	4628      	mov	r0, r5
 8019bde:	f7f9 f9c9 	bl	8012f74 <ucdr_serialize_uint16_t>
 8019be2:	ea08 0000 	and.w	r0, r8, r0
 8019be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bea:	6931      	ldr	r1, [r6, #16]
 8019bec:	4628      	mov	r0, r5
 8019bee:	f7f9 fbab 	bl	8013348 <ucdr_serialize_uint32_t>
 8019bf2:	6933      	ldr	r3, [r6, #16]
 8019bf4:	b1e3      	cbz	r3, 8019c30 <uxr_serialize_CLIENT_Representation+0xa8>
 8019bf6:	b1c0      	cbz	r0, 8019c2a <uxr_serialize_CLIENT_Representation+0xa2>
 8019bf8:	4637      	mov	r7, r6
 8019bfa:	f04f 0900 	mov.w	r9, #0
 8019bfe:	e000      	b.n	8019c02 <uxr_serialize_CLIENT_Representation+0x7a>
 8019c00:	b19c      	cbz	r4, 8019c2a <uxr_serialize_CLIENT_Representation+0xa2>
 8019c02:	6979      	ldr	r1, [r7, #20]
 8019c04:	4628      	mov	r0, r5
 8019c06:	f005 faf7 	bl	801f1f8 <ucdr_serialize_string>
 8019c0a:	69b9      	ldr	r1, [r7, #24]
 8019c0c:	4604      	mov	r4, r0
 8019c0e:	4628      	mov	r0, r5
 8019c10:	f005 faf2 	bl	801f1f8 <ucdr_serialize_string>
 8019c14:	f109 0901 	add.w	r9, r9, #1
 8019c18:	6933      	ldr	r3, [r6, #16]
 8019c1a:	4004      	ands	r4, r0
 8019c1c:	3708      	adds	r7, #8
 8019c1e:	4599      	cmp	r9, r3
 8019c20:	b2e4      	uxtb	r4, r4
 8019c22:	d3ed      	bcc.n	8019c00 <uxr_serialize_CLIENT_Representation+0x78>
 8019c24:	ea08 0804 	and.w	r8, r8, r4
 8019c28:	e7d7      	b.n	8019bda <uxr_serialize_CLIENT_Representation+0x52>
 8019c2a:	f04f 0800 	mov.w	r8, #0
 8019c2e:	e7d4      	b.n	8019bda <uxr_serialize_CLIENT_Representation+0x52>
 8019c30:	ea08 0800 	and.w	r8, r8, r0
 8019c34:	e7d1      	b.n	8019bda <uxr_serialize_CLIENT_Representation+0x52>
 8019c36:	bf00      	nop

08019c38 <uxr_deserialize_CLIENT_Representation>:
 8019c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c3c:	2204      	movs	r2, #4
 8019c3e:	460c      	mov	r4, r1
 8019c40:	4605      	mov	r5, r0
 8019c42:	f005 fa19 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 8019c46:	4607      	mov	r7, r0
 8019c48:	2202      	movs	r2, #2
 8019c4a:	1d21      	adds	r1, r4, #4
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	f005 fa13 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 8019c52:	4038      	ands	r0, r7
 8019c54:	2202      	movs	r2, #2
 8019c56:	1da1      	adds	r1, r4, #6
 8019c58:	b2c6      	uxtb	r6, r0
 8019c5a:	4628      	mov	r0, r5
 8019c5c:	f005 fa0c 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 8019c60:	2204      	movs	r2, #4
 8019c62:	4006      	ands	r6, r0
 8019c64:	f104 0108 	add.w	r1, r4, #8
 8019c68:	4628      	mov	r0, r5
 8019c6a:	f005 fa05 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 8019c6e:	4006      	ands	r6, r0
 8019c70:	f104 010c 	add.w	r1, r4, #12
 8019c74:	4628      	mov	r0, r5
 8019c76:	f7f9 f967 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8019c7a:	f104 010d 	add.w	r1, r4, #13
 8019c7e:	ea06 0700 	and.w	r7, r6, r0
 8019c82:	4628      	mov	r0, r5
 8019c84:	f7f9 f932 	bl	8012eec <ucdr_deserialize_bool>
 8019c88:	7b63      	ldrb	r3, [r4, #13]
 8019c8a:	4007      	ands	r7, r0
 8019c8c:	b93b      	cbnz	r3, 8019c9e <uxr_deserialize_CLIENT_Representation+0x66>
 8019c8e:	f104 011c 	add.w	r1, r4, #28
 8019c92:	4628      	mov	r0, r5
 8019c94:	f7f9 fa6e 	bl	8013174 <ucdr_deserialize_uint16_t>
 8019c98:	4038      	ands	r0, r7
 8019c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c9e:	f104 0110 	add.w	r1, r4, #16
 8019ca2:	4628      	mov	r0, r5
 8019ca4:	f7f9 fc80 	bl	80135a8 <ucdr_deserialize_uint32_t>
 8019ca8:	6923      	ldr	r3, [r4, #16]
 8019caa:	2b01      	cmp	r3, #1
 8019cac:	d903      	bls.n	8019cb6 <uxr_deserialize_CLIENT_Representation+0x7e>
 8019cae:	2301      	movs	r3, #1
 8019cb0:	2700      	movs	r7, #0
 8019cb2:	75ab      	strb	r3, [r5, #22]
 8019cb4:	e7eb      	b.n	8019c8e <uxr_deserialize_CLIENT_Representation+0x56>
 8019cb6:	b30b      	cbz	r3, 8019cfc <uxr_deserialize_CLIENT_Representation+0xc4>
 8019cb8:	b1f0      	cbz	r0, 8019cf8 <uxr_deserialize_CLIENT_Representation+0xc0>
 8019cba:	46a0      	mov	r8, r4
 8019cbc:	f04f 0900 	mov.w	r9, #0
 8019cc0:	e000      	b.n	8019cc4 <uxr_deserialize_CLIENT_Representation+0x8c>
 8019cc2:	b1ce      	cbz	r6, 8019cf8 <uxr_deserialize_CLIENT_Representation+0xc0>
 8019cc4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8019cc8:	f108 0808 	add.w	r8, r8, #8
 8019ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	f005 faa1 	bl	801f218 <ucdr_deserialize_string>
 8019cd6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019cda:	4606      	mov	r6, r0
 8019cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	f109 0901 	add.w	r9, r9, #1
 8019ce6:	f005 fa97 	bl	801f218 <ucdr_deserialize_string>
 8019cea:	6923      	ldr	r3, [r4, #16]
 8019cec:	4006      	ands	r6, r0
 8019cee:	4599      	cmp	r9, r3
 8019cf0:	b2f6      	uxtb	r6, r6
 8019cf2:	d3e6      	bcc.n	8019cc2 <uxr_deserialize_CLIENT_Representation+0x8a>
 8019cf4:	4037      	ands	r7, r6
 8019cf6:	e7ca      	b.n	8019c8e <uxr_deserialize_CLIENT_Representation+0x56>
 8019cf8:	2700      	movs	r7, #0
 8019cfa:	e7c8      	b.n	8019c8e <uxr_deserialize_CLIENT_Representation+0x56>
 8019cfc:	4007      	ands	r7, r0
 8019cfe:	e7c6      	b.n	8019c8e <uxr_deserialize_CLIENT_Representation+0x56>

08019d00 <uxr_serialize_AGENT_Representation>:
 8019d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d04:	2204      	movs	r2, #4
 8019d06:	460f      	mov	r7, r1
 8019d08:	4605      	mov	r5, r0
 8019d0a:	f005 f951 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019d0e:	4604      	mov	r4, r0
 8019d10:	2202      	movs	r2, #2
 8019d12:	1d39      	adds	r1, r7, #4
 8019d14:	4628      	mov	r0, r5
 8019d16:	f005 f94b 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019d1a:	4020      	ands	r0, r4
 8019d1c:	2202      	movs	r2, #2
 8019d1e:	1db9      	adds	r1, r7, #6
 8019d20:	b2c4      	uxtb	r4, r0
 8019d22:	4628      	mov	r0, r5
 8019d24:	f005 f944 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019d28:	7a39      	ldrb	r1, [r7, #8]
 8019d2a:	4004      	ands	r4, r0
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	f7f9 f8c7 	bl	8012ec0 <ucdr_serialize_bool>
 8019d32:	7a3b      	ldrb	r3, [r7, #8]
 8019d34:	ea00 0804 	and.w	r8, r0, r4
 8019d38:	b913      	cbnz	r3, 8019d40 <uxr_serialize_AGENT_Representation+0x40>
 8019d3a:	4640      	mov	r0, r8
 8019d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d40:	68f9      	ldr	r1, [r7, #12]
 8019d42:	4628      	mov	r0, r5
 8019d44:	f7f9 fb00 	bl	8013348 <ucdr_serialize_uint32_t>
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	b303      	cbz	r3, 8019d8e <uxr_serialize_AGENT_Representation+0x8e>
 8019d4c:	b1d0      	cbz	r0, 8019d84 <uxr_serialize_AGENT_Representation+0x84>
 8019d4e:	463e      	mov	r6, r7
 8019d50:	f04f 0900 	mov.w	r9, #0
 8019d54:	e000      	b.n	8019d58 <uxr_serialize_AGENT_Representation+0x58>
 8019d56:	b1ac      	cbz	r4, 8019d84 <uxr_serialize_AGENT_Representation+0x84>
 8019d58:	6931      	ldr	r1, [r6, #16]
 8019d5a:	4628      	mov	r0, r5
 8019d5c:	f005 fa4c 	bl	801f1f8 <ucdr_serialize_string>
 8019d60:	6971      	ldr	r1, [r6, #20]
 8019d62:	4604      	mov	r4, r0
 8019d64:	4628      	mov	r0, r5
 8019d66:	f005 fa47 	bl	801f1f8 <ucdr_serialize_string>
 8019d6a:	f109 0901 	add.w	r9, r9, #1
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	4004      	ands	r4, r0
 8019d72:	3608      	adds	r6, #8
 8019d74:	4599      	cmp	r9, r3
 8019d76:	b2e4      	uxtb	r4, r4
 8019d78:	d3ed      	bcc.n	8019d56 <uxr_serialize_AGENT_Representation+0x56>
 8019d7a:	ea08 0804 	and.w	r8, r8, r4
 8019d7e:	4640      	mov	r0, r8
 8019d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d84:	f04f 0800 	mov.w	r8, #0
 8019d88:	4640      	mov	r0, r8
 8019d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d8e:	ea08 0800 	and.w	r8, r8, r0
 8019d92:	e7d2      	b.n	8019d3a <uxr_serialize_AGENT_Representation+0x3a>

08019d94 <uxr_serialize_DATAWRITER_Representation>:
 8019d94:	b570      	push	{r4, r5, r6, lr}
 8019d96:	460d      	mov	r5, r1
 8019d98:	7809      	ldrb	r1, [r1, #0]
 8019d9a:	4606      	mov	r6, r0
 8019d9c:	f7f9 f8be 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019da0:	4604      	mov	r4, r0
 8019da2:	b130      	cbz	r0, 8019db2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019da4:	782b      	ldrb	r3, [r5, #0]
 8019da6:	2b02      	cmp	r3, #2
 8019da8:	d00c      	beq.n	8019dc4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019daa:	2b03      	cmp	r3, #3
 8019dac:	d010      	beq.n	8019dd0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019dae:	2b01      	cmp	r3, #1
 8019db0:	d008      	beq.n	8019dc4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019db2:	2202      	movs	r2, #2
 8019db4:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8019db8:	4630      	mov	r0, r6
 8019dba:	f005 f8f9 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019dbe:	4020      	ands	r0, r4
 8019dc0:	b2c0      	uxtb	r0, r0
 8019dc2:	bd70      	pop	{r4, r5, r6, pc}
 8019dc4:	6869      	ldr	r1, [r5, #4]
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	f005 fa16 	bl	801f1f8 <ucdr_serialize_string>
 8019dcc:	4604      	mov	r4, r0
 8019dce:	e7f0      	b.n	8019db2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019dd0:	4629      	mov	r1, r5
 8019dd2:	4630      	mov	r0, r6
 8019dd4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019dd8:	3104      	adds	r1, #4
 8019dda:	f005 f9e1 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 8019dde:	4604      	mov	r4, r0
 8019de0:	e7e7      	b.n	8019db2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019de2:	bf00      	nop

08019de4 <uxr_serialize_ObjectVariant.part.0>:
 8019de4:	b570      	push	{r4, r5, r6, lr}
 8019de6:	780b      	ldrb	r3, [r1, #0]
 8019de8:	460c      	mov	r4, r1
 8019dea:	4605      	mov	r5, r0
 8019dec:	3b01      	subs	r3, #1
 8019dee:	2b0d      	cmp	r3, #13
 8019df0:	d854      	bhi.n	8019e9c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019df2:	e8df f003 	tbb	[pc, r3]
 8019df6:	0730      	.short	0x0730
 8019df8:	07071b1b 	.word	0x07071b1b
 8019dfc:	0c530707 	.word	0x0c530707
 8019e00:	494e0c0c 	.word	0x494e0c0c
 8019e04:	3104      	adds	r1, #4
 8019e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e0a:	f7ff bfc3 	b.w	8019d94 <uxr_serialize_DATAWRITER_Representation>
 8019e0e:	7909      	ldrb	r1, [r1, #4]
 8019e10:	f7f9 f884 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019e14:	b1e8      	cbz	r0, 8019e52 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019e16:	7923      	ldrb	r3, [r4, #4]
 8019e18:	2b01      	cmp	r3, #1
 8019e1a:	d001      	beq.n	8019e20 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019e1c:	2b02      	cmp	r3, #2
 8019e1e:	d13d      	bne.n	8019e9c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019e20:	68a1      	ldr	r1, [r4, #8]
 8019e22:	4628      	mov	r0, r5
 8019e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e28:	f005 b9e6 	b.w	801f1f8 <ucdr_serialize_string>
 8019e2c:	7909      	ldrb	r1, [r1, #4]
 8019e2e:	f7f9 f875 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019e32:	4606      	mov	r6, r0
 8019e34:	b120      	cbz	r0, 8019e40 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019e36:	7923      	ldrb	r3, [r4, #4]
 8019e38:	2b02      	cmp	r3, #2
 8019e3a:	d039      	beq.n	8019eb0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019e3c:	2b03      	cmp	r3, #3
 8019e3e:	d02f      	beq.n	8019ea0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019e40:	2202      	movs	r2, #2
 8019e42:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8019e46:	4628      	mov	r0, r5
 8019e48:	f005 f8b2 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 8019e4c:	4030      	ands	r0, r6
 8019e4e:	b2c0      	uxtb	r0, r0
 8019e50:	bd70      	pop	{r4, r5, r6, pc}
 8019e52:	2000      	movs	r0, #0
 8019e54:	bd70      	pop	{r4, r5, r6, pc}
 8019e56:	7909      	ldrb	r1, [r1, #4]
 8019e58:	f7f9 f860 	bl	8012f1c <ucdr_serialize_uint8_t>
 8019e5c:	4606      	mov	r6, r0
 8019e5e:	b158      	cbz	r0, 8019e78 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019e60:	7923      	ldrb	r3, [r4, #4]
 8019e62:	2b02      	cmp	r3, #2
 8019e64:	d003      	beq.n	8019e6e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019e66:	2b03      	cmp	r3, #3
 8019e68:	d028      	beq.n	8019ebc <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019e6a:	2b01      	cmp	r3, #1
 8019e6c:	d104      	bne.n	8019e78 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019e6e:	68a1      	ldr	r1, [r4, #8]
 8019e70:	4628      	mov	r0, r5
 8019e72:	f005 f9c1 	bl	801f1f8 <ucdr_serialize_string>
 8019e76:	4606      	mov	r6, r0
 8019e78:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8019e7c:	4628      	mov	r0, r5
 8019e7e:	f7f9 fd89 	bl	8013994 <ucdr_serialize_int16_t>
 8019e82:	4030      	ands	r0, r6
 8019e84:	b2c0      	uxtb	r0, r0
 8019e86:	bd70      	pop	{r4, r5, r6, pc}
 8019e88:	3104      	adds	r1, #4
 8019e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e8e:	f7ff be7b 	b.w	8019b88 <uxr_serialize_CLIENT_Representation>
 8019e92:	3104      	adds	r1, #4
 8019e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e98:	f7ff bf32 	b.w	8019d00 <uxr_serialize_AGENT_Representation>
 8019e9c:	2001      	movs	r0, #1
 8019e9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ea0:	68a2      	ldr	r2, [r4, #8]
 8019ea2:	f104 010c 	add.w	r1, r4, #12
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	f005 f97a 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 8019eac:	4606      	mov	r6, r0
 8019eae:	e7c7      	b.n	8019e40 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019eb0:	68a1      	ldr	r1, [r4, #8]
 8019eb2:	4628      	mov	r0, r5
 8019eb4:	f005 f9a0 	bl	801f1f8 <ucdr_serialize_string>
 8019eb8:	4606      	mov	r6, r0
 8019eba:	e7c1      	b.n	8019e40 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019ebc:	68a2      	ldr	r2, [r4, #8]
 8019ebe:	f104 010c 	add.w	r1, r4, #12
 8019ec2:	4628      	mov	r0, r5
 8019ec4:	f005 f96c 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 8019ec8:	4606      	mov	r6, r0
 8019eca:	e7d5      	b.n	8019e78 <uxr_serialize_ObjectVariant.part.0+0x94>

08019ecc <uxr_deserialize_DATAWRITER_Representation>:
 8019ecc:	b570      	push	{r4, r5, r6, lr}
 8019ece:	4606      	mov	r6, r0
 8019ed0:	460d      	mov	r5, r1
 8019ed2:	f7f9 f839 	bl	8012f48 <ucdr_deserialize_uint8_t>
 8019ed6:	4604      	mov	r4, r0
 8019ed8:	b130      	cbz	r0, 8019ee8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019eda:	782b      	ldrb	r3, [r5, #0]
 8019edc:	2b02      	cmp	r3, #2
 8019ede:	d00c      	beq.n	8019efa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019ee0:	2b03      	cmp	r3, #3
 8019ee2:	d012      	beq.n	8019f0a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019ee4:	2b01      	cmp	r3, #1
 8019ee6:	d008      	beq.n	8019efa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019ee8:	2202      	movs	r2, #2
 8019eea:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8019eee:	4630      	mov	r0, r6
 8019ef0:	f005 f8c2 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 8019ef4:	4020      	ands	r0, r4
 8019ef6:	b2c0      	uxtb	r0, r0
 8019ef8:	bd70      	pop	{r4, r5, r6, pc}
 8019efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019efe:	6869      	ldr	r1, [r5, #4]
 8019f00:	4630      	mov	r0, r6
 8019f02:	f005 f989 	bl	801f218 <ucdr_deserialize_string>
 8019f06:	4604      	mov	r4, r0
 8019f08:	e7ee      	b.n	8019ee8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019f0a:	1d2b      	adds	r3, r5, #4
 8019f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019f10:	f105 0108 	add.w	r1, r5, #8
 8019f14:	4630      	mov	r0, r6
 8019f16:	f005 f955 	bl	801f1c4 <ucdr_deserialize_sequence_uint8_t>
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	e7e4      	b.n	8019ee8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019f1e:	bf00      	nop

08019f20 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019f20:	b570      	push	{r4, r5, r6, lr}
 8019f22:	460d      	mov	r5, r1
 8019f24:	7809      	ldrb	r1, [r1, #0]
 8019f26:	4606      	mov	r6, r0
 8019f28:	f7f8 ffca 	bl	8012ec0 <ucdr_serialize_bool>
 8019f2c:	782b      	ldrb	r3, [r5, #0]
 8019f2e:	4604      	mov	r4, r0
 8019f30:	b94b      	cbnz	r3, 8019f46 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019f32:	7a29      	ldrb	r1, [r5, #8]
 8019f34:	4630      	mov	r0, r6
 8019f36:	f7f8 ffc3 	bl	8012ec0 <ucdr_serialize_bool>
 8019f3a:	7a2b      	ldrb	r3, [r5, #8]
 8019f3c:	4004      	ands	r4, r0
 8019f3e:	b2e4      	uxtb	r4, r4
 8019f40:	b943      	cbnz	r3, 8019f54 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019f42:	4620      	mov	r0, r4
 8019f44:	bd70      	pop	{r4, r5, r6, pc}
 8019f46:	6869      	ldr	r1, [r5, #4]
 8019f48:	4630      	mov	r0, r6
 8019f4a:	f005 f955 	bl	801f1f8 <ucdr_serialize_string>
 8019f4e:	4004      	ands	r4, r0
 8019f50:	b2e4      	uxtb	r4, r4
 8019f52:	e7ee      	b.n	8019f32 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019f54:	68e9      	ldr	r1, [r5, #12]
 8019f56:	4630      	mov	r0, r6
 8019f58:	f005 f94e 	bl	801f1f8 <ucdr_serialize_string>
 8019f5c:	4004      	ands	r4, r0
 8019f5e:	4620      	mov	r0, r4
 8019f60:	bd70      	pop	{r4, r5, r6, pc}
 8019f62:	bf00      	nop

08019f64 <uxr_serialize_OBJK_Topic_Binary>:
 8019f64:	b570      	push	{r4, r5, r6, lr}
 8019f66:	460d      	mov	r5, r1
 8019f68:	4606      	mov	r6, r0
 8019f6a:	6809      	ldr	r1, [r1, #0]
 8019f6c:	f005 f944 	bl	801f1f8 <ucdr_serialize_string>
 8019f70:	4604      	mov	r4, r0
 8019f72:	7929      	ldrb	r1, [r5, #4]
 8019f74:	4630      	mov	r0, r6
 8019f76:	f7f8 ffa3 	bl	8012ec0 <ucdr_serialize_bool>
 8019f7a:	792b      	ldrb	r3, [r5, #4]
 8019f7c:	4004      	ands	r4, r0
 8019f7e:	b2e4      	uxtb	r4, r4
 8019f80:	b943      	cbnz	r3, 8019f94 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019f82:	7b29      	ldrb	r1, [r5, #12]
 8019f84:	4630      	mov	r0, r6
 8019f86:	f7f8 ff9b 	bl	8012ec0 <ucdr_serialize_bool>
 8019f8a:	7b2b      	ldrb	r3, [r5, #12]
 8019f8c:	4004      	ands	r4, r0
 8019f8e:	b93b      	cbnz	r3, 8019fa0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019f90:	4620      	mov	r0, r4
 8019f92:	bd70      	pop	{r4, r5, r6, pc}
 8019f94:	68a9      	ldr	r1, [r5, #8]
 8019f96:	4630      	mov	r0, r6
 8019f98:	f005 f92e 	bl	801f1f8 <ucdr_serialize_string>
 8019f9c:	4004      	ands	r4, r0
 8019f9e:	e7f0      	b.n	8019f82 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019fa0:	6929      	ldr	r1, [r5, #16]
 8019fa2:	4630      	mov	r0, r6
 8019fa4:	f005 f928 	bl	801f1f8 <ucdr_serialize_string>
 8019fa8:	4004      	ands	r4, r0
 8019faa:	b2e4      	uxtb	r4, r4
 8019fac:	4620      	mov	r0, r4
 8019fae:	bd70      	pop	{r4, r5, r6, pc}

08019fb0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fb4:	460c      	mov	r4, r1
 8019fb6:	7809      	ldrb	r1, [r1, #0]
 8019fb8:	4606      	mov	r6, r0
 8019fba:	f7f8 ff81 	bl	8012ec0 <ucdr_serialize_bool>
 8019fbe:	7823      	ldrb	r3, [r4, #0]
 8019fc0:	4605      	mov	r5, r0
 8019fc2:	b96b      	cbnz	r3, 8019fe0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019fc4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8019fc8:	4630      	mov	r0, r6
 8019fca:	f7f8 ff79 	bl	8012ec0 <ucdr_serialize_bool>
 8019fce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019fd2:	4005      	ands	r5, r0
 8019fd4:	b2ed      	uxtb	r5, r5
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d169      	bne.n	801a0ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019fda:	4628      	mov	r0, r5
 8019fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fe0:	6861      	ldr	r1, [r4, #4]
 8019fe2:	4630      	mov	r0, r6
 8019fe4:	f7f9 f9b0 	bl	8013348 <ucdr_serialize_uint32_t>
 8019fe8:	6863      	ldr	r3, [r4, #4]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d06b      	beq.n	801a0c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	d067      	beq.n	801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019ff2:	68a1      	ldr	r1, [r4, #8]
 8019ff4:	4630      	mov	r0, r6
 8019ff6:	f005 f8ff 	bl	801f1f8 <ucdr_serialize_string>
 8019ffa:	6863      	ldr	r3, [r4, #4]
 8019ffc:	2b01      	cmp	r3, #1
 8019ffe:	d953      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a000:	2800      	cmp	r0, #0
 801a002:	d05e      	beq.n	801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a004:	68e1      	ldr	r1, [r4, #12]
 801a006:	4630      	mov	r0, r6
 801a008:	f005 f8f6 	bl	801f1f8 <ucdr_serialize_string>
 801a00c:	6863      	ldr	r3, [r4, #4]
 801a00e:	2b02      	cmp	r3, #2
 801a010:	d94a      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a012:	2800      	cmp	r0, #0
 801a014:	d055      	beq.n	801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a016:	6921      	ldr	r1, [r4, #16]
 801a018:	4630      	mov	r0, r6
 801a01a:	f005 f8ed 	bl	801f1f8 <ucdr_serialize_string>
 801a01e:	6863      	ldr	r3, [r4, #4]
 801a020:	2b03      	cmp	r3, #3
 801a022:	d941      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a024:	2800      	cmp	r0, #0
 801a026:	d04c      	beq.n	801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a028:	6961      	ldr	r1, [r4, #20]
 801a02a:	4630      	mov	r0, r6
 801a02c:	f005 f8e4 	bl	801f1f8 <ucdr_serialize_string>
 801a030:	6863      	ldr	r3, [r4, #4]
 801a032:	2b04      	cmp	r3, #4
 801a034:	d938      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a036:	2800      	cmp	r0, #0
 801a038:	d043      	beq.n	801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a03a:	69a1      	ldr	r1, [r4, #24]
 801a03c:	4630      	mov	r0, r6
 801a03e:	f005 f8db 	bl	801f1f8 <ucdr_serialize_string>
 801a042:	6863      	ldr	r3, [r4, #4]
 801a044:	2b05      	cmp	r3, #5
 801a046:	d92f      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a048:	2800      	cmp	r0, #0
 801a04a:	d03a      	beq.n	801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a04c:	69e1      	ldr	r1, [r4, #28]
 801a04e:	4630      	mov	r0, r6
 801a050:	f005 f8d2 	bl	801f1f8 <ucdr_serialize_string>
 801a054:	6863      	ldr	r3, [r4, #4]
 801a056:	2b06      	cmp	r3, #6
 801a058:	d926      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a05a:	b390      	cbz	r0, 801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a05c:	6a21      	ldr	r1, [r4, #32]
 801a05e:	4630      	mov	r0, r6
 801a060:	f005 f8ca 	bl	801f1f8 <ucdr_serialize_string>
 801a064:	6863      	ldr	r3, [r4, #4]
 801a066:	2b07      	cmp	r3, #7
 801a068:	d91e      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a06a:	b350      	cbz	r0, 801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a06c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a06e:	4630      	mov	r0, r6
 801a070:	f005 f8c2 	bl	801f1f8 <ucdr_serialize_string>
 801a074:	6863      	ldr	r3, [r4, #4]
 801a076:	2b08      	cmp	r3, #8
 801a078:	d916      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a07a:	b310      	cbz	r0, 801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a07c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a07e:	4630      	mov	r0, r6
 801a080:	f005 f8ba 	bl	801f1f8 <ucdr_serialize_string>
 801a084:	6863      	ldr	r3, [r4, #4]
 801a086:	2b09      	cmp	r3, #9
 801a088:	d90e      	bls.n	801a0a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a08a:	b1d0      	cbz	r0, 801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a08c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a090:	2709      	movs	r7, #9
 801a092:	e000      	b.n	801a096 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a094:	b1a8      	cbz	r0, 801a0c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a096:	f858 1b04 	ldr.w	r1, [r8], #4
 801a09a:	4630      	mov	r0, r6
 801a09c:	f005 f8ac 	bl	801f1f8 <ucdr_serialize_string>
 801a0a0:	3701      	adds	r7, #1
 801a0a2:	6862      	ldr	r2, [r4, #4]
 801a0a4:	4297      	cmp	r7, r2
 801a0a6:	d3f5      	bcc.n	801a094 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a0a8:	4005      	ands	r5, r0
 801a0aa:	b2ed      	uxtb	r5, r5
 801a0ac:	e78a      	b.n	8019fc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a0ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a0b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a0b4:	4630      	mov	r0, r6
 801a0b6:	f005 f873 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 801a0ba:	4005      	ands	r5, r0
 801a0bc:	4628      	mov	r0, r5
 801a0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0c2:	2500      	movs	r5, #0
 801a0c4:	e77e      	b.n	8019fc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a0c6:	4028      	ands	r0, r5
 801a0c8:	b2c5      	uxtb	r5, r0
 801a0ca:	e77b      	b.n	8019fc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a0cc <uxr_serialize_OBJK_Publisher_Binary>:
 801a0cc:	b570      	push	{r4, r5, r6, lr}
 801a0ce:	460d      	mov	r5, r1
 801a0d0:	7809      	ldrb	r1, [r1, #0]
 801a0d2:	4606      	mov	r6, r0
 801a0d4:	f7f8 fef4 	bl	8012ec0 <ucdr_serialize_bool>
 801a0d8:	782b      	ldrb	r3, [r5, #0]
 801a0da:	4604      	mov	r4, r0
 801a0dc:	b94b      	cbnz	r3, 801a0f2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a0de:	7a29      	ldrb	r1, [r5, #8]
 801a0e0:	4630      	mov	r0, r6
 801a0e2:	f7f8 feed 	bl	8012ec0 <ucdr_serialize_bool>
 801a0e6:	7a2b      	ldrb	r3, [r5, #8]
 801a0e8:	4004      	ands	r4, r0
 801a0ea:	b2e4      	uxtb	r4, r4
 801a0ec:	b943      	cbnz	r3, 801a100 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	bd70      	pop	{r4, r5, r6, pc}
 801a0f2:	6869      	ldr	r1, [r5, #4]
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	f005 f87f 	bl	801f1f8 <ucdr_serialize_string>
 801a0fa:	4004      	ands	r4, r0
 801a0fc:	b2e4      	uxtb	r4, r4
 801a0fe:	e7ee      	b.n	801a0de <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a100:	f105 010c 	add.w	r1, r5, #12
 801a104:	4630      	mov	r0, r6
 801a106:	f7ff ff53 	bl	8019fb0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a10a:	4004      	ands	r4, r0
 801a10c:	4620      	mov	r0, r4
 801a10e:	bd70      	pop	{r4, r5, r6, pc}

0801a110 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a114:	460c      	mov	r4, r1
 801a116:	7809      	ldrb	r1, [r1, #0]
 801a118:	4606      	mov	r6, r0
 801a11a:	f7f8 fed1 	bl	8012ec0 <ucdr_serialize_bool>
 801a11e:	7823      	ldrb	r3, [r4, #0]
 801a120:	4605      	mov	r5, r0
 801a122:	b96b      	cbnz	r3, 801a140 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a124:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a128:	4630      	mov	r0, r6
 801a12a:	f7f8 fec9 	bl	8012ec0 <ucdr_serialize_bool>
 801a12e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a132:	4005      	ands	r5, r0
 801a134:	b2ed      	uxtb	r5, r5
 801a136:	2b00      	cmp	r3, #0
 801a138:	d169      	bne.n	801a20e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a13a:	4628      	mov	r0, r5
 801a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a140:	6861      	ldr	r1, [r4, #4]
 801a142:	4630      	mov	r0, r6
 801a144:	f7f9 f900 	bl	8013348 <ucdr_serialize_uint32_t>
 801a148:	6863      	ldr	r3, [r4, #4]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d06b      	beq.n	801a226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a14e:	2800      	cmp	r0, #0
 801a150:	d067      	beq.n	801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a152:	68a1      	ldr	r1, [r4, #8]
 801a154:	4630      	mov	r0, r6
 801a156:	f005 f84f 	bl	801f1f8 <ucdr_serialize_string>
 801a15a:	6863      	ldr	r3, [r4, #4]
 801a15c:	2b01      	cmp	r3, #1
 801a15e:	d953      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a160:	2800      	cmp	r0, #0
 801a162:	d05e      	beq.n	801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a164:	68e1      	ldr	r1, [r4, #12]
 801a166:	4630      	mov	r0, r6
 801a168:	f005 f846 	bl	801f1f8 <ucdr_serialize_string>
 801a16c:	6863      	ldr	r3, [r4, #4]
 801a16e:	2b02      	cmp	r3, #2
 801a170:	d94a      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a172:	2800      	cmp	r0, #0
 801a174:	d055      	beq.n	801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a176:	6921      	ldr	r1, [r4, #16]
 801a178:	4630      	mov	r0, r6
 801a17a:	f005 f83d 	bl	801f1f8 <ucdr_serialize_string>
 801a17e:	6863      	ldr	r3, [r4, #4]
 801a180:	2b03      	cmp	r3, #3
 801a182:	d941      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a184:	2800      	cmp	r0, #0
 801a186:	d04c      	beq.n	801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a188:	6961      	ldr	r1, [r4, #20]
 801a18a:	4630      	mov	r0, r6
 801a18c:	f005 f834 	bl	801f1f8 <ucdr_serialize_string>
 801a190:	6863      	ldr	r3, [r4, #4]
 801a192:	2b04      	cmp	r3, #4
 801a194:	d938      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a196:	2800      	cmp	r0, #0
 801a198:	d043      	beq.n	801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a19a:	69a1      	ldr	r1, [r4, #24]
 801a19c:	4630      	mov	r0, r6
 801a19e:	f005 f82b 	bl	801f1f8 <ucdr_serialize_string>
 801a1a2:	6863      	ldr	r3, [r4, #4]
 801a1a4:	2b05      	cmp	r3, #5
 801a1a6:	d92f      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	d03a      	beq.n	801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a1ac:	69e1      	ldr	r1, [r4, #28]
 801a1ae:	4630      	mov	r0, r6
 801a1b0:	f005 f822 	bl	801f1f8 <ucdr_serialize_string>
 801a1b4:	6863      	ldr	r3, [r4, #4]
 801a1b6:	2b06      	cmp	r3, #6
 801a1b8:	d926      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a1ba:	b390      	cbz	r0, 801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a1bc:	6a21      	ldr	r1, [r4, #32]
 801a1be:	4630      	mov	r0, r6
 801a1c0:	f005 f81a 	bl	801f1f8 <ucdr_serialize_string>
 801a1c4:	6863      	ldr	r3, [r4, #4]
 801a1c6:	2b07      	cmp	r3, #7
 801a1c8:	d91e      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a1ca:	b350      	cbz	r0, 801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a1cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a1ce:	4630      	mov	r0, r6
 801a1d0:	f005 f812 	bl	801f1f8 <ucdr_serialize_string>
 801a1d4:	6863      	ldr	r3, [r4, #4]
 801a1d6:	2b08      	cmp	r3, #8
 801a1d8:	d916      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a1da:	b310      	cbz	r0, 801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a1dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a1de:	4630      	mov	r0, r6
 801a1e0:	f005 f80a 	bl	801f1f8 <ucdr_serialize_string>
 801a1e4:	6863      	ldr	r3, [r4, #4]
 801a1e6:	2b09      	cmp	r3, #9
 801a1e8:	d90e      	bls.n	801a208 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a1ea:	b1d0      	cbz	r0, 801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a1ec:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a1f0:	2709      	movs	r7, #9
 801a1f2:	e000      	b.n	801a1f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a1f4:	b1a8      	cbz	r0, 801a222 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a1f6:	f858 1b04 	ldr.w	r1, [r8], #4
 801a1fa:	4630      	mov	r0, r6
 801a1fc:	f004 fffc 	bl	801f1f8 <ucdr_serialize_string>
 801a200:	3701      	adds	r7, #1
 801a202:	6862      	ldr	r2, [r4, #4]
 801a204:	4297      	cmp	r7, r2
 801a206:	d3f5      	bcc.n	801a1f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a208:	4005      	ands	r5, r0
 801a20a:	b2ed      	uxtb	r5, r5
 801a20c:	e78a      	b.n	801a124 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a20e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a210:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a214:	4630      	mov	r0, r6
 801a216:	f004 ffc3 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 801a21a:	4005      	ands	r5, r0
 801a21c:	4628      	mov	r0, r5
 801a21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a222:	2500      	movs	r5, #0
 801a224:	e77e      	b.n	801a124 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a226:	4028      	ands	r0, r5
 801a228:	b2c5      	uxtb	r5, r0
 801a22a:	e77b      	b.n	801a124 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a22c <uxr_serialize_OBJK_Subscriber_Binary>:
 801a22c:	b570      	push	{r4, r5, r6, lr}
 801a22e:	460d      	mov	r5, r1
 801a230:	7809      	ldrb	r1, [r1, #0]
 801a232:	4606      	mov	r6, r0
 801a234:	f7f8 fe44 	bl	8012ec0 <ucdr_serialize_bool>
 801a238:	782b      	ldrb	r3, [r5, #0]
 801a23a:	4604      	mov	r4, r0
 801a23c:	b94b      	cbnz	r3, 801a252 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a23e:	7a29      	ldrb	r1, [r5, #8]
 801a240:	4630      	mov	r0, r6
 801a242:	f7f8 fe3d 	bl	8012ec0 <ucdr_serialize_bool>
 801a246:	7a2b      	ldrb	r3, [r5, #8]
 801a248:	4004      	ands	r4, r0
 801a24a:	b2e4      	uxtb	r4, r4
 801a24c:	b943      	cbnz	r3, 801a260 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a24e:	4620      	mov	r0, r4
 801a250:	bd70      	pop	{r4, r5, r6, pc}
 801a252:	6869      	ldr	r1, [r5, #4]
 801a254:	4630      	mov	r0, r6
 801a256:	f004 ffcf 	bl	801f1f8 <ucdr_serialize_string>
 801a25a:	4004      	ands	r4, r0
 801a25c:	b2e4      	uxtb	r4, r4
 801a25e:	e7ee      	b.n	801a23e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a260:	f105 010c 	add.w	r1, r5, #12
 801a264:	4630      	mov	r0, r6
 801a266:	f7ff ff53 	bl	801a110 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a26a:	4004      	ands	r4, r0
 801a26c:	4620      	mov	r0, r4
 801a26e:	bd70      	pop	{r4, r5, r6, pc}

0801a270 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a270:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a274:	4688      	mov	r8, r1
 801a276:	4681      	mov	r9, r0
 801a278:	8809      	ldrh	r1, [r1, #0]
 801a27a:	f7f8 fe7b 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a27e:	4606      	mov	r6, r0
 801a280:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a284:	4648      	mov	r0, r9
 801a286:	f7f8 fe1b 	bl	8012ec0 <ucdr_serialize_bool>
 801a28a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a28e:	4006      	ands	r6, r0
 801a290:	b2f5      	uxtb	r5, r6
 801a292:	b9eb      	cbnz	r3, 801a2d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a294:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a298:	4648      	mov	r0, r9
 801a29a:	f7f8 fe11 	bl	8012ec0 <ucdr_serialize_bool>
 801a29e:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a2a2:	4005      	ands	r5, r0
 801a2a4:	bb7b      	cbnz	r3, 801a306 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a2a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a2aa:	4648      	mov	r0, r9
 801a2ac:	f7f8 fe08 	bl	8012ec0 <ucdr_serialize_bool>
 801a2b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a2b4:	4005      	ands	r5, r0
 801a2b6:	b9f3      	cbnz	r3, 801a2f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a2b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a2bc:	4648      	mov	r0, r9
 801a2be:	f7f8 fdff 	bl	8012ec0 <ucdr_serialize_bool>
 801a2c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a2c6:	4005      	ands	r5, r0
 801a2c8:	b94b      	cbnz	r3, 801a2de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a2ca:	4628      	mov	r0, r5
 801a2cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a2d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a2d4:	4648      	mov	r0, r9
 801a2d6:	f7f8 fe4d 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a2da:	4005      	ands	r5, r0
 801a2dc:	e7da      	b.n	801a294 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a2de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a2e2:	f108 011c 	add.w	r1, r8, #28
 801a2e6:	4648      	mov	r0, r9
 801a2e8:	f004 ff5a 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 801a2ec:	4028      	ands	r0, r5
 801a2ee:	b2c5      	uxtb	r5, r0
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a2f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a2fa:	4648      	mov	r0, r9
 801a2fc:	f7f9 f824 	bl	8013348 <ucdr_serialize_uint32_t>
 801a300:	4028      	ands	r0, r5
 801a302:	b2c5      	uxtb	r5, r0
 801a304:	e7d8      	b.n	801a2b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a306:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a30a:	4648      	mov	r0, r9
 801a30c:	f7f9 f81c 	bl	8013348 <ucdr_serialize_uint32_t>
 801a310:	4028      	ands	r0, r5
 801a312:	b2c5      	uxtb	r5, r0
 801a314:	e7c7      	b.n	801a2a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a316:	bf00      	nop

0801a318 <uxr_serialize_OBJK_DataReader_Binary>:
 801a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a31a:	2202      	movs	r2, #2
 801a31c:	460c      	mov	r4, r1
 801a31e:	4606      	mov	r6, r0
 801a320:	f004 fe46 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a324:	4605      	mov	r5, r0
 801a326:	78a1      	ldrb	r1, [r4, #2]
 801a328:	4630      	mov	r0, r6
 801a32a:	f7f8 fdc9 	bl	8012ec0 <ucdr_serialize_bool>
 801a32e:	78a3      	ldrb	r3, [r4, #2]
 801a330:	4005      	ands	r5, r0
 801a332:	b2ed      	uxtb	r5, r5
 801a334:	b90b      	cbnz	r3, 801a33a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a336:	4628      	mov	r0, r5
 801a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a33a:	f104 0108 	add.w	r1, r4, #8
 801a33e:	4630      	mov	r0, r6
 801a340:	f7ff ff96 	bl	801a270 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a344:	4607      	mov	r7, r0
 801a346:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a34a:	4630      	mov	r0, r6
 801a34c:	f7f8 fdb8 	bl	8012ec0 <ucdr_serialize_bool>
 801a350:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a354:	4038      	ands	r0, r7
 801a356:	b2c7      	uxtb	r7, r0
 801a358:	b95b      	cbnz	r3, 801a372 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a35a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801a35e:	4630      	mov	r0, r6
 801a360:	f7f8 fdae 	bl	8012ec0 <ucdr_serialize_bool>
 801a364:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a368:	4007      	ands	r7, r0
 801a36a:	b94b      	cbnz	r3, 801a380 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a36c:	403d      	ands	r5, r7
 801a36e:	4628      	mov	r0, r5
 801a370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a372:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801a376:	4630      	mov	r0, r6
 801a378:	f7f9 fa3c 	bl	80137f4 <ucdr_serialize_uint64_t>
 801a37c:	4007      	ands	r7, r0
 801a37e:	e7ec      	b.n	801a35a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a382:	4630      	mov	r0, r6
 801a384:	f004 ff38 	bl	801f1f8 <ucdr_serialize_string>
 801a388:	4007      	ands	r7, r0
 801a38a:	b2ff      	uxtb	r7, r7
 801a38c:	e7ee      	b.n	801a36c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a38e:	bf00      	nop

0801a390 <uxr_serialize_OBJK_DataWriter_Binary>:
 801a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a392:	2202      	movs	r2, #2
 801a394:	460d      	mov	r5, r1
 801a396:	4606      	mov	r6, r0
 801a398:	f004 fe0a 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a39c:	4604      	mov	r4, r0
 801a39e:	78a9      	ldrb	r1, [r5, #2]
 801a3a0:	4630      	mov	r0, r6
 801a3a2:	f7f8 fd8d 	bl	8012ec0 <ucdr_serialize_bool>
 801a3a6:	78ab      	ldrb	r3, [r5, #2]
 801a3a8:	4004      	ands	r4, r0
 801a3aa:	b2e4      	uxtb	r4, r4
 801a3ac:	b90b      	cbnz	r3, 801a3b2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a3ae:	4620      	mov	r0, r4
 801a3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3b2:	f105 0108 	add.w	r1, r5, #8
 801a3b6:	4630      	mov	r0, r6
 801a3b8:	f7ff ff5a 	bl	801a270 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a3bc:	4607      	mov	r7, r0
 801a3be:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801a3c2:	4630      	mov	r0, r6
 801a3c4:	f7f8 fd7c 	bl	8012ec0 <ucdr_serialize_bool>
 801a3c8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801a3cc:	4038      	ands	r0, r7
 801a3ce:	b2c7      	uxtb	r7, r0
 801a3d0:	b913      	cbnz	r3, 801a3d8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a3d2:	403c      	ands	r4, r7
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3d8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801a3dc:	4630      	mov	r0, r6
 801a3de:	f7f9 fa09 	bl	80137f4 <ucdr_serialize_uint64_t>
 801a3e2:	4007      	ands	r7, r0
 801a3e4:	e7f5      	b.n	801a3d2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a3e6:	bf00      	nop

0801a3e8 <uxr_deserialize_ObjectVariant>:
 801a3e8:	b570      	push	{r4, r5, r6, lr}
 801a3ea:	4605      	mov	r5, r0
 801a3ec:	460e      	mov	r6, r1
 801a3ee:	f7f8 fdab 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a3f2:	b168      	cbz	r0, 801a410 <uxr_deserialize_ObjectVariant+0x28>
 801a3f4:	7833      	ldrb	r3, [r6, #0]
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	3b01      	subs	r3, #1
 801a3fa:	2b0d      	cmp	r3, #13
 801a3fc:	d809      	bhi.n	801a412 <uxr_deserialize_ObjectVariant+0x2a>
 801a3fe:	e8df f003 	tbb	[pc, r3]
 801a402:	0a41      	.short	0x0a41
 801a404:	0a0a2323 	.word	0x0a0a2323
 801a408:	10080a0a 	.word	0x10080a0a
 801a40c:	565c1010 	.word	0x565c1010
 801a410:	2400      	movs	r4, #0
 801a412:	4620      	mov	r0, r4
 801a414:	bd70      	pop	{r4, r5, r6, pc}
 801a416:	1d31      	adds	r1, r6, #4
 801a418:	4628      	mov	r0, r5
 801a41a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a41e:	f7ff bd55 	b.w	8019ecc <uxr_deserialize_DATAWRITER_Representation>
 801a422:	1d31      	adds	r1, r6, #4
 801a424:	4628      	mov	r0, r5
 801a426:	f7f8 fd8f 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a42a:	2800      	cmp	r0, #0
 801a42c:	d0f0      	beq.n	801a410 <uxr_deserialize_ObjectVariant+0x28>
 801a42e:	7933      	ldrb	r3, [r6, #4]
 801a430:	2b01      	cmp	r3, #1
 801a432:	d001      	beq.n	801a438 <uxr_deserialize_ObjectVariant+0x50>
 801a434:	2b02      	cmp	r3, #2
 801a436:	d1ec      	bne.n	801a412 <uxr_deserialize_ObjectVariant+0x2a>
 801a438:	68b1      	ldr	r1, [r6, #8]
 801a43a:	4628      	mov	r0, r5
 801a43c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a444:	f004 bee8 	b.w	801f218 <ucdr_deserialize_string>
 801a448:	1d31      	adds	r1, r6, #4
 801a44a:	4628      	mov	r0, r5
 801a44c:	f7f8 fd7c 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a450:	4604      	mov	r4, r0
 801a452:	b170      	cbz	r0, 801a472 <uxr_deserialize_ObjectVariant+0x8a>
 801a454:	7933      	ldrb	r3, [r6, #4]
 801a456:	2b02      	cmp	r3, #2
 801a458:	d04c      	beq.n	801a4f4 <uxr_deserialize_ObjectVariant+0x10c>
 801a45a:	2b03      	cmp	r3, #3
 801a45c:	d109      	bne.n	801a472 <uxr_deserialize_ObjectVariant+0x8a>
 801a45e:	f106 0308 	add.w	r3, r6, #8
 801a462:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a466:	f106 010c 	add.w	r1, r6, #12
 801a46a:	4628      	mov	r0, r5
 801a46c:	f004 feaa 	bl	801f1c4 <ucdr_deserialize_sequence_uint8_t>
 801a470:	4604      	mov	r4, r0
 801a472:	2202      	movs	r2, #2
 801a474:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801a478:	4628      	mov	r0, r5
 801a47a:	f004 fdfd 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a47e:	4020      	ands	r0, r4
 801a480:	b2c4      	uxtb	r4, r0
 801a482:	e7c6      	b.n	801a412 <uxr_deserialize_ObjectVariant+0x2a>
 801a484:	1d31      	adds	r1, r6, #4
 801a486:	4628      	mov	r0, r5
 801a488:	f7f8 fd5e 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a48c:	4604      	mov	r4, r0
 801a48e:	b130      	cbz	r0, 801a49e <uxr_deserialize_ObjectVariant+0xb6>
 801a490:	7933      	ldrb	r3, [r6, #4]
 801a492:	2b02      	cmp	r3, #2
 801a494:	d036      	beq.n	801a504 <uxr_deserialize_ObjectVariant+0x11c>
 801a496:	2b03      	cmp	r3, #3
 801a498:	d03c      	beq.n	801a514 <uxr_deserialize_ObjectVariant+0x12c>
 801a49a:	2b01      	cmp	r3, #1
 801a49c:	d032      	beq.n	801a504 <uxr_deserialize_ObjectVariant+0x11c>
 801a49e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801a4a2:	4628      	mov	r0, r5
 801a4a4:	f7f9 faf6 	bl	8013a94 <ucdr_deserialize_int16_t>
 801a4a8:	4020      	ands	r0, r4
 801a4aa:	b2c4      	uxtb	r4, r0
 801a4ac:	e7b1      	b.n	801a412 <uxr_deserialize_ObjectVariant+0x2a>
 801a4ae:	1d31      	adds	r1, r6, #4
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4b6:	f7ff bbbf 	b.w	8019c38 <uxr_deserialize_CLIENT_Representation>
 801a4ba:	2204      	movs	r2, #4
 801a4bc:	4628      	mov	r0, r5
 801a4be:	18b1      	adds	r1, r6, r2
 801a4c0:	f004 fdda 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a4c4:	4604      	mov	r4, r0
 801a4c6:	2202      	movs	r2, #2
 801a4c8:	f106 0108 	add.w	r1, r6, #8
 801a4cc:	4628      	mov	r0, r5
 801a4ce:	f004 fdd3 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a4d2:	4004      	ands	r4, r0
 801a4d4:	2202      	movs	r2, #2
 801a4d6:	f106 010a 	add.w	r1, r6, #10
 801a4da:	4628      	mov	r0, r5
 801a4dc:	b2e4      	uxtb	r4, r4
 801a4de:	f004 fdcb 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	f106 010c 	add.w	r1, r6, #12
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	401c      	ands	r4, r3
 801a4ec:	f7f8 fcfe 	bl	8012eec <ucdr_deserialize_bool>
 801a4f0:	4004      	ands	r4, r0
 801a4f2:	e78e      	b.n	801a412 <uxr_deserialize_ObjectVariant+0x2a>
 801a4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a4f8:	68b1      	ldr	r1, [r6, #8]
 801a4fa:	4628      	mov	r0, r5
 801a4fc:	f004 fe8c 	bl	801f218 <ucdr_deserialize_string>
 801a500:	4604      	mov	r4, r0
 801a502:	e7b6      	b.n	801a472 <uxr_deserialize_ObjectVariant+0x8a>
 801a504:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a508:	68b1      	ldr	r1, [r6, #8]
 801a50a:	4628      	mov	r0, r5
 801a50c:	f004 fe84 	bl	801f218 <ucdr_deserialize_string>
 801a510:	4604      	mov	r4, r0
 801a512:	e7c4      	b.n	801a49e <uxr_deserialize_ObjectVariant+0xb6>
 801a514:	f106 0308 	add.w	r3, r6, #8
 801a518:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a51c:	f106 010c 	add.w	r1, r6, #12
 801a520:	4628      	mov	r0, r5
 801a522:	f004 fe4f 	bl	801f1c4 <ucdr_deserialize_sequence_uint8_t>
 801a526:	4604      	mov	r4, r0
 801a528:	e7b9      	b.n	801a49e <uxr_deserialize_ObjectVariant+0xb6>
 801a52a:	bf00      	nop

0801a52c <uxr_deserialize_BaseObjectRequest>:
 801a52c:	b570      	push	{r4, r5, r6, lr}
 801a52e:	2202      	movs	r2, #2
 801a530:	4605      	mov	r5, r0
 801a532:	460e      	mov	r6, r1
 801a534:	f004 fda0 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a538:	2202      	movs	r2, #2
 801a53a:	4604      	mov	r4, r0
 801a53c:	4628      	mov	r0, r5
 801a53e:	18b1      	adds	r1, r6, r2
 801a540:	f004 fd9a 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a544:	4020      	ands	r0, r4
 801a546:	b2c0      	uxtb	r0, r0
 801a548:	bd70      	pop	{r4, r5, r6, pc}
 801a54a:	bf00      	nop

0801a54c <uxr_serialize_ActivityInfoVariant>:
 801a54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a550:	460e      	mov	r6, r1
 801a552:	7809      	ldrb	r1, [r1, #0]
 801a554:	4680      	mov	r8, r0
 801a556:	f7f8 fce1 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a55a:	4607      	mov	r7, r0
 801a55c:	b138      	cbz	r0, 801a56e <uxr_serialize_ActivityInfoVariant+0x22>
 801a55e:	7833      	ldrb	r3, [r6, #0]
 801a560:	2b06      	cmp	r3, #6
 801a562:	f000 8081 	beq.w	801a668 <uxr_serialize_ActivityInfoVariant+0x11c>
 801a566:	2b0d      	cmp	r3, #13
 801a568:	d014      	beq.n	801a594 <uxr_serialize_ActivityInfoVariant+0x48>
 801a56a:	2b05      	cmp	r3, #5
 801a56c:	d002      	beq.n	801a574 <uxr_serialize_ActivityInfoVariant+0x28>
 801a56e:	4638      	mov	r0, r7
 801a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a574:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a578:	4640      	mov	r0, r8
 801a57a:	f7f9 fa0b 	bl	8013994 <ucdr_serialize_int16_t>
 801a57e:	4607      	mov	r7, r0
 801a580:	4640      	mov	r0, r8
 801a582:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a586:	f7f9 f935 	bl	80137f4 <ucdr_serialize_uint64_t>
 801a58a:	4038      	ands	r0, r7
 801a58c:	b2c7      	uxtb	r7, r0
 801a58e:	4638      	mov	r0, r7
 801a590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a594:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a598:	4640      	mov	r0, r8
 801a59a:	f7f9 f9fb 	bl	8013994 <ucdr_serialize_int16_t>
 801a59e:	68f1      	ldr	r1, [r6, #12]
 801a5a0:	4607      	mov	r7, r0
 801a5a2:	4640      	mov	r0, r8
 801a5a4:	f7f8 fed0 	bl	8013348 <ucdr_serialize_uint32_t>
 801a5a8:	68f3      	ldr	r3, [r6, #12]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d0ed      	beq.n	801a58a <uxr_serialize_ActivityInfoVariant+0x3e>
 801a5ae:	b318      	cbz	r0, 801a5f8 <uxr_serialize_ActivityInfoVariant+0xac>
 801a5b0:	f106 090c 	add.w	r9, r6, #12
 801a5b4:	2400      	movs	r4, #0
 801a5b6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a5ba:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a5be:	7c29      	ldrb	r1, [r5, #16]
 801a5c0:	4640      	mov	r0, r8
 801a5c2:	f7f8 fcab 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a5c6:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a5ca:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a5ce:	2800      	cmp	r0, #0
 801a5d0:	d051      	beq.n	801a676 <uxr_serialize_ActivityInfoVariant+0x12a>
 801a5d2:	7c2b      	ldrb	r3, [r5, #16]
 801a5d4:	00c9      	lsls	r1, r1, #3
 801a5d6:	2b03      	cmp	r3, #3
 801a5d8:	d854      	bhi.n	801a684 <uxr_serialize_ActivityInfoVariant+0x138>
 801a5da:	e8df f003 	tbb	[pc, r3]
 801a5de:	2133      	.short	0x2133
 801a5e0:	020f      	.short	0x020f
 801a5e2:	4449      	add	r1, r9
 801a5e4:	4640      	mov	r0, r8
 801a5e6:	6889      	ldr	r1, [r1, #8]
 801a5e8:	f004 fe06 	bl	801f1f8 <ucdr_serialize_string>
 801a5ec:	3401      	adds	r4, #1
 801a5ee:	68f2      	ldr	r2, [r6, #12]
 801a5f0:	4294      	cmp	r4, r2
 801a5f2:	d244      	bcs.n	801a67e <uxr_serialize_ActivityInfoVariant+0x132>
 801a5f4:	2800      	cmp	r0, #0
 801a5f6:	d1de      	bne.n	801a5b6 <uxr_serialize_ActivityInfoVariant+0x6a>
 801a5f8:	2700      	movs	r7, #0
 801a5fa:	e7b8      	b.n	801a56e <uxr_serialize_ActivityInfoVariant+0x22>
 801a5fc:	3108      	adds	r1, #8
 801a5fe:	44a2      	add	sl, r4
 801a600:	2210      	movs	r2, #16
 801a602:	4640      	mov	r0, r8
 801a604:	4449      	add	r1, r9
 801a606:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a60a:	f004 fcd1 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a60e:	4605      	mov	r5, r0
 801a610:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801a614:	4640      	mov	r0, r8
 801a616:	f7f8 fe97 	bl	8013348 <ucdr_serialize_uint32_t>
 801a61a:	4028      	ands	r0, r5
 801a61c:	b2c0      	uxtb	r0, r0
 801a61e:	e7e5      	b.n	801a5ec <uxr_serialize_ActivityInfoVariant+0xa0>
 801a620:	3108      	adds	r1, #8
 801a622:	44a2      	add	sl, r4
 801a624:	2204      	movs	r2, #4
 801a626:	4640      	mov	r0, r8
 801a628:	4449      	add	r1, r9
 801a62a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a62e:	f004 fcbf 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a632:	4605      	mov	r5, r0
 801a634:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a638:	4640      	mov	r0, r8
 801a63a:	f7f8 fc9b 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a63e:	4028      	ands	r0, r5
 801a640:	b2c0      	uxtb	r0, r0
 801a642:	e7d3      	b.n	801a5ec <uxr_serialize_ActivityInfoVariant+0xa0>
 801a644:	3108      	adds	r1, #8
 801a646:	44a2      	add	sl, r4
 801a648:	2202      	movs	r2, #2
 801a64a:	4640      	mov	r0, r8
 801a64c:	4449      	add	r1, r9
 801a64e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a652:	f004 fcad 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a656:	4605      	mov	r5, r0
 801a658:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a65c:	4640      	mov	r0, r8
 801a65e:	f7f8 fc5d 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a662:	4028      	ands	r0, r5
 801a664:	b2c0      	uxtb	r0, r0
 801a666:	e7c1      	b.n	801a5ec <uxr_serialize_ActivityInfoVariant+0xa0>
 801a668:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a66c:	4640      	mov	r0, r8
 801a66e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a672:	f7f9 b98f 	b.w	8013994 <ucdr_serialize_int16_t>
 801a676:	3401      	adds	r4, #1
 801a678:	68f2      	ldr	r2, [r6, #12]
 801a67a:	42a2      	cmp	r2, r4
 801a67c:	d8bc      	bhi.n	801a5f8 <uxr_serialize_ActivityInfoVariant+0xac>
 801a67e:	4007      	ands	r7, r0
 801a680:	b2ff      	uxtb	r7, r7
 801a682:	e774      	b.n	801a56e <uxr_serialize_ActivityInfoVariant+0x22>
 801a684:	3401      	adds	r4, #1
 801a686:	68f3      	ldr	r3, [r6, #12]
 801a688:	3518      	adds	r5, #24
 801a68a:	429c      	cmp	r4, r3
 801a68c:	d397      	bcc.n	801a5be <uxr_serialize_ActivityInfoVariant+0x72>
 801a68e:	e76e      	b.n	801a56e <uxr_serialize_ActivityInfoVariant+0x22>

0801a690 <uxr_deserialize_BaseObjectReply>:
 801a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a694:	2202      	movs	r2, #2
 801a696:	4606      	mov	r6, r0
 801a698:	460f      	mov	r7, r1
 801a69a:	f004 fced 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a69e:	2202      	movs	r2, #2
 801a6a0:	4605      	mov	r5, r0
 801a6a2:	4630      	mov	r0, r6
 801a6a4:	18b9      	adds	r1, r7, r2
 801a6a6:	f004 fce7 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a6aa:	4680      	mov	r8, r0
 801a6ac:	1d39      	adds	r1, r7, #4
 801a6ae:	4630      	mov	r0, r6
 801a6b0:	f7f8 fc4a 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a6b4:	ea05 0508 	and.w	r5, r5, r8
 801a6b8:	4604      	mov	r4, r0
 801a6ba:	1d79      	adds	r1, r7, #5
 801a6bc:	4630      	mov	r0, r6
 801a6be:	402c      	ands	r4, r5
 801a6c0:	f7f8 fc42 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a6c4:	4020      	ands	r0, r4
 801a6c6:	b2c0      	uxtb	r0, r0
 801a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a6cc <uxr_serialize_ReadSpecification>:
 801a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ce:	460e      	mov	r6, r1
 801a6d0:	4607      	mov	r7, r0
 801a6d2:	7809      	ldrb	r1, [r1, #0]
 801a6d4:	f7f8 fc22 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a6d8:	4604      	mov	r4, r0
 801a6da:	7871      	ldrb	r1, [r6, #1]
 801a6dc:	4638      	mov	r0, r7
 801a6de:	f7f8 fc1d 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a6e2:	4004      	ands	r4, r0
 801a6e4:	78b1      	ldrb	r1, [r6, #2]
 801a6e6:	4638      	mov	r0, r7
 801a6e8:	f7f8 fbea 	bl	8012ec0 <ucdr_serialize_bool>
 801a6ec:	78b3      	ldrb	r3, [r6, #2]
 801a6ee:	b2e4      	uxtb	r4, r4
 801a6f0:	4004      	ands	r4, r0
 801a6f2:	b943      	cbnz	r3, 801a706 <uxr_serialize_ReadSpecification+0x3a>
 801a6f4:	7a31      	ldrb	r1, [r6, #8]
 801a6f6:	4638      	mov	r0, r7
 801a6f8:	f7f8 fbe2 	bl	8012ec0 <ucdr_serialize_bool>
 801a6fc:	7a33      	ldrb	r3, [r6, #8]
 801a6fe:	4004      	ands	r4, r0
 801a700:	b93b      	cbnz	r3, 801a712 <uxr_serialize_ReadSpecification+0x46>
 801a702:	4620      	mov	r0, r4
 801a704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a706:	6871      	ldr	r1, [r6, #4]
 801a708:	4638      	mov	r0, r7
 801a70a:	f004 fd75 	bl	801f1f8 <ucdr_serialize_string>
 801a70e:	4004      	ands	r4, r0
 801a710:	e7f0      	b.n	801a6f4 <uxr_serialize_ReadSpecification+0x28>
 801a712:	8971      	ldrh	r1, [r6, #10]
 801a714:	4638      	mov	r0, r7
 801a716:	f7f8 fc2d 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a71a:	4605      	mov	r5, r0
 801a71c:	89b1      	ldrh	r1, [r6, #12]
 801a71e:	4638      	mov	r0, r7
 801a720:	f7f8 fc28 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a724:	4005      	ands	r5, r0
 801a726:	89f1      	ldrh	r1, [r6, #14]
 801a728:	4638      	mov	r0, r7
 801a72a:	b2ed      	uxtb	r5, r5
 801a72c:	f7f8 fc22 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a730:	8a31      	ldrh	r1, [r6, #16]
 801a732:	4025      	ands	r5, r4
 801a734:	4604      	mov	r4, r0
 801a736:	4638      	mov	r0, r7
 801a738:	4025      	ands	r5, r4
 801a73a:	f7f8 fc1b 	bl	8012f74 <ucdr_serialize_uint16_t>
 801a73e:	ea00 0405 	and.w	r4, r0, r5
 801a742:	4620      	mov	r0, r4
 801a744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a746:	bf00      	nop

0801a748 <uxr_serialize_CREATE_CLIENT_Payload>:
 801a748:	f7ff ba1e 	b.w	8019b88 <uxr_serialize_CLIENT_Representation>

0801a74c <uxr_serialize_CREATE_Payload>:
 801a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74e:	2202      	movs	r2, #2
 801a750:	4607      	mov	r7, r0
 801a752:	460e      	mov	r6, r1
 801a754:	f004 fc2c 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a758:	2202      	movs	r2, #2
 801a75a:	4605      	mov	r5, r0
 801a75c:	4638      	mov	r0, r7
 801a75e:	18b1      	adds	r1, r6, r2
 801a760:	f004 fc26 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a764:	7931      	ldrb	r1, [r6, #4]
 801a766:	4604      	mov	r4, r0
 801a768:	4638      	mov	r0, r7
 801a76a:	f7f8 fbd7 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a76e:	b170      	cbz	r0, 801a78e <uxr_serialize_CREATE_Payload+0x42>
 801a770:	7933      	ldrb	r3, [r6, #4]
 801a772:	402c      	ands	r4, r5
 801a774:	3b01      	subs	r3, #1
 801a776:	b2e4      	uxtb	r4, r4
 801a778:	2b0d      	cmp	r3, #13
 801a77a:	d809      	bhi.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a77c:	e8df f003 	tbb	[pc, r3]
 801a780:	23230a4c 	.word	0x23230a4c
 801a784:	0a0a0a0a 	.word	0x0a0a0a0a
 801a788:	12121208 	.word	0x12121208
 801a78c:	3e45      	.short	0x3e45
 801a78e:	2400      	movs	r4, #0
 801a790:	4620      	mov	r0, r4
 801a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a794:	f106 0108 	add.w	r1, r6, #8
 801a798:	4638      	mov	r0, r7
 801a79a:	f7ff fafb 	bl	8019d94 <uxr_serialize_DATAWRITER_Representation>
 801a79e:	4004      	ands	r4, r0
 801a7a0:	4620      	mov	r0, r4
 801a7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7a4:	7a31      	ldrb	r1, [r6, #8]
 801a7a6:	4638      	mov	r0, r7
 801a7a8:	f7f8 fbb8 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a7ac:	2800      	cmp	r0, #0
 801a7ae:	d0ee      	beq.n	801a78e <uxr_serialize_CREATE_Payload+0x42>
 801a7b0:	7a33      	ldrb	r3, [r6, #8]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d001      	beq.n	801a7ba <uxr_serialize_CREATE_Payload+0x6e>
 801a7b6:	2b02      	cmp	r3, #2
 801a7b8:	d1ea      	bne.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a7ba:	68f1      	ldr	r1, [r6, #12]
 801a7bc:	4638      	mov	r0, r7
 801a7be:	f004 fd1b 	bl	801f1f8 <ucdr_serialize_string>
 801a7c2:	4004      	ands	r4, r0
 801a7c4:	e7e4      	b.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a7c6:	7a31      	ldrb	r1, [r6, #8]
 801a7c8:	4638      	mov	r0, r7
 801a7ca:	f7f8 fba7 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a7ce:	4605      	mov	r5, r0
 801a7d0:	b158      	cbz	r0, 801a7ea <uxr_serialize_CREATE_Payload+0x9e>
 801a7d2:	7a33      	ldrb	r3, [r6, #8]
 801a7d4:	2b02      	cmp	r3, #2
 801a7d6:	d034      	beq.n	801a842 <uxr_serialize_CREATE_Payload+0xf6>
 801a7d8:	2b03      	cmp	r3, #3
 801a7da:	d106      	bne.n	801a7ea <uxr_serialize_CREATE_Payload+0x9e>
 801a7dc:	68f2      	ldr	r2, [r6, #12]
 801a7de:	f106 0110 	add.w	r1, r6, #16
 801a7e2:	4638      	mov	r0, r7
 801a7e4:	f004 fcdc 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 801a7e8:	4605      	mov	r5, r0
 801a7ea:	2202      	movs	r2, #2
 801a7ec:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801a7f0:	4638      	mov	r0, r7
 801a7f2:	f004 fbdd 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a7f6:	4028      	ands	r0, r5
 801a7f8:	4004      	ands	r4, r0
 801a7fa:	e7c9      	b.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a7fc:	f106 0108 	add.w	r1, r6, #8
 801a800:	4638      	mov	r0, r7
 801a802:	f7ff f9c1 	bl	8019b88 <uxr_serialize_CLIENT_Representation>
 801a806:	4004      	ands	r4, r0
 801a808:	e7c2      	b.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a80a:	f106 0108 	add.w	r1, r6, #8
 801a80e:	4638      	mov	r0, r7
 801a810:	f7ff fa76 	bl	8019d00 <uxr_serialize_AGENT_Representation>
 801a814:	4004      	ands	r4, r0
 801a816:	e7bb      	b.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a818:	7a31      	ldrb	r1, [r6, #8]
 801a81a:	4638      	mov	r0, r7
 801a81c:	f7f8 fb7e 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a820:	4605      	mov	r5, r0
 801a822:	b130      	cbz	r0, 801a832 <uxr_serialize_CREATE_Payload+0xe6>
 801a824:	7a33      	ldrb	r3, [r6, #8]
 801a826:	2b02      	cmp	r3, #2
 801a828:	d011      	beq.n	801a84e <uxr_serialize_CREATE_Payload+0x102>
 801a82a:	2b03      	cmp	r3, #3
 801a82c:	d015      	beq.n	801a85a <uxr_serialize_CREATE_Payload+0x10e>
 801a82e:	2b01      	cmp	r3, #1
 801a830:	d00d      	beq.n	801a84e <uxr_serialize_CREATE_Payload+0x102>
 801a832:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801a836:	4638      	mov	r0, r7
 801a838:	f7f9 f8ac 	bl	8013994 <ucdr_serialize_int16_t>
 801a83c:	4028      	ands	r0, r5
 801a83e:	4004      	ands	r4, r0
 801a840:	e7a6      	b.n	801a790 <uxr_serialize_CREATE_Payload+0x44>
 801a842:	68f1      	ldr	r1, [r6, #12]
 801a844:	4638      	mov	r0, r7
 801a846:	f004 fcd7 	bl	801f1f8 <ucdr_serialize_string>
 801a84a:	4605      	mov	r5, r0
 801a84c:	e7cd      	b.n	801a7ea <uxr_serialize_CREATE_Payload+0x9e>
 801a84e:	68f1      	ldr	r1, [r6, #12]
 801a850:	4638      	mov	r0, r7
 801a852:	f004 fcd1 	bl	801f1f8 <ucdr_serialize_string>
 801a856:	4605      	mov	r5, r0
 801a858:	e7eb      	b.n	801a832 <uxr_serialize_CREATE_Payload+0xe6>
 801a85a:	68f2      	ldr	r2, [r6, #12]
 801a85c:	f106 0110 	add.w	r1, r6, #16
 801a860:	4638      	mov	r0, r7
 801a862:	f004 fc9d 	bl	801f1a0 <ucdr_serialize_sequence_uint8_t>
 801a866:	4605      	mov	r5, r0
 801a868:	e7e3      	b.n	801a832 <uxr_serialize_CREATE_Payload+0xe6>
 801a86a:	bf00      	nop

0801a86c <uxr_serialize_GET_INFO_Payload>:
 801a86c:	b570      	push	{r4, r5, r6, lr}
 801a86e:	2202      	movs	r2, #2
 801a870:	4605      	mov	r5, r0
 801a872:	460e      	mov	r6, r1
 801a874:	f004 fb9c 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a878:	2202      	movs	r2, #2
 801a87a:	4604      	mov	r4, r0
 801a87c:	4628      	mov	r0, r5
 801a87e:	18b1      	adds	r1, r6, r2
 801a880:	f004 fb96 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a884:	4603      	mov	r3, r0
 801a886:	6871      	ldr	r1, [r6, #4]
 801a888:	4628      	mov	r0, r5
 801a88a:	401c      	ands	r4, r3
 801a88c:	f7f8 fd5c 	bl	8013348 <ucdr_serialize_uint32_t>
 801a890:	b2e4      	uxtb	r4, r4
 801a892:	4020      	ands	r0, r4
 801a894:	bd70      	pop	{r4, r5, r6, pc}
 801a896:	bf00      	nop

0801a898 <uxr_deserialize_GET_INFO_Payload>:
 801a898:	b570      	push	{r4, r5, r6, lr}
 801a89a:	2202      	movs	r2, #2
 801a89c:	4605      	mov	r5, r0
 801a89e:	460e      	mov	r6, r1
 801a8a0:	f004 fbea 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a8a4:	2202      	movs	r2, #2
 801a8a6:	4604      	mov	r4, r0
 801a8a8:	4628      	mov	r0, r5
 801a8aa:	18b1      	adds	r1, r6, r2
 801a8ac:	f004 fbe4 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	1d31      	adds	r1, r6, #4
 801a8b4:	4628      	mov	r0, r5
 801a8b6:	401c      	ands	r4, r3
 801a8b8:	f7f8 fe76 	bl	80135a8 <ucdr_deserialize_uint32_t>
 801a8bc:	b2e4      	uxtb	r4, r4
 801a8be:	4020      	ands	r0, r4
 801a8c0:	bd70      	pop	{r4, r5, r6, pc}
 801a8c2:	bf00      	nop

0801a8c4 <uxr_serialize_DELETE_Payload>:
 801a8c4:	b570      	push	{r4, r5, r6, lr}
 801a8c6:	2202      	movs	r2, #2
 801a8c8:	4605      	mov	r5, r0
 801a8ca:	460e      	mov	r6, r1
 801a8cc:	f004 fb70 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a8d0:	2202      	movs	r2, #2
 801a8d2:	4604      	mov	r4, r0
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	18b1      	adds	r1, r6, r2
 801a8d8:	f004 fb6a 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a8dc:	4020      	ands	r0, r4
 801a8de:	b2c0      	uxtb	r0, r0
 801a8e0:	bd70      	pop	{r4, r5, r6, pc}
 801a8e2:	bf00      	nop

0801a8e4 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8e8:	460e      	mov	r6, r1
 801a8ea:	4605      	mov	r5, r0
 801a8ec:	f7f8 fb2c 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a8f0:	4604      	mov	r4, r0
 801a8f2:	1c71      	adds	r1, r6, #1
 801a8f4:	4628      	mov	r0, r5
 801a8f6:	f7f8 fb27 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a8fa:	2204      	movs	r2, #4
 801a8fc:	4681      	mov	r9, r0
 801a8fe:	4628      	mov	r0, r5
 801a900:	18b1      	adds	r1, r6, r2
 801a902:	f004 fbb9 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a906:	f106 0108 	add.w	r1, r6, #8
 801a90a:	4680      	mov	r8, r0
 801a90c:	2202      	movs	r2, #2
 801a90e:	4628      	mov	r0, r5
 801a910:	f004 fbb2 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a914:	ea04 0309 	and.w	r3, r4, r9
 801a918:	4607      	mov	r7, r0
 801a91a:	2202      	movs	r2, #2
 801a91c:	b2db      	uxtb	r3, r3
 801a91e:	f106 010a 	add.w	r1, r6, #10
 801a922:	4628      	mov	r0, r5
 801a924:	ea03 0408 	and.w	r4, r3, r8
 801a928:	f004 fba6 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a92c:	4603      	mov	r3, r0
 801a92e:	4628      	mov	r0, r5
 801a930:	403c      	ands	r4, r7
 801a932:	f106 010c 	add.w	r1, r6, #12
 801a936:	461d      	mov	r5, r3
 801a938:	f7f8 fad8 	bl	8012eec <ucdr_deserialize_bool>
 801a93c:	4025      	ands	r5, r4
 801a93e:	4028      	ands	r0, r5
 801a940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a944 <uxr_deserialize_STATUS_Payload>:
 801a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a948:	2202      	movs	r2, #2
 801a94a:	4606      	mov	r6, r0
 801a94c:	460f      	mov	r7, r1
 801a94e:	f004 fb93 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a952:	2202      	movs	r2, #2
 801a954:	4605      	mov	r5, r0
 801a956:	4630      	mov	r0, r6
 801a958:	18b9      	adds	r1, r7, r2
 801a95a:	f004 fb8d 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801a95e:	4680      	mov	r8, r0
 801a960:	1d39      	adds	r1, r7, #4
 801a962:	4630      	mov	r0, r6
 801a964:	f7f8 faf0 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a968:	ea05 0508 	and.w	r5, r5, r8
 801a96c:	4604      	mov	r4, r0
 801a96e:	1d79      	adds	r1, r7, #5
 801a970:	4630      	mov	r0, r6
 801a972:	402c      	ands	r4, r5
 801a974:	f7f8 fae8 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801a978:	4020      	ands	r0, r4
 801a97a:	b2c0      	uxtb	r0, r0
 801a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a980 <uxr_serialize_INFO_Payload>:
 801a980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a984:	2202      	movs	r2, #2
 801a986:	460c      	mov	r4, r1
 801a988:	4605      	mov	r5, r0
 801a98a:	f004 fb11 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a98e:	2202      	movs	r2, #2
 801a990:	4680      	mov	r8, r0
 801a992:	4628      	mov	r0, r5
 801a994:	18a1      	adds	r1, r4, r2
 801a996:	f004 fb0b 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801a99a:	4607      	mov	r7, r0
 801a99c:	7921      	ldrb	r1, [r4, #4]
 801a99e:	4628      	mov	r0, r5
 801a9a0:	f7f8 fabc 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a9a4:	ea08 0807 	and.w	r8, r8, r7
 801a9a8:	4606      	mov	r6, r0
 801a9aa:	7961      	ldrb	r1, [r4, #5]
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	ea06 0608 	and.w	r6, r6, r8
 801a9b2:	f7f8 fab3 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a9b6:	7a21      	ldrb	r1, [r4, #8]
 801a9b8:	4030      	ands	r0, r6
 801a9ba:	b2c7      	uxtb	r7, r0
 801a9bc:	4628      	mov	r0, r5
 801a9be:	f7f8 fa7f 	bl	8012ec0 <ucdr_serialize_bool>
 801a9c2:	7a23      	ldrb	r3, [r4, #8]
 801a9c4:	4606      	mov	r6, r0
 801a9c6:	b96b      	cbnz	r3, 801a9e4 <uxr_serialize_INFO_Payload+0x64>
 801a9c8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801a9cc:	4628      	mov	r0, r5
 801a9ce:	f7f8 fa77 	bl	8012ec0 <ucdr_serialize_bool>
 801a9d2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801a9d6:	4030      	ands	r0, r6
 801a9d8:	b2c6      	uxtb	r6, r0
 801a9da:	b983      	cbnz	r3, 801a9fe <uxr_serialize_INFO_Payload+0x7e>
 801a9dc:	ea06 0007 	and.w	r0, r6, r7
 801a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9e4:	7b21      	ldrb	r1, [r4, #12]
 801a9e6:	4628      	mov	r0, r5
 801a9e8:	f7f8 fa98 	bl	8012f1c <ucdr_serialize_uint8_t>
 801a9ec:	b188      	cbz	r0, 801aa12 <uxr_serialize_INFO_Payload+0x92>
 801a9ee:	f104 010c 	add.w	r1, r4, #12
 801a9f2:	4628      	mov	r0, r5
 801a9f4:	f7ff f9f6 	bl	8019de4 <uxr_serialize_ObjectVariant.part.0>
 801a9f8:	4030      	ands	r0, r6
 801a9fa:	b2c6      	uxtb	r6, r0
 801a9fc:	e7e4      	b.n	801a9c8 <uxr_serialize_INFO_Payload+0x48>
 801a9fe:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801aa02:	4628      	mov	r0, r5
 801aa04:	f7ff fda2 	bl	801a54c <uxr_serialize_ActivityInfoVariant>
 801aa08:	4006      	ands	r6, r0
 801aa0a:	ea06 0007 	and.w	r0, r6, r7
 801aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa12:	4606      	mov	r6, r0
 801aa14:	e7d8      	b.n	801a9c8 <uxr_serialize_INFO_Payload+0x48>
 801aa16:	bf00      	nop

0801aa18 <uxr_serialize_READ_DATA_Payload>:
 801aa18:	b570      	push	{r4, r5, r6, lr}
 801aa1a:	2202      	movs	r2, #2
 801aa1c:	4605      	mov	r5, r0
 801aa1e:	460e      	mov	r6, r1
 801aa20:	f004 fac6 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801aa24:	2202      	movs	r2, #2
 801aa26:	4604      	mov	r4, r0
 801aa28:	4628      	mov	r0, r5
 801aa2a:	18b1      	adds	r1, r6, r2
 801aa2c:	f004 fac0 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801aa30:	4603      	mov	r3, r0
 801aa32:	1d31      	adds	r1, r6, #4
 801aa34:	4628      	mov	r0, r5
 801aa36:	401c      	ands	r4, r3
 801aa38:	f7ff fe48 	bl	801a6cc <uxr_serialize_ReadSpecification>
 801aa3c:	b2e4      	uxtb	r4, r4
 801aa3e:	4020      	ands	r0, r4
 801aa40:	bd70      	pop	{r4, r5, r6, pc}
 801aa42:	bf00      	nop

0801aa44 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801aa44:	b570      	push	{r4, r5, r6, lr}
 801aa46:	2202      	movs	r2, #2
 801aa48:	4605      	mov	r5, r0
 801aa4a:	460e      	mov	r6, r1
 801aa4c:	f004 fab0 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801aa50:	2202      	movs	r2, #2
 801aa52:	4604      	mov	r4, r0
 801aa54:	4628      	mov	r0, r5
 801aa56:	18b1      	adds	r1, r6, r2
 801aa58:	f004 faaa 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801aa5c:	4020      	ands	r0, r4
 801aa5e:	b2c0      	uxtb	r0, r0
 801aa60:	bd70      	pop	{r4, r5, r6, pc}
 801aa62:	bf00      	nop

0801aa64 <uxr_serialize_ACKNACK_Payload>:
 801aa64:	b570      	push	{r4, r5, r6, lr}
 801aa66:	460c      	mov	r4, r1
 801aa68:	4605      	mov	r5, r0
 801aa6a:	460e      	mov	r6, r1
 801aa6c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801aa70:	f7f8 fa80 	bl	8012f74 <ucdr_serialize_uint16_t>
 801aa74:	2202      	movs	r2, #2
 801aa76:	4621      	mov	r1, r4
 801aa78:	4604      	mov	r4, r0
 801aa7a:	4628      	mov	r0, r5
 801aa7c:	f004 fa98 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801aa80:	4603      	mov	r3, r0
 801aa82:	7931      	ldrb	r1, [r6, #4]
 801aa84:	4628      	mov	r0, r5
 801aa86:	401c      	ands	r4, r3
 801aa88:	f7f8 fa48 	bl	8012f1c <ucdr_serialize_uint8_t>
 801aa8c:	b2e4      	uxtb	r4, r4
 801aa8e:	4020      	ands	r0, r4
 801aa90:	bd70      	pop	{r4, r5, r6, pc}
 801aa92:	bf00      	nop

0801aa94 <uxr_deserialize_ACKNACK_Payload>:
 801aa94:	b570      	push	{r4, r5, r6, lr}
 801aa96:	460e      	mov	r6, r1
 801aa98:	4605      	mov	r5, r0
 801aa9a:	f7f8 fb6b 	bl	8013174 <ucdr_deserialize_uint16_t>
 801aa9e:	2202      	movs	r2, #2
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	4628      	mov	r0, r5
 801aaa4:	18b1      	adds	r1, r6, r2
 801aaa6:	f004 fae7 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801aaaa:	4603      	mov	r3, r0
 801aaac:	1d31      	adds	r1, r6, #4
 801aaae:	4628      	mov	r0, r5
 801aab0:	401c      	ands	r4, r3
 801aab2:	f7f8 fa49 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801aab6:	b2e4      	uxtb	r4, r4
 801aab8:	4020      	ands	r0, r4
 801aaba:	bd70      	pop	{r4, r5, r6, pc}

0801aabc <uxr_serialize_HEARTBEAT_Payload>:
 801aabc:	b570      	push	{r4, r5, r6, lr}
 801aabe:	460d      	mov	r5, r1
 801aac0:	4606      	mov	r6, r0
 801aac2:	8809      	ldrh	r1, [r1, #0]
 801aac4:	f7f8 fa56 	bl	8012f74 <ucdr_serialize_uint16_t>
 801aac8:	8869      	ldrh	r1, [r5, #2]
 801aaca:	4604      	mov	r4, r0
 801aacc:	4630      	mov	r0, r6
 801aace:	f7f8 fa51 	bl	8012f74 <ucdr_serialize_uint16_t>
 801aad2:	4603      	mov	r3, r0
 801aad4:	7929      	ldrb	r1, [r5, #4]
 801aad6:	4630      	mov	r0, r6
 801aad8:	401c      	ands	r4, r3
 801aada:	f7f8 fa1f 	bl	8012f1c <ucdr_serialize_uint8_t>
 801aade:	b2e4      	uxtb	r4, r4
 801aae0:	4020      	ands	r0, r4
 801aae2:	bd70      	pop	{r4, r5, r6, pc}

0801aae4 <uxr_deserialize_HEARTBEAT_Payload>:
 801aae4:	b570      	push	{r4, r5, r6, lr}
 801aae6:	460e      	mov	r6, r1
 801aae8:	4605      	mov	r5, r0
 801aaea:	f7f8 fb43 	bl	8013174 <ucdr_deserialize_uint16_t>
 801aaee:	4604      	mov	r4, r0
 801aaf0:	1cb1      	adds	r1, r6, #2
 801aaf2:	4628      	mov	r0, r5
 801aaf4:	f7f8 fb3e 	bl	8013174 <ucdr_deserialize_uint16_t>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	1d31      	adds	r1, r6, #4
 801aafc:	4628      	mov	r0, r5
 801aafe:	401c      	ands	r4, r3
 801ab00:	f7f8 fa22 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801ab04:	b2e4      	uxtb	r4, r4
 801ab06:	4020      	ands	r0, r4
 801ab08:	bd70      	pop	{r4, r5, r6, pc}
 801ab0a:	bf00      	nop

0801ab0c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801ab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab10:	460e      	mov	r6, r1
 801ab12:	4605      	mov	r5, r0
 801ab14:	f7f9 f8ca 	bl	8013cac <ucdr_deserialize_int32_t>
 801ab18:	4607      	mov	r7, r0
 801ab1a:	1d31      	adds	r1, r6, #4
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	f7f8 fd43 	bl	80135a8 <ucdr_deserialize_uint32_t>
 801ab22:	4680      	mov	r8, r0
 801ab24:	f106 0108 	add.w	r1, r6, #8
 801ab28:	4628      	mov	r0, r5
 801ab2a:	f7f9 f8bf 	bl	8013cac <ucdr_deserialize_int32_t>
 801ab2e:	ea07 0708 	and.w	r7, r7, r8
 801ab32:	4604      	mov	r4, r0
 801ab34:	f106 010c 	add.w	r1, r6, #12
 801ab38:	4628      	mov	r0, r5
 801ab3a:	403c      	ands	r4, r7
 801ab3c:	f7f8 fd34 	bl	80135a8 <ucdr_deserialize_uint32_t>
 801ab40:	f106 0110 	add.w	r1, r6, #16
 801ab44:	4004      	ands	r4, r0
 801ab46:	4628      	mov	r0, r5
 801ab48:	f7f9 f8b0 	bl	8013cac <ucdr_deserialize_int32_t>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	b2e4      	uxtb	r4, r4
 801ab50:	4628      	mov	r0, r5
 801ab52:	461d      	mov	r5, r3
 801ab54:	f106 0114 	add.w	r1, r6, #20
 801ab58:	f7f8 fd26 	bl	80135a8 <ucdr_deserialize_uint32_t>
 801ab5c:	402c      	ands	r4, r5
 801ab5e:	4020      	ands	r0, r4
 801ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ab64 <uxr_serialize_SampleIdentity>:
 801ab64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab68:	4604      	mov	r4, r0
 801ab6a:	460d      	mov	r5, r1
 801ab6c:	220c      	movs	r2, #12
 801ab6e:	f004 fa1f 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801ab72:	2203      	movs	r2, #3
 801ab74:	f105 010c 	add.w	r1, r5, #12
 801ab78:	4607      	mov	r7, r0
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	f004 fa18 	bl	801efb0 <ucdr_serialize_array_uint8_t>
 801ab80:	7be9      	ldrb	r1, [r5, #15]
 801ab82:	4680      	mov	r8, r0
 801ab84:	4620      	mov	r0, r4
 801ab86:	f7f8 f9c9 	bl	8012f1c <ucdr_serialize_uint8_t>
 801ab8a:	6929      	ldr	r1, [r5, #16]
 801ab8c:	4606      	mov	r6, r0
 801ab8e:	4620      	mov	r0, r4
 801ab90:	f7f8 fff4 	bl	8013b7c <ucdr_serialize_int32_t>
 801ab94:	ea07 0708 	and.w	r7, r7, r8
 801ab98:	4603      	mov	r3, r0
 801ab9a:	4620      	mov	r0, r4
 801ab9c:	403e      	ands	r6, r7
 801ab9e:	6969      	ldr	r1, [r5, #20]
 801aba0:	461c      	mov	r4, r3
 801aba2:	f7f8 fbd1 	bl	8013348 <ucdr_serialize_uint32_t>
 801aba6:	4034      	ands	r4, r6
 801aba8:	4020      	ands	r0, r4
 801abaa:	b2c0      	uxtb	r0, r0
 801abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801abb0 <uxr_deserialize_SampleIdentity>:
 801abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abb4:	4604      	mov	r4, r0
 801abb6:	460d      	mov	r5, r1
 801abb8:	220c      	movs	r2, #12
 801abba:	f004 fa5d 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801abbe:	2203      	movs	r2, #3
 801abc0:	f105 010c 	add.w	r1, r5, #12
 801abc4:	4607      	mov	r7, r0
 801abc6:	4620      	mov	r0, r4
 801abc8:	f004 fa56 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801abcc:	f105 010f 	add.w	r1, r5, #15
 801abd0:	4680      	mov	r8, r0
 801abd2:	4620      	mov	r0, r4
 801abd4:	f7f8 f9b8 	bl	8012f48 <ucdr_deserialize_uint8_t>
 801abd8:	f105 0110 	add.w	r1, r5, #16
 801abdc:	4606      	mov	r6, r0
 801abde:	4620      	mov	r0, r4
 801abe0:	f7f9 f864 	bl	8013cac <ucdr_deserialize_int32_t>
 801abe4:	ea07 0708 	and.w	r7, r7, r8
 801abe8:	4603      	mov	r3, r0
 801abea:	4620      	mov	r0, r4
 801abec:	403e      	ands	r6, r7
 801abee:	f105 0114 	add.w	r1, r5, #20
 801abf2:	461c      	mov	r4, r3
 801abf4:	f7f8 fcd8 	bl	80135a8 <ucdr_deserialize_uint32_t>
 801abf8:	4034      	ands	r4, r6
 801abfa:	4020      	ands	r0, r4
 801abfc:	b2c0      	uxtb	r0, r0
 801abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac02:	bf00      	nop

0801ac04 <rcl_client_get_rmw_handle>:
 801ac04:	b118      	cbz	r0, 801ac0e <rcl_client_get_rmw_handle+0xa>
 801ac06:	6800      	ldr	r0, [r0, #0]
 801ac08:	b108      	cbz	r0, 801ac0e <rcl_client_get_rmw_handle+0xa>
 801ac0a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801ac0e:	4770      	bx	lr

0801ac10 <rcl_send_request>:
 801ac10:	b570      	push	{r4, r5, r6, lr}
 801ac12:	b082      	sub	sp, #8
 801ac14:	b1f8      	cbz	r0, 801ac56 <rcl_send_request+0x46>
 801ac16:	4604      	mov	r4, r0
 801ac18:	6800      	ldr	r0, [r0, #0]
 801ac1a:	b1e0      	cbz	r0, 801ac56 <rcl_send_request+0x46>
 801ac1c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801ac20:	b1cb      	cbz	r3, 801ac56 <rcl_send_request+0x46>
 801ac22:	460e      	mov	r6, r1
 801ac24:	b1e1      	cbz	r1, 801ac60 <rcl_send_request+0x50>
 801ac26:	4615      	mov	r5, r2
 801ac28:	b1d2      	cbz	r2, 801ac60 <rcl_send_request+0x50>
 801ac2a:	2105      	movs	r1, #5
 801ac2c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801ac30:	f002 feca 	bl	801d9c8 <__atomic_load_8>
 801ac34:	4602      	mov	r2, r0
 801ac36:	460b      	mov	r3, r1
 801ac38:	4631      	mov	r1, r6
 801ac3a:	e9c5 2300 	strd	r2, r3, [r5]
 801ac3e:	6823      	ldr	r3, [r4, #0]
 801ac40:	462a      	mov	r2, r5
 801ac42:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801ac46:	f003 fe0d 	bl	801e864 <rmw_send_request>
 801ac4a:	4606      	mov	r6, r0
 801ac4c:	b160      	cbz	r0, 801ac68 <rcl_send_request+0x58>
 801ac4e:	2601      	movs	r6, #1
 801ac50:	4630      	mov	r0, r6
 801ac52:	b002      	add	sp, #8
 801ac54:	bd70      	pop	{r4, r5, r6, pc}
 801ac56:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	b002      	add	sp, #8
 801ac5e:	bd70      	pop	{r4, r5, r6, pc}
 801ac60:	260b      	movs	r6, #11
 801ac62:	4630      	mov	r0, r6
 801ac64:	b002      	add	sp, #8
 801ac66:	bd70      	pop	{r4, r5, r6, pc}
 801ac68:	6820      	ldr	r0, [r4, #0]
 801ac6a:	2105      	movs	r1, #5
 801ac6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac70:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801ac74:	9100      	str	r1, [sp, #0]
 801ac76:	f002 ff13 	bl	801daa0 <__atomic_exchange_8>
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	b002      	add	sp, #8
 801ac7e:	bd70      	pop	{r4, r5, r6, pc}

0801ac80 <rcl_take_response>:
 801ac80:	b570      	push	{r4, r5, r6, lr}
 801ac82:	468e      	mov	lr, r1
 801ac84:	b08c      	sub	sp, #48	; 0x30
 801ac86:	460c      	mov	r4, r1
 801ac88:	4616      	mov	r6, r2
 801ac8a:	f10d 0c18 	add.w	ip, sp, #24
 801ac8e:	4605      	mov	r5, r0
 801ac90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ac94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ac9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aca0:	b35d      	cbz	r5, 801acfa <rcl_take_response+0x7a>
 801aca2:	682b      	ldr	r3, [r5, #0]
 801aca4:	b34b      	cbz	r3, 801acfa <rcl_take_response+0x7a>
 801aca6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801acaa:	b330      	cbz	r0, 801acfa <rcl_take_response+0x7a>
 801acac:	b346      	cbz	r6, 801ad00 <rcl_take_response+0x80>
 801acae:	2300      	movs	r3, #0
 801acb0:	4632      	mov	r2, r6
 801acb2:	a902      	add	r1, sp, #8
 801acb4:	f88d 3007 	strb.w	r3, [sp, #7]
 801acb8:	f10d 0307 	add.w	r3, sp, #7
 801acbc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801ad08 <rcl_take_response+0x88>
 801acc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801acc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801acc8:	f003 fed4 	bl	801ea74 <rmw_take_response>
 801accc:	4605      	mov	r5, r0
 801acce:	b9c8      	cbnz	r0, 801ad04 <rcl_take_response+0x84>
 801acd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801acd4:	f240 13f5 	movw	r3, #501	; 0x1f5
 801acd8:	2a00      	cmp	r2, #0
 801acda:	bf08      	it	eq
 801acdc:	461d      	moveq	r5, r3
 801acde:	f10d 0e18 	add.w	lr, sp, #24
 801ace2:	46a4      	mov	ip, r4
 801ace4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ace8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801acec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801acf0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801acf4:	4628      	mov	r0, r5
 801acf6:	b00c      	add	sp, #48	; 0x30
 801acf8:	bd70      	pop	{r4, r5, r6, pc}
 801acfa:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801acfe:	e7ee      	b.n	801acde <rcl_take_response+0x5e>
 801ad00:	250b      	movs	r5, #11
 801ad02:	e7ec      	b.n	801acde <rcl_take_response+0x5e>
 801ad04:	2501      	movs	r5, #1
 801ad06:	e7ea      	b.n	801acde <rcl_take_response+0x5e>
	...

0801ad10 <rcl_client_is_valid>:
 801ad10:	b130      	cbz	r0, 801ad20 <rcl_client_is_valid+0x10>
 801ad12:	6800      	ldr	r0, [r0, #0]
 801ad14:	b120      	cbz	r0, 801ad20 <rcl_client_is_valid+0x10>
 801ad16:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801ad1a:	3800      	subs	r0, #0
 801ad1c:	bf18      	it	ne
 801ad1e:	2001      	movne	r0, #1
 801ad20:	4770      	bx	lr
 801ad22:	bf00      	nop

0801ad24 <rcl_convert_rmw_ret_to_rcl_ret>:
 801ad24:	280b      	cmp	r0, #11
 801ad26:	dc0d      	bgt.n	801ad44 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801ad28:	2800      	cmp	r0, #0
 801ad2a:	db09      	blt.n	801ad40 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ad2c:	280b      	cmp	r0, #11
 801ad2e:	d807      	bhi.n	801ad40 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ad30:	e8df f000 	tbb	[pc, r0]
 801ad34:	07060607 	.word	0x07060607
 801ad38:	06060606 	.word	0x06060606
 801ad3c:	07070606 	.word	0x07070606
 801ad40:	2001      	movs	r0, #1
 801ad42:	4770      	bx	lr
 801ad44:	28cb      	cmp	r0, #203	; 0xcb
 801ad46:	bf18      	it	ne
 801ad48:	2001      	movne	r0, #1
 801ad4a:	4770      	bx	lr

0801ad4c <rcl_get_zero_initialized_context>:
 801ad4c:	4a03      	ldr	r2, [pc, #12]	; (801ad5c <rcl_get_zero_initialized_context+0x10>)
 801ad4e:	4603      	mov	r3, r0
 801ad50:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ad54:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad58:	4618      	mov	r0, r3
 801ad5a:	4770      	bx	lr
 801ad5c:	08022b94 	.word	0x08022b94

0801ad60 <rcl_context_is_valid>:
 801ad60:	b118      	cbz	r0, 801ad6a <rcl_context_is_valid+0xa>
 801ad62:	6840      	ldr	r0, [r0, #4]
 801ad64:	3800      	subs	r0, #0
 801ad66:	bf18      	it	ne
 801ad68:	2001      	movne	r0, #1
 801ad6a:	4770      	bx	lr

0801ad6c <__cleanup_context>:
 801ad6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad70:	4606      	mov	r6, r0
 801ad72:	2300      	movs	r3, #0
 801ad74:	6800      	ldr	r0, [r0, #0]
 801ad76:	6073      	str	r3, [r6, #4]
 801ad78:	2800      	cmp	r0, #0
 801ad7a:	d049      	beq.n	801ae10 <__cleanup_context+0xa4>
 801ad7c:	6947      	ldr	r7, [r0, #20]
 801ad7e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ad82:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801ad86:	b137      	cbz	r7, 801ad96 <__cleanup_context+0x2a>
 801ad88:	3014      	adds	r0, #20
 801ad8a:	f7f9 fae5 	bl	8014358 <rcl_init_options_fini>
 801ad8e:	4607      	mov	r7, r0
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d144      	bne.n	801ae1e <__cleanup_context+0xb2>
 801ad94:	6830      	ldr	r0, [r6, #0]
 801ad96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ad98:	b143      	cbz	r3, 801adac <__cleanup_context+0x40>
 801ad9a:	3028      	adds	r0, #40	; 0x28
 801ad9c:	f7fa ff9e 	bl	8015cdc <rmw_context_fini>
 801ada0:	b118      	cbz	r0, 801adaa <__cleanup_context+0x3e>
 801ada2:	2f00      	cmp	r7, #0
 801ada4:	d03e      	beq.n	801ae24 <__cleanup_context+0xb8>
 801ada6:	f7fa fc8b 	bl	80156c0 <rcutils_reset_error>
 801adaa:	6830      	ldr	r0, [r6, #0]
 801adac:	6a03      	ldr	r3, [r0, #32]
 801adae:	b1db      	cbz	r3, 801ade8 <__cleanup_context+0x7c>
 801adb0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801adb4:	2a01      	cmp	r2, #1
 801adb6:	f17c 0100 	sbcs.w	r1, ip, #0
 801adba:	db11      	blt.n	801ade0 <__cleanup_context+0x74>
 801adbc:	2400      	movs	r4, #0
 801adbe:	4625      	mov	r5, r4
 801adc0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801adc4:	4649      	mov	r1, r9
 801adc6:	b1b8      	cbz	r0, 801adf8 <__cleanup_context+0x8c>
 801adc8:	47c0      	blx	r8
 801adca:	6833      	ldr	r3, [r6, #0]
 801adcc:	3401      	adds	r4, #1
 801adce:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801add2:	f145 0500 	adc.w	r5, r5, #0
 801add6:	6a1b      	ldr	r3, [r3, #32]
 801add8:	4294      	cmp	r4, r2
 801adda:	eb75 010c 	sbcs.w	r1, r5, ip
 801adde:	dbef      	blt.n	801adc0 <__cleanup_context+0x54>
 801ade0:	4618      	mov	r0, r3
 801ade2:	4649      	mov	r1, r9
 801ade4:	47c0      	blx	r8
 801ade6:	6830      	ldr	r0, [r6, #0]
 801ade8:	4649      	mov	r1, r9
 801adea:	47c0      	blx	r8
 801adec:	2300      	movs	r3, #0
 801adee:	4638      	mov	r0, r7
 801adf0:	e9c6 3300 	strd	r3, r3, [r6]
 801adf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adf8:	3401      	adds	r4, #1
 801adfa:	f145 0500 	adc.w	r5, r5, #0
 801adfe:	4294      	cmp	r4, r2
 801ae00:	eb75 010c 	sbcs.w	r1, r5, ip
 801ae04:	dbdc      	blt.n	801adc0 <__cleanup_context+0x54>
 801ae06:	4618      	mov	r0, r3
 801ae08:	4649      	mov	r1, r9
 801ae0a:	47c0      	blx	r8
 801ae0c:	6830      	ldr	r0, [r6, #0]
 801ae0e:	e7eb      	b.n	801ade8 <__cleanup_context+0x7c>
 801ae10:	4607      	mov	r7, r0
 801ae12:	2300      	movs	r3, #0
 801ae14:	4638      	mov	r0, r7
 801ae16:	e9c6 3300 	strd	r3, r3, [r6]
 801ae1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae1e:	f7fa fc4f 	bl	80156c0 <rcutils_reset_error>
 801ae22:	e7b7      	b.n	801ad94 <__cleanup_context+0x28>
 801ae24:	f7ff ff7e 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801ae28:	4607      	mov	r7, r0
 801ae2a:	e7bc      	b.n	801ada6 <__cleanup_context+0x3a>

0801ae2c <rcl_init>:
 801ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae30:	1e05      	subs	r5, r0, #0
 801ae32:	b09e      	sub	sp, #120	; 0x78
 801ae34:	460e      	mov	r6, r1
 801ae36:	4690      	mov	r8, r2
 801ae38:	461f      	mov	r7, r3
 801ae3a:	f340 809f 	ble.w	801af7c <rcl_init+0x150>
 801ae3e:	2900      	cmp	r1, #0
 801ae40:	f000 809f 	beq.w	801af82 <rcl_init+0x156>
 801ae44:	f1a1 0e04 	sub.w	lr, r1, #4
 801ae48:	f04f 0c00 	mov.w	ip, #0
 801ae4c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ae50:	f10c 0c01 	add.w	ip, ip, #1
 801ae54:	2c00      	cmp	r4, #0
 801ae56:	f000 8094 	beq.w	801af82 <rcl_init+0x156>
 801ae5a:	4565      	cmp	r5, ip
 801ae5c:	d1f6      	bne.n	801ae4c <rcl_init+0x20>
 801ae5e:	f1b8 0f00 	cmp.w	r8, #0
 801ae62:	f000 808e 	beq.w	801af82 <rcl_init+0x156>
 801ae66:	f8d8 4000 	ldr.w	r4, [r8]
 801ae6a:	2c00      	cmp	r4, #0
 801ae6c:	f000 8089 	beq.w	801af82 <rcl_init+0x156>
 801ae70:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801ae74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae7a:	6823      	ldr	r3, [r4, #0]
 801ae7c:	a819      	add	r0, sp, #100	; 0x64
 801ae7e:	f8cc 3000 	str.w	r3, [ip]
 801ae82:	f7fa fbf9 	bl	8015678 <rcutils_allocator_is_valid>
 801ae86:	f080 0001 	eor.w	r0, r0, #1
 801ae8a:	b2c0      	uxtb	r0, r0
 801ae8c:	2800      	cmp	r0, #0
 801ae8e:	d178      	bne.n	801af82 <rcl_init+0x156>
 801ae90:	2f00      	cmp	r7, #0
 801ae92:	d076      	beq.n	801af82 <rcl_init+0x156>
 801ae94:	683b      	ldr	r3, [r7, #0]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d178      	bne.n	801af8c <rcl_init+0x160>
 801ae9a:	2178      	movs	r1, #120	; 0x78
 801ae9c:	2001      	movs	r0, #1
 801ae9e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801aea2:	4798      	blx	r3
 801aea4:	4604      	mov	r4, r0
 801aea6:	6038      	str	r0, [r7, #0]
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	f000 80b6 	beq.w	801b01a <rcl_init+0x1ee>
 801aeae:	a802      	add	r0, sp, #8
 801aeb0:	f003 f8fe 	bl	801e0b0 <rmw_get_zero_initialized_context>
 801aeb4:	a902      	add	r1, sp, #8
 801aeb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801aeba:	2250      	movs	r2, #80	; 0x50
 801aebc:	f006 f94f 	bl	802115e <memcpy>
 801aec0:	ac19      	add	r4, sp, #100	; 0x64
 801aec2:	f8d7 e000 	ldr.w	lr, [r7]
 801aec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aec8:	46f4      	mov	ip, lr
 801aeca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aece:	6823      	ldr	r3, [r4, #0]
 801aed0:	f10e 0114 	add.w	r1, lr, #20
 801aed4:	4640      	mov	r0, r8
 801aed6:	f8cc 3000 	str.w	r3, [ip]
 801aeda:	f7f9 fa67 	bl	80143ac <rcl_init_options_copy>
 801aede:	4604      	mov	r4, r0
 801aee0:	2800      	cmp	r0, #0
 801aee2:	d144      	bne.n	801af6e <rcl_init+0x142>
 801aee4:	f8d7 9000 	ldr.w	r9, [r7]
 801aee8:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801aeec:	f8c9 0020 	str.w	r0, [r9, #32]
 801aef0:	f8c9 5018 	str.w	r5, [r9, #24]
 801aef4:	f8c9 801c 	str.w	r8, [r9, #28]
 801aef8:	2d00      	cmp	r5, #0
 801aefa:	d04e      	beq.n	801af9a <rcl_init+0x16e>
 801aefc:	2e00      	cmp	r6, #0
 801aefe:	d04c      	beq.n	801af9a <rcl_init+0x16e>
 801af00:	2104      	movs	r1, #4
 801af02:	4628      	mov	r0, r5
 801af04:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801af08:	4798      	blx	r3
 801af0a:	f8c9 0020 	str.w	r0, [r9, #32]
 801af0e:	f8d7 9000 	ldr.w	r9, [r7]
 801af12:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801af16:	46ca      	mov	sl, r9
 801af18:	b343      	cbz	r3, 801af6c <rcl_init+0x140>
 801af1a:	2d01      	cmp	r5, #1
 801af1c:	f178 0300 	sbcs.w	r3, r8, #0
 801af20:	db3b      	blt.n	801af9a <rcl_init+0x16e>
 801af22:	2400      	movs	r4, #0
 801af24:	3e04      	subs	r6, #4
 801af26:	46a1      	mov	r9, r4
 801af28:	e00b      	b.n	801af42 <rcl_init+0x116>
 801af2a:	6831      	ldr	r1, [r6, #0]
 801af2c:	f006 f917 	bl	802115e <memcpy>
 801af30:	3401      	adds	r4, #1
 801af32:	f149 0900 	adc.w	r9, r9, #0
 801af36:	45c8      	cmp	r8, r9
 801af38:	bf08      	it	eq
 801af3a:	42a5      	cmpeq	r5, r4
 801af3c:	d02b      	beq.n	801af96 <rcl_init+0x16a>
 801af3e:	f8d7 a000 	ldr.w	sl, [r7]
 801af42:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801af46:	f7e5 f985 	bl	8000254 <strlen>
 801af4a:	1c42      	adds	r2, r0, #1
 801af4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801af4e:	4610      	mov	r0, r2
 801af50:	991d      	ldr	r1, [sp, #116]	; 0x74
 801af52:	f8da a020 	ldr.w	sl, [sl, #32]
 801af56:	9201      	str	r2, [sp, #4]
 801af58:	4798      	blx	r3
 801af5a:	683b      	ldr	r3, [r7, #0]
 801af5c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801af60:	6a1b      	ldr	r3, [r3, #32]
 801af62:	9a01      	ldr	r2, [sp, #4]
 801af64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801af68:	2800      	cmp	r0, #0
 801af6a:	d1de      	bne.n	801af2a <rcl_init+0xfe>
 801af6c:	240a      	movs	r4, #10
 801af6e:	4638      	mov	r0, r7
 801af70:	f7ff fefc 	bl	801ad6c <__cleanup_context>
 801af74:	4620      	mov	r0, r4
 801af76:	b01e      	add	sp, #120	; 0x78
 801af78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af7c:	2900      	cmp	r1, #0
 801af7e:	f43f af6e 	beq.w	801ae5e <rcl_init+0x32>
 801af82:	240b      	movs	r4, #11
 801af84:	4620      	mov	r0, r4
 801af86:	b01e      	add	sp, #120	; 0x78
 801af88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af8c:	2464      	movs	r4, #100	; 0x64
 801af8e:	4620      	mov	r0, r4
 801af90:	b01e      	add	sp, #120	; 0x78
 801af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af96:	f8d7 9000 	ldr.w	r9, [r7]
 801af9a:	4926      	ldr	r1, [pc, #152]	; (801b034 <rcl_init+0x208>)
 801af9c:	680b      	ldr	r3, [r1, #0]
 801af9e:	3301      	adds	r3, #1
 801afa0:	d036      	beq.n	801b010 <rcl_init+0x1e4>
 801afa2:	461a      	mov	r2, r3
 801afa4:	2400      	movs	r4, #0
 801afa6:	600b      	str	r3, [r1, #0]
 801afa8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801afac:	607b      	str	r3, [r7, #4]
 801afae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801afb0:	3301      	adds	r3, #1
 801afb2:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801afb6:	d034      	beq.n	801b022 <rcl_init+0x1f6>
 801afb8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801afbc:	b93b      	cbnz	r3, 801afce <rcl_init+0x1a2>
 801afbe:	3030      	adds	r0, #48	; 0x30
 801afc0:	f000 f83a 	bl	801b038 <rcl_get_localhost_only>
 801afc4:	4604      	mov	r4, r0
 801afc6:	2800      	cmp	r0, #0
 801afc8:	d1d1      	bne.n	801af6e <rcl_init+0x142>
 801afca:	683b      	ldr	r3, [r7, #0]
 801afcc:	6958      	ldr	r0, [r3, #20]
 801afce:	aa18      	add	r2, sp, #96	; 0x60
 801afd0:	a917      	add	r1, sp, #92	; 0x5c
 801afd2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801afd4:	f001 f982 	bl	801c2dc <rcl_validate_enclave_name>
 801afd8:	4604      	mov	r4, r0
 801afda:	2800      	cmp	r0, #0
 801afdc:	d1c7      	bne.n	801af6e <rcl_init+0x142>
 801afde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801afe0:	b9eb      	cbnz	r3, 801b01e <rcl_init+0x1f2>
 801afe2:	6839      	ldr	r1, [r7, #0]
 801afe4:	694b      	ldr	r3, [r1, #20]
 801afe6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801afea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801afec:	f000 fb42 	bl	801b674 <rcl_get_security_options_from_environment>
 801aff0:	4604      	mov	r4, r0
 801aff2:	2800      	cmp	r0, #0
 801aff4:	d1bb      	bne.n	801af6e <rcl_init+0x142>
 801aff6:	6839      	ldr	r1, [r7, #0]
 801aff8:	6948      	ldr	r0, [r1, #20]
 801affa:	3128      	adds	r1, #40	; 0x28
 801affc:	3018      	adds	r0, #24
 801affe:	f7fa fd37 	bl	8015a70 <rmw_init>
 801b002:	4604      	mov	r4, r0
 801b004:	2800      	cmp	r0, #0
 801b006:	d0bd      	beq.n	801af84 <rcl_init+0x158>
 801b008:	f7ff fe8c 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801b00c:	4604      	mov	r4, r0
 801b00e:	e7ae      	b.n	801af6e <rcl_init+0x142>
 801b010:	2201      	movs	r2, #1
 801b012:	461c      	mov	r4, r3
 801b014:	600a      	str	r2, [r1, #0]
 801b016:	4613      	mov	r3, r2
 801b018:	e7c6      	b.n	801afa8 <rcl_init+0x17c>
 801b01a:	240a      	movs	r4, #10
 801b01c:	e7b2      	b.n	801af84 <rcl_init+0x158>
 801b01e:	2401      	movs	r4, #1
 801b020:	e7a5      	b.n	801af6e <rcl_init+0x142>
 801b022:	3024      	adds	r0, #36	; 0x24
 801b024:	f004 fe6c 	bl	801fd00 <rcl_get_default_domain_id>
 801b028:	4604      	mov	r4, r0
 801b02a:	2800      	cmp	r0, #0
 801b02c:	d19f      	bne.n	801af6e <rcl_init+0x142>
 801b02e:	683b      	ldr	r3, [r7, #0]
 801b030:	6958      	ldr	r0, [r3, #20]
 801b032:	e7c1      	b.n	801afb8 <rcl_init+0x18c>
 801b034:	20017570 	.word	0x20017570

0801b038 <rcl_get_localhost_only>:
 801b038:	b510      	push	{r4, lr}
 801b03a:	2300      	movs	r3, #0
 801b03c:	b082      	sub	sp, #8
 801b03e:	9301      	str	r3, [sp, #4]
 801b040:	b1b8      	cbz	r0, 801b072 <rcl_get_localhost_only+0x3a>
 801b042:	4604      	mov	r4, r0
 801b044:	a901      	add	r1, sp, #4
 801b046:	480c      	ldr	r0, [pc, #48]	; (801b078 <rcl_get_localhost_only+0x40>)
 801b048:	f002 fd62 	bl	801db10 <rcutils_get_env>
 801b04c:	b110      	cbz	r0, 801b054 <rcl_get_localhost_only+0x1c>
 801b04e:	2001      	movs	r0, #1
 801b050:	b002      	add	sp, #8
 801b052:	bd10      	pop	{r4, pc}
 801b054:	9b01      	ldr	r3, [sp, #4]
 801b056:	b113      	cbz	r3, 801b05e <rcl_get_localhost_only+0x26>
 801b058:	781a      	ldrb	r2, [r3, #0]
 801b05a:	2a31      	cmp	r2, #49	; 0x31
 801b05c:	d004      	beq.n	801b068 <rcl_get_localhost_only+0x30>
 801b05e:	2302      	movs	r3, #2
 801b060:	2000      	movs	r0, #0
 801b062:	7023      	strb	r3, [r4, #0]
 801b064:	b002      	add	sp, #8
 801b066:	bd10      	pop	{r4, pc}
 801b068:	785b      	ldrb	r3, [r3, #1]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d1f7      	bne.n	801b05e <rcl_get_localhost_only+0x26>
 801b06e:	2301      	movs	r3, #1
 801b070:	e7f6      	b.n	801b060 <rcl_get_localhost_only+0x28>
 801b072:	200b      	movs	r0, #11
 801b074:	b002      	add	sp, #8
 801b076:	bd10      	pop	{r4, pc}
 801b078:	08022b9c 	.word	0x08022b9c

0801b07c <rcl_get_zero_initialized_node>:
 801b07c:	4a03      	ldr	r2, [pc, #12]	; (801b08c <rcl_get_zero_initialized_node+0x10>)
 801b07e:	4603      	mov	r3, r0
 801b080:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b084:	e883 0003 	stmia.w	r3, {r0, r1}
 801b088:	4618      	mov	r0, r3
 801b08a:	4770      	bx	lr
 801b08c:	08022bb8 	.word	0x08022bb8

0801b090 <rcl_node_init>:
 801b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b094:	b0a9      	sub	sp, #164	; 0xa4
 801b096:	4604      	mov	r4, r0
 801b098:	460e      	mov	r6, r1
 801b09a:	4615      	mov	r5, r2
 801b09c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 801b0a0:	a823      	add	r0, sp, #140	; 0x8c
 801b0a2:	461f      	mov	r7, r3
 801b0a4:	f005 f8a0 	bl	80201e8 <rcl_guard_condition_get_default_options>
 801b0a8:	f1b8 0f00 	cmp.w	r8, #0
 801b0ac:	f000 80f3 	beq.w	801b296 <rcl_node_init+0x206>
 801b0b0:	4640      	mov	r0, r8
 801b0b2:	f7fa fae1 	bl	8015678 <rcutils_allocator_is_valid>
 801b0b6:	2d00      	cmp	r5, #0
 801b0b8:	bf18      	it	ne
 801b0ba:	2c00      	cmpne	r4, #0
 801b0bc:	f080 0001 	eor.w	r0, r0, #1
 801b0c0:	bf0c      	ite	eq
 801b0c2:	f04f 0c01 	moveq.w	ip, #1
 801b0c6:	f04f 0c00 	movne.w	ip, #0
 801b0ca:	2e00      	cmp	r6, #0
 801b0cc:	bf08      	it	eq
 801b0ce:	f04c 0c01 	orreq.w	ip, ip, #1
 801b0d2:	ea4c 0c00 	orr.w	ip, ip, r0
 801b0d6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 801b0da:	f040 80dc 	bne.w	801b296 <rcl_node_init+0x206>
 801b0de:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b0e2:	f1ba 0f00 	cmp.w	sl, #0
 801b0e6:	f040 80fc 	bne.w	801b2e2 <rcl_node_init+0x252>
 801b0ea:	2f00      	cmp	r7, #0
 801b0ec:	f000 80d3 	beq.w	801b296 <rcl_node_init+0x206>
 801b0f0:	4638      	mov	r0, r7
 801b0f2:	f7ff fe35 	bl	801ad60 <rcl_context_is_valid>
 801b0f6:	4683      	mov	fp, r0
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	f000 80d2 	beq.w	801b2a2 <rcl_node_init+0x212>
 801b0fe:	4652      	mov	r2, sl
 801b100:	4630      	mov	r0, r6
 801b102:	a922      	add	r1, sp, #136	; 0x88
 801b104:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 801b108:	f003 f984 	bl	801e414 <rmw_validate_node_name>
 801b10c:	4682      	mov	sl, r0
 801b10e:	2800      	cmp	r0, #0
 801b110:	f040 80c3 	bne.w	801b29a <rcl_node_init+0x20a>
 801b114:	9822      	ldr	r0, [sp, #136]	; 0x88
 801b116:	2800      	cmp	r0, #0
 801b118:	f040 80f1 	bne.w	801b2fe <rcl_node_init+0x26e>
 801b11c:	4628      	mov	r0, r5
 801b11e:	f7e5 f899 	bl	8000254 <strlen>
 801b122:	2800      	cmp	r0, #0
 801b124:	f040 80c0 	bne.w	801b2a8 <rcl_node_init+0x218>
 801b128:	4d79      	ldr	r5, [pc, #484]	; (801b310 <rcl_node_init+0x280>)
 801b12a:	a922      	add	r1, sp, #136	; 0x88
 801b12c:	2200      	movs	r2, #0
 801b12e:	4628      	mov	r0, r5
 801b130:	f003 f952 	bl	801e3d8 <rmw_validate_namespace>
 801b134:	4682      	mov	sl, r0
 801b136:	2800      	cmp	r0, #0
 801b138:	f040 80af 	bne.w	801b29a <rcl_node_init+0x20a>
 801b13c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801b13e:	2800      	cmp	r0, #0
 801b140:	f040 80d5 	bne.w	801b2ee <rcl_node_init+0x25e>
 801b144:	f8d8 3000 	ldr.w	r3, [r8]
 801b148:	2078      	movs	r0, #120	; 0x78
 801b14a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b14e:	4798      	blx	r3
 801b150:	4682      	mov	sl, r0
 801b152:	6060      	str	r0, [r4, #4]
 801b154:	2800      	cmp	r0, #0
 801b156:	f000 80cf 	beq.w	801b2f8 <rcl_node_init+0x268>
 801b15a:	2200      	movs	r2, #0
 801b15c:	2300      	movs	r3, #0
 801b15e:	a808      	add	r0, sp, #32
 801b160:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 801b164:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 801b168:	f7f9 f996 	bl	8014498 <rcl_node_get_default_options>
 801b16c:	a908      	add	r1, sp, #32
 801b16e:	4650      	mov	r0, sl
 801b170:	2268      	movs	r2, #104	; 0x68
 801b172:	f005 fff4 	bl	802115e <memcpy>
 801b176:	6861      	ldr	r1, [r4, #4]
 801b178:	4640      	mov	r0, r8
 801b17a:	6027      	str	r7, [r4, #0]
 801b17c:	f7f9 f99a 	bl	80144b4 <rcl_node_options_copy>
 801b180:	2800      	cmp	r0, #0
 801b182:	d158      	bne.n	801b236 <rcl_node_init+0x1a6>
 801b184:	4628      	mov	r0, r5
 801b186:	f7e5 f865 	bl	8000254 <strlen>
 801b18a:	4428      	add	r0, r5
 801b18c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b190:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b194:	2b2f      	cmp	r3, #47	; 0x2f
 801b196:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b19a:	9300      	str	r3, [sp, #0]
 801b19c:	bf0c      	ite	eq
 801b19e:	4b5d      	ldreq	r3, [pc, #372]	; (801b314 <rcl_node_init+0x284>)
 801b1a0:	4b5d      	ldrne	r3, [pc, #372]	; (801b318 <rcl_node_init+0x288>)
 801b1a2:	9302      	str	r3, [sp, #8]
 801b1a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b1a8:	9301      	str	r3, [sp, #4]
 801b1aa:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b1ae:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b1b2:	f002 fcd5 	bl	801db60 <rcutils_format_string_limit>
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 801b1bc:	4631      	mov	r1, r6
 801b1be:	6818      	ldr	r0, [r3, #0]
 801b1c0:	462a      	mov	r2, r5
 801b1c2:	6866      	ldr	r6, [r4, #4]
 801b1c4:	3028      	adds	r0, #40	; 0x28
 801b1c6:	f7fa fe3b 	bl	8015e40 <rmw_create_node>
 801b1ca:	6863      	ldr	r3, [r4, #4]
 801b1cc:	66b0      	str	r0, [r6, #104]	; 0x68
 801b1ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801b1d0:	2800      	cmp	r0, #0
 801b1d2:	d032      	beq.n	801b23a <rcl_node_init+0x1aa>
 801b1d4:	f7fa fec4 	bl	8015f60 <rmw_node_get_graph_guard_condition>
 801b1d8:	4682      	mov	sl, r0
 801b1da:	b360      	cbz	r0, 801b236 <rcl_node_init+0x1a6>
 801b1dc:	f8d8 3000 	ldr.w	r3, [r8]
 801b1e0:	2008      	movs	r0, #8
 801b1e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b1e6:	6866      	ldr	r6, [r4, #4]
 801b1e8:	4798      	blx	r3
 801b1ea:	6863      	ldr	r3, [r4, #4]
 801b1ec:	66f0      	str	r0, [r6, #108]	; 0x6c
 801b1ee:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801b1f2:	f1bb 0f00 	cmp.w	fp, #0
 801b1f6:	d020      	beq.n	801b23a <rcl_node_init+0x1aa>
 801b1f8:	a806      	add	r0, sp, #24
 801b1fa:	ae23      	add	r6, sp, #140	; 0x8c
 801b1fc:	f004 ff1a 	bl	8020034 <rcl_get_zero_initialized_guard_condition>
 801b200:	a806      	add	r0, sp, #24
 801b202:	6863      	ldr	r3, [r4, #4]
 801b204:	46c4      	mov	ip, r8
 801b206:	c803      	ldmia	r0, {r0, r1}
 801b208:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 801b20c:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b210:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b214:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b216:	f8dc 3000 	ldr.w	r3, [ip]
 801b21a:	6033      	str	r3, [r6, #0]
 801b21c:	ab28      	add	r3, sp, #160	; 0xa0
 801b21e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b222:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b226:	4651      	mov	r1, sl
 801b228:	463a      	mov	r2, r7
 801b22a:	4670      	mov	r0, lr
 801b22c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b22e:	f004 ff59 	bl	80200e4 <rcl_guard_condition_init_from_rmw>
 801b232:	4682      	mov	sl, r0
 801b234:	b328      	cbz	r0, 801b282 <rcl_node_init+0x1f2>
 801b236:	6863      	ldr	r3, [r4, #4]
 801b238:	b1f3      	cbz	r3, 801b278 <rcl_node_init+0x1e8>
 801b23a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801b23c:	b128      	cbz	r0, 801b24a <rcl_node_init+0x1ba>
 801b23e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b242:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b246:	4798      	blx	r3
 801b248:	6863      	ldr	r3, [r4, #4]
 801b24a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801b24c:	b110      	cbz	r0, 801b254 <rcl_node_init+0x1c4>
 801b24e:	f7fa fe09 	bl	8015e64 <rmw_destroy_node>
 801b252:	6863      	ldr	r3, [r4, #4]
 801b254:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801b256:	b148      	cbz	r0, 801b26c <rcl_node_init+0x1dc>
 801b258:	f004 ffa0 	bl	802019c <rcl_guard_condition_fini>
 801b25c:	6863      	ldr	r3, [r4, #4]
 801b25e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b262:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801b264:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b268:	4798      	blx	r3
 801b26a:	6863      	ldr	r3, [r4, #4]
 801b26c:	4618      	mov	r0, r3
 801b26e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b272:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b276:	4798      	blx	r3
 801b278:	2300      	movs	r3, #0
 801b27a:	f04f 0a01 	mov.w	sl, #1
 801b27e:	e9c4 3300 	strd	r3, r3, [r4]
 801b282:	f1b9 0f00 	cmp.w	r9, #0
 801b286:	d008      	beq.n	801b29a <rcl_node_init+0x20a>
 801b288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b28c:	4628      	mov	r0, r5
 801b28e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b292:	4798      	blx	r3
 801b294:	e001      	b.n	801b29a <rcl_node_init+0x20a>
 801b296:	f04f 0a0b 	mov.w	sl, #11
 801b29a:	4650      	mov	r0, sl
 801b29c:	b029      	add	sp, #164	; 0xa4
 801b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a2:	f04f 0a65 	mov.w	sl, #101	; 0x65
 801b2a6:	e7f8      	b.n	801b29a <rcl_node_init+0x20a>
 801b2a8:	782b      	ldrb	r3, [r5, #0]
 801b2aa:	2b2f      	cmp	r3, #47	; 0x2f
 801b2ac:	f43f af3d 	beq.w	801b12a <rcl_node_init+0x9a>
 801b2b0:	9503      	str	r5, [sp, #12]
 801b2b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	4b18      	ldr	r3, [pc, #96]	; (801b31c <rcl_node_init+0x28c>)
 801b2ba:	9302      	str	r3, [sp, #8]
 801b2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b2c0:	9301      	str	r3, [sp, #4]
 801b2c2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b2c6:	f002 fc4b 	bl	801db60 <rcutils_format_string_limit>
 801b2ca:	4605      	mov	r5, r0
 801b2cc:	b1e0      	cbz	r0, 801b308 <rcl_node_init+0x278>
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	a922      	add	r1, sp, #136	; 0x88
 801b2d2:	9222      	str	r2, [sp, #136]	; 0x88
 801b2d4:	f003 f880 	bl	801e3d8 <rmw_validate_namespace>
 801b2d8:	4682      	mov	sl, r0
 801b2da:	2800      	cmp	r0, #0
 801b2dc:	d1d4      	bne.n	801b288 <rcl_node_init+0x1f8>
 801b2de:	46d9      	mov	r9, fp
 801b2e0:	e72c      	b.n	801b13c <rcl_node_init+0xac>
 801b2e2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801b2e6:	4650      	mov	r0, sl
 801b2e8:	b029      	add	sp, #164	; 0xa4
 801b2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ee:	f04f 0aca 	mov.w	sl, #202	; 0xca
 801b2f2:	f003 f883 	bl	801e3fc <rmw_namespace_validation_result_string>
 801b2f6:	e7c4      	b.n	801b282 <rcl_node_init+0x1f2>
 801b2f8:	f04f 0a0a 	mov.w	sl, #10
 801b2fc:	e7c1      	b.n	801b282 <rcl_node_init+0x1f2>
 801b2fe:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801b302:	f003 f8db 	bl	801e4bc <rmw_node_name_validation_result_string>
 801b306:	e7c8      	b.n	801b29a <rcl_node_init+0x20a>
 801b308:	f04f 0a0a 	mov.w	sl, #10
 801b30c:	e7c5      	b.n	801b29a <rcl_node_init+0x20a>
 801b30e:	bf00      	nop
 801b310:	08022728 	.word	0x08022728
 801b314:	08022750 	.word	0x08022750
 801b318:	0802272c 	.word	0x0802272c
 801b31c:	08022bb4 	.word	0x08022bb4

0801b320 <rcl_node_is_valid>:
 801b320:	b130      	cbz	r0, 801b330 <rcl_node_is_valid+0x10>
 801b322:	6843      	ldr	r3, [r0, #4]
 801b324:	b123      	cbz	r3, 801b330 <rcl_node_is_valid+0x10>
 801b326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b328:	b113      	cbz	r3, 801b330 <rcl_node_is_valid+0x10>
 801b32a:	6800      	ldr	r0, [r0, #0]
 801b32c:	f7ff bd18 	b.w	801ad60 <rcl_context_is_valid>
 801b330:	2000      	movs	r0, #0
 801b332:	4770      	bx	lr

0801b334 <rcl_node_get_name>:
 801b334:	b120      	cbz	r0, 801b340 <rcl_node_get_name+0xc>
 801b336:	6840      	ldr	r0, [r0, #4]
 801b338:	b110      	cbz	r0, 801b340 <rcl_node_get_name+0xc>
 801b33a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b33c:	b100      	cbz	r0, 801b340 <rcl_node_get_name+0xc>
 801b33e:	6880      	ldr	r0, [r0, #8]
 801b340:	4770      	bx	lr
 801b342:	bf00      	nop

0801b344 <rcl_node_get_namespace>:
 801b344:	b120      	cbz	r0, 801b350 <rcl_node_get_namespace+0xc>
 801b346:	6840      	ldr	r0, [r0, #4]
 801b348:	b110      	cbz	r0, 801b350 <rcl_node_get_namespace+0xc>
 801b34a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b34c:	b100      	cbz	r0, 801b350 <rcl_node_get_namespace+0xc>
 801b34e:	68c0      	ldr	r0, [r0, #12]
 801b350:	4770      	bx	lr
 801b352:	bf00      	nop

0801b354 <rcl_node_get_options>:
 801b354:	b128      	cbz	r0, 801b362 <rcl_node_get_options+0xe>
 801b356:	6840      	ldr	r0, [r0, #4]
 801b358:	b118      	cbz	r0, 801b362 <rcl_node_get_options+0xe>
 801b35a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	bf08      	it	eq
 801b360:	2000      	moveq	r0, #0
 801b362:	4770      	bx	lr

0801b364 <rcl_node_get_rmw_handle>:
 801b364:	b110      	cbz	r0, 801b36c <rcl_node_get_rmw_handle+0x8>
 801b366:	6840      	ldr	r0, [r0, #4]
 801b368:	b100      	cbz	r0, 801b36c <rcl_node_get_rmw_handle+0x8>
 801b36a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b36c:	4770      	bx	lr
 801b36e:	bf00      	nop

0801b370 <rcl_node_resolve_name>:
 801b370:	b082      	sub	sp, #8
 801b372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b376:	b091      	sub	sp, #68	; 0x44
 801b378:	ac1a      	add	r4, sp, #104	; 0x68
 801b37a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801b37e:	e884 000c 	stmia.w	r4, {r2, r3}
 801b382:	2800      	cmp	r0, #0
 801b384:	d03d      	beq.n	801b402 <rcl_node_resolve_name+0x92>
 801b386:	460c      	mov	r4, r1
 801b388:	4605      	mov	r5, r0
 801b38a:	f7ff ffe3 	bl	801b354 <rcl_node_get_options>
 801b38e:	2800      	cmp	r0, #0
 801b390:	d03a      	beq.n	801b408 <rcl_node_resolve_name+0x98>
 801b392:	4628      	mov	r0, r5
 801b394:	f7ff ffce 	bl	801b334 <rcl_node_get_name>
 801b398:	4606      	mov	r6, r0
 801b39a:	4628      	mov	r0, r5
 801b39c:	ad0b      	add	r5, sp, #44	; 0x2c
 801b39e:	f7ff ffd1 	bl	801b344 <rcl_node_get_namespace>
 801b3a2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b3a6:	4607      	mov	r7, r0
 801b3a8:	46ac      	mov	ip, r5
 801b3aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3b2:	f8de 3000 	ldr.w	r3, [lr]
 801b3b6:	f8cc 3000 	str.w	r3, [ip]
 801b3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b3bc:	b30b      	cbz	r3, 801b402 <rcl_node_resolve_name+0x92>
 801b3be:	4689      	mov	r9, r1
 801b3c0:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b3c4:	f002 fd44 	bl	801de50 <rcutils_get_zero_initialized_string_map>
 801b3c8:	ab10      	add	r3, sp, #64	; 0x40
 801b3ca:	9008      	str	r0, [sp, #32]
 801b3cc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b3d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b3d4:	2100      	movs	r1, #0
 801b3d6:	a808      	add	r0, sp, #32
 801b3d8:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b3dc:	f002 fdae 	bl	801df3c <rcutils_string_map_init>
 801b3e0:	4683      	mov	fp, r0
 801b3e2:	b1a0      	cbz	r0, 801b40e <rcl_node_resolve_name+0x9e>
 801b3e4:	f7fa f956 	bl	8015694 <rcutils_get_error_string>
 801b3e8:	f7fa f96a 	bl	80156c0 <rcutils_reset_error>
 801b3ec:	f1bb 0f0a 	cmp.w	fp, #10
 801b3f0:	bf18      	it	ne
 801b3f2:	f04f 0b01 	movne.w	fp, #1
 801b3f6:	4658      	mov	r0, fp
 801b3f8:	b011      	add	sp, #68	; 0x44
 801b3fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3fe:	b002      	add	sp, #8
 801b400:	4770      	bx	lr
 801b402:	f04f 0b0b 	mov.w	fp, #11
 801b406:	e7f6      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b408:	f04f 0b01 	mov.w	fp, #1
 801b40c:	e7f3      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b40e:	9009      	str	r0, [sp, #36]	; 0x24
 801b410:	9007      	str	r0, [sp, #28]
 801b412:	a808      	add	r0, sp, #32
 801b414:	f004 fe08 	bl	8020028 <rcl_get_default_topic_name_substitutions>
 801b418:	4683      	mov	fp, r0
 801b41a:	b180      	cbz	r0, 801b43e <rcl_node_resolve_name+0xce>
 801b41c:	280a      	cmp	r0, #10
 801b41e:	a808      	add	r0, sp, #32
 801b420:	bf18      	it	ne
 801b422:	f04f 0b01 	movne.w	fp, #1
 801b426:	f002 fdc9 	bl	801dfbc <rcutils_string_map_fini>
 801b42a:	4604      	mov	r4, r0
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d15b      	bne.n	801b4e8 <rcl_node_resolve_name+0x178>
 801b430:	4651      	mov	r1, sl
 801b432:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b434:	47c8      	blx	r9
 801b436:	4651      	mov	r1, sl
 801b438:	4620      	mov	r0, r4
 801b43a:	47c8      	blx	r9
 801b43c:	e7db      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b43e:	ab09      	add	r3, sp, #36	; 0x24
 801b440:	46ec      	mov	ip, sp
 801b442:	9305      	str	r3, [sp, #20]
 801b444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b44a:	682b      	ldr	r3, [r5, #0]
 801b44c:	463a      	mov	r2, r7
 801b44e:	4631      	mov	r1, r6
 801b450:	4620      	mov	r0, r4
 801b452:	f8cc 3000 	str.w	r3, [ip]
 801b456:	ab08      	add	r3, sp, #32
 801b458:	f004 fc86 	bl	801fd68 <rcl_expand_topic_name>
 801b45c:	4683      	mov	fp, r0
 801b45e:	b9d8      	cbnz	r0, 801b498 <rcl_node_resolve_name+0x128>
 801b460:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b462:	4602      	mov	r2, r0
 801b464:	9009      	str	r0, [sp, #36]	; 0x24
 801b466:	a90a      	add	r1, sp, #40	; 0x28
 801b468:	4620      	mov	r0, r4
 801b46a:	f002 fee5 	bl	801e238 <rmw_validate_full_topic_name>
 801b46e:	bb50      	cbnz	r0, 801b4c6 <rcl_node_resolve_name+0x156>
 801b470:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b472:	2d00      	cmp	r5, #0
 801b474:	d140      	bne.n	801b4f8 <rcl_node_resolve_name+0x188>
 801b476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b478:	a808      	add	r0, sp, #32
 801b47a:	601c      	str	r4, [r3, #0]
 801b47c:	f002 fd9e 	bl	801dfbc <rcutils_string_map_fini>
 801b480:	4683      	mov	fp, r0
 801b482:	2800      	cmp	r0, #0
 801b484:	d043      	beq.n	801b50e <rcl_node_resolve_name+0x19e>
 801b486:	f7fa f905 	bl	8015694 <rcutils_get_error_string>
 801b48a:	46a8      	mov	r8, r5
 801b48c:	f04f 0b01 	mov.w	fp, #1
 801b490:	462c      	mov	r4, r5
 801b492:	f7fa f915 	bl	80156c0 <rcutils_reset_error>
 801b496:	e00a      	b.n	801b4ae <rcl_node_resolve_name+0x13e>
 801b498:	2867      	cmp	r0, #103	; 0x67
 801b49a:	bf14      	ite	ne
 801b49c:	f04f 0800 	movne.w	r8, #0
 801b4a0:	f008 0801 	andeq.w	r8, r8, #1
 801b4a4:	9c07      	ldr	r4, [sp, #28]
 801b4a6:	a808      	add	r0, sp, #32
 801b4a8:	f002 fd88 	bl	801dfbc <rcutils_string_map_fini>
 801b4ac:	bb50      	cbnz	r0, 801b504 <rcl_node_resolve_name+0x194>
 801b4ae:	4651      	mov	r1, sl
 801b4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4b2:	47c8      	blx	r9
 801b4b4:	4651      	mov	r1, sl
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	47c8      	blx	r9
 801b4ba:	f1b8 0f00 	cmp.w	r8, #0
 801b4be:	bf18      	it	ne
 801b4c0:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801b4c4:	e797      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b4c6:	f7fa f8e5 	bl	8015694 <rcutils_get_error_string>
 801b4ca:	f7fa f8f9 	bl	80156c0 <rcutils_reset_error>
 801b4ce:	a808      	add	r0, sp, #32
 801b4d0:	f002 fd74 	bl	801dfbc <rcutils_string_map_fini>
 801b4d4:	b998      	cbnz	r0, 801b4fe <rcl_node_resolve_name+0x18e>
 801b4d6:	4651      	mov	r1, sl
 801b4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4da:	47c8      	blx	r9
 801b4dc:	4651      	mov	r1, sl
 801b4de:	4620      	mov	r0, r4
 801b4e0:	f04f 0b01 	mov.w	fp, #1
 801b4e4:	47c8      	blx	r9
 801b4e6:	e786      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b4e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b4ec:	f7fa f8d2 	bl	8015694 <rcutils_get_error_string>
 801b4f0:	f7fa f8e6 	bl	80156c0 <rcutils_reset_error>
 801b4f4:	4644      	mov	r4, r8
 801b4f6:	e7da      	b.n	801b4ae <rcl_node_resolve_name+0x13e>
 801b4f8:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b4fc:	e7d3      	b.n	801b4a6 <rcl_node_resolve_name+0x136>
 801b4fe:	46d8      	mov	r8, fp
 801b500:	f04f 0b01 	mov.w	fp, #1
 801b504:	f7fa f8c6 	bl	8015694 <rcutils_get_error_string>
 801b508:	f7fa f8da 	bl	80156c0 <rcutils_reset_error>
 801b50c:	e7cf      	b.n	801b4ae <rcl_node_resolve_name+0x13e>
 801b50e:	4651      	mov	r1, sl
 801b510:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b512:	47c8      	blx	r9
 801b514:	4651      	mov	r1, sl
 801b516:	4658      	mov	r0, fp
 801b518:	47c8      	blx	r9
 801b51a:	e76c      	b.n	801b3f6 <rcl_node_resolve_name+0x86>

0801b51c <exact_match_lookup>:
 801b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b51e:	f102 0708 	add.w	r7, r2, #8
 801b522:	460b      	mov	r3, r1
 801b524:	b085      	sub	sp, #20
 801b526:	4614      	mov	r4, r2
 801b528:	4606      	mov	r6, r0
 801b52a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b52e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b532:	4618      	mov	r0, r3
 801b534:	4919      	ldr	r1, [pc, #100]	; (801b59c <exact_match_lookup+0x80>)
 801b536:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b53a:	f002 fb03 	bl	801db44 <rcutils_join_path>
 801b53e:	7833      	ldrb	r3, [r6, #0]
 801b540:	4605      	mov	r5, r0
 801b542:	2b2f      	cmp	r3, #47	; 0x2f
 801b544:	d023      	beq.n	801b58e <exact_match_lookup+0x72>
 801b546:	f104 030c 	add.w	r3, r4, #12
 801b54a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b54e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b552:	1c70      	adds	r0, r6, #1
 801b554:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b558:	f002 fafa 	bl	801db50 <rcutils_to_native_path>
 801b55c:	4606      	mov	r6, r0
 801b55e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b562:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b566:	4631      	mov	r1, r6
 801b568:	4628      	mov	r0, r5
 801b56a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b56e:	f002 fae9 	bl	801db44 <rcutils_join_path>
 801b572:	4603      	mov	r3, r0
 801b574:	4630      	mov	r0, r6
 801b576:	6862      	ldr	r2, [r4, #4]
 801b578:	461e      	mov	r6, r3
 801b57a:	6921      	ldr	r1, [r4, #16]
 801b57c:	4790      	blx	r2
 801b57e:	4628      	mov	r0, r5
 801b580:	4635      	mov	r5, r6
 801b582:	6863      	ldr	r3, [r4, #4]
 801b584:	6921      	ldr	r1, [r4, #16]
 801b586:	4798      	blx	r3
 801b588:	4628      	mov	r0, r5
 801b58a:	b005      	add	sp, #20
 801b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b58e:	7873      	ldrb	r3, [r6, #1]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d1d8      	bne.n	801b546 <exact_match_lookup+0x2a>
 801b594:	4628      	mov	r0, r5
 801b596:	b005      	add	sp, #20
 801b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b59a:	bf00      	nop
 801b59c:	08022bfc 	.word	0x08022bfc

0801b5a0 <rcl_get_secure_root>:
 801b5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5a4:	b085      	sub	sp, #20
 801b5a6:	b168      	cbz	r0, 801b5c4 <rcl_get_secure_root+0x24>
 801b5a8:	4607      	mov	r7, r0
 801b5aa:	4608      	mov	r0, r1
 801b5ac:	460c      	mov	r4, r1
 801b5ae:	f7fa f863 	bl	8015678 <rcutils_allocator_is_valid>
 801b5b2:	b138      	cbz	r0, 801b5c4 <rcl_get_secure_root+0x24>
 801b5b4:	2300      	movs	r3, #0
 801b5b6:	482d      	ldr	r0, [pc, #180]	; (801b66c <rcl_get_secure_root+0xcc>)
 801b5b8:	a903      	add	r1, sp, #12
 801b5ba:	9303      	str	r3, [sp, #12]
 801b5bc:	f002 faa8 	bl	801db10 <rcutils_get_env>
 801b5c0:	4605      	mov	r5, r0
 801b5c2:	b120      	cbz	r0, 801b5ce <rcl_get_secure_root+0x2e>
 801b5c4:	2500      	movs	r5, #0
 801b5c6:	4628      	mov	r0, r5
 801b5c8:	b005      	add	sp, #20
 801b5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5ce:	9b03      	ldr	r3, [sp, #12]
 801b5d0:	781a      	ldrb	r2, [r3, #0]
 801b5d2:	2a00      	cmp	r2, #0
 801b5d4:	d0f6      	beq.n	801b5c4 <rcl_get_secure_root+0x24>
 801b5d6:	f104 090c 	add.w	r9, r4, #12
 801b5da:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b5de:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b5e8:	f002 fbf4 	bl	801ddd4 <rcutils_strdup>
 801b5ec:	4680      	mov	r8, r0
 801b5ee:	2800      	cmp	r0, #0
 801b5f0:	d0e8      	beq.n	801b5c4 <rcl_get_secure_root+0x24>
 801b5f2:	a903      	add	r1, sp, #12
 801b5f4:	481e      	ldr	r0, [pc, #120]	; (801b670 <rcl_get_secure_root+0xd0>)
 801b5f6:	9503      	str	r5, [sp, #12]
 801b5f8:	f002 fa8a 	bl	801db10 <rcutils_get_env>
 801b5fc:	b160      	cbz	r0, 801b618 <rcl_get_secure_root+0x78>
 801b5fe:	2600      	movs	r6, #0
 801b600:	4630      	mov	r0, r6
 801b602:	6863      	ldr	r3, [r4, #4]
 801b604:	6921      	ldr	r1, [r4, #16]
 801b606:	4798      	blx	r3
 801b608:	4640      	mov	r0, r8
 801b60a:	6863      	ldr	r3, [r4, #4]
 801b60c:	6921      	ldr	r1, [r4, #16]
 801b60e:	4798      	blx	r3
 801b610:	4628      	mov	r0, r5
 801b612:	b005      	add	sp, #20
 801b614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b618:	9b03      	ldr	r3, [sp, #12]
 801b61a:	781e      	ldrb	r6, [r3, #0]
 801b61c:	b1f6      	cbz	r6, 801b65c <rcl_get_secure_root+0xbc>
 801b61e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b622:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b626:	4618      	mov	r0, r3
 801b628:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b62c:	f002 fbd2 	bl	801ddd4 <rcutils_strdup>
 801b630:	4606      	mov	r6, r0
 801b632:	2800      	cmp	r0, #0
 801b634:	d0e3      	beq.n	801b5fe <rcl_get_secure_root+0x5e>
 801b636:	4622      	mov	r2, r4
 801b638:	4641      	mov	r1, r8
 801b63a:	f7ff ff6f 	bl	801b51c <exact_match_lookup>
 801b63e:	4605      	mov	r5, r0
 801b640:	2d00      	cmp	r5, #0
 801b642:	d0dd      	beq.n	801b600 <rcl_get_secure_root+0x60>
 801b644:	4628      	mov	r0, r5
 801b646:	f002 fa7b 	bl	801db40 <rcutils_is_directory>
 801b64a:	4603      	mov	r3, r0
 801b64c:	2800      	cmp	r0, #0
 801b64e:	d1d7      	bne.n	801b600 <rcl_get_secure_root+0x60>
 801b650:	4628      	mov	r0, r5
 801b652:	6921      	ldr	r1, [r4, #16]
 801b654:	461d      	mov	r5, r3
 801b656:	6863      	ldr	r3, [r4, #4]
 801b658:	4798      	blx	r3
 801b65a:	e7d1      	b.n	801b600 <rcl_get_secure_root+0x60>
 801b65c:	4622      	mov	r2, r4
 801b65e:	4638      	mov	r0, r7
 801b660:	4641      	mov	r1, r8
 801b662:	f7ff ff5b 	bl	801b51c <exact_match_lookup>
 801b666:	4605      	mov	r5, r0
 801b668:	e7ea      	b.n	801b640 <rcl_get_secure_root+0xa0>
 801b66a:	bf00      	nop
 801b66c:	08022c08 	.word	0x08022c08
 801b670:	08022c20 	.word	0x08022c20

0801b674 <rcl_get_security_options_from_environment>:
 801b674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b678:	b082      	sub	sp, #8
 801b67a:	2300      	movs	r3, #0
 801b67c:	4606      	mov	r6, r0
 801b67e:	460f      	mov	r7, r1
 801b680:	4821      	ldr	r0, [pc, #132]	; (801b708 <rcl_get_security_options_from_environment+0x94>)
 801b682:	a901      	add	r1, sp, #4
 801b684:	4690      	mov	r8, r2
 801b686:	9301      	str	r3, [sp, #4]
 801b688:	f002 fa42 	bl	801db10 <rcutils_get_env>
 801b68c:	b120      	cbz	r0, 801b698 <rcl_get_security_options_from_environment+0x24>
 801b68e:	2501      	movs	r5, #1
 801b690:	4628      	mov	r0, r5
 801b692:	b002      	add	sp, #8
 801b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b698:	4604      	mov	r4, r0
 801b69a:	491c      	ldr	r1, [pc, #112]	; (801b70c <rcl_get_security_options_from_environment+0x98>)
 801b69c:	9801      	ldr	r0, [sp, #4]
 801b69e:	f7e4 fdcf 	bl	8000240 <strcmp>
 801b6a2:	4605      	mov	r5, r0
 801b6a4:	b9f0      	cbnz	r0, 801b6e4 <rcl_get_security_options_from_environment+0x70>
 801b6a6:	9001      	str	r0, [sp, #4]
 801b6a8:	f1b8 0f00 	cmp.w	r8, #0
 801b6ac:	d021      	beq.n	801b6f2 <rcl_get_security_options_from_environment+0x7e>
 801b6ae:	a901      	add	r1, sp, #4
 801b6b0:	4817      	ldr	r0, [pc, #92]	; (801b710 <rcl_get_security_options_from_environment+0x9c>)
 801b6b2:	f002 fa2d 	bl	801db10 <rcutils_get_env>
 801b6b6:	2800      	cmp	r0, #0
 801b6b8:	d1e9      	bne.n	801b68e <rcl_get_security_options_from_environment+0x1a>
 801b6ba:	4916      	ldr	r1, [pc, #88]	; (801b714 <rcl_get_security_options_from_environment+0xa0>)
 801b6bc:	9801      	ldr	r0, [sp, #4]
 801b6be:	f7e4 fdbf 	bl	8000240 <strcmp>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	4639      	mov	r1, r7
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	fab3 f383 	clz	r3, r3
 801b6cc:	095b      	lsrs	r3, r3, #5
 801b6ce:	f888 3000 	strb.w	r3, [r8]
 801b6d2:	f7ff ff65 	bl	801b5a0 <rcl_get_secure_root>
 801b6d6:	b170      	cbz	r0, 801b6f6 <rcl_get_security_options_from_environment+0x82>
 801b6d8:	f8c8 0004 	str.w	r0, [r8, #4]
 801b6dc:	4628      	mov	r0, r5
 801b6de:	b002      	add	sp, #8
 801b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e4:	4625      	mov	r5, r4
 801b6e6:	f888 4000 	strb.w	r4, [r8]
 801b6ea:	4628      	mov	r0, r5
 801b6ec:	b002      	add	sp, #8
 801b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6f2:	250b      	movs	r5, #11
 801b6f4:	e7cc      	b.n	801b690 <rcl_get_security_options_from_environment+0x1c>
 801b6f6:	f898 5000 	ldrb.w	r5, [r8]
 801b6fa:	f1a5 0501 	sub.w	r5, r5, #1
 801b6fe:	fab5 f585 	clz	r5, r5
 801b702:	096d      	lsrs	r5, r5, #5
 801b704:	e7c4      	b.n	801b690 <rcl_get_security_options_from_environment+0x1c>
 801b706:	bf00      	nop
 801b708:	08022bc0 	.word	0x08022bc0
 801b70c:	08022bd4 	.word	0x08022bd4
 801b710:	08022bdc 	.word	0x08022bdc
 801b714:	08022bf4 	.word	0x08022bf4

0801b718 <rcl_service_get_rmw_handle>:
 801b718:	b118      	cbz	r0, 801b722 <rcl_service_get_rmw_handle+0xa>
 801b71a:	6800      	ldr	r0, [r0, #0]
 801b71c:	b108      	cbz	r0, 801b722 <rcl_service_get_rmw_handle+0xa>
 801b71e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b722:	4770      	bx	lr

0801b724 <rcl_take_request>:
 801b724:	b570      	push	{r4, r5, r6, lr}
 801b726:	468e      	mov	lr, r1
 801b728:	b08c      	sub	sp, #48	; 0x30
 801b72a:	460c      	mov	r4, r1
 801b72c:	4616      	mov	r6, r2
 801b72e:	f10d 0c18 	add.w	ip, sp, #24
 801b732:	4605      	mov	r5, r0
 801b734:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b73c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b740:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b744:	b30d      	cbz	r5, 801b78a <rcl_take_request+0x66>
 801b746:	682b      	ldr	r3, [r5, #0]
 801b748:	b1fb      	cbz	r3, 801b78a <rcl_take_request+0x66>
 801b74a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b74e:	b1e0      	cbz	r0, 801b78a <rcl_take_request+0x66>
 801b750:	b336      	cbz	r6, 801b7a0 <rcl_take_request+0x7c>
 801b752:	2300      	movs	r3, #0
 801b754:	4632      	mov	r2, r6
 801b756:	a902      	add	r1, sp, #8
 801b758:	f88d 3007 	strb.w	r3, [sp, #7]
 801b75c:	f10d 0307 	add.w	r3, sp, #7
 801b760:	f003 f8ce 	bl	801e900 <rmw_take_request>
 801b764:	4605      	mov	r5, r0
 801b766:	b198      	cbz	r0, 801b790 <rcl_take_request+0x6c>
 801b768:	280a      	cmp	r0, #10
 801b76a:	bf18      	it	ne
 801b76c:	2501      	movne	r5, #1
 801b76e:	f10d 0e18 	add.w	lr, sp, #24
 801b772:	46a4      	mov	ip, r4
 801b774:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b778:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b77c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b780:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b784:	4628      	mov	r0, r5
 801b786:	b00c      	add	sp, #48	; 0x30
 801b788:	bd70      	pop	{r4, r5, r6, pc}
 801b78a:	f44f 7516 	mov.w	r5, #600	; 0x258
 801b78e:	e7ee      	b.n	801b76e <rcl_take_request+0x4a>
 801b790:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b794:	f240 2359 	movw	r3, #601	; 0x259
 801b798:	2a00      	cmp	r2, #0
 801b79a:	bf08      	it	eq
 801b79c:	461d      	moveq	r5, r3
 801b79e:	e7e6      	b.n	801b76e <rcl_take_request+0x4a>
 801b7a0:	250b      	movs	r5, #11
 801b7a2:	e7e4      	b.n	801b76e <rcl_take_request+0x4a>

0801b7a4 <rcl_send_response>:
 801b7a4:	b170      	cbz	r0, 801b7c4 <rcl_send_response+0x20>
 801b7a6:	6800      	ldr	r0, [r0, #0]
 801b7a8:	b160      	cbz	r0, 801b7c4 <rcl_send_response+0x20>
 801b7aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b7ae:	b148      	cbz	r0, 801b7c4 <rcl_send_response+0x20>
 801b7b0:	b169      	cbz	r1, 801b7ce <rcl_send_response+0x2a>
 801b7b2:	b510      	push	{r4, lr}
 801b7b4:	b14a      	cbz	r2, 801b7ca <rcl_send_response+0x26>
 801b7b6:	f003 f901 	bl	801e9bc <rmw_send_response>
 801b7ba:	b110      	cbz	r0, 801b7c2 <rcl_send_response+0x1e>
 801b7bc:	2802      	cmp	r0, #2
 801b7be:	bf18      	it	ne
 801b7c0:	2001      	movne	r0, #1
 801b7c2:	bd10      	pop	{r4, pc}
 801b7c4:	f44f 7016 	mov.w	r0, #600	; 0x258
 801b7c8:	4770      	bx	lr
 801b7ca:	200b      	movs	r0, #11
 801b7cc:	bd10      	pop	{r4, pc}
 801b7ce:	200b      	movs	r0, #11
 801b7d0:	4770      	bx	lr
 801b7d2:	bf00      	nop

0801b7d4 <rcl_service_is_valid>:
 801b7d4:	b130      	cbz	r0, 801b7e4 <rcl_service_is_valid+0x10>
 801b7d6:	6800      	ldr	r0, [r0, #0]
 801b7d8:	b120      	cbz	r0, 801b7e4 <rcl_service_is_valid+0x10>
 801b7da:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b7de:	3800      	subs	r0, #0
 801b7e0:	bf18      	it	ne
 801b7e2:	2001      	movne	r0, #1
 801b7e4:	4770      	bx	lr
 801b7e6:	bf00      	nop

0801b7e8 <rcl_get_zero_initialized_subscription>:
 801b7e8:	4b01      	ldr	r3, [pc, #4]	; (801b7f0 <rcl_get_zero_initialized_subscription+0x8>)
 801b7ea:	6818      	ldr	r0, [r3, #0]
 801b7ec:	4770      	bx	lr
 801b7ee:	bf00      	nop
 801b7f0:	08022c40 	.word	0x08022c40

0801b7f4 <rcl_subscription_init>:
 801b7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f8:	b088      	sub	sp, #32
 801b7fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b7fc:	b1ff      	cbz	r7, 801b83e <rcl_subscription_init+0x4a>
 801b7fe:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 801b802:	4605      	mov	r5, r0
 801b804:	460e      	mov	r6, r1
 801b806:	4691      	mov	r9, r2
 801b808:	4650      	mov	r0, sl
 801b80a:	4698      	mov	r8, r3
 801b80c:	f7f9 ff34 	bl	8015678 <rcutils_allocator_is_valid>
 801b810:	f080 0401 	eor.w	r4, r0, #1
 801b814:	b2e4      	uxtb	r4, r4
 801b816:	b994      	cbnz	r4, 801b83e <rcl_subscription_init+0x4a>
 801b818:	b18d      	cbz	r5, 801b83e <rcl_subscription_init+0x4a>
 801b81a:	4630      	mov	r0, r6
 801b81c:	f7ff fd80 	bl	801b320 <rcl_node_is_valid>
 801b820:	2800      	cmp	r0, #0
 801b822:	d055      	beq.n	801b8d0 <rcl_subscription_init+0xdc>
 801b824:	f1b9 0f00 	cmp.w	r9, #0
 801b828:	d009      	beq.n	801b83e <rcl_subscription_init+0x4a>
 801b82a:	f1b8 0f00 	cmp.w	r8, #0
 801b82e:	d006      	beq.n	801b83e <rcl_subscription_init+0x4a>
 801b830:	682b      	ldr	r3, [r5, #0]
 801b832:	b14b      	cbz	r3, 801b848 <rcl_subscription_init+0x54>
 801b834:	2464      	movs	r4, #100	; 0x64
 801b836:	4620      	mov	r0, r4
 801b838:	b008      	add	sp, #32
 801b83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b83e:	240b      	movs	r4, #11
 801b840:	4620      	mov	r0, r4
 801b842:	b008      	add	sp, #32
 801b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b848:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801b84c:	aa07      	add	r2, sp, #28
 801b84e:	9307      	str	r3, [sp, #28]
 801b850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b854:	9205      	str	r2, [sp, #20]
 801b856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b85a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b85e:	4641      	mov	r1, r8
 801b860:	4630      	mov	r0, r6
 801b862:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b866:	f7ff fd83 	bl	801b370 <rcl_node_resolve_name>
 801b86a:	2800      	cmp	r0, #0
 801b86c:	d15f      	bne.n	801b92e <rcl_subscription_init+0x13a>
 801b86e:	21c8      	movs	r1, #200	; 0xc8
 801b870:	2001      	movs	r0, #1
 801b872:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 801b876:	4798      	blx	r3
 801b878:	6028      	str	r0, [r5, #0]
 801b87a:	2800      	cmp	r0, #0
 801b87c:	d05f      	beq.n	801b93e <rcl_subscription_init+0x14a>
 801b87e:	4630      	mov	r0, r6
 801b880:	f7ff fd70 	bl	801b364 <rcl_node_get_rmw_handle>
 801b884:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b888:	4649      	mov	r1, r9
 801b88a:	9a07      	ldr	r2, [sp, #28]
 801b88c:	9300      	str	r3, [sp, #0]
 801b88e:	463b      	mov	r3, r7
 801b890:	682c      	ldr	r4, [r5, #0]
 801b892:	f7fa fd5f 	bl	8016354 <rmw_create_subscription>
 801b896:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 801b89a:	682c      	ldr	r4, [r5, #0]
 801b89c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 801b8a0:	b348      	cbz	r0, 801b8f6 <rcl_subscription_init+0x102>
 801b8a2:	f104 0170 	add.w	r1, r4, #112	; 0x70
 801b8a6:	f7fa fe4b 	bl	8016540 <rmw_subscription_get_actual_qos>
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	b9a8      	cbnz	r0, 801b8da <rcl_subscription_init+0xe6>
 801b8ae:	6828      	ldr	r0, [r5, #0]
 801b8b0:	2270      	movs	r2, #112	; 0x70
 801b8b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801b8b6:	4639      	mov	r1, r7
 801b8b8:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801b8bc:	f005 fc4f 	bl	802115e <memcpy>
 801b8c0:	9807      	ldr	r0, [sp, #28]
 801b8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b8c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801b8c6:	4798      	blx	r3
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	b008      	add	sp, #32
 801b8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8d0:	24c8      	movs	r4, #200	; 0xc8
 801b8d2:	4620      	mov	r0, r4
 801b8d4:	b008      	add	sp, #32
 801b8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8da:	682c      	ldr	r4, [r5, #0]
 801b8dc:	b36c      	cbz	r4, 801b93a <rcl_subscription_init+0x146>
 801b8de:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801b8e2:	b14b      	cbz	r3, 801b8f8 <rcl_subscription_init+0x104>
 801b8e4:	4630      	mov	r0, r6
 801b8e6:	f7ff fd3d 	bl	801b364 <rcl_node_get_rmw_handle>
 801b8ea:	682b      	ldr	r3, [r5, #0]
 801b8ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801b8f0:	f7fa fe3a 	bl	8016568 <rmw_destroy_subscription>
 801b8f4:	682c      	ldr	r4, [r5, #0]
 801b8f6:	b194      	cbz	r4, 801b91e <rcl_subscription_init+0x12a>
 801b8f8:	f104 0650 	add.w	r6, r4, #80	; 0x50
 801b8fc:	4630      	mov	r0, r6
 801b8fe:	f7f9 febb 	bl	8015678 <rcutils_allocator_is_valid>
 801b902:	b158      	cbz	r0, 801b91c <rcl_subscription_init+0x128>
 801b904:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801b906:	b148      	cbz	r0, 801b91c <rcl_subscription_init+0x128>
 801b908:	4631      	mov	r1, r6
 801b90a:	f002 fbe5 	bl	801e0d8 <rmw_subscription_content_filter_options_fini>
 801b90e:	4606      	mov	r6, r0
 801b910:	b9c8      	cbnz	r0, 801b946 <rcl_subscription_init+0x152>
 801b912:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b914:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801b916:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801b918:	4798      	blx	r3
 801b91a:	66e6      	str	r6, [r4, #108]	; 0x6c
 801b91c:	682c      	ldr	r4, [r5, #0]
 801b91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b920:	4620      	mov	r0, r4
 801b922:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801b924:	2401      	movs	r4, #1
 801b926:	4798      	blx	r3
 801b928:	2300      	movs	r3, #0
 801b92a:	602b      	str	r3, [r5, #0]
 801b92c:	e7c8      	b.n	801b8c0 <rcl_subscription_init+0xcc>
 801b92e:	2867      	cmp	r0, #103	; 0x67
 801b930:	d007      	beq.n	801b942 <rcl_subscription_init+0x14e>
 801b932:	2869      	cmp	r0, #105	; 0x69
 801b934:	d005      	beq.n	801b942 <rcl_subscription_init+0x14e>
 801b936:	280a      	cmp	r0, #10
 801b938:	d001      	beq.n	801b93e <rcl_subscription_init+0x14a>
 801b93a:	2401      	movs	r4, #1
 801b93c:	e7c0      	b.n	801b8c0 <rcl_subscription_init+0xcc>
 801b93e:	240a      	movs	r4, #10
 801b940:	e7be      	b.n	801b8c0 <rcl_subscription_init+0xcc>
 801b942:	2467      	movs	r4, #103	; 0x67
 801b944:	e7bc      	b.n	801b8c0 <rcl_subscription_init+0xcc>
 801b946:	f7ff f9ed 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801b94a:	682c      	ldr	r4, [r5, #0]
 801b94c:	e7e7      	b.n	801b91e <rcl_subscription_init+0x12a>
 801b94e:	bf00      	nop

0801b950 <rcl_subscription_get_default_options>:
 801b950:	b570      	push	{r4, r5, r6, lr}
 801b952:	4d14      	ldr	r5, [pc, #80]	; (801b9a4 <rcl_subscription_get_default_options+0x54>)
 801b954:	b08a      	sub	sp, #40	; 0x28
 801b956:	4604      	mov	r4, r0
 801b958:	2250      	movs	r2, #80	; 0x50
 801b95a:	4913      	ldr	r1, [pc, #76]	; (801b9a8 <rcl_subscription_get_default_options+0x58>)
 801b95c:	4628      	mov	r0, r5
 801b95e:	f005 fbfe 	bl	802115e <memcpy>
 801b962:	a804      	add	r0, sp, #16
 801b964:	f7f9 fe7a 	bl	801565c <rcutils_get_default_allocator>
 801b968:	f10d 0c10 	add.w	ip, sp, #16
 801b96c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 801b970:	466e      	mov	r6, sp
 801b972:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b976:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b97a:	f8dc 3000 	ldr.w	r3, [ip]
 801b97e:	4630      	mov	r0, r6
 801b980:	f8ce 3000 	str.w	r3, [lr]
 801b984:	f002 fbc2 	bl	801e10c <rmw_get_default_subscription_options>
 801b988:	f105 0364 	add.w	r3, r5, #100	; 0x64
 801b98c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801b990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b994:	2270      	movs	r2, #112	; 0x70
 801b996:	4629      	mov	r1, r5
 801b998:	4620      	mov	r0, r4
 801b99a:	f005 fbe0 	bl	802115e <memcpy>
 801b99e:	4620      	mov	r0, r4
 801b9a0:	b00a      	add	sp, #40	; 0x28
 801b9a2:	bd70      	pop	{r4, r5, r6, pc}
 801b9a4:	20017578 	.word	0x20017578
 801b9a8:	08022c48 	.word	0x08022c48

0801b9ac <rcl_take>:
 801b9ac:	2800      	cmp	r0, #0
 801b9ae:	d049      	beq.n	801ba44 <rcl_take+0x98>
 801b9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9b4:	4615      	mov	r5, r2
 801b9b6:	6802      	ldr	r2, [r0, #0]
 801b9b8:	b0a4      	sub	sp, #144	; 0x90
 801b9ba:	4604      	mov	r4, r0
 801b9bc:	2a00      	cmp	r2, #0
 801b9be:	d039      	beq.n	801ba34 <rcl_take+0x88>
 801b9c0:	461f      	mov	r7, r3
 801b9c2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 801b9c6:	b3ab      	cbz	r3, 801ba34 <rcl_take+0x88>
 801b9c8:	460e      	mov	r6, r1
 801b9ca:	2900      	cmp	r1, #0
 801b9cc:	d038      	beq.n	801ba40 <rcl_take+0x94>
 801b9ce:	2d00      	cmp	r5, #0
 801b9d0:	d03c      	beq.n	801ba4c <rcl_take+0xa0>
 801b9d2:	a802      	add	r0, sp, #8
 801b9d4:	f04f 0800 	mov.w	r8, #0
 801b9d8:	f002 fc26 	bl	801e228 <rmw_get_zero_initialized_message_info>
 801b9dc:	f10d 0c08 	add.w	ip, sp, #8
 801b9e0:	46ae      	mov	lr, r5
 801b9e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b9ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b9f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b9fa:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801b9fe:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801ba02:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 801ba06:	462b      	mov	r3, r5
 801ba08:	6820      	ldr	r0, [r4, #0]
 801ba0a:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801ba0e:	4631      	mov	r1, r6
 801ba10:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801ba14:	9700      	str	r7, [sp, #0]
 801ba16:	f003 f875 	bl	801eb04 <rmw_take_with_info>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	b9c0      	cbnz	r0, 801ba50 <rcl_take+0xa4>
 801ba1e:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801ba22:	f240 1291 	movw	r2, #401	; 0x191
 801ba26:	2900      	cmp	r1, #0
 801ba28:	bf08      	it	eq
 801ba2a:	4613      	moveq	r3, r2
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	b024      	add	sp, #144	; 0x90
 801ba30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba34:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ba38:	4618      	mov	r0, r3
 801ba3a:	b024      	add	sp, #144	; 0x90
 801ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba40:	230b      	movs	r3, #11
 801ba42:	e7f3      	b.n	801ba2c <rcl_take+0x80>
 801ba44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ba48:	4618      	mov	r0, r3
 801ba4a:	4770      	bx	lr
 801ba4c:	ad14      	add	r5, sp, #80	; 0x50
 801ba4e:	e7c0      	b.n	801b9d2 <rcl_take+0x26>
 801ba50:	f7ff f968 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801ba54:	4603      	mov	r3, r0
 801ba56:	e7e9      	b.n	801ba2c <rcl_take+0x80>

0801ba58 <rcl_subscription_get_rmw_handle>:
 801ba58:	b118      	cbz	r0, 801ba62 <rcl_subscription_get_rmw_handle+0xa>
 801ba5a:	6800      	ldr	r0, [r0, #0]
 801ba5c:	b108      	cbz	r0, 801ba62 <rcl_subscription_get_rmw_handle+0xa>
 801ba5e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801ba62:	4770      	bx	lr

0801ba64 <rcl_subscription_is_valid>:
 801ba64:	b130      	cbz	r0, 801ba74 <rcl_subscription_is_valid+0x10>
 801ba66:	6800      	ldr	r0, [r0, #0]
 801ba68:	b120      	cbz	r0, 801ba74 <rcl_subscription_is_valid+0x10>
 801ba6a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801ba6e:	3800      	subs	r0, #0
 801ba70:	bf18      	it	ne
 801ba72:	2001      	movne	r0, #1
 801ba74:	4770      	bx	lr
 801ba76:	bf00      	nop

0801ba78 <rcl_get_system_time>:
 801ba78:	4608      	mov	r0, r1
 801ba7a:	f7f9 be3d 	b.w	80156f8 <rcutils_system_time_now>
 801ba7e:	bf00      	nop

0801ba80 <rcl_get_steady_time>:
 801ba80:	4608      	mov	r0, r1
 801ba82:	f7f9 be5f 	b.w	8015744 <rcutils_steady_time_now>
 801ba86:	bf00      	nop

0801ba88 <rcl_get_ros_time>:
 801ba88:	7a03      	ldrb	r3, [r0, #8]
 801ba8a:	b510      	push	{r4, lr}
 801ba8c:	460c      	mov	r4, r1
 801ba8e:	b143      	cbz	r3, 801baa2 <rcl_get_ros_time+0x1a>
 801ba90:	2105      	movs	r1, #5
 801ba92:	f001 ff99 	bl	801d9c8 <__atomic_load_8>
 801ba96:	4602      	mov	r2, r0
 801ba98:	460b      	mov	r3, r1
 801ba9a:	2000      	movs	r0, #0
 801ba9c:	e9c4 2300 	strd	r2, r3, [r4]
 801baa0:	bd10      	pop	{r4, pc}
 801baa2:	4608      	mov	r0, r1
 801baa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baa8:	f7f9 be26 	b.w	80156f8 <rcutils_system_time_now>

0801baac <rcl_clock_init>:
 801baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baae:	4605      	mov	r5, r0
 801bab0:	4610      	mov	r0, r2
 801bab2:	4614      	mov	r4, r2
 801bab4:	460e      	mov	r6, r1
 801bab6:	f7f9 fddf 	bl	8015678 <rcutils_allocator_is_valid>
 801baba:	b128      	cbz	r0, 801bac8 <rcl_clock_init+0x1c>
 801babc:	2d03      	cmp	r5, #3
 801babe:	d803      	bhi.n	801bac8 <rcl_clock_init+0x1c>
 801bac0:	e8df f005 	tbb	[pc, r5]
 801bac4:	0659301f 	.word	0x0659301f
 801bac8:	f04f 0c0b 	mov.w	ip, #11
 801bacc:	4660      	mov	r0, ip
 801bace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bad0:	2c00      	cmp	r4, #0
 801bad2:	d0f9      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bad4:	fab6 f386 	clz	r3, r6
 801bad8:	095b      	lsrs	r3, r3, #5
 801bada:	2e00      	cmp	r6, #0
 801badc:	d0f4      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bade:	6133      	str	r3, [r6, #16]
 801bae0:	469c      	mov	ip, r3
 801bae2:	f106 0514 	add.w	r5, r6, #20
 801bae6:	4f32      	ldr	r7, [pc, #200]	; (801bbb0 <rcl_clock_init+0x104>)
 801bae8:	f04f 0e03 	mov.w	lr, #3
 801baec:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801baf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801baf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801baf4:	6823      	ldr	r3, [r4, #0]
 801baf6:	4660      	mov	r0, ip
 801baf8:	602b      	str	r3, [r5, #0]
 801bafa:	60f7      	str	r7, [r6, #12]
 801bafc:	f886 e000 	strb.w	lr, [r6]
 801bb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb02:	2e00      	cmp	r6, #0
 801bb04:	d0e0      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bb06:	2300      	movs	r3, #0
 801bb08:	f106 0514 	add.w	r5, r6, #20
 801bb0c:	7033      	strb	r3, [r6, #0]
 801bb0e:	469c      	mov	ip, r3
 801bb10:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bb14:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bb18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb1c:	6823      	ldr	r3, [r4, #0]
 801bb1e:	4660      	mov	r0, ip
 801bb20:	602b      	str	r3, [r5, #0]
 801bb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb24:	2c00      	cmp	r4, #0
 801bb26:	d0cf      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bb28:	fab6 f586 	clz	r5, r6
 801bb2c:	096d      	lsrs	r5, r5, #5
 801bb2e:	2e00      	cmp	r6, #0
 801bb30:	d0ca      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bb32:	46a6      	mov	lr, r4
 801bb34:	7035      	strb	r5, [r6, #0]
 801bb36:	f106 0c14 	add.w	ip, r6, #20
 801bb3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb3e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bb42:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bb46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb4a:	f8de 3000 	ldr.w	r3, [lr]
 801bb4e:	2010      	movs	r0, #16
 801bb50:	f8cc 3000 	str.w	r3, [ip]
 801bb54:	6823      	ldr	r3, [r4, #0]
 801bb56:	6921      	ldr	r1, [r4, #16]
 801bb58:	4798      	blx	r3
 801bb5a:	6130      	str	r0, [r6, #16]
 801bb5c:	b320      	cbz	r0, 801bba8 <rcl_clock_init+0xfc>
 801bb5e:	2200      	movs	r2, #0
 801bb60:	2300      	movs	r3, #0
 801bb62:	46ac      	mov	ip, r5
 801bb64:	7205      	strb	r5, [r0, #8]
 801bb66:	e9c0 2300 	strd	r2, r3, [r0]
 801bb6a:	4a12      	ldr	r2, [pc, #72]	; (801bbb4 <rcl_clock_init+0x108>)
 801bb6c:	2301      	movs	r3, #1
 801bb6e:	4660      	mov	r0, ip
 801bb70:	60f2      	str	r2, [r6, #12]
 801bb72:	7033      	strb	r3, [r6, #0]
 801bb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb76:	2c00      	cmp	r4, #0
 801bb78:	d0a6      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bb7a:	fab6 f386 	clz	r3, r6
 801bb7e:	095b      	lsrs	r3, r3, #5
 801bb80:	2e00      	cmp	r6, #0
 801bb82:	d0a1      	beq.n	801bac8 <rcl_clock_init+0x1c>
 801bb84:	6133      	str	r3, [r6, #16]
 801bb86:	469c      	mov	ip, r3
 801bb88:	f106 0514 	add.w	r5, r6, #20
 801bb8c:	f8df e028 	ldr.w	lr, [pc, #40]	; 801bbb8 <rcl_clock_init+0x10c>
 801bb90:	2702      	movs	r7, #2
 801bb92:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bb96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb9a:	6823      	ldr	r3, [r4, #0]
 801bb9c:	4660      	mov	r0, ip
 801bb9e:	602b      	str	r3, [r5, #0]
 801bba0:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bba4:	7037      	strb	r7, [r6, #0]
 801bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bba8:	f04f 0c0a 	mov.w	ip, #10
 801bbac:	e78e      	b.n	801bacc <rcl_clock_init+0x20>
 801bbae:	bf00      	nop
 801bbb0:	0801ba81 	.word	0x0801ba81
 801bbb4:	0801ba89 	.word	0x0801ba89
 801bbb8:	0801ba79 	.word	0x0801ba79

0801bbbc <rcl_clock_get_now>:
 801bbbc:	b140      	cbz	r0, 801bbd0 <rcl_clock_get_now+0x14>
 801bbbe:	b139      	cbz	r1, 801bbd0 <rcl_clock_get_now+0x14>
 801bbc0:	7803      	ldrb	r3, [r0, #0]
 801bbc2:	b11b      	cbz	r3, 801bbcc <rcl_clock_get_now+0x10>
 801bbc4:	68c3      	ldr	r3, [r0, #12]
 801bbc6:	b10b      	cbz	r3, 801bbcc <rcl_clock_get_now+0x10>
 801bbc8:	6900      	ldr	r0, [r0, #16]
 801bbca:	4718      	bx	r3
 801bbcc:	2001      	movs	r0, #1
 801bbce:	4770      	bx	lr
 801bbd0:	200b      	movs	r0, #11
 801bbd2:	4770      	bx	lr

0801bbd4 <rcl_clock_add_jump_callback>:
 801bbd4:	b082      	sub	sp, #8
 801bbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbda:	a906      	add	r1, sp, #24
 801bbdc:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 801bbe0:	e881 000c 	stmia.w	r1, {r2, r3}
 801bbe4:	b330      	cbz	r0, 801bc34 <rcl_clock_add_jump_callback+0x60>
 801bbe6:	4604      	mov	r4, r0
 801bbe8:	3014      	adds	r0, #20
 801bbea:	f7f9 fd45 	bl	8015678 <rcutils_allocator_is_valid>
 801bbee:	b30d      	cbz	r5, 801bc34 <rcl_clock_add_jump_callback+0x60>
 801bbf0:	f080 0301 	eor.w	r3, r0, #1
 801bbf4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801bbf8:	d11c      	bne.n	801bc34 <rcl_clock_add_jump_callback+0x60>
 801bbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbfc:	2a00      	cmp	r2, #0
 801bbfe:	db19      	blt.n	801bc34 <rcl_clock_add_jump_callback+0x60>
 801bc00:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801bc04:	2901      	cmp	r1, #1
 801bc06:	f172 0200 	sbcs.w	r2, r2, #0
 801bc0a:	da13      	bge.n	801bc34 <rcl_clock_add_jump_callback+0x60>
 801bc0c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801bc10:	2f00      	cmp	r7, #0
 801bc12:	d040      	beq.n	801bc96 <rcl_clock_add_jump_callback+0xc2>
 801bc14:	4602      	mov	r2, r0
 801bc16:	e003      	b.n	801bc20 <rcl_clock_add_jump_callback+0x4c>
 801bc18:	42bb      	cmp	r3, r7
 801bc1a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 801bc1e:	d010      	beq.n	801bc42 <rcl_clock_add_jump_callback+0x6e>
 801bc20:	6811      	ldr	r1, [r2, #0]
 801bc22:	3301      	adds	r3, #1
 801bc24:	42a9      	cmp	r1, r5
 801bc26:	d1f7      	bne.n	801bc18 <rcl_clock_add_jump_callback+0x44>
 801bc28:	6a11      	ldr	r1, [r2, #32]
 801bc2a:	42b1      	cmp	r1, r6
 801bc2c:	d1f4      	bne.n	801bc18 <rcl_clock_add_jump_callback+0x44>
 801bc2e:	f04f 0e01 	mov.w	lr, #1
 801bc32:	e001      	b.n	801bc38 <rcl_clock_add_jump_callback+0x64>
 801bc34:	f04f 0e0b 	mov.w	lr, #11
 801bc38:	4670      	mov	r0, lr
 801bc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc3e:	b002      	add	sp, #8
 801bc40:	4770      	bx	lr
 801bc42:	3301      	adds	r3, #1
 801bc44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bc48:	00d9      	lsls	r1, r3, #3
 801bc4a:	69e3      	ldr	r3, [r4, #28]
 801bc4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801bc4e:	4798      	blx	r3
 801bc50:	b1f0      	cbz	r0, 801bc90 <rcl_clock_add_jump_callback+0xbc>
 801bc52:	68a3      	ldr	r3, [r4, #8]
 801bc54:	f10d 0c18 	add.w	ip, sp, #24
 801bc58:	6060      	str	r0, [r4, #4]
 801bc5a:	f04f 0e00 	mov.w	lr, #0
 801bc5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801bc62:	f103 0801 	add.w	r8, r3, #1
 801bc66:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801bc6a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bc6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bc72:	f105 0708 	add.w	r7, r5, #8
 801bc76:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bc78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bc7c:	e887 0003 	stmia.w	r7, {r0, r1}
 801bc80:	4670      	mov	r0, lr
 801bc82:	622e      	str	r6, [r5, #32]
 801bc84:	f8c4 8008 	str.w	r8, [r4, #8]
 801bc88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc8c:	b002      	add	sp, #8
 801bc8e:	4770      	bx	lr
 801bc90:	f04f 0e0a 	mov.w	lr, #10
 801bc94:	e7d0      	b.n	801bc38 <rcl_clock_add_jump_callback+0x64>
 801bc96:	2128      	movs	r1, #40	; 0x28
 801bc98:	e7d7      	b.n	801bc4a <rcl_clock_add_jump_callback+0x76>
 801bc9a:	bf00      	nop

0801bc9c <rcl_clock_remove_jump_callback>:
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	d05f      	beq.n	801bd60 <rcl_clock_remove_jump_callback+0xc4>
 801bca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bca4:	4605      	mov	r5, r0
 801bca6:	3014      	adds	r0, #20
 801bca8:	460f      	mov	r7, r1
 801bcaa:	4692      	mov	sl, r2
 801bcac:	f7f9 fce4 	bl	8015678 <rcutils_allocator_is_valid>
 801bcb0:	f080 0001 	eor.w	r0, r0, #1
 801bcb4:	b2c0      	uxtb	r0, r0
 801bcb6:	2800      	cmp	r0, #0
 801bcb8:	d13f      	bne.n	801bd3a <rcl_clock_remove_jump_callback+0x9e>
 801bcba:	2f00      	cmp	r7, #0
 801bcbc:	d03d      	beq.n	801bd3a <rcl_clock_remove_jump_callback+0x9e>
 801bcbe:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801bcc2:	f1b8 0f00 	cmp.w	r8, #0
 801bcc6:	d00c      	beq.n	801bce2 <rcl_clock_remove_jump_callback+0x46>
 801bcc8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801bccc:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801bcd0:	464c      	mov	r4, r9
 801bcd2:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801bcd6:	6823      	ldr	r3, [r4, #0]
 801bcd8:	42bb      	cmp	r3, r7
 801bcda:	d005      	beq.n	801bce8 <rcl_clock_remove_jump_callback+0x4c>
 801bcdc:	3428      	adds	r4, #40	; 0x28
 801bcde:	42a6      	cmp	r6, r4
 801bce0:	d1f9      	bne.n	801bcd6 <rcl_clock_remove_jump_callback+0x3a>
 801bce2:	2001      	movs	r0, #1
 801bce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bce8:	6a23      	ldr	r3, [r4, #32]
 801bcea:	3428      	adds	r4, #40	; 0x28
 801bcec:	42a6      	cmp	r6, r4
 801bcee:	d02f      	beq.n	801bd50 <rcl_clock_remove_jump_callback+0xb4>
 801bcf0:	4553      	cmp	r3, sl
 801bcf2:	d1f0      	bne.n	801bcd6 <rcl_clock_remove_jump_callback+0x3a>
 801bcf4:	46a6      	mov	lr, r4
 801bcf6:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 801bcfa:	3428      	adds	r4, #40	; 0x28
 801bcfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bd00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bd08:	42a6      	cmp	r6, r4
 801bd0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd0e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801bd12:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bd16:	d1ed      	bne.n	801bcf4 <rcl_clock_remove_jump_callback+0x58>
 801bd18:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801bd1c:	60ac      	str	r4, [r5, #8]
 801bd1e:	b17c      	cbz	r4, 801bd40 <rcl_clock_remove_jump_callback+0xa4>
 801bd20:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bd24:	69eb      	ldr	r3, [r5, #28]
 801bd26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801bd28:	4648      	mov	r0, r9
 801bd2a:	00e1      	lsls	r1, r4, #3
 801bd2c:	4798      	blx	r3
 801bd2e:	4603      	mov	r3, r0
 801bd30:	b1c0      	cbz	r0, 801bd64 <rcl_clock_remove_jump_callback+0xc8>
 801bd32:	2000      	movs	r0, #0
 801bd34:	606b      	str	r3, [r5, #4]
 801bd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd3a:	200b      	movs	r0, #11
 801bd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd40:	4648      	mov	r0, r9
 801bd42:	69ab      	ldr	r3, [r5, #24]
 801bd44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801bd46:	4798      	blx	r3
 801bd48:	4620      	mov	r0, r4
 801bd4a:	606c      	str	r4, [r5, #4]
 801bd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd50:	4553      	cmp	r3, sl
 801bd52:	d1c6      	bne.n	801bce2 <rcl_clock_remove_jump_callback+0x46>
 801bd54:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801bd58:	60ac      	str	r4, [r5, #8]
 801bd5a:	2c00      	cmp	r4, #0
 801bd5c:	d1e0      	bne.n	801bd20 <rcl_clock_remove_jump_callback+0x84>
 801bd5e:	e7ef      	b.n	801bd40 <rcl_clock_remove_jump_callback+0xa4>
 801bd60:	200b      	movs	r0, #11
 801bd62:	4770      	bx	lr
 801bd64:	200a      	movs	r0, #10
 801bd66:	e7e9      	b.n	801bd3c <rcl_clock_remove_jump_callback+0xa0>

0801bd68 <_rcl_timer_time_jump>:
 801bd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd6c:	4605      	mov	r5, r0
 801bd6e:	b084      	sub	sp, #16
 801bd70:	4614      	mov	r4, r2
 801bd72:	b131      	cbz	r1, 801bd82 <_rcl_timer_time_jump+0x1a>
 801bd74:	7803      	ldrb	r3, [r0, #0]
 801bd76:	3b02      	subs	r3, #2
 801bd78:	2b01      	cmp	r3, #1
 801bd7a:	d93f      	bls.n	801bdfc <_rcl_timer_time_jump+0x94>
 801bd7c:	b004      	add	sp, #16
 801bd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd82:	6813      	ldr	r3, [r2, #0]
 801bd84:	a902      	add	r1, sp, #8
 801bd86:	6818      	ldr	r0, [r3, #0]
 801bd88:	f7ff ff18 	bl	801bbbc <rcl_clock_get_now>
 801bd8c:	2800      	cmp	r0, #0
 801bd8e:	d1f5      	bne.n	801bd7c <_rcl_timer_time_jump+0x14>
 801bd90:	6820      	ldr	r0, [r4, #0]
 801bd92:	2105      	movs	r1, #5
 801bd94:	3020      	adds	r0, #32
 801bd96:	f001 fe17 	bl	801d9c8 <__atomic_load_8>
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	4681      	mov	r9, r0
 801bd9e:	4688      	mov	r8, r1
 801bda0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801bda4:	2105      	movs	r1, #5
 801bda6:	f001 fe0f 	bl	801d9c8 <__atomic_load_8>
 801bdaa:	4607      	mov	r7, r0
 801bdac:	6820      	ldr	r0, [r4, #0]
 801bdae:	460e      	mov	r6, r1
 801bdb0:	2105      	movs	r1, #5
 801bdb2:	3018      	adds	r0, #24
 801bdb4:	f001 fe08 	bl	801d9c8 <__atomic_load_8>
 801bdb8:	782b      	ldrb	r3, [r5, #0]
 801bdba:	4682      	mov	sl, r0
 801bdbc:	460d      	mov	r5, r1
 801bdbe:	3b02      	subs	r3, #2
 801bdc0:	9a02      	ldr	r2, [sp, #8]
 801bdc2:	2b01      	cmp	r3, #1
 801bdc4:	9b03      	ldr	r3, [sp, #12]
 801bdc6:	d937      	bls.n	801be38 <_rcl_timer_time_jump+0xd0>
 801bdc8:	42ba      	cmp	r2, r7
 801bdca:	eb73 0106 	sbcs.w	r1, r3, r6
 801bdce:	da60      	bge.n	801be92 <_rcl_timer_time_jump+0x12a>
 801bdd0:	454a      	cmp	r2, r9
 801bdd2:	eb73 0108 	sbcs.w	r1, r3, r8
 801bdd6:	dad1      	bge.n	801bd7c <_rcl_timer_time_jump+0x14>
 801bdd8:	eb1a 0202 	adds.w	r2, sl, r2
 801bddc:	6820      	ldr	r0, [r4, #0]
 801bdde:	eb43 0305 	adc.w	r3, r3, r5
 801bde2:	2505      	movs	r5, #5
 801bde4:	3028      	adds	r0, #40	; 0x28
 801bde6:	9500      	str	r5, [sp, #0]
 801bde8:	f001 fe24 	bl	801da34 <__atomic_store_8>
 801bdec:	6820      	ldr	r0, [r4, #0]
 801bdee:	9500      	str	r5, [sp, #0]
 801bdf0:	3020      	adds	r0, #32
 801bdf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bdf6:	f001 fe1d 	bl	801da34 <__atomic_store_8>
 801bdfa:	e7bf      	b.n	801bd7c <_rcl_timer_time_jump+0x14>
 801bdfc:	6813      	ldr	r3, [r2, #0]
 801bdfe:	a902      	add	r1, sp, #8
 801be00:	6818      	ldr	r0, [r3, #0]
 801be02:	f7ff fedb 	bl	801bbbc <rcl_clock_get_now>
 801be06:	2800      	cmp	r0, #0
 801be08:	d1b8      	bne.n	801bd7c <_rcl_timer_time_jump+0x14>
 801be0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be0e:	4313      	orrs	r3, r2
 801be10:	d0b4      	beq.n	801bd7c <_rcl_timer_time_jump+0x14>
 801be12:	6820      	ldr	r0, [r4, #0]
 801be14:	2105      	movs	r1, #5
 801be16:	3028      	adds	r0, #40	; 0x28
 801be18:	f001 fdd6 	bl	801d9c8 <__atomic_load_8>
 801be1c:	9d02      	ldr	r5, [sp, #8]
 801be1e:	4602      	mov	r2, r0
 801be20:	9b03      	ldr	r3, [sp, #12]
 801be22:	6820      	ldr	r0, [r4, #0]
 801be24:	1b52      	subs	r2, r2, r5
 801be26:	f100 0030 	add.w	r0, r0, #48	; 0x30
 801be2a:	eb61 0303 	sbc.w	r3, r1, r3
 801be2e:	2105      	movs	r1, #5
 801be30:	9100      	str	r1, [sp, #0]
 801be32:	f001 fdff 	bl	801da34 <__atomic_store_8>
 801be36:	e7a1      	b.n	801bd7c <_rcl_timer_time_jump+0x14>
 801be38:	4313      	orrs	r3, r2
 801be3a:	d09f      	beq.n	801bd7c <_rcl_timer_time_jump+0x14>
 801be3c:	6820      	ldr	r0, [r4, #0]
 801be3e:	f04f 0805 	mov.w	r8, #5
 801be42:	2300      	movs	r3, #0
 801be44:	2200      	movs	r2, #0
 801be46:	3030      	adds	r0, #48	; 0x30
 801be48:	f8cd 8000 	str.w	r8, [sp]
 801be4c:	f001 fe28 	bl	801daa0 <__atomic_exchange_8>
 801be50:	ea51 0300 	orrs.w	r3, r1, r0
 801be54:	4606      	mov	r6, r0
 801be56:	460f      	mov	r7, r1
 801be58:	d090      	beq.n	801bd7c <_rcl_timer_time_jump+0x14>
 801be5a:	9a02      	ldr	r2, [sp, #8]
 801be5c:	9b03      	ldr	r3, [sp, #12]
 801be5e:	1a12      	subs	r2, r2, r0
 801be60:	f8cd 8000 	str.w	r8, [sp]
 801be64:	6820      	ldr	r0, [r4, #0]
 801be66:	eb63 0301 	sbc.w	r3, r3, r1
 801be6a:	eb12 020a 	adds.w	r2, r2, sl
 801be6e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 801be72:	eb43 0305 	adc.w	r3, r3, r5
 801be76:	f001 fddd 	bl	801da34 <__atomic_store_8>
 801be7a:	f8cd 8000 	str.w	r8, [sp]
 801be7e:	6820      	ldr	r0, [r4, #0]
 801be80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be84:	3020      	adds	r0, #32
 801be86:	1b92      	subs	r2, r2, r6
 801be88:	eb63 0307 	sbc.w	r3, r3, r7
 801be8c:	f001 fdd2 	bl	801da34 <__atomic_store_8>
 801be90:	e774      	b.n	801bd7c <_rcl_timer_time_jump+0x14>
 801be92:	6820      	ldr	r0, [r4, #0]
 801be94:	3008      	adds	r0, #8
 801be96:	f004 f9c3 	bl	8020220 <rcl_trigger_guard_condition>
 801be9a:	e76f      	b.n	801bd7c <_rcl_timer_time_jump+0x14>

0801be9c <rcl_get_zero_initialized_timer>:
 801be9c:	4b01      	ldr	r3, [pc, #4]	; (801bea4 <rcl_get_zero_initialized_timer+0x8>)
 801be9e:	6818      	ldr	r0, [r3, #0]
 801bea0:	4770      	bx	lr
 801bea2:	bf00      	nop
 801bea4:	08022c98 	.word	0x08022c98

0801bea8 <rcl_timer_init>:
 801bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beac:	b0ab      	sub	sp, #172	; 0xac
 801beae:	460d      	mov	r5, r1
 801beb0:	4604      	mov	r4, r0
 801beb2:	4692      	mov	sl, r2
 801beb4:	a837      	add	r0, sp, #220	; 0xdc
 801beb6:	9f35      	ldr	r7, [sp, #212]	; 0xd4
 801beb8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 801bebc:	f7f9 fbdc 	bl	8015678 <rcutils_allocator_is_valid>
 801bec0:	fab5 f385 	clz	r3, r5
 801bec4:	095b      	lsrs	r3, r3, #5
 801bec6:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801beca:	2c00      	cmp	r4, #0
 801becc:	bf08      	it	eq
 801bece:	f043 0301 	orreq.w	r3, r3, #1
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d164      	bne.n	801bfa0 <rcl_timer_init+0xf8>
 801bed6:	f080 0001 	eor.w	r0, r0, #1
 801beda:	b2c0      	uxtb	r0, r0
 801bedc:	2800      	cmp	r0, #0
 801bede:	d15f      	bne.n	801bfa0 <rcl_timer_init+0xf8>
 801bee0:	6823      	ldr	r3, [r4, #0]
 801bee2:	b123      	cbz	r3, 801beee <rcl_timer_init+0x46>
 801bee4:	2664      	movs	r6, #100	; 0x64
 801bee6:	4630      	mov	r0, r6
 801bee8:	b02b      	add	sp, #172	; 0xac
 801beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beee:	a908      	add	r1, sp, #32
 801bef0:	4628      	mov	r0, r5
 801bef2:	f7ff fe63 	bl	801bbbc <rcl_clock_get_now>
 801bef6:	4606      	mov	r6, r0
 801bef8:	2800      	cmp	r0, #0
 801befa:	d1f4      	bne.n	801bee6 <rcl_timer_init+0x3e>
 801befc:	f10d 0b18 	add.w	fp, sp, #24
 801bf00:	ae0b      	add	r6, sp, #44	; 0x2c
 801bf02:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801bf06:	4658      	mov	r0, fp
 801bf08:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 801bf0c:	f004 f892 	bl	8020034 <rcl_get_zero_initialized_guard_condition>
 801bf10:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801bf14:	e889 0003 	stmia.w	r9, {r0, r1}
 801bf18:	4630      	mov	r0, r6
 801bf1a:	f004 f965 	bl	80201e8 <rcl_guard_condition_get_default_options>
 801bf1e:	ab0d      	add	r3, sp, #52	; 0x34
 801bf20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bf24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bf28:	4651      	mov	r1, sl
 801bf2a:	4648      	mov	r0, r9
 801bf2c:	e896 000c 	ldmia.w	r6, {r2, r3}
 801bf30:	f004 f88a 	bl	8020048 <rcl_guard_condition_init>
 801bf34:	4606      	mov	r6, r0
 801bf36:	2800      	cmp	r0, #0
 801bf38:	d1d5      	bne.n	801bee6 <rcl_timer_init+0x3e>
 801bf3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	2b01      	cmp	r3, #1
 801bf40:	d033      	beq.n	801bfaa <rcl_timer_init+0x102>
 801bf42:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801bf44:	4642      	mov	r2, r8
 801bf46:	463b      	mov	r3, r7
 801bf48:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 801bf4c:	911a      	str	r1, [sp, #104]	; 0x68
 801bf4e:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 801bf52:	f04f 0a00 	mov.w	sl, #0
 801bf56:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 801bf5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bf5e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801c008 <rcl_timer_init+0x160>
 801bf62:	eb12 0008 	adds.w	r0, r2, r8
 801bf66:	eb47 0103 	adc.w	r1, r7, r3
 801bf6a:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 801bf6e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 801bf72:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 801bf76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bf7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bf7e:	f8de 3000 	ldr.w	r3, [lr]
 801bf82:	2050      	movs	r0, #80	; 0x50
 801bf84:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 801bf88:	4619      	mov	r1, r3
 801bf8a:	f8cc 3000 	str.w	r3, [ip]
 801bf8e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801bf90:	4798      	blx	r3
 801bf92:	6020      	str	r0, [r4, #0]
 801bf94:	b358      	cbz	r0, 801bfee <rcl_timer_init+0x146>
 801bf96:	2250      	movs	r2, #80	; 0x50
 801bf98:	a916      	add	r1, sp, #88	; 0x58
 801bf9a:	f005 f8e0 	bl	802115e <memcpy>
 801bf9e:	e7a2      	b.n	801bee6 <rcl_timer_init+0x3e>
 801bfa0:	260b      	movs	r6, #11
 801bfa2:	4630      	mov	r0, r6
 801bfa4:	b02b      	add	sp, #172	; 0xac
 801bfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfaa:	2001      	movs	r0, #1
 801bfac:	2100      	movs	r1, #0
 801bfae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801bfb2:	ab12      	add	r3, sp, #72	; 0x48
 801bfb4:	4a16      	ldr	r2, [pc, #88]	; (801c010 <rcl_timer_init+0x168>)
 801bfb6:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801bfba:	9405      	str	r4, [sp, #20]
 801bfbc:	9204      	str	r2, [sp, #16]
 801bfbe:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801bfc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bfc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bfca:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801bfce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bfd0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bfd4:	4628      	mov	r0, r5
 801bfd6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801bfda:	f7ff fdfb 	bl	801bbd4 <rcl_clock_add_jump_callback>
 801bfde:	4603      	mov	r3, r0
 801bfe0:	2800      	cmp	r0, #0
 801bfe2:	d0ae      	beq.n	801bf42 <rcl_timer_init+0x9a>
 801bfe4:	4648      	mov	r0, r9
 801bfe6:	461e      	mov	r6, r3
 801bfe8:	f004 f8d8 	bl	802019c <rcl_guard_condition_fini>
 801bfec:	e77b      	b.n	801bee6 <rcl_timer_init+0x3e>
 801bfee:	4648      	mov	r0, r9
 801bff0:	260a      	movs	r6, #10
 801bff2:	f004 f8d3 	bl	802019c <rcl_guard_condition_fini>
 801bff6:	4622      	mov	r2, r4
 801bff8:	4905      	ldr	r1, [pc, #20]	; (801c010 <rcl_timer_init+0x168>)
 801bffa:	4628      	mov	r0, r5
 801bffc:	f7ff fe4e 	bl	801bc9c <rcl_clock_remove_jump_callback>
 801c000:	e771      	b.n	801bee6 <rcl_timer_init+0x3e>
 801c002:	bf00      	nop
 801c004:	f3af 8000 	nop.w
	...
 801c010:	0801bd69 	.word	0x0801bd69

0801c014 <rcl_timer_call>:
 801c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c018:	b087      	sub	sp, #28
 801c01a:	2800      	cmp	r0, #0
 801c01c:	d06c      	beq.n	801c0f8 <rcl_timer_call+0xe4>
 801c01e:	6803      	ldr	r3, [r0, #0]
 801c020:	4604      	mov	r4, r0
 801c022:	2b00      	cmp	r3, #0
 801c024:	d062      	beq.n	801c0ec <rcl_timer_call+0xd8>
 801c026:	f3bf 8f5b 	dmb	ish
 801c02a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c02e:	f3bf 8f5b 	dmb	ish
 801c032:	2b00      	cmp	r3, #0
 801c034:	d14f      	bne.n	801c0d6 <rcl_timer_call+0xc2>
 801c036:	6803      	ldr	r3, [r0, #0]
 801c038:	a904      	add	r1, sp, #16
 801c03a:	6818      	ldr	r0, [r3, #0]
 801c03c:	f7ff fdbe 	bl	801bbbc <rcl_clock_get_now>
 801c040:	4605      	mov	r5, r0
 801c042:	2800      	cmp	r0, #0
 801c044:	d149      	bne.n	801c0da <rcl_timer_call+0xc6>
 801c046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	db49      	blt.n	801c0e2 <rcl_timer_call+0xce>
 801c04e:	2605      	movs	r6, #5
 801c050:	6820      	ldr	r0, [r4, #0]
 801c052:	9600      	str	r6, [sp, #0]
 801c054:	3020      	adds	r0, #32
 801c056:	f001 fd23 	bl	801daa0 <__atomic_exchange_8>
 801c05a:	6823      	ldr	r3, [r4, #0]
 801c05c:	4680      	mov	r8, r0
 801c05e:	f3bf 8f5b 	dmb	ish
 801c062:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c066:	f3bf 8f5b 	dmb	ish
 801c06a:	6820      	ldr	r0, [r4, #0]
 801c06c:	4689      	mov	r9, r1
 801c06e:	4631      	mov	r1, r6
 801c070:	3028      	adds	r0, #40	; 0x28
 801c072:	f001 fca9 	bl	801d9c8 <__atomic_load_8>
 801c076:	460f      	mov	r7, r1
 801c078:	4631      	mov	r1, r6
 801c07a:	4606      	mov	r6, r0
 801c07c:	6820      	ldr	r0, [r4, #0]
 801c07e:	3018      	adds	r0, #24
 801c080:	f001 fca2 	bl	801d9c8 <__atomic_load_8>
 801c084:	4602      	mov	r2, r0
 801c086:	9804      	ldr	r0, [sp, #16]
 801c088:	460b      	mov	r3, r1
 801c08a:	18b6      	adds	r6, r6, r2
 801c08c:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c090:	4692      	mov	sl, r2
 801c092:	eb47 0701 	adc.w	r7, r7, r1
 801c096:	4286      	cmp	r6, r0
 801c098:	eb77 010c 	sbcs.w	r1, r7, ip
 801c09c:	da04      	bge.n	801c0a8 <rcl_timer_call+0x94>
 801c09e:	ea53 0102 	orrs.w	r1, r3, r2
 801c0a2:	d12e      	bne.n	801c102 <rcl_timer_call+0xee>
 801c0a4:	4606      	mov	r6, r0
 801c0a6:	4667      	mov	r7, ip
 801c0a8:	6820      	ldr	r0, [r4, #0]
 801c0aa:	2105      	movs	r1, #5
 801c0ac:	4632      	mov	r2, r6
 801c0ae:	463b      	mov	r3, r7
 801c0b0:	3028      	adds	r0, #40	; 0x28
 801c0b2:	9100      	str	r1, [sp, #0]
 801c0b4:	f001 fcbe 	bl	801da34 <__atomic_store_8>
 801c0b8:	f1bb 0f00 	cmp.w	fp, #0
 801c0bc:	d00d      	beq.n	801c0da <rcl_timer_call+0xc6>
 801c0be:	9a04      	ldr	r2, [sp, #16]
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	9b05      	ldr	r3, [sp, #20]
 801c0c4:	ebb2 0208 	subs.w	r2, r2, r8
 801c0c8:	eb63 0309 	sbc.w	r3, r3, r9
 801c0cc:	47d8      	blx	fp
 801c0ce:	4628      	mov	r0, r5
 801c0d0:	b007      	add	sp, #28
 801c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0d6:	f240 3521 	movw	r5, #801	; 0x321
 801c0da:	4628      	mov	r0, r5
 801c0dc:	b007      	add	sp, #28
 801c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0e2:	2501      	movs	r5, #1
 801c0e4:	4628      	mov	r0, r5
 801c0e6:	b007      	add	sp, #28
 801c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ec:	f44f 7548 	mov.w	r5, #800	; 0x320
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	b007      	add	sp, #28
 801c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0f8:	250b      	movs	r5, #11
 801c0fa:	4628      	mov	r0, r5
 801c0fc:	b007      	add	sp, #28
 801c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c102:	1b80      	subs	r0, r0, r6
 801c104:	eb6c 0107 	sbc.w	r1, ip, r7
 801c108:	3801      	subs	r0, #1
 801c10a:	f161 0100 	sbc.w	r1, r1, #0
 801c10e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c112:	f7e4 fa0b 	bl	800052c <__aeabi_ldivmod>
 801c116:	9b02      	ldr	r3, [sp, #8]
 801c118:	3001      	adds	r0, #1
 801c11a:	f141 0100 	adc.w	r1, r1, #0
 801c11e:	fb00 f303 	mul.w	r3, r0, r3
 801c122:	fb01 330a 	mla	r3, r1, sl, r3
 801c126:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c12a:	1986      	adds	r6, r0, r6
 801c12c:	4453      	add	r3, sl
 801c12e:	eb43 0707 	adc.w	r7, r3, r7
 801c132:	e7b9      	b.n	801c0a8 <rcl_timer_call+0x94>

0801c134 <rcl_timer_is_ready>:
 801c134:	b570      	push	{r4, r5, r6, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	b380      	cbz	r0, 801c19c <rcl_timer_is_ready+0x68>
 801c13a:	6803      	ldr	r3, [r0, #0]
 801c13c:	4604      	mov	r4, r0
 801c13e:	b38b      	cbz	r3, 801c1a4 <rcl_timer_is_ready+0x70>
 801c140:	460d      	mov	r5, r1
 801c142:	b359      	cbz	r1, 801c19c <rcl_timer_is_ready+0x68>
 801c144:	f3bf 8f5b 	dmb	ish
 801c148:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c14c:	f3bf 8f5b 	dmb	ish
 801c150:	b953      	cbnz	r3, 801c168 <rcl_timer_is_ready+0x34>
 801c152:	6803      	ldr	r3, [r0, #0]
 801c154:	4669      	mov	r1, sp
 801c156:	6818      	ldr	r0, [r3, #0]
 801c158:	f7ff fd30 	bl	801bbbc <rcl_clock_get_now>
 801c15c:	4606      	mov	r6, r0
 801c15e:	b148      	cbz	r0, 801c174 <rcl_timer_is_ready+0x40>
 801c160:	f240 3321 	movw	r3, #801	; 0x321
 801c164:	4298      	cmp	r0, r3
 801c166:	d102      	bne.n	801c16e <rcl_timer_is_ready+0x3a>
 801c168:	2300      	movs	r3, #0
 801c16a:	461e      	mov	r6, r3
 801c16c:	702b      	strb	r3, [r5, #0]
 801c16e:	4630      	mov	r0, r6
 801c170:	b002      	add	sp, #8
 801c172:	bd70      	pop	{r4, r5, r6, pc}
 801c174:	6820      	ldr	r0, [r4, #0]
 801c176:	2105      	movs	r1, #5
 801c178:	3028      	adds	r0, #40	; 0x28
 801c17a:	f001 fc25 	bl	801d9c8 <__atomic_load_8>
 801c17e:	9b00      	ldr	r3, [sp, #0]
 801c180:	1ac0      	subs	r0, r0, r3
 801c182:	9b01      	ldr	r3, [sp, #4]
 801c184:	eb61 0103 	sbc.w	r1, r1, r3
 801c188:	2801      	cmp	r0, #1
 801c18a:	4630      	mov	r0, r6
 801c18c:	f171 0300 	sbcs.w	r3, r1, #0
 801c190:	bfb4      	ite	lt
 801c192:	2301      	movlt	r3, #1
 801c194:	2300      	movge	r3, #0
 801c196:	702b      	strb	r3, [r5, #0]
 801c198:	b002      	add	sp, #8
 801c19a:	bd70      	pop	{r4, r5, r6, pc}
 801c19c:	260b      	movs	r6, #11
 801c19e:	4630      	mov	r0, r6
 801c1a0:	b002      	add	sp, #8
 801c1a2:	bd70      	pop	{r4, r5, r6, pc}
 801c1a4:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c1a8:	e7e1      	b.n	801c16e <rcl_timer_is_ready+0x3a>
 801c1aa:	bf00      	nop

0801c1ac <rcl_timer_get_time_until_next_call>:
 801c1ac:	b570      	push	{r4, r5, r6, lr}
 801c1ae:	b082      	sub	sp, #8
 801c1b0:	b330      	cbz	r0, 801c200 <rcl_timer_get_time_until_next_call+0x54>
 801c1b2:	6803      	ldr	r3, [r0, #0]
 801c1b4:	4604      	mov	r4, r0
 801c1b6:	b33b      	cbz	r3, 801c208 <rcl_timer_get_time_until_next_call+0x5c>
 801c1b8:	460d      	mov	r5, r1
 801c1ba:	b309      	cbz	r1, 801c200 <rcl_timer_get_time_until_next_call+0x54>
 801c1bc:	f3bf 8f5b 	dmb	ish
 801c1c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c1c4:	f3bf 8f5b 	dmb	ish
 801c1c8:	b9ab      	cbnz	r3, 801c1f6 <rcl_timer_get_time_until_next_call+0x4a>
 801c1ca:	6803      	ldr	r3, [r0, #0]
 801c1cc:	4669      	mov	r1, sp
 801c1ce:	6818      	ldr	r0, [r3, #0]
 801c1d0:	f7ff fcf4 	bl	801bbbc <rcl_clock_get_now>
 801c1d4:	4606      	mov	r6, r0
 801c1d6:	b958      	cbnz	r0, 801c1f0 <rcl_timer_get_time_until_next_call+0x44>
 801c1d8:	6820      	ldr	r0, [r4, #0]
 801c1da:	2105      	movs	r1, #5
 801c1dc:	3028      	adds	r0, #40	; 0x28
 801c1de:	f001 fbf3 	bl	801d9c8 <__atomic_load_8>
 801c1e2:	9b00      	ldr	r3, [sp, #0]
 801c1e4:	1ac0      	subs	r0, r0, r3
 801c1e6:	9b01      	ldr	r3, [sp, #4]
 801c1e8:	eb61 0103 	sbc.w	r1, r1, r3
 801c1ec:	6028      	str	r0, [r5, #0]
 801c1ee:	6069      	str	r1, [r5, #4]
 801c1f0:	4630      	mov	r0, r6
 801c1f2:	b002      	add	sp, #8
 801c1f4:	bd70      	pop	{r4, r5, r6, pc}
 801c1f6:	f240 3621 	movw	r6, #801	; 0x321
 801c1fa:	4630      	mov	r0, r6
 801c1fc:	b002      	add	sp, #8
 801c1fe:	bd70      	pop	{r4, r5, r6, pc}
 801c200:	260b      	movs	r6, #11
 801c202:	4630      	mov	r0, r6
 801c204:	b002      	add	sp, #8
 801c206:	bd70      	pop	{r4, r5, r6, pc}
 801c208:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c20c:	e7f0      	b.n	801c1f0 <rcl_timer_get_time_until_next_call+0x44>
 801c20e:	bf00      	nop

0801c210 <rcl_timer_get_guard_condition>:
 801c210:	b130      	cbz	r0, 801c220 <rcl_timer_get_guard_condition+0x10>
 801c212:	6800      	ldr	r0, [r0, #0]
 801c214:	b120      	cbz	r0, 801c220 <rcl_timer_get_guard_condition+0x10>
 801c216:	68c3      	ldr	r3, [r0, #12]
 801c218:	b10b      	cbz	r3, 801c21e <rcl_timer_get_guard_condition+0xe>
 801c21a:	3008      	adds	r0, #8
 801c21c:	4770      	bx	lr
 801c21e:	4618      	mov	r0, r3
 801c220:	4770      	bx	lr
 801c222:	bf00      	nop

0801c224 <rcl_validate_enclave_name_with_size>:
 801c224:	2800      	cmp	r0, #0
 801c226:	d049      	beq.n	801c2bc <rcl_validate_enclave_name_with_size+0x98>
 801c228:	b570      	push	{r4, r5, r6, lr}
 801c22a:	4615      	mov	r5, r2
 801c22c:	b0c2      	sub	sp, #264	; 0x108
 801c22e:	b19a      	cbz	r2, 801c258 <rcl_validate_enclave_name_with_size+0x34>
 801c230:	461e      	mov	r6, r3
 801c232:	466a      	mov	r2, sp
 801c234:	ab01      	add	r3, sp, #4
 801c236:	460c      	mov	r4, r1
 801c238:	f002 f87a 	bl	801e330 <rmw_validate_namespace_with_size>
 801c23c:	4684      	mov	ip, r0
 801c23e:	b9b8      	cbnz	r0, 801c270 <rcl_validate_enclave_name_with_size+0x4c>
 801c240:	9900      	ldr	r1, [sp, #0]
 801c242:	b171      	cbz	r1, 801c262 <rcl_validate_enclave_name_with_size+0x3e>
 801c244:	2907      	cmp	r1, #7
 801c246:	d019      	beq.n	801c27c <rcl_validate_enclave_name_with_size+0x58>
 801c248:	1e4b      	subs	r3, r1, #1
 801c24a:	2b05      	cmp	r3, #5
 801c24c:	d83a      	bhi.n	801c2c4 <rcl_validate_enclave_name_with_size+0xa0>
 801c24e:	e8df f003 	tbb	[pc, r3]
 801c252:	2926      	.short	0x2926
 801c254:	1d322f2c 	.word	0x1d322f2c
 801c258:	f04f 0c0b 	mov.w	ip, #11
 801c25c:	4660      	mov	r0, ip
 801c25e:	b042      	add	sp, #264	; 0x108
 801c260:	bd70      	pop	{r4, r5, r6, pc}
 801c262:	2907      	cmp	r1, #7
 801c264:	d00a      	beq.n	801c27c <rcl_validate_enclave_name_with_size+0x58>
 801c266:	2300      	movs	r3, #0
 801c268:	4660      	mov	r0, ip
 801c26a:	602b      	str	r3, [r5, #0]
 801c26c:	b042      	add	sp, #264	; 0x108
 801c26e:	bd70      	pop	{r4, r5, r6, pc}
 801c270:	f7fe fd58 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801c274:	4684      	mov	ip, r0
 801c276:	4660      	mov	r0, ip
 801c278:	b042      	add	sp, #264	; 0x108
 801c27a:	bd70      	pop	{r4, r5, r6, pc}
 801c27c:	2cff      	cmp	r4, #255	; 0xff
 801c27e:	d9f2      	bls.n	801c266 <rcl_validate_enclave_name_with_size+0x42>
 801c280:	6029      	str	r1, [r5, #0]
 801c282:	2e00      	cmp	r6, #0
 801c284:	d0ea      	beq.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c286:	23fe      	movs	r3, #254	; 0xfe
 801c288:	6033      	str	r3, [r6, #0]
 801c28a:	e7e7      	b.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c28c:	2306      	movs	r3, #6
 801c28e:	602b      	str	r3, [r5, #0]
 801c290:	2e00      	cmp	r6, #0
 801c292:	d0e3      	beq.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c294:	9b01      	ldr	r3, [sp, #4]
 801c296:	4660      	mov	r0, ip
 801c298:	6033      	str	r3, [r6, #0]
 801c29a:	b042      	add	sp, #264	; 0x108
 801c29c:	bd70      	pop	{r4, r5, r6, pc}
 801c29e:	2301      	movs	r3, #1
 801c2a0:	602b      	str	r3, [r5, #0]
 801c2a2:	e7f5      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2a4:	2302      	movs	r3, #2
 801c2a6:	602b      	str	r3, [r5, #0]
 801c2a8:	e7f2      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2aa:	2303      	movs	r3, #3
 801c2ac:	602b      	str	r3, [r5, #0]
 801c2ae:	e7ef      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2b0:	2304      	movs	r3, #4
 801c2b2:	602b      	str	r3, [r5, #0]
 801c2b4:	e7ec      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2b6:	2305      	movs	r3, #5
 801c2b8:	602b      	str	r3, [r5, #0]
 801c2ba:	e7e9      	b.n	801c290 <rcl_validate_enclave_name_with_size+0x6c>
 801c2bc:	f04f 0c0b 	mov.w	ip, #11
 801c2c0:	4660      	mov	r0, ip
 801c2c2:	4770      	bx	lr
 801c2c4:	460b      	mov	r3, r1
 801c2c6:	4a04      	ldr	r2, [pc, #16]	; (801c2d8 <rcl_validate_enclave_name_with_size+0xb4>)
 801c2c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c2cc:	a802      	add	r0, sp, #8
 801c2ce:	f001 fd33 	bl	801dd38 <rcutils_snprintf>
 801c2d2:	f04f 0c01 	mov.w	ip, #1
 801c2d6:	e7c1      	b.n	801c25c <rcl_validate_enclave_name_with_size+0x38>
 801c2d8:	08022c9c 	.word	0x08022c9c

0801c2dc <rcl_validate_enclave_name>:
 801c2dc:	b168      	cbz	r0, 801c2fa <rcl_validate_enclave_name+0x1e>
 801c2de:	b570      	push	{r4, r5, r6, lr}
 801c2e0:	460d      	mov	r5, r1
 801c2e2:	4616      	mov	r6, r2
 801c2e4:	4604      	mov	r4, r0
 801c2e6:	f7e3 ffb5 	bl	8000254 <strlen>
 801c2ea:	4633      	mov	r3, r6
 801c2ec:	4601      	mov	r1, r0
 801c2ee:	462a      	mov	r2, r5
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2f6:	f7ff bf95 	b.w	801c224 <rcl_validate_enclave_name_with_size>
 801c2fa:	200b      	movs	r0, #11
 801c2fc:	4770      	bx	lr
 801c2fe:	bf00      	nop

0801c300 <rcl_get_zero_initialized_wait_set>:
 801c300:	b510      	push	{r4, lr}
 801c302:	4c08      	ldr	r4, [pc, #32]	; (801c324 <rcl_get_zero_initialized_wait_set+0x24>)
 801c304:	4686      	mov	lr, r0
 801c306:	4684      	mov	ip, r0
 801c308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c30a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c30e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c310:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c316:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c31a:	6823      	ldr	r3, [r4, #0]
 801c31c:	4670      	mov	r0, lr
 801c31e:	f8cc 3000 	str.w	r3, [ip]
 801c322:	bd10      	pop	{r4, pc}
 801c324:	08022cfc 	.word	0x08022cfc

0801c328 <rcl_wait_set_is_valid>:
 801c328:	b118      	cbz	r0, 801c332 <rcl_wait_set_is_valid+0xa>
 801c32a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c32c:	3800      	subs	r0, #0
 801c32e:	bf18      	it	ne
 801c330:	2001      	movne	r0, #1
 801c332:	4770      	bx	lr

0801c334 <rcl_wait_set_fini>:
 801c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c338:	b082      	sub	sp, #8
 801c33a:	2800      	cmp	r0, #0
 801c33c:	f000 8095 	beq.w	801c46a <rcl_wait_set_fini+0x136>
 801c340:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c342:	4604      	mov	r4, r0
 801c344:	2e00      	cmp	r6, #0
 801c346:	f000 808c 	beq.w	801c462 <rcl_wait_set_fini+0x12e>
 801c34a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c34c:	f002 fd9c 	bl	801ee88 <rmw_destroy_wait_set>
 801c350:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c352:	1e06      	subs	r6, r0, #0
 801c354:	bf18      	it	ne
 801c356:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c35a:	2d00      	cmp	r5, #0
 801c35c:	f000 8081 	beq.w	801c462 <rcl_wait_set_fini+0x12e>
 801c360:	2700      	movs	r7, #0
 801c362:	6820      	ldr	r0, [r4, #0]
 801c364:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c368:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c36a:	6067      	str	r7, [r4, #4]
 801c36c:	602f      	str	r7, [r5, #0]
 801c36e:	b120      	cbz	r0, 801c37a <rcl_wait_set_fini+0x46>
 801c370:	9101      	str	r1, [sp, #4]
 801c372:	47c0      	blx	r8
 801c374:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c376:	9901      	ldr	r1, [sp, #4]
 801c378:	6027      	str	r7, [r4, #0]
 801c37a:	68a8      	ldr	r0, [r5, #8]
 801c37c:	b120      	cbz	r0, 801c388 <rcl_wait_set_fini+0x54>
 801c37e:	47c0      	blx	r8
 801c380:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c382:	2300      	movs	r3, #0
 801c384:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c388:	f04f 0800 	mov.w	r8, #0
 801c38c:	68a0      	ldr	r0, [r4, #8]
 801c38e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c390:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c392:	f8c4 800c 	str.w	r8, [r4, #12]
 801c396:	f8c5 800c 	str.w	r8, [r5, #12]
 801c39a:	b128      	cbz	r0, 801c3a8 <rcl_wait_set_fini+0x74>
 801c39c:	47b8      	blx	r7
 801c39e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3a0:	f8c4 8008 	str.w	r8, [r4, #8]
 801c3a4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c3a6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c3a8:	f04f 0800 	mov.w	r8, #0
 801c3ac:	6968      	ldr	r0, [r5, #20]
 801c3ae:	f8c5 8010 	str.w	r8, [r5, #16]
 801c3b2:	b128      	cbz	r0, 801c3c0 <rcl_wait_set_fini+0x8c>
 801c3b4:	47b8      	blx	r7
 801c3b6:	f8c5 8014 	str.w	r8, [r5, #20]
 801c3ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3bc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c3be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c3c0:	f04f 0800 	mov.w	r8, #0
 801c3c4:	6920      	ldr	r0, [r4, #16]
 801c3c6:	f8c4 8014 	str.w	r8, [r4, #20]
 801c3ca:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c3ce:	b128      	cbz	r0, 801c3dc <rcl_wait_set_fini+0xa8>
 801c3d0:	47b8      	blx	r7
 801c3d2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3d4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c3d8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c3da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c3dc:	f04f 0800 	mov.w	r8, #0
 801c3e0:	69a0      	ldr	r0, [r4, #24]
 801c3e2:	f8c4 801c 	str.w	r8, [r4, #28]
 801c3e6:	f8c5 8018 	str.w	r8, [r5, #24]
 801c3ea:	b128      	cbz	r0, 801c3f8 <rcl_wait_set_fini+0xc4>
 801c3ec:	9101      	str	r1, [sp, #4]
 801c3ee:	47b8      	blx	r7
 801c3f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c3f2:	9901      	ldr	r1, [sp, #4]
 801c3f4:	f8c4 8018 	str.w	r8, [r4, #24]
 801c3f8:	6a28      	ldr	r0, [r5, #32]
 801c3fa:	b120      	cbz	r0, 801c406 <rcl_wait_set_fini+0xd2>
 801c3fc:	47b8      	blx	r7
 801c3fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c400:	2300      	movs	r3, #0
 801c402:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c406:	2700      	movs	r7, #0
 801c408:	6a20      	ldr	r0, [r4, #32]
 801c40a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c40e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c410:	6267      	str	r7, [r4, #36]	; 0x24
 801c412:	626f      	str	r7, [r5, #36]	; 0x24
 801c414:	b120      	cbz	r0, 801c420 <rcl_wait_set_fini+0xec>
 801c416:	9101      	str	r1, [sp, #4]
 801c418:	47c0      	blx	r8
 801c41a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c41c:	9901      	ldr	r1, [sp, #4]
 801c41e:	6227      	str	r7, [r4, #32]
 801c420:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c422:	b120      	cbz	r0, 801c42e <rcl_wait_set_fini+0xfa>
 801c424:	47c0      	blx	r8
 801c426:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c428:	2300      	movs	r3, #0
 801c42a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c42e:	2700      	movs	r7, #0
 801c430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c432:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c436:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c438:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c43a:	632f      	str	r7, [r5, #48]	; 0x30
 801c43c:	b120      	cbz	r0, 801c448 <rcl_wait_set_fini+0x114>
 801c43e:	9101      	str	r1, [sp, #4]
 801c440:	47c0      	blx	r8
 801c442:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c444:	9901      	ldr	r1, [sp, #4]
 801c446:	62a7      	str	r7, [r4, #40]	; 0x28
 801c448:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c44a:	b120      	cbz	r0, 801c456 <rcl_wait_set_fini+0x122>
 801c44c:	47c0      	blx	r8
 801c44e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c450:	2300      	movs	r3, #0
 801c452:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c456:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c458:	4628      	mov	r0, r5
 801c45a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c45c:	4798      	blx	r3
 801c45e:	2300      	movs	r3, #0
 801c460:	6323      	str	r3, [r4, #48]	; 0x30
 801c462:	4630      	mov	r0, r6
 801c464:	b002      	add	sp, #8
 801c466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c46a:	260b      	movs	r6, #11
 801c46c:	4630      	mov	r0, r6
 801c46e:	b002      	add	sp, #8
 801c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c474 <rcl_wait_set_add_subscription>:
 801c474:	b318      	cbz	r0, 801c4be <rcl_wait_set_add_subscription+0x4a>
 801c476:	b538      	push	{r3, r4, r5, lr}
 801c478:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c47a:	4604      	mov	r4, r0
 801c47c:	b30b      	cbz	r3, 801c4c2 <rcl_wait_set_add_subscription+0x4e>
 801c47e:	b319      	cbz	r1, 801c4c8 <rcl_wait_set_add_subscription+0x54>
 801c480:	681d      	ldr	r5, [r3, #0]
 801c482:	6840      	ldr	r0, [r0, #4]
 801c484:	4285      	cmp	r5, r0
 801c486:	d217      	bcs.n	801c4b8 <rcl_wait_set_add_subscription+0x44>
 801c488:	1c68      	adds	r0, r5, #1
 801c48a:	6018      	str	r0, [r3, #0]
 801c48c:	6823      	ldr	r3, [r4, #0]
 801c48e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c492:	b102      	cbz	r2, 801c496 <rcl_wait_set_add_subscription+0x22>
 801c494:	6015      	str	r5, [r2, #0]
 801c496:	4608      	mov	r0, r1
 801c498:	f7ff fade 	bl	801ba58 <rcl_subscription_get_rmw_handle>
 801c49c:	b150      	cbz	r0, 801c4b4 <rcl_wait_set_add_subscription+0x40>
 801c49e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4a0:	6842      	ldr	r2, [r0, #4]
 801c4a2:	2000      	movs	r0, #0
 801c4a4:	689b      	ldr	r3, [r3, #8]
 801c4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c4aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c4ac:	6853      	ldr	r3, [r2, #4]
 801c4ae:	3301      	adds	r3, #1
 801c4b0:	6053      	str	r3, [r2, #4]
 801c4b2:	bd38      	pop	{r3, r4, r5, pc}
 801c4b4:	2001      	movs	r0, #1
 801c4b6:	bd38      	pop	{r3, r4, r5, pc}
 801c4b8:	f240 3086 	movw	r0, #902	; 0x386
 801c4bc:	bd38      	pop	{r3, r4, r5, pc}
 801c4be:	200b      	movs	r0, #11
 801c4c0:	4770      	bx	lr
 801c4c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c4c6:	bd38      	pop	{r3, r4, r5, pc}
 801c4c8:	200b      	movs	r0, #11
 801c4ca:	bd38      	pop	{r3, r4, r5, pc}

0801c4cc <rcl_wait_set_clear>:
 801c4cc:	2800      	cmp	r0, #0
 801c4ce:	d074      	beq.n	801c5ba <rcl_wait_set_clear+0xee>
 801c4d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c4d2:	b510      	push	{r4, lr}
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d071      	beq.n	801c5be <rcl_wait_set_clear+0xf2>
 801c4da:	6800      	ldr	r0, [r0, #0]
 801c4dc:	b138      	cbz	r0, 801c4ee <rcl_wait_set_clear+0x22>
 801c4de:	6862      	ldr	r2, [r4, #4]
 801c4e0:	2100      	movs	r1, #0
 801c4e2:	0092      	lsls	r2, r2, #2
 801c4e4:	f004 fd72 	bl	8020fcc <memset>
 801c4e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4ea:	2200      	movs	r2, #0
 801c4ec:	601a      	str	r2, [r3, #0]
 801c4ee:	68a0      	ldr	r0, [r4, #8]
 801c4f0:	b138      	cbz	r0, 801c502 <rcl_wait_set_clear+0x36>
 801c4f2:	68e2      	ldr	r2, [r4, #12]
 801c4f4:	2100      	movs	r1, #0
 801c4f6:	0092      	lsls	r2, r2, #2
 801c4f8:	f004 fd68 	bl	8020fcc <memset>
 801c4fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4fe:	2200      	movs	r2, #0
 801c500:	60da      	str	r2, [r3, #12]
 801c502:	69a0      	ldr	r0, [r4, #24]
 801c504:	b138      	cbz	r0, 801c516 <rcl_wait_set_clear+0x4a>
 801c506:	69e2      	ldr	r2, [r4, #28]
 801c508:	2100      	movs	r1, #0
 801c50a:	0092      	lsls	r2, r2, #2
 801c50c:	f004 fd5e 	bl	8020fcc <memset>
 801c510:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c512:	2200      	movs	r2, #0
 801c514:	619a      	str	r2, [r3, #24]
 801c516:	6a20      	ldr	r0, [r4, #32]
 801c518:	b138      	cbz	r0, 801c52a <rcl_wait_set_clear+0x5e>
 801c51a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c51c:	2100      	movs	r1, #0
 801c51e:	0092      	lsls	r2, r2, #2
 801c520:	f004 fd54 	bl	8020fcc <memset>
 801c524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c526:	2200      	movs	r2, #0
 801c528:	625a      	str	r2, [r3, #36]	; 0x24
 801c52a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c52c:	b138      	cbz	r0, 801c53e <rcl_wait_set_clear+0x72>
 801c52e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c530:	2100      	movs	r1, #0
 801c532:	0092      	lsls	r2, r2, #2
 801c534:	f004 fd4a 	bl	8020fcc <memset>
 801c538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c53a:	2200      	movs	r2, #0
 801c53c:	631a      	str	r2, [r3, #48]	; 0x30
 801c53e:	6920      	ldr	r0, [r4, #16]
 801c540:	b138      	cbz	r0, 801c552 <rcl_wait_set_clear+0x86>
 801c542:	6962      	ldr	r2, [r4, #20]
 801c544:	2100      	movs	r1, #0
 801c546:	0092      	lsls	r2, r2, #2
 801c548:	f004 fd40 	bl	8020fcc <memset>
 801c54c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c54e:	2200      	movs	r2, #0
 801c550:	641a      	str	r2, [r3, #64]	; 0x40
 801c552:	6898      	ldr	r0, [r3, #8]
 801c554:	b138      	cbz	r0, 801c566 <rcl_wait_set_clear+0x9a>
 801c556:	685a      	ldr	r2, [r3, #4]
 801c558:	2100      	movs	r1, #0
 801c55a:	0092      	lsls	r2, r2, #2
 801c55c:	f004 fd36 	bl	8020fcc <memset>
 801c560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c562:	2200      	movs	r2, #0
 801c564:	605a      	str	r2, [r3, #4]
 801c566:	6958      	ldr	r0, [r3, #20]
 801c568:	b138      	cbz	r0, 801c57a <rcl_wait_set_clear+0xae>
 801c56a:	691a      	ldr	r2, [r3, #16]
 801c56c:	2100      	movs	r1, #0
 801c56e:	0092      	lsls	r2, r2, #2
 801c570:	f004 fd2c 	bl	8020fcc <memset>
 801c574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c576:	2200      	movs	r2, #0
 801c578:	611a      	str	r2, [r3, #16]
 801c57a:	6a18      	ldr	r0, [r3, #32]
 801c57c:	b138      	cbz	r0, 801c58e <rcl_wait_set_clear+0xc2>
 801c57e:	69da      	ldr	r2, [r3, #28]
 801c580:	2100      	movs	r1, #0
 801c582:	0092      	lsls	r2, r2, #2
 801c584:	f004 fd22 	bl	8020fcc <memset>
 801c588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c58a:	2200      	movs	r2, #0
 801c58c:	61da      	str	r2, [r3, #28]
 801c58e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c590:	b138      	cbz	r0, 801c5a2 <rcl_wait_set_clear+0xd6>
 801c592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c594:	2100      	movs	r1, #0
 801c596:	0092      	lsls	r2, r2, #2
 801c598:	f004 fd18 	bl	8020fcc <memset>
 801c59c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c59e:	2200      	movs	r2, #0
 801c5a0:	629a      	str	r2, [r3, #40]	; 0x28
 801c5a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c5a4:	b140      	cbz	r0, 801c5b8 <rcl_wait_set_clear+0xec>
 801c5a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c5a8:	2100      	movs	r1, #0
 801c5aa:	0092      	lsls	r2, r2, #2
 801c5ac:	f004 fd0e 	bl	8020fcc <memset>
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	6353      	str	r3, [r2, #52]	; 0x34
 801c5b8:	bd10      	pop	{r4, pc}
 801c5ba:	200b      	movs	r0, #11
 801c5bc:	4770      	bx	lr
 801c5be:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c5c2:	bd10      	pop	{r4, pc}

0801c5c4 <rcl_wait_set_resize>:
 801c5c4:	2800      	cmp	r0, #0
 801c5c6:	f000 8180 	beq.w	801c8ca <rcl_wait_set_resize+0x306>
 801c5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c5d0:	b083      	sub	sp, #12
 801c5d2:	4605      	mov	r5, r0
 801c5d4:	2c00      	cmp	r4, #0
 801c5d6:	f000 817a 	beq.w	801c8ce <rcl_wait_set_resize+0x30a>
 801c5da:	f04f 0900 	mov.w	r9, #0
 801c5de:	461f      	mov	r7, r3
 801c5e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c5e4:	4688      	mov	r8, r1
 801c5e6:	4616      	mov	r6, r2
 801c5e8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c5ec:	f8c0 9004 	str.w	r9, [r0, #4]
 801c5f0:	f8c4 9000 	str.w	r9, [r4]
 801c5f4:	2900      	cmp	r1, #0
 801c5f6:	f000 80bf 	beq.w	801c778 <rcl_wait_set_resize+0x1b4>
 801c5fa:	008c      	lsls	r4, r1, #2
 801c5fc:	4652      	mov	r2, sl
 801c5fe:	6800      	ldr	r0, [r0, #0]
 801c600:	4621      	mov	r1, r4
 801c602:	9301      	str	r3, [sp, #4]
 801c604:	4798      	blx	r3
 801c606:	9b01      	ldr	r3, [sp, #4]
 801c608:	6028      	str	r0, [r5, #0]
 801c60a:	2800      	cmp	r0, #0
 801c60c:	f000 80f6 	beq.w	801c7fc <rcl_wait_set_resize+0x238>
 801c610:	4622      	mov	r2, r4
 801c612:	4649      	mov	r1, r9
 801c614:	9301      	str	r3, [sp, #4]
 801c616:	f004 fcd9 	bl	8020fcc <memset>
 801c61a:	f8c5 8004 	str.w	r8, [r5, #4]
 801c61e:	4652      	mov	r2, sl
 801c620:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c624:	4621      	mov	r1, r4
 801c626:	9b01      	ldr	r3, [sp, #4]
 801c628:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c62c:	f8c8 9004 	str.w	r9, [r8, #4]
 801c630:	4798      	blx	r3
 801c632:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c634:	f8c8 0008 	str.w	r0, [r8, #8]
 801c638:	689b      	ldr	r3, [r3, #8]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	f000 814a 	beq.w	801c8d4 <rcl_wait_set_resize+0x310>
 801c640:	4622      	mov	r2, r4
 801c642:	4649      	mov	r1, r9
 801c644:	4618      	mov	r0, r3
 801c646:	f004 fcc1 	bl	8020fcc <memset>
 801c64a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c64c:	f04f 0800 	mov.w	r8, #0
 801c650:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c654:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c658:	f8c5 800c 	str.w	r8, [r5, #12]
 801c65c:	f8c4 800c 	str.w	r8, [r4, #12]
 801c660:	2e00      	cmp	r6, #0
 801c662:	f040 809b 	bne.w	801c79c <rcl_wait_set_resize+0x1d8>
 801c666:	68a8      	ldr	r0, [r5, #8]
 801c668:	b128      	cbz	r0, 801c676 <rcl_wait_set_resize+0xb2>
 801c66a:	4649      	mov	r1, r9
 801c66c:	4790      	blx	r2
 801c66e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c670:	60ae      	str	r6, [r5, #8]
 801c672:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c676:	f04f 0800 	mov.w	r8, #0
 801c67a:	19f6      	adds	r6, r6, r7
 801c67c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c680:	f040 80a2 	bne.w	801c7c8 <rcl_wait_set_resize+0x204>
 801c684:	6960      	ldr	r0, [r4, #20]
 801c686:	b130      	cbz	r0, 801c696 <rcl_wait_set_resize+0xd2>
 801c688:	4649      	mov	r1, r9
 801c68a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c68c:	4798      	blx	r3
 801c68e:	6166      	str	r6, [r4, #20]
 801c690:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c692:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c696:	2600      	movs	r6, #0
 801c698:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c69c:	616e      	str	r6, [r5, #20]
 801c69e:	6426      	str	r6, [r4, #64]	; 0x40
 801c6a0:	2f00      	cmp	r7, #0
 801c6a2:	f040 80af 	bne.w	801c804 <rcl_wait_set_resize+0x240>
 801c6a6:	6928      	ldr	r0, [r5, #16]
 801c6a8:	b138      	cbz	r0, 801c6ba <rcl_wait_set_resize+0xf6>
 801c6aa:	4649      	mov	r1, r9
 801c6ac:	47d0      	blx	sl
 801c6ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6b0:	612f      	str	r7, [r5, #16]
 801c6b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c6b6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c6ba:	2600      	movs	r6, #0
 801c6bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6be:	61ee      	str	r6, [r5, #28]
 801c6c0:	61a6      	str	r6, [r4, #24]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f040 8093 	bne.w	801c7ee <rcl_wait_set_resize+0x22a>
 801c6c8:	69a8      	ldr	r0, [r5, #24]
 801c6ca:	b120      	cbz	r0, 801c6d6 <rcl_wait_set_resize+0x112>
 801c6cc:	4649      	mov	r1, r9
 801c6ce:	47d0      	blx	sl
 801c6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6d4:	61ab      	str	r3, [r5, #24]
 801c6d6:	6a20      	ldr	r0, [r4, #32]
 801c6d8:	b128      	cbz	r0, 801c6e6 <rcl_wait_set_resize+0x122>
 801c6da:	4649      	mov	r1, r9
 801c6dc:	47d0      	blx	sl
 801c6de:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c6e6:	2600      	movs	r6, #0
 801c6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6ea:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c6ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c6f0:	626e      	str	r6, [r5, #36]	; 0x24
 801c6f2:	6266      	str	r6, [r4, #36]	; 0x24
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	f000 8098 	beq.w	801c82a <rcl_wait_set_resize+0x266>
 801c6fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c6fe:	463a      	mov	r2, r7
 801c700:	6a28      	ldr	r0, [r5, #32]
 801c702:	4651      	mov	r1, sl
 801c704:	47c8      	blx	r9
 801c706:	6228      	str	r0, [r5, #32]
 801c708:	2800      	cmp	r0, #0
 801c70a:	d077      	beq.n	801c7fc <rcl_wait_set_resize+0x238>
 801c70c:	4652      	mov	r2, sl
 801c70e:	4631      	mov	r1, r6
 801c710:	f004 fc5c 	bl	8020fcc <memset>
 801c714:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c718:	463a      	mov	r2, r7
 801c71a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c71c:	4651      	mov	r1, sl
 801c71e:	626b      	str	r3, [r5, #36]	; 0x24
 801c720:	62a6      	str	r6, [r4, #40]	; 0x28
 801c722:	47c8      	blx	r9
 801c724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c726:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c728:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c72a:	2c00      	cmp	r4, #0
 801c72c:	f000 80f2 	beq.w	801c914 <rcl_wait_set_resize+0x350>
 801c730:	4620      	mov	r0, r4
 801c732:	4652      	mov	r2, sl
 801c734:	4631      	mov	r1, r6
 801c736:	f004 fc49 	bl	8020fcc <memset>
 801c73a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c73c:	2600      	movs	r6, #0
 801c73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c740:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c742:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c746:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c748:	6326      	str	r6, [r4, #48]	; 0x30
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	f040 8097 	bne.w	801c87e <rcl_wait_set_resize+0x2ba>
 801c750:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c752:	b120      	cbz	r0, 801c75e <rcl_wait_set_resize+0x19a>
 801c754:	4639      	mov	r1, r7
 801c756:	47c0      	blx	r8
 801c758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c75a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c75c:	62ab      	str	r3, [r5, #40]	; 0x28
 801c75e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c760:	2800      	cmp	r0, #0
 801c762:	d04c      	beq.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c764:	4639      	mov	r1, r7
 801c766:	47c0      	blx	r8
 801c768:	2300      	movs	r3, #0
 801c76a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c76c:	4618      	mov	r0, r3
 801c76e:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c772:	b003      	add	sp, #12
 801c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c778:	6800      	ldr	r0, [r0, #0]
 801c77a:	b120      	cbz	r0, 801c786 <rcl_wait_set_resize+0x1c2>
 801c77c:	4651      	mov	r1, sl
 801c77e:	47d8      	blx	fp
 801c780:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c782:	f8c5 8000 	str.w	r8, [r5]
 801c786:	68a0      	ldr	r0, [r4, #8]
 801c788:	2800      	cmp	r0, #0
 801c78a:	f43f af5f 	beq.w	801c64c <rcl_wait_set_resize+0x88>
 801c78e:	4651      	mov	r1, sl
 801c790:	47d8      	blx	fp
 801c792:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c794:	2300      	movs	r3, #0
 801c796:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c79a:	e757      	b.n	801c64c <rcl_wait_set_resize+0x88>
 801c79c:	00b4      	lsls	r4, r6, #2
 801c79e:	464a      	mov	r2, r9
 801c7a0:	68a8      	ldr	r0, [r5, #8]
 801c7a2:	4621      	mov	r1, r4
 801c7a4:	4798      	blx	r3
 801c7a6:	60a8      	str	r0, [r5, #8]
 801c7a8:	b340      	cbz	r0, 801c7fc <rcl_wait_set_resize+0x238>
 801c7aa:	4622      	mov	r2, r4
 801c7ac:	4641      	mov	r1, r8
 801c7ae:	f004 fc0d 	bl	8020fcc <memset>
 801c7b2:	f04f 0800 	mov.w	r8, #0
 801c7b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7b8:	60ee      	str	r6, [r5, #12]
 801c7ba:	19f6      	adds	r6, r6, r7
 801c7bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7c0:	f8c4 8010 	str.w	r8, [r4, #16]
 801c7c4:	f43f af5e 	beq.w	801c684 <rcl_wait_set_resize+0xc0>
 801c7c8:	00b6      	lsls	r6, r6, #2
 801c7ca:	464a      	mov	r2, r9
 801c7cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c7ce:	6960      	ldr	r0, [r4, #20]
 801c7d0:	4631      	mov	r1, r6
 801c7d2:	4798      	blx	r3
 801c7d4:	4681      	mov	r9, r0
 801c7d6:	6160      	str	r0, [r4, #20]
 801c7d8:	2800      	cmp	r0, #0
 801c7da:	f000 8084 	beq.w	801c8e6 <rcl_wait_set_resize+0x322>
 801c7de:	4632      	mov	r2, r6
 801c7e0:	4641      	mov	r1, r8
 801c7e2:	f004 fbf3 	bl	8020fcc <memset>
 801c7e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7ec:	e753      	b.n	801c696 <rcl_wait_set_resize+0xd2>
 801c7ee:	009c      	lsls	r4, r3, #2
 801c7f0:	464a      	mov	r2, r9
 801c7f2:	69a8      	ldr	r0, [r5, #24]
 801c7f4:	4621      	mov	r1, r4
 801c7f6:	47c0      	blx	r8
 801c7f8:	61a8      	str	r0, [r5, #24]
 801c7fa:	bb40      	cbnz	r0, 801c84e <rcl_wait_set_resize+0x28a>
 801c7fc:	200a      	movs	r0, #10
 801c7fe:	b003      	add	sp, #12
 801c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c804:	00bc      	lsls	r4, r7, #2
 801c806:	464a      	mov	r2, r9
 801c808:	6928      	ldr	r0, [r5, #16]
 801c80a:	4621      	mov	r1, r4
 801c80c:	47c0      	blx	r8
 801c80e:	6128      	str	r0, [r5, #16]
 801c810:	2800      	cmp	r0, #0
 801c812:	d0f3      	beq.n	801c7fc <rcl_wait_set_resize+0x238>
 801c814:	4622      	mov	r2, r4
 801c816:	4631      	mov	r1, r6
 801c818:	f004 fbd8 	bl	8020fcc <memset>
 801c81c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c81e:	616f      	str	r7, [r5, #20]
 801c820:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c824:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c828:	e747      	b.n	801c6ba <rcl_wait_set_resize+0xf6>
 801c82a:	6a28      	ldr	r0, [r5, #32]
 801c82c:	b120      	cbz	r0, 801c838 <rcl_wait_set_resize+0x274>
 801c82e:	4639      	mov	r1, r7
 801c830:	47c0      	blx	r8
 801c832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c834:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c836:	622b      	str	r3, [r5, #32]
 801c838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c83a:	2800      	cmp	r0, #0
 801c83c:	f43f af7e 	beq.w	801c73c <rcl_wait_set_resize+0x178>
 801c840:	4639      	mov	r1, r7
 801c842:	47c0      	blx	r8
 801c844:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c846:	2300      	movs	r3, #0
 801c848:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c84c:	e776      	b.n	801c73c <rcl_wait_set_resize+0x178>
 801c84e:	4622      	mov	r2, r4
 801c850:	4631      	mov	r1, r6
 801c852:	f004 fbbb 	bl	8020fcc <memset>
 801c856:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c85a:	464a      	mov	r2, r9
 801c85c:	6a38      	ldr	r0, [r7, #32]
 801c85e:	4621      	mov	r1, r4
 801c860:	61eb      	str	r3, [r5, #28]
 801c862:	61fe      	str	r6, [r7, #28]
 801c864:	47c0      	blx	r8
 801c866:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c868:	6238      	str	r0, [r7, #32]
 801c86a:	6a1f      	ldr	r7, [r3, #32]
 801c86c:	2f00      	cmp	r7, #0
 801c86e:	d04a      	beq.n	801c906 <rcl_wait_set_resize+0x342>
 801c870:	4622      	mov	r2, r4
 801c872:	4631      	mov	r1, r6
 801c874:	4638      	mov	r0, r7
 801c876:	f004 fba9 	bl	8020fcc <memset>
 801c87a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c87c:	e733      	b.n	801c6e6 <rcl_wait_set_resize+0x122>
 801c87e:	009c      	lsls	r4, r3, #2
 801c880:	463a      	mov	r2, r7
 801c882:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c884:	4621      	mov	r1, r4
 801c886:	47c8      	blx	r9
 801c888:	62a8      	str	r0, [r5, #40]	; 0x28
 801c88a:	2800      	cmp	r0, #0
 801c88c:	d0b6      	beq.n	801c7fc <rcl_wait_set_resize+0x238>
 801c88e:	4622      	mov	r2, r4
 801c890:	4631      	mov	r1, r6
 801c892:	f004 fb9b 	bl	8020fcc <memset>
 801c896:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c89c:	463a      	mov	r2, r7
 801c89e:	4621      	mov	r1, r4
 801c8a0:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c8a4:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c8a6:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c8aa:	47c8      	blx	r9
 801c8ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c8ae:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d034      	beq.n	801c922 <rcl_wait_set_resize+0x35e>
 801c8b8:	4622      	mov	r2, r4
 801c8ba:	4631      	mov	r1, r6
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f004 fb85 	bl	8020fcc <memset>
 801c8c2:	4630      	mov	r0, r6
 801c8c4:	b003      	add	sp, #12
 801c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ca:	200b      	movs	r0, #11
 801c8cc:	4770      	bx	lr
 801c8ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c8d2:	e794      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c8d4:	6828      	ldr	r0, [r5, #0]
 801c8d6:	4651      	mov	r1, sl
 801c8d8:	9301      	str	r3, [sp, #4]
 801c8da:	47d8      	blx	fp
 801c8dc:	9b01      	ldr	r3, [sp, #4]
 801c8de:	200a      	movs	r0, #10
 801c8e0:	e9c5 3300 	strd	r3, r3, [r5]
 801c8e4:	e78b      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c8e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c8e8:	68a8      	ldr	r0, [r5, #8]
 801c8ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c8ee:	4798      	blx	r3
 801c8f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c8f2:	6928      	ldr	r0, [r5, #16]
 801c8f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c8f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c8f8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c8fc:	4790      	blx	r2
 801c8fe:	200a      	movs	r0, #10
 801c900:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c904:	e77b      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c906:	69a8      	ldr	r0, [r5, #24]
 801c908:	4649      	mov	r1, r9
 801c90a:	47d0      	blx	sl
 801c90c:	200a      	movs	r0, #10
 801c90e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c912:	e774      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c914:	6a28      	ldr	r0, [r5, #32]
 801c916:	4639      	mov	r1, r7
 801c918:	47c0      	blx	r8
 801c91a:	200a      	movs	r0, #10
 801c91c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c920:	e76d      	b.n	801c7fe <rcl_wait_set_resize+0x23a>
 801c922:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c924:	4639      	mov	r1, r7
 801c926:	9301      	str	r3, [sp, #4]
 801c928:	47c0      	blx	r8
 801c92a:	9b01      	ldr	r3, [sp, #4]
 801c92c:	200a      	movs	r0, #10
 801c92e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c932:	e764      	b.n	801c7fe <rcl_wait_set_resize+0x23a>

0801c934 <rcl_wait_set_init>:
 801c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c938:	b085      	sub	sp, #20
 801c93a:	4605      	mov	r5, r0
 801c93c:	460e      	mov	r6, r1
 801c93e:	4617      	mov	r7, r2
 801c940:	a812      	add	r0, sp, #72	; 0x48
 801c942:	4698      	mov	r8, r3
 801c944:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c948:	f7f8 fe96 	bl	8015678 <rcutils_allocator_is_valid>
 801c94c:	2d00      	cmp	r5, #0
 801c94e:	d072      	beq.n	801ca36 <rcl_wait_set_init+0x102>
 801c950:	f080 0001 	eor.w	r0, r0, #1
 801c954:	b2c0      	uxtb	r0, r0
 801c956:	2800      	cmp	r0, #0
 801c958:	d16d      	bne.n	801ca36 <rcl_wait_set_init+0x102>
 801c95a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c95e:	f1ba 0f00 	cmp.w	sl, #0
 801c962:	d004      	beq.n	801c96e <rcl_wait_set_init+0x3a>
 801c964:	2464      	movs	r4, #100	; 0x64
 801c966:	4620      	mov	r0, r4
 801c968:	b005      	add	sp, #20
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96e:	f1b9 0f00 	cmp.w	r9, #0
 801c972:	d060      	beq.n	801ca36 <rcl_wait_set_init+0x102>
 801c974:	4648      	mov	r0, r9
 801c976:	f7fe f9f3 	bl	801ad60 <rcl_context_is_valid>
 801c97a:	2800      	cmp	r0, #0
 801c97c:	d068      	beq.n	801ca50 <rcl_wait_set_init+0x11c>
 801c97e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c980:	205c      	movs	r0, #92	; 0x5c
 801c982:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c984:	4798      	blx	r3
 801c986:	6328      	str	r0, [r5, #48]	; 0x30
 801c988:	2800      	cmp	r0, #0
 801c98a:	d063      	beq.n	801ca54 <rcl_wait_set_init+0x120>
 801c98c:	225c      	movs	r2, #92	; 0x5c
 801c98e:	4651      	mov	r1, sl
 801c990:	f004 fb1c 	bl	8020fcc <memset>
 801c994:	ac12      	add	r4, sp, #72	; 0x48
 801c996:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c99a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c99e:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c9a2:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c9a6:	eb03 0e02 	add.w	lr, r3, r2
 801c9aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9ac:	f8d9 9000 	ldr.w	r9, [r9]
 801c9b0:	449e      	add	lr, r3
 801c9b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c9b4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c9b8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c9bc:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c9c0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c9c4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c9c8:	44be      	add	lr, r7
 801c9ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c9ce:	6823      	ldr	r3, [r4, #0]
 801c9d0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c9d4:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c9d8:	f8cc 3000 	str.w	r3, [ip]
 801c9dc:	f002 fa4a 	bl	801ee74 <rmw_create_wait_set>
 801c9e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c9e2:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c9e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c9e8:	b350      	cbz	r0, 801ca40 <rcl_wait_set_init+0x10c>
 801c9ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c9ec:	4643      	mov	r3, r8
 801c9ee:	463a      	mov	r2, r7
 801c9f0:	4631      	mov	r1, r6
 801c9f2:	9402      	str	r4, [sp, #8]
 801c9f4:	4628      	mov	r0, r5
 801c9f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c9f8:	9401      	str	r4, [sp, #4]
 801c9fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c9fc:	9400      	str	r4, [sp, #0]
 801c9fe:	f7ff fde1 	bl	801c5c4 <rcl_wait_set_resize>
 801ca02:	4604      	mov	r4, r0
 801ca04:	2800      	cmp	r0, #0
 801ca06:	d0ae      	beq.n	801c966 <rcl_wait_set_init+0x32>
 801ca08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca0a:	bb2b      	cbnz	r3, 801ca58 <rcl_wait_set_init+0x124>
 801ca0c:	2600      	movs	r6, #0
 801ca0e:	4628      	mov	r0, r5
 801ca10:	4633      	mov	r3, r6
 801ca12:	4632      	mov	r2, r6
 801ca14:	4631      	mov	r1, r6
 801ca16:	9600      	str	r6, [sp, #0]
 801ca18:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801ca1c:	f7ff fdd2 	bl	801c5c4 <rcl_wait_set_resize>
 801ca20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ca22:	2800      	cmp	r0, #0
 801ca24:	d09f      	beq.n	801c966 <rcl_wait_set_init+0x32>
 801ca26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801ca28:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801ca2a:	4798      	blx	r3
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	632e      	str	r6, [r5, #48]	; 0x30
 801ca30:	b005      	add	sp, #20
 801ca32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca36:	240b      	movs	r4, #11
 801ca38:	4620      	mov	r0, r4
 801ca3a:	b005      	add	sp, #20
 801ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca40:	2401      	movs	r4, #1
 801ca42:	f002 fa21 	bl	801ee88 <rmw_destroy_wait_set>
 801ca46:	2800      	cmp	r0, #0
 801ca48:	bf18      	it	ne
 801ca4a:	f44f 7461 	movne.w	r4, #900	; 0x384
 801ca4e:	e7dd      	b.n	801ca0c <rcl_wait_set_init+0xd8>
 801ca50:	2465      	movs	r4, #101	; 0x65
 801ca52:	e788      	b.n	801c966 <rcl_wait_set_init+0x32>
 801ca54:	240a      	movs	r4, #10
 801ca56:	e786      	b.n	801c966 <rcl_wait_set_init+0x32>
 801ca58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801ca5a:	e7f2      	b.n	801ca42 <rcl_wait_set_init+0x10e>

0801ca5c <rcl_wait_set_add_guard_condition>:
 801ca5c:	b318      	cbz	r0, 801caa6 <rcl_wait_set_add_guard_condition+0x4a>
 801ca5e:	b538      	push	{r3, r4, r5, lr}
 801ca60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ca62:	4604      	mov	r4, r0
 801ca64:	b30b      	cbz	r3, 801caaa <rcl_wait_set_add_guard_condition+0x4e>
 801ca66:	b319      	cbz	r1, 801cab0 <rcl_wait_set_add_guard_condition+0x54>
 801ca68:	68dd      	ldr	r5, [r3, #12]
 801ca6a:	68c0      	ldr	r0, [r0, #12]
 801ca6c:	4285      	cmp	r5, r0
 801ca6e:	d217      	bcs.n	801caa0 <rcl_wait_set_add_guard_condition+0x44>
 801ca70:	1c68      	adds	r0, r5, #1
 801ca72:	60d8      	str	r0, [r3, #12]
 801ca74:	68a3      	ldr	r3, [r4, #8]
 801ca76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ca7a:	b102      	cbz	r2, 801ca7e <rcl_wait_set_add_guard_condition+0x22>
 801ca7c:	6015      	str	r5, [r2, #0]
 801ca7e:	4608      	mov	r0, r1
 801ca80:	f003 fbde 	bl	8020240 <rcl_guard_condition_get_rmw_handle>
 801ca84:	b150      	cbz	r0, 801ca9c <rcl_wait_set_add_guard_condition+0x40>
 801ca86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ca88:	6842      	ldr	r2, [r0, #4]
 801ca8a:	2000      	movs	r0, #0
 801ca8c:	695b      	ldr	r3, [r3, #20]
 801ca8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ca92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ca94:	6913      	ldr	r3, [r2, #16]
 801ca96:	3301      	adds	r3, #1
 801ca98:	6113      	str	r3, [r2, #16]
 801ca9a:	bd38      	pop	{r3, r4, r5, pc}
 801ca9c:	2001      	movs	r0, #1
 801ca9e:	bd38      	pop	{r3, r4, r5, pc}
 801caa0:	f240 3086 	movw	r0, #902	; 0x386
 801caa4:	bd38      	pop	{r3, r4, r5, pc}
 801caa6:	200b      	movs	r0, #11
 801caa8:	4770      	bx	lr
 801caaa:	f44f 7061 	mov.w	r0, #900	; 0x384
 801caae:	bd38      	pop	{r3, r4, r5, pc}
 801cab0:	200b      	movs	r0, #11
 801cab2:	bd38      	pop	{r3, r4, r5, pc}

0801cab4 <rcl_wait_set_add_timer>:
 801cab4:	b328      	cbz	r0, 801cb02 <rcl_wait_set_add_timer+0x4e>
 801cab6:	b538      	push	{r3, r4, r5, lr}
 801cab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801caba:	4604      	mov	r4, r0
 801cabc:	b31b      	cbz	r3, 801cb06 <rcl_wait_set_add_timer+0x52>
 801cabe:	b329      	cbz	r1, 801cb0c <rcl_wait_set_add_timer+0x58>
 801cac0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801cac2:	6965      	ldr	r5, [r4, #20]
 801cac4:	42a8      	cmp	r0, r5
 801cac6:	d219      	bcs.n	801cafc <rcl_wait_set_add_timer+0x48>
 801cac8:	1c45      	adds	r5, r0, #1
 801caca:	641d      	str	r5, [r3, #64]	; 0x40
 801cacc:	6923      	ldr	r3, [r4, #16]
 801cace:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cad2:	b102      	cbz	r2, 801cad6 <rcl_wait_set_add_timer+0x22>
 801cad4:	6010      	str	r0, [r2, #0]
 801cad6:	4608      	mov	r0, r1
 801cad8:	f7ff fb9a 	bl	801c210 <rcl_timer_get_guard_condition>
 801cadc:	b168      	cbz	r0, 801cafa <rcl_wait_set_add_timer+0x46>
 801cade:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cae0:	68e3      	ldr	r3, [r4, #12]
 801cae2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801cae4:	3b01      	subs	r3, #1
 801cae6:	441d      	add	r5, r3
 801cae8:	f003 fbaa 	bl	8020240 <rcl_guard_condition_get_rmw_handle>
 801caec:	b180      	cbz	r0, 801cb10 <rcl_wait_set_add_timer+0x5c>
 801caee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801caf0:	6842      	ldr	r2, [r0, #4]
 801caf2:	2000      	movs	r0, #0
 801caf4:	695b      	ldr	r3, [r3, #20]
 801caf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cafa:	bd38      	pop	{r3, r4, r5, pc}
 801cafc:	f240 3086 	movw	r0, #902	; 0x386
 801cb00:	bd38      	pop	{r3, r4, r5, pc}
 801cb02:	200b      	movs	r0, #11
 801cb04:	4770      	bx	lr
 801cb06:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb0a:	bd38      	pop	{r3, r4, r5, pc}
 801cb0c:	200b      	movs	r0, #11
 801cb0e:	bd38      	pop	{r3, r4, r5, pc}
 801cb10:	2001      	movs	r0, #1
 801cb12:	bd38      	pop	{r3, r4, r5, pc}

0801cb14 <rcl_wait_set_add_client>:
 801cb14:	b318      	cbz	r0, 801cb5e <rcl_wait_set_add_client+0x4a>
 801cb16:	b538      	push	{r3, r4, r5, lr}
 801cb18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cb1a:	4604      	mov	r4, r0
 801cb1c:	b30b      	cbz	r3, 801cb62 <rcl_wait_set_add_client+0x4e>
 801cb1e:	b319      	cbz	r1, 801cb68 <rcl_wait_set_add_client+0x54>
 801cb20:	699d      	ldr	r5, [r3, #24]
 801cb22:	69c0      	ldr	r0, [r0, #28]
 801cb24:	4285      	cmp	r5, r0
 801cb26:	d217      	bcs.n	801cb58 <rcl_wait_set_add_client+0x44>
 801cb28:	1c68      	adds	r0, r5, #1
 801cb2a:	6198      	str	r0, [r3, #24]
 801cb2c:	69a3      	ldr	r3, [r4, #24]
 801cb2e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cb32:	b102      	cbz	r2, 801cb36 <rcl_wait_set_add_client+0x22>
 801cb34:	6015      	str	r5, [r2, #0]
 801cb36:	4608      	mov	r0, r1
 801cb38:	f7fe f864 	bl	801ac04 <rcl_client_get_rmw_handle>
 801cb3c:	b150      	cbz	r0, 801cb54 <rcl_wait_set_add_client+0x40>
 801cb3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cb40:	6842      	ldr	r2, [r0, #4]
 801cb42:	2000      	movs	r0, #0
 801cb44:	6a1b      	ldr	r3, [r3, #32]
 801cb46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cb4c:	69d3      	ldr	r3, [r2, #28]
 801cb4e:	3301      	adds	r3, #1
 801cb50:	61d3      	str	r3, [r2, #28]
 801cb52:	bd38      	pop	{r3, r4, r5, pc}
 801cb54:	2001      	movs	r0, #1
 801cb56:	bd38      	pop	{r3, r4, r5, pc}
 801cb58:	f240 3086 	movw	r0, #902	; 0x386
 801cb5c:	bd38      	pop	{r3, r4, r5, pc}
 801cb5e:	200b      	movs	r0, #11
 801cb60:	4770      	bx	lr
 801cb62:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb66:	bd38      	pop	{r3, r4, r5, pc}
 801cb68:	200b      	movs	r0, #11
 801cb6a:	bd38      	pop	{r3, r4, r5, pc}

0801cb6c <rcl_wait_set_add_service>:
 801cb6c:	b318      	cbz	r0, 801cbb6 <rcl_wait_set_add_service+0x4a>
 801cb6e:	b538      	push	{r3, r4, r5, lr}
 801cb70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cb72:	4604      	mov	r4, r0
 801cb74:	b30b      	cbz	r3, 801cbba <rcl_wait_set_add_service+0x4e>
 801cb76:	b319      	cbz	r1, 801cbc0 <rcl_wait_set_add_service+0x54>
 801cb78:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cb7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cb7c:	4285      	cmp	r5, r0
 801cb7e:	d217      	bcs.n	801cbb0 <rcl_wait_set_add_service+0x44>
 801cb80:	1c68      	adds	r0, r5, #1
 801cb82:	6258      	str	r0, [r3, #36]	; 0x24
 801cb84:	6a23      	ldr	r3, [r4, #32]
 801cb86:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cb8a:	b102      	cbz	r2, 801cb8e <rcl_wait_set_add_service+0x22>
 801cb8c:	6015      	str	r5, [r2, #0]
 801cb8e:	4608      	mov	r0, r1
 801cb90:	f7fe fdc2 	bl	801b718 <rcl_service_get_rmw_handle>
 801cb94:	b150      	cbz	r0, 801cbac <rcl_wait_set_add_service+0x40>
 801cb96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cb98:	6842      	ldr	r2, [r0, #4]
 801cb9a:	2000      	movs	r0, #0
 801cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cba2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cba4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801cba6:	3301      	adds	r3, #1
 801cba8:	6293      	str	r3, [r2, #40]	; 0x28
 801cbaa:	bd38      	pop	{r3, r4, r5, pc}
 801cbac:	2001      	movs	r0, #1
 801cbae:	bd38      	pop	{r3, r4, r5, pc}
 801cbb0:	f240 3086 	movw	r0, #902	; 0x386
 801cbb4:	bd38      	pop	{r3, r4, r5, pc}
 801cbb6:	200b      	movs	r0, #11
 801cbb8:	4770      	bx	lr
 801cbba:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cbbe:	bd38      	pop	{r3, r4, r5, pc}
 801cbc0:	200b      	movs	r0, #11
 801cbc2:	bd38      	pop	{r3, r4, r5, pc}
 801cbc4:	0000      	movs	r0, r0
	...

0801cbc8 <rcl_wait>:
 801cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbcc:	ed2d 8b02 	vpush	{d8}
 801cbd0:	b08d      	sub	sp, #52	; 0x34
 801cbd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cbd6:	2800      	cmp	r0, #0
 801cbd8:	f000 814f 	beq.w	801ce7a <rcl_wait+0x2b2>
 801cbdc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801cbde:	4605      	mov	r5, r0
 801cbe0:	2e00      	cmp	r6, #0
 801cbe2:	f000 811a 	beq.w	801ce1a <rcl_wait+0x252>
 801cbe6:	6843      	ldr	r3, [r0, #4]
 801cbe8:	b983      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbea:	68eb      	ldr	r3, [r5, #12]
 801cbec:	b973      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbee:	696b      	ldr	r3, [r5, #20]
 801cbf0:	b963      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbf2:	69eb      	ldr	r3, [r5, #28]
 801cbf4:	b953      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cbf8:	b943      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801cbfc:	b933      	cbnz	r3, 801cc0c <rcl_wait+0x44>
 801cbfe:	f240 3085 	movw	r0, #901	; 0x385
 801cc02:	b00d      	add	sp, #52	; 0x34
 801cc04:	ecbd 8b02 	vpop	{d8}
 801cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc0c:	9b04      	ldr	r3, [sp, #16]
 801cc0e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801cc10:	2b01      	cmp	r3, #1
 801cc12:	9b05      	ldr	r3, [sp, #20]
 801cc14:	f173 0300 	sbcs.w	r3, r3, #0
 801cc18:	f2c0 80f8 	blt.w	801ce0c <rcl_wait+0x244>
 801cc1c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cc20:	2a00      	cmp	r2, #0
 801cc22:	f000 810f 	beq.w	801ce44 <rcl_wait+0x27c>
 801cc26:	2400      	movs	r4, #0
 801cc28:	4613      	mov	r3, r2
 801cc2a:	f240 3921 	movw	r9, #801	; 0x321
 801cc2e:	4632      	mov	r2, r6
 801cc30:	46a2      	mov	sl, r4
 801cc32:	46a3      	mov	fp, r4
 801cc34:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801ce98 <rcl_wait+0x2d0>
 801cc38:	e014      	b.n	801cc64 <rcl_wait+0x9c>
 801cc3a:	2800      	cmp	r0, #0
 801cc3c:	d1e1      	bne.n	801cc02 <rcl_wait+0x3a>
 801cc3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cc42:	4542      	cmp	r2, r8
 801cc44:	eb73 0107 	sbcs.w	r1, r3, r7
 801cc48:	da03      	bge.n	801cc52 <rcl_wait+0x8a>
 801cc4a:	4690      	mov	r8, r2
 801cc4c:	461f      	mov	r7, r3
 801cc4e:	f04f 0b01 	mov.w	fp, #1
 801cc52:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cc54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801cc56:	3401      	adds	r4, #1
 801cc58:	f14a 0a00 	adc.w	sl, sl, #0
 801cc5c:	429c      	cmp	r4, r3
 801cc5e:	f17a 0100 	sbcs.w	r1, sl, #0
 801cc62:	d228      	bcs.n	801ccb6 <rcl_wait+0xee>
 801cc64:	6928      	ldr	r0, [r5, #16]
 801cc66:	a908      	add	r1, sp, #32
 801cc68:	00a6      	lsls	r6, r4, #2
 801cc6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801cc6e:	2800      	cmp	r0, #0
 801cc70:	d0f1      	beq.n	801cc56 <rcl_wait+0x8e>
 801cc72:	68eb      	ldr	r3, [r5, #12]
 801cc74:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cc78:	4423      	add	r3, r4
 801cc7a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cc7e:	f1be 0f00 	cmp.w	lr, #0
 801cc82:	d006      	beq.n	801cc92 <rcl_wait+0xca>
 801cc84:	6913      	ldr	r3, [r2, #16]
 801cc86:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	6113      	str	r3, [r2, #16]
 801cc8e:	692b      	ldr	r3, [r5, #16]
 801cc90:	5998      	ldr	r0, [r3, r6]
 801cc92:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cc96:	f7ff fa89 	bl	801c1ac <rcl_timer_get_time_until_next_call>
 801cc9a:	4548      	cmp	r0, r9
 801cc9c:	d1cd      	bne.n	801cc3a <rcl_wait+0x72>
 801cc9e:	692b      	ldr	r3, [r5, #16]
 801cca0:	2200      	movs	r2, #0
 801cca2:	3401      	adds	r4, #1
 801cca4:	519a      	str	r2, [r3, r6]
 801cca6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cca8:	f14a 0a00 	adc.w	sl, sl, #0
 801ccac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ccae:	429c      	cmp	r4, r3
 801ccb0:	f17a 0100 	sbcs.w	r1, sl, #0
 801ccb4:	d3d6      	bcc.n	801cc64 <rcl_wait+0x9c>
 801ccb6:	4659      	mov	r1, fp
 801ccb8:	4616      	mov	r6, r2
 801ccba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	f040 80b4 	bne.w	801ce2c <rcl_wait+0x264>
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	460c      	mov	r4, r1
 801ccca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ccce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ccd2:	ab08      	add	r3, sp, #32
 801ccd4:	9302      	str	r3, [sp, #8]
 801ccd6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801ccda:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801ccdc:	f106 0110 	add.w	r1, r6, #16
 801cce0:	9300      	str	r3, [sp, #0]
 801cce2:	1d30      	adds	r0, r6, #4
 801cce4:	f106 031c 	add.w	r3, r6, #28
 801cce8:	9201      	str	r2, [sp, #4]
 801ccea:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801ccee:	f001 ff5d 	bl	801ebac <rmw_wait>
 801ccf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ccf4:	4680      	mov	r8, r0
 801ccf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ccf8:	b1e2      	cbz	r2, 801cd34 <rcl_wait+0x16c>
 801ccfa:	f04f 0900 	mov.w	r9, #0
 801ccfe:	464f      	mov	r7, r9
 801cd00:	692a      	ldr	r2, [r5, #16]
 801cd02:	f10d 011f 	add.w	r1, sp, #31
 801cd06:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cd0a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cd0e:	b160      	cbz	r0, 801cd2a <rcl_wait+0x162>
 801cd10:	f88d 701f 	strb.w	r7, [sp, #31]
 801cd14:	f7ff fa0e 	bl	801c134 <rcl_timer_is_ready>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	f47f af72 	bne.w	801cc02 <rcl_wait+0x3a>
 801cd1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801cd22:	b90b      	cbnz	r3, 801cd28 <rcl_wait+0x160>
 801cd24:	692a      	ldr	r2, [r5, #16]
 801cd26:	5193      	str	r3, [r2, r6]
 801cd28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cd2a:	f109 0901 	add.w	r9, r9, #1
 801cd2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cd30:	454a      	cmp	r2, r9
 801cd32:	d8e5      	bhi.n	801cd00 <rcl_wait+0x138>
 801cd34:	f038 0002 	bics.w	r0, r8, #2
 801cd38:	d176      	bne.n	801ce28 <rcl_wait+0x260>
 801cd3a:	686f      	ldr	r7, [r5, #4]
 801cd3c:	b17f      	cbz	r7, 801cd5e <rcl_wait+0x196>
 801cd3e:	4602      	mov	r2, r0
 801cd40:	e002      	b.n	801cd48 <rcl_wait+0x180>
 801cd42:	3201      	adds	r2, #1
 801cd44:	42ba      	cmp	r2, r7
 801cd46:	d00a      	beq.n	801cd5e <rcl_wait+0x196>
 801cd48:	6899      	ldr	r1, [r3, #8]
 801cd4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd4e:	2900      	cmp	r1, #0
 801cd50:	d1f7      	bne.n	801cd42 <rcl_wait+0x17a>
 801cd52:	682e      	ldr	r6, [r5, #0]
 801cd54:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cd58:	3201      	adds	r2, #1
 801cd5a:	42ba      	cmp	r2, r7
 801cd5c:	d1f4      	bne.n	801cd48 <rcl_wait+0x180>
 801cd5e:	68ef      	ldr	r7, [r5, #12]
 801cd60:	b17f      	cbz	r7, 801cd82 <rcl_wait+0x1ba>
 801cd62:	2200      	movs	r2, #0
 801cd64:	e002      	b.n	801cd6c <rcl_wait+0x1a4>
 801cd66:	3201      	adds	r2, #1
 801cd68:	42ba      	cmp	r2, r7
 801cd6a:	d00a      	beq.n	801cd82 <rcl_wait+0x1ba>
 801cd6c:	6959      	ldr	r1, [r3, #20]
 801cd6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd72:	2900      	cmp	r1, #0
 801cd74:	d1f7      	bne.n	801cd66 <rcl_wait+0x19e>
 801cd76:	68ae      	ldr	r6, [r5, #8]
 801cd78:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cd7c:	3201      	adds	r2, #1
 801cd7e:	42ba      	cmp	r2, r7
 801cd80:	d1f4      	bne.n	801cd6c <rcl_wait+0x1a4>
 801cd82:	69ef      	ldr	r7, [r5, #28]
 801cd84:	b17f      	cbz	r7, 801cda6 <rcl_wait+0x1de>
 801cd86:	2200      	movs	r2, #0
 801cd88:	e002      	b.n	801cd90 <rcl_wait+0x1c8>
 801cd8a:	3201      	adds	r2, #1
 801cd8c:	42ba      	cmp	r2, r7
 801cd8e:	d00a      	beq.n	801cda6 <rcl_wait+0x1de>
 801cd90:	6a19      	ldr	r1, [r3, #32]
 801cd92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cd96:	2900      	cmp	r1, #0
 801cd98:	d1f7      	bne.n	801cd8a <rcl_wait+0x1c2>
 801cd9a:	69ae      	ldr	r6, [r5, #24]
 801cd9c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cda0:	3201      	adds	r2, #1
 801cda2:	42ba      	cmp	r2, r7
 801cda4:	d1f4      	bne.n	801cd90 <rcl_wait+0x1c8>
 801cda6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cda8:	b17f      	cbz	r7, 801cdca <rcl_wait+0x202>
 801cdaa:	2200      	movs	r2, #0
 801cdac:	e002      	b.n	801cdb4 <rcl_wait+0x1ec>
 801cdae:	3201      	adds	r2, #1
 801cdb0:	42ba      	cmp	r2, r7
 801cdb2:	d00a      	beq.n	801cdca <rcl_wait+0x202>
 801cdb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cdb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cdba:	2900      	cmp	r1, #0
 801cdbc:	d1f7      	bne.n	801cdae <rcl_wait+0x1e6>
 801cdbe:	6a2e      	ldr	r6, [r5, #32]
 801cdc0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cdc4:	3201      	adds	r2, #1
 801cdc6:	42ba      	cmp	r2, r7
 801cdc8:	d1f4      	bne.n	801cdb4 <rcl_wait+0x1ec>
 801cdca:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cdcc:	b17f      	cbz	r7, 801cdee <rcl_wait+0x226>
 801cdce:	2200      	movs	r2, #0
 801cdd0:	e002      	b.n	801cdd8 <rcl_wait+0x210>
 801cdd2:	3201      	adds	r2, #1
 801cdd4:	42ba      	cmp	r2, r7
 801cdd6:	d00a      	beq.n	801cdee <rcl_wait+0x226>
 801cdd8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cdda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cdde:	2900      	cmp	r1, #0
 801cde0:	d1f7      	bne.n	801cdd2 <rcl_wait+0x20a>
 801cde2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801cde4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cde8:	3201      	adds	r2, #1
 801cdea:	42ba      	cmp	r2, r7
 801cdec:	d1f4      	bne.n	801cdd8 <rcl_wait+0x210>
 801cdee:	f1b8 0f02 	cmp.w	r8, #2
 801cdf2:	f47f af06 	bne.w	801cc02 <rcl_wait+0x3a>
 801cdf6:	f084 0301 	eor.w	r3, r4, #1
 801cdfa:	b2db      	uxtb	r3, r3
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	bf18      	it	ne
 801ce00:	2002      	movne	r0, #2
 801ce02:	b00d      	add	sp, #52	; 0x34
 801ce04:	ecbd 8b02 	vpop	{d8}
 801ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce0c:	2a00      	cmp	r2, #0
 801ce0e:	d03a      	beq.n	801ce86 <rcl_wait+0x2be>
 801ce10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ce14:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ce18:	e705      	b.n	801cc26 <rcl_wait+0x5e>
 801ce1a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801ce1e:	b00d      	add	sp, #52	; 0x34
 801ce20:	ecbd 8b02 	vpop	{d8}
 801ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce28:	2001      	movs	r0, #1
 801ce2a:	e6ea      	b.n	801cc02 <rcl_wait+0x3a>
 801ce2c:	9b04      	ldr	r3, [sp, #16]
 801ce2e:	460c      	mov	r4, r1
 801ce30:	2b01      	cmp	r3, #1
 801ce32:	9b05      	ldr	r3, [sp, #20]
 801ce34:	f173 0300 	sbcs.w	r3, r3, #0
 801ce38:	bfa8      	it	ge
 801ce3a:	f044 0401 	orrge.w	r4, r4, #1
 801ce3e:	b914      	cbnz	r4, 801ce46 <rcl_wait+0x27e>
 801ce40:	4623      	mov	r3, r4
 801ce42:	e747      	b.n	801ccd4 <rcl_wait+0x10c>
 801ce44:	4611      	mov	r1, r2
 801ce46:	2f00      	cmp	r7, #0
 801ce48:	da02      	bge.n	801ce50 <rcl_wait+0x288>
 801ce4a:	f04f 0800 	mov.w	r8, #0
 801ce4e:	4647      	mov	r7, r8
 801ce50:	460c      	mov	r4, r1
 801ce52:	4640      	mov	r0, r8
 801ce54:	4639      	mov	r1, r7
 801ce56:	a312      	add	r3, pc, #72	; (adr r3, 801cea0 <rcl_wait+0x2d8>)
 801ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce5c:	f7e3 fb66 	bl	800052c <__aeabi_ldivmod>
 801ce60:	a30f      	add	r3, pc, #60	; (adr r3, 801cea0 <rcl_wait+0x2d8>)
 801ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ce6a:	4640      	mov	r0, r8
 801ce6c:	4639      	mov	r1, r7
 801ce6e:	f7e3 fb5d 	bl	800052c <__aeabi_ldivmod>
 801ce72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ce76:	ab08      	add	r3, sp, #32
 801ce78:	e72c      	b.n	801ccd4 <rcl_wait+0x10c>
 801ce7a:	200b      	movs	r0, #11
 801ce7c:	b00d      	add	sp, #52	; 0x34
 801ce7e:	ecbd 8b02 	vpop	{d8}
 801ce82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce86:	4611      	mov	r1, r2
 801ce88:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ce8c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ce90:	e713      	b.n	801ccba <rcl_wait+0xf2>
 801ce92:	bf00      	nop
 801ce94:	f3af 8000 	nop.w
 801ce98:	ffffffff 	.word	0xffffffff
 801ce9c:	7fffffff 	.word	0x7fffffff
 801cea0:	3b9aca00 	.word	0x3b9aca00
 801cea4:	00000000 	.word	0x00000000

0801cea8 <rcl_action_take_goal_response>:
 801cea8:	2800      	cmp	r0, #0
 801ceaa:	d039      	beq.n	801cf20 <rcl_action_take_goal_response+0x78>
 801ceac:	b570      	push	{r4, r5, r6, lr}
 801ceae:	4604      	mov	r4, r0
 801ceb0:	6800      	ldr	r0, [r0, #0]
 801ceb2:	b380      	cbz	r0, 801cf16 <rcl_action_take_goal_response+0x6e>
 801ceb4:	460e      	mov	r6, r1
 801ceb6:	4615      	mov	r5, r2
 801ceb8:	f7fd ff2a 	bl	801ad10 <rcl_client_is_valid>
 801cebc:	b330      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cebe:	6820      	ldr	r0, [r4, #0]
 801cec0:	3004      	adds	r0, #4
 801cec2:	f7fd ff25 	bl	801ad10 <rcl_client_is_valid>
 801cec6:	b308      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cec8:	6820      	ldr	r0, [r4, #0]
 801ceca:	3008      	adds	r0, #8
 801cecc:	f7fd ff20 	bl	801ad10 <rcl_client_is_valid>
 801ced0:	b1e0      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801ced2:	6820      	ldr	r0, [r4, #0]
 801ced4:	300c      	adds	r0, #12
 801ced6:	f7fe fdc5 	bl	801ba64 <rcl_subscription_is_valid>
 801ceda:	b1b8      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cedc:	6820      	ldr	r0, [r4, #0]
 801cede:	3010      	adds	r0, #16
 801cee0:	f7fe fdc0 	bl	801ba64 <rcl_subscription_is_valid>
 801cee4:	b190      	cbz	r0, 801cf0c <rcl_action_take_goal_response+0x64>
 801cee6:	b1cd      	cbz	r5, 801cf1c <rcl_action_take_goal_response+0x74>
 801cee8:	b1c6      	cbz	r6, 801cf1c <rcl_action_take_goal_response+0x74>
 801ceea:	462a      	mov	r2, r5
 801ceec:	4631      	mov	r1, r6
 801ceee:	6820      	ldr	r0, [r4, #0]
 801cef0:	f7fd fec6 	bl	801ac80 <rcl_take_response>
 801cef4:	b148      	cbz	r0, 801cf0a <rcl_action_take_goal_response+0x62>
 801cef6:	280a      	cmp	r0, #10
 801cef8:	d007      	beq.n	801cf0a <rcl_action_take_goal_response+0x62>
 801cefa:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cefe:	f640 0337 	movw	r3, #2103	; 0x837
 801cf02:	4290      	cmp	r0, r2
 801cf04:	bf0c      	ite	eq
 801cf06:	4618      	moveq	r0, r3
 801cf08:	2001      	movne	r0, #1
 801cf0a:	bd70      	pop	{r4, r5, r6, pc}
 801cf0c:	f7f8 fbd8 	bl	80156c0 <rcutils_reset_error>
 801cf10:	f640 0036 	movw	r0, #2102	; 0x836
 801cf14:	bd70      	pop	{r4, r5, r6, pc}
 801cf16:	f640 0036 	movw	r0, #2102	; 0x836
 801cf1a:	bd70      	pop	{r4, r5, r6, pc}
 801cf1c:	200b      	movs	r0, #11
 801cf1e:	bd70      	pop	{r4, r5, r6, pc}
 801cf20:	f640 0036 	movw	r0, #2102	; 0x836
 801cf24:	4770      	bx	lr
 801cf26:	bf00      	nop

0801cf28 <rcl_action_send_result_request>:
 801cf28:	b390      	cbz	r0, 801cf90 <rcl_action_send_result_request+0x68>
 801cf2a:	b570      	push	{r4, r5, r6, lr}
 801cf2c:	4604      	mov	r4, r0
 801cf2e:	6800      	ldr	r0, [r0, #0]
 801cf30:	b348      	cbz	r0, 801cf86 <rcl_action_send_result_request+0x5e>
 801cf32:	460e      	mov	r6, r1
 801cf34:	4615      	mov	r5, r2
 801cf36:	f7fd feeb 	bl	801ad10 <rcl_client_is_valid>
 801cf3a:	b1f8      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf3c:	6820      	ldr	r0, [r4, #0]
 801cf3e:	3004      	adds	r0, #4
 801cf40:	f7fd fee6 	bl	801ad10 <rcl_client_is_valid>
 801cf44:	b1d0      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf46:	6820      	ldr	r0, [r4, #0]
 801cf48:	3008      	adds	r0, #8
 801cf4a:	f7fd fee1 	bl	801ad10 <rcl_client_is_valid>
 801cf4e:	b1a8      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf50:	6820      	ldr	r0, [r4, #0]
 801cf52:	300c      	adds	r0, #12
 801cf54:	f7fe fd86 	bl	801ba64 <rcl_subscription_is_valid>
 801cf58:	b180      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf5a:	6820      	ldr	r0, [r4, #0]
 801cf5c:	3010      	adds	r0, #16
 801cf5e:	f7fe fd81 	bl	801ba64 <rcl_subscription_is_valid>
 801cf62:	b158      	cbz	r0, 801cf7c <rcl_action_send_result_request+0x54>
 801cf64:	b195      	cbz	r5, 801cf8c <rcl_action_send_result_request+0x64>
 801cf66:	b18e      	cbz	r6, 801cf8c <rcl_action_send_result_request+0x64>
 801cf68:	6820      	ldr	r0, [r4, #0]
 801cf6a:	462a      	mov	r2, r5
 801cf6c:	4631      	mov	r1, r6
 801cf6e:	3008      	adds	r0, #8
 801cf70:	f7fd fe4e 	bl	801ac10 <rcl_send_request>
 801cf74:	3800      	subs	r0, #0
 801cf76:	bf18      	it	ne
 801cf78:	2001      	movne	r0, #1
 801cf7a:	bd70      	pop	{r4, r5, r6, pc}
 801cf7c:	f7f8 fba0 	bl	80156c0 <rcutils_reset_error>
 801cf80:	f640 0036 	movw	r0, #2102	; 0x836
 801cf84:	bd70      	pop	{r4, r5, r6, pc}
 801cf86:	f640 0036 	movw	r0, #2102	; 0x836
 801cf8a:	bd70      	pop	{r4, r5, r6, pc}
 801cf8c:	200b      	movs	r0, #11
 801cf8e:	bd70      	pop	{r4, r5, r6, pc}
 801cf90:	f640 0036 	movw	r0, #2102	; 0x836
 801cf94:	4770      	bx	lr
 801cf96:	bf00      	nop

0801cf98 <rcl_action_take_result_response>:
 801cf98:	2800      	cmp	r0, #0
 801cf9a:	d03a      	beq.n	801d012 <rcl_action_take_result_response+0x7a>
 801cf9c:	b570      	push	{r4, r5, r6, lr}
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	6800      	ldr	r0, [r0, #0]
 801cfa2:	b388      	cbz	r0, 801d008 <rcl_action_take_result_response+0x70>
 801cfa4:	460e      	mov	r6, r1
 801cfa6:	4615      	mov	r5, r2
 801cfa8:	f7fd feb2 	bl	801ad10 <rcl_client_is_valid>
 801cfac:	b338      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfae:	6820      	ldr	r0, [r4, #0]
 801cfb0:	3004      	adds	r0, #4
 801cfb2:	f7fd fead 	bl	801ad10 <rcl_client_is_valid>
 801cfb6:	b310      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfb8:	6820      	ldr	r0, [r4, #0]
 801cfba:	3008      	adds	r0, #8
 801cfbc:	f7fd fea8 	bl	801ad10 <rcl_client_is_valid>
 801cfc0:	b1e8      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfc2:	6820      	ldr	r0, [r4, #0]
 801cfc4:	300c      	adds	r0, #12
 801cfc6:	f7fe fd4d 	bl	801ba64 <rcl_subscription_is_valid>
 801cfca:	b1c0      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfcc:	6820      	ldr	r0, [r4, #0]
 801cfce:	3010      	adds	r0, #16
 801cfd0:	f7fe fd48 	bl	801ba64 <rcl_subscription_is_valid>
 801cfd4:	b198      	cbz	r0, 801cffe <rcl_action_take_result_response+0x66>
 801cfd6:	b1d5      	cbz	r5, 801d00e <rcl_action_take_result_response+0x76>
 801cfd8:	b1ce      	cbz	r6, 801d00e <rcl_action_take_result_response+0x76>
 801cfda:	6820      	ldr	r0, [r4, #0]
 801cfdc:	462a      	mov	r2, r5
 801cfde:	4631      	mov	r1, r6
 801cfe0:	3008      	adds	r0, #8
 801cfe2:	f7fd fe4d 	bl	801ac80 <rcl_take_response>
 801cfe6:	b148      	cbz	r0, 801cffc <rcl_action_take_result_response+0x64>
 801cfe8:	280a      	cmp	r0, #10
 801cfea:	d007      	beq.n	801cffc <rcl_action_take_result_response+0x64>
 801cfec:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cff0:	f640 0337 	movw	r3, #2103	; 0x837
 801cff4:	4290      	cmp	r0, r2
 801cff6:	bf0c      	ite	eq
 801cff8:	4618      	moveq	r0, r3
 801cffa:	2001      	movne	r0, #1
 801cffc:	bd70      	pop	{r4, r5, r6, pc}
 801cffe:	f7f8 fb5f 	bl	80156c0 <rcutils_reset_error>
 801d002:	f640 0036 	movw	r0, #2102	; 0x836
 801d006:	bd70      	pop	{r4, r5, r6, pc}
 801d008:	f640 0036 	movw	r0, #2102	; 0x836
 801d00c:	bd70      	pop	{r4, r5, r6, pc}
 801d00e:	200b      	movs	r0, #11
 801d010:	bd70      	pop	{r4, r5, r6, pc}
 801d012:	f640 0036 	movw	r0, #2102	; 0x836
 801d016:	4770      	bx	lr

0801d018 <rcl_action_take_cancel_response>:
 801d018:	2800      	cmp	r0, #0
 801d01a:	d03a      	beq.n	801d092 <rcl_action_take_cancel_response+0x7a>
 801d01c:	b570      	push	{r4, r5, r6, lr}
 801d01e:	4604      	mov	r4, r0
 801d020:	6800      	ldr	r0, [r0, #0]
 801d022:	b388      	cbz	r0, 801d088 <rcl_action_take_cancel_response+0x70>
 801d024:	460e      	mov	r6, r1
 801d026:	4615      	mov	r5, r2
 801d028:	f7fd fe72 	bl	801ad10 <rcl_client_is_valid>
 801d02c:	b338      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d02e:	6820      	ldr	r0, [r4, #0]
 801d030:	3004      	adds	r0, #4
 801d032:	f7fd fe6d 	bl	801ad10 <rcl_client_is_valid>
 801d036:	b310      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d038:	6820      	ldr	r0, [r4, #0]
 801d03a:	3008      	adds	r0, #8
 801d03c:	f7fd fe68 	bl	801ad10 <rcl_client_is_valid>
 801d040:	b1e8      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d042:	6820      	ldr	r0, [r4, #0]
 801d044:	300c      	adds	r0, #12
 801d046:	f7fe fd0d 	bl	801ba64 <rcl_subscription_is_valid>
 801d04a:	b1c0      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d04c:	6820      	ldr	r0, [r4, #0]
 801d04e:	3010      	adds	r0, #16
 801d050:	f7fe fd08 	bl	801ba64 <rcl_subscription_is_valid>
 801d054:	b198      	cbz	r0, 801d07e <rcl_action_take_cancel_response+0x66>
 801d056:	b1d5      	cbz	r5, 801d08e <rcl_action_take_cancel_response+0x76>
 801d058:	b1ce      	cbz	r6, 801d08e <rcl_action_take_cancel_response+0x76>
 801d05a:	6820      	ldr	r0, [r4, #0]
 801d05c:	462a      	mov	r2, r5
 801d05e:	4631      	mov	r1, r6
 801d060:	3004      	adds	r0, #4
 801d062:	f7fd fe0d 	bl	801ac80 <rcl_take_response>
 801d066:	b148      	cbz	r0, 801d07c <rcl_action_take_cancel_response+0x64>
 801d068:	280a      	cmp	r0, #10
 801d06a:	d007      	beq.n	801d07c <rcl_action_take_cancel_response+0x64>
 801d06c:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d070:	f640 0337 	movw	r3, #2103	; 0x837
 801d074:	4290      	cmp	r0, r2
 801d076:	bf0c      	ite	eq
 801d078:	4618      	moveq	r0, r3
 801d07a:	2001      	movne	r0, #1
 801d07c:	bd70      	pop	{r4, r5, r6, pc}
 801d07e:	f7f8 fb1f 	bl	80156c0 <rcutils_reset_error>
 801d082:	f640 0036 	movw	r0, #2102	; 0x836
 801d086:	bd70      	pop	{r4, r5, r6, pc}
 801d088:	f640 0036 	movw	r0, #2102	; 0x836
 801d08c:	bd70      	pop	{r4, r5, r6, pc}
 801d08e:	200b      	movs	r0, #11
 801d090:	bd70      	pop	{r4, r5, r6, pc}
 801d092:	f640 0036 	movw	r0, #2102	; 0x836
 801d096:	4770      	bx	lr

0801d098 <rcl_action_take_feedback>:
 801d098:	2800      	cmp	r0, #0
 801d09a:	d038      	beq.n	801d10e <rcl_action_take_feedback+0x76>
 801d09c:	b530      	push	{r4, r5, lr}
 801d09e:	4604      	mov	r4, r0
 801d0a0:	6800      	ldr	r0, [r0, #0]
 801d0a2:	b091      	sub	sp, #68	; 0x44
 801d0a4:	b378      	cbz	r0, 801d106 <rcl_action_take_feedback+0x6e>
 801d0a6:	460d      	mov	r5, r1
 801d0a8:	f7fd fe32 	bl	801ad10 <rcl_client_is_valid>
 801d0ac:	b328      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0ae:	6820      	ldr	r0, [r4, #0]
 801d0b0:	3004      	adds	r0, #4
 801d0b2:	f7fd fe2d 	bl	801ad10 <rcl_client_is_valid>
 801d0b6:	b300      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0b8:	6820      	ldr	r0, [r4, #0]
 801d0ba:	3008      	adds	r0, #8
 801d0bc:	f7fd fe28 	bl	801ad10 <rcl_client_is_valid>
 801d0c0:	b1d8      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0c2:	6820      	ldr	r0, [r4, #0]
 801d0c4:	300c      	adds	r0, #12
 801d0c6:	f7fe fccd 	bl	801ba64 <rcl_subscription_is_valid>
 801d0ca:	b1b0      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0cc:	6820      	ldr	r0, [r4, #0]
 801d0ce:	3010      	adds	r0, #16
 801d0d0:	f7fe fcc8 	bl	801ba64 <rcl_subscription_is_valid>
 801d0d4:	b188      	cbz	r0, 801d0fa <rcl_action_take_feedback+0x62>
 801d0d6:	b1ed      	cbz	r5, 801d114 <rcl_action_take_feedback+0x7c>
 801d0d8:	6820      	ldr	r0, [r4, #0]
 801d0da:	2300      	movs	r3, #0
 801d0dc:	466a      	mov	r2, sp
 801d0de:	4629      	mov	r1, r5
 801d0e0:	300c      	adds	r0, #12
 801d0e2:	f7fe fc63 	bl	801b9ac <rcl_take>
 801d0e6:	b160      	cbz	r0, 801d102 <rcl_action_take_feedback+0x6a>
 801d0e8:	f240 1391 	movw	r3, #401	; 0x191
 801d0ec:	4298      	cmp	r0, r3
 801d0ee:	d014      	beq.n	801d11a <rcl_action_take_feedback+0x82>
 801d0f0:	280a      	cmp	r0, #10
 801d0f2:	bf18      	it	ne
 801d0f4:	2001      	movne	r0, #1
 801d0f6:	b011      	add	sp, #68	; 0x44
 801d0f8:	bd30      	pop	{r4, r5, pc}
 801d0fa:	f7f8 fae1 	bl	80156c0 <rcutils_reset_error>
 801d0fe:	f640 0036 	movw	r0, #2102	; 0x836
 801d102:	b011      	add	sp, #68	; 0x44
 801d104:	bd30      	pop	{r4, r5, pc}
 801d106:	f640 0036 	movw	r0, #2102	; 0x836
 801d10a:	b011      	add	sp, #68	; 0x44
 801d10c:	bd30      	pop	{r4, r5, pc}
 801d10e:	f640 0036 	movw	r0, #2102	; 0x836
 801d112:	4770      	bx	lr
 801d114:	200b      	movs	r0, #11
 801d116:	b011      	add	sp, #68	; 0x44
 801d118:	bd30      	pop	{r4, r5, pc}
 801d11a:	f640 0037 	movw	r0, #2103	; 0x837
 801d11e:	e7f0      	b.n	801d102 <rcl_action_take_feedback+0x6a>

0801d120 <rcl_action_wait_set_add_action_client>:
 801d120:	2800      	cmp	r0, #0
 801d122:	d048      	beq.n	801d1b6 <rcl_action_wait_set_add_action_client+0x96>
 801d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d126:	460c      	mov	r4, r1
 801d128:	2900      	cmp	r1, #0
 801d12a:	d03c      	beq.n	801d1a6 <rcl_action_wait_set_add_action_client+0x86>
 801d12c:	4605      	mov	r5, r0
 801d12e:	6808      	ldr	r0, [r1, #0]
 801d130:	2800      	cmp	r0, #0
 801d132:	d038      	beq.n	801d1a6 <rcl_action_wait_set_add_action_client+0x86>
 801d134:	4617      	mov	r7, r2
 801d136:	461e      	mov	r6, r3
 801d138:	f7fd fdea 	bl	801ad10 <rcl_client_is_valid>
 801d13c:	b3b0      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d13e:	6820      	ldr	r0, [r4, #0]
 801d140:	3004      	adds	r0, #4
 801d142:	f7fd fde5 	bl	801ad10 <rcl_client_is_valid>
 801d146:	b388      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d148:	6820      	ldr	r0, [r4, #0]
 801d14a:	3008      	adds	r0, #8
 801d14c:	f7fd fde0 	bl	801ad10 <rcl_client_is_valid>
 801d150:	b360      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d152:	6820      	ldr	r0, [r4, #0]
 801d154:	300c      	adds	r0, #12
 801d156:	f7fe fc85 	bl	801ba64 <rcl_subscription_is_valid>
 801d15a:	b338      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d15c:	6820      	ldr	r0, [r4, #0]
 801d15e:	3010      	adds	r0, #16
 801d160:	f7fe fc80 	bl	801ba64 <rcl_subscription_is_valid>
 801d164:	b310      	cbz	r0, 801d1ac <rcl_action_wait_set_add_action_client+0x8c>
 801d166:	6821      	ldr	r1, [r4, #0]
 801d168:	4628      	mov	r0, r5
 801d16a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801d16e:	f7ff fcd1 	bl	801cb14 <rcl_wait_set_add_client>
 801d172:	b9b8      	cbnz	r0, 801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d174:	6821      	ldr	r1, [r4, #0]
 801d176:	4628      	mov	r0, r5
 801d178:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801d17c:	3104      	adds	r1, #4
 801d17e:	f7ff fcc9 	bl	801cb14 <rcl_wait_set_add_client>
 801d182:	b978      	cbnz	r0, 801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d184:	6821      	ldr	r1, [r4, #0]
 801d186:	4628      	mov	r0, r5
 801d188:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801d18c:	3108      	adds	r1, #8
 801d18e:	f7ff fcc1 	bl	801cb14 <rcl_wait_set_add_client>
 801d192:	b938      	cbnz	r0, 801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d194:	6821      	ldr	r1, [r4, #0]
 801d196:	4628      	mov	r0, r5
 801d198:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801d19c:	310c      	adds	r1, #12
 801d19e:	f7ff f969 	bl	801c474 <rcl_wait_set_add_subscription>
 801d1a2:	b158      	cbz	r0, 801d1bc <rcl_action_wait_set_add_action_client+0x9c>
 801d1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1a6:	f640 0036 	movw	r0, #2102	; 0x836
 801d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ac:	f7f8 fa88 	bl	80156c0 <rcutils_reset_error>
 801d1b0:	f640 0036 	movw	r0, #2102	; 0x836
 801d1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d1ba:	4770      	bx	lr
 801d1bc:	6821      	ldr	r1, [r4, #0]
 801d1be:	4628      	mov	r0, r5
 801d1c0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801d1c4:	3110      	adds	r1, #16
 801d1c6:	f7ff f955 	bl	801c474 <rcl_wait_set_add_subscription>
 801d1ca:	2800      	cmp	r0, #0
 801d1cc:	d1ea      	bne.n	801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d1ce:	b11f      	cbz	r7, 801d1d8 <rcl_action_wait_set_add_action_client+0xb8>
 801d1d0:	6823      	ldr	r3, [r4, #0]
 801d1d2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801d1d6:	603b      	str	r3, [r7, #0]
 801d1d8:	2e00      	cmp	r6, #0
 801d1da:	d0e3      	beq.n	801d1a4 <rcl_action_wait_set_add_action_client+0x84>
 801d1dc:	6823      	ldr	r3, [r4, #0]
 801d1de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801d1e2:	6033      	str	r3, [r6, #0]
 801d1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1e6:	bf00      	nop

0801d1e8 <rcl_action_client_wait_set_get_entities_ready>:
 801d1e8:	2800      	cmp	r0, #0
 801d1ea:	d050      	beq.n	801d28e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1f0:	460c      	mov	r4, r1
 801d1f2:	2900      	cmp	r1, #0
 801d1f4:	d03e      	beq.n	801d274 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d1f6:	4605      	mov	r5, r0
 801d1f8:	6808      	ldr	r0, [r1, #0]
 801d1fa:	2800      	cmp	r0, #0
 801d1fc:	d03a      	beq.n	801d274 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d1fe:	4616      	mov	r6, r2
 801d200:	461f      	mov	r7, r3
 801d202:	f7fd fd85 	bl	801ad10 <rcl_client_is_valid>
 801d206:	2800      	cmp	r0, #0
 801d208:	d038      	beq.n	801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d20a:	6820      	ldr	r0, [r4, #0]
 801d20c:	3004      	adds	r0, #4
 801d20e:	f7fd fd7f 	bl	801ad10 <rcl_client_is_valid>
 801d212:	2800      	cmp	r0, #0
 801d214:	d032      	beq.n	801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d216:	6820      	ldr	r0, [r4, #0]
 801d218:	3008      	adds	r0, #8
 801d21a:	f7fd fd79 	bl	801ad10 <rcl_client_is_valid>
 801d21e:	b368      	cbz	r0, 801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d220:	6820      	ldr	r0, [r4, #0]
 801d222:	300c      	adds	r0, #12
 801d224:	f7fe fc1e 	bl	801ba64 <rcl_subscription_is_valid>
 801d228:	b340      	cbz	r0, 801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d22a:	6820      	ldr	r0, [r4, #0]
 801d22c:	3010      	adds	r0, #16
 801d22e:	f7fe fc19 	bl	801ba64 <rcl_subscription_is_valid>
 801d232:	b318      	cbz	r0, 801d27c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d234:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d238:	2a00      	cmp	r2, #0
 801d23a:	bf18      	it	ne
 801d23c:	2b00      	cmpne	r3, #0
 801d23e:	9b08      	ldr	r3, [sp, #32]
 801d240:	bf0c      	ite	eq
 801d242:	2101      	moveq	r1, #1
 801d244:	2100      	movne	r1, #0
 801d246:	2b00      	cmp	r3, #0
 801d248:	bf08      	it	eq
 801d24a:	f041 0101 	orreq.w	r1, r1, #1
 801d24e:	2f00      	cmp	r7, #0
 801d250:	bf08      	it	eq
 801d252:	f041 0101 	orreq.w	r1, r1, #1
 801d256:	b9b9      	cbnz	r1, 801d288 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d258:	b1b6      	cbz	r6, 801d288 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d25a:	6823      	ldr	r3, [r4, #0]
 801d25c:	686c      	ldr	r4, [r5, #4]
 801d25e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801d262:	428a      	cmp	r2, r1
 801d264:	4610      	mov	r0, r2
 801d266:	bf38      	it	cc
 801d268:	4608      	movcc	r0, r1
 801d26a:	4284      	cmp	r4, r0
 801d26c:	d812      	bhi.n	801d294 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d26e:	2001      	movs	r0, #1
 801d270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d274:	f640 0036 	movw	r0, #2102	; 0x836
 801d278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d27c:	f7f8 fa20 	bl	80156c0 <rcutils_reset_error>
 801d280:	f640 0036 	movw	r0, #2102	; 0x836
 801d284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d288:	200b      	movs	r0, #11
 801d28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d28e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d292:	4770      	bx	lr
 801d294:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d298:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d29c:	45f0      	cmp	r8, lr
 801d29e:	4640      	mov	r0, r8
 801d2a0:	69ec      	ldr	r4, [r5, #28]
 801d2a2:	bf38      	it	cc
 801d2a4:	4670      	movcc	r0, lr
 801d2a6:	4560      	cmp	r0, ip
 801d2a8:	bf38      	it	cc
 801d2aa:	4660      	movcc	r0, ip
 801d2ac:	4284      	cmp	r4, r0
 801d2ae:	d9de      	bls.n	801d26e <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d2b0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d2b4:	682d      	ldr	r5, [r5, #0]
 801d2b6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d2ba:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d2be:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d2c2:	1a18      	subs	r0, r3, r0
 801d2c4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d2c8:	f103 0c0c 	add.w	ip, r3, #12
 801d2cc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d2d0:	fab0 f080 	clz	r0, r0
 801d2d4:	eba5 050c 	sub.w	r5, r5, ip
 801d2d8:	0940      	lsrs	r0, r0, #5
 801d2da:	fab5 f585 	clz	r5, r5
 801d2de:	096d      	lsrs	r5, r5, #5
 801d2e0:	7035      	strb	r5, [r6, #0]
 801d2e2:	f103 0510 	add.w	r5, r3, #16
 801d2e6:	1b64      	subs	r4, r4, r5
 801d2e8:	9d08      	ldr	r5, [sp, #32]
 801d2ea:	fab4 f484 	clz	r4, r4
 801d2ee:	0964      	lsrs	r4, r4, #5
 801d2f0:	703c      	strb	r4, [r7, #0]
 801d2f2:	1d1c      	adds	r4, r3, #4
 801d2f4:	3308      	adds	r3, #8
 801d2f6:	7028      	strb	r0, [r5, #0]
 801d2f8:	1b09      	subs	r1, r1, r4
 801d2fa:	2000      	movs	r0, #0
 801d2fc:	1ad3      	subs	r3, r2, r3
 801d2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d300:	fab1 f181 	clz	r1, r1
 801d304:	fab3 f383 	clz	r3, r3
 801d308:	0949      	lsrs	r1, r1, #5
 801d30a:	095b      	lsrs	r3, r3, #5
 801d30c:	7011      	strb	r1, [r2, #0]
 801d30e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d310:	7013      	strb	r3, [r2, #0]
 801d312:	e7b1      	b.n	801d278 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d314 <rcl_action_take_goal_request>:
 801d314:	2800      	cmp	r0, #0
 801d316:	d039      	beq.n	801d38c <rcl_action_take_goal_request+0x78>
 801d318:	b570      	push	{r4, r5, r6, lr}
 801d31a:	4604      	mov	r4, r0
 801d31c:	6800      	ldr	r0, [r0, #0]
 801d31e:	b380      	cbz	r0, 801d382 <rcl_action_take_goal_request+0x6e>
 801d320:	460e      	mov	r6, r1
 801d322:	4615      	mov	r5, r2
 801d324:	f7fe fa56 	bl	801b7d4 <rcl_service_is_valid>
 801d328:	b330      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d32a:	6820      	ldr	r0, [r4, #0]
 801d32c:	3004      	adds	r0, #4
 801d32e:	f7fe fa51 	bl	801b7d4 <rcl_service_is_valid>
 801d332:	b308      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d334:	6820      	ldr	r0, [r4, #0]
 801d336:	3008      	adds	r0, #8
 801d338:	f7fe fa4c 	bl	801b7d4 <rcl_service_is_valid>
 801d33c:	b1e0      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d33e:	6820      	ldr	r0, [r4, #0]
 801d340:	300c      	adds	r0, #12
 801d342:	f7f7 f9cb 	bl	80146dc <rcl_publisher_is_valid>
 801d346:	b1b8      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d348:	6820      	ldr	r0, [r4, #0]
 801d34a:	3010      	adds	r0, #16
 801d34c:	f7f7 f9c6 	bl	80146dc <rcl_publisher_is_valid>
 801d350:	b190      	cbz	r0, 801d378 <rcl_action_take_goal_request+0x64>
 801d352:	b1cd      	cbz	r5, 801d388 <rcl_action_take_goal_request+0x74>
 801d354:	b1c6      	cbz	r6, 801d388 <rcl_action_take_goal_request+0x74>
 801d356:	462a      	mov	r2, r5
 801d358:	4631      	mov	r1, r6
 801d35a:	6820      	ldr	r0, [r4, #0]
 801d35c:	f7fe f9e2 	bl	801b724 <rcl_take_request>
 801d360:	b148      	cbz	r0, 801d376 <rcl_action_take_goal_request+0x62>
 801d362:	280a      	cmp	r0, #10
 801d364:	d007      	beq.n	801d376 <rcl_action_take_goal_request+0x62>
 801d366:	f240 2259 	movw	r2, #601	; 0x259
 801d36a:	f640 0399 	movw	r3, #2201	; 0x899
 801d36e:	4290      	cmp	r0, r2
 801d370:	bf0c      	ite	eq
 801d372:	4618      	moveq	r0, r3
 801d374:	2001      	movne	r0, #1
 801d376:	bd70      	pop	{r4, r5, r6, pc}
 801d378:	f7f8 f9a2 	bl	80156c0 <rcutils_reset_error>
 801d37c:	f640 0098 	movw	r0, #2200	; 0x898
 801d380:	bd70      	pop	{r4, r5, r6, pc}
 801d382:	f640 0098 	movw	r0, #2200	; 0x898
 801d386:	bd70      	pop	{r4, r5, r6, pc}
 801d388:	200b      	movs	r0, #11
 801d38a:	bd70      	pop	{r4, r5, r6, pc}
 801d38c:	f640 0098 	movw	r0, #2200	; 0x898
 801d390:	4770      	bx	lr
 801d392:	bf00      	nop

0801d394 <rcl_action_send_goal_response>:
 801d394:	b388      	cbz	r0, 801d3fa <rcl_action_send_goal_response+0x66>
 801d396:	b570      	push	{r4, r5, r6, lr}
 801d398:	4604      	mov	r4, r0
 801d39a:	6800      	ldr	r0, [r0, #0]
 801d39c:	b340      	cbz	r0, 801d3f0 <rcl_action_send_goal_response+0x5c>
 801d39e:	460e      	mov	r6, r1
 801d3a0:	4615      	mov	r5, r2
 801d3a2:	f7fe fa17 	bl	801b7d4 <rcl_service_is_valid>
 801d3a6:	b1f0      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3a8:	6820      	ldr	r0, [r4, #0]
 801d3aa:	3004      	adds	r0, #4
 801d3ac:	f7fe fa12 	bl	801b7d4 <rcl_service_is_valid>
 801d3b0:	b1c8      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3b2:	6820      	ldr	r0, [r4, #0]
 801d3b4:	3008      	adds	r0, #8
 801d3b6:	f7fe fa0d 	bl	801b7d4 <rcl_service_is_valid>
 801d3ba:	b1a0      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3bc:	6820      	ldr	r0, [r4, #0]
 801d3be:	300c      	adds	r0, #12
 801d3c0:	f7f7 f98c 	bl	80146dc <rcl_publisher_is_valid>
 801d3c4:	b178      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3c6:	6820      	ldr	r0, [r4, #0]
 801d3c8:	3010      	adds	r0, #16
 801d3ca:	f7f7 f987 	bl	80146dc <rcl_publisher_is_valid>
 801d3ce:	b150      	cbz	r0, 801d3e6 <rcl_action_send_goal_response+0x52>
 801d3d0:	b18d      	cbz	r5, 801d3f6 <rcl_action_send_goal_response+0x62>
 801d3d2:	b186      	cbz	r6, 801d3f6 <rcl_action_send_goal_response+0x62>
 801d3d4:	462a      	mov	r2, r5
 801d3d6:	4631      	mov	r1, r6
 801d3d8:	6820      	ldr	r0, [r4, #0]
 801d3da:	f7fe f9e3 	bl	801b7a4 <rcl_send_response>
 801d3de:	3800      	subs	r0, #0
 801d3e0:	bf18      	it	ne
 801d3e2:	2001      	movne	r0, #1
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}
 801d3e6:	f7f8 f96b 	bl	80156c0 <rcutils_reset_error>
 801d3ea:	f640 0098 	movw	r0, #2200	; 0x898
 801d3ee:	bd70      	pop	{r4, r5, r6, pc}
 801d3f0:	f640 0098 	movw	r0, #2200	; 0x898
 801d3f4:	bd70      	pop	{r4, r5, r6, pc}
 801d3f6:	200b      	movs	r0, #11
 801d3f8:	bd70      	pop	{r4, r5, r6, pc}
 801d3fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d3fe:	4770      	bx	lr

0801d400 <rcl_action_take_result_request>:
 801d400:	2800      	cmp	r0, #0
 801d402:	d03a      	beq.n	801d47a <rcl_action_take_result_request+0x7a>
 801d404:	b570      	push	{r4, r5, r6, lr}
 801d406:	4604      	mov	r4, r0
 801d408:	6800      	ldr	r0, [r0, #0]
 801d40a:	b388      	cbz	r0, 801d470 <rcl_action_take_result_request+0x70>
 801d40c:	460e      	mov	r6, r1
 801d40e:	4615      	mov	r5, r2
 801d410:	f7fe f9e0 	bl	801b7d4 <rcl_service_is_valid>
 801d414:	b338      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d416:	6820      	ldr	r0, [r4, #0]
 801d418:	3004      	adds	r0, #4
 801d41a:	f7fe f9db 	bl	801b7d4 <rcl_service_is_valid>
 801d41e:	b310      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d420:	6820      	ldr	r0, [r4, #0]
 801d422:	3008      	adds	r0, #8
 801d424:	f7fe f9d6 	bl	801b7d4 <rcl_service_is_valid>
 801d428:	b1e8      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d42a:	6820      	ldr	r0, [r4, #0]
 801d42c:	300c      	adds	r0, #12
 801d42e:	f7f7 f955 	bl	80146dc <rcl_publisher_is_valid>
 801d432:	b1c0      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d434:	6820      	ldr	r0, [r4, #0]
 801d436:	3010      	adds	r0, #16
 801d438:	f7f7 f950 	bl	80146dc <rcl_publisher_is_valid>
 801d43c:	b198      	cbz	r0, 801d466 <rcl_action_take_result_request+0x66>
 801d43e:	b1d5      	cbz	r5, 801d476 <rcl_action_take_result_request+0x76>
 801d440:	b1ce      	cbz	r6, 801d476 <rcl_action_take_result_request+0x76>
 801d442:	6820      	ldr	r0, [r4, #0]
 801d444:	462a      	mov	r2, r5
 801d446:	4631      	mov	r1, r6
 801d448:	3008      	adds	r0, #8
 801d44a:	f7fe f96b 	bl	801b724 <rcl_take_request>
 801d44e:	b148      	cbz	r0, 801d464 <rcl_action_take_result_request+0x64>
 801d450:	280a      	cmp	r0, #10
 801d452:	d007      	beq.n	801d464 <rcl_action_take_result_request+0x64>
 801d454:	f240 2259 	movw	r2, #601	; 0x259
 801d458:	f640 0399 	movw	r3, #2201	; 0x899
 801d45c:	4290      	cmp	r0, r2
 801d45e:	bf0c      	ite	eq
 801d460:	4618      	moveq	r0, r3
 801d462:	2001      	movne	r0, #1
 801d464:	bd70      	pop	{r4, r5, r6, pc}
 801d466:	f7f8 f92b 	bl	80156c0 <rcutils_reset_error>
 801d46a:	f640 0098 	movw	r0, #2200	; 0x898
 801d46e:	bd70      	pop	{r4, r5, r6, pc}
 801d470:	f640 0098 	movw	r0, #2200	; 0x898
 801d474:	bd70      	pop	{r4, r5, r6, pc}
 801d476:	200b      	movs	r0, #11
 801d478:	bd70      	pop	{r4, r5, r6, pc}
 801d47a:	f640 0098 	movw	r0, #2200	; 0x898
 801d47e:	4770      	bx	lr

0801d480 <rcl_action_take_cancel_request>:
 801d480:	2800      	cmp	r0, #0
 801d482:	d03a      	beq.n	801d4fa <rcl_action_take_cancel_request+0x7a>
 801d484:	b570      	push	{r4, r5, r6, lr}
 801d486:	4604      	mov	r4, r0
 801d488:	6800      	ldr	r0, [r0, #0]
 801d48a:	b388      	cbz	r0, 801d4f0 <rcl_action_take_cancel_request+0x70>
 801d48c:	460e      	mov	r6, r1
 801d48e:	4615      	mov	r5, r2
 801d490:	f7fe f9a0 	bl	801b7d4 <rcl_service_is_valid>
 801d494:	b338      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d496:	6820      	ldr	r0, [r4, #0]
 801d498:	3004      	adds	r0, #4
 801d49a:	f7fe f99b 	bl	801b7d4 <rcl_service_is_valid>
 801d49e:	b310      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4a0:	6820      	ldr	r0, [r4, #0]
 801d4a2:	3008      	adds	r0, #8
 801d4a4:	f7fe f996 	bl	801b7d4 <rcl_service_is_valid>
 801d4a8:	b1e8      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4aa:	6820      	ldr	r0, [r4, #0]
 801d4ac:	300c      	adds	r0, #12
 801d4ae:	f7f7 f915 	bl	80146dc <rcl_publisher_is_valid>
 801d4b2:	b1c0      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4b4:	6820      	ldr	r0, [r4, #0]
 801d4b6:	3010      	adds	r0, #16
 801d4b8:	f7f7 f910 	bl	80146dc <rcl_publisher_is_valid>
 801d4bc:	b198      	cbz	r0, 801d4e6 <rcl_action_take_cancel_request+0x66>
 801d4be:	b1d5      	cbz	r5, 801d4f6 <rcl_action_take_cancel_request+0x76>
 801d4c0:	b1ce      	cbz	r6, 801d4f6 <rcl_action_take_cancel_request+0x76>
 801d4c2:	6820      	ldr	r0, [r4, #0]
 801d4c4:	462a      	mov	r2, r5
 801d4c6:	4631      	mov	r1, r6
 801d4c8:	3004      	adds	r0, #4
 801d4ca:	f7fe f92b 	bl	801b724 <rcl_take_request>
 801d4ce:	b148      	cbz	r0, 801d4e4 <rcl_action_take_cancel_request+0x64>
 801d4d0:	280a      	cmp	r0, #10
 801d4d2:	d007      	beq.n	801d4e4 <rcl_action_take_cancel_request+0x64>
 801d4d4:	f240 2259 	movw	r2, #601	; 0x259
 801d4d8:	f640 0399 	movw	r3, #2201	; 0x899
 801d4dc:	4290      	cmp	r0, r2
 801d4de:	bf0c      	ite	eq
 801d4e0:	4618      	moveq	r0, r3
 801d4e2:	2001      	movne	r0, #1
 801d4e4:	bd70      	pop	{r4, r5, r6, pc}
 801d4e6:	f7f8 f8eb 	bl	80156c0 <rcutils_reset_error>
 801d4ea:	f640 0098 	movw	r0, #2200	; 0x898
 801d4ee:	bd70      	pop	{r4, r5, r6, pc}
 801d4f0:	f640 0098 	movw	r0, #2200	; 0x898
 801d4f4:	bd70      	pop	{r4, r5, r6, pc}
 801d4f6:	200b      	movs	r0, #11
 801d4f8:	bd70      	pop	{r4, r5, r6, pc}
 801d4fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d4fe:	4770      	bx	lr

0801d500 <rcl_action_send_cancel_response>:
 801d500:	b390      	cbz	r0, 801d568 <rcl_action_send_cancel_response+0x68>
 801d502:	b570      	push	{r4, r5, r6, lr}
 801d504:	4604      	mov	r4, r0
 801d506:	6800      	ldr	r0, [r0, #0]
 801d508:	b348      	cbz	r0, 801d55e <rcl_action_send_cancel_response+0x5e>
 801d50a:	460e      	mov	r6, r1
 801d50c:	4615      	mov	r5, r2
 801d50e:	f7fe f961 	bl	801b7d4 <rcl_service_is_valid>
 801d512:	b1f8      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d514:	6820      	ldr	r0, [r4, #0]
 801d516:	3004      	adds	r0, #4
 801d518:	f7fe f95c 	bl	801b7d4 <rcl_service_is_valid>
 801d51c:	b1d0      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d51e:	6820      	ldr	r0, [r4, #0]
 801d520:	3008      	adds	r0, #8
 801d522:	f7fe f957 	bl	801b7d4 <rcl_service_is_valid>
 801d526:	b1a8      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d528:	6820      	ldr	r0, [r4, #0]
 801d52a:	300c      	adds	r0, #12
 801d52c:	f7f7 f8d6 	bl	80146dc <rcl_publisher_is_valid>
 801d530:	b180      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d532:	6820      	ldr	r0, [r4, #0]
 801d534:	3010      	adds	r0, #16
 801d536:	f7f7 f8d1 	bl	80146dc <rcl_publisher_is_valid>
 801d53a:	b158      	cbz	r0, 801d554 <rcl_action_send_cancel_response+0x54>
 801d53c:	b195      	cbz	r5, 801d564 <rcl_action_send_cancel_response+0x64>
 801d53e:	b18e      	cbz	r6, 801d564 <rcl_action_send_cancel_response+0x64>
 801d540:	6820      	ldr	r0, [r4, #0]
 801d542:	462a      	mov	r2, r5
 801d544:	4631      	mov	r1, r6
 801d546:	3004      	adds	r0, #4
 801d548:	f7fe f92c 	bl	801b7a4 <rcl_send_response>
 801d54c:	3800      	subs	r0, #0
 801d54e:	bf18      	it	ne
 801d550:	2001      	movne	r0, #1
 801d552:	bd70      	pop	{r4, r5, r6, pc}
 801d554:	f7f8 f8b4 	bl	80156c0 <rcutils_reset_error>
 801d558:	f640 0098 	movw	r0, #2200	; 0x898
 801d55c:	bd70      	pop	{r4, r5, r6, pc}
 801d55e:	f640 0098 	movw	r0, #2200	; 0x898
 801d562:	bd70      	pop	{r4, r5, r6, pc}
 801d564:	200b      	movs	r0, #11
 801d566:	bd70      	pop	{r4, r5, r6, pc}
 801d568:	f640 0098 	movw	r0, #2200	; 0x898
 801d56c:	4770      	bx	lr
 801d56e:	bf00      	nop

0801d570 <rcl_action_wait_set_add_action_server>:
 801d570:	2800      	cmp	r0, #0
 801d572:	d04d      	beq.n	801d610 <rcl_action_wait_set_add_action_server+0xa0>
 801d574:	b570      	push	{r4, r5, r6, lr}
 801d576:	460c      	mov	r4, r1
 801d578:	b159      	cbz	r1, 801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d57a:	4605      	mov	r5, r0
 801d57c:	6808      	ldr	r0, [r1, #0]
 801d57e:	b140      	cbz	r0, 801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d580:	4616      	mov	r6, r2
 801d582:	f7fe f927 	bl	801b7d4 <rcl_service_is_valid>
 801d586:	b120      	cbz	r0, 801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d588:	6820      	ldr	r0, [r4, #0]
 801d58a:	3004      	adds	r0, #4
 801d58c:	f7fe f922 	bl	801b7d4 <rcl_service_is_valid>
 801d590:	b910      	cbnz	r0, 801d598 <rcl_action_wait_set_add_action_server+0x28>
 801d592:	f640 0098 	movw	r0, #2200	; 0x898
 801d596:	bd70      	pop	{r4, r5, r6, pc}
 801d598:	6820      	ldr	r0, [r4, #0]
 801d59a:	3008      	adds	r0, #8
 801d59c:	f7fe f91a 	bl	801b7d4 <rcl_service_is_valid>
 801d5a0:	2800      	cmp	r0, #0
 801d5a2:	d0f6      	beq.n	801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d5a4:	6820      	ldr	r0, [r4, #0]
 801d5a6:	300c      	adds	r0, #12
 801d5a8:	f7f7 f8b0 	bl	801470c <rcl_publisher_is_valid_except_context>
 801d5ac:	2800      	cmp	r0, #0
 801d5ae:	d0f0      	beq.n	801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d5b0:	6820      	ldr	r0, [r4, #0]
 801d5b2:	3010      	adds	r0, #16
 801d5b4:	f7f7 f8aa 	bl	801470c <rcl_publisher_is_valid_except_context>
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	d0ea      	beq.n	801d592 <rcl_action_wait_set_add_action_server+0x22>
 801d5bc:	6821      	ldr	r1, [r4, #0]
 801d5be:	4628      	mov	r0, r5
 801d5c0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d5c4:	f7ff fad2 	bl	801cb6c <rcl_wait_set_add_service>
 801d5c8:	2800      	cmp	r0, #0
 801d5ca:	d1e4      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d5cc:	6821      	ldr	r1, [r4, #0]
 801d5ce:	4628      	mov	r0, r5
 801d5d0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d5d4:	3104      	adds	r1, #4
 801d5d6:	f7ff fac9 	bl	801cb6c <rcl_wait_set_add_service>
 801d5da:	2800      	cmp	r0, #0
 801d5dc:	d1db      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d5de:	6821      	ldr	r1, [r4, #0]
 801d5e0:	4628      	mov	r0, r5
 801d5e2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d5e6:	3108      	adds	r1, #8
 801d5e8:	f7ff fac0 	bl	801cb6c <rcl_wait_set_add_service>
 801d5ec:	2800      	cmp	r0, #0
 801d5ee:	d1d2      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d5f0:	6821      	ldr	r1, [r4, #0]
 801d5f2:	4628      	mov	r0, r5
 801d5f4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d5f8:	3114      	adds	r1, #20
 801d5fa:	f7ff fa5b 	bl	801cab4 <rcl_wait_set_add_timer>
 801d5fe:	2800      	cmp	r0, #0
 801d600:	d1c9      	bne.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d602:	2e00      	cmp	r6, #0
 801d604:	d0c7      	beq.n	801d596 <rcl_action_wait_set_add_action_server+0x26>
 801d606:	6823      	ldr	r3, [r4, #0]
 801d608:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d60c:	6033      	str	r3, [r6, #0]
 801d60e:	bd70      	pop	{r4, r5, r6, pc}
 801d610:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d614:	4770      	bx	lr
 801d616:	bf00      	nop

0801d618 <rcl_action_server_wait_set_get_entities_ready>:
 801d618:	2800      	cmp	r0, #0
 801d61a:	d067      	beq.n	801d6ec <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d620:	460c      	mov	r4, r1
 801d622:	b161      	cbz	r1, 801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d624:	4605      	mov	r5, r0
 801d626:	6808      	ldr	r0, [r1, #0]
 801d628:	b148      	cbz	r0, 801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d62a:	4616      	mov	r6, r2
 801d62c:	4698      	mov	r8, r3
 801d62e:	f7fe f8d1 	bl	801b7d4 <rcl_service_is_valid>
 801d632:	b120      	cbz	r0, 801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d634:	6820      	ldr	r0, [r4, #0]
 801d636:	3004      	adds	r0, #4
 801d638:	f7fe f8cc 	bl	801b7d4 <rcl_service_is_valid>
 801d63c:	b918      	cbnz	r0, 801d646 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d63e:	f640 0098 	movw	r0, #2200	; 0x898
 801d642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d646:	6820      	ldr	r0, [r4, #0]
 801d648:	3008      	adds	r0, #8
 801d64a:	f7fe f8c3 	bl	801b7d4 <rcl_service_is_valid>
 801d64e:	2800      	cmp	r0, #0
 801d650:	d0f5      	beq.n	801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d652:	6820      	ldr	r0, [r4, #0]
 801d654:	300c      	adds	r0, #12
 801d656:	f7f7 f859 	bl	801470c <rcl_publisher_is_valid_except_context>
 801d65a:	2800      	cmp	r0, #0
 801d65c:	d0ef      	beq.n	801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d65e:	6820      	ldr	r0, [r4, #0]
 801d660:	3010      	adds	r0, #16
 801d662:	f7f7 f853 	bl	801470c <rcl_publisher_is_valid_except_context>
 801d666:	2800      	cmp	r0, #0
 801d668:	d0e9      	beq.n	801d63e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d66e:	2a00      	cmp	r2, #0
 801d670:	bf18      	it	ne
 801d672:	2b00      	cmpne	r3, #0
 801d674:	bf0c      	ite	eq
 801d676:	2101      	moveq	r1, #1
 801d678:	2100      	movne	r1, #0
 801d67a:	f1b8 0f00 	cmp.w	r8, #0
 801d67e:	bf08      	it	eq
 801d680:	f041 0101 	orreq.w	r1, r1, #1
 801d684:	bba9      	cbnz	r1, 801d6f2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d686:	b3a6      	cbz	r6, 801d6f2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d688:	6821      	ldr	r1, [r4, #0]
 801d68a:	2000      	movs	r0, #0
 801d68c:	692c      	ldr	r4, [r5, #16]
 801d68e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d692:	6a2f      	ldr	r7, [r5, #32]
 801d694:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d698:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d69c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d6a0:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d6a4:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d6a8:	1a64      	subs	r4, r4, r1
 801d6aa:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d6ae:	fab4 f484 	clz	r4, r4
 801d6b2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d6b6:	0964      	lsrs	r4, r4, #5
 801d6b8:	7034      	strb	r4, [r6, #0]
 801d6ba:	1d0c      	adds	r4, r1, #4
 801d6bc:	1b2c      	subs	r4, r5, r4
 801d6be:	fab4 f484 	clz	r4, r4
 801d6c2:	0964      	lsrs	r4, r4, #5
 801d6c4:	f888 4000 	strb.w	r4, [r8]
 801d6c8:	f101 0408 	add.w	r4, r1, #8
 801d6cc:	1b1b      	subs	r3, r3, r4
 801d6ce:	9c06      	ldr	r4, [sp, #24]
 801d6d0:	fab3 f383 	clz	r3, r3
 801d6d4:	095b      	lsrs	r3, r3, #5
 801d6d6:	7023      	strb	r3, [r4, #0]
 801d6d8:	f101 0314 	add.w	r3, r1, #20
 801d6dc:	1ad3      	subs	r3, r2, r3
 801d6de:	9a07      	ldr	r2, [sp, #28]
 801d6e0:	fab3 f383 	clz	r3, r3
 801d6e4:	095b      	lsrs	r3, r3, #5
 801d6e6:	7013      	strb	r3, [r2, #0]
 801d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d6f0:	4770      	bx	lr
 801d6f2:	200b      	movs	r0, #11
 801d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d6f8 <_execute_event_handler>:
 801d6f8:	2002      	movs	r0, #2
 801d6fa:	4770      	bx	lr

0801d6fc <_cancel_goal_event_handler>:
 801d6fc:	2003      	movs	r0, #3
 801d6fe:	4770      	bx	lr

0801d700 <_succeed_event_handler>:
 801d700:	2004      	movs	r0, #4
 801d702:	4770      	bx	lr

0801d704 <_abort_event_handler>:
 801d704:	2006      	movs	r0, #6
 801d706:	4770      	bx	lr

0801d708 <_canceled_event_handler>:
 801d708:	2005      	movs	r0, #5
 801d70a:	4770      	bx	lr

0801d70c <rcl_action_transition_goal_state>:
 801d70c:	b2c2      	uxtb	r2, r0
 801d70e:	2a06      	cmp	r2, #6
 801d710:	d810      	bhi.n	801d734 <rcl_action_transition_goal_state+0x28>
 801d712:	2904      	cmp	r1, #4
 801d714:	d80e      	bhi.n	801d734 <rcl_action_transition_goal_state+0x28>
 801d716:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d71a:	b410      	push	{r4}
 801d71c:	1853      	adds	r3, r2, r1
 801d71e:	4c06      	ldr	r4, [pc, #24]	; (801d738 <rcl_action_transition_goal_state+0x2c>)
 801d720:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d724:	b113      	cbz	r3, 801d72c <rcl_action_transition_goal_state+0x20>
 801d726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d72a:	4718      	bx	r3
 801d72c:	2000      	movs	r0, #0
 801d72e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d732:	4770      	bx	lr
 801d734:	2000      	movs	r0, #0
 801d736:	4770      	bx	lr
 801d738:	08022d30 	.word	0x08022d30

0801d73c <rcl_action_get_zero_initialized_cancel_response>:
 801d73c:	b510      	push	{r4, lr}
 801d73e:	4c07      	ldr	r4, [pc, #28]	; (801d75c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d740:	4686      	mov	lr, r0
 801d742:	4684      	mov	ip, r0
 801d744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d74c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d750:	6823      	ldr	r3, [r4, #0]
 801d752:	4670      	mov	r0, lr
 801d754:	f8cc 3000 	str.w	r3, [ip]
 801d758:	bd10      	pop	{r4, pc}
 801d75a:	bf00      	nop
 801d75c:	08022dbc 	.word	0x08022dbc

0801d760 <rclc_action_send_result_request>:
 801d760:	b1d0      	cbz	r0, 801d798 <rclc_action_send_result_request+0x38>
 801d762:	4684      	mov	ip, r0
 801d764:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d768:	b500      	push	{lr}
 801d76a:	b087      	sub	sp, #28
 801d76c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d770:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d774:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d778:	f10d 0e08 	add.w	lr, sp, #8
 801d77c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d780:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d784:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d788:	a902      	add	r1, sp, #8
 801d78a:	3010      	adds	r0, #16
 801d78c:	f7ff fbcc 	bl	801cf28 <rcl_action_send_result_request>
 801d790:	b920      	cbnz	r0, 801d79c <rclc_action_send_result_request+0x3c>
 801d792:	b007      	add	sp, #28
 801d794:	f85d fb04 	ldr.w	pc, [sp], #4
 801d798:	200b      	movs	r0, #11
 801d79a:	4770      	bx	lr
 801d79c:	9001      	str	r0, [sp, #4]
 801d79e:	f7f7 ff8f 	bl	80156c0 <rcutils_reset_error>
 801d7a2:	9801      	ldr	r0, [sp, #4]
 801d7a4:	b007      	add	sp, #28
 801d7a6:	f85d fb04 	ldr.w	pc, [sp], #4
 801d7aa:	bf00      	nop

0801d7ac <rclc_action_take_goal_handle>:
 801d7ac:	b160      	cbz	r0, 801d7c8 <rclc_action_take_goal_handle+0x1c>
 801d7ae:	6883      	ldr	r3, [r0, #8]
 801d7b0:	b143      	cbz	r3, 801d7c4 <rclc_action_take_goal_handle+0x18>
 801d7b2:	6819      	ldr	r1, [r3, #0]
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	6081      	str	r1, [r0, #8]
 801d7b8:	721a      	strb	r2, [r3, #8]
 801d7ba:	68c1      	ldr	r1, [r0, #12]
 801d7bc:	621a      	str	r2, [r3, #32]
 801d7be:	849a      	strh	r2, [r3, #36]	; 0x24
 801d7c0:	6019      	str	r1, [r3, #0]
 801d7c2:	60c3      	str	r3, [r0, #12]
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	4770      	bx	lr
 801d7c8:	4603      	mov	r3, r0
 801d7ca:	e7fb      	b.n	801d7c4 <rclc_action_take_goal_handle+0x18>

0801d7cc <rclc_action_remove_used_goal_handle>:
 801d7cc:	b180      	cbz	r0, 801d7f0 <rclc_action_remove_used_goal_handle+0x24>
 801d7ce:	b179      	cbz	r1, 801d7f0 <rclc_action_remove_used_goal_handle+0x24>
 801d7d0:	68c3      	ldr	r3, [r0, #12]
 801d7d2:	4299      	cmp	r1, r3
 801d7d4:	d00d      	beq.n	801d7f2 <rclc_action_remove_used_goal_handle+0x26>
 801d7d6:	b12b      	cbz	r3, 801d7e4 <rclc_action_remove_used_goal_handle+0x18>
 801d7d8:	681a      	ldr	r2, [r3, #0]
 801d7da:	4291      	cmp	r1, r2
 801d7dc:	d003      	beq.n	801d7e6 <rclc_action_remove_used_goal_handle+0x1a>
 801d7de:	4613      	mov	r3, r2
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d1f9      	bne.n	801d7d8 <rclc_action_remove_used_goal_handle+0xc>
 801d7e4:	4770      	bx	lr
 801d7e6:	680a      	ldr	r2, [r1, #0]
 801d7e8:	601a      	str	r2, [r3, #0]
 801d7ea:	6883      	ldr	r3, [r0, #8]
 801d7ec:	600b      	str	r3, [r1, #0]
 801d7ee:	6081      	str	r1, [r0, #8]
 801d7f0:	4770      	bx	lr
 801d7f2:	680b      	ldr	r3, [r1, #0]
 801d7f4:	60c3      	str	r3, [r0, #12]
 801d7f6:	e7f8      	b.n	801d7ea <rclc_action_remove_used_goal_handle+0x1e>

0801d7f8 <rclc_action_find_goal_handle_by_uuid>:
 801d7f8:	b538      	push	{r3, r4, r5, lr}
 801d7fa:	b181      	cbz	r1, 801d81e <rclc_action_find_goal_handle_by_uuid+0x26>
 801d7fc:	b178      	cbz	r0, 801d81e <rclc_action_find_goal_handle_by_uuid+0x26>
 801d7fe:	68c4      	ldr	r4, [r0, #12]
 801d800:	460d      	mov	r5, r1
 801d802:	b914      	cbnz	r4, 801d80a <rclc_action_find_goal_handle_by_uuid+0x12>
 801d804:	e009      	b.n	801d81a <rclc_action_find_goal_handle_by_uuid+0x22>
 801d806:	6824      	ldr	r4, [r4, #0]
 801d808:	b13c      	cbz	r4, 801d81a <rclc_action_find_goal_handle_by_uuid+0x22>
 801d80a:	f104 0009 	add.w	r0, r4, #9
 801d80e:	2210      	movs	r2, #16
 801d810:	4629      	mov	r1, r5
 801d812:	f003 fbb1 	bl	8020f78 <memcmp>
 801d816:	2800      	cmp	r0, #0
 801d818:	d1f5      	bne.n	801d806 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d81a:	4620      	mov	r0, r4
 801d81c:	bd38      	pop	{r3, r4, r5, pc}
 801d81e:	2400      	movs	r4, #0
 801d820:	4620      	mov	r0, r4
 801d822:	bd38      	pop	{r3, r4, r5, pc}

0801d824 <rclc_action_find_first_handle_by_status>:
 801d824:	b140      	cbz	r0, 801d838 <rclc_action_find_first_handle_by_status+0x14>
 801d826:	68c0      	ldr	r0, [r0, #12]
 801d828:	b910      	cbnz	r0, 801d830 <rclc_action_find_first_handle_by_status+0xc>
 801d82a:	e005      	b.n	801d838 <rclc_action_find_first_handle_by_status+0x14>
 801d82c:	6800      	ldr	r0, [r0, #0]
 801d82e:	b118      	cbz	r0, 801d838 <rclc_action_find_first_handle_by_status+0x14>
 801d830:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d834:	428b      	cmp	r3, r1
 801d836:	d1f9      	bne.n	801d82c <rclc_action_find_first_handle_by_status+0x8>
 801d838:	4770      	bx	lr
 801d83a:	bf00      	nop

0801d83c <rclc_action_find_first_terminated_handle>:
 801d83c:	b140      	cbz	r0, 801d850 <rclc_action_find_first_terminated_handle+0x14>
 801d83e:	68c0      	ldr	r0, [r0, #12]
 801d840:	b910      	cbnz	r0, 801d848 <rclc_action_find_first_terminated_handle+0xc>
 801d842:	e005      	b.n	801d850 <rclc_action_find_first_terminated_handle+0x14>
 801d844:	6800      	ldr	r0, [r0, #0]
 801d846:	b118      	cbz	r0, 801d850 <rclc_action_find_first_terminated_handle+0x14>
 801d848:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d84c:	2b03      	cmp	r3, #3
 801d84e:	ddf9      	ble.n	801d844 <rclc_action_find_first_terminated_handle+0x8>
 801d850:	4770      	bx	lr
 801d852:	bf00      	nop

0801d854 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d854:	b170      	cbz	r0, 801d874 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d856:	68c0      	ldr	r0, [r0, #12]
 801d858:	b160      	cbz	r0, 801d874 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d85a:	b410      	push	{r4}
 801d85c:	e001      	b.n	801d862 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d85e:	6800      	ldr	r0, [r0, #0]
 801d860:	b128      	cbz	r0, 801d86e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d862:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d866:	4299      	cmp	r1, r3
 801d868:	bf08      	it	eq
 801d86a:	4294      	cmpeq	r4, r2
 801d86c:	d1f7      	bne.n	801d85e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d872:	4770      	bx	lr
 801d874:	4770      	bx	lr
 801d876:	bf00      	nop

0801d878 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d878:	b170      	cbz	r0, 801d898 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d87a:	68c0      	ldr	r0, [r0, #12]
 801d87c:	b160      	cbz	r0, 801d898 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d87e:	b410      	push	{r4}
 801d880:	e001      	b.n	801d886 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d882:	6800      	ldr	r0, [r0, #0]
 801d884:	b128      	cbz	r0, 801d892 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d886:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d88a:	4299      	cmp	r1, r3
 801d88c:	bf08      	it	eq
 801d88e:	4294      	cmpeq	r4, r2
 801d890:	d1f7      	bne.n	801d882 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d892:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d896:	4770      	bx	lr
 801d898:	4770      	bx	lr
 801d89a:	bf00      	nop

0801d89c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d89c:	b170      	cbz	r0, 801d8bc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d89e:	68c0      	ldr	r0, [r0, #12]
 801d8a0:	b160      	cbz	r0, 801d8bc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d8a2:	b410      	push	{r4}
 801d8a4:	e001      	b.n	801d8aa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d8a6:	6800      	ldr	r0, [r0, #0]
 801d8a8:	b128      	cbz	r0, 801d8b6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d8aa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d8ae:	4299      	cmp	r1, r3
 801d8b0:	bf08      	it	eq
 801d8b2:	4294      	cmpeq	r4, r2
 801d8b4:	d1f7      	bne.n	801d8a6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8ba:	4770      	bx	lr
 801d8bc:	4770      	bx	lr
 801d8be:	bf00      	nop

0801d8c0 <rclc_action_find_first_handle_with_goal_response>:
 801d8c0:	b140      	cbz	r0, 801d8d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d8c2:	68c0      	ldr	r0, [r0, #12]
 801d8c4:	b910      	cbnz	r0, 801d8cc <rclc_action_find_first_handle_with_goal_response+0xc>
 801d8c6:	e005      	b.n	801d8d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d8c8:	6800      	ldr	r0, [r0, #0]
 801d8ca:	b118      	cbz	r0, 801d8d4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d8cc:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d0f9      	beq.n	801d8c8 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d8d4:	4770      	bx	lr
 801d8d6:	bf00      	nop

0801d8d8 <rclc_action_find_first_handle_with_result_response>:
 801d8d8:	b140      	cbz	r0, 801d8ec <rclc_action_find_first_handle_with_result_response+0x14>
 801d8da:	68c0      	ldr	r0, [r0, #12]
 801d8dc:	b910      	cbnz	r0, 801d8e4 <rclc_action_find_first_handle_with_result_response+0xc>
 801d8de:	e005      	b.n	801d8ec <rclc_action_find_first_handle_with_result_response+0x14>
 801d8e0:	6800      	ldr	r0, [r0, #0]
 801d8e2:	b118      	cbz	r0, 801d8ec <rclc_action_find_first_handle_with_result_response+0x14>
 801d8e4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d0f9      	beq.n	801d8e0 <rclc_action_find_first_handle_with_result_response+0x8>
 801d8ec:	4770      	bx	lr
 801d8ee:	bf00      	nop

0801d8f0 <rclc_action_server_response_goal_request>:
 801d8f0:	b198      	cbz	r0, 801d91a <rclc_action_server_response_goal_request+0x2a>
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	460b      	mov	r3, r1
 801d8f6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d8fa:	b510      	push	{r4, lr}
 801d8fc:	6844      	ldr	r4, [r0, #4]
 801d8fe:	b086      	sub	sp, #24
 801d900:	f104 0010 	add.w	r0, r4, #16
 801d904:	9205      	str	r2, [sp, #20]
 801d906:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d90a:	aa03      	add	r2, sp, #12
 801d90c:	f88d 300c 	strb.w	r3, [sp, #12]
 801d910:	f7ff fd40 	bl	801d394 <rcl_action_send_goal_response>
 801d914:	b918      	cbnz	r0, 801d91e <rclc_action_server_response_goal_request+0x2e>
 801d916:	b006      	add	sp, #24
 801d918:	bd10      	pop	{r4, pc}
 801d91a:	200b      	movs	r0, #11
 801d91c:	4770      	bx	lr
 801d91e:	9001      	str	r0, [sp, #4]
 801d920:	f7f7 fece 	bl	80156c0 <rcutils_reset_error>
 801d924:	9801      	ldr	r0, [sp, #4]
 801d926:	b006      	add	sp, #24
 801d928:	bd10      	pop	{r4, pc}
 801d92a:	bf00      	nop
 801d92c:	0000      	movs	r0, r0
	...

0801d930 <rclc_action_server_goal_cancel_accept>:
 801d930:	b310      	cbz	r0, 801d978 <rclc_action_server_goal_cancel_accept+0x48>
 801d932:	b510      	push	{r4, lr}
 801d934:	b090      	sub	sp, #64	; 0x40
 801d936:	4604      	mov	r4, r0
 801d938:	a806      	add	r0, sp, #24
 801d93a:	f7ff feff 	bl	801d73c <rcl_action_get_zero_initialized_cancel_response>
 801d93e:	2300      	movs	r3, #0
 801d940:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d944:	46ec      	mov	ip, sp
 801d946:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d94a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d94e:	f88d 3018 	strb.w	r3, [sp, #24]
 801d952:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d956:	f8cd d01c 	str.w	sp, [sp, #28]
 801d95a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d95e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d980 <rclc_action_server_goal_cancel_accept+0x50>
 801d962:	6860      	ldr	r0, [r4, #4]
 801d964:	aa06      	add	r2, sp, #24
 801d966:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d96a:	3010      	adds	r0, #16
 801d96c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d970:	f7ff fdc6 	bl	801d500 <rcl_action_send_cancel_response>
 801d974:	b010      	add	sp, #64	; 0x40
 801d976:	bd10      	pop	{r4, pc}
 801d978:	200b      	movs	r0, #11
 801d97a:	4770      	bx	lr
 801d97c:	f3af 8000 	nop.w
 801d980:	00000001 	.word	0x00000001
 801d984:	00000001 	.word	0x00000001

0801d988 <rclc_action_server_goal_cancel_reject>:
 801d988:	b082      	sub	sp, #8
 801d98a:	b530      	push	{r4, r5, lr}
 801d98c:	b08b      	sub	sp, #44	; 0x2c
 801d98e:	ac0e      	add	r4, sp, #56	; 0x38
 801d990:	e884 000c 	stmia.w	r4, {r2, r3}
 801d994:	b188      	cbz	r0, 801d9ba <rclc_action_server_goal_cancel_reject+0x32>
 801d996:	4604      	mov	r4, r0
 801d998:	a801      	add	r0, sp, #4
 801d99a:	460d      	mov	r5, r1
 801d99c:	f7ff fece 	bl	801d73c <rcl_action_get_zero_initialized_cancel_response>
 801d9a0:	aa01      	add	r2, sp, #4
 801d9a2:	a90e      	add	r1, sp, #56	; 0x38
 801d9a4:	f104 0010 	add.w	r0, r4, #16
 801d9a8:	f88d 5004 	strb.w	r5, [sp, #4]
 801d9ac:	f7ff fda8 	bl	801d500 <rcl_action_send_cancel_response>
 801d9b0:	b00b      	add	sp, #44	; 0x2c
 801d9b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9b6:	b002      	add	sp, #8
 801d9b8:	4770      	bx	lr
 801d9ba:	200b      	movs	r0, #11
 801d9bc:	b00b      	add	sp, #44	; 0x2c
 801d9be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9c2:	b002      	add	sp, #8
 801d9c4:	4770      	bx	lr
 801d9c6:	bf00      	nop

0801d9c8 <__atomic_load_8>:
 801d9c8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d9cc:	4a16      	ldr	r2, [pc, #88]	; (801da28 <__atomic_load_8+0x60>)
 801d9ce:	4b17      	ldr	r3, [pc, #92]	; (801da2c <__atomic_load_8+0x64>)
 801d9d0:	f04f 0c01 	mov.w	ip, #1
 801d9d4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d9d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d9dc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d9e0:	fb02 f101 	mul.w	r1, r2, r1
 801d9e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d9e8:	fba3 2301 	umull	r2, r3, r3, r1
 801d9ec:	091b      	lsrs	r3, r3, #4
 801d9ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d9f2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d9f6:	b4d0      	push	{r4, r6, r7}
 801d9f8:	1ac9      	subs	r1, r1, r3
 801d9fa:	4c0d      	ldr	r4, [pc, #52]	; (801da30 <__atomic_load_8+0x68>)
 801d9fc:	1862      	adds	r2, r4, r1
 801d9fe:	e8d2 3f4f 	ldrexb	r3, [r2]
 801da02:	e8c2 cf46 	strexb	r6, ip, [r2]
 801da06:	2e00      	cmp	r6, #0
 801da08:	d1f9      	bne.n	801d9fe <__atomic_load_8+0x36>
 801da0a:	b2db      	uxtb	r3, r3
 801da0c:	f3bf 8f5b 	dmb	ish
 801da10:	2b00      	cmp	r3, #0
 801da12:	d1f4      	bne.n	801d9fe <__atomic_load_8+0x36>
 801da14:	e9d0 6700 	ldrd	r6, r7, [r0]
 801da18:	f3bf 8f5b 	dmb	ish
 801da1c:	5463      	strb	r3, [r4, r1]
 801da1e:	4630      	mov	r0, r6
 801da20:	4639      	mov	r1, r7
 801da22:	bcd0      	pop	{r4, r6, r7}
 801da24:	4770      	bx	lr
 801da26:	bf00      	nop
 801da28:	27d4eb2d 	.word	0x27d4eb2d
 801da2c:	b21642c9 	.word	0xb21642c9
 801da30:	200175e8 	.word	0x200175e8

0801da34 <__atomic_store_8>:
 801da34:	b570      	push	{r4, r5, r6, lr}
 801da36:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801da3a:	4916      	ldr	r1, [pc, #88]	; (801da94 <__atomic_store_8+0x60>)
 801da3c:	4c16      	ldr	r4, [pc, #88]	; (801da98 <__atomic_store_8+0x64>)
 801da3e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801da42:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801da46:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801da4a:	fb01 fe0e 	mul.w	lr, r1, lr
 801da4e:	4913      	ldr	r1, [pc, #76]	; (801da9c <__atomic_store_8+0x68>)
 801da50:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801da54:	fba1 510e 	umull	r5, r1, r1, lr
 801da58:	f04f 0501 	mov.w	r5, #1
 801da5c:	0909      	lsrs	r1, r1, #4
 801da5e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801da62:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801da66:	ebae 0e01 	sub.w	lr, lr, r1
 801da6a:	eb04 0c0e 	add.w	ip, r4, lr
 801da6e:	e8dc 1f4f 	ldrexb	r1, [ip]
 801da72:	e8cc 5f46 	strexb	r6, r5, [ip]
 801da76:	2e00      	cmp	r6, #0
 801da78:	d1f9      	bne.n	801da6e <__atomic_store_8+0x3a>
 801da7a:	b2c9      	uxtb	r1, r1
 801da7c:	f3bf 8f5b 	dmb	ish
 801da80:	2900      	cmp	r1, #0
 801da82:	d1f4      	bne.n	801da6e <__atomic_store_8+0x3a>
 801da84:	e9c0 2300 	strd	r2, r3, [r0]
 801da88:	f3bf 8f5b 	dmb	ish
 801da8c:	f804 100e 	strb.w	r1, [r4, lr]
 801da90:	bd70      	pop	{r4, r5, r6, pc}
 801da92:	bf00      	nop
 801da94:	27d4eb2d 	.word	0x27d4eb2d
 801da98:	200175e8 	.word	0x200175e8
 801da9c:	b21642c9 	.word	0xb21642c9

0801daa0 <__atomic_exchange_8>:
 801daa0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801daa4:	4917      	ldr	r1, [pc, #92]	; (801db04 <__atomic_exchange_8+0x64>)
 801daa6:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801daaa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801daae:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dab2:	fb01 fc0c 	mul.w	ip, r1, ip
 801dab6:	4914      	ldr	r1, [pc, #80]	; (801db08 <__atomic_exchange_8+0x68>)
 801dab8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dabc:	b570      	push	{r4, r5, r6, lr}
 801dabe:	4686      	mov	lr, r0
 801dac0:	fba1 010c 	umull	r0, r1, r1, ip
 801dac4:	4d11      	ldr	r5, [pc, #68]	; (801db0c <__atomic_exchange_8+0x6c>)
 801dac6:	f04f 0001 	mov.w	r0, #1
 801daca:	0909      	lsrs	r1, r1, #4
 801dacc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dad0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dad4:	ebac 0c01 	sub.w	ip, ip, r1
 801dad8:	eb05 010c 	add.w	r1, r5, ip
 801dadc:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dae0:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dae4:	2e00      	cmp	r6, #0
 801dae6:	d1f9      	bne.n	801dadc <__atomic_exchange_8+0x3c>
 801dae8:	b2e4      	uxtb	r4, r4
 801daea:	f3bf 8f5b 	dmb	ish
 801daee:	2c00      	cmp	r4, #0
 801daf0:	d1f4      	bne.n	801dadc <__atomic_exchange_8+0x3c>
 801daf2:	e9de 0100 	ldrd	r0, r1, [lr]
 801daf6:	e9ce 2300 	strd	r2, r3, [lr]
 801dafa:	f3bf 8f5b 	dmb	ish
 801dafe:	f805 400c 	strb.w	r4, [r5, ip]
 801db02:	bd70      	pop	{r4, r5, r6, pc}
 801db04:	27d4eb2d 	.word	0x27d4eb2d
 801db08:	b21642c9 	.word	0xb21642c9
 801db0c:	200175e8 	.word	0x200175e8

0801db10 <rcutils_get_env>:
 801db10:	b168      	cbz	r0, 801db2e <rcutils_get_env+0x1e>
 801db12:	b510      	push	{r4, lr}
 801db14:	460c      	mov	r4, r1
 801db16:	b129      	cbz	r1, 801db24 <rcutils_get_env+0x14>
 801db18:	f002 fcde 	bl	80204d8 <getenv>
 801db1c:	b120      	cbz	r0, 801db28 <rcutils_get_env+0x18>
 801db1e:	6020      	str	r0, [r4, #0]
 801db20:	2000      	movs	r0, #0
 801db22:	bd10      	pop	{r4, pc}
 801db24:	4803      	ldr	r0, [pc, #12]	; (801db34 <rcutils_get_env+0x24>)
 801db26:	bd10      	pop	{r4, pc}
 801db28:	4b03      	ldr	r3, [pc, #12]	; (801db38 <rcutils_get_env+0x28>)
 801db2a:	6023      	str	r3, [r4, #0]
 801db2c:	bd10      	pop	{r4, pc}
 801db2e:	4803      	ldr	r0, [pc, #12]	; (801db3c <rcutils_get_env+0x2c>)
 801db30:	4770      	bx	lr
 801db32:	bf00      	nop
 801db34:	08022dfc 	.word	0x08022dfc
 801db38:	08022f20 	.word	0x08022f20
 801db3c:	08022de0 	.word	0x08022de0

0801db40 <rcutils_is_directory>:
 801db40:	2000      	movs	r0, #0
 801db42:	4770      	bx	lr

0801db44 <rcutils_join_path>:
 801db44:	b082      	sub	sp, #8
 801db46:	2000      	movs	r0, #0
 801db48:	e88d 000c 	stmia.w	sp, {r2, r3}
 801db4c:	b002      	add	sp, #8
 801db4e:	4770      	bx	lr

0801db50 <rcutils_to_native_path>:
 801db50:	b084      	sub	sp, #16
 801db52:	2000      	movs	r0, #0
 801db54:	f10d 0c04 	add.w	ip, sp, #4
 801db58:	b004      	add	sp, #16
 801db5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801db5e:	4770      	bx	lr

0801db60 <rcutils_format_string_limit>:
 801db60:	b40f      	push	{r0, r1, r2, r3}
 801db62:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db64:	b083      	sub	sp, #12
 801db66:	ac08      	add	r4, sp, #32
 801db68:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801db6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801db6e:	b326      	cbz	r6, 801dbba <rcutils_format_string_limit+0x5a>
 801db70:	a808      	add	r0, sp, #32
 801db72:	f7f7 fd81 	bl	8015678 <rcutils_allocator_is_valid>
 801db76:	b300      	cbz	r0, 801dbba <rcutils_format_string_limit+0x5a>
 801db78:	2100      	movs	r1, #0
 801db7a:	ab0f      	add	r3, sp, #60	; 0x3c
 801db7c:	4632      	mov	r2, r6
 801db7e:	4608      	mov	r0, r1
 801db80:	e9cd 3300 	strd	r3, r3, [sp]
 801db84:	f000 f906 	bl	801dd94 <rcutils_vsnprintf>
 801db88:	1c43      	adds	r3, r0, #1
 801db8a:	4605      	mov	r5, r0
 801db8c:	d015      	beq.n	801dbba <rcutils_format_string_limit+0x5a>
 801db8e:	1c47      	adds	r7, r0, #1
 801db90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db92:	429f      	cmp	r7, r3
 801db94:	d901      	bls.n	801db9a <rcutils_format_string_limit+0x3a>
 801db96:	1e5d      	subs	r5, r3, #1
 801db98:	461f      	mov	r7, r3
 801db9a:	9b08      	ldr	r3, [sp, #32]
 801db9c:	4638      	mov	r0, r7
 801db9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dba0:	4798      	blx	r3
 801dba2:	4604      	mov	r4, r0
 801dba4:	b148      	cbz	r0, 801dbba <rcutils_format_string_limit+0x5a>
 801dba6:	4632      	mov	r2, r6
 801dba8:	4639      	mov	r1, r7
 801dbaa:	9b01      	ldr	r3, [sp, #4]
 801dbac:	f000 f8f2 	bl	801dd94 <rcutils_vsnprintf>
 801dbb0:	2800      	cmp	r0, #0
 801dbb2:	db09      	blt.n	801dbc8 <rcutils_format_string_limit+0x68>
 801dbb4:	2300      	movs	r3, #0
 801dbb6:	5563      	strb	r3, [r4, r5]
 801dbb8:	e000      	b.n	801dbbc <rcutils_format_string_limit+0x5c>
 801dbba:	2400      	movs	r4, #0
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	b003      	add	sp, #12
 801dbc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dbc4:	b004      	add	sp, #16
 801dbc6:	4770      	bx	lr
 801dbc8:	4620      	mov	r0, r4
 801dbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dbce:	2400      	movs	r4, #0
 801dbd0:	4798      	blx	r3
 801dbd2:	e7f3      	b.n	801dbbc <rcutils_format_string_limit+0x5c>

0801dbd4 <rcutils_repl_str>:
 801dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbd8:	ed2d 8b02 	vpush	{d8}
 801dbdc:	b087      	sub	sp, #28
 801dbde:	2600      	movs	r6, #0
 801dbe0:	4680      	mov	r8, r0
 801dbe2:	468a      	mov	sl, r1
 801dbe4:	9000      	str	r0, [sp, #0]
 801dbe6:	4608      	mov	r0, r1
 801dbe8:	ee08 2a10 	vmov	s16, r2
 801dbec:	4699      	mov	r9, r3
 801dbee:	2510      	movs	r5, #16
 801dbf0:	f7e2 fb30 	bl	8000254 <strlen>
 801dbf4:	4637      	mov	r7, r6
 801dbf6:	46b3      	mov	fp, r6
 801dbf8:	9001      	str	r0, [sp, #4]
 801dbfa:	e01e      	b.n	801dc3a <rcutils_repl_str+0x66>
 801dbfc:	f10b 0b01 	add.w	fp, fp, #1
 801dc00:	9b01      	ldr	r3, [sp, #4]
 801dc02:	455e      	cmp	r6, fp
 801dc04:	eb04 0803 	add.w	r8, r4, r3
 801dc08:	d211      	bcs.n	801dc2e <rcutils_repl_str+0x5a>
 801dc0a:	442e      	add	r6, r5
 801dc0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801dc10:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801dc14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc18:	00b1      	lsls	r1, r6, #2
 801dc1a:	4798      	blx	r3
 801dc1c:	2800      	cmp	r0, #0
 801dc1e:	f000 8088 	beq.w	801dd32 <rcutils_repl_str+0x15e>
 801dc22:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801dc26:	4607      	mov	r7, r0
 801dc28:	bf28      	it	cs
 801dc2a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801dc2e:	9a00      	ldr	r2, [sp, #0]
 801dc30:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801dc34:	1aa4      	subs	r4, r4, r2
 801dc36:	f843 4c04 	str.w	r4, [r3, #-4]
 801dc3a:	4651      	mov	r1, sl
 801dc3c:	4640      	mov	r0, r8
 801dc3e:	f003 f9ec 	bl	802101a <strstr>
 801dc42:	4604      	mov	r4, r0
 801dc44:	4638      	mov	r0, r7
 801dc46:	2c00      	cmp	r4, #0
 801dc48:	d1d8      	bne.n	801dbfc <rcutils_repl_str+0x28>
 801dc4a:	4640      	mov	r0, r8
 801dc4c:	f7e2 fb02 	bl	8000254 <strlen>
 801dc50:	9b00      	ldr	r3, [sp, #0]
 801dc52:	eba8 0803 	sub.w	r8, r8, r3
 801dc56:	eb08 0400 	add.w	r4, r8, r0
 801dc5a:	9402      	str	r4, [sp, #8]
 801dc5c:	f1bb 0f00 	cmp.w	fp, #0
 801dc60:	d045      	beq.n	801dcee <rcutils_repl_str+0x11a>
 801dc62:	ee18 0a10 	vmov	r0, s16
 801dc66:	f7e2 faf5 	bl	8000254 <strlen>
 801dc6a:	9a01      	ldr	r2, [sp, #4]
 801dc6c:	4606      	mov	r6, r0
 801dc6e:	f8d9 3000 	ldr.w	r3, [r9]
 801dc72:	1a82      	subs	r2, r0, r2
 801dc74:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dc78:	fb0b 4202 	mla	r2, fp, r2, r4
 801dc7c:	1c50      	adds	r0, r2, #1
 801dc7e:	9205      	str	r2, [sp, #20]
 801dc80:	4798      	blx	r3
 801dc82:	4682      	mov	sl, r0
 801dc84:	2800      	cmp	r0, #0
 801dc86:	d054      	beq.n	801dd32 <rcutils_repl_str+0x15e>
 801dc88:	683a      	ldr	r2, [r7, #0]
 801dc8a:	463d      	mov	r5, r7
 801dc8c:	9900      	ldr	r1, [sp, #0]
 801dc8e:	2401      	movs	r4, #1
 801dc90:	f003 fa65 	bl	802115e <memcpy>
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801dc9a:	eb0a 0803 	add.w	r8, sl, r3
 801dc9e:	ee18 7a10 	vmov	r7, s16
 801dca2:	f8dd a000 	ldr.w	sl, [sp]
 801dca6:	f8cd 9000 	str.w	r9, [sp]
 801dcaa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801dcae:	4632      	mov	r2, r6
 801dcb0:	4639      	mov	r1, r7
 801dcb2:	4640      	mov	r0, r8
 801dcb4:	44b0      	add	r8, r6
 801dcb6:	f003 fa52 	bl	802115e <memcpy>
 801dcba:	f855 2b04 	ldr.w	r2, [r5], #4
 801dcbe:	45a3      	cmp	fp, r4
 801dcc0:	444a      	add	r2, r9
 801dcc2:	eb0a 0102 	add.w	r1, sl, r2
 801dcc6:	d02a      	beq.n	801dd1e <rcutils_repl_str+0x14a>
 801dcc8:	6828      	ldr	r0, [r5, #0]
 801dcca:	1a82      	subs	r2, r0, r2
 801dccc:	4640      	mov	r0, r8
 801dcce:	4490      	add	r8, r2
 801dcd0:	f003 fa45 	bl	802115e <memcpy>
 801dcd4:	1c62      	adds	r2, r4, #1
 801dcd6:	45a3      	cmp	fp, r4
 801dcd8:	4614      	mov	r4, r2
 801dcda:	d8e8      	bhi.n	801dcae <rcutils_repl_str+0xda>
 801dcdc:	f8dd 9000 	ldr.w	r9, [sp]
 801dce0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dce4:	2300      	movs	r3, #0
 801dce6:	9a05      	ldr	r2, [sp, #20]
 801dce8:	f80a 3002 	strb.w	r3, [sl, r2]
 801dcec:	e00b      	b.n	801dd06 <rcutils_repl_str+0x132>
 801dcee:	4620      	mov	r0, r4
 801dcf0:	f8d9 3000 	ldr.w	r3, [r9]
 801dcf4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dcf8:	3001      	adds	r0, #1
 801dcfa:	4798      	blx	r3
 801dcfc:	4682      	mov	sl, r0
 801dcfe:	b110      	cbz	r0, 801dd06 <rcutils_repl_str+0x132>
 801dd00:	9900      	ldr	r1, [sp, #0]
 801dd02:	f003 fa24 	bl	802114e <strcpy>
 801dd06:	4638      	mov	r0, r7
 801dd08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801dd0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dd10:	4798      	blx	r3
 801dd12:	4650      	mov	r0, sl
 801dd14:	b007      	add	sp, #28
 801dd16:	ecbd 8b02 	vpop	{d8}
 801dd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd1e:	9b02      	ldr	r3, [sp, #8]
 801dd20:	4640      	mov	r0, r8
 801dd22:	f8dd 9000 	ldr.w	r9, [sp]
 801dd26:	1a9a      	subs	r2, r3, r2
 801dd28:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dd2c:	f003 fa17 	bl	802115e <memcpy>
 801dd30:	e7d8      	b.n	801dce4 <rcutils_repl_str+0x110>
 801dd32:	f04f 0a00 	mov.w	sl, #0
 801dd36:	e7e6      	b.n	801dd06 <rcutils_repl_str+0x132>

0801dd38 <rcutils_snprintf>:
 801dd38:	b40c      	push	{r2, r3}
 801dd3a:	b530      	push	{r4, r5, lr}
 801dd3c:	b083      	sub	sp, #12
 801dd3e:	ab06      	add	r3, sp, #24
 801dd40:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd44:	9301      	str	r3, [sp, #4]
 801dd46:	b1e2      	cbz	r2, 801dd82 <rcutils_snprintf+0x4a>
 801dd48:	fab0 f480 	clz	r4, r0
 801dd4c:	fab1 f581 	clz	r5, r1
 801dd50:	ea50 0c01 	orrs.w	ip, r0, r1
 801dd54:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801dd58:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801dd5c:	d008      	beq.n	801dd70 <rcutils_snprintf+0x38>
 801dd5e:	b984      	cbnz	r4, 801dd82 <rcutils_snprintf+0x4a>
 801dd60:	b97d      	cbnz	r5, 801dd82 <rcutils_snprintf+0x4a>
 801dd62:	f003 f865 	bl	8020e30 <vsniprintf>
 801dd66:	b003      	add	sp, #12
 801dd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dd6c:	b002      	add	sp, #8
 801dd6e:	4770      	bx	lr
 801dd70:	4661      	mov	r1, ip
 801dd72:	4660      	mov	r0, ip
 801dd74:	f003 f85c 	bl	8020e30 <vsniprintf>
 801dd78:	b003      	add	sp, #12
 801dd7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dd7e:	b002      	add	sp, #8
 801dd80:	4770      	bx	lr
 801dd82:	f003 f9b7 	bl	80210f4 <__errno>
 801dd86:	2216      	movs	r2, #22
 801dd88:	4603      	mov	r3, r0
 801dd8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dd8e:	601a      	str	r2, [r3, #0]
 801dd90:	e7e9      	b.n	801dd66 <rcutils_snprintf+0x2e>
 801dd92:	bf00      	nop

0801dd94 <rcutils_vsnprintf>:
 801dd94:	b570      	push	{r4, r5, r6, lr}
 801dd96:	b1b2      	cbz	r2, 801ddc6 <rcutils_vsnprintf+0x32>
 801dd98:	fab0 f480 	clz	r4, r0
 801dd9c:	fab1 f581 	clz	r5, r1
 801dda0:	ea50 0c01 	orrs.w	ip, r0, r1
 801dda4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801dda8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801ddac:	d005      	beq.n	801ddba <rcutils_vsnprintf+0x26>
 801ddae:	b954      	cbnz	r4, 801ddc6 <rcutils_vsnprintf+0x32>
 801ddb0:	b94d      	cbnz	r5, 801ddc6 <rcutils_vsnprintf+0x32>
 801ddb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ddb6:	f003 b83b 	b.w	8020e30 <vsniprintf>
 801ddba:	4661      	mov	r1, ip
 801ddbc:	4660      	mov	r0, ip
 801ddbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ddc2:	f003 b835 	b.w	8020e30 <vsniprintf>
 801ddc6:	f003 f995 	bl	80210f4 <__errno>
 801ddca:	2316      	movs	r3, #22
 801ddcc:	6003      	str	r3, [r0, #0]
 801ddce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ddd2:	bd70      	pop	{r4, r5, r6, pc}

0801ddd4 <rcutils_strdup>:
 801ddd4:	b084      	sub	sp, #16
 801ddd6:	b570      	push	{r4, r5, r6, lr}
 801ddd8:	b082      	sub	sp, #8
 801ddda:	4605      	mov	r5, r0
 801dddc:	ac07      	add	r4, sp, #28
 801ddde:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801dde2:	b1b0      	cbz	r0, 801de12 <rcutils_strdup+0x3e>
 801dde4:	f7e2 fa36 	bl	8000254 <strlen>
 801dde8:	1c42      	adds	r2, r0, #1
 801ddea:	9b07      	ldr	r3, [sp, #28]
 801ddec:	4606      	mov	r6, r0
 801ddee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ddf0:	4610      	mov	r0, r2
 801ddf2:	9201      	str	r2, [sp, #4]
 801ddf4:	4798      	blx	r3
 801ddf6:	4604      	mov	r4, r0
 801ddf8:	b128      	cbz	r0, 801de06 <rcutils_strdup+0x32>
 801ddfa:	9a01      	ldr	r2, [sp, #4]
 801ddfc:	4629      	mov	r1, r5
 801ddfe:	f003 f9ae 	bl	802115e <memcpy>
 801de02:	2300      	movs	r3, #0
 801de04:	55a3      	strb	r3, [r4, r6]
 801de06:	4620      	mov	r0, r4
 801de08:	b002      	add	sp, #8
 801de0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de0e:	b004      	add	sp, #16
 801de10:	4770      	bx	lr
 801de12:	4604      	mov	r4, r0
 801de14:	e7f7      	b.n	801de06 <rcutils_strdup+0x32>
 801de16:	bf00      	nop

0801de18 <rcutils_strndup>:
 801de18:	b082      	sub	sp, #8
 801de1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de1c:	ac06      	add	r4, sp, #24
 801de1e:	4605      	mov	r5, r0
 801de20:	e884 000c 	stmia.w	r4, {r2, r3}
 801de24:	b188      	cbz	r0, 801de4a <rcutils_strndup+0x32>
 801de26:	1c4f      	adds	r7, r1, #1
 801de28:	460e      	mov	r6, r1
 801de2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801de2c:	4638      	mov	r0, r7
 801de2e:	4790      	blx	r2
 801de30:	4604      	mov	r4, r0
 801de32:	b128      	cbz	r0, 801de40 <rcutils_strndup+0x28>
 801de34:	463a      	mov	r2, r7
 801de36:	4629      	mov	r1, r5
 801de38:	f003 f991 	bl	802115e <memcpy>
 801de3c:	2300      	movs	r3, #0
 801de3e:	55a3      	strb	r3, [r4, r6]
 801de40:	4620      	mov	r0, r4
 801de42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801de46:	b002      	add	sp, #8
 801de48:	4770      	bx	lr
 801de4a:	4604      	mov	r4, r0
 801de4c:	e7f8      	b.n	801de40 <rcutils_strndup+0x28>
 801de4e:	bf00      	nop

0801de50 <rcutils_get_zero_initialized_string_map>:
 801de50:	2000      	movs	r0, #0
 801de52:	4b01      	ldr	r3, [pc, #4]	; (801de58 <rcutils_get_zero_initialized_string_map+0x8>)
 801de54:	6018      	str	r0, [r3, #0]
 801de56:	4770      	bx	lr
 801de58:	20017600 	.word	0x20017600

0801de5c <rcutils_string_map_reserve>:
 801de5c:	2800      	cmp	r0, #0
 801de5e:	d05e      	beq.n	801df1e <rcutils_string_map_reserve+0xc2>
 801de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de64:	460c      	mov	r4, r1
 801de66:	6801      	ldr	r1, [r0, #0]
 801de68:	b082      	sub	sp, #8
 801de6a:	4605      	mov	r5, r0
 801de6c:	b129      	cbz	r1, 801de7a <rcutils_string_map_reserve+0x1e>
 801de6e:	68cb      	ldr	r3, [r1, #12]
 801de70:	42a3      	cmp	r3, r4
 801de72:	d906      	bls.n	801de82 <rcutils_string_map_reserve+0x26>
 801de74:	461c      	mov	r4, r3
 801de76:	2900      	cmp	r1, #0
 801de78:	d1f9      	bne.n	801de6e <rcutils_string_map_reserve+0x12>
 801de7a:	201f      	movs	r0, #31
 801de7c:	b002      	add	sp, #8
 801de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de82:	688b      	ldr	r3, [r1, #8]
 801de84:	42a3      	cmp	r3, r4
 801de86:	d046      	beq.n	801df16 <rcutils_string_map_reserve+0xba>
 801de88:	6a0e      	ldr	r6, [r1, #32]
 801de8a:	2c00      	cmp	r4, #0
 801de8c:	d033      	beq.n	801def6 <rcutils_string_map_reserve+0x9a>
 801de8e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801de92:	d242      	bcs.n	801df1a <rcutils_string_map_reserve+0xbe>
 801de94:	00a7      	lsls	r7, r4, #2
 801de96:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801de9a:	6808      	ldr	r0, [r1, #0]
 801de9c:	4632      	mov	r2, r6
 801de9e:	4639      	mov	r1, r7
 801dea0:	47c0      	blx	r8
 801dea2:	2800      	cmp	r0, #0
 801dea4:	d039      	beq.n	801df1a <rcutils_string_map_reserve+0xbe>
 801dea6:	682b      	ldr	r3, [r5, #0]
 801dea8:	4632      	mov	r2, r6
 801deaa:	4639      	mov	r1, r7
 801deac:	6018      	str	r0, [r3, #0]
 801deae:	6858      	ldr	r0, [r3, #4]
 801deb0:	47c0      	blx	r8
 801deb2:	2800      	cmp	r0, #0
 801deb4:	d031      	beq.n	801df1a <rcutils_string_map_reserve+0xbe>
 801deb6:	682d      	ldr	r5, [r5, #0]
 801deb8:	68ab      	ldr	r3, [r5, #8]
 801deba:	6068      	str	r0, [r5, #4]
 801debc:	42a3      	cmp	r3, r4
 801debe:	d225      	bcs.n	801df0c <rcutils_string_map_reserve+0xb0>
 801dec0:	682a      	ldr	r2, [r5, #0]
 801dec2:	eb00 0c07 	add.w	ip, r0, r7
 801dec6:	0099      	lsls	r1, r3, #2
 801dec8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801decc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801ded0:	45e6      	cmp	lr, ip
 801ded2:	d203      	bcs.n	801dedc <rcutils_string_map_reserve+0x80>
 801ded4:	eb02 0c07 	add.w	ip, r2, r7
 801ded8:	4566      	cmp	r6, ip
 801deda:	d322      	bcc.n	801df22 <rcutils_string_map_reserve+0xc6>
 801dedc:	1ae3      	subs	r3, r4, r3
 801dede:	4670      	mov	r0, lr
 801dee0:	2100      	movs	r1, #0
 801dee2:	009a      	lsls	r2, r3, #2
 801dee4:	9201      	str	r2, [sp, #4]
 801dee6:	f003 f871 	bl	8020fcc <memset>
 801deea:	9a01      	ldr	r2, [sp, #4]
 801deec:	2100      	movs	r1, #0
 801deee:	4630      	mov	r0, r6
 801def0:	f003 f86c 	bl	8020fcc <memset>
 801def4:	e00a      	b.n	801df0c <rcutils_string_map_reserve+0xb0>
 801def6:	694f      	ldr	r7, [r1, #20]
 801def8:	6808      	ldr	r0, [r1, #0]
 801defa:	4631      	mov	r1, r6
 801defc:	47b8      	blx	r7
 801defe:	682b      	ldr	r3, [r5, #0]
 801df00:	4631      	mov	r1, r6
 801df02:	6858      	ldr	r0, [r3, #4]
 801df04:	601c      	str	r4, [r3, #0]
 801df06:	47b8      	blx	r7
 801df08:	682d      	ldr	r5, [r5, #0]
 801df0a:	606c      	str	r4, [r5, #4]
 801df0c:	2000      	movs	r0, #0
 801df0e:	60ac      	str	r4, [r5, #8]
 801df10:	b002      	add	sp, #8
 801df12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df16:	2000      	movs	r0, #0
 801df18:	e7b0      	b.n	801de7c <rcutils_string_map_reserve+0x20>
 801df1a:	200a      	movs	r0, #10
 801df1c:	e7ae      	b.n	801de7c <rcutils_string_map_reserve+0x20>
 801df1e:	200b      	movs	r0, #11
 801df20:	4770      	bx	lr
 801df22:	1f0b      	subs	r3, r1, #4
 801df24:	4418      	add	r0, r3
 801df26:	4413      	add	r3, r2
 801df28:	3a04      	subs	r2, #4
 801df2a:	4417      	add	r7, r2
 801df2c:	2200      	movs	r2, #0
 801df2e:	f843 2f04 	str.w	r2, [r3, #4]!
 801df32:	42bb      	cmp	r3, r7
 801df34:	f840 2f04 	str.w	r2, [r0, #4]!
 801df38:	d1f9      	bne.n	801df2e <rcutils_string_map_reserve+0xd2>
 801df3a:	e7e7      	b.n	801df0c <rcutils_string_map_reserve+0xb0>

0801df3c <rcutils_string_map_init>:
 801df3c:	b082      	sub	sp, #8
 801df3e:	b570      	push	{r4, r5, r6, lr}
 801df40:	ac04      	add	r4, sp, #16
 801df42:	e884 000c 	stmia.w	r4, {r2, r3}
 801df46:	b380      	cbz	r0, 801dfaa <rcutils_string_map_init+0x6e>
 801df48:	6806      	ldr	r6, [r0, #0]
 801df4a:	4604      	mov	r4, r0
 801df4c:	b12e      	cbz	r6, 801df5a <rcutils_string_map_init+0x1e>
 801df4e:	251e      	movs	r5, #30
 801df50:	4628      	mov	r0, r5
 801df52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df56:	b002      	add	sp, #8
 801df58:	4770      	bx	lr
 801df5a:	a804      	add	r0, sp, #16
 801df5c:	460d      	mov	r5, r1
 801df5e:	f7f7 fb8b 	bl	8015678 <rcutils_allocator_is_valid>
 801df62:	b310      	cbz	r0, 801dfaa <rcutils_string_map_init+0x6e>
 801df64:	9b04      	ldr	r3, [sp, #16]
 801df66:	2024      	movs	r0, #36	; 0x24
 801df68:	9908      	ldr	r1, [sp, #32]
 801df6a:	4798      	blx	r3
 801df6c:	6020      	str	r0, [r4, #0]
 801df6e:	b310      	cbz	r0, 801dfb6 <rcutils_string_map_init+0x7a>
 801df70:	f10d 0e10 	add.w	lr, sp, #16
 801df74:	f100 0c10 	add.w	ip, r0, #16
 801df78:	e9c0 6600 	strd	r6, r6, [r0]
 801df7c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801df80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801df84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801df88:	f8de 3000 	ldr.w	r3, [lr]
 801df8c:	4629      	mov	r1, r5
 801df8e:	4620      	mov	r0, r4
 801df90:	f8cc 3000 	str.w	r3, [ip]
 801df94:	f7ff ff62 	bl	801de5c <rcutils_string_map_reserve>
 801df98:	4605      	mov	r5, r0
 801df9a:	2800      	cmp	r0, #0
 801df9c:	d0d8      	beq.n	801df50 <rcutils_string_map_init+0x14>
 801df9e:	9b05      	ldr	r3, [sp, #20]
 801dfa0:	9908      	ldr	r1, [sp, #32]
 801dfa2:	6820      	ldr	r0, [r4, #0]
 801dfa4:	4798      	blx	r3
 801dfa6:	6026      	str	r6, [r4, #0]
 801dfa8:	e7d2      	b.n	801df50 <rcutils_string_map_init+0x14>
 801dfaa:	250b      	movs	r5, #11
 801dfac:	4628      	mov	r0, r5
 801dfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfb2:	b002      	add	sp, #8
 801dfb4:	4770      	bx	lr
 801dfb6:	250a      	movs	r5, #10
 801dfb8:	e7ca      	b.n	801df50 <rcutils_string_map_init+0x14>
 801dfba:	bf00      	nop

0801dfbc <rcutils_string_map_fini>:
 801dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfc0:	b082      	sub	sp, #8
 801dfc2:	2800      	cmp	r0, #0
 801dfc4:	d03a      	beq.n	801e03c <rcutils_string_map_fini+0x80>
 801dfc6:	6804      	ldr	r4, [r0, #0]
 801dfc8:	4606      	mov	r6, r0
 801dfca:	2c00      	cmp	r4, #0
 801dfcc:	d032      	beq.n	801e034 <rcutils_string_map_fini+0x78>
 801dfce:	68a3      	ldr	r3, [r4, #8]
 801dfd0:	b32b      	cbz	r3, 801e01e <rcutils_string_map_fini+0x62>
 801dfd2:	2500      	movs	r5, #0
 801dfd4:	6822      	ldr	r2, [r4, #0]
 801dfd6:	462f      	mov	r7, r5
 801dfd8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dfdc:	b1e0      	cbz	r0, 801e018 <rcutils_string_map_fini+0x5c>
 801dfde:	6a21      	ldr	r1, [r4, #32]
 801dfe0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801dfe4:	9101      	str	r1, [sp, #4]
 801dfe6:	47c0      	blx	r8
 801dfe8:	9901      	ldr	r1, [sp, #4]
 801dfea:	e9d4 3200 	ldrd	r3, r2, [r4]
 801dfee:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801dff2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dff6:	47c0      	blx	r8
 801dff8:	68e3      	ldr	r3, [r4, #12]
 801dffa:	6862      	ldr	r2, [r4, #4]
 801dffc:	3b01      	subs	r3, #1
 801dffe:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e002:	3501      	adds	r5, #1
 801e004:	60e3      	str	r3, [r4, #12]
 801e006:	6834      	ldr	r4, [r6, #0]
 801e008:	68a3      	ldr	r3, [r4, #8]
 801e00a:	429d      	cmp	r5, r3
 801e00c:	d207      	bcs.n	801e01e <rcutils_string_map_fini+0x62>
 801e00e:	6822      	ldr	r2, [r4, #0]
 801e010:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e014:	2800      	cmp	r0, #0
 801e016:	d1e2      	bne.n	801dfde <rcutils_string_map_fini+0x22>
 801e018:	3501      	adds	r5, #1
 801e01a:	429d      	cmp	r5, r3
 801e01c:	d3dc      	bcc.n	801dfd8 <rcutils_string_map_fini+0x1c>
 801e01e:	2100      	movs	r1, #0
 801e020:	4630      	mov	r0, r6
 801e022:	f7ff ff1b 	bl	801de5c <rcutils_string_map_reserve>
 801e026:	4604      	mov	r4, r0
 801e028:	b920      	cbnz	r0, 801e034 <rcutils_string_map_fini+0x78>
 801e02a:	6830      	ldr	r0, [r6, #0]
 801e02c:	6943      	ldr	r3, [r0, #20]
 801e02e:	6a01      	ldr	r1, [r0, #32]
 801e030:	4798      	blx	r3
 801e032:	6034      	str	r4, [r6, #0]
 801e034:	4620      	mov	r0, r4
 801e036:	b002      	add	sp, #8
 801e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e03c:	240b      	movs	r4, #11
 801e03e:	4620      	mov	r0, r4
 801e040:	b002      	add	sp, #8
 801e042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e046:	bf00      	nop

0801e048 <rcutils_string_map_getn>:
 801e048:	b378      	cbz	r0, 801e0aa <rcutils_string_map_getn+0x62>
 801e04a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e04e:	f8d0 b000 	ldr.w	fp, [r0]
 801e052:	f1bb 0f00 	cmp.w	fp, #0
 801e056:	d01f      	beq.n	801e098 <rcutils_string_map_getn+0x50>
 801e058:	fab1 f481 	clz	r4, r1
 801e05c:	4688      	mov	r8, r1
 801e05e:	0964      	lsrs	r4, r4, #5
 801e060:	b1d1      	cbz	r1, 801e098 <rcutils_string_map_getn+0x50>
 801e062:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e066:	f8db 6000 	ldr.w	r6, [fp]
 801e06a:	b1af      	cbz	r7, 801e098 <rcutils_string_map_getn+0x50>
 801e06c:	4691      	mov	r9, r2
 801e06e:	3e04      	subs	r6, #4
 801e070:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e074:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e078:	3401      	adds	r4, #1
 801e07a:	4628      	mov	r0, r5
 801e07c:	b155      	cbz	r5, 801e094 <rcutils_string_map_getn+0x4c>
 801e07e:	f7e2 f8e9 	bl	8000254 <strlen>
 801e082:	4602      	mov	r2, r0
 801e084:	4629      	mov	r1, r5
 801e086:	4640      	mov	r0, r8
 801e088:	454a      	cmp	r2, r9
 801e08a:	bf38      	it	cc
 801e08c:	464a      	movcc	r2, r9
 801e08e:	f002 ffb2 	bl	8020ff6 <strncmp>
 801e092:	b120      	cbz	r0, 801e09e <rcutils_string_map_getn+0x56>
 801e094:	42a7      	cmp	r7, r4
 801e096:	d1eb      	bne.n	801e070 <rcutils_string_map_getn+0x28>
 801e098:	2000      	movs	r0, #0
 801e09a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e09e:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e0a2:	f853 000a 	ldr.w	r0, [r3, sl]
 801e0a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0aa:	4770      	bx	lr
 801e0ac:	0000      	movs	r0, r0
	...

0801e0b0 <rmw_get_zero_initialized_context>:
 801e0b0:	b510      	push	{r4, lr}
 801e0b2:	4604      	mov	r4, r0
 801e0b4:	3010      	adds	r0, #16
 801e0b6:	f7f7 fb6b 	bl	8015790 <rmw_get_zero_initialized_init_options>
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	4620      	mov	r0, r4
 801e0be:	60a3      	str	r3, [r4, #8]
 801e0c0:	64a3      	str	r3, [r4, #72]	; 0x48
 801e0c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 801e0c4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801e0d0 <rmw_get_zero_initialized_context+0x20>
 801e0c8:	ed84 7b00 	vstr	d7, [r4]
 801e0cc:	bd10      	pop	{r4, pc}
 801e0ce:	bf00      	nop
	...

0801e0d8 <rmw_subscription_content_filter_options_fini>:
 801e0d8:	b1b0      	cbz	r0, 801e108 <rmw_subscription_content_filter_options_fini+0x30>
 801e0da:	b538      	push	{r3, r4, r5, lr}
 801e0dc:	4604      	mov	r4, r0
 801e0de:	4608      	mov	r0, r1
 801e0e0:	460d      	mov	r5, r1
 801e0e2:	f7f7 fac9 	bl	8015678 <rcutils_allocator_is_valid>
 801e0e6:	b168      	cbz	r0, 801e104 <rmw_subscription_content_filter_options_fini+0x2c>
 801e0e8:	6820      	ldr	r0, [r4, #0]
 801e0ea:	b120      	cbz	r0, 801e0f6 <rmw_subscription_content_filter_options_fini+0x1e>
 801e0ec:	686b      	ldr	r3, [r5, #4]
 801e0ee:	6929      	ldr	r1, [r5, #16]
 801e0f0:	4798      	blx	r3
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	6023      	str	r3, [r4, #0]
 801e0f6:	1d20      	adds	r0, r4, #4
 801e0f8:	f002 f96c 	bl	80203d4 <rcutils_string_array_fini>
 801e0fc:	3800      	subs	r0, #0
 801e0fe:	bf18      	it	ne
 801e100:	2001      	movne	r0, #1
 801e102:	bd38      	pop	{r3, r4, r5, pc}
 801e104:	200b      	movs	r0, #11
 801e106:	bd38      	pop	{r3, r4, r5, pc}
 801e108:	200b      	movs	r0, #11
 801e10a:	4770      	bx	lr

0801e10c <rmw_get_default_subscription_options>:
 801e10c:	2200      	movs	r2, #0
 801e10e:	e9c0 2200 	strd	r2, r2, [r0]
 801e112:	6082      	str	r2, [r0, #8]
 801e114:	4770      	bx	lr
 801e116:	bf00      	nop

0801e118 <rmw_time_equal>:
 801e118:	b4f0      	push	{r4, r5, r6, r7}
 801e11a:	b084      	sub	sp, #16
 801e11c:	ac04      	add	r4, sp, #16
 801e11e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e122:	4603      	mov	r3, r0
 801e124:	4925      	ldr	r1, [pc, #148]	; (801e1bc <rmw_time_equal+0xa4>)
 801e126:	9d01      	ldr	r5, [sp, #4]
 801e128:	4610      	mov	r0, r2
 801e12a:	4299      	cmp	r1, r3
 801e12c:	f04f 0202 	mov.w	r2, #2
 801e130:	9e03      	ldr	r6, [sp, #12]
 801e132:	41aa      	sbcs	r2, r5
 801e134:	d330      	bcc.n	801e198 <rmw_time_equal+0x80>
 801e136:	4c22      	ldr	r4, [pc, #136]	; (801e1c0 <rmw_time_equal+0xa8>)
 801e138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e13c:	fba3 3204 	umull	r3, r2, r3, r4
 801e140:	fb04 2205 	mla	r2, r4, r5, r2
 801e144:	43dd      	mvns	r5, r3
 801e146:	1a8c      	subs	r4, r1, r2
 801e148:	4285      	cmp	r5, r0
 801e14a:	41b4      	sbcs	r4, r6
 801e14c:	d332      	bcc.n	801e1b4 <rmw_time_equal+0x9c>
 801e14e:	eb10 0c03 	adds.w	ip, r0, r3
 801e152:	eb42 0106 	adc.w	r1, r2, r6
 801e156:	4819      	ldr	r0, [pc, #100]	; (801e1bc <rmw_time_equal+0xa4>)
 801e158:	2202      	movs	r2, #2
 801e15a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e15c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e15e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e162:	4298      	cmp	r0, r3
 801e164:	41b2      	sbcs	r2, r6
 801e166:	d31c      	bcc.n	801e1a2 <rmw_time_equal+0x8a>
 801e168:	4c15      	ldr	r4, [pc, #84]	; (801e1c0 <rmw_time_equal+0xa8>)
 801e16a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801e16e:	fba3 3204 	umull	r3, r2, r3, r4
 801e172:	fb04 2206 	mla	r2, r4, r6, r2
 801e176:	43de      	mvns	r6, r3
 801e178:	1a84      	subs	r4, r0, r2
 801e17a:	42ae      	cmp	r6, r5
 801e17c:	41bc      	sbcs	r4, r7
 801e17e:	d315      	bcc.n	801e1ac <rmw_time_equal+0x94>
 801e180:	195b      	adds	r3, r3, r5
 801e182:	eb42 0207 	adc.w	r2, r2, r7
 801e186:	428a      	cmp	r2, r1
 801e188:	bf08      	it	eq
 801e18a:	4563      	cmpeq	r3, ip
 801e18c:	bf0c      	ite	eq
 801e18e:	2001      	moveq	r0, #1
 801e190:	2000      	movne	r0, #0
 801e192:	b004      	add	sp, #16
 801e194:	bcf0      	pop	{r4, r5, r6, r7}
 801e196:	4770      	bx	lr
 801e198:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e19c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e1a0:	e7d9      	b.n	801e156 <rmw_time_equal+0x3e>
 801e1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e1a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801e1aa:	e7ec      	b.n	801e186 <rmw_time_equal+0x6e>
 801e1ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e1b0:	4602      	mov	r2, r0
 801e1b2:	e7e8      	b.n	801e186 <rmw_time_equal+0x6e>
 801e1b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e1b8:	e7cd      	b.n	801e156 <rmw_time_equal+0x3e>
 801e1ba:	bf00      	nop
 801e1bc:	25c17d04 	.word	0x25c17d04
 801e1c0:	3b9aca00 	.word	0x3b9aca00

0801e1c4 <rmw_time_total_nsec>:
 801e1c4:	b470      	push	{r4, r5, r6}
 801e1c6:	b085      	sub	sp, #20
 801e1c8:	ac04      	add	r4, sp, #16
 801e1ca:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e1ce:	4603      	mov	r3, r0
 801e1d0:	4913      	ldr	r1, [pc, #76]	; (801e220 <rmw_time_total_nsec+0x5c>)
 801e1d2:	9d01      	ldr	r5, [sp, #4]
 801e1d4:	4610      	mov	r0, r2
 801e1d6:	4299      	cmp	r1, r3
 801e1d8:	f04f 0202 	mov.w	r2, #2
 801e1dc:	9e03      	ldr	r6, [sp, #12]
 801e1de:	41aa      	sbcs	r2, r5
 801e1e0:	d311      	bcc.n	801e206 <rmw_time_total_nsec+0x42>
 801e1e2:	4c10      	ldr	r4, [pc, #64]	; (801e224 <rmw_time_total_nsec+0x60>)
 801e1e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e1e8:	fba3 3204 	umull	r3, r2, r3, r4
 801e1ec:	fb04 2205 	mla	r2, r4, r5, r2
 801e1f0:	43dd      	mvns	r5, r3
 801e1f2:	1a8c      	subs	r4, r1, r2
 801e1f4:	4285      	cmp	r5, r0
 801e1f6:	41b4      	sbcs	r4, r6
 801e1f8:	d30c      	bcc.n	801e214 <rmw_time_total_nsec+0x50>
 801e1fa:	1818      	adds	r0, r3, r0
 801e1fc:	eb42 0106 	adc.w	r1, r2, r6
 801e200:	b005      	add	sp, #20
 801e202:	bc70      	pop	{r4, r5, r6}
 801e204:	4770      	bx	lr
 801e206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e20a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e20e:	b005      	add	sp, #20
 801e210:	bc70      	pop	{r4, r5, r6}
 801e212:	4770      	bx	lr
 801e214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e218:	b005      	add	sp, #20
 801e21a:	bc70      	pop	{r4, r5, r6}
 801e21c:	4770      	bx	lr
 801e21e:	bf00      	nop
 801e220:	25c17d04 	.word	0x25c17d04
 801e224:	3b9aca00 	.word	0x3b9aca00

0801e228 <rmw_get_zero_initialized_message_info>:
 801e228:	b510      	push	{r4, lr}
 801e22a:	4604      	mov	r4, r0
 801e22c:	2240      	movs	r2, #64	; 0x40
 801e22e:	2100      	movs	r1, #0
 801e230:	f002 fecc 	bl	8020fcc <memset>
 801e234:	4620      	mov	r0, r4
 801e236:	bd10      	pop	{r4, pc}

0801e238 <rmw_validate_full_topic_name>:
 801e238:	2800      	cmp	r0, #0
 801e23a:	d05d      	beq.n	801e2f8 <rmw_validate_full_topic_name+0xc0>
 801e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e240:	460d      	mov	r5, r1
 801e242:	2900      	cmp	r1, #0
 801e244:	d05a      	beq.n	801e2fc <rmw_validate_full_topic_name+0xc4>
 801e246:	4604      	mov	r4, r0
 801e248:	4616      	mov	r6, r2
 801e24a:	f7e2 f803 	bl	8000254 <strlen>
 801e24e:	b150      	cbz	r0, 801e266 <rmw_validate_full_topic_name+0x2e>
 801e250:	7823      	ldrb	r3, [r4, #0]
 801e252:	2b2f      	cmp	r3, #47	; 0x2f
 801e254:	d00e      	beq.n	801e274 <rmw_validate_full_topic_name+0x3c>
 801e256:	2302      	movs	r3, #2
 801e258:	602b      	str	r3, [r5, #0]
 801e25a:	b146      	cbz	r6, 801e26e <rmw_validate_full_topic_name+0x36>
 801e25c:	2300      	movs	r3, #0
 801e25e:	4618      	mov	r0, r3
 801e260:	6033      	str	r3, [r6, #0]
 801e262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e266:	2301      	movs	r3, #1
 801e268:	602b      	str	r3, [r5, #0]
 801e26a:	2e00      	cmp	r6, #0
 801e26c:	d1f6      	bne.n	801e25c <rmw_validate_full_topic_name+0x24>
 801e26e:	2000      	movs	r0, #0
 801e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e274:	1e43      	subs	r3, r0, #1
 801e276:	5ce2      	ldrb	r2, [r4, r3]
 801e278:	2a2f      	cmp	r2, #47	; 0x2f
 801e27a:	d041      	beq.n	801e300 <rmw_validate_full_topic_name+0xc8>
 801e27c:	1e62      	subs	r2, r4, #1
 801e27e:	f1c4 0e01 	rsb	lr, r4, #1
 801e282:	eb02 0800 	add.w	r8, r2, r0
 801e286:	eb0e 0702 	add.w	r7, lr, r2
 801e28a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e28e:	f023 0120 	bic.w	r1, r3, #32
 801e292:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801e296:	3941      	subs	r1, #65	; 0x41
 801e298:	2919      	cmp	r1, #25
 801e29a:	d90f      	bls.n	801e2bc <rmw_validate_full_topic_name+0x84>
 801e29c:	f1bc 0f0a 	cmp.w	ip, #10
 801e2a0:	d90c      	bls.n	801e2bc <rmw_validate_full_topic_name+0x84>
 801e2a2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801e2a6:	fab3 f383 	clz	r3, r3
 801e2aa:	095b      	lsrs	r3, r3, #5
 801e2ac:	b933      	cbnz	r3, 801e2bc <rmw_validate_full_topic_name+0x84>
 801e2ae:	2204      	movs	r2, #4
 801e2b0:	602a      	str	r2, [r5, #0]
 801e2b2:	2e00      	cmp	r6, #0
 801e2b4:	d0db      	beq.n	801e26e <rmw_validate_full_topic_name+0x36>
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	6037      	str	r7, [r6, #0]
 801e2ba:	e7d2      	b.n	801e262 <rmw_validate_full_topic_name+0x2a>
 801e2bc:	4542      	cmp	r2, r8
 801e2be:	d1e2      	bne.n	801e286 <rmw_validate_full_topic_name+0x4e>
 801e2c0:	2301      	movs	r3, #1
 801e2c2:	4f1a      	ldr	r7, [pc, #104]	; (801e32c <rmw_validate_full_topic_name+0xf4>)
 801e2c4:	e004      	b.n	801e2d0 <rmw_validate_full_topic_name+0x98>
 801e2c6:	4298      	cmp	r0, r3
 801e2c8:	f104 0401 	add.w	r4, r4, #1
 801e2cc:	4613      	mov	r3, r2
 801e2ce:	d91c      	bls.n	801e30a <rmw_validate_full_topic_name+0xd2>
 801e2d0:	4298      	cmp	r0, r3
 801e2d2:	f103 0201 	add.w	r2, r3, #1
 801e2d6:	d0f6      	beq.n	801e2c6 <rmw_validate_full_topic_name+0x8e>
 801e2d8:	7821      	ldrb	r1, [r4, #0]
 801e2da:	292f      	cmp	r1, #47	; 0x2f
 801e2dc:	d1f3      	bne.n	801e2c6 <rmw_validate_full_topic_name+0x8e>
 801e2de:	7861      	ldrb	r1, [r4, #1]
 801e2e0:	292f      	cmp	r1, #47	; 0x2f
 801e2e2:	d01e      	beq.n	801e322 <rmw_validate_full_topic_name+0xea>
 801e2e4:	5dc9      	ldrb	r1, [r1, r7]
 801e2e6:	0749      	lsls	r1, r1, #29
 801e2e8:	d5ed      	bpl.n	801e2c6 <rmw_validate_full_topic_name+0x8e>
 801e2ea:	2206      	movs	r2, #6
 801e2ec:	602a      	str	r2, [r5, #0]
 801e2ee:	2e00      	cmp	r6, #0
 801e2f0:	d0bd      	beq.n	801e26e <rmw_validate_full_topic_name+0x36>
 801e2f2:	2000      	movs	r0, #0
 801e2f4:	6033      	str	r3, [r6, #0]
 801e2f6:	e7b4      	b.n	801e262 <rmw_validate_full_topic_name+0x2a>
 801e2f8:	200b      	movs	r0, #11
 801e2fa:	4770      	bx	lr
 801e2fc:	200b      	movs	r0, #11
 801e2fe:	e7b0      	b.n	801e262 <rmw_validate_full_topic_name+0x2a>
 801e300:	2203      	movs	r2, #3
 801e302:	602a      	str	r2, [r5, #0]
 801e304:	2e00      	cmp	r6, #0
 801e306:	d1f4      	bne.n	801e2f2 <rmw_validate_full_topic_name+0xba>
 801e308:	e7b1      	b.n	801e26e <rmw_validate_full_topic_name+0x36>
 801e30a:	28f7      	cmp	r0, #247	; 0xf7
 801e30c:	d803      	bhi.n	801e316 <rmw_validate_full_topic_name+0xde>
 801e30e:	2300      	movs	r3, #0
 801e310:	4618      	mov	r0, r3
 801e312:	602b      	str	r3, [r5, #0]
 801e314:	e7a5      	b.n	801e262 <rmw_validate_full_topic_name+0x2a>
 801e316:	2307      	movs	r3, #7
 801e318:	602b      	str	r3, [r5, #0]
 801e31a:	2e00      	cmp	r6, #0
 801e31c:	d0a7      	beq.n	801e26e <rmw_validate_full_topic_name+0x36>
 801e31e:	23f6      	movs	r3, #246	; 0xf6
 801e320:	e7e7      	b.n	801e2f2 <rmw_validate_full_topic_name+0xba>
 801e322:	2205      	movs	r2, #5
 801e324:	602a      	str	r2, [r5, #0]
 801e326:	2e00      	cmp	r6, #0
 801e328:	d1e3      	bne.n	801e2f2 <rmw_validate_full_topic_name+0xba>
 801e32a:	e7a0      	b.n	801e26e <rmw_validate_full_topic_name+0x36>
 801e32c:	080231f8 	.word	0x080231f8

0801e330 <rmw_validate_namespace_with_size>:
 801e330:	2800      	cmp	r0, #0
 801e332:	d043      	beq.n	801e3bc <rmw_validate_namespace_with_size+0x8c>
 801e334:	b570      	push	{r4, r5, r6, lr}
 801e336:	4614      	mov	r4, r2
 801e338:	b0c2      	sub	sp, #264	; 0x108
 801e33a:	b32a      	cbz	r2, 801e388 <rmw_validate_namespace_with_size+0x58>
 801e33c:	2901      	cmp	r1, #1
 801e33e:	460d      	mov	r5, r1
 801e340:	461e      	mov	r6, r3
 801e342:	d102      	bne.n	801e34a <rmw_validate_namespace_with_size+0x1a>
 801e344:	7803      	ldrb	r3, [r0, #0]
 801e346:	2b2f      	cmp	r3, #47	; 0x2f
 801e348:	d012      	beq.n	801e370 <rmw_validate_namespace_with_size+0x40>
 801e34a:	aa01      	add	r2, sp, #4
 801e34c:	4669      	mov	r1, sp
 801e34e:	f7ff ff73 	bl	801e238 <rmw_validate_full_topic_name>
 801e352:	b980      	cbnz	r0, 801e376 <rmw_validate_namespace_with_size+0x46>
 801e354:	9a00      	ldr	r2, [sp, #0]
 801e356:	b14a      	cbz	r2, 801e36c <rmw_validate_namespace_with_size+0x3c>
 801e358:	2a07      	cmp	r2, #7
 801e35a:	d007      	beq.n	801e36c <rmw_validate_namespace_with_size+0x3c>
 801e35c:	1e53      	subs	r3, r2, #1
 801e35e:	2b05      	cmp	r3, #5
 801e360:	d82e      	bhi.n	801e3c0 <rmw_validate_namespace_with_size+0x90>
 801e362:	e8df f003 	tbb	[pc, r3]
 801e366:	1f1c      	.short	0x1f1c
 801e368:	14282522 	.word	0x14282522
 801e36c:	2df5      	cmp	r5, #245	; 0xf5
 801e36e:	d804      	bhi.n	801e37a <rmw_validate_namespace_with_size+0x4a>
 801e370:	2300      	movs	r3, #0
 801e372:	4618      	mov	r0, r3
 801e374:	6023      	str	r3, [r4, #0]
 801e376:	b042      	add	sp, #264	; 0x108
 801e378:	bd70      	pop	{r4, r5, r6, pc}
 801e37a:	2307      	movs	r3, #7
 801e37c:	6023      	str	r3, [r4, #0]
 801e37e:	2e00      	cmp	r6, #0
 801e380:	d0f9      	beq.n	801e376 <rmw_validate_namespace_with_size+0x46>
 801e382:	23f4      	movs	r3, #244	; 0xf4
 801e384:	6033      	str	r3, [r6, #0]
 801e386:	e7f6      	b.n	801e376 <rmw_validate_namespace_with_size+0x46>
 801e388:	200b      	movs	r0, #11
 801e38a:	b042      	add	sp, #264	; 0x108
 801e38c:	bd70      	pop	{r4, r5, r6, pc}
 801e38e:	2306      	movs	r3, #6
 801e390:	6023      	str	r3, [r4, #0]
 801e392:	2e00      	cmp	r6, #0
 801e394:	d0ef      	beq.n	801e376 <rmw_validate_namespace_with_size+0x46>
 801e396:	9b01      	ldr	r3, [sp, #4]
 801e398:	6033      	str	r3, [r6, #0]
 801e39a:	b042      	add	sp, #264	; 0x108
 801e39c:	bd70      	pop	{r4, r5, r6, pc}
 801e39e:	2301      	movs	r3, #1
 801e3a0:	6023      	str	r3, [r4, #0]
 801e3a2:	e7f6      	b.n	801e392 <rmw_validate_namespace_with_size+0x62>
 801e3a4:	2302      	movs	r3, #2
 801e3a6:	6023      	str	r3, [r4, #0]
 801e3a8:	e7f3      	b.n	801e392 <rmw_validate_namespace_with_size+0x62>
 801e3aa:	2303      	movs	r3, #3
 801e3ac:	6023      	str	r3, [r4, #0]
 801e3ae:	e7f0      	b.n	801e392 <rmw_validate_namespace_with_size+0x62>
 801e3b0:	2304      	movs	r3, #4
 801e3b2:	6023      	str	r3, [r4, #0]
 801e3b4:	e7ed      	b.n	801e392 <rmw_validate_namespace_with_size+0x62>
 801e3b6:	2305      	movs	r3, #5
 801e3b8:	6023      	str	r3, [r4, #0]
 801e3ba:	e7ea      	b.n	801e392 <rmw_validate_namespace_with_size+0x62>
 801e3bc:	200b      	movs	r0, #11
 801e3be:	4770      	bx	lr
 801e3c0:	4613      	mov	r3, r2
 801e3c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e3c6:	4a03      	ldr	r2, [pc, #12]	; (801e3d4 <rmw_validate_namespace_with_size+0xa4>)
 801e3c8:	a802      	add	r0, sp, #8
 801e3ca:	f7ff fcb5 	bl	801dd38 <rcutils_snprintf>
 801e3ce:	2001      	movs	r0, #1
 801e3d0:	e7d1      	b.n	801e376 <rmw_validate_namespace_with_size+0x46>
 801e3d2:	bf00      	nop
 801e3d4:	08022e18 	.word	0x08022e18

0801e3d8 <rmw_validate_namespace>:
 801e3d8:	b168      	cbz	r0, 801e3f6 <rmw_validate_namespace+0x1e>
 801e3da:	b570      	push	{r4, r5, r6, lr}
 801e3dc:	460d      	mov	r5, r1
 801e3de:	4616      	mov	r6, r2
 801e3e0:	4604      	mov	r4, r0
 801e3e2:	f7e1 ff37 	bl	8000254 <strlen>
 801e3e6:	4633      	mov	r3, r6
 801e3e8:	4601      	mov	r1, r0
 801e3ea:	462a      	mov	r2, r5
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e3f2:	f7ff bf9d 	b.w	801e330 <rmw_validate_namespace_with_size>
 801e3f6:	200b      	movs	r0, #11
 801e3f8:	4770      	bx	lr
 801e3fa:	bf00      	nop

0801e3fc <rmw_namespace_validation_result_string>:
 801e3fc:	2807      	cmp	r0, #7
 801e3fe:	d803      	bhi.n	801e408 <rmw_namespace_validation_result_string+0xc>
 801e400:	4b02      	ldr	r3, [pc, #8]	; (801e40c <rmw_namespace_validation_result_string+0x10>)
 801e402:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e406:	4770      	bx	lr
 801e408:	4801      	ldr	r0, [pc, #4]	; (801e410 <rmw_namespace_validation_result_string+0x14>)
 801e40a:	4770      	bx	lr
 801e40c:	08023010 	.word	0x08023010
 801e410:	08022e68 	.word	0x08022e68

0801e414 <rmw_validate_node_name>:
 801e414:	2800      	cmp	r0, #0
 801e416:	d042      	beq.n	801e49e <rmw_validate_node_name+0x8a>
 801e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e41c:	460d      	mov	r5, r1
 801e41e:	2900      	cmp	r1, #0
 801e420:	d03f      	beq.n	801e4a2 <rmw_validate_node_name+0x8e>
 801e422:	4604      	mov	r4, r0
 801e424:	4616      	mov	r6, r2
 801e426:	f7e1 ff15 	bl	8000254 <strlen>
 801e42a:	b310      	cbz	r0, 801e472 <rmw_validate_node_name+0x5e>
 801e42c:	1e63      	subs	r3, r4, #1
 801e42e:	f1c4 0101 	rsb	r1, r4, #1
 801e432:	eb03 0800 	add.w	r8, r3, r0
 801e436:	18cf      	adds	r7, r1, r3
 801e438:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e43c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 801e440:	f02e 0c20 	bic.w	ip, lr, #32
 801e444:	2a09      	cmp	r2, #9
 801e446:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801e44a:	d905      	bls.n	801e458 <rmw_validate_node_name+0x44>
 801e44c:	f1bc 0f19 	cmp.w	ip, #25
 801e450:	d902      	bls.n	801e458 <rmw_validate_node_name+0x44>
 801e452:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801e456:	d114      	bne.n	801e482 <rmw_validate_node_name+0x6e>
 801e458:	4598      	cmp	r8, r3
 801e45a:	d1ec      	bne.n	801e436 <rmw_validate_node_name+0x22>
 801e45c:	7822      	ldrb	r2, [r4, #0]
 801e45e:	4b16      	ldr	r3, [pc, #88]	; (801e4b8 <rmw_validate_node_name+0xa4>)
 801e460:	5cd3      	ldrb	r3, [r2, r3]
 801e462:	f013 0304 	ands.w	r3, r3, #4
 801e466:	d113      	bne.n	801e490 <rmw_validate_node_name+0x7c>
 801e468:	28ff      	cmp	r0, #255	; 0xff
 801e46a:	d81c      	bhi.n	801e4a6 <rmw_validate_node_name+0x92>
 801e46c:	4618      	mov	r0, r3
 801e46e:	602b      	str	r3, [r5, #0]
 801e470:	e00c      	b.n	801e48c <rmw_validate_node_name+0x78>
 801e472:	2301      	movs	r3, #1
 801e474:	602b      	str	r3, [r5, #0]
 801e476:	b17e      	cbz	r6, 801e498 <rmw_validate_node_name+0x84>
 801e478:	2300      	movs	r3, #0
 801e47a:	4618      	mov	r0, r3
 801e47c:	6033      	str	r3, [r6, #0]
 801e47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e482:	2302      	movs	r3, #2
 801e484:	602b      	str	r3, [r5, #0]
 801e486:	b13e      	cbz	r6, 801e498 <rmw_validate_node_name+0x84>
 801e488:	2000      	movs	r0, #0
 801e48a:	6037      	str	r7, [r6, #0]
 801e48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e490:	2303      	movs	r3, #3
 801e492:	602b      	str	r3, [r5, #0]
 801e494:	2e00      	cmp	r6, #0
 801e496:	d1ef      	bne.n	801e478 <rmw_validate_node_name+0x64>
 801e498:	2000      	movs	r0, #0
 801e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e49e:	200b      	movs	r0, #11
 801e4a0:	4770      	bx	lr
 801e4a2:	200b      	movs	r0, #11
 801e4a4:	e7f2      	b.n	801e48c <rmw_validate_node_name+0x78>
 801e4a6:	2204      	movs	r2, #4
 801e4a8:	602a      	str	r2, [r5, #0]
 801e4aa:	2e00      	cmp	r6, #0
 801e4ac:	d0f4      	beq.n	801e498 <rmw_validate_node_name+0x84>
 801e4ae:	22fe      	movs	r2, #254	; 0xfe
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	6032      	str	r2, [r6, #0]
 801e4b4:	e7ea      	b.n	801e48c <rmw_validate_node_name+0x78>
 801e4b6:	bf00      	nop
 801e4b8:	080231f8 	.word	0x080231f8

0801e4bc <rmw_node_name_validation_result_string>:
 801e4bc:	2804      	cmp	r0, #4
 801e4be:	d803      	bhi.n	801e4c8 <rmw_node_name_validation_result_string+0xc>
 801e4c0:	4b02      	ldr	r3, [pc, #8]	; (801e4cc <rmw_node_name_validation_result_string+0x10>)
 801e4c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e4c6:	4770      	bx	lr
 801e4c8:	4801      	ldr	r0, [pc, #4]	; (801e4d0 <rmw_node_name_validation_result_string+0x14>)
 801e4ca:	4770      	bx	lr
 801e4cc:	0802311c 	.word	0x0802311c
 801e4d0:	08023030 	.word	0x08023030

0801e4d4 <on_status>:
 801e4d4:	b082      	sub	sp, #8
 801e4d6:	b002      	add	sp, #8
 801e4d8:	4770      	bx	lr
 801e4da:	bf00      	nop

0801e4dc <on_topic>:
 801e4dc:	4a23      	ldr	r2, [pc, #140]	; (801e56c <on_topic+0x90>)
 801e4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4e2:	6812      	ldr	r2, [r2, #0]
 801e4e4:	b094      	sub	sp, #80	; 0x50
 801e4e6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e4e8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801e4ec:	9113      	str	r1, [sp, #76]	; 0x4c
 801e4ee:	9312      	str	r3, [sp, #72]	; 0x48
 801e4f0:	b3c2      	cbz	r2, 801e564 <on_topic+0x88>
 801e4f2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801e4f6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801e4fa:	e001      	b.n	801e500 <on_topic+0x24>
 801e4fc:	6852      	ldr	r2, [r2, #4]
 801e4fe:	b38a      	cbz	r2, 801e564 <on_topic+0x88>
 801e500:	6894      	ldr	r4, [r2, #8]
 801e502:	8aa3      	ldrh	r3, [r4, #20]
 801e504:	428b      	cmp	r3, r1
 801e506:	d1f9      	bne.n	801e4fc <on_topic+0x20>
 801e508:	7da3      	ldrb	r3, [r4, #22]
 801e50a:	4283      	cmp	r3, r0
 801e50c:	d1f6      	bne.n	801e4fc <on_topic+0x20>
 801e50e:	2248      	movs	r2, #72	; 0x48
 801e510:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801e514:	4668      	mov	r0, sp
 801e516:	f002 fe22 	bl	802115e <memcpy>
 801e51a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801e51e:	4620      	mov	r0, r4
 801e520:	cb0c      	ldmia	r3, {r2, r3}
 801e522:	f7f8 fa7d 	bl	8016a20 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e526:	4607      	mov	r7, r0
 801e528:	b1e0      	cbz	r0, 801e564 <on_topic+0x88>
 801e52a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e52e:	462a      	mov	r2, r5
 801e530:	4630      	mov	r0, r6
 801e532:	f108 0110 	add.w	r1, r8, #16
 801e536:	f000 fd9f 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801e53a:	b930      	cbnz	r0, 801e54a <on_topic+0x6e>
 801e53c:	4639      	mov	r1, r7
 801e53e:	480c      	ldr	r0, [pc, #48]	; (801e570 <on_topic+0x94>)
 801e540:	b014      	add	sp, #80	; 0x50
 801e542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e546:	f000 b8bd 	b.w	801e6c4 <put_memory>
 801e54a:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801e54e:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801e552:	f000 fcad 	bl	801eeb0 <rmw_uros_epoch_nanos>
 801e556:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801e55a:	2305      	movs	r3, #5
 801e55c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e560:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801e564:	b014      	add	sp, #80	; 0x50
 801e566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e56a:	bf00      	nop
 801e56c:	2001753c 	.word	0x2001753c
 801e570:	2001752c 	.word	0x2001752c

0801e574 <on_request>:
 801e574:	4824      	ldr	r0, [pc, #144]	; (801e608 <on_request+0x94>)
 801e576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e57a:	6800      	ldr	r0, [r0, #0]
 801e57c:	b094      	sub	sp, #80	; 0x50
 801e57e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e580:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e584:	9113      	str	r1, [sp, #76]	; 0x4c
 801e586:	2800      	cmp	r0, #0
 801e588:	d03b      	beq.n	801e602 <on_request+0x8e>
 801e58a:	461d      	mov	r5, r3
 801e58c:	e001      	b.n	801e592 <on_request+0x1e>
 801e58e:	6840      	ldr	r0, [r0, #4]
 801e590:	b3b8      	cbz	r0, 801e602 <on_request+0x8e>
 801e592:	6884      	ldr	r4, [r0, #8]
 801e594:	8b21      	ldrh	r1, [r4, #24]
 801e596:	4291      	cmp	r1, r2
 801e598:	d1f9      	bne.n	801e58e <on_request+0x1a>
 801e59a:	2248      	movs	r2, #72	; 0x48
 801e59c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e5a0:	4668      	mov	r0, sp
 801e5a2:	f002 fddc 	bl	802115e <memcpy>
 801e5a6:	f104 0320 	add.w	r3, r4, #32
 801e5aa:	4620      	mov	r0, r4
 801e5ac:	cb0c      	ldmia	r3, {r2, r3}
 801e5ae:	f7f8 fa37 	bl	8016a20 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e5b2:	4680      	mov	r8, r0
 801e5b4:	b328      	cbz	r0, 801e602 <on_request+0x8e>
 801e5b6:	4630      	mov	r0, r6
 801e5b8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e5bc:	463a      	mov	r2, r7
 801e5be:	f106 0110 	add.w	r1, r6, #16
 801e5c2:	f000 fd59 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801e5c6:	b930      	cbnz	r0, 801e5d6 <on_request+0x62>
 801e5c8:	4641      	mov	r1, r8
 801e5ca:	4810      	ldr	r0, [pc, #64]	; (801e60c <on_request+0x98>)
 801e5cc:	b014      	add	sp, #80	; 0x50
 801e5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d2:	f000 b877 	b.w	801e6c4 <put_memory>
 801e5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e5d8:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801e5dc:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e5e0:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e5e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e5e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e5ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e5f0:	f000 fc5e 	bl	801eeb0 <rmw_uros_epoch_nanos>
 801e5f4:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e5f8:	2303      	movs	r3, #3
 801e5fa:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e5fe:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e602:	b014      	add	sp, #80	; 0x50
 801e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e608:	2001750c 	.word	0x2001750c
 801e60c:	2001752c 	.word	0x2001752c

0801e610 <on_reply>:
 801e610:	4822      	ldr	r0, [pc, #136]	; (801e69c <on_reply+0x8c>)
 801e612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e616:	6800      	ldr	r0, [r0, #0]
 801e618:	b094      	sub	sp, #80	; 0x50
 801e61a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e61c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e620:	9113      	str	r1, [sp, #76]	; 0x4c
 801e622:	b3b8      	cbz	r0, 801e694 <on_reply+0x84>
 801e624:	461d      	mov	r5, r3
 801e626:	e001      	b.n	801e62c <on_reply+0x1c>
 801e628:	6840      	ldr	r0, [r0, #4]
 801e62a:	b398      	cbz	r0, 801e694 <on_reply+0x84>
 801e62c:	6884      	ldr	r4, [r0, #8]
 801e62e:	8b21      	ldrh	r1, [r4, #24]
 801e630:	4291      	cmp	r1, r2
 801e632:	d1f9      	bne.n	801e628 <on_reply+0x18>
 801e634:	2248      	movs	r2, #72	; 0x48
 801e636:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e63a:	4668      	mov	r0, sp
 801e63c:	f002 fd8f 	bl	802115e <memcpy>
 801e640:	f104 0320 	add.w	r3, r4, #32
 801e644:	4620      	mov	r0, r4
 801e646:	cb0c      	ldmia	r3, {r2, r3}
 801e648:	f7f8 f9ea 	bl	8016a20 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e64c:	4680      	mov	r8, r0
 801e64e:	b308      	cbz	r0, 801e694 <on_reply+0x84>
 801e650:	4630      	mov	r0, r6
 801e652:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e656:	463a      	mov	r2, r7
 801e658:	f106 0110 	add.w	r1, r6, #16
 801e65c:	f000 fd0c 	bl	801f078 <ucdr_deserialize_array_uint8_t>
 801e660:	b930      	cbnz	r0, 801e670 <on_reply+0x60>
 801e662:	4641      	mov	r1, r8
 801e664:	480e      	ldr	r0, [pc, #56]	; (801e6a0 <on_reply+0x90>)
 801e666:	b014      	add	sp, #80	; 0x50
 801e668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e66c:	f000 b82a 	b.w	801e6c4 <put_memory>
 801e670:	2200      	movs	r2, #0
 801e672:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e676:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e67a:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801e67e:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801e682:	f000 fc15 	bl	801eeb0 <rmw_uros_epoch_nanos>
 801e686:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e68a:	2304      	movs	r3, #4
 801e68c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e690:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e694:	b014      	add	sp, #80	; 0x50
 801e696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e69a:	bf00      	nop
 801e69c:	20012c1c 	.word	0x20012c1c
 801e6a0:	2001752c 	.word	0x2001752c

0801e6a4 <get_memory>:
 801e6a4:	4603      	mov	r3, r0
 801e6a6:	6840      	ldr	r0, [r0, #4]
 801e6a8:	b158      	cbz	r0, 801e6c2 <get_memory+0x1e>
 801e6aa:	6842      	ldr	r2, [r0, #4]
 801e6ac:	605a      	str	r2, [r3, #4]
 801e6ae:	b10a      	cbz	r2, 801e6b4 <get_memory+0x10>
 801e6b0:	2100      	movs	r1, #0
 801e6b2:	6011      	str	r1, [r2, #0]
 801e6b4:	681a      	ldr	r2, [r3, #0]
 801e6b6:	6042      	str	r2, [r0, #4]
 801e6b8:	b102      	cbz	r2, 801e6bc <get_memory+0x18>
 801e6ba:	6010      	str	r0, [r2, #0]
 801e6bc:	2200      	movs	r2, #0
 801e6be:	6002      	str	r2, [r0, #0]
 801e6c0:	6018      	str	r0, [r3, #0]
 801e6c2:	4770      	bx	lr

0801e6c4 <put_memory>:
 801e6c4:	680b      	ldr	r3, [r1, #0]
 801e6c6:	b10b      	cbz	r3, 801e6cc <put_memory+0x8>
 801e6c8:	684a      	ldr	r2, [r1, #4]
 801e6ca:	605a      	str	r2, [r3, #4]
 801e6cc:	684a      	ldr	r2, [r1, #4]
 801e6ce:	b102      	cbz	r2, 801e6d2 <put_memory+0xe>
 801e6d0:	6013      	str	r3, [r2, #0]
 801e6d2:	6803      	ldr	r3, [r0, #0]
 801e6d4:	428b      	cmp	r3, r1
 801e6d6:	6843      	ldr	r3, [r0, #4]
 801e6d8:	bf08      	it	eq
 801e6da:	6002      	streq	r2, [r0, #0]
 801e6dc:	604b      	str	r3, [r1, #4]
 801e6de:	b103      	cbz	r3, 801e6e2 <put_memory+0x1e>
 801e6e0:	6019      	str	r1, [r3, #0]
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	600b      	str	r3, [r1, #0]
 801e6e6:	6041      	str	r1, [r0, #4]
 801e6e8:	4770      	bx	lr
 801e6ea:	bf00      	nop

0801e6ec <rmw_destroy_client>:
 801e6ec:	b570      	push	{r4, r5, r6, lr}
 801e6ee:	b128      	cbz	r0, 801e6fc <rmw_destroy_client+0x10>
 801e6f0:	4604      	mov	r4, r0
 801e6f2:	6800      	ldr	r0, [r0, #0]
 801e6f4:	460d      	mov	r5, r1
 801e6f6:	f7f8 fb0f 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 801e6fa:	b910      	cbnz	r0, 801e702 <rmw_destroy_client+0x16>
 801e6fc:	2401      	movs	r4, #1
 801e6fe:	4620      	mov	r0, r4
 801e700:	bd70      	pop	{r4, r5, r6, pc}
 801e702:	6863      	ldr	r3, [r4, #4]
 801e704:	2b00      	cmp	r3, #0
 801e706:	d0f9      	beq.n	801e6fc <rmw_destroy_client+0x10>
 801e708:	2d00      	cmp	r5, #0
 801e70a:	d0f7      	beq.n	801e6fc <rmw_destroy_client+0x10>
 801e70c:	6828      	ldr	r0, [r5, #0]
 801e70e:	f7f8 fb03 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 801e712:	2800      	cmp	r0, #0
 801e714:	d0f2      	beq.n	801e6fc <rmw_destroy_client+0x10>
 801e716:	686e      	ldr	r6, [r5, #4]
 801e718:	2e00      	cmp	r6, #0
 801e71a:	d0ef      	beq.n	801e6fc <rmw_destroy_client+0x10>
 801e71c:	6864      	ldr	r4, [r4, #4]
 801e71e:	6932      	ldr	r2, [r6, #16]
 801e720:	6920      	ldr	r0, [r4, #16]
 801e722:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e726:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e72a:	6819      	ldr	r1, [r3, #0]
 801e72c:	f7f9 f856 	bl	80177dc <uxr_buffer_cancel_data>
 801e730:	4602      	mov	r2, r0
 801e732:	6920      	ldr	r0, [r4, #16]
 801e734:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e738:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e73c:	f7f8 fa72 	bl	8016c24 <run_xrce_session>
 801e740:	6920      	ldr	r0, [r4, #16]
 801e742:	6932      	ldr	r2, [r6, #16]
 801e744:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e748:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e74c:	6819      	ldr	r1, [r3, #0]
 801e74e:	f7f8 fc17 	bl	8016f80 <uxr_buffer_delete_entity>
 801e752:	4602      	mov	r2, r0
 801e754:	6920      	ldr	r0, [r4, #16]
 801e756:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e75a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e75e:	f7f8 fa61 	bl	8016c24 <run_xrce_session>
 801e762:	4603      	mov	r3, r0
 801e764:	4628      	mov	r0, r5
 801e766:	2b00      	cmp	r3, #0
 801e768:	bf14      	ite	ne
 801e76a:	2400      	movne	r4, #0
 801e76c:	2402      	moveq	r4, #2
 801e76e:	f7f8 f935 	bl	80169dc <rmw_uxrce_fini_client_memory>
 801e772:	e7c4      	b.n	801e6fe <rmw_destroy_client+0x12>

0801e774 <rmw_get_implementation_identifier>:
 801e774:	4b01      	ldr	r3, [pc, #4]	; (801e77c <rmw_get_implementation_identifier+0x8>)
 801e776:	6818      	ldr	r0, [r3, #0]
 801e778:	4770      	bx	lr
 801e77a:	bf00      	nop
 801e77c:	08023148 	.word	0x08023148

0801e780 <create_topic>:
 801e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e784:	4605      	mov	r5, r0
 801e786:	b084      	sub	sp, #16
 801e788:	4822      	ldr	r0, [pc, #136]	; (801e814 <create_topic+0x94>)
 801e78a:	460f      	mov	r7, r1
 801e78c:	4616      	mov	r6, r2
 801e78e:	f7ff ff89 	bl	801e6a4 <get_memory>
 801e792:	4604      	mov	r4, r0
 801e794:	2800      	cmp	r0, #0
 801e796:	d039      	beq.n	801e80c <create_topic+0x8c>
 801e798:	692b      	ldr	r3, [r5, #16]
 801e79a:	2102      	movs	r1, #2
 801e79c:	6884      	ldr	r4, [r0, #8]
 801e79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e7a2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e81c <create_topic+0x9c>
 801e7a6:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e7aa:	1c42      	adds	r2, r0, #1
 801e7ac:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e7b0:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e7b4:	f7f8 fea4 	bl	8017500 <uxr_object_id>
 801e7b8:	223c      	movs	r2, #60	; 0x3c
 801e7ba:	6120      	str	r0, [r4, #16]
 801e7bc:	4641      	mov	r1, r8
 801e7be:	4638      	mov	r0, r7
 801e7c0:	f7f8 fa92 	bl	8016ce8 <generate_topic_name>
 801e7c4:	b1f0      	cbz	r0, 801e804 <create_topic+0x84>
 801e7c6:	4f14      	ldr	r7, [pc, #80]	; (801e818 <create_topic+0x98>)
 801e7c8:	4630      	mov	r0, r6
 801e7ca:	2264      	movs	r2, #100	; 0x64
 801e7cc:	4639      	mov	r1, r7
 801e7ce:	f7f8 fa5d 	bl	8016c8c <generate_type_name>
 801e7d2:	b1b8      	cbz	r0, 801e804 <create_topic+0x84>
 801e7d4:	6928      	ldr	r0, [r5, #16]
 801e7d6:	2106      	movs	r1, #6
 801e7d8:	696b      	ldr	r3, [r5, #20]
 801e7da:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e7de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e7e2:	f8cd 8000 	str.w	r8, [sp]
 801e7e6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e7ea:	6811      	ldr	r1, [r2, #0]
 801e7ec:	6922      	ldr	r2, [r4, #16]
 801e7ee:	f7f8 fc45 	bl	801707c <uxr_buffer_create_topic_bin>
 801e7f2:	4602      	mov	r2, r0
 801e7f4:	6928      	ldr	r0, [r5, #16]
 801e7f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e7fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e7fe:	f7f8 fa11 	bl	8016c24 <run_xrce_session>
 801e802:	b918      	cbnz	r0, 801e80c <create_topic+0x8c>
 801e804:	4620      	mov	r0, r4
 801e806:	2400      	movs	r4, #0
 801e808:	f7f8 f8fe 	bl	8016a08 <rmw_uxrce_fini_topic_memory>
 801e80c:	4620      	mov	r0, r4
 801e80e:	b004      	add	sp, #16
 801e810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e814:	2001754c 	.word	0x2001754c
 801e818:	20017640 	.word	0x20017640
 801e81c:	20017604 	.word	0x20017604

0801e820 <destroy_topic>:
 801e820:	b538      	push	{r3, r4, r5, lr}
 801e822:	6985      	ldr	r5, [r0, #24]
 801e824:	b1dd      	cbz	r5, 801e85e <destroy_topic+0x3e>
 801e826:	4604      	mov	r4, r0
 801e828:	6928      	ldr	r0, [r5, #16]
 801e82a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e82e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e832:	6922      	ldr	r2, [r4, #16]
 801e834:	6819      	ldr	r1, [r3, #0]
 801e836:	f7f8 fba3 	bl	8016f80 <uxr_buffer_delete_entity>
 801e83a:	4602      	mov	r2, r0
 801e83c:	6928      	ldr	r0, [r5, #16]
 801e83e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e842:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e846:	f7f8 f9ed 	bl	8016c24 <run_xrce_session>
 801e84a:	4603      	mov	r3, r0
 801e84c:	4620      	mov	r0, r4
 801e84e:	2b00      	cmp	r3, #0
 801e850:	bf14      	ite	ne
 801e852:	2400      	movne	r4, #0
 801e854:	2402      	moveq	r4, #2
 801e856:	f7f8 f8d7 	bl	8016a08 <rmw_uxrce_fini_topic_memory>
 801e85a:	4620      	mov	r0, r4
 801e85c:	bd38      	pop	{r3, r4, r5, pc}
 801e85e:	2401      	movs	r4, #1
 801e860:	4620      	mov	r0, r4
 801e862:	bd38      	pop	{r3, r4, r5, pc}

0801e864 <rmw_send_request>:
 801e864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e868:	4604      	mov	r4, r0
 801e86a:	6800      	ldr	r0, [r0, #0]
 801e86c:	b08b      	sub	sp, #44	; 0x2c
 801e86e:	460e      	mov	r6, r1
 801e870:	4615      	mov	r5, r2
 801e872:	b128      	cbz	r0, 801e880 <rmw_send_request+0x1c>
 801e874:	4b21      	ldr	r3, [pc, #132]	; (801e8fc <rmw_send_request+0x98>)
 801e876:	6819      	ldr	r1, [r3, #0]
 801e878:	f7e1 fce2 	bl	8000240 <strcmp>
 801e87c:	2800      	cmp	r0, #0
 801e87e:	d139      	bne.n	801e8f4 <rmw_send_request+0x90>
 801e880:	6864      	ldr	r4, [r4, #4]
 801e882:	2700      	movs	r7, #0
 801e884:	6963      	ldr	r3, [r4, #20]
 801e886:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801e88a:	689b      	ldr	r3, [r3, #8]
 801e88c:	4798      	blx	r3
 801e88e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801e892:	4630      	mov	r0, r6
 801e894:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e898:	4798      	blx	r3
 801e89a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801e89e:	9000      	str	r0, [sp, #0]
 801e8a0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801e8a4:	6922      	ldr	r2, [r4, #16]
 801e8a6:	ab02      	add	r3, sp, #8
 801e8a8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801e8aa:	f7fb f80d 	bl	80198c8 <uxr_prepare_output_stream>
 801e8ae:	e9c5 0700 	strd	r0, r7, [r5]
 801e8b2:	b198      	cbz	r0, 801e8dc <rmw_send_request+0x78>
 801e8b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801e8b8:	a902      	add	r1, sp, #8
 801e8ba:	4630      	mov	r0, r6
 801e8bc:	4798      	blx	r3
 801e8be:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801e8c2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801e8c6:	2b01      	cmp	r3, #1
 801e8c8:	d00c      	beq.n	801e8e4 <rmw_send_request+0x80>
 801e8ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801e8cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e8d0:	f7f9 fd56 	bl	8018380 <uxr_run_session_until_confirm_delivery>
 801e8d4:	4638      	mov	r0, r7
 801e8d6:	b00b      	add	sp, #44	; 0x2c
 801e8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8dc:	2001      	movs	r0, #1
 801e8de:	b00b      	add	sp, #44	; 0x2c
 801e8e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e8e8:	f7f9 f990 	bl	8017c0c <uxr_flash_output_streams>
 801e8ec:	4638      	mov	r0, r7
 801e8ee:	b00b      	add	sp, #44	; 0x2c
 801e8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8f4:	200c      	movs	r0, #12
 801e8f6:	b00b      	add	sp, #44	; 0x2c
 801e8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8fc:	08023148 	.word	0x08023148

0801e900 <rmw_take_request>:
 801e900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e904:	4605      	mov	r5, r0
 801e906:	6800      	ldr	r0, [r0, #0]
 801e908:	b089      	sub	sp, #36	; 0x24
 801e90a:	460c      	mov	r4, r1
 801e90c:	4690      	mov	r8, r2
 801e90e:	461e      	mov	r6, r3
 801e910:	b128      	cbz	r0, 801e91e <rmw_take_request+0x1e>
 801e912:	4b28      	ldr	r3, [pc, #160]	; (801e9b4 <rmw_take_request+0xb4>)
 801e914:	6819      	ldr	r1, [r3, #0]
 801e916:	f7e1 fc93 	bl	8000240 <strcmp>
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d146      	bne.n	801e9ac <rmw_take_request+0xac>
 801e91e:	b10e      	cbz	r6, 801e924 <rmw_take_request+0x24>
 801e920:	2300      	movs	r3, #0
 801e922:	7033      	strb	r3, [r6, #0]
 801e924:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801e928:	f7f8 f8fe 	bl	8016b28 <rmw_uxrce_clean_expired_static_input_buffer>
 801e92c:	4648      	mov	r0, r9
 801e92e:	f7f8 f8d1 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e932:	4607      	mov	r7, r0
 801e934:	b3b0      	cbz	r0, 801e9a4 <rmw_take_request+0xa4>
 801e936:	6885      	ldr	r5, [r0, #8]
 801e938:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801e93c:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801e940:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801e944:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801e948:	7423      	strb	r3, [r4, #16]
 801e94a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801e94e:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801e952:	f8a4 2011 	strh.w	r2, [r4, #17]
 801e956:	74e3      	strb	r3, [r4, #19]
 801e958:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 801e95c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801e960:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 801e964:	6161      	str	r1, [r4, #20]
 801e966:	61a2      	str	r2, [r4, #24]
 801e968:	61e3      	str	r3, [r4, #28]
 801e96a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801e96e:	689b      	ldr	r3, [r3, #8]
 801e970:	4798      	blx	r3
 801e972:	6844      	ldr	r4, [r0, #4]
 801e974:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801e978:	f105 0110 	add.w	r1, r5, #16
 801e97c:	4668      	mov	r0, sp
 801e97e:	f7f5 fc0f 	bl	80141a0 <ucdr_init_buffer>
 801e982:	4641      	mov	r1, r8
 801e984:	68e3      	ldr	r3, [r4, #12]
 801e986:	4668      	mov	r0, sp
 801e988:	4798      	blx	r3
 801e98a:	4639      	mov	r1, r7
 801e98c:	4604      	mov	r4, r0
 801e98e:	480a      	ldr	r0, [pc, #40]	; (801e9b8 <rmw_take_request+0xb8>)
 801e990:	f7ff fe98 	bl	801e6c4 <put_memory>
 801e994:	b106      	cbz	r6, 801e998 <rmw_take_request+0x98>
 801e996:	7034      	strb	r4, [r6, #0]
 801e998:	f084 0001 	eor.w	r0, r4, #1
 801e99c:	b2c0      	uxtb	r0, r0
 801e99e:	b009      	add	sp, #36	; 0x24
 801e9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9a4:	2001      	movs	r0, #1
 801e9a6:	b009      	add	sp, #36	; 0x24
 801e9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9ac:	200c      	movs	r0, #12
 801e9ae:	b009      	add	sp, #36	; 0x24
 801e9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9b4:	08023148 	.word	0x08023148
 801e9b8:	2001752c 	.word	0x2001752c

0801e9bc <rmw_send_response>:
 801e9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9be:	4605      	mov	r5, r0
 801e9c0:	6800      	ldr	r0, [r0, #0]
 801e9c2:	b091      	sub	sp, #68	; 0x44
 801e9c4:	460c      	mov	r4, r1
 801e9c6:	4616      	mov	r6, r2
 801e9c8:	b128      	cbz	r0, 801e9d6 <rmw_send_response+0x1a>
 801e9ca:	4b29      	ldr	r3, [pc, #164]	; (801ea70 <rmw_send_response+0xb4>)
 801e9cc:	6819      	ldr	r1, [r3, #0]
 801e9ce:	f7e1 fc37 	bl	8000240 <strcmp>
 801e9d2:	2800      	cmp	r0, #0
 801e9d4:	d141      	bne.n	801ea5a <rmw_send_response+0x9e>
 801e9d6:	686d      	ldr	r5, [r5, #4]
 801e9d8:	68a1      	ldr	r1, [r4, #8]
 801e9da:	6860      	ldr	r0, [r4, #4]
 801e9dc:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801e9de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801e9e2:	9307      	str	r3, [sp, #28]
 801e9e4:	4623      	mov	r3, r4
 801e9e6:	9206      	str	r2, [sp, #24]
 801e9e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e9ec:	789b      	ldrb	r3, [r3, #2]
 801e9ee:	f88d 2017 	strb.w	r2, [sp, #23]
 801e9f2:	f88d 3016 	strb.w	r3, [sp, #22]
 801e9f6:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801e9fa:	68e2      	ldr	r2, [r4, #12]
 801e9fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ea00:	ab02      	add	r3, sp, #8
 801ea02:	696c      	ldr	r4, [r5, #20]
 801ea04:	c307      	stmia	r3!, {r0, r1, r2}
 801ea06:	68e3      	ldr	r3, [r4, #12]
 801ea08:	4798      	blx	r3
 801ea0a:	6844      	ldr	r4, [r0, #4]
 801ea0c:	4630      	mov	r0, r6
 801ea0e:	6923      	ldr	r3, [r4, #16]
 801ea10:	4798      	blx	r3
 801ea12:	f100 0318 	add.w	r3, r0, #24
 801ea16:	6938      	ldr	r0, [r7, #16]
 801ea18:	9300      	str	r3, [sp, #0]
 801ea1a:	ab08      	add	r3, sp, #32
 801ea1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ea20:	692a      	ldr	r2, [r5, #16]
 801ea22:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801ea24:	f7fa ff50 	bl	80198c8 <uxr_prepare_output_stream>
 801ea28:	b910      	cbnz	r0, 801ea30 <rmw_send_response+0x74>
 801ea2a:	2001      	movs	r0, #1
 801ea2c:	b011      	add	sp, #68	; 0x44
 801ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea30:	a902      	add	r1, sp, #8
 801ea32:	a808      	add	r0, sp, #32
 801ea34:	f7fc f896 	bl	801ab64 <uxr_serialize_SampleIdentity>
 801ea38:	68a3      	ldr	r3, [r4, #8]
 801ea3a:	a908      	add	r1, sp, #32
 801ea3c:	4630      	mov	r0, r6
 801ea3e:	4798      	blx	r3
 801ea40:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801ea44:	6938      	ldr	r0, [r7, #16]
 801ea46:	2b01      	cmp	r3, #1
 801ea48:	d00a      	beq.n	801ea60 <rmw_send_response+0xa4>
 801ea4a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801ea4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ea50:	f7f9 fc96 	bl	8018380 <uxr_run_session_until_confirm_delivery>
 801ea54:	2000      	movs	r0, #0
 801ea56:	b011      	add	sp, #68	; 0x44
 801ea58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea5a:	200c      	movs	r0, #12
 801ea5c:	b011      	add	sp, #68	; 0x44
 801ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea60:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ea64:	f7f9 f8d2 	bl	8017c0c <uxr_flash_output_streams>
 801ea68:	2000      	movs	r0, #0
 801ea6a:	b011      	add	sp, #68	; 0x44
 801ea6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea6e:	bf00      	nop
 801ea70:	08023148 	.word	0x08023148

0801ea74 <rmw_take_response>:
 801ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea78:	4604      	mov	r4, r0
 801ea7a:	6800      	ldr	r0, [r0, #0]
 801ea7c:	b088      	sub	sp, #32
 801ea7e:	460f      	mov	r7, r1
 801ea80:	4690      	mov	r8, r2
 801ea82:	461d      	mov	r5, r3
 801ea84:	b120      	cbz	r0, 801ea90 <rmw_take_response+0x1c>
 801ea86:	4b1d      	ldr	r3, [pc, #116]	; (801eafc <rmw_take_response+0x88>)
 801ea88:	6819      	ldr	r1, [r3, #0]
 801ea8a:	f7e1 fbd9 	bl	8000240 <strcmp>
 801ea8e:	bb68      	cbnz	r0, 801eaec <rmw_take_response+0x78>
 801ea90:	b10d      	cbz	r5, 801ea96 <rmw_take_response+0x22>
 801ea92:	2300      	movs	r3, #0
 801ea94:	702b      	strb	r3, [r5, #0]
 801ea96:	6864      	ldr	r4, [r4, #4]
 801ea98:	f7f8 f846 	bl	8016b28 <rmw_uxrce_clean_expired_static_input_buffer>
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	f7f8 f819 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801eaa2:	4606      	mov	r6, r0
 801eaa4:	b330      	cbz	r0, 801eaf4 <rmw_take_response+0x80>
 801eaa6:	6963      	ldr	r3, [r4, #20]
 801eaa8:	6884      	ldr	r4, [r0, #8]
 801eaaa:	68db      	ldr	r3, [r3, #12]
 801eaac:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801eab0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801eab4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801eab8:	4798      	blx	r3
 801eaba:	6847      	ldr	r7, [r0, #4]
 801eabc:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801eac0:	f104 0110 	add.w	r1, r4, #16
 801eac4:	4668      	mov	r0, sp
 801eac6:	f7f5 fb6b 	bl	80141a0 <ucdr_init_buffer>
 801eaca:	4641      	mov	r1, r8
 801eacc:	68fb      	ldr	r3, [r7, #12]
 801eace:	4668      	mov	r0, sp
 801ead0:	4798      	blx	r3
 801ead2:	4631      	mov	r1, r6
 801ead4:	4604      	mov	r4, r0
 801ead6:	480a      	ldr	r0, [pc, #40]	; (801eb00 <rmw_take_response+0x8c>)
 801ead8:	f7ff fdf4 	bl	801e6c4 <put_memory>
 801eadc:	b105      	cbz	r5, 801eae0 <rmw_take_response+0x6c>
 801eade:	702c      	strb	r4, [r5, #0]
 801eae0:	f084 0001 	eor.w	r0, r4, #1
 801eae4:	b2c0      	uxtb	r0, r0
 801eae6:	b008      	add	sp, #32
 801eae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaec:	200c      	movs	r0, #12
 801eaee:	b008      	add	sp, #32
 801eaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaf4:	2001      	movs	r0, #1
 801eaf6:	b008      	add	sp, #32
 801eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eafc:	08023148 	.word	0x08023148
 801eb00:	2001752c 	.word	0x2001752c

0801eb04 <rmw_take_with_info>:
 801eb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb06:	4604      	mov	r4, r0
 801eb08:	6800      	ldr	r0, [r0, #0]
 801eb0a:	b089      	sub	sp, #36	; 0x24
 801eb0c:	460f      	mov	r7, r1
 801eb0e:	4615      	mov	r5, r2
 801eb10:	b128      	cbz	r0, 801eb1e <rmw_take_with_info+0x1a>
 801eb12:	4b24      	ldr	r3, [pc, #144]	; (801eba4 <rmw_take_with_info+0xa0>)
 801eb14:	6819      	ldr	r1, [r3, #0]
 801eb16:	f7e1 fb93 	bl	8000240 <strcmp>
 801eb1a:	2800      	cmp	r0, #0
 801eb1c:	d13e      	bne.n	801eb9c <rmw_take_with_info+0x98>
 801eb1e:	b305      	cbz	r5, 801eb62 <rmw_take_with_info+0x5e>
 801eb20:	2300      	movs	r3, #0
 801eb22:	6864      	ldr	r4, [r4, #4]
 801eb24:	702b      	strb	r3, [r5, #0]
 801eb26:	f7f7 ffff 	bl	8016b28 <rmw_uxrce_clean_expired_static_input_buffer>
 801eb2a:	4620      	mov	r0, r4
 801eb2c:	f7f7 ffd2 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801eb30:	4606      	mov	r6, r0
 801eb32:	b1f0      	cbz	r0, 801eb72 <rmw_take_with_info+0x6e>
 801eb34:	6881      	ldr	r1, [r0, #8]
 801eb36:	4668      	mov	r0, sp
 801eb38:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801eb3c:	3110      	adds	r1, #16
 801eb3e:	f7f5 fb2f 	bl	80141a0 <ucdr_init_buffer>
 801eb42:	69a3      	ldr	r3, [r4, #24]
 801eb44:	4639      	mov	r1, r7
 801eb46:	4668      	mov	r0, sp
 801eb48:	68db      	ldr	r3, [r3, #12]
 801eb4a:	4798      	blx	r3
 801eb4c:	4604      	mov	r4, r0
 801eb4e:	4631      	mov	r1, r6
 801eb50:	4815      	ldr	r0, [pc, #84]	; (801eba8 <rmw_take_with_info+0xa4>)
 801eb52:	f7ff fdb7 	bl	801e6c4 <put_memory>
 801eb56:	702c      	strb	r4, [r5, #0]
 801eb58:	f084 0001 	eor.w	r0, r4, #1
 801eb5c:	b2c0      	uxtb	r0, r0
 801eb5e:	b009      	add	sp, #36	; 0x24
 801eb60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb62:	6864      	ldr	r4, [r4, #4]
 801eb64:	f7f7 ffe0 	bl	8016b28 <rmw_uxrce_clean_expired_static_input_buffer>
 801eb68:	4620      	mov	r0, r4
 801eb6a:	f7f7 ffb3 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801eb6e:	4605      	mov	r5, r0
 801eb70:	b910      	cbnz	r0, 801eb78 <rmw_take_with_info+0x74>
 801eb72:	2001      	movs	r0, #1
 801eb74:	b009      	add	sp, #36	; 0x24
 801eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb78:	68a9      	ldr	r1, [r5, #8]
 801eb7a:	4668      	mov	r0, sp
 801eb7c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801eb80:	3110      	adds	r1, #16
 801eb82:	f7f5 fb0d 	bl	80141a0 <ucdr_init_buffer>
 801eb86:	69a3      	ldr	r3, [r4, #24]
 801eb88:	4639      	mov	r1, r7
 801eb8a:	4668      	mov	r0, sp
 801eb8c:	68db      	ldr	r3, [r3, #12]
 801eb8e:	4798      	blx	r3
 801eb90:	4629      	mov	r1, r5
 801eb92:	4604      	mov	r4, r0
 801eb94:	4804      	ldr	r0, [pc, #16]	; (801eba8 <rmw_take_with_info+0xa4>)
 801eb96:	f7ff fd95 	bl	801e6c4 <put_memory>
 801eb9a:	e7dd      	b.n	801eb58 <rmw_take_with_info+0x54>
 801eb9c:	200c      	movs	r0, #12
 801eb9e:	b009      	add	sp, #36	; 0x24
 801eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eba2:	bf00      	nop
 801eba4:	08023148 	.word	0x08023148
 801eba8:	2001752c 	.word	0x2001752c

0801ebac <rmw_wait>:
 801ebac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ebb0:	4698      	mov	r8, r3
 801ebb2:	ea40 0301 	orr.w	r3, r0, r1
 801ebb6:	b089      	sub	sp, #36	; 0x24
 801ebb8:	ea48 0303 	orr.w	r3, r8, r3
 801ebbc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ebbe:	4313      	orrs	r3, r2
 801ebc0:	f000 8106 	beq.w	801edd0 <rmw_wait+0x224>
 801ebc4:	4605      	mov	r5, r0
 801ebc6:	460e      	mov	r6, r1
 801ebc8:	4691      	mov	r9, r2
 801ebca:	b16c      	cbz	r4, 801ebe8 <rmw_wait+0x3c>
 801ebcc:	4ba6      	ldr	r3, [pc, #664]	; (801ee68 <rmw_wait+0x2bc>)
 801ebce:	af04      	add	r7, sp, #16
 801ebd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ebd2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801ebd6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801ebda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ebde:	f7ff fa9b 	bl	801e118 <rmw_time_equal>
 801ebe2:	2800      	cmp	r0, #0
 801ebe4:	f000 810b 	beq.w	801edfe <rmw_wait+0x252>
 801ebe8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ebec:	f7f7 ff9c 	bl	8016b28 <rmw_uxrce_clean_expired_static_input_buffer>
 801ebf0:	4b9e      	ldr	r3, [pc, #632]	; (801ee6c <rmw_wait+0x2c0>)
 801ebf2:	681c      	ldr	r4, [r3, #0]
 801ebf4:	b14c      	cbz	r4, 801ec0a <rmw_wait+0x5e>
 801ebf6:	4623      	mov	r3, r4
 801ebf8:	2100      	movs	r1, #0
 801ebfa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801ebfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ec02:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d1f7      	bne.n	801ebfa <rmw_wait+0x4e>
 801ec0a:	f1b9 0f00 	cmp.w	r9, #0
 801ec0e:	d011      	beq.n	801ec34 <rmw_wait+0x88>
 801ec10:	f8d9 1000 	ldr.w	r1, [r9]
 801ec14:	b171      	cbz	r1, 801ec34 <rmw_wait+0x88>
 801ec16:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	2001      	movs	r0, #1
 801ec1e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ec22:	3301      	adds	r3, #1
 801ec24:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801ec26:	4299      	cmp	r1, r3
 801ec28:	6912      	ldr	r2, [r2, #16]
 801ec2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ec2e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801ec32:	d1f4      	bne.n	801ec1e <rmw_wait+0x72>
 801ec34:	f1b8 0f00 	cmp.w	r8, #0
 801ec38:	d011      	beq.n	801ec5e <rmw_wait+0xb2>
 801ec3a:	f8d8 1000 	ldr.w	r1, [r8]
 801ec3e:	b171      	cbz	r1, 801ec5e <rmw_wait+0xb2>
 801ec40:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801ec44:	2300      	movs	r3, #0
 801ec46:	2001      	movs	r0, #1
 801ec48:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ec4c:	3301      	adds	r3, #1
 801ec4e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801ec50:	4299      	cmp	r1, r3
 801ec52:	6912      	ldr	r2, [r2, #16]
 801ec54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ec58:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801ec5c:	d1f4      	bne.n	801ec48 <rmw_wait+0x9c>
 801ec5e:	b185      	cbz	r5, 801ec82 <rmw_wait+0xd6>
 801ec60:	6829      	ldr	r1, [r5, #0]
 801ec62:	b171      	cbz	r1, 801ec82 <rmw_wait+0xd6>
 801ec64:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801ec68:	2300      	movs	r3, #0
 801ec6a:	2001      	movs	r0, #1
 801ec6c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ec70:	3301      	adds	r3, #1
 801ec72:	6a12      	ldr	r2, [r2, #32]
 801ec74:	4299      	cmp	r1, r3
 801ec76:	6912      	ldr	r2, [r2, #16]
 801ec78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ec7c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801ec80:	d1f4      	bne.n	801ec6c <rmw_wait+0xc0>
 801ec82:	b344      	cbz	r4, 801ecd6 <rmw_wait+0x12a>
 801ec84:	4622      	mov	r2, r4
 801ec86:	2300      	movs	r3, #0
 801ec88:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801ec8c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801ec90:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801ec94:	440b      	add	r3, r1
 801ec96:	b2db      	uxtb	r3, r3
 801ec98:	2a00      	cmp	r2, #0
 801ec9a:	d1f5      	bne.n	801ec88 <rmw_wait+0xdc>
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d05f      	beq.n	801ed60 <rmw_wait+0x1b4>
 801eca0:	1c7a      	adds	r2, r7, #1
 801eca2:	d00d      	beq.n	801ecc0 <rmw_wait+0x114>
 801eca4:	ee07 7a90 	vmov	s15, r7
 801eca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ecac:	ee07 3a90 	vmov	s15, r3
 801ecb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecb8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801ecbc:	ee17 7a90 	vmov	r7, s15
 801ecc0:	68a0      	ldr	r0, [r4, #8]
 801ecc2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801ecc6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	f040 808d 	bne.w	801edea <rmw_wait+0x23e>
 801ecd0:	6864      	ldr	r4, [r4, #4]
 801ecd2:	2c00      	cmp	r4, #0
 801ecd4:	d1f4      	bne.n	801ecc0 <rmw_wait+0x114>
 801ecd6:	f1b9 0f00 	cmp.w	r9, #0
 801ecda:	f000 80a1 	beq.w	801ee20 <rmw_wait+0x274>
 801ecde:	f8d9 7000 	ldr.w	r7, [r9]
 801ece2:	2f00      	cmp	r7, #0
 801ece4:	f000 80a4 	beq.w	801ee30 <rmw_wait+0x284>
 801ece8:	2400      	movs	r4, #0
 801ecea:	4627      	mov	r7, r4
 801ecec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ecf0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ecf4:	f7f7 feee 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ecf8:	2800      	cmp	r0, #0
 801ecfa:	d03b      	beq.n	801ed74 <rmw_wait+0x1c8>
 801ecfc:	3401      	adds	r4, #1
 801ecfe:	f8d9 3000 	ldr.w	r3, [r9]
 801ed02:	2701      	movs	r7, #1
 801ed04:	42a3      	cmp	r3, r4
 801ed06:	d8f1      	bhi.n	801ecec <rmw_wait+0x140>
 801ed08:	2701      	movs	r7, #1
 801ed0a:	f1b8 0f00 	cmp.w	r8, #0
 801ed0e:	d010      	beq.n	801ed32 <rmw_wait+0x186>
 801ed10:	f8d8 3000 	ldr.w	r3, [r8]
 801ed14:	b16b      	cbz	r3, 801ed32 <rmw_wait+0x186>
 801ed16:	2400      	movs	r4, #0
 801ed18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ed1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ed20:	f7f7 fed8 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ed24:	b370      	cbz	r0, 801ed84 <rmw_wait+0x1d8>
 801ed26:	3401      	adds	r4, #1
 801ed28:	f8d8 3000 	ldr.w	r3, [r8]
 801ed2c:	2701      	movs	r7, #1
 801ed2e:	42a3      	cmp	r3, r4
 801ed30:	d8f2      	bhi.n	801ed18 <rmw_wait+0x16c>
 801ed32:	2d00      	cmp	r5, #0
 801ed34:	d035      	beq.n	801eda2 <rmw_wait+0x1f6>
 801ed36:	682b      	ldr	r3, [r5, #0]
 801ed38:	b39b      	cbz	r3, 801eda2 <rmw_wait+0x1f6>
 801ed3a:	2400      	movs	r4, #0
 801ed3c:	686b      	ldr	r3, [r5, #4]
 801ed3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ed42:	f7f7 fec7 	bl	8016ad4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ed46:	b328      	cbz	r0, 801ed94 <rmw_wait+0x1e8>
 801ed48:	3401      	adds	r4, #1
 801ed4a:	682b      	ldr	r3, [r5, #0]
 801ed4c:	2701      	movs	r7, #1
 801ed4e:	42a3      	cmp	r3, r4
 801ed50:	d8f4      	bhi.n	801ed3c <rmw_wait+0x190>
 801ed52:	2e00      	cmp	r6, #0
 801ed54:	d03c      	beq.n	801edd0 <rmw_wait+0x224>
 801ed56:	6834      	ldr	r4, [r6, #0]
 801ed58:	2c00      	cmp	r4, #0
 801ed5a:	d039      	beq.n	801edd0 <rmw_wait+0x224>
 801ed5c:	2701      	movs	r7, #1
 801ed5e:	e023      	b.n	801eda8 <rmw_wait+0x1fc>
 801ed60:	68a0      	ldr	r0, [r4, #8]
 801ed62:	2100      	movs	r1, #0
 801ed64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ed68:	f7f9 fad0 	bl	801830c <uxr_run_session_timeout>
 801ed6c:	6864      	ldr	r4, [r4, #4]
 801ed6e:	2c00      	cmp	r4, #0
 801ed70:	d1f6      	bne.n	801ed60 <rmw_wait+0x1b4>
 801ed72:	e7b0      	b.n	801ecd6 <rmw_wait+0x12a>
 801ed74:	e9d9 3200 	ldrd	r3, r2, [r9]
 801ed78:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ed7c:	3401      	adds	r4, #1
 801ed7e:	42a3      	cmp	r3, r4
 801ed80:	d8b4      	bhi.n	801ecec <rmw_wait+0x140>
 801ed82:	e7c2      	b.n	801ed0a <rmw_wait+0x15e>
 801ed84:	e9d8 3200 	ldrd	r3, r2, [r8]
 801ed88:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ed8c:	3401      	adds	r4, #1
 801ed8e:	429c      	cmp	r4, r3
 801ed90:	d3c2      	bcc.n	801ed18 <rmw_wait+0x16c>
 801ed92:	e7ce      	b.n	801ed32 <rmw_wait+0x186>
 801ed94:	e9d5 3200 	ldrd	r3, r2, [r5]
 801ed98:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ed9c:	3401      	adds	r4, #1
 801ed9e:	42a3      	cmp	r3, r4
 801eda0:	d8cc      	bhi.n	801ed3c <rmw_wait+0x190>
 801eda2:	b1a6      	cbz	r6, 801edce <rmw_wait+0x222>
 801eda4:	6834      	ldr	r4, [r6, #0]
 801eda6:	b194      	cbz	r4, 801edce <rmw_wait+0x222>
 801eda8:	2300      	movs	r3, #0
 801edaa:	461d      	mov	r5, r3
 801edac:	e004      	b.n	801edb8 <rmw_wait+0x20c>
 801edae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801edb2:	3301      	adds	r3, #1
 801edb4:	42a3      	cmp	r3, r4
 801edb6:	d00a      	beq.n	801edce <rmw_wait+0x222>
 801edb8:	6870      	ldr	r0, [r6, #4]
 801edba:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801edbe:	7c0a      	ldrb	r2, [r1, #16]
 801edc0:	2a00      	cmp	r2, #0
 801edc2:	d0f4      	beq.n	801edae <rmw_wait+0x202>
 801edc4:	3301      	adds	r3, #1
 801edc6:	4617      	mov	r7, r2
 801edc8:	740d      	strb	r5, [r1, #16]
 801edca:	42a3      	cmp	r3, r4
 801edcc:	d1f4      	bne.n	801edb8 <rmw_wait+0x20c>
 801edce:	b147      	cbz	r7, 801ede2 <rmw_wait+0x236>
 801edd0:	2000      	movs	r0, #0
 801edd2:	b009      	add	sp, #36	; 0x24
 801edd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edd8:	b11e      	cbz	r6, 801ede2 <rmw_wait+0x236>
 801edda:	6834      	ldr	r4, [r6, #0]
 801eddc:	462f      	mov	r7, r5
 801edde:	2c00      	cmp	r4, #0
 801ede0:	d1e2      	bne.n	801eda8 <rmw_wait+0x1fc>
 801ede2:	2002      	movs	r0, #2
 801ede4:	b009      	add	sp, #36	; 0x24
 801ede6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edea:	4639      	mov	r1, r7
 801edec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801edf0:	f7f9 faa6 	bl	8018340 <uxr_run_session_until_data>
 801edf4:	6864      	ldr	r4, [r4, #4]
 801edf6:	2c00      	cmp	r4, #0
 801edf8:	f47f af62 	bne.w	801ecc0 <rmw_wait+0x114>
 801edfc:	e76b      	b.n	801ecd6 <rmw_wait+0x12a>
 801edfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ee02:	f7ff f9df 	bl	801e1c4 <rmw_time_total_nsec>
 801ee06:	2300      	movs	r3, #0
 801ee08:	4a19      	ldr	r2, [pc, #100]	; (801ee70 <rmw_wait+0x2c4>)
 801ee0a:	f7e1 fbdf 	bl	80005cc <__aeabi_uldivmod>
 801ee0e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801ee12:	4607      	mov	r7, r0
 801ee14:	f171 0300 	sbcs.w	r3, r1, #0
 801ee18:	bfa8      	it	ge
 801ee1a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801ee1e:	e6e5      	b.n	801ebec <rmw_wait+0x40>
 801ee20:	f1b8 0f00 	cmp.w	r8, #0
 801ee24:	d00f      	beq.n	801ee46 <rmw_wait+0x29a>
 801ee26:	f8d8 3000 	ldr.w	r3, [r8]
 801ee2a:	b193      	cbz	r3, 801ee52 <rmw_wait+0x2a6>
 801ee2c:	464f      	mov	r7, r9
 801ee2e:	e772      	b.n	801ed16 <rmw_wait+0x16a>
 801ee30:	f1b8 0f00 	cmp.w	r8, #0
 801ee34:	d007      	beq.n	801ee46 <rmw_wait+0x29a>
 801ee36:	f8d8 3000 	ldr.w	r3, [r8]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	f47f af6b 	bne.w	801ed16 <rmw_wait+0x16a>
 801ee40:	b155      	cbz	r5, 801ee58 <rmw_wait+0x2ac>
 801ee42:	461f      	mov	r7, r3
 801ee44:	e777      	b.n	801ed36 <rmw_wait+0x18a>
 801ee46:	2d00      	cmp	r5, #0
 801ee48:	d0c6      	beq.n	801edd8 <rmw_wait+0x22c>
 801ee4a:	682b      	ldr	r3, [r5, #0]
 801ee4c:	b143      	cbz	r3, 801ee60 <rmw_wait+0x2b4>
 801ee4e:	4647      	mov	r7, r8
 801ee50:	e773      	b.n	801ed3a <rmw_wait+0x18e>
 801ee52:	b10d      	cbz	r5, 801ee58 <rmw_wait+0x2ac>
 801ee54:	464f      	mov	r7, r9
 801ee56:	e76e      	b.n	801ed36 <rmw_wait+0x18a>
 801ee58:	462f      	mov	r7, r5
 801ee5a:	2e00      	cmp	r6, #0
 801ee5c:	d1a2      	bne.n	801eda4 <rmw_wait+0x1f8>
 801ee5e:	e7c0      	b.n	801ede2 <rmw_wait+0x236>
 801ee60:	4647      	mov	r7, r8
 801ee62:	2e00      	cmp	r6, #0
 801ee64:	d19e      	bne.n	801eda4 <rmw_wait+0x1f8>
 801ee66:	e7bc      	b.n	801ede2 <rmw_wait+0x236>
 801ee68:	08022248 	.word	0x08022248
 801ee6c:	2001751c 	.word	0x2001751c
 801ee70:	000f4240 	.word	0x000f4240

0801ee74 <rmw_create_wait_set>:
 801ee74:	b508      	push	{r3, lr}
 801ee76:	4803      	ldr	r0, [pc, #12]	; (801ee84 <rmw_create_wait_set+0x10>)
 801ee78:	f7ff fc14 	bl	801e6a4 <get_memory>
 801ee7c:	b108      	cbz	r0, 801ee82 <rmw_create_wait_set+0xe>
 801ee7e:	6880      	ldr	r0, [r0, #8]
 801ee80:	3010      	adds	r0, #16
 801ee82:	bd08      	pop	{r3, pc}
 801ee84:	2001755c 	.word	0x2001755c

0801ee88 <rmw_destroy_wait_set>:
 801ee88:	b508      	push	{r3, lr}
 801ee8a:	4b08      	ldr	r3, [pc, #32]	; (801eeac <rmw_destroy_wait_set+0x24>)
 801ee8c:	6819      	ldr	r1, [r3, #0]
 801ee8e:	b911      	cbnz	r1, 801ee96 <rmw_destroy_wait_set+0xe>
 801ee90:	e00a      	b.n	801eea8 <rmw_destroy_wait_set+0x20>
 801ee92:	6849      	ldr	r1, [r1, #4]
 801ee94:	b141      	cbz	r1, 801eea8 <rmw_destroy_wait_set+0x20>
 801ee96:	688b      	ldr	r3, [r1, #8]
 801ee98:	3310      	adds	r3, #16
 801ee9a:	4298      	cmp	r0, r3
 801ee9c:	d1f9      	bne.n	801ee92 <rmw_destroy_wait_set+0xa>
 801ee9e:	4803      	ldr	r0, [pc, #12]	; (801eeac <rmw_destroy_wait_set+0x24>)
 801eea0:	f7ff fc10 	bl	801e6c4 <put_memory>
 801eea4:	2000      	movs	r0, #0
 801eea6:	bd08      	pop	{r3, pc}
 801eea8:	2001      	movs	r0, #1
 801eeaa:	bd08      	pop	{r3, pc}
 801eeac:	2001755c 	.word	0x2001755c

0801eeb0 <rmw_uros_epoch_nanos>:
 801eeb0:	4b05      	ldr	r3, [pc, #20]	; (801eec8 <rmw_uros_epoch_nanos+0x18>)
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	b123      	cbz	r3, 801eec0 <rmw_uros_epoch_nanos+0x10>
 801eeb6:	6898      	ldr	r0, [r3, #8]
 801eeb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801eebc:	f7f8 be9c 	b.w	8017bf8 <uxr_epoch_nanos>
 801eec0:	2000      	movs	r0, #0
 801eec2:	2100      	movs	r1, #0
 801eec4:	4770      	bx	lr
 801eec6:	bf00      	nop
 801eec8:	2001751c 	.word	0x2001751c

0801eecc <std_msgs__msg__Bool__init>:
 801eecc:	3800      	subs	r0, #0
 801eece:	bf18      	it	ne
 801eed0:	2001      	movne	r0, #1
 801eed2:	4770      	bx	lr

0801eed4 <std_msgs__msg__Bool__fini>:
 801eed4:	4770      	bx	lr
 801eed6:	bf00      	nop

0801eed8 <std_msgs__msg__Float64__init>:
 801eed8:	3800      	subs	r0, #0
 801eeda:	bf18      	it	ne
 801eedc:	2001      	movne	r0, #1
 801eede:	4770      	bx	lr

0801eee0 <std_msgs__msg__Float64__fini>:
 801eee0:	4770      	bx	lr
 801eee2:	bf00      	nop

0801eee4 <ucdr_serialize_endian_array_char>:
 801eee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eee8:	4619      	mov	r1, r3
 801eeea:	461f      	mov	r7, r3
 801eeec:	4605      	mov	r5, r0
 801eeee:	4690      	mov	r8, r2
 801eef0:	f7f5 f902 	bl	80140f8 <ucdr_check_buffer_available_for>
 801eef4:	b9e0      	cbnz	r0, 801ef30 <ucdr_serialize_endian_array_char+0x4c>
 801eef6:	463e      	mov	r6, r7
 801eef8:	e00b      	b.n	801ef12 <ucdr_serialize_endian_array_char+0x2e>
 801eefa:	4441      	add	r1, r8
 801eefc:	68a8      	ldr	r0, [r5, #8]
 801eefe:	4622      	mov	r2, r4
 801ef00:	1b36      	subs	r6, r6, r4
 801ef02:	f002 f92c 	bl	802115e <memcpy>
 801ef06:	68ab      	ldr	r3, [r5, #8]
 801ef08:	6928      	ldr	r0, [r5, #16]
 801ef0a:	4423      	add	r3, r4
 801ef0c:	4420      	add	r0, r4
 801ef0e:	60ab      	str	r3, [r5, #8]
 801ef10:	6128      	str	r0, [r5, #16]
 801ef12:	4631      	mov	r1, r6
 801ef14:	2201      	movs	r2, #1
 801ef16:	4628      	mov	r0, r5
 801ef18:	f7f5 f978 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801ef1c:	1bb9      	subs	r1, r7, r6
 801ef1e:	4604      	mov	r4, r0
 801ef20:	2800      	cmp	r0, #0
 801ef22:	d1ea      	bne.n	801eefa <ucdr_serialize_endian_array_char+0x16>
 801ef24:	2301      	movs	r3, #1
 801ef26:	7da8      	ldrb	r0, [r5, #22]
 801ef28:	756b      	strb	r3, [r5, #21]
 801ef2a:	4058      	eors	r0, r3
 801ef2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef30:	463a      	mov	r2, r7
 801ef32:	4641      	mov	r1, r8
 801ef34:	68a8      	ldr	r0, [r5, #8]
 801ef36:	f002 f912 	bl	802115e <memcpy>
 801ef3a:	68aa      	ldr	r2, [r5, #8]
 801ef3c:	692b      	ldr	r3, [r5, #16]
 801ef3e:	443a      	add	r2, r7
 801ef40:	443b      	add	r3, r7
 801ef42:	60aa      	str	r2, [r5, #8]
 801ef44:	612b      	str	r3, [r5, #16]
 801ef46:	e7ed      	b.n	801ef24 <ucdr_serialize_endian_array_char+0x40>

0801ef48 <ucdr_deserialize_endian_array_char>:
 801ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef4c:	4619      	mov	r1, r3
 801ef4e:	461f      	mov	r7, r3
 801ef50:	4605      	mov	r5, r0
 801ef52:	4690      	mov	r8, r2
 801ef54:	f7f5 f8d0 	bl	80140f8 <ucdr_check_buffer_available_for>
 801ef58:	b9e8      	cbnz	r0, 801ef96 <ucdr_deserialize_endian_array_char+0x4e>
 801ef5a:	463e      	mov	r6, r7
 801ef5c:	e00c      	b.n	801ef78 <ucdr_deserialize_endian_array_char+0x30>
 801ef5e:	eb08 0003 	add.w	r0, r8, r3
 801ef62:	68a9      	ldr	r1, [r5, #8]
 801ef64:	4622      	mov	r2, r4
 801ef66:	1b36      	subs	r6, r6, r4
 801ef68:	f002 f8f9 	bl	802115e <memcpy>
 801ef6c:	68ab      	ldr	r3, [r5, #8]
 801ef6e:	6928      	ldr	r0, [r5, #16]
 801ef70:	4423      	add	r3, r4
 801ef72:	4420      	add	r0, r4
 801ef74:	60ab      	str	r3, [r5, #8]
 801ef76:	6128      	str	r0, [r5, #16]
 801ef78:	4631      	mov	r1, r6
 801ef7a:	2201      	movs	r2, #1
 801ef7c:	4628      	mov	r0, r5
 801ef7e:	f7f5 f945 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801ef82:	1bbb      	subs	r3, r7, r6
 801ef84:	4604      	mov	r4, r0
 801ef86:	2800      	cmp	r0, #0
 801ef88:	d1e9      	bne.n	801ef5e <ucdr_deserialize_endian_array_char+0x16>
 801ef8a:	2301      	movs	r3, #1
 801ef8c:	7da8      	ldrb	r0, [r5, #22]
 801ef8e:	756b      	strb	r3, [r5, #21]
 801ef90:	4058      	eors	r0, r3
 801ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef96:	463a      	mov	r2, r7
 801ef98:	68a9      	ldr	r1, [r5, #8]
 801ef9a:	4640      	mov	r0, r8
 801ef9c:	f002 f8df 	bl	802115e <memcpy>
 801efa0:	68aa      	ldr	r2, [r5, #8]
 801efa2:	692b      	ldr	r3, [r5, #16]
 801efa4:	443a      	add	r2, r7
 801efa6:	443b      	add	r3, r7
 801efa8:	60aa      	str	r2, [r5, #8]
 801efaa:	612b      	str	r3, [r5, #16]
 801efac:	e7ed      	b.n	801ef8a <ucdr_deserialize_endian_array_char+0x42>
 801efae:	bf00      	nop

0801efb0 <ucdr_serialize_array_uint8_t>:
 801efb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efb4:	4688      	mov	r8, r1
 801efb6:	4611      	mov	r1, r2
 801efb8:	4617      	mov	r7, r2
 801efba:	4605      	mov	r5, r0
 801efbc:	f7f5 f89c 	bl	80140f8 <ucdr_check_buffer_available_for>
 801efc0:	b9e0      	cbnz	r0, 801effc <ucdr_serialize_array_uint8_t+0x4c>
 801efc2:	463e      	mov	r6, r7
 801efc4:	e00b      	b.n	801efde <ucdr_serialize_array_uint8_t+0x2e>
 801efc6:	4441      	add	r1, r8
 801efc8:	68a8      	ldr	r0, [r5, #8]
 801efca:	4622      	mov	r2, r4
 801efcc:	1b36      	subs	r6, r6, r4
 801efce:	f002 f8c6 	bl	802115e <memcpy>
 801efd2:	68ab      	ldr	r3, [r5, #8]
 801efd4:	6928      	ldr	r0, [r5, #16]
 801efd6:	4423      	add	r3, r4
 801efd8:	4420      	add	r0, r4
 801efda:	60ab      	str	r3, [r5, #8]
 801efdc:	6128      	str	r0, [r5, #16]
 801efde:	4631      	mov	r1, r6
 801efe0:	2201      	movs	r2, #1
 801efe2:	4628      	mov	r0, r5
 801efe4:	f7f5 f912 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801efe8:	1bb9      	subs	r1, r7, r6
 801efea:	4604      	mov	r4, r0
 801efec:	2800      	cmp	r0, #0
 801efee:	d1ea      	bne.n	801efc6 <ucdr_serialize_array_uint8_t+0x16>
 801eff0:	2301      	movs	r3, #1
 801eff2:	7da8      	ldrb	r0, [r5, #22]
 801eff4:	756b      	strb	r3, [r5, #21]
 801eff6:	4058      	eors	r0, r3
 801eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801effc:	463a      	mov	r2, r7
 801effe:	4641      	mov	r1, r8
 801f000:	68a8      	ldr	r0, [r5, #8]
 801f002:	f002 f8ac 	bl	802115e <memcpy>
 801f006:	68aa      	ldr	r2, [r5, #8]
 801f008:	692b      	ldr	r3, [r5, #16]
 801f00a:	443a      	add	r2, r7
 801f00c:	443b      	add	r3, r7
 801f00e:	60aa      	str	r2, [r5, #8]
 801f010:	612b      	str	r3, [r5, #16]
 801f012:	e7ed      	b.n	801eff0 <ucdr_serialize_array_uint8_t+0x40>

0801f014 <ucdr_serialize_endian_array_uint8_t>:
 801f014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f018:	4619      	mov	r1, r3
 801f01a:	461f      	mov	r7, r3
 801f01c:	4605      	mov	r5, r0
 801f01e:	4690      	mov	r8, r2
 801f020:	f7f5 f86a 	bl	80140f8 <ucdr_check_buffer_available_for>
 801f024:	b9e0      	cbnz	r0, 801f060 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801f026:	463e      	mov	r6, r7
 801f028:	e00b      	b.n	801f042 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801f02a:	4441      	add	r1, r8
 801f02c:	68a8      	ldr	r0, [r5, #8]
 801f02e:	4622      	mov	r2, r4
 801f030:	1b36      	subs	r6, r6, r4
 801f032:	f002 f894 	bl	802115e <memcpy>
 801f036:	68ab      	ldr	r3, [r5, #8]
 801f038:	6928      	ldr	r0, [r5, #16]
 801f03a:	4423      	add	r3, r4
 801f03c:	4420      	add	r0, r4
 801f03e:	60ab      	str	r3, [r5, #8]
 801f040:	6128      	str	r0, [r5, #16]
 801f042:	4631      	mov	r1, r6
 801f044:	2201      	movs	r2, #1
 801f046:	4628      	mov	r0, r5
 801f048:	f7f5 f8e0 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801f04c:	1bb9      	subs	r1, r7, r6
 801f04e:	4604      	mov	r4, r0
 801f050:	2800      	cmp	r0, #0
 801f052:	d1ea      	bne.n	801f02a <ucdr_serialize_endian_array_uint8_t+0x16>
 801f054:	2301      	movs	r3, #1
 801f056:	7da8      	ldrb	r0, [r5, #22]
 801f058:	756b      	strb	r3, [r5, #21]
 801f05a:	4058      	eors	r0, r3
 801f05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f060:	463a      	mov	r2, r7
 801f062:	4641      	mov	r1, r8
 801f064:	68a8      	ldr	r0, [r5, #8]
 801f066:	f002 f87a 	bl	802115e <memcpy>
 801f06a:	68aa      	ldr	r2, [r5, #8]
 801f06c:	692b      	ldr	r3, [r5, #16]
 801f06e:	443a      	add	r2, r7
 801f070:	443b      	add	r3, r7
 801f072:	60aa      	str	r2, [r5, #8]
 801f074:	612b      	str	r3, [r5, #16]
 801f076:	e7ed      	b.n	801f054 <ucdr_serialize_endian_array_uint8_t+0x40>

0801f078 <ucdr_deserialize_array_uint8_t>:
 801f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f07c:	4688      	mov	r8, r1
 801f07e:	4611      	mov	r1, r2
 801f080:	4617      	mov	r7, r2
 801f082:	4605      	mov	r5, r0
 801f084:	f7f5 f838 	bl	80140f8 <ucdr_check_buffer_available_for>
 801f088:	b9e8      	cbnz	r0, 801f0c6 <ucdr_deserialize_array_uint8_t+0x4e>
 801f08a:	463e      	mov	r6, r7
 801f08c:	e00c      	b.n	801f0a8 <ucdr_deserialize_array_uint8_t+0x30>
 801f08e:	eb08 0003 	add.w	r0, r8, r3
 801f092:	68a9      	ldr	r1, [r5, #8]
 801f094:	4622      	mov	r2, r4
 801f096:	1b36      	subs	r6, r6, r4
 801f098:	f002 f861 	bl	802115e <memcpy>
 801f09c:	68ab      	ldr	r3, [r5, #8]
 801f09e:	6928      	ldr	r0, [r5, #16]
 801f0a0:	4423      	add	r3, r4
 801f0a2:	4420      	add	r0, r4
 801f0a4:	60ab      	str	r3, [r5, #8]
 801f0a6:	6128      	str	r0, [r5, #16]
 801f0a8:	4631      	mov	r1, r6
 801f0aa:	2201      	movs	r2, #1
 801f0ac:	4628      	mov	r0, r5
 801f0ae:	f7f5 f8ad 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801f0b2:	1bbb      	subs	r3, r7, r6
 801f0b4:	4604      	mov	r4, r0
 801f0b6:	2800      	cmp	r0, #0
 801f0b8:	d1e9      	bne.n	801f08e <ucdr_deserialize_array_uint8_t+0x16>
 801f0ba:	2301      	movs	r3, #1
 801f0bc:	7da8      	ldrb	r0, [r5, #22]
 801f0be:	756b      	strb	r3, [r5, #21]
 801f0c0:	4058      	eors	r0, r3
 801f0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0c6:	463a      	mov	r2, r7
 801f0c8:	68a9      	ldr	r1, [r5, #8]
 801f0ca:	4640      	mov	r0, r8
 801f0cc:	f002 f847 	bl	802115e <memcpy>
 801f0d0:	68aa      	ldr	r2, [r5, #8]
 801f0d2:	692b      	ldr	r3, [r5, #16]
 801f0d4:	443a      	add	r2, r7
 801f0d6:	443b      	add	r3, r7
 801f0d8:	60aa      	str	r2, [r5, #8]
 801f0da:	612b      	str	r3, [r5, #16]
 801f0dc:	e7ed      	b.n	801f0ba <ucdr_deserialize_array_uint8_t+0x42>
 801f0de:	bf00      	nop

0801f0e0 <ucdr_deserialize_endian_array_uint8_t>:
 801f0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0e4:	4619      	mov	r1, r3
 801f0e6:	461f      	mov	r7, r3
 801f0e8:	4605      	mov	r5, r0
 801f0ea:	4690      	mov	r8, r2
 801f0ec:	f7f5 f804 	bl	80140f8 <ucdr_check_buffer_available_for>
 801f0f0:	b9e8      	cbnz	r0, 801f12e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801f0f2:	463e      	mov	r6, r7
 801f0f4:	e00c      	b.n	801f110 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801f0f6:	eb08 0003 	add.w	r0, r8, r3
 801f0fa:	68a9      	ldr	r1, [r5, #8]
 801f0fc:	4622      	mov	r2, r4
 801f0fe:	1b36      	subs	r6, r6, r4
 801f100:	f002 f82d 	bl	802115e <memcpy>
 801f104:	68ab      	ldr	r3, [r5, #8]
 801f106:	6928      	ldr	r0, [r5, #16]
 801f108:	4423      	add	r3, r4
 801f10a:	4420      	add	r0, r4
 801f10c:	60ab      	str	r3, [r5, #8]
 801f10e:	6128      	str	r0, [r5, #16]
 801f110:	4631      	mov	r1, r6
 801f112:	2201      	movs	r2, #1
 801f114:	4628      	mov	r0, r5
 801f116:	f7f5 f879 	bl	801420c <ucdr_check_final_buffer_behavior_array>
 801f11a:	1bbb      	subs	r3, r7, r6
 801f11c:	4604      	mov	r4, r0
 801f11e:	2800      	cmp	r0, #0
 801f120:	d1e9      	bne.n	801f0f6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801f122:	2301      	movs	r3, #1
 801f124:	7da8      	ldrb	r0, [r5, #22]
 801f126:	756b      	strb	r3, [r5, #21]
 801f128:	4058      	eors	r0, r3
 801f12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f12e:	463a      	mov	r2, r7
 801f130:	68a9      	ldr	r1, [r5, #8]
 801f132:	4640      	mov	r0, r8
 801f134:	f002 f813 	bl	802115e <memcpy>
 801f138:	68aa      	ldr	r2, [r5, #8]
 801f13a:	692b      	ldr	r3, [r5, #16]
 801f13c:	443a      	add	r2, r7
 801f13e:	443b      	add	r3, r7
 801f140:	60aa      	str	r2, [r5, #8]
 801f142:	612b      	str	r3, [r5, #16]
 801f144:	e7ed      	b.n	801f122 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801f146:	bf00      	nop

0801f148 <ucdr_serialize_sequence_char>:
 801f148:	b570      	push	{r4, r5, r6, lr}
 801f14a:	4615      	mov	r5, r2
 801f14c:	460e      	mov	r6, r1
 801f14e:	7d01      	ldrb	r1, [r0, #20]
 801f150:	4604      	mov	r4, r0
 801f152:	f7f4 f991 	bl	8013478 <ucdr_serialize_endian_uint32_t>
 801f156:	b90d      	cbnz	r5, 801f15c <ucdr_serialize_sequence_char+0x14>
 801f158:	2001      	movs	r0, #1
 801f15a:	bd70      	pop	{r4, r5, r6, pc}
 801f15c:	462b      	mov	r3, r5
 801f15e:	4632      	mov	r2, r6
 801f160:	7d21      	ldrb	r1, [r4, #20]
 801f162:	4620      	mov	r0, r4
 801f164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f168:	f7ff bebc 	b.w	801eee4 <ucdr_serialize_endian_array_char>

0801f16c <ucdr_deserialize_sequence_char>:
 801f16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f170:	461d      	mov	r5, r3
 801f172:	4616      	mov	r6, r2
 801f174:	460f      	mov	r7, r1
 801f176:	461a      	mov	r2, r3
 801f178:	7d01      	ldrb	r1, [r0, #20]
 801f17a:	4604      	mov	r4, r0
 801f17c:	f7f4 faa4 	bl	80136c8 <ucdr_deserialize_endian_uint32_t>
 801f180:	682b      	ldr	r3, [r5, #0]
 801f182:	429e      	cmp	r6, r3
 801f184:	d201      	bcs.n	801f18a <ucdr_deserialize_sequence_char+0x1e>
 801f186:	2201      	movs	r2, #1
 801f188:	75a2      	strb	r2, [r4, #22]
 801f18a:	b913      	cbnz	r3, 801f192 <ucdr_deserialize_sequence_char+0x26>
 801f18c:	2001      	movs	r0, #1
 801f18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f192:	463a      	mov	r2, r7
 801f194:	7d21      	ldrb	r1, [r4, #20]
 801f196:	4620      	mov	r0, r4
 801f198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f19c:	f7ff bed4 	b.w	801ef48 <ucdr_deserialize_endian_array_char>

0801f1a0 <ucdr_serialize_sequence_uint8_t>:
 801f1a0:	b570      	push	{r4, r5, r6, lr}
 801f1a2:	4615      	mov	r5, r2
 801f1a4:	460e      	mov	r6, r1
 801f1a6:	7d01      	ldrb	r1, [r0, #20]
 801f1a8:	4604      	mov	r4, r0
 801f1aa:	f7f4 f965 	bl	8013478 <ucdr_serialize_endian_uint32_t>
 801f1ae:	b90d      	cbnz	r5, 801f1b4 <ucdr_serialize_sequence_uint8_t+0x14>
 801f1b0:	2001      	movs	r0, #1
 801f1b2:	bd70      	pop	{r4, r5, r6, pc}
 801f1b4:	462b      	mov	r3, r5
 801f1b6:	4632      	mov	r2, r6
 801f1b8:	7d21      	ldrb	r1, [r4, #20]
 801f1ba:	4620      	mov	r0, r4
 801f1bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1c0:	f7ff bf28 	b.w	801f014 <ucdr_serialize_endian_array_uint8_t>

0801f1c4 <ucdr_deserialize_sequence_uint8_t>:
 801f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1c8:	461d      	mov	r5, r3
 801f1ca:	4616      	mov	r6, r2
 801f1cc:	460f      	mov	r7, r1
 801f1ce:	461a      	mov	r2, r3
 801f1d0:	7d01      	ldrb	r1, [r0, #20]
 801f1d2:	4604      	mov	r4, r0
 801f1d4:	f7f4 fa78 	bl	80136c8 <ucdr_deserialize_endian_uint32_t>
 801f1d8:	682b      	ldr	r3, [r5, #0]
 801f1da:	429e      	cmp	r6, r3
 801f1dc:	d201      	bcs.n	801f1e2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 801f1de:	2201      	movs	r2, #1
 801f1e0:	75a2      	strb	r2, [r4, #22]
 801f1e2:	b913      	cbnz	r3, 801f1ea <ucdr_deserialize_sequence_uint8_t+0x26>
 801f1e4:	2001      	movs	r0, #1
 801f1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1ea:	463a      	mov	r2, r7
 801f1ec:	7d21      	ldrb	r1, [r4, #20]
 801f1ee:	4620      	mov	r0, r4
 801f1f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f1f4:	f7ff bf74 	b.w	801f0e0 <ucdr_deserialize_endian_array_uint8_t>

0801f1f8 <ucdr_serialize_string>:
 801f1f8:	b510      	push	{r4, lr}
 801f1fa:	b082      	sub	sp, #8
 801f1fc:	4604      	mov	r4, r0
 801f1fe:	4608      	mov	r0, r1
 801f200:	9101      	str	r1, [sp, #4]
 801f202:	f7e1 f827 	bl	8000254 <strlen>
 801f206:	4602      	mov	r2, r0
 801f208:	9901      	ldr	r1, [sp, #4]
 801f20a:	4620      	mov	r0, r4
 801f20c:	3201      	adds	r2, #1
 801f20e:	b002      	add	sp, #8
 801f210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f214:	f7ff bf98 	b.w	801f148 <ucdr_serialize_sequence_char>

0801f218 <ucdr_deserialize_string>:
 801f218:	b500      	push	{lr}
 801f21a:	b083      	sub	sp, #12
 801f21c:	ab01      	add	r3, sp, #4
 801f21e:	f7ff ffa5 	bl	801f16c <ucdr_deserialize_sequence_char>
 801f222:	b003      	add	sp, #12
 801f224:	f85d fb04 	ldr.w	pc, [sp], #4

0801f228 <uxr_init_input_best_effort_stream>:
 801f228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f22c:	8003      	strh	r3, [r0, #0]
 801f22e:	4770      	bx	lr

0801f230 <uxr_reset_input_best_effort_stream>:
 801f230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f234:	8003      	strh	r3, [r0, #0]
 801f236:	4770      	bx	lr

0801f238 <uxr_receive_best_effort_message>:
 801f238:	b538      	push	{r3, r4, r5, lr}
 801f23a:	4604      	mov	r4, r0
 801f23c:	8800      	ldrh	r0, [r0, #0]
 801f23e:	460d      	mov	r5, r1
 801f240:	f000 fd46 	bl	801fcd0 <uxr_seq_num_cmp>
 801f244:	4603      	mov	r3, r0
 801f246:	0fc0      	lsrs	r0, r0, #31
 801f248:	2b00      	cmp	r3, #0
 801f24a:	bfb8      	it	lt
 801f24c:	8025      	strhlt	r5, [r4, #0]
 801f24e:	bd38      	pop	{r3, r4, r5, pc}

0801f250 <on_full_input_buffer>:
 801f250:	b570      	push	{r4, r5, r6, lr}
 801f252:	460c      	mov	r4, r1
 801f254:	4605      	mov	r5, r0
 801f256:	8908      	ldrh	r0, [r1, #8]
 801f258:	682b      	ldr	r3, [r5, #0]
 801f25a:	7d26      	ldrb	r6, [r4, #20]
 801f25c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f260:	fbb2 f2f0 	udiv	r2, r2, r0
 801f264:	eba3 0c01 	sub.w	ip, r3, r1
 801f268:	fbbc fcf2 	udiv	ip, ip, r2
 801f26c:	f10c 0c01 	add.w	ip, ip, #1
 801f270:	fa1f f38c 	uxth.w	r3, ip
 801f274:	fbb3 fcf0 	udiv	ip, r3, r0
 801f278:	fb00 331c 	mls	r3, r0, ip, r3
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	fb02 f303 	mul.w	r3, r2, r3
 801f282:	1d18      	adds	r0, r3, #4
 801f284:	4408      	add	r0, r1
 801f286:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801f28a:	b116      	cbz	r6, 801f292 <on_full_input_buffer+0x42>
 801f28c:	2600      	movs	r6, #0
 801f28e:	f840 6c04 	str.w	r6, [r0, #-4]
 801f292:	2a03      	cmp	r2, #3
 801f294:	d801      	bhi.n	801f29a <on_full_input_buffer+0x4a>
 801f296:	2001      	movs	r0, #1
 801f298:	bd70      	pop	{r4, r5, r6, pc}
 801f29a:	3308      	adds	r3, #8
 801f29c:	4628      	mov	r0, r5
 801f29e:	3a04      	subs	r2, #4
 801f2a0:	4419      	add	r1, r3
 801f2a2:	692b      	ldr	r3, [r5, #16]
 801f2a4:	f7f4 ff74 	bl	8014190 <ucdr_init_buffer_origin>
 801f2a8:	4628      	mov	r0, r5
 801f2aa:	4622      	mov	r2, r4
 801f2ac:	4902      	ldr	r1, [pc, #8]	; (801f2b8 <on_full_input_buffer+0x68>)
 801f2ae:	f7f4 ff4b 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 801f2b2:	2000      	movs	r0, #0
 801f2b4:	bd70      	pop	{r4, r5, r6, pc}
 801f2b6:	bf00      	nop
 801f2b8:	0801f251 	.word	0x0801f251

0801f2bc <uxr_init_input_reliable_stream>:
 801f2bc:	b510      	push	{r4, lr}
 801f2be:	e9c0 1200 	strd	r1, r2, [r0]
 801f2c2:	2400      	movs	r4, #0
 801f2c4:	9a02      	ldr	r2, [sp, #8]
 801f2c6:	8103      	strh	r3, [r0, #8]
 801f2c8:	6102      	str	r2, [r0, #16]
 801f2ca:	7504      	strb	r4, [r0, #20]
 801f2cc:	b1c3      	cbz	r3, 801f300 <uxr_init_input_reliable_stream+0x44>
 801f2ce:	600c      	str	r4, [r1, #0]
 801f2d0:	8901      	ldrh	r1, [r0, #8]
 801f2d2:	2901      	cmp	r1, #1
 801f2d4:	d914      	bls.n	801f300 <uxr_init_input_reliable_stream+0x44>
 801f2d6:	f04f 0c01 	mov.w	ip, #1
 801f2da:	6843      	ldr	r3, [r0, #4]
 801f2dc:	f10c 0e01 	add.w	lr, ip, #1
 801f2e0:	fbbc f2f1 	udiv	r2, ip, r1
 801f2e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801f2e8:	fb01 c212 	mls	r2, r1, r2, ip
 801f2ec:	fa1f fc8e 	uxth.w	ip, lr
 801f2f0:	b292      	uxth	r2, r2
 801f2f2:	fb02 f303 	mul.w	r3, r2, r3
 801f2f6:	6802      	ldr	r2, [r0, #0]
 801f2f8:	50d4      	str	r4, [r2, r3]
 801f2fa:	8901      	ldrh	r1, [r0, #8]
 801f2fc:	4561      	cmp	r1, ip
 801f2fe:	d8ec      	bhi.n	801f2da <uxr_init_input_reliable_stream+0x1e>
 801f300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f304:	60c3      	str	r3, [r0, #12]
 801f306:	bd10      	pop	{r4, pc}

0801f308 <uxr_reset_input_reliable_stream>:
 801f308:	8901      	ldrh	r1, [r0, #8]
 801f30a:	b1d9      	cbz	r1, 801f344 <uxr_reset_input_reliable_stream+0x3c>
 801f30c:	b510      	push	{r4, lr}
 801f30e:	f04f 0e00 	mov.w	lr, #0
 801f312:	46f4      	mov	ip, lr
 801f314:	4674      	mov	r4, lr
 801f316:	6843      	ldr	r3, [r0, #4]
 801f318:	f10e 0e01 	add.w	lr, lr, #1
 801f31c:	fbbc f2f1 	udiv	r2, ip, r1
 801f320:	fbb3 f3f1 	udiv	r3, r3, r1
 801f324:	fb01 c212 	mls	r2, r1, r2, ip
 801f328:	fa1f fc8e 	uxth.w	ip, lr
 801f32c:	b292      	uxth	r2, r2
 801f32e:	fb02 f303 	mul.w	r3, r2, r3
 801f332:	6802      	ldr	r2, [r0, #0]
 801f334:	50d4      	str	r4, [r2, r3]
 801f336:	8901      	ldrh	r1, [r0, #8]
 801f338:	4561      	cmp	r1, ip
 801f33a:	d8ec      	bhi.n	801f316 <uxr_reset_input_reliable_stream+0xe>
 801f33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f340:	60c3      	str	r3, [r0, #12]
 801f342:	bd10      	pop	{r4, pc}
 801f344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f348:	60c3      	str	r3, [r0, #12]
 801f34a:	4770      	bx	lr

0801f34c <uxr_receive_reliable_message>:
 801f34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f350:	4604      	mov	r4, r0
 801f352:	460d      	mov	r5, r1
 801f354:	8901      	ldrh	r1, [r0, #8]
 801f356:	4617      	mov	r7, r2
 801f358:	8980      	ldrh	r0, [r0, #12]
 801f35a:	4698      	mov	r8, r3
 801f35c:	f000 fcb0 	bl	801fcc0 <uxr_seq_num_add>
 801f360:	4629      	mov	r1, r5
 801f362:	4606      	mov	r6, r0
 801f364:	89a0      	ldrh	r0, [r4, #12]
 801f366:	f000 fcb3 	bl	801fcd0 <uxr_seq_num_cmp>
 801f36a:	2800      	cmp	r0, #0
 801f36c:	db0a      	blt.n	801f384 <uxr_receive_reliable_message+0x38>
 801f36e:	2600      	movs	r6, #0
 801f370:	4629      	mov	r1, r5
 801f372:	89e0      	ldrh	r0, [r4, #14]
 801f374:	f000 fcac 	bl	801fcd0 <uxr_seq_num_cmp>
 801f378:	2800      	cmp	r0, #0
 801f37a:	da00      	bge.n	801f37e <uxr_receive_reliable_message+0x32>
 801f37c:	81e5      	strh	r5, [r4, #14]
 801f37e:	4630      	mov	r0, r6
 801f380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f384:	4630      	mov	r0, r6
 801f386:	4629      	mov	r1, r5
 801f388:	f000 fca2 	bl	801fcd0 <uxr_seq_num_cmp>
 801f38c:	2800      	cmp	r0, #0
 801f38e:	dbee      	blt.n	801f36e <uxr_receive_reliable_message+0x22>
 801f390:	6923      	ldr	r3, [r4, #16]
 801f392:	4638      	mov	r0, r7
 801f394:	4798      	blx	r3
 801f396:	4681      	mov	r9, r0
 801f398:	2101      	movs	r1, #1
 801f39a:	89a0      	ldrh	r0, [r4, #12]
 801f39c:	f000 fc90 	bl	801fcc0 <uxr_seq_num_add>
 801f3a0:	f1b9 0f00 	cmp.w	r9, #0
 801f3a4:	bf08      	it	eq
 801f3a6:	4285      	cmpeq	r5, r0
 801f3a8:	bf0c      	ite	eq
 801f3aa:	2601      	moveq	r6, #1
 801f3ac:	2600      	movne	r6, #0
 801f3ae:	d104      	bne.n	801f3ba <uxr_receive_reliable_message+0x6e>
 801f3b0:	2300      	movs	r3, #0
 801f3b2:	9a08      	ldr	r2, [sp, #32]
 801f3b4:	81a0      	strh	r0, [r4, #12]
 801f3b6:	7013      	strb	r3, [r2, #0]
 801f3b8:	e7da      	b.n	801f370 <uxr_receive_reliable_message+0x24>
 801f3ba:	8922      	ldrh	r2, [r4, #8]
 801f3bc:	6863      	ldr	r3, [r4, #4]
 801f3be:	fbb5 f0f2 	udiv	r0, r5, r2
 801f3c2:	fbb3 f3f2 	udiv	r3, r3, r2
 801f3c6:	fb02 5010 	mls	r0, r2, r0, r5
 801f3ca:	b280      	uxth	r0, r0
 801f3cc:	fb03 f000 	mul.w	r0, r3, r0
 801f3d0:	6823      	ldr	r3, [r4, #0]
 801f3d2:	3004      	adds	r0, #4
 801f3d4:	4418      	add	r0, r3
 801f3d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d1c7      	bne.n	801f36e <uxr_receive_reliable_message+0x22>
 801f3de:	4639      	mov	r1, r7
 801f3e0:	4642      	mov	r2, r8
 801f3e2:	f001 febc 	bl	802115e <memcpy>
 801f3e6:	8921      	ldrh	r1, [r4, #8]
 801f3e8:	6863      	ldr	r3, [r4, #4]
 801f3ea:	fbb5 f2f1 	udiv	r2, r5, r1
 801f3ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801f3f2:	fb01 5212 	mls	r2, r1, r2, r5
 801f3f6:	b292      	uxth	r2, r2
 801f3f8:	fb02 f303 	mul.w	r3, r2, r3
 801f3fc:	6822      	ldr	r2, [r4, #0]
 801f3fe:	f842 8003 	str.w	r8, [r2, r3]
 801f402:	2301      	movs	r3, #1
 801f404:	9a08      	ldr	r2, [sp, #32]
 801f406:	7013      	strb	r3, [r2, #0]
 801f408:	f1b9 0f00 	cmp.w	r9, #0
 801f40c:	d0af      	beq.n	801f36e <uxr_receive_reliable_message+0x22>
 801f40e:	89a6      	ldrh	r6, [r4, #12]
 801f410:	2101      	movs	r1, #1
 801f412:	4630      	mov	r0, r6
 801f414:	f000 fc54 	bl	801fcc0 <uxr_seq_num_add>
 801f418:	8921      	ldrh	r1, [r4, #8]
 801f41a:	6863      	ldr	r3, [r4, #4]
 801f41c:	4606      	mov	r6, r0
 801f41e:	fbb0 f2f1 	udiv	r2, r0, r1
 801f422:	fbb3 f3f1 	udiv	r3, r3, r1
 801f426:	fb01 0212 	mls	r2, r1, r2, r0
 801f42a:	6820      	ldr	r0, [r4, #0]
 801f42c:	b292      	uxth	r2, r2
 801f42e:	fb02 f303 	mul.w	r3, r2, r3
 801f432:	3304      	adds	r3, #4
 801f434:	4418      	add	r0, r3
 801f436:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d097      	beq.n	801f36e <uxr_receive_reliable_message+0x22>
 801f43e:	6923      	ldr	r3, [r4, #16]
 801f440:	4798      	blx	r3
 801f442:	2802      	cmp	r0, #2
 801f444:	d002      	beq.n	801f44c <uxr_receive_reliable_message+0x100>
 801f446:	2801      	cmp	r0, #1
 801f448:	d0e2      	beq.n	801f410 <uxr_receive_reliable_message+0xc4>
 801f44a:	e790      	b.n	801f36e <uxr_receive_reliable_message+0x22>
 801f44c:	2601      	movs	r6, #1
 801f44e:	e78f      	b.n	801f370 <uxr_receive_reliable_message+0x24>

0801f450 <uxr_next_input_reliable_buffer_available>:
 801f450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f454:	4604      	mov	r4, r0
 801f456:	460f      	mov	r7, r1
 801f458:	8980      	ldrh	r0, [r0, #12]
 801f45a:	2101      	movs	r1, #1
 801f45c:	4690      	mov	r8, r2
 801f45e:	f000 fc2f 	bl	801fcc0 <uxr_seq_num_add>
 801f462:	8922      	ldrh	r2, [r4, #8]
 801f464:	6866      	ldr	r6, [r4, #4]
 801f466:	fbb0 f3f2 	udiv	r3, r0, r2
 801f46a:	fbb6 f6f2 	udiv	r6, r6, r2
 801f46e:	fb02 0313 	mls	r3, r2, r3, r0
 801f472:	b29b      	uxth	r3, r3
 801f474:	fb03 f606 	mul.w	r6, r3, r6
 801f478:	6823      	ldr	r3, [r4, #0]
 801f47a:	3604      	adds	r6, #4
 801f47c:	441e      	add	r6, r3
 801f47e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801f482:	f1b9 0f00 	cmp.w	r9, #0
 801f486:	d023      	beq.n	801f4d0 <uxr_next_input_reliable_buffer_available+0x80>
 801f488:	4605      	mov	r5, r0
 801f48a:	6923      	ldr	r3, [r4, #16]
 801f48c:	4630      	mov	r0, r6
 801f48e:	4798      	blx	r3
 801f490:	4682      	mov	sl, r0
 801f492:	b300      	cbz	r0, 801f4d6 <uxr_next_input_reliable_buffer_available+0x86>
 801f494:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801f498:	2101      	movs	r1, #1
 801f49a:	4650      	mov	r0, sl
 801f49c:	f000 fc10 	bl	801fcc0 <uxr_seq_num_add>
 801f4a0:	8921      	ldrh	r1, [r4, #8]
 801f4a2:	4682      	mov	sl, r0
 801f4a4:	6863      	ldr	r3, [r4, #4]
 801f4a6:	6820      	ldr	r0, [r4, #0]
 801f4a8:	fbba f2f1 	udiv	r2, sl, r1
 801f4ac:	fbb3 f3f1 	udiv	r3, r3, r1
 801f4b0:	fb01 a212 	mls	r2, r1, r2, sl
 801f4b4:	b292      	uxth	r2, r2
 801f4b6:	fb02 f303 	mul.w	r3, r2, r3
 801f4ba:	3304      	adds	r3, #4
 801f4bc:	4418      	add	r0, r3
 801f4be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801f4c2:	b12b      	cbz	r3, 801f4d0 <uxr_next_input_reliable_buffer_available+0x80>
 801f4c4:	6923      	ldr	r3, [r4, #16]
 801f4c6:	4798      	blx	r3
 801f4c8:	2802      	cmp	r0, #2
 801f4ca:	d01b      	beq.n	801f504 <uxr_next_input_reliable_buffer_available+0xb4>
 801f4cc:	2801      	cmp	r0, #1
 801f4ce:	d0e3      	beq.n	801f498 <uxr_next_input_reliable_buffer_available+0x48>
 801f4d0:	2000      	movs	r0, #0
 801f4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4d6:	464a      	mov	r2, r9
 801f4d8:	4631      	mov	r1, r6
 801f4da:	4638      	mov	r0, r7
 801f4dc:	f7f4 fe60 	bl	80141a0 <ucdr_init_buffer>
 801f4e0:	8921      	ldrh	r1, [r4, #8]
 801f4e2:	6863      	ldr	r3, [r4, #4]
 801f4e4:	2001      	movs	r0, #1
 801f4e6:	fbb5 f2f1 	udiv	r2, r5, r1
 801f4ea:	fbb3 f3f1 	udiv	r3, r3, r1
 801f4ee:	fb01 5212 	mls	r2, r1, r2, r5
 801f4f2:	b292      	uxth	r2, r2
 801f4f4:	fb02 f303 	mul.w	r3, r2, r3
 801f4f8:	6822      	ldr	r2, [r4, #0]
 801f4fa:	f842 a003 	str.w	sl, [r2, r3]
 801f4fe:	81a5      	strh	r5, [r4, #12]
 801f500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f504:	8920      	ldrh	r0, [r4, #8]
 801f506:	eb06 0108 	add.w	r1, r6, r8
 801f50a:	6863      	ldr	r3, [r4, #4]
 801f50c:	eba9 0208 	sub.w	r2, r9, r8
 801f510:	fbb5 f6f0 	udiv	r6, r5, r0
 801f514:	fbb3 f3f0 	udiv	r3, r3, r0
 801f518:	fb00 5516 	mls	r5, r0, r6, r5
 801f51c:	2000      	movs	r0, #0
 801f51e:	b2ad      	uxth	r5, r5
 801f520:	fb03 f505 	mul.w	r5, r3, r5
 801f524:	6823      	ldr	r3, [r4, #0]
 801f526:	5158      	str	r0, [r3, r5]
 801f528:	4638      	mov	r0, r7
 801f52a:	f7f4 fe39 	bl	80141a0 <ucdr_init_buffer>
 801f52e:	4638      	mov	r0, r7
 801f530:	4622      	mov	r2, r4
 801f532:	4903      	ldr	r1, [pc, #12]	; (801f540 <uxr_next_input_reliable_buffer_available+0xf0>)
 801f534:	f7f4 fe08 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 801f538:	2001      	movs	r0, #1
 801f53a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801f53e:	e7c8      	b.n	801f4d2 <uxr_next_input_reliable_buffer_available+0x82>
 801f540:	0801f251 	.word	0x0801f251

0801f544 <uxr_process_heartbeat>:
 801f544:	b538      	push	{r3, r4, r5, lr}
 801f546:	4611      	mov	r1, r2
 801f548:	4604      	mov	r4, r0
 801f54a:	89c0      	ldrh	r0, [r0, #14]
 801f54c:	4615      	mov	r5, r2
 801f54e:	f000 fbbf 	bl	801fcd0 <uxr_seq_num_cmp>
 801f552:	2800      	cmp	r0, #0
 801f554:	bfb8      	it	lt
 801f556:	81e5      	strhlt	r5, [r4, #14]
 801f558:	bd38      	pop	{r3, r4, r5, pc}
 801f55a:	bf00      	nop

0801f55c <uxr_compute_acknack>:
 801f55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f560:	8903      	ldrh	r3, [r0, #8]
 801f562:	4604      	mov	r4, r0
 801f564:	460f      	mov	r7, r1
 801f566:	8985      	ldrh	r5, [r0, #12]
 801f568:	b1db      	cbz	r3, 801f5a2 <uxr_compute_acknack+0x46>
 801f56a:	4628      	mov	r0, r5
 801f56c:	2601      	movs	r6, #1
 801f56e:	e004      	b.n	801f57a <uxr_compute_acknack+0x1e>
 801f570:	4566      	cmp	r6, ip
 801f572:	f106 0601 	add.w	r6, r6, #1
 801f576:	d214      	bcs.n	801f5a2 <uxr_compute_acknack+0x46>
 801f578:	89a0      	ldrh	r0, [r4, #12]
 801f57a:	b2b1      	uxth	r1, r6
 801f57c:	f000 fba0 	bl	801fcc0 <uxr_seq_num_add>
 801f580:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801f584:	fbb0 f2fc 	udiv	r2, r0, ip
 801f588:	e9d4 1300 	ldrd	r1, r3, [r4]
 801f58c:	fb0c 0212 	mls	r2, ip, r2, r0
 801f590:	fbb3 f3fc 	udiv	r3, r3, ip
 801f594:	b292      	uxth	r2, r2
 801f596:	fb02 f303 	mul.w	r3, r2, r3
 801f59a:	58cb      	ldr	r3, [r1, r3]
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d1e7      	bne.n	801f570 <uxr_compute_acknack+0x14>
 801f5a0:	4605      	mov	r5, r0
 801f5a2:	803d      	strh	r5, [r7, #0]
 801f5a4:	2101      	movs	r1, #1
 801f5a6:	89e6      	ldrh	r6, [r4, #14]
 801f5a8:	4628      	mov	r0, r5
 801f5aa:	f000 fb8d 	bl	801fcc8 <uxr_seq_num_sub>
 801f5ae:	4601      	mov	r1, r0
 801f5b0:	4630      	mov	r0, r6
 801f5b2:	f000 fb89 	bl	801fcc8 <uxr_seq_num_sub>
 801f5b6:	4606      	mov	r6, r0
 801f5b8:	b328      	cbz	r0, 801f606 <uxr_compute_acknack+0xaa>
 801f5ba:	f04f 0900 	mov.w	r9, #0
 801f5be:	f04f 0801 	mov.w	r8, #1
 801f5c2:	464d      	mov	r5, r9
 801f5c4:	fa1f f189 	uxth.w	r1, r9
 801f5c8:	8838      	ldrh	r0, [r7, #0]
 801f5ca:	f000 fb79 	bl	801fcc0 <uxr_seq_num_add>
 801f5ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801f5d2:	6861      	ldr	r1, [r4, #4]
 801f5d4:	fa08 fe09 	lsl.w	lr, r8, r9
 801f5d8:	6822      	ldr	r2, [r4, #0]
 801f5da:	f109 0901 	add.w	r9, r9, #1
 801f5de:	ea4e 0e05 	orr.w	lr, lr, r5
 801f5e2:	fbb0 f3fc 	udiv	r3, r0, ip
 801f5e6:	fbb1 f1fc 	udiv	r1, r1, ip
 801f5ea:	fb03 001c 	mls	r0, r3, ip, r0
 801f5ee:	b283      	uxth	r3, r0
 801f5f0:	fb01 f303 	mul.w	r3, r1, r3
 801f5f4:	58d3      	ldr	r3, [r2, r3]
 801f5f6:	b90b      	cbnz	r3, 801f5fc <uxr_compute_acknack+0xa0>
 801f5f8:	fa1f f58e 	uxth.w	r5, lr
 801f5fc:	454e      	cmp	r6, r9
 801f5fe:	d1e1      	bne.n	801f5c4 <uxr_compute_acknack+0x68>
 801f600:	4628      	mov	r0, r5
 801f602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f606:	4605      	mov	r5, r0
 801f608:	4628      	mov	r0, r5
 801f60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f60e:	bf00      	nop

0801f610 <uxr_init_output_best_effort_stream>:
 801f610:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801f614:	6001      	str	r1, [r0, #0]
 801f616:	7303      	strb	r3, [r0, #12]
 801f618:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801f61c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801f620:	4770      	bx	lr
 801f622:	bf00      	nop

0801f624 <uxr_reset_output_best_effort_stream>:
 801f624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f628:	7b03      	ldrb	r3, [r0, #12]
 801f62a:	81c2      	strh	r2, [r0, #14]
 801f62c:	6043      	str	r3, [r0, #4]
 801f62e:	4770      	bx	lr

0801f630 <uxr_prepare_best_effort_buffer_to_write>:
 801f630:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f632:	4604      	mov	r4, r0
 801f634:	b083      	sub	sp, #12
 801f636:	6840      	ldr	r0, [r0, #4]
 801f638:	460d      	mov	r5, r1
 801f63a:	4616      	mov	r6, r2
 801f63c:	f7fa f882 	bl	8019744 <uxr_submessage_padding>
 801f640:	6863      	ldr	r3, [r4, #4]
 801f642:	4418      	add	r0, r3
 801f644:	68a3      	ldr	r3, [r4, #8]
 801f646:	1942      	adds	r2, r0, r5
 801f648:	4293      	cmp	r3, r2
 801f64a:	bf2c      	ite	cs
 801f64c:	2701      	movcs	r7, #1
 801f64e:	2700      	movcc	r7, #0
 801f650:	d202      	bcs.n	801f658 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801f652:	4638      	mov	r0, r7
 801f654:	b003      	add	sp, #12
 801f656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f658:	9000      	str	r0, [sp, #0]
 801f65a:	2300      	movs	r3, #0
 801f65c:	4630      	mov	r0, r6
 801f65e:	6821      	ldr	r1, [r4, #0]
 801f660:	f7f4 fd8c 	bl	801417c <ucdr_init_buffer_origin_offset>
 801f664:	6861      	ldr	r1, [r4, #4]
 801f666:	4638      	mov	r0, r7
 801f668:	4429      	add	r1, r5
 801f66a:	6061      	str	r1, [r4, #4]
 801f66c:	b003      	add	sp, #12
 801f66e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f670 <uxr_prepare_best_effort_buffer_to_send>:
 801f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f674:	4604      	mov	r4, r0
 801f676:	461d      	mov	r5, r3
 801f678:	6840      	ldr	r0, [r0, #4]
 801f67a:	7b23      	ldrb	r3, [r4, #12]
 801f67c:	4298      	cmp	r0, r3
 801f67e:	bf8c      	ite	hi
 801f680:	2601      	movhi	r6, #1
 801f682:	2600      	movls	r6, #0
 801f684:	d802      	bhi.n	801f68c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801f686:	4630      	mov	r0, r6
 801f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f68c:	4688      	mov	r8, r1
 801f68e:	89e0      	ldrh	r0, [r4, #14]
 801f690:	2101      	movs	r1, #1
 801f692:	4617      	mov	r7, r2
 801f694:	f000 fb14 	bl	801fcc0 <uxr_seq_num_add>
 801f698:	6823      	ldr	r3, [r4, #0]
 801f69a:	81e0      	strh	r0, [r4, #14]
 801f69c:	8028      	strh	r0, [r5, #0]
 801f69e:	4630      	mov	r0, r6
 801f6a0:	f8c8 3000 	str.w	r3, [r8]
 801f6a4:	6863      	ldr	r3, [r4, #4]
 801f6a6:	603b      	str	r3, [r7, #0]
 801f6a8:	7b23      	ldrb	r3, [r4, #12]
 801f6aa:	6063      	str	r3, [r4, #4]
 801f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f6b0 <on_full_output_buffer>:
 801f6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6b2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f6b6:	460c      	mov	r4, r1
 801f6b8:	6803      	ldr	r3, [r0, #0]
 801f6ba:	4605      	mov	r5, r0
 801f6bc:	7b26      	ldrb	r6, [r4, #12]
 801f6be:	e9d1 1200 	ldrd	r1, r2, [r1]
 801f6c2:	fbb2 f2fc 	udiv	r2, r2, ip
 801f6c6:	eba3 0e01 	sub.w	lr, r3, r1
 801f6ca:	6903      	ldr	r3, [r0, #16]
 801f6cc:	fbbe fef2 	udiv	lr, lr, r2
 801f6d0:	f10e 0e01 	add.w	lr, lr, #1
 801f6d4:	fa1f fe8e 	uxth.w	lr, lr
 801f6d8:	fbbe f7fc 	udiv	r7, lr, ip
 801f6dc:	fb0c ec17 	mls	ip, ip, r7, lr
 801f6e0:	fa1f fc8c 	uxth.w	ip, ip
 801f6e4:	fb02 fc0c 	mul.w	ip, r2, ip
 801f6e8:	f851 200c 	ldr.w	r2, [r1, ip]
 801f6ec:	44b4      	add	ip, r6
 801f6ee:	1b92      	subs	r2, r2, r6
 801f6f0:	f10c 0c08 	add.w	ip, ip, #8
 801f6f4:	3a04      	subs	r2, #4
 801f6f6:	4461      	add	r1, ip
 801f6f8:	f7f4 fd4a 	bl	8014190 <ucdr_init_buffer_origin>
 801f6fc:	4628      	mov	r0, r5
 801f6fe:	4622      	mov	r2, r4
 801f700:	4902      	ldr	r1, [pc, #8]	; (801f70c <on_full_output_buffer+0x5c>)
 801f702:	f7f4 fd21 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 801f706:	2000      	movs	r0, #0
 801f708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f70a:	bf00      	nop
 801f70c:	0801f6b1 	.word	0x0801f6b1

0801f710 <uxr_init_output_reliable_stream>:
 801f710:	b530      	push	{r4, r5, lr}
 801f712:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801f716:	8103      	strh	r3, [r0, #8]
 801f718:	7304      	strb	r4, [r0, #12]
 801f71a:	e9c0 1200 	strd	r1, r2, [r0]
 801f71e:	b1e3      	cbz	r3, 801f75a <uxr_init_output_reliable_stream+0x4a>
 801f720:	600c      	str	r4, [r1, #0]
 801f722:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801f726:	f1bc 0f01 	cmp.w	ip, #1
 801f72a:	d916      	bls.n	801f75a <uxr_init_output_reliable_stream+0x4a>
 801f72c:	f04f 0e01 	mov.w	lr, #1
 801f730:	6843      	ldr	r3, [r0, #4]
 801f732:	f10e 0501 	add.w	r5, lr, #1
 801f736:	7b04      	ldrb	r4, [r0, #12]
 801f738:	6801      	ldr	r1, [r0, #0]
 801f73a:	fbbe f2fc 	udiv	r2, lr, ip
 801f73e:	fbb3 f3fc 	udiv	r3, r3, ip
 801f742:	fb0c e212 	mls	r2, ip, r2, lr
 801f746:	fa1f fe85 	uxth.w	lr, r5
 801f74a:	b292      	uxth	r2, r2
 801f74c:	fb02 f303 	mul.w	r3, r2, r3
 801f750:	50cc      	str	r4, [r1, r3]
 801f752:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801f756:	45f4      	cmp	ip, lr
 801f758:	d8ea      	bhi.n	801f730 <uxr_init_output_reliable_stream+0x20>
 801f75a:	4b07      	ldr	r3, [pc, #28]	; (801f778 <uxr_init_output_reliable_stream+0x68>)
 801f75c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f764:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801f768:	f8c0 300e 	str.w	r3, [r0, #14]
 801f76c:	2300      	movs	r3, #0
 801f76e:	8242      	strh	r2, [r0, #18]
 801f770:	8403      	strh	r3, [r0, #32]
 801f772:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801f776:	bd30      	pop	{r4, r5, pc}
 801f778:	ffff0000 	.word	0xffff0000
 801f77c:	00000000 	.word	0x00000000

0801f780 <uxr_reset_output_reliable_stream>:
 801f780:	8901      	ldrh	r1, [r0, #8]
 801f782:	b510      	push	{r4, lr}
 801f784:	b1b1      	cbz	r1, 801f7b4 <uxr_reset_output_reliable_stream+0x34>
 801f786:	f04f 0e00 	mov.w	lr, #0
 801f78a:	46f4      	mov	ip, lr
 801f78c:	6843      	ldr	r3, [r0, #4]
 801f78e:	f10e 0e01 	add.w	lr, lr, #1
 801f792:	7b04      	ldrb	r4, [r0, #12]
 801f794:	fbbc f2f1 	udiv	r2, ip, r1
 801f798:	fbb3 f3f1 	udiv	r3, r3, r1
 801f79c:	fb01 c212 	mls	r2, r1, r2, ip
 801f7a0:	fa1f fc8e 	uxth.w	ip, lr
 801f7a4:	b292      	uxth	r2, r2
 801f7a6:	fb02 f303 	mul.w	r3, r2, r3
 801f7aa:	6802      	ldr	r2, [r0, #0]
 801f7ac:	50d4      	str	r4, [r2, r3]
 801f7ae:	8901      	ldrh	r1, [r0, #8]
 801f7b0:	4561      	cmp	r1, ip
 801f7b2:	d8eb      	bhi.n	801f78c <uxr_reset_output_reliable_stream+0xc>
 801f7b4:	4b08      	ldr	r3, [pc, #32]	; (801f7d8 <uxr_reset_output_reliable_stream+0x58>)
 801f7b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f7ba:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801f7d0 <uxr_reset_output_reliable_stream+0x50>
 801f7be:	f8c0 300e 	str.w	r3, [r0, #14]
 801f7c2:	2300      	movs	r3, #0
 801f7c4:	8242      	strh	r2, [r0, #18]
 801f7c6:	8403      	strh	r3, [r0, #32]
 801f7c8:	ed80 7b06 	vstr	d7, [r0, #24]
 801f7cc:	bd10      	pop	{r4, pc}
 801f7ce:	bf00      	nop
 801f7d0:	ffffffff 	.word	0xffffffff
 801f7d4:	7fffffff 	.word	0x7fffffff
 801f7d8:	ffff0000 	.word	0xffff0000

0801f7dc <uxr_prepare_reliable_buffer_to_write>:
 801f7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7e0:	4604      	mov	r4, r0
 801f7e2:	b091      	sub	sp, #68	; 0x44
 801f7e4:	8900      	ldrh	r0, [r0, #8]
 801f7e6:	468b      	mov	fp, r1
 801f7e8:	89e6      	ldrh	r6, [r4, #14]
 801f7ea:	9204      	str	r2, [sp, #16]
 801f7ec:	6865      	ldr	r5, [r4, #4]
 801f7ee:	6823      	ldr	r3, [r4, #0]
 801f7f0:	f894 900c 	ldrb.w	r9, [r4, #12]
 801f7f4:	fbb6 f2f0 	udiv	r2, r6, r0
 801f7f8:	fbb5 f5f0 	udiv	r5, r5, r0
 801f7fc:	fb00 6212 	mls	r2, r0, r2, r6
 801f800:	1f2f      	subs	r7, r5, #4
 801f802:	b292      	uxth	r2, r2
 801f804:	fb05 3202 	mla	r2, r5, r2, r3
 801f808:	1d11      	adds	r1, r2, #4
 801f80a:	f8d2 8000 	ldr.w	r8, [r2]
 801f80e:	9103      	str	r1, [sp, #12]
 801f810:	2800      	cmp	r0, #0
 801f812:	f000 814a 	beq.w	801faaa <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801f816:	f04f 0c00 	mov.w	ip, #0
 801f81a:	46e2      	mov	sl, ip
 801f81c:	4661      	mov	r1, ip
 801f81e:	f10c 0c01 	add.w	ip, ip, #1
 801f822:	fbb1 f2f0 	udiv	r2, r1, r0
 801f826:	fb00 1212 	mls	r2, r0, r2, r1
 801f82a:	fa1f f18c 	uxth.w	r1, ip
 801f82e:	b292      	uxth	r2, r2
 801f830:	fb05 f202 	mul.w	r2, r5, r2
 801f834:	589a      	ldr	r2, [r3, r2]
 801f836:	454a      	cmp	r2, r9
 801f838:	d103      	bne.n	801f842 <uxr_prepare_reliable_buffer_to_write+0x66>
 801f83a:	f10a 0a01 	add.w	sl, sl, #1
 801f83e:	fa1f fa8a 	uxth.w	sl, sl
 801f842:	4281      	cmp	r1, r0
 801f844:	d3eb      	bcc.n	801f81e <uxr_prepare_reliable_buffer_to_write+0x42>
 801f846:	4640      	mov	r0, r8
 801f848:	2104      	movs	r1, #4
 801f84a:	f8cd a014 	str.w	sl, [sp, #20]
 801f84e:	f7f4 fcab 	bl	80141a8 <ucdr_alignment>
 801f852:	4480      	add	r8, r0
 801f854:	eb08 020b 	add.w	r2, r8, fp
 801f858:	42ba      	cmp	r2, r7
 801f85a:	f240 80ca 	bls.w	801f9f2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801f85e:	7b22      	ldrb	r2, [r4, #12]
 801f860:	445a      	add	r2, fp
 801f862:	42ba      	cmp	r2, r7
 801f864:	f240 80b2 	bls.w	801f9cc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801f868:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801f86c:	b2bb      	uxth	r3, r7
 801f86e:	eba2 0209 	sub.w	r2, r2, r9
 801f872:	441a      	add	r2, r3
 801f874:	b292      	uxth	r2, r2
 801f876:	fb0a f902 	mul.w	r9, sl, r2
 801f87a:	9205      	str	r2, [sp, #20]
 801f87c:	45d9      	cmp	r9, fp
 801f87e:	9206      	str	r2, [sp, #24]
 801f880:	f0c0 80b3 	bcc.w	801f9ea <uxr_prepare_reliable_buffer_to_write+0x20e>
 801f884:	f108 0204 	add.w	r2, r8, #4
 801f888:	42ba      	cmp	r2, r7
 801f88a:	f080 80da 	bcs.w	801fa42 <uxr_prepare_reliable_buffer_to_write+0x266>
 801f88e:	f1a3 0904 	sub.w	r9, r3, #4
 801f892:	9b05      	ldr	r3, [sp, #20]
 801f894:	eba9 0908 	sub.w	r9, r9, r8
 801f898:	fa1f f989 	uxth.w	r9, r9
 801f89c:	ebab 0b09 	sub.w	fp, fp, r9
 801f8a0:	fbbb f2f3 	udiv	r2, fp, r3
 801f8a4:	fb03 b312 	mls	r3, r3, r2, fp
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	f040 80c4 	bne.w	801fa36 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801f8ae:	b293      	uxth	r3, r2
 801f8b0:	4553      	cmp	r3, sl
 801f8b2:	f200 809a 	bhi.w	801f9ea <uxr_prepare_reliable_buffer_to_write+0x20e>
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	f000 80f9 	beq.w	801faae <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801f8bc:	f8cd 801c 	str.w	r8, [sp, #28]
 801f8c0:	f04f 0a00 	mov.w	sl, #0
 801f8c4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f8c8:	f10d 0b20 	add.w	fp, sp, #32
 801f8cc:	9505      	str	r5, [sp, #20]
 801f8ce:	461d      	mov	r5, r3
 801f8d0:	e000      	b.n	801f8d4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801f8d2:	46c1      	mov	r9, r8
 801f8d4:	8922      	ldrh	r2, [r4, #8]
 801f8d6:	4658      	mov	r0, fp
 801f8d8:	6863      	ldr	r3, [r4, #4]
 801f8da:	f10a 0a01 	add.w	sl, sl, #1
 801f8de:	fbb6 f1f2 	udiv	r1, r6, r2
 801f8e2:	fbb3 f3f2 	udiv	r3, r3, r2
 801f8e6:	fb02 6111 	mls	r1, r2, r1, r6
 801f8ea:	463a      	mov	r2, r7
 801f8ec:	b289      	uxth	r1, r1
 801f8ee:	fb03 f101 	mul.w	r1, r3, r1
 801f8f2:	6823      	ldr	r3, [r4, #0]
 801f8f4:	3104      	adds	r1, #4
 801f8f6:	4419      	add	r1, r3
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801f8fe:	f8cd c000 	str.w	ip, [sp]
 801f902:	f7f4 fc3b 	bl	801417c <ucdr_init_buffer_origin_offset>
 801f906:	464a      	mov	r2, r9
 801f908:	2300      	movs	r3, #0
 801f90a:	210d      	movs	r1, #13
 801f90c:	4658      	mov	r0, fp
 801f90e:	f7f9 fed9 	bl	80196c4 <uxr_buffer_submessage_header>
 801f912:	8921      	ldrh	r1, [r4, #8]
 801f914:	6863      	ldr	r3, [r4, #4]
 801f916:	4630      	mov	r0, r6
 801f918:	fbb6 f2f1 	udiv	r2, r6, r1
 801f91c:	fbb3 f3f1 	udiv	r3, r3, r1
 801f920:	fb01 6212 	mls	r2, r1, r2, r6
 801f924:	2101      	movs	r1, #1
 801f926:	b292      	uxth	r2, r2
 801f928:	fb02 f303 	mul.w	r3, r2, r3
 801f92c:	6822      	ldr	r2, [r4, #0]
 801f92e:	50d7      	str	r7, [r2, r3]
 801f930:	f000 f9c6 	bl	801fcc0 <uxr_seq_num_add>
 801f934:	4606      	mov	r6, r0
 801f936:	fa1f f38a 	uxth.w	r3, sl
 801f93a:	429d      	cmp	r5, r3
 801f93c:	d8c9      	bhi.n	801f8d2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801f93e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f942:	9d05      	ldr	r5, [sp, #20]
 801f944:	8920      	ldrh	r0, [r4, #8]
 801f946:	463a      	mov	r2, r7
 801f948:	6863      	ldr	r3, [r4, #4]
 801f94a:	fbb6 f1f0 	udiv	r1, r6, r0
 801f94e:	fbb3 f3f0 	udiv	r3, r3, r0
 801f952:	fb00 6111 	mls	r1, r0, r1, r6
 801f956:	4658      	mov	r0, fp
 801f958:	b289      	uxth	r1, r1
 801f95a:	fb01 f303 	mul.w	r3, r1, r3
 801f95e:	6821      	ldr	r1, [r4, #0]
 801f960:	3304      	adds	r3, #4
 801f962:	4419      	add	r1, r3
 801f964:	2300      	movs	r3, #0
 801f966:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801f96a:	9700      	str	r7, [sp, #0]
 801f96c:	f7f4 fc06 	bl	801417c <ucdr_init_buffer_origin_offset>
 801f970:	9f06      	ldr	r7, [sp, #24]
 801f972:	4658      	mov	r0, fp
 801f974:	2302      	movs	r3, #2
 801f976:	b2ba      	uxth	r2, r7
 801f978:	210d      	movs	r1, #13
 801f97a:	f7f9 fea3 	bl	80196c4 <uxr_buffer_submessage_header>
 801f97e:	f108 0104 	add.w	r1, r8, #4
 801f982:	9b03      	ldr	r3, [sp, #12]
 801f984:	f1a5 0208 	sub.w	r2, r5, #8
 801f988:	8925      	ldrh	r5, [r4, #8]
 801f98a:	440b      	add	r3, r1
 801f98c:	eba2 0208 	sub.w	r2, r2, r8
 801f990:	fbb6 f0f5 	udiv	r0, r6, r5
 801f994:	4619      	mov	r1, r3
 801f996:	6863      	ldr	r3, [r4, #4]
 801f998:	fb05 6010 	mls	r0, r5, r0, r6
 801f99c:	fbb3 f3f5 	udiv	r3, r3, r5
 801f9a0:	b280      	uxth	r0, r0
 801f9a2:	6825      	ldr	r5, [r4, #0]
 801f9a4:	fb00 f303 	mul.w	r3, r0, r3
 801f9a8:	7b20      	ldrb	r0, [r4, #12]
 801f9aa:	3004      	adds	r0, #4
 801f9ac:	4438      	add	r0, r7
 801f9ae:	50e8      	str	r0, [r5, r3]
 801f9b0:	9d04      	ldr	r5, [sp, #16]
 801f9b2:	4628      	mov	r0, r5
 801f9b4:	f7f4 fbf4 	bl	80141a0 <ucdr_init_buffer>
 801f9b8:	4628      	mov	r0, r5
 801f9ba:	4622      	mov	r2, r4
 801f9bc:	493d      	ldr	r1, [pc, #244]	; (801fab4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801f9be:	f7f4 fbc3 	bl	8014148 <ucdr_set_on_full_buffer_callback>
 801f9c2:	2001      	movs	r0, #1
 801f9c4:	81e6      	strh	r6, [r4, #14]
 801f9c6:	b011      	add	sp, #68	; 0x44
 801f9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9cc:	2101      	movs	r1, #1
 801f9ce:	89e0      	ldrh	r0, [r4, #14]
 801f9d0:	f000 f976 	bl	801fcc0 <uxr_seq_num_add>
 801f9d4:	4605      	mov	r5, r0
 801f9d6:	8921      	ldrh	r1, [r4, #8]
 801f9d8:	8a60      	ldrh	r0, [r4, #18]
 801f9da:	f000 f971 	bl	801fcc0 <uxr_seq_num_add>
 801f9de:	4601      	mov	r1, r0
 801f9e0:	4628      	mov	r0, r5
 801f9e2:	f000 f975 	bl	801fcd0 <uxr_seq_num_cmp>
 801f9e6:	2800      	cmp	r0, #0
 801f9e8:	dd44      	ble.n	801fa74 <uxr_prepare_reliable_buffer_to_write+0x298>
 801f9ea:	2000      	movs	r0, #0
 801f9ec:	b011      	add	sp, #68	; 0x44
 801f9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9f2:	8921      	ldrh	r1, [r4, #8]
 801f9f4:	8a60      	ldrh	r0, [r4, #18]
 801f9f6:	9205      	str	r2, [sp, #20]
 801f9f8:	f000 f962 	bl	801fcc0 <uxr_seq_num_add>
 801f9fc:	4601      	mov	r1, r0
 801f9fe:	4630      	mov	r0, r6
 801fa00:	f000 f966 	bl	801fcd0 <uxr_seq_num_cmp>
 801fa04:	2800      	cmp	r0, #0
 801fa06:	9a05      	ldr	r2, [sp, #20]
 801fa08:	dcef      	bgt.n	801f9ea <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fa0a:	8925      	ldrh	r5, [r4, #8]
 801fa0c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801fa10:	fbb6 f4f5 	udiv	r4, r6, r5
 801fa14:	fbb3 f3f5 	udiv	r3, r3, r5
 801fa18:	fb05 6414 	mls	r4, r5, r4, r6
 801fa1c:	b2a4      	uxth	r4, r4
 801fa1e:	fb04 f303 	mul.w	r3, r4, r3
 801fa22:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801fa26:	50fa      	str	r2, [r7, r3]
 801fa28:	2300      	movs	r3, #0
 801fa2a:	f8cd 8000 	str.w	r8, [sp]
 801fa2e:	f7f4 fba5 	bl	801417c <ucdr_init_buffer_origin_offset>
 801fa32:	2001      	movs	r0, #1
 801fa34:	e7da      	b.n	801f9ec <uxr_prepare_reliable_buffer_to_write+0x210>
 801fa36:	3201      	adds	r2, #1
 801fa38:	9306      	str	r3, [sp, #24]
 801fa3a:	b293      	uxth	r3, r2
 801fa3c:	4553      	cmp	r3, sl
 801fa3e:	d8d4      	bhi.n	801f9ea <uxr_prepare_reliable_buffer_to_write+0x20e>
 801fa40:	e739      	b.n	801f8b6 <uxr_prepare_reliable_buffer_to_write+0xda>
 801fa42:	4630      	mov	r0, r6
 801fa44:	2101      	movs	r1, #1
 801fa46:	9307      	str	r3, [sp, #28]
 801fa48:	f000 f93a 	bl	801fcc0 <uxr_seq_num_add>
 801fa4c:	4606      	mov	r6, r0
 801fa4e:	8920      	ldrh	r0, [r4, #8]
 801fa50:	6862      	ldr	r2, [r4, #4]
 801fa52:	fbb6 f1f0 	udiv	r1, r6, r0
 801fa56:	fbb2 f2f0 	udiv	r2, r2, r0
 801fa5a:	fb00 6111 	mls	r1, r0, r1, r6
 801fa5e:	b289      	uxth	r1, r1
 801fa60:	fb01 f202 	mul.w	r2, r1, r2
 801fa64:	6821      	ldr	r1, [r4, #0]
 801fa66:	3204      	adds	r2, #4
 801fa68:	188b      	adds	r3, r1, r2
 801fa6a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801fa6e:	9303      	str	r3, [sp, #12]
 801fa70:	9b07      	ldr	r3, [sp, #28]
 801fa72:	e70c      	b.n	801f88e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801fa74:	8921      	ldrh	r1, [r4, #8]
 801fa76:	6863      	ldr	r3, [r4, #4]
 801fa78:	9804      	ldr	r0, [sp, #16]
 801fa7a:	fbb5 f2f1 	udiv	r2, r5, r1
 801fa7e:	fbb3 f3f1 	udiv	r3, r3, r1
 801fa82:	fb01 5212 	mls	r2, r1, r2, r5
 801fa86:	6821      	ldr	r1, [r4, #0]
 801fa88:	b292      	uxth	r2, r2
 801fa8a:	fb02 f303 	mul.w	r3, r2, r3
 801fa8e:	7b22      	ldrb	r2, [r4, #12]
 801fa90:	3304      	adds	r3, #4
 801fa92:	445a      	add	r2, fp
 801fa94:	4419      	add	r1, r3
 801fa96:	f841 2c04 	str.w	r2, [r1, #-4]
 801fa9a:	7b23      	ldrb	r3, [r4, #12]
 801fa9c:	9300      	str	r3, [sp, #0]
 801fa9e:	2300      	movs	r3, #0
 801faa0:	f7f4 fb6c 	bl	801417c <ucdr_init_buffer_origin_offset>
 801faa4:	2001      	movs	r0, #1
 801faa6:	81e5      	strh	r5, [r4, #14]
 801faa8:	e7a0      	b.n	801f9ec <uxr_prepare_reliable_buffer_to_write+0x210>
 801faaa:	4682      	mov	sl, r0
 801faac:	e6cb      	b.n	801f846 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801faae:	f10d 0b20 	add.w	fp, sp, #32
 801fab2:	e747      	b.n	801f944 <uxr_prepare_reliable_buffer_to_write+0x168>
 801fab4:	0801f6b1 	.word	0x0801f6b1

0801fab8 <uxr_prepare_next_reliable_buffer_to_send>:
 801fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801faba:	4604      	mov	r4, r0
 801fabc:	461d      	mov	r5, r3
 801fabe:	460f      	mov	r7, r1
 801fac0:	8a00      	ldrh	r0, [r0, #16]
 801fac2:	2101      	movs	r1, #1
 801fac4:	4616      	mov	r6, r2
 801fac6:	f000 f8fb 	bl	801fcc0 <uxr_seq_num_add>
 801faca:	8028      	strh	r0, [r5, #0]
 801facc:	8922      	ldrh	r2, [r4, #8]
 801face:	6863      	ldr	r3, [r4, #4]
 801fad0:	fbb0 f1f2 	udiv	r1, r0, r2
 801fad4:	fbb3 f3f2 	udiv	r3, r3, r2
 801fad8:	fb02 0c11 	mls	ip, r2, r1, r0
 801fadc:	89e1      	ldrh	r1, [r4, #14]
 801fade:	fa1f fc8c 	uxth.w	ip, ip
 801fae2:	fb0c fc03 	mul.w	ip, ip, r3
 801fae6:	6823      	ldr	r3, [r4, #0]
 801fae8:	f10c 0c04 	add.w	ip, ip, #4
 801faec:	4463      	add	r3, ip
 801faee:	603b      	str	r3, [r7, #0]
 801faf0:	6823      	ldr	r3, [r4, #0]
 801faf2:	449c      	add	ip, r3
 801faf4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801faf8:	6033      	str	r3, [r6, #0]
 801fafa:	f000 f8e9 	bl	801fcd0 <uxr_seq_num_cmp>
 801fafe:	2800      	cmp	r0, #0
 801fb00:	dd01      	ble.n	801fb06 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801fb02:	2000      	movs	r0, #0
 801fb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb06:	7b23      	ldrb	r3, [r4, #12]
 801fb08:	6832      	ldr	r2, [r6, #0]
 801fb0a:	429a      	cmp	r2, r3
 801fb0c:	d9f9      	bls.n	801fb02 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801fb0e:	8a61      	ldrh	r1, [r4, #18]
 801fb10:	8a20      	ldrh	r0, [r4, #16]
 801fb12:	f000 f8d9 	bl	801fcc8 <uxr_seq_num_sub>
 801fb16:	8923      	ldrh	r3, [r4, #8]
 801fb18:	4283      	cmp	r3, r0
 801fb1a:	d0f2      	beq.n	801fb02 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801fb1c:	8828      	ldrh	r0, [r5, #0]
 801fb1e:	89e3      	ldrh	r3, [r4, #14]
 801fb20:	8220      	strh	r0, [r4, #16]
 801fb22:	4298      	cmp	r0, r3
 801fb24:	d001      	beq.n	801fb2a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801fb26:	2001      	movs	r0, #1
 801fb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb2a:	2101      	movs	r1, #1
 801fb2c:	f000 f8c8 	bl	801fcc0 <uxr_seq_num_add>
 801fb30:	4603      	mov	r3, r0
 801fb32:	2001      	movs	r0, #1
 801fb34:	81e3      	strh	r3, [r4, #14]
 801fb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fb38 <uxr_update_output_stream_heartbeat_timestamp>:
 801fb38:	b570      	push	{r4, r5, r6, lr}
 801fb3a:	8a01      	ldrh	r1, [r0, #16]
 801fb3c:	4604      	mov	r4, r0
 801fb3e:	8a40      	ldrh	r0, [r0, #18]
 801fb40:	4615      	mov	r5, r2
 801fb42:	461e      	mov	r6, r3
 801fb44:	f000 f8c4 	bl	801fcd0 <uxr_seq_num_cmp>
 801fb48:	2800      	cmp	r0, #0
 801fb4a:	db07      	blt.n	801fb5c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801fb4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fb50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fb54:	2000      	movs	r0, #0
 801fb56:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801fb5a:	bd70      	pop	{r4, r5, r6, pc}
 801fb5c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801fb60:	b940      	cbnz	r0, 801fb74 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801fb62:	2301      	movs	r3, #1
 801fb64:	f884 3020 	strb.w	r3, [r4, #32]
 801fb68:	3564      	adds	r5, #100	; 0x64
 801fb6a:	f146 0600 	adc.w	r6, r6, #0
 801fb6e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801fb72:	bd70      	pop	{r4, r5, r6, pc}
 801fb74:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801fb78:	4295      	cmp	r5, r2
 801fb7a:	eb76 0303 	sbcs.w	r3, r6, r3
 801fb7e:	db04      	blt.n	801fb8a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801fb80:	1c43      	adds	r3, r0, #1
 801fb82:	2001      	movs	r0, #1
 801fb84:	f884 3020 	strb.w	r3, [r4, #32]
 801fb88:	e7ee      	b.n	801fb68 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801fb8a:	2000      	movs	r0, #0
 801fb8c:	e7ec      	b.n	801fb68 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801fb8e:	bf00      	nop

0801fb90 <uxr_begin_output_nack_buffer_it>:
 801fb90:	8a40      	ldrh	r0, [r0, #18]
 801fb92:	4770      	bx	lr

0801fb94 <uxr_next_reliable_nack_buffer_to_send>:
 801fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb98:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801fb9c:	b197      	cbz	r7, 801fbc4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801fb9e:	4680      	mov	r8, r0
 801fba0:	460d      	mov	r5, r1
 801fba2:	4616      	mov	r6, r2
 801fba4:	461c      	mov	r4, r3
 801fba6:	8818      	ldrh	r0, [r3, #0]
 801fba8:	2101      	movs	r1, #1
 801fbaa:	f000 f889 	bl	801fcc0 <uxr_seq_num_add>
 801fbae:	8020      	strh	r0, [r4, #0]
 801fbb0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801fbb4:	f000 f88c 	bl	801fcd0 <uxr_seq_num_cmp>
 801fbb8:	2800      	cmp	r0, #0
 801fbba:	dd06      	ble.n	801fbca <uxr_next_reliable_nack_buffer_to_send+0x36>
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	461f      	mov	r7, r3
 801fbc0:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801fbc4:	4638      	mov	r0, r7
 801fbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbca:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801fbce:	8820      	ldrh	r0, [r4, #0]
 801fbd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fbd4:	fbb0 f3f2 	udiv	r3, r0, r2
 801fbd8:	fbb1 fcf2 	udiv	ip, r1, r2
 801fbdc:	fb02 0313 	mls	r3, r2, r3, r0
 801fbe0:	b29b      	uxth	r3, r3
 801fbe2:	fb03 fc0c 	mul.w	ip, r3, ip
 801fbe6:	f8d8 3000 	ldr.w	r3, [r8]
 801fbea:	f10c 0c04 	add.w	ip, ip, #4
 801fbee:	4463      	add	r3, ip
 801fbf0:	602b      	str	r3, [r5, #0]
 801fbf2:	f8d8 3000 	ldr.w	r3, [r8]
 801fbf6:	4463      	add	r3, ip
 801fbf8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801fbfc:	6033      	str	r3, [r6, #0]
 801fbfe:	f898 200c 	ldrb.w	r2, [r8, #12]
 801fc02:	429a      	cmp	r2, r3
 801fc04:	d0d0      	beq.n	801fba8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801fc06:	e7dd      	b.n	801fbc4 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801fc08 <uxr_process_acknack>:
 801fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc0a:	4604      	mov	r4, r0
 801fc0c:	460e      	mov	r6, r1
 801fc0e:	4610      	mov	r0, r2
 801fc10:	2101      	movs	r1, #1
 801fc12:	f000 f859 	bl	801fcc8 <uxr_seq_num_sub>
 801fc16:	8a61      	ldrh	r1, [r4, #18]
 801fc18:	f000 f856 	bl	801fcc8 <uxr_seq_num_sub>
 801fc1c:	b1c8      	cbz	r0, 801fc52 <uxr_process_acknack+0x4a>
 801fc1e:	4605      	mov	r5, r0
 801fc20:	2700      	movs	r7, #0
 801fc22:	2101      	movs	r1, #1
 801fc24:	8a60      	ldrh	r0, [r4, #18]
 801fc26:	f000 f84b 	bl	801fcc0 <uxr_seq_num_add>
 801fc2a:	8923      	ldrh	r3, [r4, #8]
 801fc2c:	6862      	ldr	r2, [r4, #4]
 801fc2e:	3701      	adds	r7, #1
 801fc30:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801fc34:	6821      	ldr	r1, [r4, #0]
 801fc36:	42bd      	cmp	r5, r7
 801fc38:	8260      	strh	r0, [r4, #18]
 801fc3a:	fbb0 fef3 	udiv	lr, r0, r3
 801fc3e:	fbb2 f2f3 	udiv	r2, r2, r3
 801fc42:	fb03 031e 	mls	r3, r3, lr, r0
 801fc46:	b29b      	uxth	r3, r3
 801fc48:	fb02 f303 	mul.w	r3, r2, r3
 801fc4c:	f841 c003 	str.w	ip, [r1, r3]
 801fc50:	d1e7      	bne.n	801fc22 <uxr_process_acknack+0x1a>
 801fc52:	3e00      	subs	r6, #0
 801fc54:	f04f 0300 	mov.w	r3, #0
 801fc58:	bf18      	it	ne
 801fc5a:	2601      	movne	r6, #1
 801fc5c:	f884 3020 	strb.w	r3, [r4, #32]
 801fc60:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801fc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc66:	bf00      	nop

0801fc68 <uxr_is_output_up_to_date>:
 801fc68:	8a01      	ldrh	r1, [r0, #16]
 801fc6a:	8a40      	ldrh	r0, [r0, #18]
 801fc6c:	b508      	push	{r3, lr}
 801fc6e:	f000 f82f 	bl	801fcd0 <uxr_seq_num_cmp>
 801fc72:	fab0 f080 	clz	r0, r0
 801fc76:	0940      	lsrs	r0, r0, #5
 801fc78:	bd08      	pop	{r3, pc}
 801fc7a:	bf00      	nop

0801fc7c <get_available_free_slots>:
 801fc7c:	8901      	ldrh	r1, [r0, #8]
 801fc7e:	b1e1      	cbz	r1, 801fcba <get_available_free_slots+0x3e>
 801fc80:	6843      	ldr	r3, [r0, #4]
 801fc82:	f04f 0c00 	mov.w	ip, #0
 801fc86:	b530      	push	{r4, r5, lr}
 801fc88:	fbb3 fef1 	udiv	lr, r3, r1
 801fc8c:	6805      	ldr	r5, [r0, #0]
 801fc8e:	4662      	mov	r2, ip
 801fc90:	7b04      	ldrb	r4, [r0, #12]
 801fc92:	4660      	mov	r0, ip
 801fc94:	f10c 0c01 	add.w	ip, ip, #1
 801fc98:	fbb2 f3f1 	udiv	r3, r2, r1
 801fc9c:	fb01 2313 	mls	r3, r1, r3, r2
 801fca0:	fa1f f28c 	uxth.w	r2, ip
 801fca4:	b29b      	uxth	r3, r3
 801fca6:	fb0e f303 	mul.w	r3, lr, r3
 801fcaa:	58eb      	ldr	r3, [r5, r3]
 801fcac:	429c      	cmp	r4, r3
 801fcae:	d101      	bne.n	801fcb4 <get_available_free_slots+0x38>
 801fcb0:	3001      	adds	r0, #1
 801fcb2:	b280      	uxth	r0, r0
 801fcb4:	428a      	cmp	r2, r1
 801fcb6:	d3ed      	bcc.n	801fc94 <get_available_free_slots+0x18>
 801fcb8:	bd30      	pop	{r4, r5, pc}
 801fcba:	4608      	mov	r0, r1
 801fcbc:	4770      	bx	lr
 801fcbe:	bf00      	nop

0801fcc0 <uxr_seq_num_add>:
 801fcc0:	4408      	add	r0, r1
 801fcc2:	b280      	uxth	r0, r0
 801fcc4:	4770      	bx	lr
 801fcc6:	bf00      	nop

0801fcc8 <uxr_seq_num_sub>:
 801fcc8:	1a40      	subs	r0, r0, r1
 801fcca:	b280      	uxth	r0, r0
 801fccc:	4770      	bx	lr
 801fcce:	bf00      	nop

0801fcd0 <uxr_seq_num_cmp>:
 801fcd0:	4288      	cmp	r0, r1
 801fcd2:	d011      	beq.n	801fcf8 <uxr_seq_num_cmp+0x28>
 801fcd4:	d309      	bcc.n	801fcea <uxr_seq_num_cmp+0x1a>
 801fcd6:	4288      	cmp	r0, r1
 801fcd8:	d910      	bls.n	801fcfc <uxr_seq_num_cmp+0x2c>
 801fcda:	1a40      	subs	r0, r0, r1
 801fcdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801fce0:	bfd4      	ite	le
 801fce2:	2001      	movle	r0, #1
 801fce4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801fce8:	4770      	bx	lr
 801fcea:	1a0b      	subs	r3, r1, r0
 801fcec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fcf0:	daf1      	bge.n	801fcd6 <uxr_seq_num_cmp+0x6>
 801fcf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fcf6:	4770      	bx	lr
 801fcf8:	2000      	movs	r0, #0
 801fcfa:	4770      	bx	lr
 801fcfc:	2001      	movs	r0, #1
 801fcfe:	4770      	bx	lr

0801fd00 <rcl_get_default_domain_id>:
 801fd00:	b530      	push	{r4, r5, lr}
 801fd02:	2300      	movs	r3, #0
 801fd04:	b083      	sub	sp, #12
 801fd06:	9300      	str	r3, [sp, #0]
 801fd08:	b1d0      	cbz	r0, 801fd40 <rcl_get_default_domain_id+0x40>
 801fd0a:	4604      	mov	r4, r0
 801fd0c:	4669      	mov	r1, sp
 801fd0e:	4815      	ldr	r0, [pc, #84]	; (801fd64 <rcl_get_default_domain_id+0x64>)
 801fd10:	f7fd fefe 	bl	801db10 <rcutils_get_env>
 801fd14:	4602      	mov	r2, r0
 801fd16:	b110      	cbz	r0, 801fd1e <rcl_get_default_domain_id+0x1e>
 801fd18:	2001      	movs	r0, #1
 801fd1a:	b003      	add	sp, #12
 801fd1c:	bd30      	pop	{r4, r5, pc}
 801fd1e:	9b00      	ldr	r3, [sp, #0]
 801fd20:	b18b      	cbz	r3, 801fd46 <rcl_get_default_domain_id+0x46>
 801fd22:	7818      	ldrb	r0, [r3, #0]
 801fd24:	2800      	cmp	r0, #0
 801fd26:	d0f8      	beq.n	801fd1a <rcl_get_default_domain_id+0x1a>
 801fd28:	a901      	add	r1, sp, #4
 801fd2a:	4618      	mov	r0, r3
 801fd2c:	9201      	str	r2, [sp, #4]
 801fd2e:	f000 fded 	bl	802090c <strtoul>
 801fd32:	4605      	mov	r5, r0
 801fd34:	b150      	cbz	r0, 801fd4c <rcl_get_default_domain_id+0x4c>
 801fd36:	1c43      	adds	r3, r0, #1
 801fd38:	d00d      	beq.n	801fd56 <rcl_get_default_domain_id+0x56>
 801fd3a:	2000      	movs	r0, #0
 801fd3c:	6025      	str	r5, [r4, #0]
 801fd3e:	e7ec      	b.n	801fd1a <rcl_get_default_domain_id+0x1a>
 801fd40:	200b      	movs	r0, #11
 801fd42:	b003      	add	sp, #12
 801fd44:	bd30      	pop	{r4, r5, pc}
 801fd46:	4618      	mov	r0, r3
 801fd48:	b003      	add	sp, #12
 801fd4a:	bd30      	pop	{r4, r5, pc}
 801fd4c:	9b01      	ldr	r3, [sp, #4]
 801fd4e:	781b      	ldrb	r3, [r3, #0]
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d0f2      	beq.n	801fd3a <rcl_get_default_domain_id+0x3a>
 801fd54:	e7e0      	b.n	801fd18 <rcl_get_default_domain_id+0x18>
 801fd56:	f001 f9cd 	bl	80210f4 <__errno>
 801fd5a:	6803      	ldr	r3, [r0, #0]
 801fd5c:	2b22      	cmp	r3, #34	; 0x22
 801fd5e:	d1ec      	bne.n	801fd3a <rcl_get_default_domain_id+0x3a>
 801fd60:	e7da      	b.n	801fd18 <rcl_get_default_domain_id+0x18>
 801fd62:	bf00      	nop
 801fd64:	0802314c 	.word	0x0802314c

0801fd68 <rcl_expand_topic_name>:
 801fd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd6c:	b08d      	sub	sp, #52	; 0x34
 801fd6e:	4698      	mov	r8, r3
 801fd70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fd72:	9207      	str	r2, [sp, #28]
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	bf18      	it	ne
 801fd78:	f1b8 0f00 	cmpne.w	r8, #0
 801fd7c:	bf0c      	ite	eq
 801fd7e:	2301      	moveq	r3, #1
 801fd80:	2300      	movne	r3, #0
 801fd82:	2a00      	cmp	r2, #0
 801fd84:	bf08      	it	eq
 801fd86:	f043 0301 	orreq.w	r3, r3, #1
 801fd8a:	2900      	cmp	r1, #0
 801fd8c:	bf08      	it	eq
 801fd8e:	f043 0301 	orreq.w	r3, r3, #1
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d13d      	bne.n	801fe12 <rcl_expand_topic_name+0xaa>
 801fd96:	fab0 f280 	clz	r2, r0
 801fd9a:	4604      	mov	r4, r0
 801fd9c:	0952      	lsrs	r2, r2, #5
 801fd9e:	2800      	cmp	r0, #0
 801fda0:	d037      	beq.n	801fe12 <rcl_expand_topic_name+0xaa>
 801fda2:	460f      	mov	r7, r1
 801fda4:	a90b      	add	r1, sp, #44	; 0x2c
 801fda6:	f000 fa51 	bl	802024c <rcl_validate_topic_name>
 801fdaa:	4605      	mov	r5, r0
 801fdac:	bb68      	cbnz	r0, 801fe0a <rcl_expand_topic_name+0xa2>
 801fdae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d137      	bne.n	801fe24 <rcl_expand_topic_name+0xbc>
 801fdb4:	4602      	mov	r2, r0
 801fdb6:	a90b      	add	r1, sp, #44	; 0x2c
 801fdb8:	4638      	mov	r0, r7
 801fdba:	f7fe fb2b 	bl	801e414 <rmw_validate_node_name>
 801fdbe:	bb68      	cbnz	r0, 801fe1c <rcl_expand_topic_name+0xb4>
 801fdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d133      	bne.n	801fe2e <rcl_expand_topic_name+0xc6>
 801fdc6:	462a      	mov	r2, r5
 801fdc8:	a90b      	add	r1, sp, #44	; 0x2c
 801fdca:	9807      	ldr	r0, [sp, #28]
 801fdcc:	f7fe fb04 	bl	801e3d8 <rmw_validate_namespace>
 801fdd0:	bb20      	cbnz	r0, 801fe1c <rcl_expand_topic_name+0xb4>
 801fdd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fdd4:	2d00      	cmp	r5, #0
 801fdd6:	f040 80a2 	bne.w	801ff1e <rcl_expand_topic_name+0x1b6>
 801fdda:	217b      	movs	r1, #123	; 0x7b
 801fddc:	4620      	mov	r0, r4
 801fdde:	f001 f8fd 	bl	8020fdc <strchr>
 801fde2:	7823      	ldrb	r3, [r4, #0]
 801fde4:	4681      	mov	r9, r0
 801fde6:	bb20      	cbnz	r0, 801fe32 <rcl_expand_topic_name+0xca>
 801fde8:	2b2f      	cmp	r3, #47	; 0x2f
 801fdea:	d122      	bne.n	801fe32 <rcl_expand_topic_name+0xca>
 801fdec:	ab19      	add	r3, sp, #100	; 0x64
 801fdee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fdf2:	ab16      	add	r3, sp, #88	; 0x58
 801fdf4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801fdf8:	4620      	mov	r0, r4
 801fdfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 801fdfc:	f7fd ffea 	bl	801ddd4 <rcutils_strdup>
 801fe00:	2800      	cmp	r0, #0
 801fe02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fe04:	bf08      	it	eq
 801fe06:	250a      	moveq	r5, #10
 801fe08:	6018      	str	r0, [r3, #0]
 801fe0a:	4628      	mov	r0, r5
 801fe0c:	b00d      	add	sp, #52	; 0x34
 801fe0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe12:	250b      	movs	r5, #11
 801fe14:	4628      	mov	r0, r5
 801fe16:	b00d      	add	sp, #52	; 0x34
 801fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe1c:	f7fa ff82 	bl	801ad24 <rcl_convert_rmw_ret_to_rcl_ret>
 801fe20:	4605      	mov	r5, r0
 801fe22:	e7f2      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 801fe24:	2567      	movs	r5, #103	; 0x67
 801fe26:	4628      	mov	r0, r5
 801fe28:	b00d      	add	sp, #52	; 0x34
 801fe2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe2e:	25c9      	movs	r5, #201	; 0xc9
 801fe30:	e7eb      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 801fe32:	2b7e      	cmp	r3, #126	; 0x7e
 801fe34:	d075      	beq.n	801ff22 <rcl_expand_topic_name+0x1ba>
 801fe36:	f1b9 0f00 	cmp.w	r9, #0
 801fe3a:	f000 80c2 	beq.w	801ffc2 <rcl_expand_topic_name+0x25a>
 801fe3e:	2300      	movs	r3, #0
 801fe40:	46a2      	mov	sl, r4
 801fe42:	461e      	mov	r6, r3
 801fe44:	9508      	str	r5, [sp, #32]
 801fe46:	4655      	mov	r5, sl
 801fe48:	9409      	str	r4, [sp, #36]	; 0x24
 801fe4a:	46b2      	mov	sl, r6
 801fe4c:	464c      	mov	r4, r9
 801fe4e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fe52:	2c00      	cmp	r4, #0
 801fe54:	f000 80ae 	beq.w	801ffb4 <rcl_expand_topic_name+0x24c>
 801fe58:	217d      	movs	r1, #125	; 0x7d
 801fe5a:	4628      	mov	r0, r5
 801fe5c:	f001 f8be 	bl	8020fdc <strchr>
 801fe60:	eba0 0904 	sub.w	r9, r0, r4
 801fe64:	4621      	mov	r1, r4
 801fe66:	4869      	ldr	r0, [pc, #420]	; (802000c <rcl_expand_topic_name+0x2a4>)
 801fe68:	f109 0601 	add.w	r6, r9, #1
 801fe6c:	4632      	mov	r2, r6
 801fe6e:	f001 f8c2 	bl	8020ff6 <strncmp>
 801fe72:	2800      	cmp	r0, #0
 801fe74:	d051      	beq.n	801ff1a <rcl_expand_topic_name+0x1b2>
 801fe76:	4632      	mov	r2, r6
 801fe78:	4621      	mov	r1, r4
 801fe7a:	4865      	ldr	r0, [pc, #404]	; (8020010 <rcl_expand_topic_name+0x2a8>)
 801fe7c:	f001 f8bb 	bl	8020ff6 <strncmp>
 801fe80:	b128      	cbz	r0, 801fe8e <rcl_expand_topic_name+0x126>
 801fe82:	4632      	mov	r2, r6
 801fe84:	4621      	mov	r1, r4
 801fe86:	4863      	ldr	r0, [pc, #396]	; (8020014 <rcl_expand_topic_name+0x2ac>)
 801fe88:	f001 f8b5 	bl	8020ff6 <strncmp>
 801fe8c:	bb38      	cbnz	r0, 801fede <rcl_expand_topic_name+0x176>
 801fe8e:	46d9      	mov	r9, fp
 801fe90:	ab18      	add	r3, sp, #96	; 0x60
 801fe92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801fe96:	ab16      	add	r3, sp, #88	; 0x58
 801fe98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801fe9c:	4620      	mov	r0, r4
 801fe9e:	4631      	mov	r1, r6
 801fea0:	cb0c      	ldmia	r3, {r2, r3}
 801fea2:	f7fd ffb9 	bl	801de18 <rcutils_strndup>
 801fea6:	4604      	mov	r4, r0
 801fea8:	2800      	cmp	r0, #0
 801feaa:	f000 80a3 	beq.w	801fff4 <rcl_expand_topic_name+0x28c>
 801feae:	464a      	mov	r2, r9
 801feb0:	4628      	mov	r0, r5
 801feb2:	ab16      	add	r3, sp, #88	; 0x58
 801feb4:	4621      	mov	r1, r4
 801feb6:	f7fd fe8d 	bl	801dbd4 <rcutils_repl_str>
 801feba:	991a      	ldr	r1, [sp, #104]	; 0x68
 801febc:	4605      	mov	r5, r0
 801febe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fec0:	4620      	mov	r0, r4
 801fec2:	4798      	blx	r3
 801fec4:	4650      	mov	r0, sl
 801fec6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fec8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801feca:	4798      	blx	r3
 801fecc:	2d00      	cmp	r5, #0
 801fece:	d06c      	beq.n	801ffaa <rcl_expand_topic_name+0x242>
 801fed0:	217b      	movs	r1, #123	; 0x7b
 801fed2:	4628      	mov	r0, r5
 801fed4:	f001 f882 	bl	8020fdc <strchr>
 801fed8:	46aa      	mov	sl, r5
 801feda:	4604      	mov	r4, r0
 801fedc:	e7b9      	b.n	801fe52 <rcl_expand_topic_name+0xea>
 801fede:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801fee2:	1c61      	adds	r1, r4, #1
 801fee4:	4640      	mov	r0, r8
 801fee6:	f7fe f8af 	bl	801e048 <rcutils_string_map_getn>
 801feea:	4681      	mov	r9, r0
 801feec:	2800      	cmp	r0, #0
 801feee:	d1cf      	bne.n	801fe90 <rcl_expand_topic_name+0x128>
 801fef0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fef2:	aa18      	add	r2, sp, #96	; 0x60
 801fef4:	2569      	movs	r5, #105	; 0x69
 801fef6:	6018      	str	r0, [r3, #0]
 801fef8:	ab16      	add	r3, sp, #88	; 0x58
 801fefa:	ca07      	ldmia	r2, {r0, r1, r2}
 801fefc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ff00:	4631      	mov	r1, r6
 801ff02:	4620      	mov	r0, r4
 801ff04:	cb0c      	ldmia	r3, {r2, r3}
 801ff06:	f7fd ff87 	bl	801de18 <rcutils_strndup>
 801ff0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ff0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff0e:	4798      	blx	r3
 801ff10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff12:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ff14:	4650      	mov	r0, sl
 801ff16:	4798      	blx	r3
 801ff18:	e777      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 801ff1a:	46b9      	mov	r9, r7
 801ff1c:	e7b8      	b.n	801fe90 <rcl_expand_topic_name+0x128>
 801ff1e:	25ca      	movs	r5, #202	; 0xca
 801ff20:	e773      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 801ff22:	9e07      	ldr	r6, [sp, #28]
 801ff24:	4630      	mov	r0, r6
 801ff26:	f7e0 f995 	bl	8000254 <strlen>
 801ff2a:	4a3b      	ldr	r2, [pc, #236]	; (8020018 <rcl_expand_topic_name+0x2b0>)
 801ff2c:	4b3b      	ldr	r3, [pc, #236]	; (802001c <rcl_expand_topic_name+0x2b4>)
 801ff2e:	9603      	str	r6, [sp, #12]
 801ff30:	2801      	cmp	r0, #1
 801ff32:	bf18      	it	ne
 801ff34:	4613      	movne	r3, r2
 801ff36:	9704      	str	r7, [sp, #16]
 801ff38:	9302      	str	r3, [sp, #8]
 801ff3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ff3c:	9300      	str	r3, [sp, #0]
 801ff3e:	1c63      	adds	r3, r4, #1
 801ff40:	9305      	str	r3, [sp, #20]
 801ff42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ff46:	9301      	str	r3, [sp, #4]
 801ff48:	ab16      	add	r3, sp, #88	; 0x58
 801ff4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ff4c:	f7fd fe08 	bl	801db60 <rcutils_format_string_limit>
 801ff50:	4606      	mov	r6, r0
 801ff52:	b350      	cbz	r0, 801ffaa <rcl_expand_topic_name+0x242>
 801ff54:	f1b9 0f00 	cmp.w	r9, #0
 801ff58:	d005      	beq.n	801ff66 <rcl_expand_topic_name+0x1fe>
 801ff5a:	217b      	movs	r1, #123	; 0x7b
 801ff5c:	46b2      	mov	sl, r6
 801ff5e:	f001 f83d 	bl	8020fdc <strchr>
 801ff62:	4681      	mov	r9, r0
 801ff64:	e76e      	b.n	801fe44 <rcl_expand_topic_name+0xdc>
 801ff66:	7833      	ldrb	r3, [r6, #0]
 801ff68:	2b2f      	cmp	r3, #47	; 0x2f
 801ff6a:	d01b      	beq.n	801ffa4 <rcl_expand_topic_name+0x23c>
 801ff6c:	9c07      	ldr	r4, [sp, #28]
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f7e0 f970 	bl	8000254 <strlen>
 801ff74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ff78:	4a29      	ldr	r2, [pc, #164]	; (8020020 <rcl_expand_topic_name+0x2b8>)
 801ff7a:	9301      	str	r3, [sp, #4]
 801ff7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ff7e:	9604      	str	r6, [sp, #16]
 801ff80:	9300      	str	r3, [sp, #0]
 801ff82:	4b28      	ldr	r3, [pc, #160]	; (8020024 <rcl_expand_topic_name+0x2bc>)
 801ff84:	9403      	str	r4, [sp, #12]
 801ff86:	2801      	cmp	r0, #1
 801ff88:	bf18      	it	ne
 801ff8a:	4613      	movne	r3, r2
 801ff8c:	9302      	str	r3, [sp, #8]
 801ff8e:	ab16      	add	r3, sp, #88	; 0x58
 801ff90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ff92:	f7fd fde5 	bl	801db60 <rcutils_format_string_limit>
 801ff96:	4603      	mov	r3, r0
 801ff98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ff9a:	4630      	mov	r0, r6
 801ff9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ff9e:	461e      	mov	r6, r3
 801ffa0:	4790      	blx	r2
 801ffa2:	b116      	cbz	r6, 801ffaa <rcl_expand_topic_name+0x242>
 801ffa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ffa6:	601e      	str	r6, [r3, #0]
 801ffa8:	e72f      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 801ffaa:	2300      	movs	r3, #0
 801ffac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ffae:	250a      	movs	r5, #10
 801ffb0:	6013      	str	r3, [r2, #0]
 801ffb2:	e72a      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 801ffb4:	4653      	mov	r3, sl
 801ffb6:	4656      	mov	r6, sl
 801ffb8:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d1d2      	bne.n	801ff66 <rcl_expand_topic_name+0x1fe>
 801ffc0:	7823      	ldrb	r3, [r4, #0]
 801ffc2:	2b2f      	cmp	r3, #47	; 0x2f
 801ffc4:	d01e      	beq.n	8020004 <rcl_expand_topic_name+0x29c>
 801ffc6:	9e07      	ldr	r6, [sp, #28]
 801ffc8:	4630      	mov	r0, r6
 801ffca:	f7e0 f943 	bl	8000254 <strlen>
 801ffce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ffd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ffd4:	9603      	str	r6, [sp, #12]
 801ffd6:	9404      	str	r4, [sp, #16]
 801ffd8:	e9cd 2300 	strd	r2, r3, [sp]
 801ffdc:	4a10      	ldr	r2, [pc, #64]	; (8020020 <rcl_expand_topic_name+0x2b8>)
 801ffde:	4b11      	ldr	r3, [pc, #68]	; (8020024 <rcl_expand_topic_name+0x2bc>)
 801ffe0:	2801      	cmp	r0, #1
 801ffe2:	bf18      	it	ne
 801ffe4:	4613      	movne	r3, r2
 801ffe6:	9302      	str	r3, [sp, #8]
 801ffe8:	ab16      	add	r3, sp, #88	; 0x58
 801ffea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ffec:	f7fd fdb8 	bl	801db60 <rcutils_format_string_limit>
 801fff0:	4606      	mov	r6, r0
 801fff2:	e7d6      	b.n	801ffa2 <rcl_expand_topic_name+0x23a>
 801fff4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801fff8:	4650      	mov	r0, sl
 801fffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fffc:	6014      	str	r4, [r2, #0]
 801fffe:	250a      	movs	r5, #10
 8020000:	4798      	blx	r3
 8020002:	e702      	b.n	801fe0a <rcl_expand_topic_name+0xa2>
 8020004:	2300      	movs	r3, #0
 8020006:	461e      	mov	r6, r3
 8020008:	e7cc      	b.n	801ffa4 <rcl_expand_topic_name+0x23c>
 802000a:	bf00      	nop
 802000c:	08023164 	.word	0x08023164
 8020010:	0802316c 	.word	0x0802316c
 8020014:	08023174 	.word	0x08023174
 8020018:	0802315c 	.word	0x0802315c
 802001c:	08022740 	.word	0x08022740
 8020020:	0802272c 	.word	0x0802272c
 8020024:	08022750 	.word	0x08022750

08020028 <rcl_get_default_topic_name_substitutions>:
 8020028:	2800      	cmp	r0, #0
 802002a:	bf0c      	ite	eq
 802002c:	200b      	moveq	r0, #11
 802002e:	2000      	movne	r0, #0
 8020030:	4770      	bx	lr
 8020032:	bf00      	nop

08020034 <rcl_get_zero_initialized_guard_condition>:
 8020034:	4a03      	ldr	r2, [pc, #12]	; (8020044 <rcl_get_zero_initialized_guard_condition+0x10>)
 8020036:	4603      	mov	r3, r0
 8020038:	e892 0003 	ldmia.w	r2, {r0, r1}
 802003c:	e883 0003 	stmia.w	r3, {r0, r1}
 8020040:	4618      	mov	r0, r3
 8020042:	4770      	bx	lr
 8020044:	08023180 	.word	0x08023180

08020048 <rcl_guard_condition_init>:
 8020048:	b082      	sub	sp, #8
 802004a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802004c:	b087      	sub	sp, #28
 802004e:	4604      	mov	r4, r0
 8020050:	460d      	mov	r5, r1
 8020052:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8020056:	f10d 0c04 	add.w	ip, sp, #4
 802005a:	e9ce 2300 	strd	r2, r3, [lr]
 802005e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020062:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020066:	f8de 3000 	ldr.w	r3, [lr]
 802006a:	a801      	add	r0, sp, #4
 802006c:	f8cc 3000 	str.w	r3, [ip]
 8020070:	f7f5 fb02 	bl	8015678 <rcutils_allocator_is_valid>
 8020074:	b354      	cbz	r4, 80200cc <rcl_guard_condition_init+0x84>
 8020076:	f080 0301 	eor.w	r3, r0, #1
 802007a:	b2db      	uxtb	r3, r3
 802007c:	bb33      	cbnz	r3, 80200cc <rcl_guard_condition_init+0x84>
 802007e:	6866      	ldr	r6, [r4, #4]
 8020080:	b9ee      	cbnz	r6, 80200be <rcl_guard_condition_init+0x76>
 8020082:	b31d      	cbz	r5, 80200cc <rcl_guard_condition_init+0x84>
 8020084:	4628      	mov	r0, r5
 8020086:	f7fa fe6b 	bl	801ad60 <rcl_context_is_valid>
 802008a:	b308      	cbz	r0, 80200d0 <rcl_guard_condition_init+0x88>
 802008c:	9b01      	ldr	r3, [sp, #4]
 802008e:	201c      	movs	r0, #28
 8020090:	9905      	ldr	r1, [sp, #20]
 8020092:	4798      	blx	r3
 8020094:	4607      	mov	r7, r0
 8020096:	6060      	str	r0, [r4, #4]
 8020098:	b310      	cbz	r0, 80200e0 <rcl_guard_condition_init+0x98>
 802009a:	6828      	ldr	r0, [r5, #0]
 802009c:	3028      	adds	r0, #40	; 0x28
 802009e:	f000 f9c3 	bl	8020428 <rmw_create_guard_condition>
 80200a2:	6038      	str	r0, [r7, #0]
 80200a4:	6860      	ldr	r0, [r4, #4]
 80200a6:	6807      	ldr	r7, [r0, #0]
 80200a8:	b1a7      	cbz	r7, 80200d4 <rcl_guard_condition_init+0x8c>
 80200aa:	2301      	movs	r3, #1
 80200ac:	ac01      	add	r4, sp, #4
 80200ae:	f100 0708 	add.w	r7, r0, #8
 80200b2:	7103      	strb	r3, [r0, #4]
 80200b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80200b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80200b8:	6823      	ldr	r3, [r4, #0]
 80200ba:	603b      	str	r3, [r7, #0]
 80200bc:	e000      	b.n	80200c0 <rcl_guard_condition_init+0x78>
 80200be:	2664      	movs	r6, #100	; 0x64
 80200c0:	4630      	mov	r0, r6
 80200c2:	b007      	add	sp, #28
 80200c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80200c8:	b002      	add	sp, #8
 80200ca:	4770      	bx	lr
 80200cc:	260b      	movs	r6, #11
 80200ce:	e7f7      	b.n	80200c0 <rcl_guard_condition_init+0x78>
 80200d0:	2665      	movs	r6, #101	; 0x65
 80200d2:	e7f5      	b.n	80200c0 <rcl_guard_condition_init+0x78>
 80200d4:	9b02      	ldr	r3, [sp, #8]
 80200d6:	2601      	movs	r6, #1
 80200d8:	9905      	ldr	r1, [sp, #20]
 80200da:	4798      	blx	r3
 80200dc:	6067      	str	r7, [r4, #4]
 80200de:	e7ef      	b.n	80200c0 <rcl_guard_condition_init+0x78>
 80200e0:	260a      	movs	r6, #10
 80200e2:	e7ed      	b.n	80200c0 <rcl_guard_condition_init+0x78>

080200e4 <rcl_guard_condition_init_from_rmw>:
 80200e4:	b082      	sub	sp, #8
 80200e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200ea:	b086      	sub	sp, #24
 80200ec:	4604      	mov	r4, r0
 80200ee:	460e      	mov	r6, r1
 80200f0:	4615      	mov	r5, r2
 80200f2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80200f6:	f10d 0e04 	add.w	lr, sp, #4
 80200fa:	f84c 3f04 	str.w	r3, [ip, #4]!
 80200fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8020102:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8020106:	f8dc 3000 	ldr.w	r3, [ip]
 802010a:	a801      	add	r0, sp, #4
 802010c:	f8ce 3000 	str.w	r3, [lr]
 8020110:	f7f5 fab2 	bl	8015678 <rcutils_allocator_is_valid>
 8020114:	f080 0301 	eor.w	r3, r0, #1
 8020118:	b2db      	uxtb	r3, r3
 802011a:	bb3b      	cbnz	r3, 802016c <rcl_guard_condition_init_from_rmw+0x88>
 802011c:	b334      	cbz	r4, 802016c <rcl_guard_condition_init_from_rmw+0x88>
 802011e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8020122:	f1b8 0f00 	cmp.w	r8, #0
 8020126:	d11a      	bne.n	802015e <rcl_guard_condition_init_from_rmw+0x7a>
 8020128:	b305      	cbz	r5, 802016c <rcl_guard_condition_init_from_rmw+0x88>
 802012a:	4628      	mov	r0, r5
 802012c:	f7fa fe18 	bl	801ad60 <rcl_context_is_valid>
 8020130:	b1f0      	cbz	r0, 8020170 <rcl_guard_condition_init_from_rmw+0x8c>
 8020132:	9b01      	ldr	r3, [sp, #4]
 8020134:	201c      	movs	r0, #28
 8020136:	9905      	ldr	r1, [sp, #20]
 8020138:	4798      	blx	r3
 802013a:	4607      	mov	r7, r0
 802013c:	6060      	str	r0, [r4, #4]
 802013e:	b320      	cbz	r0, 802018a <rcl_guard_condition_init_from_rmw+0xa6>
 8020140:	b1c6      	cbz	r6, 8020174 <rcl_guard_condition_init_from_rmw+0x90>
 8020142:	6006      	str	r6, [r0, #0]
 8020144:	f880 8004 	strb.w	r8, [r0, #4]
 8020148:	ac01      	add	r4, sp, #4
 802014a:	f107 0c08 	add.w	ip, r7, #8
 802014e:	2500      	movs	r5, #0
 8020150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020152:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020156:	6823      	ldr	r3, [r4, #0]
 8020158:	f8cc 3000 	str.w	r3, [ip]
 802015c:	e000      	b.n	8020160 <rcl_guard_condition_init_from_rmw+0x7c>
 802015e:	2564      	movs	r5, #100	; 0x64
 8020160:	4628      	mov	r0, r5
 8020162:	b006      	add	sp, #24
 8020164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020168:	b002      	add	sp, #8
 802016a:	4770      	bx	lr
 802016c:	250b      	movs	r5, #11
 802016e:	e7f7      	b.n	8020160 <rcl_guard_condition_init_from_rmw+0x7c>
 8020170:	2565      	movs	r5, #101	; 0x65
 8020172:	e7f5      	b.n	8020160 <rcl_guard_condition_init_from_rmw+0x7c>
 8020174:	6828      	ldr	r0, [r5, #0]
 8020176:	3028      	adds	r0, #40	; 0x28
 8020178:	f000 f956 	bl	8020428 <rmw_create_guard_condition>
 802017c:	6038      	str	r0, [r7, #0]
 802017e:	6867      	ldr	r7, [r4, #4]
 8020180:	683e      	ldr	r6, [r7, #0]
 8020182:	b126      	cbz	r6, 802018e <rcl_guard_condition_init_from_rmw+0xaa>
 8020184:	2301      	movs	r3, #1
 8020186:	713b      	strb	r3, [r7, #4]
 8020188:	e7de      	b.n	8020148 <rcl_guard_condition_init_from_rmw+0x64>
 802018a:	250a      	movs	r5, #10
 802018c:	e7e8      	b.n	8020160 <rcl_guard_condition_init_from_rmw+0x7c>
 802018e:	9b02      	ldr	r3, [sp, #8]
 8020190:	4638      	mov	r0, r7
 8020192:	9905      	ldr	r1, [sp, #20]
 8020194:	2501      	movs	r5, #1
 8020196:	4798      	blx	r3
 8020198:	6066      	str	r6, [r4, #4]
 802019a:	e7e1      	b.n	8020160 <rcl_guard_condition_init_from_rmw+0x7c>

0802019c <rcl_guard_condition_fini>:
 802019c:	b570      	push	{r4, r5, r6, lr}
 802019e:	b082      	sub	sp, #8
 80201a0:	b1f0      	cbz	r0, 80201e0 <rcl_guard_condition_fini+0x44>
 80201a2:	6843      	ldr	r3, [r0, #4]
 80201a4:	4604      	mov	r4, r0
 80201a6:	b163      	cbz	r3, 80201c2 <rcl_guard_condition_fini+0x26>
 80201a8:	6818      	ldr	r0, [r3, #0]
 80201aa:	68de      	ldr	r6, [r3, #12]
 80201ac:	6999      	ldr	r1, [r3, #24]
 80201ae:	b160      	cbz	r0, 80201ca <rcl_guard_condition_fini+0x2e>
 80201b0:	791d      	ldrb	r5, [r3, #4]
 80201b2:	b965      	cbnz	r5, 80201ce <rcl_guard_condition_fini+0x32>
 80201b4:	4618      	mov	r0, r3
 80201b6:	47b0      	blx	r6
 80201b8:	2300      	movs	r3, #0
 80201ba:	4628      	mov	r0, r5
 80201bc:	6063      	str	r3, [r4, #4]
 80201be:	b002      	add	sp, #8
 80201c0:	bd70      	pop	{r4, r5, r6, pc}
 80201c2:	461d      	mov	r5, r3
 80201c4:	4628      	mov	r0, r5
 80201c6:	b002      	add	sp, #8
 80201c8:	bd70      	pop	{r4, r5, r6, pc}
 80201ca:	4605      	mov	r5, r0
 80201cc:	e7f2      	b.n	80201b4 <rcl_guard_condition_fini+0x18>
 80201ce:	9101      	str	r1, [sp, #4]
 80201d0:	f000 f940 	bl	8020454 <rmw_destroy_guard_condition>
 80201d4:	1e05      	subs	r5, r0, #0
 80201d6:	6863      	ldr	r3, [r4, #4]
 80201d8:	9901      	ldr	r1, [sp, #4]
 80201da:	bf18      	it	ne
 80201dc:	2501      	movne	r5, #1
 80201de:	e7e9      	b.n	80201b4 <rcl_guard_condition_fini+0x18>
 80201e0:	250b      	movs	r5, #11
 80201e2:	4628      	mov	r0, r5
 80201e4:	b002      	add	sp, #8
 80201e6:	bd70      	pop	{r4, r5, r6, pc}

080201e8 <rcl_guard_condition_get_default_options>:
 80201e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80201ea:	b087      	sub	sp, #28
 80201ec:	4606      	mov	r6, r0
 80201ee:	4c0b      	ldr	r4, [pc, #44]	; (802021c <rcl_guard_condition_get_default_options+0x34>)
 80201f0:	4668      	mov	r0, sp
 80201f2:	f7f5 fa33 	bl	801565c <rcutils_get_default_allocator>
 80201f6:	46ee      	mov	lr, sp
 80201f8:	46a4      	mov	ip, r4
 80201fa:	4625      	mov	r5, r4
 80201fc:	4634      	mov	r4, r6
 80201fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020202:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020208:	f8de 7000 	ldr.w	r7, [lr]
 802020c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802020e:	4630      	mov	r0, r6
 8020210:	f8cc 7000 	str.w	r7, [ip]
 8020214:	6027      	str	r7, [r4, #0]
 8020216:	b007      	add	sp, #28
 8020218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802021a:	bf00      	nop
 802021c:	200176a4 	.word	0x200176a4

08020220 <rcl_trigger_guard_condition>:
 8020220:	b148      	cbz	r0, 8020236 <rcl_trigger_guard_condition+0x16>
 8020222:	b508      	push	{r3, lr}
 8020224:	6843      	ldr	r3, [r0, #4]
 8020226:	b143      	cbz	r3, 802023a <rcl_trigger_guard_condition+0x1a>
 8020228:	6818      	ldr	r0, [r3, #0]
 802022a:	f000 f927 	bl	802047c <rmw_trigger_guard_condition>
 802022e:	3800      	subs	r0, #0
 8020230:	bf18      	it	ne
 8020232:	2001      	movne	r0, #1
 8020234:	bd08      	pop	{r3, pc}
 8020236:	200b      	movs	r0, #11
 8020238:	4770      	bx	lr
 802023a:	200b      	movs	r0, #11
 802023c:	bd08      	pop	{r3, pc}
 802023e:	bf00      	nop

08020240 <rcl_guard_condition_get_rmw_handle>:
 8020240:	b110      	cbz	r0, 8020248 <rcl_guard_condition_get_rmw_handle+0x8>
 8020242:	6840      	ldr	r0, [r0, #4]
 8020244:	b100      	cbz	r0, 8020248 <rcl_guard_condition_get_rmw_handle+0x8>
 8020246:	6800      	ldr	r0, [r0, #0]
 8020248:	4770      	bx	lr
 802024a:	bf00      	nop

0802024c <rcl_validate_topic_name>:
 802024c:	2800      	cmp	r0, #0
 802024e:	f000 8089 	beq.w	8020364 <rcl_validate_topic_name+0x118>
 8020252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020256:	460e      	mov	r6, r1
 8020258:	2900      	cmp	r1, #0
 802025a:	f000 8085 	beq.w	8020368 <rcl_validate_topic_name+0x11c>
 802025e:	4604      	mov	r4, r0
 8020260:	4617      	mov	r7, r2
 8020262:	f7df fff7 	bl	8000254 <strlen>
 8020266:	b1b0      	cbz	r0, 8020296 <rcl_validate_topic_name+0x4a>
 8020268:	f894 e000 	ldrb.w	lr, [r4]
 802026c:	f8df c160 	ldr.w	ip, [pc, #352]	; 80203d0 <rcl_validate_topic_name+0x184>
 8020270:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8020274:	f013 0304 	ands.w	r3, r3, #4
 8020278:	d139      	bne.n	80202ee <rcl_validate_topic_name+0xa2>
 802027a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 802027e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8020282:	2a2f      	cmp	r2, #47	; 0x2f
 8020284:	d10f      	bne.n	80202a6 <rcl_validate_topic_name+0x5a>
 8020286:	2202      	movs	r2, #2
 8020288:	6032      	str	r2, [r6, #0]
 802028a:	b3a7      	cbz	r7, 80202f6 <rcl_validate_topic_name+0xaa>
 802028c:	4618      	mov	r0, r3
 802028e:	f8c7 8000 	str.w	r8, [r7]
 8020292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020296:	2301      	movs	r3, #1
 8020298:	6033      	str	r3, [r6, #0]
 802029a:	b367      	cbz	r7, 80202f6 <rcl_validate_topic_name+0xaa>
 802029c:	2300      	movs	r3, #0
 802029e:	4618      	mov	r0, r3
 80202a0:	603b      	str	r3, [r7, #0]
 80202a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202a6:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 80202aa:	461d      	mov	r5, r3
 80202ac:	4619      	mov	r1, r3
 80202ae:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80202b2:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80202b6:	f1b9 0f09 	cmp.w	r9, #9
 80202ba:	d91f      	bls.n	80202fc <rcl_validate_topic_name+0xb0>
 80202bc:	f022 0920 	bic.w	r9, r2, #32
 80202c0:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 80202c4:	f1b9 0f19 	cmp.w	r9, #25
 80202c8:	d918      	bls.n	80202fc <rcl_validate_topic_name+0xb0>
 80202ca:	2a5f      	cmp	r2, #95	; 0x5f
 80202cc:	d024      	beq.n	8020318 <rcl_validate_topic_name+0xcc>
 80202ce:	2a2f      	cmp	r2, #47	; 0x2f
 80202d0:	d058      	beq.n	8020384 <rcl_validate_topic_name+0x138>
 80202d2:	2a7e      	cmp	r2, #126	; 0x7e
 80202d4:	d04a      	beq.n	802036c <rcl_validate_topic_name+0x120>
 80202d6:	2a7b      	cmp	r2, #123	; 0x7b
 80202d8:	d05b      	beq.n	8020392 <rcl_validate_topic_name+0x146>
 80202da:	2a7d      	cmp	r2, #125	; 0x7d
 80202dc:	d169      	bne.n	80203b2 <rcl_validate_topic_name+0x166>
 80202de:	2d00      	cmp	r5, #0
 80202e0:	d15c      	bne.n	802039c <rcl_validate_topic_name+0x150>
 80202e2:	2305      	movs	r3, #5
 80202e4:	6033      	str	r3, [r6, #0]
 80202e6:	b137      	cbz	r7, 80202f6 <rcl_validate_topic_name+0xaa>
 80202e8:	2000      	movs	r0, #0
 80202ea:	6039      	str	r1, [r7, #0]
 80202ec:	e7d9      	b.n	80202a2 <rcl_validate_topic_name+0x56>
 80202ee:	2304      	movs	r3, #4
 80202f0:	6033      	str	r3, [r6, #0]
 80202f2:	2f00      	cmp	r7, #0
 80202f4:	d1d2      	bne.n	802029c <rcl_validate_topic_name+0x50>
 80202f6:	2000      	movs	r0, #0
 80202f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202fc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020300:	0752      	lsls	r2, r2, #29
 8020302:	d509      	bpl.n	8020318 <rcl_validate_topic_name+0xcc>
 8020304:	2900      	cmp	r1, #0
 8020306:	bf0c      	ite	eq
 8020308:	2200      	moveq	r2, #0
 802030a:	f005 0201 	andne.w	r2, r5, #1
 802030e:	b11a      	cbz	r2, 8020318 <rcl_validate_topic_name+0xcc>
 8020310:	1e4d      	subs	r5, r1, #1
 8020312:	429d      	cmp	r5, r3
 8020314:	d031      	beq.n	802037a <rcl_validate_topic_name+0x12e>
 8020316:	4615      	mov	r5, r2
 8020318:	3101      	adds	r1, #1
 802031a:	4288      	cmp	r0, r1
 802031c:	d1c7      	bne.n	80202ae <rcl_validate_topic_name+0x62>
 802031e:	2d00      	cmp	r5, #0
 8020320:	d142      	bne.n	80203a8 <rcl_validate_topic_name+0x15c>
 8020322:	4628      	mov	r0, r5
 8020324:	2301      	movs	r3, #1
 8020326:	e00c      	b.n	8020342 <rcl_validate_topic_name+0xf6>
 8020328:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 802032c:	d101      	bne.n	8020332 <rcl_validate_topic_name+0xe6>
 802032e:	2801      	cmp	r0, #1
 8020330:	d047      	beq.n	80203c2 <rcl_validate_topic_name+0x176>
 8020332:	1c5a      	adds	r2, r3, #1
 8020334:	428b      	cmp	r3, r1
 8020336:	f100 0001 	add.w	r0, r0, #1
 802033a:	f104 0401 	add.w	r4, r4, #1
 802033e:	4613      	mov	r3, r2
 8020340:	d22e      	bcs.n	80203a0 <rcl_validate_topic_name+0x154>
 8020342:	4580      	cmp	r8, r0
 8020344:	d0f5      	beq.n	8020332 <rcl_validate_topic_name+0xe6>
 8020346:	7822      	ldrb	r2, [r4, #0]
 8020348:	2a2f      	cmp	r2, #47	; 0x2f
 802034a:	d1ed      	bne.n	8020328 <rcl_validate_topic_name+0xdc>
 802034c:	7862      	ldrb	r2, [r4, #1]
 802034e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020352:	0752      	lsls	r2, r2, #29
 8020354:	d5ed      	bpl.n	8020332 <rcl_validate_topic_name+0xe6>
 8020356:	2204      	movs	r2, #4
 8020358:	6032      	str	r2, [r6, #0]
 802035a:	2f00      	cmp	r7, #0
 802035c:	d0cb      	beq.n	80202f6 <rcl_validate_topic_name+0xaa>
 802035e:	2000      	movs	r0, #0
 8020360:	603b      	str	r3, [r7, #0]
 8020362:	e79e      	b.n	80202a2 <rcl_validate_topic_name+0x56>
 8020364:	200b      	movs	r0, #11
 8020366:	4770      	bx	lr
 8020368:	200b      	movs	r0, #11
 802036a:	e79a      	b.n	80202a2 <rcl_validate_topic_name+0x56>
 802036c:	2900      	cmp	r1, #0
 802036e:	d0d3      	beq.n	8020318 <rcl_validate_topic_name+0xcc>
 8020370:	2306      	movs	r3, #6
 8020372:	6033      	str	r3, [r6, #0]
 8020374:	2f00      	cmp	r7, #0
 8020376:	d1b7      	bne.n	80202e8 <rcl_validate_topic_name+0x9c>
 8020378:	e7bd      	b.n	80202f6 <rcl_validate_topic_name+0xaa>
 802037a:	2309      	movs	r3, #9
 802037c:	6033      	str	r3, [r6, #0]
 802037e:	2f00      	cmp	r7, #0
 8020380:	d1b2      	bne.n	80202e8 <rcl_validate_topic_name+0x9c>
 8020382:	e7b8      	b.n	80202f6 <rcl_validate_topic_name+0xaa>
 8020384:	2d00      	cmp	r5, #0
 8020386:	d0c7      	beq.n	8020318 <rcl_validate_topic_name+0xcc>
 8020388:	2308      	movs	r3, #8
 802038a:	6033      	str	r3, [r6, #0]
 802038c:	2f00      	cmp	r7, #0
 802038e:	d1ab      	bne.n	80202e8 <rcl_validate_topic_name+0x9c>
 8020390:	e7b1      	b.n	80202f6 <rcl_validate_topic_name+0xaa>
 8020392:	2d00      	cmp	r5, #0
 8020394:	d1f8      	bne.n	8020388 <rcl_validate_topic_name+0x13c>
 8020396:	460b      	mov	r3, r1
 8020398:	2501      	movs	r5, #1
 802039a:	e7bd      	b.n	8020318 <rcl_validate_topic_name+0xcc>
 802039c:	2500      	movs	r5, #0
 802039e:	e7bb      	b.n	8020318 <rcl_validate_topic_name+0xcc>
 80203a0:	2300      	movs	r3, #0
 80203a2:	4618      	mov	r0, r3
 80203a4:	6033      	str	r3, [r6, #0]
 80203a6:	e77c      	b.n	80202a2 <rcl_validate_topic_name+0x56>
 80203a8:	2205      	movs	r2, #5
 80203aa:	6032      	str	r2, [r6, #0]
 80203ac:	2f00      	cmp	r7, #0
 80203ae:	d1d6      	bne.n	802035e <rcl_validate_topic_name+0x112>
 80203b0:	e7a1      	b.n	80202f6 <rcl_validate_topic_name+0xaa>
 80203b2:	2d00      	cmp	r5, #0
 80203b4:	bf14      	ite	ne
 80203b6:	2308      	movne	r3, #8
 80203b8:	2303      	moveq	r3, #3
 80203ba:	6033      	str	r3, [r6, #0]
 80203bc:	2f00      	cmp	r7, #0
 80203be:	d193      	bne.n	80202e8 <rcl_validate_topic_name+0x9c>
 80203c0:	e799      	b.n	80202f6 <rcl_validate_topic_name+0xaa>
 80203c2:	2307      	movs	r3, #7
 80203c4:	6033      	str	r3, [r6, #0]
 80203c6:	2f00      	cmp	r7, #0
 80203c8:	d095      	beq.n	80202f6 <rcl_validate_topic_name+0xaa>
 80203ca:	2301      	movs	r3, #1
 80203cc:	e7c7      	b.n	802035e <rcl_validate_topic_name+0x112>
 80203ce:	bf00      	nop
 80203d0:	080231f8 	.word	0x080231f8

080203d4 <rcutils_string_array_fini>:
 80203d4:	b328      	cbz	r0, 8020422 <rcutils_string_array_fini+0x4e>
 80203d6:	b570      	push	{r4, r5, r6, lr}
 80203d8:	4604      	mov	r4, r0
 80203da:	6840      	ldr	r0, [r0, #4]
 80203dc:	b1e0      	cbz	r0, 8020418 <rcutils_string_array_fini+0x44>
 80203de:	f104 0008 	add.w	r0, r4, #8
 80203e2:	f7f5 f949 	bl	8015678 <rcutils_allocator_is_valid>
 80203e6:	b1c0      	cbz	r0, 802041a <rcutils_string_array_fini+0x46>
 80203e8:	6823      	ldr	r3, [r4, #0]
 80203ea:	b1c3      	cbz	r3, 802041e <rcutils_string_array_fini+0x4a>
 80203ec:	2500      	movs	r5, #0
 80203ee:	6860      	ldr	r0, [r4, #4]
 80203f0:	462e      	mov	r6, r5
 80203f2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80203f6:	68e3      	ldr	r3, [r4, #12]
 80203f8:	69a1      	ldr	r1, [r4, #24]
 80203fa:	4798      	blx	r3
 80203fc:	e9d4 3000 	ldrd	r3, r0, [r4]
 8020400:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8020404:	3501      	adds	r5, #1
 8020406:	429d      	cmp	r5, r3
 8020408:	d3f3      	bcc.n	80203f2 <rcutils_string_array_fini+0x1e>
 802040a:	68e3      	ldr	r3, [r4, #12]
 802040c:	69a1      	ldr	r1, [r4, #24]
 802040e:	4798      	blx	r3
 8020410:	2300      	movs	r3, #0
 8020412:	4618      	mov	r0, r3
 8020414:	e9c4 3300 	strd	r3, r3, [r4]
 8020418:	bd70      	pop	{r4, r5, r6, pc}
 802041a:	200b      	movs	r0, #11
 802041c:	bd70      	pop	{r4, r5, r6, pc}
 802041e:	6860      	ldr	r0, [r4, #4]
 8020420:	e7f3      	b.n	802040a <rcutils_string_array_fini+0x36>
 8020422:	200b      	movs	r0, #11
 8020424:	4770      	bx	lr
 8020426:	bf00      	nop

08020428 <rmw_create_guard_condition>:
 8020428:	b538      	push	{r3, r4, r5, lr}
 802042a:	4605      	mov	r5, r0
 802042c:	4808      	ldr	r0, [pc, #32]	; (8020450 <rmw_create_guard_condition+0x28>)
 802042e:	f7fe f939 	bl	801e6a4 <get_memory>
 8020432:	4603      	mov	r3, r0
 8020434:	b148      	cbz	r0, 802044a <rmw_create_guard_condition+0x22>
 8020436:	6884      	ldr	r4, [r0, #8]
 8020438:	2300      	movs	r3, #0
 802043a:	61e5      	str	r5, [r4, #28]
 802043c:	7423      	strb	r3, [r4, #16]
 802043e:	f7fe f999 	bl	801e774 <rmw_get_implementation_identifier>
 8020442:	f104 0314 	add.w	r3, r4, #20
 8020446:	e9c4 0405 	strd	r0, r4, [r4, #20]
 802044a:	4618      	mov	r0, r3
 802044c:	bd38      	pop	{r3, r4, r5, pc}
 802044e:	bf00      	nop
 8020450:	200174cc 	.word	0x200174cc

08020454 <rmw_destroy_guard_condition>:
 8020454:	b508      	push	{r3, lr}
 8020456:	4b08      	ldr	r3, [pc, #32]	; (8020478 <rmw_destroy_guard_condition+0x24>)
 8020458:	6819      	ldr	r1, [r3, #0]
 802045a:	b911      	cbnz	r1, 8020462 <rmw_destroy_guard_condition+0xe>
 802045c:	e00a      	b.n	8020474 <rmw_destroy_guard_condition+0x20>
 802045e:	6849      	ldr	r1, [r1, #4]
 8020460:	b141      	cbz	r1, 8020474 <rmw_destroy_guard_condition+0x20>
 8020462:	688b      	ldr	r3, [r1, #8]
 8020464:	3314      	adds	r3, #20
 8020466:	4298      	cmp	r0, r3
 8020468:	d1f9      	bne.n	802045e <rmw_destroy_guard_condition+0xa>
 802046a:	4803      	ldr	r0, [pc, #12]	; (8020478 <rmw_destroy_guard_condition+0x24>)
 802046c:	f7fe f92a 	bl	801e6c4 <put_memory>
 8020470:	2000      	movs	r0, #0
 8020472:	bd08      	pop	{r3, pc}
 8020474:	2001      	movs	r0, #1
 8020476:	bd08      	pop	{r3, pc}
 8020478:	200174cc 	.word	0x200174cc

0802047c <rmw_trigger_guard_condition>:
 802047c:	b160      	cbz	r0, 8020498 <rmw_trigger_guard_condition+0x1c>
 802047e:	b510      	push	{r4, lr}
 8020480:	4604      	mov	r4, r0
 8020482:	6800      	ldr	r0, [r0, #0]
 8020484:	f7f6 fc48 	bl	8016d18 <is_uxrce_rmw_identifier_valid>
 8020488:	b908      	cbnz	r0, 802048e <rmw_trigger_guard_condition+0x12>
 802048a:	2001      	movs	r0, #1
 802048c:	bd10      	pop	{r4, pc}
 802048e:	6863      	ldr	r3, [r4, #4]
 8020490:	2201      	movs	r2, #1
 8020492:	2000      	movs	r0, #0
 8020494:	741a      	strb	r2, [r3, #16]
 8020496:	bd10      	pop	{r4, pc}
 8020498:	2001      	movs	r0, #1
 802049a:	4770      	bx	lr

0802049c <calloc>:
 802049c:	4b02      	ldr	r3, [pc, #8]	; (80204a8 <calloc+0xc>)
 802049e:	460a      	mov	r2, r1
 80204a0:	4601      	mov	r1, r0
 80204a2:	6818      	ldr	r0, [r3, #0]
 80204a4:	f000 b802 	b.w	80204ac <_calloc_r>
 80204a8:	20000534 	.word	0x20000534

080204ac <_calloc_r>:
 80204ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80204ae:	fba1 2402 	umull	r2, r4, r1, r2
 80204b2:	b94c      	cbnz	r4, 80204c8 <_calloc_r+0x1c>
 80204b4:	4611      	mov	r1, r2
 80204b6:	9201      	str	r2, [sp, #4]
 80204b8:	f000 f886 	bl	80205c8 <_malloc_r>
 80204bc:	9a01      	ldr	r2, [sp, #4]
 80204be:	4605      	mov	r5, r0
 80204c0:	b930      	cbnz	r0, 80204d0 <_calloc_r+0x24>
 80204c2:	4628      	mov	r0, r5
 80204c4:	b003      	add	sp, #12
 80204c6:	bd30      	pop	{r4, r5, pc}
 80204c8:	220c      	movs	r2, #12
 80204ca:	6002      	str	r2, [r0, #0]
 80204cc:	2500      	movs	r5, #0
 80204ce:	e7f8      	b.n	80204c2 <_calloc_r+0x16>
 80204d0:	4621      	mov	r1, r4
 80204d2:	f000 fd7b 	bl	8020fcc <memset>
 80204d6:	e7f4      	b.n	80204c2 <_calloc_r+0x16>

080204d8 <getenv>:
 80204d8:	b507      	push	{r0, r1, r2, lr}
 80204da:	4b04      	ldr	r3, [pc, #16]	; (80204ec <getenv+0x14>)
 80204dc:	4601      	mov	r1, r0
 80204de:	aa01      	add	r2, sp, #4
 80204e0:	6818      	ldr	r0, [r3, #0]
 80204e2:	f000 f805 	bl	80204f0 <_findenv_r>
 80204e6:	b003      	add	sp, #12
 80204e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80204ec:	20000534 	.word	0x20000534

080204f0 <_findenv_r>:
 80204f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204f4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8020564 <_findenv_r+0x74>
 80204f8:	4607      	mov	r7, r0
 80204fa:	4689      	mov	r9, r1
 80204fc:	4616      	mov	r6, r2
 80204fe:	f000 fe5b 	bl	80211b8 <__env_lock>
 8020502:	f8da 4000 	ldr.w	r4, [sl]
 8020506:	b134      	cbz	r4, 8020516 <_findenv_r+0x26>
 8020508:	464b      	mov	r3, r9
 802050a:	4698      	mov	r8, r3
 802050c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020510:	b13a      	cbz	r2, 8020522 <_findenv_r+0x32>
 8020512:	2a3d      	cmp	r2, #61	; 0x3d
 8020514:	d1f9      	bne.n	802050a <_findenv_r+0x1a>
 8020516:	4638      	mov	r0, r7
 8020518:	f000 fe54 	bl	80211c4 <__env_unlock>
 802051c:	2000      	movs	r0, #0
 802051e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020522:	eba8 0809 	sub.w	r8, r8, r9
 8020526:	46a3      	mov	fp, r4
 8020528:	f854 0b04 	ldr.w	r0, [r4], #4
 802052c:	2800      	cmp	r0, #0
 802052e:	d0f2      	beq.n	8020516 <_findenv_r+0x26>
 8020530:	4642      	mov	r2, r8
 8020532:	4649      	mov	r1, r9
 8020534:	f000 fd5f 	bl	8020ff6 <strncmp>
 8020538:	2800      	cmp	r0, #0
 802053a:	d1f4      	bne.n	8020526 <_findenv_r+0x36>
 802053c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020540:	eb03 0508 	add.w	r5, r3, r8
 8020544:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020548:	2b3d      	cmp	r3, #61	; 0x3d
 802054a:	d1ec      	bne.n	8020526 <_findenv_r+0x36>
 802054c:	f8da 3000 	ldr.w	r3, [sl]
 8020550:	ebab 0303 	sub.w	r3, fp, r3
 8020554:	109b      	asrs	r3, r3, #2
 8020556:	4638      	mov	r0, r7
 8020558:	6033      	str	r3, [r6, #0]
 802055a:	f000 fe33 	bl	80211c4 <__env_unlock>
 802055e:	1c68      	adds	r0, r5, #1
 8020560:	e7dd      	b.n	802051e <_findenv_r+0x2e>
 8020562:	bf00      	nop
 8020564:	20000000 	.word	0x20000000

08020568 <malloc>:
 8020568:	4b02      	ldr	r3, [pc, #8]	; (8020574 <malloc+0xc>)
 802056a:	4601      	mov	r1, r0
 802056c:	6818      	ldr	r0, [r3, #0]
 802056e:	f000 b82b 	b.w	80205c8 <_malloc_r>
 8020572:	bf00      	nop
 8020574:	20000534 	.word	0x20000534

08020578 <free>:
 8020578:	4b02      	ldr	r3, [pc, #8]	; (8020584 <free+0xc>)
 802057a:	4601      	mov	r1, r0
 802057c:	6818      	ldr	r0, [r3, #0]
 802057e:	f000 be27 	b.w	80211d0 <_free_r>
 8020582:	bf00      	nop
 8020584:	20000534 	.word	0x20000534

08020588 <sbrk_aligned>:
 8020588:	b570      	push	{r4, r5, r6, lr}
 802058a:	4e0e      	ldr	r6, [pc, #56]	; (80205c4 <sbrk_aligned+0x3c>)
 802058c:	460c      	mov	r4, r1
 802058e:	6831      	ldr	r1, [r6, #0]
 8020590:	4605      	mov	r5, r0
 8020592:	b911      	cbnz	r1, 802059a <sbrk_aligned+0x12>
 8020594:	f000 fd8c 	bl	80210b0 <_sbrk_r>
 8020598:	6030      	str	r0, [r6, #0]
 802059a:	4621      	mov	r1, r4
 802059c:	4628      	mov	r0, r5
 802059e:	f000 fd87 	bl	80210b0 <_sbrk_r>
 80205a2:	1c43      	adds	r3, r0, #1
 80205a4:	d00a      	beq.n	80205bc <sbrk_aligned+0x34>
 80205a6:	1cc4      	adds	r4, r0, #3
 80205a8:	f024 0403 	bic.w	r4, r4, #3
 80205ac:	42a0      	cmp	r0, r4
 80205ae:	d007      	beq.n	80205c0 <sbrk_aligned+0x38>
 80205b0:	1a21      	subs	r1, r4, r0
 80205b2:	4628      	mov	r0, r5
 80205b4:	f000 fd7c 	bl	80210b0 <_sbrk_r>
 80205b8:	3001      	adds	r0, #1
 80205ba:	d101      	bne.n	80205c0 <sbrk_aligned+0x38>
 80205bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80205c0:	4620      	mov	r0, r4
 80205c2:	bd70      	pop	{r4, r5, r6, pc}
 80205c4:	200176bc 	.word	0x200176bc

080205c8 <_malloc_r>:
 80205c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205cc:	1ccd      	adds	r5, r1, #3
 80205ce:	f025 0503 	bic.w	r5, r5, #3
 80205d2:	3508      	adds	r5, #8
 80205d4:	2d0c      	cmp	r5, #12
 80205d6:	bf38      	it	cc
 80205d8:	250c      	movcc	r5, #12
 80205da:	2d00      	cmp	r5, #0
 80205dc:	4607      	mov	r7, r0
 80205de:	db01      	blt.n	80205e4 <_malloc_r+0x1c>
 80205e0:	42a9      	cmp	r1, r5
 80205e2:	d905      	bls.n	80205f0 <_malloc_r+0x28>
 80205e4:	230c      	movs	r3, #12
 80205e6:	603b      	str	r3, [r7, #0]
 80205e8:	2600      	movs	r6, #0
 80205ea:	4630      	mov	r0, r6
 80205ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80206c4 <_malloc_r+0xfc>
 80205f4:	f000 f868 	bl	80206c8 <__malloc_lock>
 80205f8:	f8d8 3000 	ldr.w	r3, [r8]
 80205fc:	461c      	mov	r4, r3
 80205fe:	bb5c      	cbnz	r4, 8020658 <_malloc_r+0x90>
 8020600:	4629      	mov	r1, r5
 8020602:	4638      	mov	r0, r7
 8020604:	f7ff ffc0 	bl	8020588 <sbrk_aligned>
 8020608:	1c43      	adds	r3, r0, #1
 802060a:	4604      	mov	r4, r0
 802060c:	d155      	bne.n	80206ba <_malloc_r+0xf2>
 802060e:	f8d8 4000 	ldr.w	r4, [r8]
 8020612:	4626      	mov	r6, r4
 8020614:	2e00      	cmp	r6, #0
 8020616:	d145      	bne.n	80206a4 <_malloc_r+0xdc>
 8020618:	2c00      	cmp	r4, #0
 802061a:	d048      	beq.n	80206ae <_malloc_r+0xe6>
 802061c:	6823      	ldr	r3, [r4, #0]
 802061e:	4631      	mov	r1, r6
 8020620:	4638      	mov	r0, r7
 8020622:	eb04 0903 	add.w	r9, r4, r3
 8020626:	f000 fd43 	bl	80210b0 <_sbrk_r>
 802062a:	4581      	cmp	r9, r0
 802062c:	d13f      	bne.n	80206ae <_malloc_r+0xe6>
 802062e:	6821      	ldr	r1, [r4, #0]
 8020630:	1a6d      	subs	r5, r5, r1
 8020632:	4629      	mov	r1, r5
 8020634:	4638      	mov	r0, r7
 8020636:	f7ff ffa7 	bl	8020588 <sbrk_aligned>
 802063a:	3001      	adds	r0, #1
 802063c:	d037      	beq.n	80206ae <_malloc_r+0xe6>
 802063e:	6823      	ldr	r3, [r4, #0]
 8020640:	442b      	add	r3, r5
 8020642:	6023      	str	r3, [r4, #0]
 8020644:	f8d8 3000 	ldr.w	r3, [r8]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d038      	beq.n	80206be <_malloc_r+0xf6>
 802064c:	685a      	ldr	r2, [r3, #4]
 802064e:	42a2      	cmp	r2, r4
 8020650:	d12b      	bne.n	80206aa <_malloc_r+0xe2>
 8020652:	2200      	movs	r2, #0
 8020654:	605a      	str	r2, [r3, #4]
 8020656:	e00f      	b.n	8020678 <_malloc_r+0xb0>
 8020658:	6822      	ldr	r2, [r4, #0]
 802065a:	1b52      	subs	r2, r2, r5
 802065c:	d41f      	bmi.n	802069e <_malloc_r+0xd6>
 802065e:	2a0b      	cmp	r2, #11
 8020660:	d917      	bls.n	8020692 <_malloc_r+0xca>
 8020662:	1961      	adds	r1, r4, r5
 8020664:	42a3      	cmp	r3, r4
 8020666:	6025      	str	r5, [r4, #0]
 8020668:	bf18      	it	ne
 802066a:	6059      	strne	r1, [r3, #4]
 802066c:	6863      	ldr	r3, [r4, #4]
 802066e:	bf08      	it	eq
 8020670:	f8c8 1000 	streq.w	r1, [r8]
 8020674:	5162      	str	r2, [r4, r5]
 8020676:	604b      	str	r3, [r1, #4]
 8020678:	4638      	mov	r0, r7
 802067a:	f104 060b 	add.w	r6, r4, #11
 802067e:	f000 f829 	bl	80206d4 <__malloc_unlock>
 8020682:	f026 0607 	bic.w	r6, r6, #7
 8020686:	1d23      	adds	r3, r4, #4
 8020688:	1af2      	subs	r2, r6, r3
 802068a:	d0ae      	beq.n	80205ea <_malloc_r+0x22>
 802068c:	1b9b      	subs	r3, r3, r6
 802068e:	50a3      	str	r3, [r4, r2]
 8020690:	e7ab      	b.n	80205ea <_malloc_r+0x22>
 8020692:	42a3      	cmp	r3, r4
 8020694:	6862      	ldr	r2, [r4, #4]
 8020696:	d1dd      	bne.n	8020654 <_malloc_r+0x8c>
 8020698:	f8c8 2000 	str.w	r2, [r8]
 802069c:	e7ec      	b.n	8020678 <_malloc_r+0xb0>
 802069e:	4623      	mov	r3, r4
 80206a0:	6864      	ldr	r4, [r4, #4]
 80206a2:	e7ac      	b.n	80205fe <_malloc_r+0x36>
 80206a4:	4634      	mov	r4, r6
 80206a6:	6876      	ldr	r6, [r6, #4]
 80206a8:	e7b4      	b.n	8020614 <_malloc_r+0x4c>
 80206aa:	4613      	mov	r3, r2
 80206ac:	e7cc      	b.n	8020648 <_malloc_r+0x80>
 80206ae:	230c      	movs	r3, #12
 80206b0:	603b      	str	r3, [r7, #0]
 80206b2:	4638      	mov	r0, r7
 80206b4:	f000 f80e 	bl	80206d4 <__malloc_unlock>
 80206b8:	e797      	b.n	80205ea <_malloc_r+0x22>
 80206ba:	6025      	str	r5, [r4, #0]
 80206bc:	e7dc      	b.n	8020678 <_malloc_r+0xb0>
 80206be:	605b      	str	r3, [r3, #4]
 80206c0:	deff      	udf	#255	; 0xff
 80206c2:	bf00      	nop
 80206c4:	200176b8 	.word	0x200176b8

080206c8 <__malloc_lock>:
 80206c8:	4801      	ldr	r0, [pc, #4]	; (80206d0 <__malloc_lock+0x8>)
 80206ca:	f000 bd3e 	b.w	802114a <__retarget_lock_acquire_recursive>
 80206ce:	bf00      	nop
 80206d0:	20017801 	.word	0x20017801

080206d4 <__malloc_unlock>:
 80206d4:	4801      	ldr	r0, [pc, #4]	; (80206dc <__malloc_unlock+0x8>)
 80206d6:	f000 bd39 	b.w	802114c <__retarget_lock_release_recursive>
 80206da:	bf00      	nop
 80206dc:	20017801 	.word	0x20017801

080206e0 <srand>:
 80206e0:	b538      	push	{r3, r4, r5, lr}
 80206e2:	4b10      	ldr	r3, [pc, #64]	; (8020724 <srand+0x44>)
 80206e4:	681d      	ldr	r5, [r3, #0]
 80206e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80206e8:	4604      	mov	r4, r0
 80206ea:	b9b3      	cbnz	r3, 802071a <srand+0x3a>
 80206ec:	2018      	movs	r0, #24
 80206ee:	f7ff ff3b 	bl	8020568 <malloc>
 80206f2:	4602      	mov	r2, r0
 80206f4:	6328      	str	r0, [r5, #48]	; 0x30
 80206f6:	b920      	cbnz	r0, 8020702 <srand+0x22>
 80206f8:	4b0b      	ldr	r3, [pc, #44]	; (8020728 <srand+0x48>)
 80206fa:	480c      	ldr	r0, [pc, #48]	; (802072c <srand+0x4c>)
 80206fc:	2146      	movs	r1, #70	; 0x46
 80206fe:	f000 fd3d 	bl	802117c <__assert_func>
 8020702:	490b      	ldr	r1, [pc, #44]	; (8020730 <srand+0x50>)
 8020704:	4b0b      	ldr	r3, [pc, #44]	; (8020734 <srand+0x54>)
 8020706:	e9c0 1300 	strd	r1, r3, [r0]
 802070a:	4b0b      	ldr	r3, [pc, #44]	; (8020738 <srand+0x58>)
 802070c:	6083      	str	r3, [r0, #8]
 802070e:	230b      	movs	r3, #11
 8020710:	8183      	strh	r3, [r0, #12]
 8020712:	2100      	movs	r1, #0
 8020714:	2001      	movs	r0, #1
 8020716:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802071a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802071c:	2200      	movs	r2, #0
 802071e:	611c      	str	r4, [r3, #16]
 8020720:	615a      	str	r2, [r3, #20]
 8020722:	bd38      	pop	{r3, r4, r5, pc}
 8020724:	20000534 	.word	0x20000534
 8020728:	08023188 	.word	0x08023188
 802072c:	0802319f 	.word	0x0802319f
 8020730:	abcd330e 	.word	0xabcd330e
 8020734:	e66d1234 	.word	0xe66d1234
 8020738:	0005deec 	.word	0x0005deec

0802073c <rand>:
 802073c:	4b16      	ldr	r3, [pc, #88]	; (8020798 <rand+0x5c>)
 802073e:	b510      	push	{r4, lr}
 8020740:	681c      	ldr	r4, [r3, #0]
 8020742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020744:	b9b3      	cbnz	r3, 8020774 <rand+0x38>
 8020746:	2018      	movs	r0, #24
 8020748:	f7ff ff0e 	bl	8020568 <malloc>
 802074c:	4602      	mov	r2, r0
 802074e:	6320      	str	r0, [r4, #48]	; 0x30
 8020750:	b920      	cbnz	r0, 802075c <rand+0x20>
 8020752:	4b12      	ldr	r3, [pc, #72]	; (802079c <rand+0x60>)
 8020754:	4812      	ldr	r0, [pc, #72]	; (80207a0 <rand+0x64>)
 8020756:	2152      	movs	r1, #82	; 0x52
 8020758:	f000 fd10 	bl	802117c <__assert_func>
 802075c:	4911      	ldr	r1, [pc, #68]	; (80207a4 <rand+0x68>)
 802075e:	4b12      	ldr	r3, [pc, #72]	; (80207a8 <rand+0x6c>)
 8020760:	e9c0 1300 	strd	r1, r3, [r0]
 8020764:	4b11      	ldr	r3, [pc, #68]	; (80207ac <rand+0x70>)
 8020766:	6083      	str	r3, [r0, #8]
 8020768:	230b      	movs	r3, #11
 802076a:	8183      	strh	r3, [r0, #12]
 802076c:	2100      	movs	r1, #0
 802076e:	2001      	movs	r0, #1
 8020770:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020774:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8020776:	480e      	ldr	r0, [pc, #56]	; (80207b0 <rand+0x74>)
 8020778:	690b      	ldr	r3, [r1, #16]
 802077a:	694c      	ldr	r4, [r1, #20]
 802077c:	4a0d      	ldr	r2, [pc, #52]	; (80207b4 <rand+0x78>)
 802077e:	4358      	muls	r0, r3
 8020780:	fb02 0004 	mla	r0, r2, r4, r0
 8020784:	fba3 3202 	umull	r3, r2, r3, r2
 8020788:	3301      	adds	r3, #1
 802078a:	eb40 0002 	adc.w	r0, r0, r2
 802078e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020792:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020796:	bd10      	pop	{r4, pc}
 8020798:	20000534 	.word	0x20000534
 802079c:	08023188 	.word	0x08023188
 80207a0:	0802319f 	.word	0x0802319f
 80207a4:	abcd330e 	.word	0xabcd330e
 80207a8:	e66d1234 	.word	0xe66d1234
 80207ac:	0005deec 	.word	0x0005deec
 80207b0:	5851f42d 	.word	0x5851f42d
 80207b4:	4c957f2d 	.word	0x4c957f2d

080207b8 <realloc>:
 80207b8:	4b02      	ldr	r3, [pc, #8]	; (80207c4 <realloc+0xc>)
 80207ba:	460a      	mov	r2, r1
 80207bc:	4601      	mov	r1, r0
 80207be:	6818      	ldr	r0, [r3, #0]
 80207c0:	f000 b802 	b.w	80207c8 <_realloc_r>
 80207c4:	20000534 	.word	0x20000534

080207c8 <_realloc_r>:
 80207c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207cc:	4680      	mov	r8, r0
 80207ce:	4614      	mov	r4, r2
 80207d0:	460e      	mov	r6, r1
 80207d2:	b921      	cbnz	r1, 80207de <_realloc_r+0x16>
 80207d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80207d8:	4611      	mov	r1, r2
 80207da:	f7ff bef5 	b.w	80205c8 <_malloc_r>
 80207de:	b92a      	cbnz	r2, 80207ec <_realloc_r+0x24>
 80207e0:	f000 fcf6 	bl	80211d0 <_free_r>
 80207e4:	4625      	mov	r5, r4
 80207e6:	4628      	mov	r0, r5
 80207e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207ec:	f000 fd3c 	bl	8021268 <_malloc_usable_size_r>
 80207f0:	4284      	cmp	r4, r0
 80207f2:	4607      	mov	r7, r0
 80207f4:	d802      	bhi.n	80207fc <_realloc_r+0x34>
 80207f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80207fa:	d812      	bhi.n	8020822 <_realloc_r+0x5a>
 80207fc:	4621      	mov	r1, r4
 80207fe:	4640      	mov	r0, r8
 8020800:	f7ff fee2 	bl	80205c8 <_malloc_r>
 8020804:	4605      	mov	r5, r0
 8020806:	2800      	cmp	r0, #0
 8020808:	d0ed      	beq.n	80207e6 <_realloc_r+0x1e>
 802080a:	42bc      	cmp	r4, r7
 802080c:	4622      	mov	r2, r4
 802080e:	4631      	mov	r1, r6
 8020810:	bf28      	it	cs
 8020812:	463a      	movcs	r2, r7
 8020814:	f000 fca3 	bl	802115e <memcpy>
 8020818:	4631      	mov	r1, r6
 802081a:	4640      	mov	r0, r8
 802081c:	f000 fcd8 	bl	80211d0 <_free_r>
 8020820:	e7e1      	b.n	80207e6 <_realloc_r+0x1e>
 8020822:	4635      	mov	r5, r6
 8020824:	e7df      	b.n	80207e6 <_realloc_r+0x1e>
	...

08020828 <_strtoul_l.constprop.0>:
 8020828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802082c:	4f36      	ldr	r7, [pc, #216]	; (8020908 <_strtoul_l.constprop.0+0xe0>)
 802082e:	4686      	mov	lr, r0
 8020830:	460d      	mov	r5, r1
 8020832:	4628      	mov	r0, r5
 8020834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020838:	5d3e      	ldrb	r6, [r7, r4]
 802083a:	f016 0608 	ands.w	r6, r6, #8
 802083e:	d1f8      	bne.n	8020832 <_strtoul_l.constprop.0+0xa>
 8020840:	2c2d      	cmp	r4, #45	; 0x2d
 8020842:	d130      	bne.n	80208a6 <_strtoul_l.constprop.0+0x7e>
 8020844:	782c      	ldrb	r4, [r5, #0]
 8020846:	2601      	movs	r6, #1
 8020848:	1c85      	adds	r5, r0, #2
 802084a:	2b00      	cmp	r3, #0
 802084c:	d057      	beq.n	80208fe <_strtoul_l.constprop.0+0xd6>
 802084e:	2b10      	cmp	r3, #16
 8020850:	d109      	bne.n	8020866 <_strtoul_l.constprop.0+0x3e>
 8020852:	2c30      	cmp	r4, #48	; 0x30
 8020854:	d107      	bne.n	8020866 <_strtoul_l.constprop.0+0x3e>
 8020856:	7828      	ldrb	r0, [r5, #0]
 8020858:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802085c:	2858      	cmp	r0, #88	; 0x58
 802085e:	d149      	bne.n	80208f4 <_strtoul_l.constprop.0+0xcc>
 8020860:	786c      	ldrb	r4, [r5, #1]
 8020862:	2310      	movs	r3, #16
 8020864:	3502      	adds	r5, #2
 8020866:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802086a:	2700      	movs	r7, #0
 802086c:	fbb8 f8f3 	udiv	r8, r8, r3
 8020870:	fb03 f908 	mul.w	r9, r3, r8
 8020874:	ea6f 0909 	mvn.w	r9, r9
 8020878:	4638      	mov	r0, r7
 802087a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802087e:	f1bc 0f09 	cmp.w	ip, #9
 8020882:	d815      	bhi.n	80208b0 <_strtoul_l.constprop.0+0x88>
 8020884:	4664      	mov	r4, ip
 8020886:	42a3      	cmp	r3, r4
 8020888:	dd23      	ble.n	80208d2 <_strtoul_l.constprop.0+0xaa>
 802088a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 802088e:	d007      	beq.n	80208a0 <_strtoul_l.constprop.0+0x78>
 8020890:	4580      	cmp	r8, r0
 8020892:	d31b      	bcc.n	80208cc <_strtoul_l.constprop.0+0xa4>
 8020894:	d101      	bne.n	802089a <_strtoul_l.constprop.0+0x72>
 8020896:	45a1      	cmp	r9, r4
 8020898:	db18      	blt.n	80208cc <_strtoul_l.constprop.0+0xa4>
 802089a:	fb00 4003 	mla	r0, r0, r3, r4
 802089e:	2701      	movs	r7, #1
 80208a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80208a4:	e7e9      	b.n	802087a <_strtoul_l.constprop.0+0x52>
 80208a6:	2c2b      	cmp	r4, #43	; 0x2b
 80208a8:	bf04      	itt	eq
 80208aa:	782c      	ldrbeq	r4, [r5, #0]
 80208ac:	1c85      	addeq	r5, r0, #2
 80208ae:	e7cc      	b.n	802084a <_strtoul_l.constprop.0+0x22>
 80208b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80208b4:	f1bc 0f19 	cmp.w	ip, #25
 80208b8:	d801      	bhi.n	80208be <_strtoul_l.constprop.0+0x96>
 80208ba:	3c37      	subs	r4, #55	; 0x37
 80208bc:	e7e3      	b.n	8020886 <_strtoul_l.constprop.0+0x5e>
 80208be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80208c2:	f1bc 0f19 	cmp.w	ip, #25
 80208c6:	d804      	bhi.n	80208d2 <_strtoul_l.constprop.0+0xaa>
 80208c8:	3c57      	subs	r4, #87	; 0x57
 80208ca:	e7dc      	b.n	8020886 <_strtoul_l.constprop.0+0x5e>
 80208cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80208d0:	e7e6      	b.n	80208a0 <_strtoul_l.constprop.0+0x78>
 80208d2:	1c7b      	adds	r3, r7, #1
 80208d4:	d106      	bne.n	80208e4 <_strtoul_l.constprop.0+0xbc>
 80208d6:	2322      	movs	r3, #34	; 0x22
 80208d8:	f8ce 3000 	str.w	r3, [lr]
 80208dc:	4638      	mov	r0, r7
 80208de:	b932      	cbnz	r2, 80208ee <_strtoul_l.constprop.0+0xc6>
 80208e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208e4:	b106      	cbz	r6, 80208e8 <_strtoul_l.constprop.0+0xc0>
 80208e6:	4240      	negs	r0, r0
 80208e8:	2a00      	cmp	r2, #0
 80208ea:	d0f9      	beq.n	80208e0 <_strtoul_l.constprop.0+0xb8>
 80208ec:	b107      	cbz	r7, 80208f0 <_strtoul_l.constprop.0+0xc8>
 80208ee:	1e69      	subs	r1, r5, #1
 80208f0:	6011      	str	r1, [r2, #0]
 80208f2:	e7f5      	b.n	80208e0 <_strtoul_l.constprop.0+0xb8>
 80208f4:	2430      	movs	r4, #48	; 0x30
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	d1b5      	bne.n	8020866 <_strtoul_l.constprop.0+0x3e>
 80208fa:	2308      	movs	r3, #8
 80208fc:	e7b3      	b.n	8020866 <_strtoul_l.constprop.0+0x3e>
 80208fe:	2c30      	cmp	r4, #48	; 0x30
 8020900:	d0a9      	beq.n	8020856 <_strtoul_l.constprop.0+0x2e>
 8020902:	230a      	movs	r3, #10
 8020904:	e7af      	b.n	8020866 <_strtoul_l.constprop.0+0x3e>
 8020906:	bf00      	nop
 8020908:	080231f8 	.word	0x080231f8

0802090c <strtoul>:
 802090c:	4613      	mov	r3, r2
 802090e:	460a      	mov	r2, r1
 8020910:	4601      	mov	r1, r0
 8020912:	4802      	ldr	r0, [pc, #8]	; (802091c <strtoul+0x10>)
 8020914:	6800      	ldr	r0, [r0, #0]
 8020916:	f7ff bf87 	b.w	8020828 <_strtoul_l.constprop.0>
 802091a:	bf00      	nop
 802091c:	20000534 	.word	0x20000534

08020920 <std>:
 8020920:	2300      	movs	r3, #0
 8020922:	b510      	push	{r4, lr}
 8020924:	4604      	mov	r4, r0
 8020926:	e9c0 3300 	strd	r3, r3, [r0]
 802092a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802092e:	6083      	str	r3, [r0, #8]
 8020930:	8181      	strh	r1, [r0, #12]
 8020932:	6643      	str	r3, [r0, #100]	; 0x64
 8020934:	81c2      	strh	r2, [r0, #14]
 8020936:	6183      	str	r3, [r0, #24]
 8020938:	4619      	mov	r1, r3
 802093a:	2208      	movs	r2, #8
 802093c:	305c      	adds	r0, #92	; 0x5c
 802093e:	f000 fb45 	bl	8020fcc <memset>
 8020942:	4b0d      	ldr	r3, [pc, #52]	; (8020978 <std+0x58>)
 8020944:	6263      	str	r3, [r4, #36]	; 0x24
 8020946:	4b0d      	ldr	r3, [pc, #52]	; (802097c <std+0x5c>)
 8020948:	62a3      	str	r3, [r4, #40]	; 0x28
 802094a:	4b0d      	ldr	r3, [pc, #52]	; (8020980 <std+0x60>)
 802094c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802094e:	4b0d      	ldr	r3, [pc, #52]	; (8020984 <std+0x64>)
 8020950:	6323      	str	r3, [r4, #48]	; 0x30
 8020952:	4b0d      	ldr	r3, [pc, #52]	; (8020988 <std+0x68>)
 8020954:	6224      	str	r4, [r4, #32]
 8020956:	429c      	cmp	r4, r3
 8020958:	d006      	beq.n	8020968 <std+0x48>
 802095a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802095e:	4294      	cmp	r4, r2
 8020960:	d002      	beq.n	8020968 <std+0x48>
 8020962:	33d0      	adds	r3, #208	; 0xd0
 8020964:	429c      	cmp	r4, r3
 8020966:	d105      	bne.n	8020974 <std+0x54>
 8020968:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802096c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020970:	f000 bbea 	b.w	8021148 <__retarget_lock_init_recursive>
 8020974:	bd10      	pop	{r4, pc}
 8020976:	bf00      	nop
 8020978:	08020d55 	.word	0x08020d55
 802097c:	08020d77 	.word	0x08020d77
 8020980:	08020daf 	.word	0x08020daf
 8020984:	08020dd3 	.word	0x08020dd3
 8020988:	200176c0 	.word	0x200176c0

0802098c <stdio_exit_handler>:
 802098c:	4a02      	ldr	r2, [pc, #8]	; (8020998 <stdio_exit_handler+0xc>)
 802098e:	4903      	ldr	r1, [pc, #12]	; (802099c <stdio_exit_handler+0x10>)
 8020990:	4803      	ldr	r0, [pc, #12]	; (80209a0 <stdio_exit_handler+0x14>)
 8020992:	f000 b869 	b.w	8020a68 <_fwalk_sglue>
 8020996:	bf00      	nop
 8020998:	200004dc 	.word	0x200004dc
 802099c:	08021bdd 	.word	0x08021bdd
 80209a0:	200004e8 	.word	0x200004e8

080209a4 <cleanup_stdio>:
 80209a4:	6841      	ldr	r1, [r0, #4]
 80209a6:	4b0c      	ldr	r3, [pc, #48]	; (80209d8 <cleanup_stdio+0x34>)
 80209a8:	4299      	cmp	r1, r3
 80209aa:	b510      	push	{r4, lr}
 80209ac:	4604      	mov	r4, r0
 80209ae:	d001      	beq.n	80209b4 <cleanup_stdio+0x10>
 80209b0:	f001 f914 	bl	8021bdc <_fflush_r>
 80209b4:	68a1      	ldr	r1, [r4, #8]
 80209b6:	4b09      	ldr	r3, [pc, #36]	; (80209dc <cleanup_stdio+0x38>)
 80209b8:	4299      	cmp	r1, r3
 80209ba:	d002      	beq.n	80209c2 <cleanup_stdio+0x1e>
 80209bc:	4620      	mov	r0, r4
 80209be:	f001 f90d 	bl	8021bdc <_fflush_r>
 80209c2:	68e1      	ldr	r1, [r4, #12]
 80209c4:	4b06      	ldr	r3, [pc, #24]	; (80209e0 <cleanup_stdio+0x3c>)
 80209c6:	4299      	cmp	r1, r3
 80209c8:	d004      	beq.n	80209d4 <cleanup_stdio+0x30>
 80209ca:	4620      	mov	r0, r4
 80209cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209d0:	f001 b904 	b.w	8021bdc <_fflush_r>
 80209d4:	bd10      	pop	{r4, pc}
 80209d6:	bf00      	nop
 80209d8:	200176c0 	.word	0x200176c0
 80209dc:	20017728 	.word	0x20017728
 80209e0:	20017790 	.word	0x20017790

080209e4 <global_stdio_init.part.0>:
 80209e4:	b510      	push	{r4, lr}
 80209e6:	4b0b      	ldr	r3, [pc, #44]	; (8020a14 <global_stdio_init.part.0+0x30>)
 80209e8:	4c0b      	ldr	r4, [pc, #44]	; (8020a18 <global_stdio_init.part.0+0x34>)
 80209ea:	4a0c      	ldr	r2, [pc, #48]	; (8020a1c <global_stdio_init.part.0+0x38>)
 80209ec:	601a      	str	r2, [r3, #0]
 80209ee:	4620      	mov	r0, r4
 80209f0:	2200      	movs	r2, #0
 80209f2:	2104      	movs	r1, #4
 80209f4:	f7ff ff94 	bl	8020920 <std>
 80209f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80209fc:	2201      	movs	r2, #1
 80209fe:	2109      	movs	r1, #9
 8020a00:	f7ff ff8e 	bl	8020920 <std>
 8020a04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020a08:	2202      	movs	r2, #2
 8020a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a0e:	2112      	movs	r1, #18
 8020a10:	f7ff bf86 	b.w	8020920 <std>
 8020a14:	200177f8 	.word	0x200177f8
 8020a18:	200176c0 	.word	0x200176c0
 8020a1c:	0802098d 	.word	0x0802098d

08020a20 <__sfp_lock_acquire>:
 8020a20:	4801      	ldr	r0, [pc, #4]	; (8020a28 <__sfp_lock_acquire+0x8>)
 8020a22:	f000 bb92 	b.w	802114a <__retarget_lock_acquire_recursive>
 8020a26:	bf00      	nop
 8020a28:	20017802 	.word	0x20017802

08020a2c <__sfp_lock_release>:
 8020a2c:	4801      	ldr	r0, [pc, #4]	; (8020a34 <__sfp_lock_release+0x8>)
 8020a2e:	f000 bb8d 	b.w	802114c <__retarget_lock_release_recursive>
 8020a32:	bf00      	nop
 8020a34:	20017802 	.word	0x20017802

08020a38 <__sinit>:
 8020a38:	b510      	push	{r4, lr}
 8020a3a:	4604      	mov	r4, r0
 8020a3c:	f7ff fff0 	bl	8020a20 <__sfp_lock_acquire>
 8020a40:	6a23      	ldr	r3, [r4, #32]
 8020a42:	b11b      	cbz	r3, 8020a4c <__sinit+0x14>
 8020a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a48:	f7ff bff0 	b.w	8020a2c <__sfp_lock_release>
 8020a4c:	4b04      	ldr	r3, [pc, #16]	; (8020a60 <__sinit+0x28>)
 8020a4e:	6223      	str	r3, [r4, #32]
 8020a50:	4b04      	ldr	r3, [pc, #16]	; (8020a64 <__sinit+0x2c>)
 8020a52:	681b      	ldr	r3, [r3, #0]
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d1f5      	bne.n	8020a44 <__sinit+0xc>
 8020a58:	f7ff ffc4 	bl	80209e4 <global_stdio_init.part.0>
 8020a5c:	e7f2      	b.n	8020a44 <__sinit+0xc>
 8020a5e:	bf00      	nop
 8020a60:	080209a5 	.word	0x080209a5
 8020a64:	200177f8 	.word	0x200177f8

08020a68 <_fwalk_sglue>:
 8020a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a6c:	4607      	mov	r7, r0
 8020a6e:	4688      	mov	r8, r1
 8020a70:	4614      	mov	r4, r2
 8020a72:	2600      	movs	r6, #0
 8020a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020a78:	f1b9 0901 	subs.w	r9, r9, #1
 8020a7c:	d505      	bpl.n	8020a8a <_fwalk_sglue+0x22>
 8020a7e:	6824      	ldr	r4, [r4, #0]
 8020a80:	2c00      	cmp	r4, #0
 8020a82:	d1f7      	bne.n	8020a74 <_fwalk_sglue+0xc>
 8020a84:	4630      	mov	r0, r6
 8020a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a8a:	89ab      	ldrh	r3, [r5, #12]
 8020a8c:	2b01      	cmp	r3, #1
 8020a8e:	d907      	bls.n	8020aa0 <_fwalk_sglue+0x38>
 8020a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020a94:	3301      	adds	r3, #1
 8020a96:	d003      	beq.n	8020aa0 <_fwalk_sglue+0x38>
 8020a98:	4629      	mov	r1, r5
 8020a9a:	4638      	mov	r0, r7
 8020a9c:	47c0      	blx	r8
 8020a9e:	4306      	orrs	r6, r0
 8020aa0:	3568      	adds	r5, #104	; 0x68
 8020aa2:	e7e9      	b.n	8020a78 <_fwalk_sglue+0x10>

08020aa4 <iprintf>:
 8020aa4:	b40f      	push	{r0, r1, r2, r3}
 8020aa6:	b507      	push	{r0, r1, r2, lr}
 8020aa8:	4906      	ldr	r1, [pc, #24]	; (8020ac4 <iprintf+0x20>)
 8020aaa:	ab04      	add	r3, sp, #16
 8020aac:	6808      	ldr	r0, [r1, #0]
 8020aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ab2:	6881      	ldr	r1, [r0, #8]
 8020ab4:	9301      	str	r3, [sp, #4]
 8020ab6:	f000 fd61 	bl	802157c <_vfiprintf_r>
 8020aba:	b003      	add	sp, #12
 8020abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ac0:	b004      	add	sp, #16
 8020ac2:	4770      	bx	lr
 8020ac4:	20000534 	.word	0x20000534

08020ac8 <_puts_r>:
 8020ac8:	6a03      	ldr	r3, [r0, #32]
 8020aca:	b570      	push	{r4, r5, r6, lr}
 8020acc:	6884      	ldr	r4, [r0, #8]
 8020ace:	4605      	mov	r5, r0
 8020ad0:	460e      	mov	r6, r1
 8020ad2:	b90b      	cbnz	r3, 8020ad8 <_puts_r+0x10>
 8020ad4:	f7ff ffb0 	bl	8020a38 <__sinit>
 8020ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ada:	07db      	lsls	r3, r3, #31
 8020adc:	d405      	bmi.n	8020aea <_puts_r+0x22>
 8020ade:	89a3      	ldrh	r3, [r4, #12]
 8020ae0:	0598      	lsls	r0, r3, #22
 8020ae2:	d402      	bmi.n	8020aea <_puts_r+0x22>
 8020ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ae6:	f000 fb30 	bl	802114a <__retarget_lock_acquire_recursive>
 8020aea:	89a3      	ldrh	r3, [r4, #12]
 8020aec:	0719      	lsls	r1, r3, #28
 8020aee:	d513      	bpl.n	8020b18 <_puts_r+0x50>
 8020af0:	6923      	ldr	r3, [r4, #16]
 8020af2:	b18b      	cbz	r3, 8020b18 <_puts_r+0x50>
 8020af4:	3e01      	subs	r6, #1
 8020af6:	68a3      	ldr	r3, [r4, #8]
 8020af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020afc:	3b01      	subs	r3, #1
 8020afe:	60a3      	str	r3, [r4, #8]
 8020b00:	b9e9      	cbnz	r1, 8020b3e <_puts_r+0x76>
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	da2e      	bge.n	8020b64 <_puts_r+0x9c>
 8020b06:	4622      	mov	r2, r4
 8020b08:	210a      	movs	r1, #10
 8020b0a:	4628      	mov	r0, r5
 8020b0c:	f000 f99e 	bl	8020e4c <__swbuf_r>
 8020b10:	3001      	adds	r0, #1
 8020b12:	d007      	beq.n	8020b24 <_puts_r+0x5c>
 8020b14:	250a      	movs	r5, #10
 8020b16:	e007      	b.n	8020b28 <_puts_r+0x60>
 8020b18:	4621      	mov	r1, r4
 8020b1a:	4628      	mov	r0, r5
 8020b1c:	f000 f9d4 	bl	8020ec8 <__swsetup_r>
 8020b20:	2800      	cmp	r0, #0
 8020b22:	d0e7      	beq.n	8020af4 <_puts_r+0x2c>
 8020b24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b2a:	07da      	lsls	r2, r3, #31
 8020b2c:	d405      	bmi.n	8020b3a <_puts_r+0x72>
 8020b2e:	89a3      	ldrh	r3, [r4, #12]
 8020b30:	059b      	lsls	r3, r3, #22
 8020b32:	d402      	bmi.n	8020b3a <_puts_r+0x72>
 8020b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b36:	f000 fb09 	bl	802114c <__retarget_lock_release_recursive>
 8020b3a:	4628      	mov	r0, r5
 8020b3c:	bd70      	pop	{r4, r5, r6, pc}
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	da04      	bge.n	8020b4c <_puts_r+0x84>
 8020b42:	69a2      	ldr	r2, [r4, #24]
 8020b44:	429a      	cmp	r2, r3
 8020b46:	dc06      	bgt.n	8020b56 <_puts_r+0x8e>
 8020b48:	290a      	cmp	r1, #10
 8020b4a:	d004      	beq.n	8020b56 <_puts_r+0x8e>
 8020b4c:	6823      	ldr	r3, [r4, #0]
 8020b4e:	1c5a      	adds	r2, r3, #1
 8020b50:	6022      	str	r2, [r4, #0]
 8020b52:	7019      	strb	r1, [r3, #0]
 8020b54:	e7cf      	b.n	8020af6 <_puts_r+0x2e>
 8020b56:	4622      	mov	r2, r4
 8020b58:	4628      	mov	r0, r5
 8020b5a:	f000 f977 	bl	8020e4c <__swbuf_r>
 8020b5e:	3001      	adds	r0, #1
 8020b60:	d1c9      	bne.n	8020af6 <_puts_r+0x2e>
 8020b62:	e7df      	b.n	8020b24 <_puts_r+0x5c>
 8020b64:	6823      	ldr	r3, [r4, #0]
 8020b66:	250a      	movs	r5, #10
 8020b68:	1c5a      	adds	r2, r3, #1
 8020b6a:	6022      	str	r2, [r4, #0]
 8020b6c:	701d      	strb	r5, [r3, #0]
 8020b6e:	e7db      	b.n	8020b28 <_puts_r+0x60>

08020b70 <puts>:
 8020b70:	4b02      	ldr	r3, [pc, #8]	; (8020b7c <puts+0xc>)
 8020b72:	4601      	mov	r1, r0
 8020b74:	6818      	ldr	r0, [r3, #0]
 8020b76:	f7ff bfa7 	b.w	8020ac8 <_puts_r>
 8020b7a:	bf00      	nop
 8020b7c:	20000534 	.word	0x20000534

08020b80 <setbuf>:
 8020b80:	fab1 f281 	clz	r2, r1
 8020b84:	0952      	lsrs	r2, r2, #5
 8020b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020b8a:	0052      	lsls	r2, r2, #1
 8020b8c:	f000 b800 	b.w	8020b90 <setvbuf>

08020b90 <setvbuf>:
 8020b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020b94:	461d      	mov	r5, r3
 8020b96:	4b54      	ldr	r3, [pc, #336]	; (8020ce8 <setvbuf+0x158>)
 8020b98:	681f      	ldr	r7, [r3, #0]
 8020b9a:	4604      	mov	r4, r0
 8020b9c:	460e      	mov	r6, r1
 8020b9e:	4690      	mov	r8, r2
 8020ba0:	b127      	cbz	r7, 8020bac <setvbuf+0x1c>
 8020ba2:	6a3b      	ldr	r3, [r7, #32]
 8020ba4:	b913      	cbnz	r3, 8020bac <setvbuf+0x1c>
 8020ba6:	4638      	mov	r0, r7
 8020ba8:	f7ff ff46 	bl	8020a38 <__sinit>
 8020bac:	f1b8 0f02 	cmp.w	r8, #2
 8020bb0:	d006      	beq.n	8020bc0 <setvbuf+0x30>
 8020bb2:	f1b8 0f01 	cmp.w	r8, #1
 8020bb6:	f200 8094 	bhi.w	8020ce2 <setvbuf+0x152>
 8020bba:	2d00      	cmp	r5, #0
 8020bbc:	f2c0 8091 	blt.w	8020ce2 <setvbuf+0x152>
 8020bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bc2:	07da      	lsls	r2, r3, #31
 8020bc4:	d405      	bmi.n	8020bd2 <setvbuf+0x42>
 8020bc6:	89a3      	ldrh	r3, [r4, #12]
 8020bc8:	059b      	lsls	r3, r3, #22
 8020bca:	d402      	bmi.n	8020bd2 <setvbuf+0x42>
 8020bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020bce:	f000 fabc 	bl	802114a <__retarget_lock_acquire_recursive>
 8020bd2:	4621      	mov	r1, r4
 8020bd4:	4638      	mov	r0, r7
 8020bd6:	f001 f801 	bl	8021bdc <_fflush_r>
 8020bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020bdc:	b141      	cbz	r1, 8020bf0 <setvbuf+0x60>
 8020bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020be2:	4299      	cmp	r1, r3
 8020be4:	d002      	beq.n	8020bec <setvbuf+0x5c>
 8020be6:	4638      	mov	r0, r7
 8020be8:	f000 faf2 	bl	80211d0 <_free_r>
 8020bec:	2300      	movs	r3, #0
 8020bee:	6363      	str	r3, [r4, #52]	; 0x34
 8020bf0:	2300      	movs	r3, #0
 8020bf2:	61a3      	str	r3, [r4, #24]
 8020bf4:	6063      	str	r3, [r4, #4]
 8020bf6:	89a3      	ldrh	r3, [r4, #12]
 8020bf8:	0618      	lsls	r0, r3, #24
 8020bfa:	d503      	bpl.n	8020c04 <setvbuf+0x74>
 8020bfc:	6921      	ldr	r1, [r4, #16]
 8020bfe:	4638      	mov	r0, r7
 8020c00:	f000 fae6 	bl	80211d0 <_free_r>
 8020c04:	89a3      	ldrh	r3, [r4, #12]
 8020c06:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8020c0a:	f023 0303 	bic.w	r3, r3, #3
 8020c0e:	f1b8 0f02 	cmp.w	r8, #2
 8020c12:	81a3      	strh	r3, [r4, #12]
 8020c14:	d05f      	beq.n	8020cd6 <setvbuf+0x146>
 8020c16:	ab01      	add	r3, sp, #4
 8020c18:	466a      	mov	r2, sp
 8020c1a:	4621      	mov	r1, r4
 8020c1c:	4638      	mov	r0, r7
 8020c1e:	f001 f817 	bl	8021c50 <__swhatbuf_r>
 8020c22:	89a3      	ldrh	r3, [r4, #12]
 8020c24:	4318      	orrs	r0, r3
 8020c26:	81a0      	strh	r0, [r4, #12]
 8020c28:	bb2d      	cbnz	r5, 8020c76 <setvbuf+0xe6>
 8020c2a:	9d00      	ldr	r5, [sp, #0]
 8020c2c:	4628      	mov	r0, r5
 8020c2e:	f7ff fc9b 	bl	8020568 <malloc>
 8020c32:	4606      	mov	r6, r0
 8020c34:	2800      	cmp	r0, #0
 8020c36:	d150      	bne.n	8020cda <setvbuf+0x14a>
 8020c38:	f8dd 9000 	ldr.w	r9, [sp]
 8020c3c:	45a9      	cmp	r9, r5
 8020c3e:	d13e      	bne.n	8020cbe <setvbuf+0x12e>
 8020c40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020c44:	2200      	movs	r2, #0
 8020c46:	60a2      	str	r2, [r4, #8]
 8020c48:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020c4c:	6022      	str	r2, [r4, #0]
 8020c4e:	6122      	str	r2, [r4, #16]
 8020c50:	2201      	movs	r2, #1
 8020c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c56:	6162      	str	r2, [r4, #20]
 8020c58:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020c5a:	f043 0302 	orr.w	r3, r3, #2
 8020c5e:	07d1      	lsls	r1, r2, #31
 8020c60:	81a3      	strh	r3, [r4, #12]
 8020c62:	d404      	bmi.n	8020c6e <setvbuf+0xde>
 8020c64:	059b      	lsls	r3, r3, #22
 8020c66:	d402      	bmi.n	8020c6e <setvbuf+0xde>
 8020c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c6a:	f000 fa6f 	bl	802114c <__retarget_lock_release_recursive>
 8020c6e:	4628      	mov	r0, r5
 8020c70:	b003      	add	sp, #12
 8020c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c76:	2e00      	cmp	r6, #0
 8020c78:	d0d8      	beq.n	8020c2c <setvbuf+0x9c>
 8020c7a:	6a3b      	ldr	r3, [r7, #32]
 8020c7c:	b913      	cbnz	r3, 8020c84 <setvbuf+0xf4>
 8020c7e:	4638      	mov	r0, r7
 8020c80:	f7ff feda 	bl	8020a38 <__sinit>
 8020c84:	f1b8 0f01 	cmp.w	r8, #1
 8020c88:	bf08      	it	eq
 8020c8a:	89a3      	ldrheq	r3, [r4, #12]
 8020c8c:	6026      	str	r6, [r4, #0]
 8020c8e:	bf04      	itt	eq
 8020c90:	f043 0301 	orreq.w	r3, r3, #1
 8020c94:	81a3      	strheq	r3, [r4, #12]
 8020c96:	89a3      	ldrh	r3, [r4, #12]
 8020c98:	f013 0208 	ands.w	r2, r3, #8
 8020c9c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020ca0:	d01d      	beq.n	8020cde <setvbuf+0x14e>
 8020ca2:	07da      	lsls	r2, r3, #31
 8020ca4:	bf41      	itttt	mi
 8020ca6:	2200      	movmi	r2, #0
 8020ca8:	426d      	negmi	r5, r5
 8020caa:	60a2      	strmi	r2, [r4, #8]
 8020cac:	61a5      	strmi	r5, [r4, #24]
 8020cae:	bf58      	it	pl
 8020cb0:	60a5      	strpl	r5, [r4, #8]
 8020cb2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020cb4:	f015 0501 	ands.w	r5, r5, #1
 8020cb8:	d0d4      	beq.n	8020c64 <setvbuf+0xd4>
 8020cba:	2500      	movs	r5, #0
 8020cbc:	e7d7      	b.n	8020c6e <setvbuf+0xde>
 8020cbe:	4648      	mov	r0, r9
 8020cc0:	f7ff fc52 	bl	8020568 <malloc>
 8020cc4:	4606      	mov	r6, r0
 8020cc6:	2800      	cmp	r0, #0
 8020cc8:	d0ba      	beq.n	8020c40 <setvbuf+0xb0>
 8020cca:	89a3      	ldrh	r3, [r4, #12]
 8020ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cd0:	81a3      	strh	r3, [r4, #12]
 8020cd2:	464d      	mov	r5, r9
 8020cd4:	e7d1      	b.n	8020c7a <setvbuf+0xea>
 8020cd6:	2500      	movs	r5, #0
 8020cd8:	e7b4      	b.n	8020c44 <setvbuf+0xb4>
 8020cda:	46a9      	mov	r9, r5
 8020cdc:	e7f5      	b.n	8020cca <setvbuf+0x13a>
 8020cde:	60a2      	str	r2, [r4, #8]
 8020ce0:	e7e7      	b.n	8020cb2 <setvbuf+0x122>
 8020ce2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020ce6:	e7c2      	b.n	8020c6e <setvbuf+0xde>
 8020ce8:	20000534 	.word	0x20000534

08020cec <sniprintf>:
 8020cec:	b40c      	push	{r2, r3}
 8020cee:	b530      	push	{r4, r5, lr}
 8020cf0:	4b17      	ldr	r3, [pc, #92]	; (8020d50 <sniprintf+0x64>)
 8020cf2:	1e0c      	subs	r4, r1, #0
 8020cf4:	681d      	ldr	r5, [r3, #0]
 8020cf6:	b09d      	sub	sp, #116	; 0x74
 8020cf8:	da08      	bge.n	8020d0c <sniprintf+0x20>
 8020cfa:	238b      	movs	r3, #139	; 0x8b
 8020cfc:	602b      	str	r3, [r5, #0]
 8020cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d02:	b01d      	add	sp, #116	; 0x74
 8020d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020d08:	b002      	add	sp, #8
 8020d0a:	4770      	bx	lr
 8020d0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020d10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020d14:	bf14      	ite	ne
 8020d16:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020d1a:	4623      	moveq	r3, r4
 8020d1c:	9304      	str	r3, [sp, #16]
 8020d1e:	9307      	str	r3, [sp, #28]
 8020d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020d24:	9002      	str	r0, [sp, #8]
 8020d26:	9006      	str	r0, [sp, #24]
 8020d28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020d2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020d2e:	ab21      	add	r3, sp, #132	; 0x84
 8020d30:	a902      	add	r1, sp, #8
 8020d32:	4628      	mov	r0, r5
 8020d34:	9301      	str	r3, [sp, #4]
 8020d36:	f000 faf9 	bl	802132c <_svfiprintf_r>
 8020d3a:	1c43      	adds	r3, r0, #1
 8020d3c:	bfbc      	itt	lt
 8020d3e:	238b      	movlt	r3, #139	; 0x8b
 8020d40:	602b      	strlt	r3, [r5, #0]
 8020d42:	2c00      	cmp	r4, #0
 8020d44:	d0dd      	beq.n	8020d02 <sniprintf+0x16>
 8020d46:	9b02      	ldr	r3, [sp, #8]
 8020d48:	2200      	movs	r2, #0
 8020d4a:	701a      	strb	r2, [r3, #0]
 8020d4c:	e7d9      	b.n	8020d02 <sniprintf+0x16>
 8020d4e:	bf00      	nop
 8020d50:	20000534 	.word	0x20000534

08020d54 <__sread>:
 8020d54:	b510      	push	{r4, lr}
 8020d56:	460c      	mov	r4, r1
 8020d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d5c:	f000 f996 	bl	802108c <_read_r>
 8020d60:	2800      	cmp	r0, #0
 8020d62:	bfab      	itete	ge
 8020d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d66:	89a3      	ldrhlt	r3, [r4, #12]
 8020d68:	181b      	addge	r3, r3, r0
 8020d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d6e:	bfac      	ite	ge
 8020d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d72:	81a3      	strhlt	r3, [r4, #12]
 8020d74:	bd10      	pop	{r4, pc}

08020d76 <__swrite>:
 8020d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d7a:	461f      	mov	r7, r3
 8020d7c:	898b      	ldrh	r3, [r1, #12]
 8020d7e:	05db      	lsls	r3, r3, #23
 8020d80:	4605      	mov	r5, r0
 8020d82:	460c      	mov	r4, r1
 8020d84:	4616      	mov	r6, r2
 8020d86:	d505      	bpl.n	8020d94 <__swrite+0x1e>
 8020d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d8c:	2302      	movs	r3, #2
 8020d8e:	2200      	movs	r2, #0
 8020d90:	f000 f96a 	bl	8021068 <_lseek_r>
 8020d94:	89a3      	ldrh	r3, [r4, #12]
 8020d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d9e:	81a3      	strh	r3, [r4, #12]
 8020da0:	4632      	mov	r2, r6
 8020da2:	463b      	mov	r3, r7
 8020da4:	4628      	mov	r0, r5
 8020da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020daa:	f000 b991 	b.w	80210d0 <_write_r>

08020dae <__sseek>:
 8020dae:	b510      	push	{r4, lr}
 8020db0:	460c      	mov	r4, r1
 8020db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020db6:	f000 f957 	bl	8021068 <_lseek_r>
 8020dba:	1c43      	adds	r3, r0, #1
 8020dbc:	89a3      	ldrh	r3, [r4, #12]
 8020dbe:	bf15      	itete	ne
 8020dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8020dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020dca:	81a3      	strheq	r3, [r4, #12]
 8020dcc:	bf18      	it	ne
 8020dce:	81a3      	strhne	r3, [r4, #12]
 8020dd0:	bd10      	pop	{r4, pc}

08020dd2 <__sclose>:
 8020dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020dd6:	f000 b937 	b.w	8021048 <_close_r>

08020dda <_vsniprintf_r>:
 8020dda:	b530      	push	{r4, r5, lr}
 8020ddc:	4614      	mov	r4, r2
 8020dde:	2c00      	cmp	r4, #0
 8020de0:	b09b      	sub	sp, #108	; 0x6c
 8020de2:	4605      	mov	r5, r0
 8020de4:	461a      	mov	r2, r3
 8020de6:	da05      	bge.n	8020df4 <_vsniprintf_r+0x1a>
 8020de8:	238b      	movs	r3, #139	; 0x8b
 8020dea:	6003      	str	r3, [r0, #0]
 8020dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020df0:	b01b      	add	sp, #108	; 0x6c
 8020df2:	bd30      	pop	{r4, r5, pc}
 8020df4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020df8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020dfc:	bf14      	ite	ne
 8020dfe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020e02:	4623      	moveq	r3, r4
 8020e04:	9302      	str	r3, [sp, #8]
 8020e06:	9305      	str	r3, [sp, #20]
 8020e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e0c:	9100      	str	r1, [sp, #0]
 8020e0e:	9104      	str	r1, [sp, #16]
 8020e10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e14:	4669      	mov	r1, sp
 8020e16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020e18:	f000 fa88 	bl	802132c <_svfiprintf_r>
 8020e1c:	1c43      	adds	r3, r0, #1
 8020e1e:	bfbc      	itt	lt
 8020e20:	238b      	movlt	r3, #139	; 0x8b
 8020e22:	602b      	strlt	r3, [r5, #0]
 8020e24:	2c00      	cmp	r4, #0
 8020e26:	d0e3      	beq.n	8020df0 <_vsniprintf_r+0x16>
 8020e28:	9b00      	ldr	r3, [sp, #0]
 8020e2a:	2200      	movs	r2, #0
 8020e2c:	701a      	strb	r2, [r3, #0]
 8020e2e:	e7df      	b.n	8020df0 <_vsniprintf_r+0x16>

08020e30 <vsniprintf>:
 8020e30:	b507      	push	{r0, r1, r2, lr}
 8020e32:	9300      	str	r3, [sp, #0]
 8020e34:	4613      	mov	r3, r2
 8020e36:	460a      	mov	r2, r1
 8020e38:	4601      	mov	r1, r0
 8020e3a:	4803      	ldr	r0, [pc, #12]	; (8020e48 <vsniprintf+0x18>)
 8020e3c:	6800      	ldr	r0, [r0, #0]
 8020e3e:	f7ff ffcc 	bl	8020dda <_vsniprintf_r>
 8020e42:	b003      	add	sp, #12
 8020e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8020e48:	20000534 	.word	0x20000534

08020e4c <__swbuf_r>:
 8020e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e4e:	460e      	mov	r6, r1
 8020e50:	4614      	mov	r4, r2
 8020e52:	4605      	mov	r5, r0
 8020e54:	b118      	cbz	r0, 8020e5e <__swbuf_r+0x12>
 8020e56:	6a03      	ldr	r3, [r0, #32]
 8020e58:	b90b      	cbnz	r3, 8020e5e <__swbuf_r+0x12>
 8020e5a:	f7ff fded 	bl	8020a38 <__sinit>
 8020e5e:	69a3      	ldr	r3, [r4, #24]
 8020e60:	60a3      	str	r3, [r4, #8]
 8020e62:	89a3      	ldrh	r3, [r4, #12]
 8020e64:	071a      	lsls	r2, r3, #28
 8020e66:	d525      	bpl.n	8020eb4 <__swbuf_r+0x68>
 8020e68:	6923      	ldr	r3, [r4, #16]
 8020e6a:	b31b      	cbz	r3, 8020eb4 <__swbuf_r+0x68>
 8020e6c:	6823      	ldr	r3, [r4, #0]
 8020e6e:	6922      	ldr	r2, [r4, #16]
 8020e70:	1a98      	subs	r0, r3, r2
 8020e72:	6963      	ldr	r3, [r4, #20]
 8020e74:	b2f6      	uxtb	r6, r6
 8020e76:	4283      	cmp	r3, r0
 8020e78:	4637      	mov	r7, r6
 8020e7a:	dc04      	bgt.n	8020e86 <__swbuf_r+0x3a>
 8020e7c:	4621      	mov	r1, r4
 8020e7e:	4628      	mov	r0, r5
 8020e80:	f000 feac 	bl	8021bdc <_fflush_r>
 8020e84:	b9e0      	cbnz	r0, 8020ec0 <__swbuf_r+0x74>
 8020e86:	68a3      	ldr	r3, [r4, #8]
 8020e88:	3b01      	subs	r3, #1
 8020e8a:	60a3      	str	r3, [r4, #8]
 8020e8c:	6823      	ldr	r3, [r4, #0]
 8020e8e:	1c5a      	adds	r2, r3, #1
 8020e90:	6022      	str	r2, [r4, #0]
 8020e92:	701e      	strb	r6, [r3, #0]
 8020e94:	6962      	ldr	r2, [r4, #20]
 8020e96:	1c43      	adds	r3, r0, #1
 8020e98:	429a      	cmp	r2, r3
 8020e9a:	d004      	beq.n	8020ea6 <__swbuf_r+0x5a>
 8020e9c:	89a3      	ldrh	r3, [r4, #12]
 8020e9e:	07db      	lsls	r3, r3, #31
 8020ea0:	d506      	bpl.n	8020eb0 <__swbuf_r+0x64>
 8020ea2:	2e0a      	cmp	r6, #10
 8020ea4:	d104      	bne.n	8020eb0 <__swbuf_r+0x64>
 8020ea6:	4621      	mov	r1, r4
 8020ea8:	4628      	mov	r0, r5
 8020eaa:	f000 fe97 	bl	8021bdc <_fflush_r>
 8020eae:	b938      	cbnz	r0, 8020ec0 <__swbuf_r+0x74>
 8020eb0:	4638      	mov	r0, r7
 8020eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020eb4:	4621      	mov	r1, r4
 8020eb6:	4628      	mov	r0, r5
 8020eb8:	f000 f806 	bl	8020ec8 <__swsetup_r>
 8020ebc:	2800      	cmp	r0, #0
 8020ebe:	d0d5      	beq.n	8020e6c <__swbuf_r+0x20>
 8020ec0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020ec4:	e7f4      	b.n	8020eb0 <__swbuf_r+0x64>
	...

08020ec8 <__swsetup_r>:
 8020ec8:	b538      	push	{r3, r4, r5, lr}
 8020eca:	4b2a      	ldr	r3, [pc, #168]	; (8020f74 <__swsetup_r+0xac>)
 8020ecc:	4605      	mov	r5, r0
 8020ece:	6818      	ldr	r0, [r3, #0]
 8020ed0:	460c      	mov	r4, r1
 8020ed2:	b118      	cbz	r0, 8020edc <__swsetup_r+0x14>
 8020ed4:	6a03      	ldr	r3, [r0, #32]
 8020ed6:	b90b      	cbnz	r3, 8020edc <__swsetup_r+0x14>
 8020ed8:	f7ff fdae 	bl	8020a38 <__sinit>
 8020edc:	89a3      	ldrh	r3, [r4, #12]
 8020ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ee2:	0718      	lsls	r0, r3, #28
 8020ee4:	d422      	bmi.n	8020f2c <__swsetup_r+0x64>
 8020ee6:	06d9      	lsls	r1, r3, #27
 8020ee8:	d407      	bmi.n	8020efa <__swsetup_r+0x32>
 8020eea:	2309      	movs	r3, #9
 8020eec:	602b      	str	r3, [r5, #0]
 8020eee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020ef2:	81a3      	strh	r3, [r4, #12]
 8020ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020ef8:	e034      	b.n	8020f64 <__swsetup_r+0x9c>
 8020efa:	0758      	lsls	r0, r3, #29
 8020efc:	d512      	bpl.n	8020f24 <__swsetup_r+0x5c>
 8020efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020f00:	b141      	cbz	r1, 8020f14 <__swsetup_r+0x4c>
 8020f02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020f06:	4299      	cmp	r1, r3
 8020f08:	d002      	beq.n	8020f10 <__swsetup_r+0x48>
 8020f0a:	4628      	mov	r0, r5
 8020f0c:	f000 f960 	bl	80211d0 <_free_r>
 8020f10:	2300      	movs	r3, #0
 8020f12:	6363      	str	r3, [r4, #52]	; 0x34
 8020f14:	89a3      	ldrh	r3, [r4, #12]
 8020f16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020f1a:	81a3      	strh	r3, [r4, #12]
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	6063      	str	r3, [r4, #4]
 8020f20:	6923      	ldr	r3, [r4, #16]
 8020f22:	6023      	str	r3, [r4, #0]
 8020f24:	89a3      	ldrh	r3, [r4, #12]
 8020f26:	f043 0308 	orr.w	r3, r3, #8
 8020f2a:	81a3      	strh	r3, [r4, #12]
 8020f2c:	6923      	ldr	r3, [r4, #16]
 8020f2e:	b94b      	cbnz	r3, 8020f44 <__swsetup_r+0x7c>
 8020f30:	89a3      	ldrh	r3, [r4, #12]
 8020f32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f3a:	d003      	beq.n	8020f44 <__swsetup_r+0x7c>
 8020f3c:	4621      	mov	r1, r4
 8020f3e:	4628      	mov	r0, r5
 8020f40:	f000 feac 	bl	8021c9c <__smakebuf_r>
 8020f44:	89a0      	ldrh	r0, [r4, #12]
 8020f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f4a:	f010 0301 	ands.w	r3, r0, #1
 8020f4e:	d00a      	beq.n	8020f66 <__swsetup_r+0x9e>
 8020f50:	2300      	movs	r3, #0
 8020f52:	60a3      	str	r3, [r4, #8]
 8020f54:	6963      	ldr	r3, [r4, #20]
 8020f56:	425b      	negs	r3, r3
 8020f58:	61a3      	str	r3, [r4, #24]
 8020f5a:	6923      	ldr	r3, [r4, #16]
 8020f5c:	b943      	cbnz	r3, 8020f70 <__swsetup_r+0xa8>
 8020f5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020f62:	d1c4      	bne.n	8020eee <__swsetup_r+0x26>
 8020f64:	bd38      	pop	{r3, r4, r5, pc}
 8020f66:	0781      	lsls	r1, r0, #30
 8020f68:	bf58      	it	pl
 8020f6a:	6963      	ldrpl	r3, [r4, #20]
 8020f6c:	60a3      	str	r3, [r4, #8]
 8020f6e:	e7f4      	b.n	8020f5a <__swsetup_r+0x92>
 8020f70:	2000      	movs	r0, #0
 8020f72:	e7f7      	b.n	8020f64 <__swsetup_r+0x9c>
 8020f74:	20000534 	.word	0x20000534

08020f78 <memcmp>:
 8020f78:	b510      	push	{r4, lr}
 8020f7a:	3901      	subs	r1, #1
 8020f7c:	4402      	add	r2, r0
 8020f7e:	4290      	cmp	r0, r2
 8020f80:	d101      	bne.n	8020f86 <memcmp+0xe>
 8020f82:	2000      	movs	r0, #0
 8020f84:	e005      	b.n	8020f92 <memcmp+0x1a>
 8020f86:	7803      	ldrb	r3, [r0, #0]
 8020f88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020f8c:	42a3      	cmp	r3, r4
 8020f8e:	d001      	beq.n	8020f94 <memcmp+0x1c>
 8020f90:	1b18      	subs	r0, r3, r4
 8020f92:	bd10      	pop	{r4, pc}
 8020f94:	3001      	adds	r0, #1
 8020f96:	e7f2      	b.n	8020f7e <memcmp+0x6>

08020f98 <memmove>:
 8020f98:	4288      	cmp	r0, r1
 8020f9a:	b510      	push	{r4, lr}
 8020f9c:	eb01 0402 	add.w	r4, r1, r2
 8020fa0:	d902      	bls.n	8020fa8 <memmove+0x10>
 8020fa2:	4284      	cmp	r4, r0
 8020fa4:	4623      	mov	r3, r4
 8020fa6:	d807      	bhi.n	8020fb8 <memmove+0x20>
 8020fa8:	1e43      	subs	r3, r0, #1
 8020faa:	42a1      	cmp	r1, r4
 8020fac:	d008      	beq.n	8020fc0 <memmove+0x28>
 8020fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020fb6:	e7f8      	b.n	8020faa <memmove+0x12>
 8020fb8:	4402      	add	r2, r0
 8020fba:	4601      	mov	r1, r0
 8020fbc:	428a      	cmp	r2, r1
 8020fbe:	d100      	bne.n	8020fc2 <memmove+0x2a>
 8020fc0:	bd10      	pop	{r4, pc}
 8020fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020fca:	e7f7      	b.n	8020fbc <memmove+0x24>

08020fcc <memset>:
 8020fcc:	4402      	add	r2, r0
 8020fce:	4603      	mov	r3, r0
 8020fd0:	4293      	cmp	r3, r2
 8020fd2:	d100      	bne.n	8020fd6 <memset+0xa>
 8020fd4:	4770      	bx	lr
 8020fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8020fda:	e7f9      	b.n	8020fd0 <memset+0x4>

08020fdc <strchr>:
 8020fdc:	b2c9      	uxtb	r1, r1
 8020fde:	4603      	mov	r3, r0
 8020fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fe4:	b11a      	cbz	r2, 8020fee <strchr+0x12>
 8020fe6:	428a      	cmp	r2, r1
 8020fe8:	d1f9      	bne.n	8020fde <strchr+0x2>
 8020fea:	4618      	mov	r0, r3
 8020fec:	4770      	bx	lr
 8020fee:	2900      	cmp	r1, #0
 8020ff0:	bf18      	it	ne
 8020ff2:	2300      	movne	r3, #0
 8020ff4:	e7f9      	b.n	8020fea <strchr+0xe>

08020ff6 <strncmp>:
 8020ff6:	b510      	push	{r4, lr}
 8020ff8:	b16a      	cbz	r2, 8021016 <strncmp+0x20>
 8020ffa:	3901      	subs	r1, #1
 8020ffc:	1884      	adds	r4, r0, r2
 8020ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021002:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021006:	429a      	cmp	r2, r3
 8021008:	d103      	bne.n	8021012 <strncmp+0x1c>
 802100a:	42a0      	cmp	r0, r4
 802100c:	d001      	beq.n	8021012 <strncmp+0x1c>
 802100e:	2a00      	cmp	r2, #0
 8021010:	d1f5      	bne.n	8020ffe <strncmp+0x8>
 8021012:	1ad0      	subs	r0, r2, r3
 8021014:	bd10      	pop	{r4, pc}
 8021016:	4610      	mov	r0, r2
 8021018:	e7fc      	b.n	8021014 <strncmp+0x1e>

0802101a <strstr>:
 802101a:	780a      	ldrb	r2, [r1, #0]
 802101c:	b570      	push	{r4, r5, r6, lr}
 802101e:	b96a      	cbnz	r2, 802103c <strstr+0x22>
 8021020:	bd70      	pop	{r4, r5, r6, pc}
 8021022:	429a      	cmp	r2, r3
 8021024:	d109      	bne.n	802103a <strstr+0x20>
 8021026:	460c      	mov	r4, r1
 8021028:	4605      	mov	r5, r0
 802102a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802102e:	2b00      	cmp	r3, #0
 8021030:	d0f6      	beq.n	8021020 <strstr+0x6>
 8021032:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8021036:	429e      	cmp	r6, r3
 8021038:	d0f7      	beq.n	802102a <strstr+0x10>
 802103a:	3001      	adds	r0, #1
 802103c:	7803      	ldrb	r3, [r0, #0]
 802103e:	2b00      	cmp	r3, #0
 8021040:	d1ef      	bne.n	8021022 <strstr+0x8>
 8021042:	4618      	mov	r0, r3
 8021044:	e7ec      	b.n	8021020 <strstr+0x6>
	...

08021048 <_close_r>:
 8021048:	b538      	push	{r3, r4, r5, lr}
 802104a:	4d06      	ldr	r5, [pc, #24]	; (8021064 <_close_r+0x1c>)
 802104c:	2300      	movs	r3, #0
 802104e:	4604      	mov	r4, r0
 8021050:	4608      	mov	r0, r1
 8021052:	602b      	str	r3, [r5, #0]
 8021054:	f7e3 fb53 	bl	80046fe <_close>
 8021058:	1c43      	adds	r3, r0, #1
 802105a:	d102      	bne.n	8021062 <_close_r+0x1a>
 802105c:	682b      	ldr	r3, [r5, #0]
 802105e:	b103      	cbz	r3, 8021062 <_close_r+0x1a>
 8021060:	6023      	str	r3, [r4, #0]
 8021062:	bd38      	pop	{r3, r4, r5, pc}
 8021064:	200177fc 	.word	0x200177fc

08021068 <_lseek_r>:
 8021068:	b538      	push	{r3, r4, r5, lr}
 802106a:	4d07      	ldr	r5, [pc, #28]	; (8021088 <_lseek_r+0x20>)
 802106c:	4604      	mov	r4, r0
 802106e:	4608      	mov	r0, r1
 8021070:	4611      	mov	r1, r2
 8021072:	2200      	movs	r2, #0
 8021074:	602a      	str	r2, [r5, #0]
 8021076:	461a      	mov	r2, r3
 8021078:	f7e3 fb68 	bl	800474c <_lseek>
 802107c:	1c43      	adds	r3, r0, #1
 802107e:	d102      	bne.n	8021086 <_lseek_r+0x1e>
 8021080:	682b      	ldr	r3, [r5, #0]
 8021082:	b103      	cbz	r3, 8021086 <_lseek_r+0x1e>
 8021084:	6023      	str	r3, [r4, #0]
 8021086:	bd38      	pop	{r3, r4, r5, pc}
 8021088:	200177fc 	.word	0x200177fc

0802108c <_read_r>:
 802108c:	b538      	push	{r3, r4, r5, lr}
 802108e:	4d07      	ldr	r5, [pc, #28]	; (80210ac <_read_r+0x20>)
 8021090:	4604      	mov	r4, r0
 8021092:	4608      	mov	r0, r1
 8021094:	4611      	mov	r1, r2
 8021096:	2200      	movs	r2, #0
 8021098:	602a      	str	r2, [r5, #0]
 802109a:	461a      	mov	r2, r3
 802109c:	f7e3 faf6 	bl	800468c <_read>
 80210a0:	1c43      	adds	r3, r0, #1
 80210a2:	d102      	bne.n	80210aa <_read_r+0x1e>
 80210a4:	682b      	ldr	r3, [r5, #0]
 80210a6:	b103      	cbz	r3, 80210aa <_read_r+0x1e>
 80210a8:	6023      	str	r3, [r4, #0]
 80210aa:	bd38      	pop	{r3, r4, r5, pc}
 80210ac:	200177fc 	.word	0x200177fc

080210b0 <_sbrk_r>:
 80210b0:	b538      	push	{r3, r4, r5, lr}
 80210b2:	4d06      	ldr	r5, [pc, #24]	; (80210cc <_sbrk_r+0x1c>)
 80210b4:	2300      	movs	r3, #0
 80210b6:	4604      	mov	r4, r0
 80210b8:	4608      	mov	r0, r1
 80210ba:	602b      	str	r3, [r5, #0]
 80210bc:	f7e3 fb54 	bl	8004768 <_sbrk>
 80210c0:	1c43      	adds	r3, r0, #1
 80210c2:	d102      	bne.n	80210ca <_sbrk_r+0x1a>
 80210c4:	682b      	ldr	r3, [r5, #0]
 80210c6:	b103      	cbz	r3, 80210ca <_sbrk_r+0x1a>
 80210c8:	6023      	str	r3, [r4, #0]
 80210ca:	bd38      	pop	{r3, r4, r5, pc}
 80210cc:	200177fc 	.word	0x200177fc

080210d0 <_write_r>:
 80210d0:	b538      	push	{r3, r4, r5, lr}
 80210d2:	4d07      	ldr	r5, [pc, #28]	; (80210f0 <_write_r+0x20>)
 80210d4:	4604      	mov	r4, r0
 80210d6:	4608      	mov	r0, r1
 80210d8:	4611      	mov	r1, r2
 80210da:	2200      	movs	r2, #0
 80210dc:	602a      	str	r2, [r5, #0]
 80210de:	461a      	mov	r2, r3
 80210e0:	f7e3 faf1 	bl	80046c6 <_write>
 80210e4:	1c43      	adds	r3, r0, #1
 80210e6:	d102      	bne.n	80210ee <_write_r+0x1e>
 80210e8:	682b      	ldr	r3, [r5, #0]
 80210ea:	b103      	cbz	r3, 80210ee <_write_r+0x1e>
 80210ec:	6023      	str	r3, [r4, #0]
 80210ee:	bd38      	pop	{r3, r4, r5, pc}
 80210f0:	200177fc 	.word	0x200177fc

080210f4 <__errno>:
 80210f4:	4b01      	ldr	r3, [pc, #4]	; (80210fc <__errno+0x8>)
 80210f6:	6818      	ldr	r0, [r3, #0]
 80210f8:	4770      	bx	lr
 80210fa:	bf00      	nop
 80210fc:	20000534 	.word	0x20000534

08021100 <__libc_init_array>:
 8021100:	b570      	push	{r4, r5, r6, lr}
 8021102:	4d0d      	ldr	r5, [pc, #52]	; (8021138 <__libc_init_array+0x38>)
 8021104:	4c0d      	ldr	r4, [pc, #52]	; (802113c <__libc_init_array+0x3c>)
 8021106:	1b64      	subs	r4, r4, r5
 8021108:	10a4      	asrs	r4, r4, #2
 802110a:	2600      	movs	r6, #0
 802110c:	42a6      	cmp	r6, r4
 802110e:	d109      	bne.n	8021124 <__libc_init_array+0x24>
 8021110:	4d0b      	ldr	r5, [pc, #44]	; (8021140 <__libc_init_array+0x40>)
 8021112:	4c0c      	ldr	r4, [pc, #48]	; (8021144 <__libc_init_array+0x44>)
 8021114:	f000 febe 	bl	8021e94 <_init>
 8021118:	1b64      	subs	r4, r4, r5
 802111a:	10a4      	asrs	r4, r4, #2
 802111c:	2600      	movs	r6, #0
 802111e:	42a6      	cmp	r6, r4
 8021120:	d105      	bne.n	802112e <__libc_init_array+0x2e>
 8021122:	bd70      	pop	{r4, r5, r6, pc}
 8021124:	f855 3b04 	ldr.w	r3, [r5], #4
 8021128:	4798      	blx	r3
 802112a:	3601      	adds	r6, #1
 802112c:	e7ee      	b.n	802110c <__libc_init_array+0xc>
 802112e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021132:	4798      	blx	r3
 8021134:	3601      	adds	r6, #1
 8021136:	e7f2      	b.n	802111e <__libc_init_array+0x1e>
 8021138:	08023370 	.word	0x08023370
 802113c:	08023370 	.word	0x08023370
 8021140:	08023370 	.word	0x08023370
 8021144:	08023384 	.word	0x08023384

08021148 <__retarget_lock_init_recursive>:
 8021148:	4770      	bx	lr

0802114a <__retarget_lock_acquire_recursive>:
 802114a:	4770      	bx	lr

0802114c <__retarget_lock_release_recursive>:
 802114c:	4770      	bx	lr

0802114e <strcpy>:
 802114e:	4603      	mov	r3, r0
 8021150:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021154:	f803 2b01 	strb.w	r2, [r3], #1
 8021158:	2a00      	cmp	r2, #0
 802115a:	d1f9      	bne.n	8021150 <strcpy+0x2>
 802115c:	4770      	bx	lr

0802115e <memcpy>:
 802115e:	440a      	add	r2, r1
 8021160:	4291      	cmp	r1, r2
 8021162:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021166:	d100      	bne.n	802116a <memcpy+0xc>
 8021168:	4770      	bx	lr
 802116a:	b510      	push	{r4, lr}
 802116c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021174:	4291      	cmp	r1, r2
 8021176:	d1f9      	bne.n	802116c <memcpy+0xe>
 8021178:	bd10      	pop	{r4, pc}
	...

0802117c <__assert_func>:
 802117c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802117e:	4614      	mov	r4, r2
 8021180:	461a      	mov	r2, r3
 8021182:	4b09      	ldr	r3, [pc, #36]	; (80211a8 <__assert_func+0x2c>)
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	4605      	mov	r5, r0
 8021188:	68d8      	ldr	r0, [r3, #12]
 802118a:	b14c      	cbz	r4, 80211a0 <__assert_func+0x24>
 802118c:	4b07      	ldr	r3, [pc, #28]	; (80211ac <__assert_func+0x30>)
 802118e:	9100      	str	r1, [sp, #0]
 8021190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021194:	4906      	ldr	r1, [pc, #24]	; (80211b0 <__assert_func+0x34>)
 8021196:	462b      	mov	r3, r5
 8021198:	f000 fd48 	bl	8021c2c <fiprintf>
 802119c:	f000 fddc 	bl	8021d58 <abort>
 80211a0:	4b04      	ldr	r3, [pc, #16]	; (80211b4 <__assert_func+0x38>)
 80211a2:	461c      	mov	r4, r3
 80211a4:	e7f3      	b.n	802118e <__assert_func+0x12>
 80211a6:	bf00      	nop
 80211a8:	20000534 	.word	0x20000534
 80211ac:	080232f8 	.word	0x080232f8
 80211b0:	08023305 	.word	0x08023305
 80211b4:	08023333 	.word	0x08023333

080211b8 <__env_lock>:
 80211b8:	4801      	ldr	r0, [pc, #4]	; (80211c0 <__env_lock+0x8>)
 80211ba:	f7ff bfc6 	b.w	802114a <__retarget_lock_acquire_recursive>
 80211be:	bf00      	nop
 80211c0:	20017800 	.word	0x20017800

080211c4 <__env_unlock>:
 80211c4:	4801      	ldr	r0, [pc, #4]	; (80211cc <__env_unlock+0x8>)
 80211c6:	f7ff bfc1 	b.w	802114c <__retarget_lock_release_recursive>
 80211ca:	bf00      	nop
 80211cc:	20017800 	.word	0x20017800

080211d0 <_free_r>:
 80211d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80211d2:	2900      	cmp	r1, #0
 80211d4:	d044      	beq.n	8021260 <_free_r+0x90>
 80211d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80211da:	9001      	str	r0, [sp, #4]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	f1a1 0404 	sub.w	r4, r1, #4
 80211e2:	bfb8      	it	lt
 80211e4:	18e4      	addlt	r4, r4, r3
 80211e6:	f7ff fa6f 	bl	80206c8 <__malloc_lock>
 80211ea:	4a1e      	ldr	r2, [pc, #120]	; (8021264 <_free_r+0x94>)
 80211ec:	9801      	ldr	r0, [sp, #4]
 80211ee:	6813      	ldr	r3, [r2, #0]
 80211f0:	b933      	cbnz	r3, 8021200 <_free_r+0x30>
 80211f2:	6063      	str	r3, [r4, #4]
 80211f4:	6014      	str	r4, [r2, #0]
 80211f6:	b003      	add	sp, #12
 80211f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80211fc:	f7ff ba6a 	b.w	80206d4 <__malloc_unlock>
 8021200:	42a3      	cmp	r3, r4
 8021202:	d908      	bls.n	8021216 <_free_r+0x46>
 8021204:	6825      	ldr	r5, [r4, #0]
 8021206:	1961      	adds	r1, r4, r5
 8021208:	428b      	cmp	r3, r1
 802120a:	bf01      	itttt	eq
 802120c:	6819      	ldreq	r1, [r3, #0]
 802120e:	685b      	ldreq	r3, [r3, #4]
 8021210:	1949      	addeq	r1, r1, r5
 8021212:	6021      	streq	r1, [r4, #0]
 8021214:	e7ed      	b.n	80211f2 <_free_r+0x22>
 8021216:	461a      	mov	r2, r3
 8021218:	685b      	ldr	r3, [r3, #4]
 802121a:	b10b      	cbz	r3, 8021220 <_free_r+0x50>
 802121c:	42a3      	cmp	r3, r4
 802121e:	d9fa      	bls.n	8021216 <_free_r+0x46>
 8021220:	6811      	ldr	r1, [r2, #0]
 8021222:	1855      	adds	r5, r2, r1
 8021224:	42a5      	cmp	r5, r4
 8021226:	d10b      	bne.n	8021240 <_free_r+0x70>
 8021228:	6824      	ldr	r4, [r4, #0]
 802122a:	4421      	add	r1, r4
 802122c:	1854      	adds	r4, r2, r1
 802122e:	42a3      	cmp	r3, r4
 8021230:	6011      	str	r1, [r2, #0]
 8021232:	d1e0      	bne.n	80211f6 <_free_r+0x26>
 8021234:	681c      	ldr	r4, [r3, #0]
 8021236:	685b      	ldr	r3, [r3, #4]
 8021238:	6053      	str	r3, [r2, #4]
 802123a:	440c      	add	r4, r1
 802123c:	6014      	str	r4, [r2, #0]
 802123e:	e7da      	b.n	80211f6 <_free_r+0x26>
 8021240:	d902      	bls.n	8021248 <_free_r+0x78>
 8021242:	230c      	movs	r3, #12
 8021244:	6003      	str	r3, [r0, #0]
 8021246:	e7d6      	b.n	80211f6 <_free_r+0x26>
 8021248:	6825      	ldr	r5, [r4, #0]
 802124a:	1961      	adds	r1, r4, r5
 802124c:	428b      	cmp	r3, r1
 802124e:	bf04      	itt	eq
 8021250:	6819      	ldreq	r1, [r3, #0]
 8021252:	685b      	ldreq	r3, [r3, #4]
 8021254:	6063      	str	r3, [r4, #4]
 8021256:	bf04      	itt	eq
 8021258:	1949      	addeq	r1, r1, r5
 802125a:	6021      	streq	r1, [r4, #0]
 802125c:	6054      	str	r4, [r2, #4]
 802125e:	e7ca      	b.n	80211f6 <_free_r+0x26>
 8021260:	b003      	add	sp, #12
 8021262:	bd30      	pop	{r4, r5, pc}
 8021264:	200176b8 	.word	0x200176b8

08021268 <_malloc_usable_size_r>:
 8021268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802126c:	1f18      	subs	r0, r3, #4
 802126e:	2b00      	cmp	r3, #0
 8021270:	bfbc      	itt	lt
 8021272:	580b      	ldrlt	r3, [r1, r0]
 8021274:	18c0      	addlt	r0, r0, r3
 8021276:	4770      	bx	lr

08021278 <__ssputs_r>:
 8021278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802127c:	688e      	ldr	r6, [r1, #8]
 802127e:	461f      	mov	r7, r3
 8021280:	42be      	cmp	r6, r7
 8021282:	680b      	ldr	r3, [r1, #0]
 8021284:	4682      	mov	sl, r0
 8021286:	460c      	mov	r4, r1
 8021288:	4690      	mov	r8, r2
 802128a:	d82c      	bhi.n	80212e6 <__ssputs_r+0x6e>
 802128c:	898a      	ldrh	r2, [r1, #12]
 802128e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021292:	d026      	beq.n	80212e2 <__ssputs_r+0x6a>
 8021294:	6965      	ldr	r5, [r4, #20]
 8021296:	6909      	ldr	r1, [r1, #16]
 8021298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802129c:	eba3 0901 	sub.w	r9, r3, r1
 80212a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80212a4:	1c7b      	adds	r3, r7, #1
 80212a6:	444b      	add	r3, r9
 80212a8:	106d      	asrs	r5, r5, #1
 80212aa:	429d      	cmp	r5, r3
 80212ac:	bf38      	it	cc
 80212ae:	461d      	movcc	r5, r3
 80212b0:	0553      	lsls	r3, r2, #21
 80212b2:	d527      	bpl.n	8021304 <__ssputs_r+0x8c>
 80212b4:	4629      	mov	r1, r5
 80212b6:	f7ff f987 	bl	80205c8 <_malloc_r>
 80212ba:	4606      	mov	r6, r0
 80212bc:	b360      	cbz	r0, 8021318 <__ssputs_r+0xa0>
 80212be:	6921      	ldr	r1, [r4, #16]
 80212c0:	464a      	mov	r2, r9
 80212c2:	f7ff ff4c 	bl	802115e <memcpy>
 80212c6:	89a3      	ldrh	r3, [r4, #12]
 80212c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80212cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80212d0:	81a3      	strh	r3, [r4, #12]
 80212d2:	6126      	str	r6, [r4, #16]
 80212d4:	6165      	str	r5, [r4, #20]
 80212d6:	444e      	add	r6, r9
 80212d8:	eba5 0509 	sub.w	r5, r5, r9
 80212dc:	6026      	str	r6, [r4, #0]
 80212de:	60a5      	str	r5, [r4, #8]
 80212e0:	463e      	mov	r6, r7
 80212e2:	42be      	cmp	r6, r7
 80212e4:	d900      	bls.n	80212e8 <__ssputs_r+0x70>
 80212e6:	463e      	mov	r6, r7
 80212e8:	6820      	ldr	r0, [r4, #0]
 80212ea:	4632      	mov	r2, r6
 80212ec:	4641      	mov	r1, r8
 80212ee:	f7ff fe53 	bl	8020f98 <memmove>
 80212f2:	68a3      	ldr	r3, [r4, #8]
 80212f4:	1b9b      	subs	r3, r3, r6
 80212f6:	60a3      	str	r3, [r4, #8]
 80212f8:	6823      	ldr	r3, [r4, #0]
 80212fa:	4433      	add	r3, r6
 80212fc:	6023      	str	r3, [r4, #0]
 80212fe:	2000      	movs	r0, #0
 8021300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021304:	462a      	mov	r2, r5
 8021306:	f7ff fa5f 	bl	80207c8 <_realloc_r>
 802130a:	4606      	mov	r6, r0
 802130c:	2800      	cmp	r0, #0
 802130e:	d1e0      	bne.n	80212d2 <__ssputs_r+0x5a>
 8021310:	6921      	ldr	r1, [r4, #16]
 8021312:	4650      	mov	r0, sl
 8021314:	f7ff ff5c 	bl	80211d0 <_free_r>
 8021318:	230c      	movs	r3, #12
 802131a:	f8ca 3000 	str.w	r3, [sl]
 802131e:	89a3      	ldrh	r3, [r4, #12]
 8021320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021324:	81a3      	strh	r3, [r4, #12]
 8021326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802132a:	e7e9      	b.n	8021300 <__ssputs_r+0x88>

0802132c <_svfiprintf_r>:
 802132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021330:	4698      	mov	r8, r3
 8021332:	898b      	ldrh	r3, [r1, #12]
 8021334:	061b      	lsls	r3, r3, #24
 8021336:	b09d      	sub	sp, #116	; 0x74
 8021338:	4607      	mov	r7, r0
 802133a:	460d      	mov	r5, r1
 802133c:	4614      	mov	r4, r2
 802133e:	d50e      	bpl.n	802135e <_svfiprintf_r+0x32>
 8021340:	690b      	ldr	r3, [r1, #16]
 8021342:	b963      	cbnz	r3, 802135e <_svfiprintf_r+0x32>
 8021344:	2140      	movs	r1, #64	; 0x40
 8021346:	f7ff f93f 	bl	80205c8 <_malloc_r>
 802134a:	6028      	str	r0, [r5, #0]
 802134c:	6128      	str	r0, [r5, #16]
 802134e:	b920      	cbnz	r0, 802135a <_svfiprintf_r+0x2e>
 8021350:	230c      	movs	r3, #12
 8021352:	603b      	str	r3, [r7, #0]
 8021354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021358:	e0d0      	b.n	80214fc <_svfiprintf_r+0x1d0>
 802135a:	2340      	movs	r3, #64	; 0x40
 802135c:	616b      	str	r3, [r5, #20]
 802135e:	2300      	movs	r3, #0
 8021360:	9309      	str	r3, [sp, #36]	; 0x24
 8021362:	2320      	movs	r3, #32
 8021364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021368:	f8cd 800c 	str.w	r8, [sp, #12]
 802136c:	2330      	movs	r3, #48	; 0x30
 802136e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8021514 <_svfiprintf_r+0x1e8>
 8021372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021376:	f04f 0901 	mov.w	r9, #1
 802137a:	4623      	mov	r3, r4
 802137c:	469a      	mov	sl, r3
 802137e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021382:	b10a      	cbz	r2, 8021388 <_svfiprintf_r+0x5c>
 8021384:	2a25      	cmp	r2, #37	; 0x25
 8021386:	d1f9      	bne.n	802137c <_svfiprintf_r+0x50>
 8021388:	ebba 0b04 	subs.w	fp, sl, r4
 802138c:	d00b      	beq.n	80213a6 <_svfiprintf_r+0x7a>
 802138e:	465b      	mov	r3, fp
 8021390:	4622      	mov	r2, r4
 8021392:	4629      	mov	r1, r5
 8021394:	4638      	mov	r0, r7
 8021396:	f7ff ff6f 	bl	8021278 <__ssputs_r>
 802139a:	3001      	adds	r0, #1
 802139c:	f000 80a9 	beq.w	80214f2 <_svfiprintf_r+0x1c6>
 80213a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80213a2:	445a      	add	r2, fp
 80213a4:	9209      	str	r2, [sp, #36]	; 0x24
 80213a6:	f89a 3000 	ldrb.w	r3, [sl]
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	f000 80a1 	beq.w	80214f2 <_svfiprintf_r+0x1c6>
 80213b0:	2300      	movs	r3, #0
 80213b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80213b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80213ba:	f10a 0a01 	add.w	sl, sl, #1
 80213be:	9304      	str	r3, [sp, #16]
 80213c0:	9307      	str	r3, [sp, #28]
 80213c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80213c6:	931a      	str	r3, [sp, #104]	; 0x68
 80213c8:	4654      	mov	r4, sl
 80213ca:	2205      	movs	r2, #5
 80213cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80213d0:	4850      	ldr	r0, [pc, #320]	; (8021514 <_svfiprintf_r+0x1e8>)
 80213d2:	f7de ff4d 	bl	8000270 <memchr>
 80213d6:	9a04      	ldr	r2, [sp, #16]
 80213d8:	b9d8      	cbnz	r0, 8021412 <_svfiprintf_r+0xe6>
 80213da:	06d0      	lsls	r0, r2, #27
 80213dc:	bf44      	itt	mi
 80213de:	2320      	movmi	r3, #32
 80213e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80213e4:	0711      	lsls	r1, r2, #28
 80213e6:	bf44      	itt	mi
 80213e8:	232b      	movmi	r3, #43	; 0x2b
 80213ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80213ee:	f89a 3000 	ldrb.w	r3, [sl]
 80213f2:	2b2a      	cmp	r3, #42	; 0x2a
 80213f4:	d015      	beq.n	8021422 <_svfiprintf_r+0xf6>
 80213f6:	9a07      	ldr	r2, [sp, #28]
 80213f8:	4654      	mov	r4, sl
 80213fa:	2000      	movs	r0, #0
 80213fc:	f04f 0c0a 	mov.w	ip, #10
 8021400:	4621      	mov	r1, r4
 8021402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021406:	3b30      	subs	r3, #48	; 0x30
 8021408:	2b09      	cmp	r3, #9
 802140a:	d94d      	bls.n	80214a8 <_svfiprintf_r+0x17c>
 802140c:	b1b0      	cbz	r0, 802143c <_svfiprintf_r+0x110>
 802140e:	9207      	str	r2, [sp, #28]
 8021410:	e014      	b.n	802143c <_svfiprintf_r+0x110>
 8021412:	eba0 0308 	sub.w	r3, r0, r8
 8021416:	fa09 f303 	lsl.w	r3, r9, r3
 802141a:	4313      	orrs	r3, r2
 802141c:	9304      	str	r3, [sp, #16]
 802141e:	46a2      	mov	sl, r4
 8021420:	e7d2      	b.n	80213c8 <_svfiprintf_r+0x9c>
 8021422:	9b03      	ldr	r3, [sp, #12]
 8021424:	1d19      	adds	r1, r3, #4
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	9103      	str	r1, [sp, #12]
 802142a:	2b00      	cmp	r3, #0
 802142c:	bfbb      	ittet	lt
 802142e:	425b      	neglt	r3, r3
 8021430:	f042 0202 	orrlt.w	r2, r2, #2
 8021434:	9307      	strge	r3, [sp, #28]
 8021436:	9307      	strlt	r3, [sp, #28]
 8021438:	bfb8      	it	lt
 802143a:	9204      	strlt	r2, [sp, #16]
 802143c:	7823      	ldrb	r3, [r4, #0]
 802143e:	2b2e      	cmp	r3, #46	; 0x2e
 8021440:	d10c      	bne.n	802145c <_svfiprintf_r+0x130>
 8021442:	7863      	ldrb	r3, [r4, #1]
 8021444:	2b2a      	cmp	r3, #42	; 0x2a
 8021446:	d134      	bne.n	80214b2 <_svfiprintf_r+0x186>
 8021448:	9b03      	ldr	r3, [sp, #12]
 802144a:	1d1a      	adds	r2, r3, #4
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	9203      	str	r2, [sp, #12]
 8021450:	2b00      	cmp	r3, #0
 8021452:	bfb8      	it	lt
 8021454:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021458:	3402      	adds	r4, #2
 802145a:	9305      	str	r3, [sp, #20]
 802145c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8021524 <_svfiprintf_r+0x1f8>
 8021460:	7821      	ldrb	r1, [r4, #0]
 8021462:	2203      	movs	r2, #3
 8021464:	4650      	mov	r0, sl
 8021466:	f7de ff03 	bl	8000270 <memchr>
 802146a:	b138      	cbz	r0, 802147c <_svfiprintf_r+0x150>
 802146c:	9b04      	ldr	r3, [sp, #16]
 802146e:	eba0 000a 	sub.w	r0, r0, sl
 8021472:	2240      	movs	r2, #64	; 0x40
 8021474:	4082      	lsls	r2, r0
 8021476:	4313      	orrs	r3, r2
 8021478:	3401      	adds	r4, #1
 802147a:	9304      	str	r3, [sp, #16]
 802147c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021480:	4825      	ldr	r0, [pc, #148]	; (8021518 <_svfiprintf_r+0x1ec>)
 8021482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021486:	2206      	movs	r2, #6
 8021488:	f7de fef2 	bl	8000270 <memchr>
 802148c:	2800      	cmp	r0, #0
 802148e:	d038      	beq.n	8021502 <_svfiprintf_r+0x1d6>
 8021490:	4b22      	ldr	r3, [pc, #136]	; (802151c <_svfiprintf_r+0x1f0>)
 8021492:	bb1b      	cbnz	r3, 80214dc <_svfiprintf_r+0x1b0>
 8021494:	9b03      	ldr	r3, [sp, #12]
 8021496:	3307      	adds	r3, #7
 8021498:	f023 0307 	bic.w	r3, r3, #7
 802149c:	3308      	adds	r3, #8
 802149e:	9303      	str	r3, [sp, #12]
 80214a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214a2:	4433      	add	r3, r6
 80214a4:	9309      	str	r3, [sp, #36]	; 0x24
 80214a6:	e768      	b.n	802137a <_svfiprintf_r+0x4e>
 80214a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80214ac:	460c      	mov	r4, r1
 80214ae:	2001      	movs	r0, #1
 80214b0:	e7a6      	b.n	8021400 <_svfiprintf_r+0xd4>
 80214b2:	2300      	movs	r3, #0
 80214b4:	3401      	adds	r4, #1
 80214b6:	9305      	str	r3, [sp, #20]
 80214b8:	4619      	mov	r1, r3
 80214ba:	f04f 0c0a 	mov.w	ip, #10
 80214be:	4620      	mov	r0, r4
 80214c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80214c4:	3a30      	subs	r2, #48	; 0x30
 80214c6:	2a09      	cmp	r2, #9
 80214c8:	d903      	bls.n	80214d2 <_svfiprintf_r+0x1a6>
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d0c6      	beq.n	802145c <_svfiprintf_r+0x130>
 80214ce:	9105      	str	r1, [sp, #20]
 80214d0:	e7c4      	b.n	802145c <_svfiprintf_r+0x130>
 80214d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80214d6:	4604      	mov	r4, r0
 80214d8:	2301      	movs	r3, #1
 80214da:	e7f0      	b.n	80214be <_svfiprintf_r+0x192>
 80214dc:	ab03      	add	r3, sp, #12
 80214de:	9300      	str	r3, [sp, #0]
 80214e0:	462a      	mov	r2, r5
 80214e2:	4b0f      	ldr	r3, [pc, #60]	; (8021520 <_svfiprintf_r+0x1f4>)
 80214e4:	a904      	add	r1, sp, #16
 80214e6:	4638      	mov	r0, r7
 80214e8:	f3af 8000 	nop.w
 80214ec:	1c42      	adds	r2, r0, #1
 80214ee:	4606      	mov	r6, r0
 80214f0:	d1d6      	bne.n	80214a0 <_svfiprintf_r+0x174>
 80214f2:	89ab      	ldrh	r3, [r5, #12]
 80214f4:	065b      	lsls	r3, r3, #25
 80214f6:	f53f af2d 	bmi.w	8021354 <_svfiprintf_r+0x28>
 80214fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80214fc:	b01d      	add	sp, #116	; 0x74
 80214fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021502:	ab03      	add	r3, sp, #12
 8021504:	9300      	str	r3, [sp, #0]
 8021506:	462a      	mov	r2, r5
 8021508:	4b05      	ldr	r3, [pc, #20]	; (8021520 <_svfiprintf_r+0x1f4>)
 802150a:	a904      	add	r1, sp, #16
 802150c:	4638      	mov	r0, r7
 802150e:	f000 f9bd 	bl	802188c <_printf_i>
 8021512:	e7eb      	b.n	80214ec <_svfiprintf_r+0x1c0>
 8021514:	08023334 	.word	0x08023334
 8021518:	0802333e 	.word	0x0802333e
 802151c:	00000000 	.word	0x00000000
 8021520:	08021279 	.word	0x08021279
 8021524:	0802333a 	.word	0x0802333a

08021528 <__sfputc_r>:
 8021528:	6893      	ldr	r3, [r2, #8]
 802152a:	3b01      	subs	r3, #1
 802152c:	2b00      	cmp	r3, #0
 802152e:	b410      	push	{r4}
 8021530:	6093      	str	r3, [r2, #8]
 8021532:	da08      	bge.n	8021546 <__sfputc_r+0x1e>
 8021534:	6994      	ldr	r4, [r2, #24]
 8021536:	42a3      	cmp	r3, r4
 8021538:	db01      	blt.n	802153e <__sfputc_r+0x16>
 802153a:	290a      	cmp	r1, #10
 802153c:	d103      	bne.n	8021546 <__sfputc_r+0x1e>
 802153e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021542:	f7ff bc83 	b.w	8020e4c <__swbuf_r>
 8021546:	6813      	ldr	r3, [r2, #0]
 8021548:	1c58      	adds	r0, r3, #1
 802154a:	6010      	str	r0, [r2, #0]
 802154c:	7019      	strb	r1, [r3, #0]
 802154e:	4608      	mov	r0, r1
 8021550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021554:	4770      	bx	lr

08021556 <__sfputs_r>:
 8021556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021558:	4606      	mov	r6, r0
 802155a:	460f      	mov	r7, r1
 802155c:	4614      	mov	r4, r2
 802155e:	18d5      	adds	r5, r2, r3
 8021560:	42ac      	cmp	r4, r5
 8021562:	d101      	bne.n	8021568 <__sfputs_r+0x12>
 8021564:	2000      	movs	r0, #0
 8021566:	e007      	b.n	8021578 <__sfputs_r+0x22>
 8021568:	f814 1b01 	ldrb.w	r1, [r4], #1
 802156c:	463a      	mov	r2, r7
 802156e:	4630      	mov	r0, r6
 8021570:	f7ff ffda 	bl	8021528 <__sfputc_r>
 8021574:	1c43      	adds	r3, r0, #1
 8021576:	d1f3      	bne.n	8021560 <__sfputs_r+0xa>
 8021578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802157c <_vfiprintf_r>:
 802157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021580:	460d      	mov	r5, r1
 8021582:	b09d      	sub	sp, #116	; 0x74
 8021584:	4614      	mov	r4, r2
 8021586:	4698      	mov	r8, r3
 8021588:	4606      	mov	r6, r0
 802158a:	b118      	cbz	r0, 8021594 <_vfiprintf_r+0x18>
 802158c:	6a03      	ldr	r3, [r0, #32]
 802158e:	b90b      	cbnz	r3, 8021594 <_vfiprintf_r+0x18>
 8021590:	f7ff fa52 	bl	8020a38 <__sinit>
 8021594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021596:	07d9      	lsls	r1, r3, #31
 8021598:	d405      	bmi.n	80215a6 <_vfiprintf_r+0x2a>
 802159a:	89ab      	ldrh	r3, [r5, #12]
 802159c:	059a      	lsls	r2, r3, #22
 802159e:	d402      	bmi.n	80215a6 <_vfiprintf_r+0x2a>
 80215a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215a2:	f7ff fdd2 	bl	802114a <__retarget_lock_acquire_recursive>
 80215a6:	89ab      	ldrh	r3, [r5, #12]
 80215a8:	071b      	lsls	r3, r3, #28
 80215aa:	d501      	bpl.n	80215b0 <_vfiprintf_r+0x34>
 80215ac:	692b      	ldr	r3, [r5, #16]
 80215ae:	b99b      	cbnz	r3, 80215d8 <_vfiprintf_r+0x5c>
 80215b0:	4629      	mov	r1, r5
 80215b2:	4630      	mov	r0, r6
 80215b4:	f7ff fc88 	bl	8020ec8 <__swsetup_r>
 80215b8:	b170      	cbz	r0, 80215d8 <_vfiprintf_r+0x5c>
 80215ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80215bc:	07dc      	lsls	r4, r3, #31
 80215be:	d504      	bpl.n	80215ca <_vfiprintf_r+0x4e>
 80215c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80215c4:	b01d      	add	sp, #116	; 0x74
 80215c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215ca:	89ab      	ldrh	r3, [r5, #12]
 80215cc:	0598      	lsls	r0, r3, #22
 80215ce:	d4f7      	bmi.n	80215c0 <_vfiprintf_r+0x44>
 80215d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80215d2:	f7ff fdbb 	bl	802114c <__retarget_lock_release_recursive>
 80215d6:	e7f3      	b.n	80215c0 <_vfiprintf_r+0x44>
 80215d8:	2300      	movs	r3, #0
 80215da:	9309      	str	r3, [sp, #36]	; 0x24
 80215dc:	2320      	movs	r3, #32
 80215de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80215e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80215e6:	2330      	movs	r3, #48	; 0x30
 80215e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802179c <_vfiprintf_r+0x220>
 80215ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80215f0:	f04f 0901 	mov.w	r9, #1
 80215f4:	4623      	mov	r3, r4
 80215f6:	469a      	mov	sl, r3
 80215f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215fc:	b10a      	cbz	r2, 8021602 <_vfiprintf_r+0x86>
 80215fe:	2a25      	cmp	r2, #37	; 0x25
 8021600:	d1f9      	bne.n	80215f6 <_vfiprintf_r+0x7a>
 8021602:	ebba 0b04 	subs.w	fp, sl, r4
 8021606:	d00b      	beq.n	8021620 <_vfiprintf_r+0xa4>
 8021608:	465b      	mov	r3, fp
 802160a:	4622      	mov	r2, r4
 802160c:	4629      	mov	r1, r5
 802160e:	4630      	mov	r0, r6
 8021610:	f7ff ffa1 	bl	8021556 <__sfputs_r>
 8021614:	3001      	adds	r0, #1
 8021616:	f000 80a9 	beq.w	802176c <_vfiprintf_r+0x1f0>
 802161a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802161c:	445a      	add	r2, fp
 802161e:	9209      	str	r2, [sp, #36]	; 0x24
 8021620:	f89a 3000 	ldrb.w	r3, [sl]
 8021624:	2b00      	cmp	r3, #0
 8021626:	f000 80a1 	beq.w	802176c <_vfiprintf_r+0x1f0>
 802162a:	2300      	movs	r3, #0
 802162c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021634:	f10a 0a01 	add.w	sl, sl, #1
 8021638:	9304      	str	r3, [sp, #16]
 802163a:	9307      	str	r3, [sp, #28]
 802163c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021640:	931a      	str	r3, [sp, #104]	; 0x68
 8021642:	4654      	mov	r4, sl
 8021644:	2205      	movs	r2, #5
 8021646:	f814 1b01 	ldrb.w	r1, [r4], #1
 802164a:	4854      	ldr	r0, [pc, #336]	; (802179c <_vfiprintf_r+0x220>)
 802164c:	f7de fe10 	bl	8000270 <memchr>
 8021650:	9a04      	ldr	r2, [sp, #16]
 8021652:	b9d8      	cbnz	r0, 802168c <_vfiprintf_r+0x110>
 8021654:	06d1      	lsls	r1, r2, #27
 8021656:	bf44      	itt	mi
 8021658:	2320      	movmi	r3, #32
 802165a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802165e:	0713      	lsls	r3, r2, #28
 8021660:	bf44      	itt	mi
 8021662:	232b      	movmi	r3, #43	; 0x2b
 8021664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021668:	f89a 3000 	ldrb.w	r3, [sl]
 802166c:	2b2a      	cmp	r3, #42	; 0x2a
 802166e:	d015      	beq.n	802169c <_vfiprintf_r+0x120>
 8021670:	9a07      	ldr	r2, [sp, #28]
 8021672:	4654      	mov	r4, sl
 8021674:	2000      	movs	r0, #0
 8021676:	f04f 0c0a 	mov.w	ip, #10
 802167a:	4621      	mov	r1, r4
 802167c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021680:	3b30      	subs	r3, #48	; 0x30
 8021682:	2b09      	cmp	r3, #9
 8021684:	d94d      	bls.n	8021722 <_vfiprintf_r+0x1a6>
 8021686:	b1b0      	cbz	r0, 80216b6 <_vfiprintf_r+0x13a>
 8021688:	9207      	str	r2, [sp, #28]
 802168a:	e014      	b.n	80216b6 <_vfiprintf_r+0x13a>
 802168c:	eba0 0308 	sub.w	r3, r0, r8
 8021690:	fa09 f303 	lsl.w	r3, r9, r3
 8021694:	4313      	orrs	r3, r2
 8021696:	9304      	str	r3, [sp, #16]
 8021698:	46a2      	mov	sl, r4
 802169a:	e7d2      	b.n	8021642 <_vfiprintf_r+0xc6>
 802169c:	9b03      	ldr	r3, [sp, #12]
 802169e:	1d19      	adds	r1, r3, #4
 80216a0:	681b      	ldr	r3, [r3, #0]
 80216a2:	9103      	str	r1, [sp, #12]
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	bfbb      	ittet	lt
 80216a8:	425b      	neglt	r3, r3
 80216aa:	f042 0202 	orrlt.w	r2, r2, #2
 80216ae:	9307      	strge	r3, [sp, #28]
 80216b0:	9307      	strlt	r3, [sp, #28]
 80216b2:	bfb8      	it	lt
 80216b4:	9204      	strlt	r2, [sp, #16]
 80216b6:	7823      	ldrb	r3, [r4, #0]
 80216b8:	2b2e      	cmp	r3, #46	; 0x2e
 80216ba:	d10c      	bne.n	80216d6 <_vfiprintf_r+0x15a>
 80216bc:	7863      	ldrb	r3, [r4, #1]
 80216be:	2b2a      	cmp	r3, #42	; 0x2a
 80216c0:	d134      	bne.n	802172c <_vfiprintf_r+0x1b0>
 80216c2:	9b03      	ldr	r3, [sp, #12]
 80216c4:	1d1a      	adds	r2, r3, #4
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	9203      	str	r2, [sp, #12]
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	bfb8      	it	lt
 80216ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80216d2:	3402      	adds	r4, #2
 80216d4:	9305      	str	r3, [sp, #20]
 80216d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80217ac <_vfiprintf_r+0x230>
 80216da:	7821      	ldrb	r1, [r4, #0]
 80216dc:	2203      	movs	r2, #3
 80216de:	4650      	mov	r0, sl
 80216e0:	f7de fdc6 	bl	8000270 <memchr>
 80216e4:	b138      	cbz	r0, 80216f6 <_vfiprintf_r+0x17a>
 80216e6:	9b04      	ldr	r3, [sp, #16]
 80216e8:	eba0 000a 	sub.w	r0, r0, sl
 80216ec:	2240      	movs	r2, #64	; 0x40
 80216ee:	4082      	lsls	r2, r0
 80216f0:	4313      	orrs	r3, r2
 80216f2:	3401      	adds	r4, #1
 80216f4:	9304      	str	r3, [sp, #16]
 80216f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216fa:	4829      	ldr	r0, [pc, #164]	; (80217a0 <_vfiprintf_r+0x224>)
 80216fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021700:	2206      	movs	r2, #6
 8021702:	f7de fdb5 	bl	8000270 <memchr>
 8021706:	2800      	cmp	r0, #0
 8021708:	d03f      	beq.n	802178a <_vfiprintf_r+0x20e>
 802170a:	4b26      	ldr	r3, [pc, #152]	; (80217a4 <_vfiprintf_r+0x228>)
 802170c:	bb1b      	cbnz	r3, 8021756 <_vfiprintf_r+0x1da>
 802170e:	9b03      	ldr	r3, [sp, #12]
 8021710:	3307      	adds	r3, #7
 8021712:	f023 0307 	bic.w	r3, r3, #7
 8021716:	3308      	adds	r3, #8
 8021718:	9303      	str	r3, [sp, #12]
 802171a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802171c:	443b      	add	r3, r7
 802171e:	9309      	str	r3, [sp, #36]	; 0x24
 8021720:	e768      	b.n	80215f4 <_vfiprintf_r+0x78>
 8021722:	fb0c 3202 	mla	r2, ip, r2, r3
 8021726:	460c      	mov	r4, r1
 8021728:	2001      	movs	r0, #1
 802172a:	e7a6      	b.n	802167a <_vfiprintf_r+0xfe>
 802172c:	2300      	movs	r3, #0
 802172e:	3401      	adds	r4, #1
 8021730:	9305      	str	r3, [sp, #20]
 8021732:	4619      	mov	r1, r3
 8021734:	f04f 0c0a 	mov.w	ip, #10
 8021738:	4620      	mov	r0, r4
 802173a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802173e:	3a30      	subs	r2, #48	; 0x30
 8021740:	2a09      	cmp	r2, #9
 8021742:	d903      	bls.n	802174c <_vfiprintf_r+0x1d0>
 8021744:	2b00      	cmp	r3, #0
 8021746:	d0c6      	beq.n	80216d6 <_vfiprintf_r+0x15a>
 8021748:	9105      	str	r1, [sp, #20]
 802174a:	e7c4      	b.n	80216d6 <_vfiprintf_r+0x15a>
 802174c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021750:	4604      	mov	r4, r0
 8021752:	2301      	movs	r3, #1
 8021754:	e7f0      	b.n	8021738 <_vfiprintf_r+0x1bc>
 8021756:	ab03      	add	r3, sp, #12
 8021758:	9300      	str	r3, [sp, #0]
 802175a:	462a      	mov	r2, r5
 802175c:	4b12      	ldr	r3, [pc, #72]	; (80217a8 <_vfiprintf_r+0x22c>)
 802175e:	a904      	add	r1, sp, #16
 8021760:	4630      	mov	r0, r6
 8021762:	f3af 8000 	nop.w
 8021766:	4607      	mov	r7, r0
 8021768:	1c78      	adds	r0, r7, #1
 802176a:	d1d6      	bne.n	802171a <_vfiprintf_r+0x19e>
 802176c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802176e:	07d9      	lsls	r1, r3, #31
 8021770:	d405      	bmi.n	802177e <_vfiprintf_r+0x202>
 8021772:	89ab      	ldrh	r3, [r5, #12]
 8021774:	059a      	lsls	r2, r3, #22
 8021776:	d402      	bmi.n	802177e <_vfiprintf_r+0x202>
 8021778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802177a:	f7ff fce7 	bl	802114c <__retarget_lock_release_recursive>
 802177e:	89ab      	ldrh	r3, [r5, #12]
 8021780:	065b      	lsls	r3, r3, #25
 8021782:	f53f af1d 	bmi.w	80215c0 <_vfiprintf_r+0x44>
 8021786:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021788:	e71c      	b.n	80215c4 <_vfiprintf_r+0x48>
 802178a:	ab03      	add	r3, sp, #12
 802178c:	9300      	str	r3, [sp, #0]
 802178e:	462a      	mov	r2, r5
 8021790:	4b05      	ldr	r3, [pc, #20]	; (80217a8 <_vfiprintf_r+0x22c>)
 8021792:	a904      	add	r1, sp, #16
 8021794:	4630      	mov	r0, r6
 8021796:	f000 f879 	bl	802188c <_printf_i>
 802179a:	e7e4      	b.n	8021766 <_vfiprintf_r+0x1ea>
 802179c:	08023334 	.word	0x08023334
 80217a0:	0802333e 	.word	0x0802333e
 80217a4:	00000000 	.word	0x00000000
 80217a8:	08021557 	.word	0x08021557
 80217ac:	0802333a 	.word	0x0802333a

080217b0 <_printf_common>:
 80217b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217b4:	4616      	mov	r6, r2
 80217b6:	4699      	mov	r9, r3
 80217b8:	688a      	ldr	r2, [r1, #8]
 80217ba:	690b      	ldr	r3, [r1, #16]
 80217bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80217c0:	4293      	cmp	r3, r2
 80217c2:	bfb8      	it	lt
 80217c4:	4613      	movlt	r3, r2
 80217c6:	6033      	str	r3, [r6, #0]
 80217c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80217cc:	4607      	mov	r7, r0
 80217ce:	460c      	mov	r4, r1
 80217d0:	b10a      	cbz	r2, 80217d6 <_printf_common+0x26>
 80217d2:	3301      	adds	r3, #1
 80217d4:	6033      	str	r3, [r6, #0]
 80217d6:	6823      	ldr	r3, [r4, #0]
 80217d8:	0699      	lsls	r1, r3, #26
 80217da:	bf42      	ittt	mi
 80217dc:	6833      	ldrmi	r3, [r6, #0]
 80217de:	3302      	addmi	r3, #2
 80217e0:	6033      	strmi	r3, [r6, #0]
 80217e2:	6825      	ldr	r5, [r4, #0]
 80217e4:	f015 0506 	ands.w	r5, r5, #6
 80217e8:	d106      	bne.n	80217f8 <_printf_common+0x48>
 80217ea:	f104 0a19 	add.w	sl, r4, #25
 80217ee:	68e3      	ldr	r3, [r4, #12]
 80217f0:	6832      	ldr	r2, [r6, #0]
 80217f2:	1a9b      	subs	r3, r3, r2
 80217f4:	42ab      	cmp	r3, r5
 80217f6:	dc26      	bgt.n	8021846 <_printf_common+0x96>
 80217f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80217fc:	1e13      	subs	r3, r2, #0
 80217fe:	6822      	ldr	r2, [r4, #0]
 8021800:	bf18      	it	ne
 8021802:	2301      	movne	r3, #1
 8021804:	0692      	lsls	r2, r2, #26
 8021806:	d42b      	bmi.n	8021860 <_printf_common+0xb0>
 8021808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802180c:	4649      	mov	r1, r9
 802180e:	4638      	mov	r0, r7
 8021810:	47c0      	blx	r8
 8021812:	3001      	adds	r0, #1
 8021814:	d01e      	beq.n	8021854 <_printf_common+0xa4>
 8021816:	6823      	ldr	r3, [r4, #0]
 8021818:	6922      	ldr	r2, [r4, #16]
 802181a:	f003 0306 	and.w	r3, r3, #6
 802181e:	2b04      	cmp	r3, #4
 8021820:	bf02      	ittt	eq
 8021822:	68e5      	ldreq	r5, [r4, #12]
 8021824:	6833      	ldreq	r3, [r6, #0]
 8021826:	1aed      	subeq	r5, r5, r3
 8021828:	68a3      	ldr	r3, [r4, #8]
 802182a:	bf0c      	ite	eq
 802182c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021830:	2500      	movne	r5, #0
 8021832:	4293      	cmp	r3, r2
 8021834:	bfc4      	itt	gt
 8021836:	1a9b      	subgt	r3, r3, r2
 8021838:	18ed      	addgt	r5, r5, r3
 802183a:	2600      	movs	r6, #0
 802183c:	341a      	adds	r4, #26
 802183e:	42b5      	cmp	r5, r6
 8021840:	d11a      	bne.n	8021878 <_printf_common+0xc8>
 8021842:	2000      	movs	r0, #0
 8021844:	e008      	b.n	8021858 <_printf_common+0xa8>
 8021846:	2301      	movs	r3, #1
 8021848:	4652      	mov	r2, sl
 802184a:	4649      	mov	r1, r9
 802184c:	4638      	mov	r0, r7
 802184e:	47c0      	blx	r8
 8021850:	3001      	adds	r0, #1
 8021852:	d103      	bne.n	802185c <_printf_common+0xac>
 8021854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802185c:	3501      	adds	r5, #1
 802185e:	e7c6      	b.n	80217ee <_printf_common+0x3e>
 8021860:	18e1      	adds	r1, r4, r3
 8021862:	1c5a      	adds	r2, r3, #1
 8021864:	2030      	movs	r0, #48	; 0x30
 8021866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802186a:	4422      	add	r2, r4
 802186c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021874:	3302      	adds	r3, #2
 8021876:	e7c7      	b.n	8021808 <_printf_common+0x58>
 8021878:	2301      	movs	r3, #1
 802187a:	4622      	mov	r2, r4
 802187c:	4649      	mov	r1, r9
 802187e:	4638      	mov	r0, r7
 8021880:	47c0      	blx	r8
 8021882:	3001      	adds	r0, #1
 8021884:	d0e6      	beq.n	8021854 <_printf_common+0xa4>
 8021886:	3601      	adds	r6, #1
 8021888:	e7d9      	b.n	802183e <_printf_common+0x8e>
	...

0802188c <_printf_i>:
 802188c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021890:	7e0f      	ldrb	r7, [r1, #24]
 8021892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021894:	2f78      	cmp	r7, #120	; 0x78
 8021896:	4691      	mov	r9, r2
 8021898:	4680      	mov	r8, r0
 802189a:	460c      	mov	r4, r1
 802189c:	469a      	mov	sl, r3
 802189e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80218a2:	d807      	bhi.n	80218b4 <_printf_i+0x28>
 80218a4:	2f62      	cmp	r7, #98	; 0x62
 80218a6:	d80a      	bhi.n	80218be <_printf_i+0x32>
 80218a8:	2f00      	cmp	r7, #0
 80218aa:	f000 80d4 	beq.w	8021a56 <_printf_i+0x1ca>
 80218ae:	2f58      	cmp	r7, #88	; 0x58
 80218b0:	f000 80c0 	beq.w	8021a34 <_printf_i+0x1a8>
 80218b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80218b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80218bc:	e03a      	b.n	8021934 <_printf_i+0xa8>
 80218be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80218c2:	2b15      	cmp	r3, #21
 80218c4:	d8f6      	bhi.n	80218b4 <_printf_i+0x28>
 80218c6:	a101      	add	r1, pc, #4	; (adr r1, 80218cc <_printf_i+0x40>)
 80218c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80218cc:	08021925 	.word	0x08021925
 80218d0:	08021939 	.word	0x08021939
 80218d4:	080218b5 	.word	0x080218b5
 80218d8:	080218b5 	.word	0x080218b5
 80218dc:	080218b5 	.word	0x080218b5
 80218e0:	080218b5 	.word	0x080218b5
 80218e4:	08021939 	.word	0x08021939
 80218e8:	080218b5 	.word	0x080218b5
 80218ec:	080218b5 	.word	0x080218b5
 80218f0:	080218b5 	.word	0x080218b5
 80218f4:	080218b5 	.word	0x080218b5
 80218f8:	08021a3d 	.word	0x08021a3d
 80218fc:	08021965 	.word	0x08021965
 8021900:	080219f7 	.word	0x080219f7
 8021904:	080218b5 	.word	0x080218b5
 8021908:	080218b5 	.word	0x080218b5
 802190c:	08021a5f 	.word	0x08021a5f
 8021910:	080218b5 	.word	0x080218b5
 8021914:	08021965 	.word	0x08021965
 8021918:	080218b5 	.word	0x080218b5
 802191c:	080218b5 	.word	0x080218b5
 8021920:	080219ff 	.word	0x080219ff
 8021924:	682b      	ldr	r3, [r5, #0]
 8021926:	1d1a      	adds	r2, r3, #4
 8021928:	681b      	ldr	r3, [r3, #0]
 802192a:	602a      	str	r2, [r5, #0]
 802192c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021934:	2301      	movs	r3, #1
 8021936:	e09f      	b.n	8021a78 <_printf_i+0x1ec>
 8021938:	6820      	ldr	r0, [r4, #0]
 802193a:	682b      	ldr	r3, [r5, #0]
 802193c:	0607      	lsls	r7, r0, #24
 802193e:	f103 0104 	add.w	r1, r3, #4
 8021942:	6029      	str	r1, [r5, #0]
 8021944:	d501      	bpl.n	802194a <_printf_i+0xbe>
 8021946:	681e      	ldr	r6, [r3, #0]
 8021948:	e003      	b.n	8021952 <_printf_i+0xc6>
 802194a:	0646      	lsls	r6, r0, #25
 802194c:	d5fb      	bpl.n	8021946 <_printf_i+0xba>
 802194e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8021952:	2e00      	cmp	r6, #0
 8021954:	da03      	bge.n	802195e <_printf_i+0xd2>
 8021956:	232d      	movs	r3, #45	; 0x2d
 8021958:	4276      	negs	r6, r6
 802195a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802195e:	485a      	ldr	r0, [pc, #360]	; (8021ac8 <_printf_i+0x23c>)
 8021960:	230a      	movs	r3, #10
 8021962:	e012      	b.n	802198a <_printf_i+0xfe>
 8021964:	682b      	ldr	r3, [r5, #0]
 8021966:	6820      	ldr	r0, [r4, #0]
 8021968:	1d19      	adds	r1, r3, #4
 802196a:	6029      	str	r1, [r5, #0]
 802196c:	0605      	lsls	r5, r0, #24
 802196e:	d501      	bpl.n	8021974 <_printf_i+0xe8>
 8021970:	681e      	ldr	r6, [r3, #0]
 8021972:	e002      	b.n	802197a <_printf_i+0xee>
 8021974:	0641      	lsls	r1, r0, #25
 8021976:	d5fb      	bpl.n	8021970 <_printf_i+0xe4>
 8021978:	881e      	ldrh	r6, [r3, #0]
 802197a:	4853      	ldr	r0, [pc, #332]	; (8021ac8 <_printf_i+0x23c>)
 802197c:	2f6f      	cmp	r7, #111	; 0x6f
 802197e:	bf0c      	ite	eq
 8021980:	2308      	moveq	r3, #8
 8021982:	230a      	movne	r3, #10
 8021984:	2100      	movs	r1, #0
 8021986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802198a:	6865      	ldr	r5, [r4, #4]
 802198c:	60a5      	str	r5, [r4, #8]
 802198e:	2d00      	cmp	r5, #0
 8021990:	bfa2      	ittt	ge
 8021992:	6821      	ldrge	r1, [r4, #0]
 8021994:	f021 0104 	bicge.w	r1, r1, #4
 8021998:	6021      	strge	r1, [r4, #0]
 802199a:	b90e      	cbnz	r6, 80219a0 <_printf_i+0x114>
 802199c:	2d00      	cmp	r5, #0
 802199e:	d04b      	beq.n	8021a38 <_printf_i+0x1ac>
 80219a0:	4615      	mov	r5, r2
 80219a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80219a6:	fb03 6711 	mls	r7, r3, r1, r6
 80219aa:	5dc7      	ldrb	r7, [r0, r7]
 80219ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80219b0:	4637      	mov	r7, r6
 80219b2:	42bb      	cmp	r3, r7
 80219b4:	460e      	mov	r6, r1
 80219b6:	d9f4      	bls.n	80219a2 <_printf_i+0x116>
 80219b8:	2b08      	cmp	r3, #8
 80219ba:	d10b      	bne.n	80219d4 <_printf_i+0x148>
 80219bc:	6823      	ldr	r3, [r4, #0]
 80219be:	07de      	lsls	r6, r3, #31
 80219c0:	d508      	bpl.n	80219d4 <_printf_i+0x148>
 80219c2:	6923      	ldr	r3, [r4, #16]
 80219c4:	6861      	ldr	r1, [r4, #4]
 80219c6:	4299      	cmp	r1, r3
 80219c8:	bfde      	ittt	le
 80219ca:	2330      	movle	r3, #48	; 0x30
 80219cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80219d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80219d4:	1b52      	subs	r2, r2, r5
 80219d6:	6122      	str	r2, [r4, #16]
 80219d8:	f8cd a000 	str.w	sl, [sp]
 80219dc:	464b      	mov	r3, r9
 80219de:	aa03      	add	r2, sp, #12
 80219e0:	4621      	mov	r1, r4
 80219e2:	4640      	mov	r0, r8
 80219e4:	f7ff fee4 	bl	80217b0 <_printf_common>
 80219e8:	3001      	adds	r0, #1
 80219ea:	d14a      	bne.n	8021a82 <_printf_i+0x1f6>
 80219ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80219f0:	b004      	add	sp, #16
 80219f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219f6:	6823      	ldr	r3, [r4, #0]
 80219f8:	f043 0320 	orr.w	r3, r3, #32
 80219fc:	6023      	str	r3, [r4, #0]
 80219fe:	4833      	ldr	r0, [pc, #204]	; (8021acc <_printf_i+0x240>)
 8021a00:	2778      	movs	r7, #120	; 0x78
 8021a02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021a06:	6823      	ldr	r3, [r4, #0]
 8021a08:	6829      	ldr	r1, [r5, #0]
 8021a0a:	061f      	lsls	r7, r3, #24
 8021a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8021a10:	d402      	bmi.n	8021a18 <_printf_i+0x18c>
 8021a12:	065f      	lsls	r7, r3, #25
 8021a14:	bf48      	it	mi
 8021a16:	b2b6      	uxthmi	r6, r6
 8021a18:	07df      	lsls	r7, r3, #31
 8021a1a:	bf48      	it	mi
 8021a1c:	f043 0320 	orrmi.w	r3, r3, #32
 8021a20:	6029      	str	r1, [r5, #0]
 8021a22:	bf48      	it	mi
 8021a24:	6023      	strmi	r3, [r4, #0]
 8021a26:	b91e      	cbnz	r6, 8021a30 <_printf_i+0x1a4>
 8021a28:	6823      	ldr	r3, [r4, #0]
 8021a2a:	f023 0320 	bic.w	r3, r3, #32
 8021a2e:	6023      	str	r3, [r4, #0]
 8021a30:	2310      	movs	r3, #16
 8021a32:	e7a7      	b.n	8021984 <_printf_i+0xf8>
 8021a34:	4824      	ldr	r0, [pc, #144]	; (8021ac8 <_printf_i+0x23c>)
 8021a36:	e7e4      	b.n	8021a02 <_printf_i+0x176>
 8021a38:	4615      	mov	r5, r2
 8021a3a:	e7bd      	b.n	80219b8 <_printf_i+0x12c>
 8021a3c:	682b      	ldr	r3, [r5, #0]
 8021a3e:	6826      	ldr	r6, [r4, #0]
 8021a40:	6961      	ldr	r1, [r4, #20]
 8021a42:	1d18      	adds	r0, r3, #4
 8021a44:	6028      	str	r0, [r5, #0]
 8021a46:	0635      	lsls	r5, r6, #24
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	d501      	bpl.n	8021a50 <_printf_i+0x1c4>
 8021a4c:	6019      	str	r1, [r3, #0]
 8021a4e:	e002      	b.n	8021a56 <_printf_i+0x1ca>
 8021a50:	0670      	lsls	r0, r6, #25
 8021a52:	d5fb      	bpl.n	8021a4c <_printf_i+0x1c0>
 8021a54:	8019      	strh	r1, [r3, #0]
 8021a56:	2300      	movs	r3, #0
 8021a58:	6123      	str	r3, [r4, #16]
 8021a5a:	4615      	mov	r5, r2
 8021a5c:	e7bc      	b.n	80219d8 <_printf_i+0x14c>
 8021a5e:	682b      	ldr	r3, [r5, #0]
 8021a60:	1d1a      	adds	r2, r3, #4
 8021a62:	602a      	str	r2, [r5, #0]
 8021a64:	681d      	ldr	r5, [r3, #0]
 8021a66:	6862      	ldr	r2, [r4, #4]
 8021a68:	2100      	movs	r1, #0
 8021a6a:	4628      	mov	r0, r5
 8021a6c:	f7de fc00 	bl	8000270 <memchr>
 8021a70:	b108      	cbz	r0, 8021a76 <_printf_i+0x1ea>
 8021a72:	1b40      	subs	r0, r0, r5
 8021a74:	6060      	str	r0, [r4, #4]
 8021a76:	6863      	ldr	r3, [r4, #4]
 8021a78:	6123      	str	r3, [r4, #16]
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021a80:	e7aa      	b.n	80219d8 <_printf_i+0x14c>
 8021a82:	6923      	ldr	r3, [r4, #16]
 8021a84:	462a      	mov	r2, r5
 8021a86:	4649      	mov	r1, r9
 8021a88:	4640      	mov	r0, r8
 8021a8a:	47d0      	blx	sl
 8021a8c:	3001      	adds	r0, #1
 8021a8e:	d0ad      	beq.n	80219ec <_printf_i+0x160>
 8021a90:	6823      	ldr	r3, [r4, #0]
 8021a92:	079b      	lsls	r3, r3, #30
 8021a94:	d413      	bmi.n	8021abe <_printf_i+0x232>
 8021a96:	68e0      	ldr	r0, [r4, #12]
 8021a98:	9b03      	ldr	r3, [sp, #12]
 8021a9a:	4298      	cmp	r0, r3
 8021a9c:	bfb8      	it	lt
 8021a9e:	4618      	movlt	r0, r3
 8021aa0:	e7a6      	b.n	80219f0 <_printf_i+0x164>
 8021aa2:	2301      	movs	r3, #1
 8021aa4:	4632      	mov	r2, r6
 8021aa6:	4649      	mov	r1, r9
 8021aa8:	4640      	mov	r0, r8
 8021aaa:	47d0      	blx	sl
 8021aac:	3001      	adds	r0, #1
 8021aae:	d09d      	beq.n	80219ec <_printf_i+0x160>
 8021ab0:	3501      	adds	r5, #1
 8021ab2:	68e3      	ldr	r3, [r4, #12]
 8021ab4:	9903      	ldr	r1, [sp, #12]
 8021ab6:	1a5b      	subs	r3, r3, r1
 8021ab8:	42ab      	cmp	r3, r5
 8021aba:	dcf2      	bgt.n	8021aa2 <_printf_i+0x216>
 8021abc:	e7eb      	b.n	8021a96 <_printf_i+0x20a>
 8021abe:	2500      	movs	r5, #0
 8021ac0:	f104 0619 	add.w	r6, r4, #25
 8021ac4:	e7f5      	b.n	8021ab2 <_printf_i+0x226>
 8021ac6:	bf00      	nop
 8021ac8:	08023345 	.word	0x08023345
 8021acc:	08023356 	.word	0x08023356

08021ad0 <__sflush_r>:
 8021ad0:	898a      	ldrh	r2, [r1, #12]
 8021ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ad6:	4605      	mov	r5, r0
 8021ad8:	0710      	lsls	r0, r2, #28
 8021ada:	460c      	mov	r4, r1
 8021adc:	d458      	bmi.n	8021b90 <__sflush_r+0xc0>
 8021ade:	684b      	ldr	r3, [r1, #4]
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	dc05      	bgt.n	8021af0 <__sflush_r+0x20>
 8021ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	dc02      	bgt.n	8021af0 <__sflush_r+0x20>
 8021aea:	2000      	movs	r0, #0
 8021aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021af2:	2e00      	cmp	r6, #0
 8021af4:	d0f9      	beq.n	8021aea <__sflush_r+0x1a>
 8021af6:	2300      	movs	r3, #0
 8021af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021afc:	682f      	ldr	r7, [r5, #0]
 8021afe:	6a21      	ldr	r1, [r4, #32]
 8021b00:	602b      	str	r3, [r5, #0]
 8021b02:	d032      	beq.n	8021b6a <__sflush_r+0x9a>
 8021b04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021b06:	89a3      	ldrh	r3, [r4, #12]
 8021b08:	075a      	lsls	r2, r3, #29
 8021b0a:	d505      	bpl.n	8021b18 <__sflush_r+0x48>
 8021b0c:	6863      	ldr	r3, [r4, #4]
 8021b0e:	1ac0      	subs	r0, r0, r3
 8021b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021b12:	b10b      	cbz	r3, 8021b18 <__sflush_r+0x48>
 8021b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021b16:	1ac0      	subs	r0, r0, r3
 8021b18:	2300      	movs	r3, #0
 8021b1a:	4602      	mov	r2, r0
 8021b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021b1e:	6a21      	ldr	r1, [r4, #32]
 8021b20:	4628      	mov	r0, r5
 8021b22:	47b0      	blx	r6
 8021b24:	1c43      	adds	r3, r0, #1
 8021b26:	89a3      	ldrh	r3, [r4, #12]
 8021b28:	d106      	bne.n	8021b38 <__sflush_r+0x68>
 8021b2a:	6829      	ldr	r1, [r5, #0]
 8021b2c:	291d      	cmp	r1, #29
 8021b2e:	d82b      	bhi.n	8021b88 <__sflush_r+0xb8>
 8021b30:	4a29      	ldr	r2, [pc, #164]	; (8021bd8 <__sflush_r+0x108>)
 8021b32:	410a      	asrs	r2, r1
 8021b34:	07d6      	lsls	r6, r2, #31
 8021b36:	d427      	bmi.n	8021b88 <__sflush_r+0xb8>
 8021b38:	2200      	movs	r2, #0
 8021b3a:	6062      	str	r2, [r4, #4]
 8021b3c:	04d9      	lsls	r1, r3, #19
 8021b3e:	6922      	ldr	r2, [r4, #16]
 8021b40:	6022      	str	r2, [r4, #0]
 8021b42:	d504      	bpl.n	8021b4e <__sflush_r+0x7e>
 8021b44:	1c42      	adds	r2, r0, #1
 8021b46:	d101      	bne.n	8021b4c <__sflush_r+0x7c>
 8021b48:	682b      	ldr	r3, [r5, #0]
 8021b4a:	b903      	cbnz	r3, 8021b4e <__sflush_r+0x7e>
 8021b4c:	6560      	str	r0, [r4, #84]	; 0x54
 8021b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021b50:	602f      	str	r7, [r5, #0]
 8021b52:	2900      	cmp	r1, #0
 8021b54:	d0c9      	beq.n	8021aea <__sflush_r+0x1a>
 8021b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021b5a:	4299      	cmp	r1, r3
 8021b5c:	d002      	beq.n	8021b64 <__sflush_r+0x94>
 8021b5e:	4628      	mov	r0, r5
 8021b60:	f7ff fb36 	bl	80211d0 <_free_r>
 8021b64:	2000      	movs	r0, #0
 8021b66:	6360      	str	r0, [r4, #52]	; 0x34
 8021b68:	e7c0      	b.n	8021aec <__sflush_r+0x1c>
 8021b6a:	2301      	movs	r3, #1
 8021b6c:	4628      	mov	r0, r5
 8021b6e:	47b0      	blx	r6
 8021b70:	1c41      	adds	r1, r0, #1
 8021b72:	d1c8      	bne.n	8021b06 <__sflush_r+0x36>
 8021b74:	682b      	ldr	r3, [r5, #0]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d0c5      	beq.n	8021b06 <__sflush_r+0x36>
 8021b7a:	2b1d      	cmp	r3, #29
 8021b7c:	d001      	beq.n	8021b82 <__sflush_r+0xb2>
 8021b7e:	2b16      	cmp	r3, #22
 8021b80:	d101      	bne.n	8021b86 <__sflush_r+0xb6>
 8021b82:	602f      	str	r7, [r5, #0]
 8021b84:	e7b1      	b.n	8021aea <__sflush_r+0x1a>
 8021b86:	89a3      	ldrh	r3, [r4, #12]
 8021b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b8c:	81a3      	strh	r3, [r4, #12]
 8021b8e:	e7ad      	b.n	8021aec <__sflush_r+0x1c>
 8021b90:	690f      	ldr	r7, [r1, #16]
 8021b92:	2f00      	cmp	r7, #0
 8021b94:	d0a9      	beq.n	8021aea <__sflush_r+0x1a>
 8021b96:	0793      	lsls	r3, r2, #30
 8021b98:	680e      	ldr	r6, [r1, #0]
 8021b9a:	bf08      	it	eq
 8021b9c:	694b      	ldreq	r3, [r1, #20]
 8021b9e:	600f      	str	r7, [r1, #0]
 8021ba0:	bf18      	it	ne
 8021ba2:	2300      	movne	r3, #0
 8021ba4:	eba6 0807 	sub.w	r8, r6, r7
 8021ba8:	608b      	str	r3, [r1, #8]
 8021baa:	f1b8 0f00 	cmp.w	r8, #0
 8021bae:	dd9c      	ble.n	8021aea <__sflush_r+0x1a>
 8021bb0:	6a21      	ldr	r1, [r4, #32]
 8021bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021bb4:	4643      	mov	r3, r8
 8021bb6:	463a      	mov	r2, r7
 8021bb8:	4628      	mov	r0, r5
 8021bba:	47b0      	blx	r6
 8021bbc:	2800      	cmp	r0, #0
 8021bbe:	dc06      	bgt.n	8021bce <__sflush_r+0xfe>
 8021bc0:	89a3      	ldrh	r3, [r4, #12]
 8021bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bc6:	81a3      	strh	r3, [r4, #12]
 8021bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021bcc:	e78e      	b.n	8021aec <__sflush_r+0x1c>
 8021bce:	4407      	add	r7, r0
 8021bd0:	eba8 0800 	sub.w	r8, r8, r0
 8021bd4:	e7e9      	b.n	8021baa <__sflush_r+0xda>
 8021bd6:	bf00      	nop
 8021bd8:	dfbffffe 	.word	0xdfbffffe

08021bdc <_fflush_r>:
 8021bdc:	b538      	push	{r3, r4, r5, lr}
 8021bde:	690b      	ldr	r3, [r1, #16]
 8021be0:	4605      	mov	r5, r0
 8021be2:	460c      	mov	r4, r1
 8021be4:	b913      	cbnz	r3, 8021bec <_fflush_r+0x10>
 8021be6:	2500      	movs	r5, #0
 8021be8:	4628      	mov	r0, r5
 8021bea:	bd38      	pop	{r3, r4, r5, pc}
 8021bec:	b118      	cbz	r0, 8021bf6 <_fflush_r+0x1a>
 8021bee:	6a03      	ldr	r3, [r0, #32]
 8021bf0:	b90b      	cbnz	r3, 8021bf6 <_fflush_r+0x1a>
 8021bf2:	f7fe ff21 	bl	8020a38 <__sinit>
 8021bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	d0f3      	beq.n	8021be6 <_fflush_r+0xa>
 8021bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021c00:	07d0      	lsls	r0, r2, #31
 8021c02:	d404      	bmi.n	8021c0e <_fflush_r+0x32>
 8021c04:	0599      	lsls	r1, r3, #22
 8021c06:	d402      	bmi.n	8021c0e <_fflush_r+0x32>
 8021c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c0a:	f7ff fa9e 	bl	802114a <__retarget_lock_acquire_recursive>
 8021c0e:	4628      	mov	r0, r5
 8021c10:	4621      	mov	r1, r4
 8021c12:	f7ff ff5d 	bl	8021ad0 <__sflush_r>
 8021c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021c18:	07da      	lsls	r2, r3, #31
 8021c1a:	4605      	mov	r5, r0
 8021c1c:	d4e4      	bmi.n	8021be8 <_fflush_r+0xc>
 8021c1e:	89a3      	ldrh	r3, [r4, #12]
 8021c20:	059b      	lsls	r3, r3, #22
 8021c22:	d4e1      	bmi.n	8021be8 <_fflush_r+0xc>
 8021c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c26:	f7ff fa91 	bl	802114c <__retarget_lock_release_recursive>
 8021c2a:	e7dd      	b.n	8021be8 <_fflush_r+0xc>

08021c2c <fiprintf>:
 8021c2c:	b40e      	push	{r1, r2, r3}
 8021c2e:	b503      	push	{r0, r1, lr}
 8021c30:	4601      	mov	r1, r0
 8021c32:	ab03      	add	r3, sp, #12
 8021c34:	4805      	ldr	r0, [pc, #20]	; (8021c4c <fiprintf+0x20>)
 8021c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c3a:	6800      	ldr	r0, [r0, #0]
 8021c3c:	9301      	str	r3, [sp, #4]
 8021c3e:	f7ff fc9d 	bl	802157c <_vfiprintf_r>
 8021c42:	b002      	add	sp, #8
 8021c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8021c48:	b003      	add	sp, #12
 8021c4a:	4770      	bx	lr
 8021c4c:	20000534 	.word	0x20000534

08021c50 <__swhatbuf_r>:
 8021c50:	b570      	push	{r4, r5, r6, lr}
 8021c52:	460c      	mov	r4, r1
 8021c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c58:	2900      	cmp	r1, #0
 8021c5a:	b096      	sub	sp, #88	; 0x58
 8021c5c:	4615      	mov	r5, r2
 8021c5e:	461e      	mov	r6, r3
 8021c60:	da0d      	bge.n	8021c7e <__swhatbuf_r+0x2e>
 8021c62:	89a3      	ldrh	r3, [r4, #12]
 8021c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8021c68:	f04f 0100 	mov.w	r1, #0
 8021c6c:	bf0c      	ite	eq
 8021c6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8021c72:	2340      	movne	r3, #64	; 0x40
 8021c74:	2000      	movs	r0, #0
 8021c76:	6031      	str	r1, [r6, #0]
 8021c78:	602b      	str	r3, [r5, #0]
 8021c7a:	b016      	add	sp, #88	; 0x58
 8021c7c:	bd70      	pop	{r4, r5, r6, pc}
 8021c7e:	466a      	mov	r2, sp
 8021c80:	f000 f848 	bl	8021d14 <_fstat_r>
 8021c84:	2800      	cmp	r0, #0
 8021c86:	dbec      	blt.n	8021c62 <__swhatbuf_r+0x12>
 8021c88:	9901      	ldr	r1, [sp, #4]
 8021c8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8021c8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8021c92:	4259      	negs	r1, r3
 8021c94:	4159      	adcs	r1, r3
 8021c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021c9a:	e7eb      	b.n	8021c74 <__swhatbuf_r+0x24>

08021c9c <__smakebuf_r>:
 8021c9c:	898b      	ldrh	r3, [r1, #12]
 8021c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021ca0:	079d      	lsls	r5, r3, #30
 8021ca2:	4606      	mov	r6, r0
 8021ca4:	460c      	mov	r4, r1
 8021ca6:	d507      	bpl.n	8021cb8 <__smakebuf_r+0x1c>
 8021ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021cac:	6023      	str	r3, [r4, #0]
 8021cae:	6123      	str	r3, [r4, #16]
 8021cb0:	2301      	movs	r3, #1
 8021cb2:	6163      	str	r3, [r4, #20]
 8021cb4:	b002      	add	sp, #8
 8021cb6:	bd70      	pop	{r4, r5, r6, pc}
 8021cb8:	ab01      	add	r3, sp, #4
 8021cba:	466a      	mov	r2, sp
 8021cbc:	f7ff ffc8 	bl	8021c50 <__swhatbuf_r>
 8021cc0:	9900      	ldr	r1, [sp, #0]
 8021cc2:	4605      	mov	r5, r0
 8021cc4:	4630      	mov	r0, r6
 8021cc6:	f7fe fc7f 	bl	80205c8 <_malloc_r>
 8021cca:	b948      	cbnz	r0, 8021ce0 <__smakebuf_r+0x44>
 8021ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cd0:	059a      	lsls	r2, r3, #22
 8021cd2:	d4ef      	bmi.n	8021cb4 <__smakebuf_r+0x18>
 8021cd4:	f023 0303 	bic.w	r3, r3, #3
 8021cd8:	f043 0302 	orr.w	r3, r3, #2
 8021cdc:	81a3      	strh	r3, [r4, #12]
 8021cde:	e7e3      	b.n	8021ca8 <__smakebuf_r+0xc>
 8021ce0:	89a3      	ldrh	r3, [r4, #12]
 8021ce2:	6020      	str	r0, [r4, #0]
 8021ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021ce8:	81a3      	strh	r3, [r4, #12]
 8021cea:	9b00      	ldr	r3, [sp, #0]
 8021cec:	6163      	str	r3, [r4, #20]
 8021cee:	9b01      	ldr	r3, [sp, #4]
 8021cf0:	6120      	str	r0, [r4, #16]
 8021cf2:	b15b      	cbz	r3, 8021d0c <__smakebuf_r+0x70>
 8021cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021cf8:	4630      	mov	r0, r6
 8021cfa:	f000 f81d 	bl	8021d38 <_isatty_r>
 8021cfe:	b128      	cbz	r0, 8021d0c <__smakebuf_r+0x70>
 8021d00:	89a3      	ldrh	r3, [r4, #12]
 8021d02:	f023 0303 	bic.w	r3, r3, #3
 8021d06:	f043 0301 	orr.w	r3, r3, #1
 8021d0a:	81a3      	strh	r3, [r4, #12]
 8021d0c:	89a3      	ldrh	r3, [r4, #12]
 8021d0e:	431d      	orrs	r5, r3
 8021d10:	81a5      	strh	r5, [r4, #12]
 8021d12:	e7cf      	b.n	8021cb4 <__smakebuf_r+0x18>

08021d14 <_fstat_r>:
 8021d14:	b538      	push	{r3, r4, r5, lr}
 8021d16:	4d07      	ldr	r5, [pc, #28]	; (8021d34 <_fstat_r+0x20>)
 8021d18:	2300      	movs	r3, #0
 8021d1a:	4604      	mov	r4, r0
 8021d1c:	4608      	mov	r0, r1
 8021d1e:	4611      	mov	r1, r2
 8021d20:	602b      	str	r3, [r5, #0]
 8021d22:	f7e2 fcf8 	bl	8004716 <_fstat>
 8021d26:	1c43      	adds	r3, r0, #1
 8021d28:	d102      	bne.n	8021d30 <_fstat_r+0x1c>
 8021d2a:	682b      	ldr	r3, [r5, #0]
 8021d2c:	b103      	cbz	r3, 8021d30 <_fstat_r+0x1c>
 8021d2e:	6023      	str	r3, [r4, #0]
 8021d30:	bd38      	pop	{r3, r4, r5, pc}
 8021d32:	bf00      	nop
 8021d34:	200177fc 	.word	0x200177fc

08021d38 <_isatty_r>:
 8021d38:	b538      	push	{r3, r4, r5, lr}
 8021d3a:	4d06      	ldr	r5, [pc, #24]	; (8021d54 <_isatty_r+0x1c>)
 8021d3c:	2300      	movs	r3, #0
 8021d3e:	4604      	mov	r4, r0
 8021d40:	4608      	mov	r0, r1
 8021d42:	602b      	str	r3, [r5, #0]
 8021d44:	f7e2 fcf7 	bl	8004736 <_isatty>
 8021d48:	1c43      	adds	r3, r0, #1
 8021d4a:	d102      	bne.n	8021d52 <_isatty_r+0x1a>
 8021d4c:	682b      	ldr	r3, [r5, #0]
 8021d4e:	b103      	cbz	r3, 8021d52 <_isatty_r+0x1a>
 8021d50:	6023      	str	r3, [r4, #0]
 8021d52:	bd38      	pop	{r3, r4, r5, pc}
 8021d54:	200177fc 	.word	0x200177fc

08021d58 <abort>:
 8021d58:	b508      	push	{r3, lr}
 8021d5a:	2006      	movs	r0, #6
 8021d5c:	f000 f82c 	bl	8021db8 <raise>
 8021d60:	2001      	movs	r0, #1
 8021d62:	f7e2 fc89 	bl	8004678 <_exit>

08021d66 <_raise_r>:
 8021d66:	291f      	cmp	r1, #31
 8021d68:	b538      	push	{r3, r4, r5, lr}
 8021d6a:	4604      	mov	r4, r0
 8021d6c:	460d      	mov	r5, r1
 8021d6e:	d904      	bls.n	8021d7a <_raise_r+0x14>
 8021d70:	2316      	movs	r3, #22
 8021d72:	6003      	str	r3, [r0, #0]
 8021d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021d78:	bd38      	pop	{r3, r4, r5, pc}
 8021d7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8021d7c:	b112      	cbz	r2, 8021d84 <_raise_r+0x1e>
 8021d7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021d82:	b94b      	cbnz	r3, 8021d98 <_raise_r+0x32>
 8021d84:	4620      	mov	r0, r4
 8021d86:	f000 f831 	bl	8021dec <_getpid_r>
 8021d8a:	462a      	mov	r2, r5
 8021d8c:	4601      	mov	r1, r0
 8021d8e:	4620      	mov	r0, r4
 8021d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021d94:	f000 b818 	b.w	8021dc8 <_kill_r>
 8021d98:	2b01      	cmp	r3, #1
 8021d9a:	d00a      	beq.n	8021db2 <_raise_r+0x4c>
 8021d9c:	1c59      	adds	r1, r3, #1
 8021d9e:	d103      	bne.n	8021da8 <_raise_r+0x42>
 8021da0:	2316      	movs	r3, #22
 8021da2:	6003      	str	r3, [r0, #0]
 8021da4:	2001      	movs	r0, #1
 8021da6:	e7e7      	b.n	8021d78 <_raise_r+0x12>
 8021da8:	2400      	movs	r4, #0
 8021daa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021dae:	4628      	mov	r0, r5
 8021db0:	4798      	blx	r3
 8021db2:	2000      	movs	r0, #0
 8021db4:	e7e0      	b.n	8021d78 <_raise_r+0x12>
	...

08021db8 <raise>:
 8021db8:	4b02      	ldr	r3, [pc, #8]	; (8021dc4 <raise+0xc>)
 8021dba:	4601      	mov	r1, r0
 8021dbc:	6818      	ldr	r0, [r3, #0]
 8021dbe:	f7ff bfd2 	b.w	8021d66 <_raise_r>
 8021dc2:	bf00      	nop
 8021dc4:	20000534 	.word	0x20000534

08021dc8 <_kill_r>:
 8021dc8:	b538      	push	{r3, r4, r5, lr}
 8021dca:	4d07      	ldr	r5, [pc, #28]	; (8021de8 <_kill_r+0x20>)
 8021dcc:	2300      	movs	r3, #0
 8021dce:	4604      	mov	r4, r0
 8021dd0:	4608      	mov	r0, r1
 8021dd2:	4611      	mov	r1, r2
 8021dd4:	602b      	str	r3, [r5, #0]
 8021dd6:	f7e2 fc3f 	bl	8004658 <_kill>
 8021dda:	1c43      	adds	r3, r0, #1
 8021ddc:	d102      	bne.n	8021de4 <_kill_r+0x1c>
 8021dde:	682b      	ldr	r3, [r5, #0]
 8021de0:	b103      	cbz	r3, 8021de4 <_kill_r+0x1c>
 8021de2:	6023      	str	r3, [r4, #0]
 8021de4:	bd38      	pop	{r3, r4, r5, pc}
 8021de6:	bf00      	nop
 8021de8:	200177fc 	.word	0x200177fc

08021dec <_getpid_r>:
 8021dec:	f7e2 bc2c 	b.w	8004648 <_getpid>

08021df0 <fmaxf>:
 8021df0:	b508      	push	{r3, lr}
 8021df2:	ed2d 8b02 	vpush	{d8}
 8021df6:	eeb0 8a40 	vmov.f32	s16, s0
 8021dfa:	eef0 8a60 	vmov.f32	s17, s1
 8021dfe:	f000 f82d 	bl	8021e5c <__fpclassifyf>
 8021e02:	b148      	cbz	r0, 8021e18 <fmaxf+0x28>
 8021e04:	eeb0 0a68 	vmov.f32	s0, s17
 8021e08:	f000 f828 	bl	8021e5c <__fpclassifyf>
 8021e0c:	b130      	cbz	r0, 8021e1c <fmaxf+0x2c>
 8021e0e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e16:	dc01      	bgt.n	8021e1c <fmaxf+0x2c>
 8021e18:	eeb0 8a68 	vmov.f32	s16, s17
 8021e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8021e20:	ecbd 8b02 	vpop	{d8}
 8021e24:	bd08      	pop	{r3, pc}

08021e26 <fminf>:
 8021e26:	b508      	push	{r3, lr}
 8021e28:	ed2d 8b02 	vpush	{d8}
 8021e2c:	eeb0 8a40 	vmov.f32	s16, s0
 8021e30:	eef0 8a60 	vmov.f32	s17, s1
 8021e34:	f000 f812 	bl	8021e5c <__fpclassifyf>
 8021e38:	b148      	cbz	r0, 8021e4e <fminf+0x28>
 8021e3a:	eeb0 0a68 	vmov.f32	s0, s17
 8021e3e:	f000 f80d 	bl	8021e5c <__fpclassifyf>
 8021e42:	b130      	cbz	r0, 8021e52 <fminf+0x2c>
 8021e44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e4c:	d401      	bmi.n	8021e52 <fminf+0x2c>
 8021e4e:	eeb0 8a68 	vmov.f32	s16, s17
 8021e52:	eeb0 0a48 	vmov.f32	s0, s16
 8021e56:	ecbd 8b02 	vpop	{d8}
 8021e5a:	bd08      	pop	{r3, pc}

08021e5c <__fpclassifyf>:
 8021e5c:	ee10 3a10 	vmov	r3, s0
 8021e60:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8021e64:	d00d      	beq.n	8021e82 <__fpclassifyf+0x26>
 8021e66:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8021e6a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8021e6e:	d30a      	bcc.n	8021e86 <__fpclassifyf+0x2a>
 8021e70:	4b07      	ldr	r3, [pc, #28]	; (8021e90 <__fpclassifyf+0x34>)
 8021e72:	1e42      	subs	r2, r0, #1
 8021e74:	429a      	cmp	r2, r3
 8021e76:	d908      	bls.n	8021e8a <__fpclassifyf+0x2e>
 8021e78:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8021e7c:	4258      	negs	r0, r3
 8021e7e:	4158      	adcs	r0, r3
 8021e80:	4770      	bx	lr
 8021e82:	2002      	movs	r0, #2
 8021e84:	4770      	bx	lr
 8021e86:	2004      	movs	r0, #4
 8021e88:	4770      	bx	lr
 8021e8a:	2003      	movs	r0, #3
 8021e8c:	4770      	bx	lr
 8021e8e:	bf00      	nop
 8021e90:	007ffffe 	.word	0x007ffffe

08021e94 <_init>:
 8021e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e96:	bf00      	nop
 8021e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e9a:	bc08      	pop	{r3}
 8021e9c:	469e      	mov	lr, r3
 8021e9e:	4770      	bx	lr

08021ea0 <_fini>:
 8021ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ea2:	bf00      	nop
 8021ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ea6:	bc08      	pop	{r3}
 8021ea8:	469e      	mov	lr, r3
 8021eaa:	4770      	bx	lr
